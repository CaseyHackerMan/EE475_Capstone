
STM32_Discovery_Peripherals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08010780  08010780  00020780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c8c  08010c8c  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08010c8c  08010c8c  00020c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c94  08010c94  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c94  08010c94  00020c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c98  08010c98  00020c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08010c9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00000a8c  20000200  20000200  00030200  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c8c  20000c8c  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f837  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004436  00000000  00000000  0004fa67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a08  00000000  00000000  00053ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001878  00000000  00000000  000558a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265aa  00000000  00000000  00057120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000212c5  00000000  00000000  0007d6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7f67  00000000  00000000  0009e98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001768f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000857c  00000000  00000000  00176948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010768 	.word	0x08010768

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08010768 	.word	0x08010768

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <HAL_UART_RxCpltCallback+0x54>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d11d      	bne.n	8001044 <HAL_UART_RxCpltCallback+0x4c>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); // Blue LED
 8001008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100c:	4810      	ldr	r0, [pc, #64]	; (8001050 <HAL_UART_RxCpltCallback+0x58>)
 800100e:	f001 ff6a 	bl	8002ee6 <HAL_GPIO_TogglePin>
		memcpy(GPS_Buf, UART3_Rx_buf, GPS_BUF_N-1);
 8001012:	2277      	movs	r2, #119	; 0x77
 8001014:	490f      	ldr	r1, [pc, #60]	; (8001054 <HAL_UART_RxCpltCallback+0x5c>)
 8001016:	4810      	ldr	r0, [pc, #64]	; (8001058 <HAL_UART_RxCpltCallback+0x60>)
 8001018:	f00a fedc 	bl	800bdd4 <memcpy>
		GPS_Buf[GPS_BUF_N-1] = '\0';
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_UART_RxCpltCallback+0x60>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		//HAL_UART_Transmit(&huart2, GPS_Buf, strlen((char*) GPS_Buf), HAL_MAX_DELAY);
		char* Data_Buffer_ptr = strnstr((char*) GPS_Buf, "GPGGA", GPS_BUF_N);
 8001024:	2278      	movs	r2, #120	; 0x78
 8001026:	490d      	ldr	r1, [pc, #52]	; (800105c <HAL_UART_RxCpltCallback+0x64>)
 8001028:	480b      	ldr	r0, [pc, #44]	; (8001058 <HAL_UART_RxCpltCallback+0x60>)
 800102a:	f00b fe79 	bl	800cd20 <strnstr>
 800102e:	60f8      	str	r0, [r7, #12]
		if (Data_Buffer_ptr == 0) return;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <HAL_UART_RxCpltCallback+0x4a>
		    // If "GPGGA" sentence not found, print an error message
		    HAL_UART_Transmit(&huart2, (uint8_t*) "GPGGA not found\r\n", 17, HAL_MAX_DELAY);
		}
		*/

		parse_GPS(Data_Buffer_ptr, GPS_Buf+GPS_BUF_N);
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_UART_RxCpltCallback+0x68>)
 8001038:	4619      	mov	r1, r3
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f000 f812 	bl	8001064 <parse_GPS>
 8001040:	e000      	b.n	8001044 <HAL_UART_RxCpltCallback+0x4c>
		if (Data_Buffer_ptr == 0) return;
 8001042:	bf00      	nop
			Time = t;
			Latitude = lat;
			Longitude = lon;
		}*/
	}
}
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000358 	.word	0x20000358
 8001050:	40020c00 	.word	0x40020c00
 8001054:	2000051c 	.word	0x2000051c
 8001058:	200004a0 	.word	0x200004a0
 800105c:	08010780 	.word	0x08010780
 8001060:	20000518 	.word	0x20000518

08001064 <parse_GPS>:



int parse_GPS(char* start, char* end) {
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b08b      	sub	sp, #44	; 0x2c
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	// GPGGA,035140.00,4739.22314,N,12218.23740,W,2,08,1.14,49.3,M,-18.8,M,,0000*55

	char* ptr = start;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	627b      	str	r3, [r7, #36]	; 0x24

	// Put this outside, make it available to other functions
	char* items[6];
	int i = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]

	items[i++] = ptr;
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	623a      	str	r2, [r7, #32]
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	3328      	adds	r3, #40	; 0x28
 8001080:	443b      	add	r3, r7
 8001082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001084:	f843 2c20 	str.w	r2, [r3, #-32]

	while (ptr < end) {
 8001088:	e016      	b.n	80010b8 <parse_GPS+0x54>
		if (*ptr == ',') {
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b2c      	cmp	r3, #44	; 0x2c
 8001090:	d10f      	bne.n	80010b2 <parse_GPS+0x4e>
			*ptr = '\0';
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
			if (i < 6) {
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	2b05      	cmp	r3, #5
 800109c:	dc11      	bgt.n	80010c2 <parse_GPS+0x5e>
				items[i++] = ptr+1;
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	623a      	str	r2, [r7, #32]
 80010a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a6:	3201      	adds	r2, #1
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	3328      	adds	r3, #40	; 0x28
 80010ac:	443b      	add	r3, r7
 80010ae:	f843 2c20 	str.w	r2, [r3, #-32]
			} else break;
		}
		ptr++;
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	3301      	adds	r3, #1
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
	while (ptr < end) {
 80010b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d3e4      	bcc.n	800108a <parse_GPS+0x26>
 80010c0:	e000      	b.n	80010c4 <parse_GPS+0x60>
			} else break;
 80010c2:	bf00      	nop
	}

	Time = atof(items[1]);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00a fe46 	bl	800bd58 <atof>
 80010cc:	ee07 0a90 	vmov	s15, r0
 80010d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <parse_GPS+0xd0>)
 80010d6:	edc3 7a00 	vstr	s15, [r3]
	//Latitude = atof(items[2]);
	//Longitude = atof(items[4]);


	HAL_UART_Transmit(&huart2, items[1], strlen((char*) items[1]), HAL_MAX_DELAY);
 80010da:	68fc      	ldr	r4, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f876 	bl	80001d0 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	4621      	mov	r1, r4
 80010ee:	4812      	ldr	r0, [pc, #72]	; (8001138 <parse_GPS+0xd4>)
 80010f0:	f006 f9a1 	bl	8007436 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, items[2], strlen((char*) items[2]), HAL_MAX_DELAY);
 80010f4:	693c      	ldr	r4, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f869 	bl	80001d0 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	4621      	mov	r1, r4
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <parse_GPS+0xd4>)
 800110a:	f006 f994 	bl	8007436 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, items[4], strlen((char*) items[4]), HAL_MAX_DELAY);
 800110e:	69bc      	ldr	r4, [r7, #24]
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f85c 	bl	80001d0 <strlen>
 8001118:	4603      	mov	r3, r0
 800111a:	b29a      	uxth	r2, r3
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	4621      	mov	r1, r4
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <parse_GPS+0xd4>)
 8001124:	f006 f987 	bl	8007436 <HAL_UART_Transmit>


	return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	372c      	adds	r7, #44	; 0x2c
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}
 8001132:	bf00      	nop
 8001134:	20000518 	.word	0x20000518
 8001138:	20000358 	.word	0x20000358

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001142:	f000 ff71 	bl	8002028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001146:	f000 f857 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114a:	f000 fa6f 	bl	800162c <MX_GPIO_Init>
  MX_DMA_Init();
 800114e:	f000 fa45 	bl	80015dc <MX_DMA_Init>
  MX_I2C1_Init();
 8001152:	f000 f8bb 	bl	80012cc <MX_I2C1_Init>
  MX_I2S3_Init();
 8001156:	f000 f8e7 	bl	8001328 <MX_I2S3_Init>
  MX_SPI1_Init();
 800115a:	f000 f915 	bl	8001388 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800115e:	f00a faf3 	bl	800b748 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001162:	f000 f9e7 	bl	8001534 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001166:	f000 fa0f 	bl	8001588 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800116a:	f000 f943 	bl	80013f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  int i = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  float comp_f = 0;
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  memset(UART3_Rx_buf, 0, GPS_BUF_N);
 8001178:	2278      	movs	r2, #120	; 0x78
 800117a:	2100      	movs	r1, #0
 800117c:	4818      	ldr	r0, [pc, #96]	; (80011e0 <main+0xa4>)
 800117e:	f00a fe37 	bl	800bdf0 <memset>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001182:	2100      	movs	r1, #0
 8001184:	4817      	ldr	r0, [pc, #92]	; (80011e4 <main+0xa8>)
 8001186:	f005 fad9 	bl	800673c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_DMA(&huart2, UART3_Rx_buf, GPS_BUF_N);
 800118a:	2278      	movs	r2, #120	; 0x78
 800118c:	4914      	ldr	r1, [pc, #80]	; (80011e0 <main+0xa4>)
 800118e:	4816      	ldr	r0, [pc, #88]	; (80011e8 <main+0xac>)
 8001190:	f006 f9e3 	bl	800755a <HAL_UART_Receive_DMA>
  uint8_t mode = BNO055_MODE_COMPASS;
 8001194:	2309      	movs	r3, #9
 8001196:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_OPRMODE, I2C_MEMADD_SIZE_8BIT, &mode, 1, HAL_MAX_DELAY);
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2301      	movs	r3, #1
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	223d      	movs	r2, #61	; 0x3d
 80011aa:	2150      	movs	r1, #80	; 0x50
 80011ac:	480f      	ldr	r0, [pc, #60]	; (80011ec <main+0xb0>)
 80011ae:	f003 fc03 	bl	80049b8 <HAL_I2C_Mem_Write>
  HAL_UART_Transmit(&huart2, (uint8_t*) "Hello!\r\n", 8, HAL_MAX_DELAY);
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	2208      	movs	r2, #8
 80011b8:	490d      	ldr	r1, [pc, #52]	; (80011f0 <main+0xb4>)
 80011ba:	480b      	ldr	r0, [pc, #44]	; (80011e8 <main+0xac>)
 80011bc:	f006 f93b 	bl	8007436 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80011c0:	f00a fae8 	bl	800b794 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); // Orange LED
 80011c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <main+0xb8>)
 80011ca:	f001 fe8c 	bl	8002ee6 <HAL_GPIO_TogglePin>

    //float comp = (Heading > 180 ? Heading-360 : Heading)/180.0;
    //comp_f += (comp-comp_f)*.01;

    //set_steering(comp_f);
    HAL_Delay(LOOP_DELAY);
 80011ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d2:	f000 ff9b 	bl	800210c <HAL_Delay>
    i++;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
    MX_USB_HOST_Process();
 80011dc:	e7f0      	b.n	80011c0 <main+0x84>
 80011de:	bf00      	nop
 80011e0:	2000051c 	.word	0x2000051c
 80011e4:	20000310 	.word	0x20000310
 80011e8:	20000358 	.word	0x20000358
 80011ec:	2000021c 	.word	0x2000021c
 80011f0:	080107b4 	.word	0x080107b4
 80011f4:	40020c00 	.word	0x40020c00

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2230      	movs	r2, #48	; 0x30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f00a fdf2 	bl	800bdf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <SystemClock_Config+0xcc>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <SystemClock_Config+0xcc>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <SystemClock_Config+0xcc>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <SystemClock_Config+0xd0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <SystemClock_Config+0xd0>)
 8001242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <SystemClock_Config+0xd0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001254:	2301      	movs	r3, #1
 8001256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001262:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001268:	2308      	movs	r3, #8
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800126c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001270:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001272:	2302      	movs	r3, #2
 8001274:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001276:	2307      	movs	r3, #7
 8001278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fb52 	bl	8005928 <HAL_RCC_OscConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800128a:	f000 facd 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	230f      	movs	r3, #15
 8001290:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001292:	2302      	movs	r3, #2
 8001294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800129a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2105      	movs	r1, #5
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 fdb3 	bl	8005e18 <HAL_RCC_ClockConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012b8:	f000 fab6 	bl	8001828 <Error_Handler>
  }
}
 80012bc:	bf00      	nop
 80012be:	3750      	adds	r7, #80	; 0x50
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000

080012cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_I2C1_Init+0x50>)
 80012d2:	4a13      	ldr	r2, [pc, #76]	; (8001320 <MX_I2C1_Init+0x54>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_I2C1_Init+0x50>)
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_I2C1_Init+0x58>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_I2C1_Init+0x50>)
 80012ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_I2C1_Init+0x50>)
 800130a:	f003 fa11 	bl	8004730 <HAL_I2C_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 fa88 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000021c 	.word	0x2000021c
 8001320:	40005400 	.word	0x40005400
 8001324:	000186a0 	.word	0x000186a0

08001328 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_I2S3_Init+0x54>)
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <MX_I2S3_Init+0x58>)
 8001330:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2S3_Init+0x54>)
 8001334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001338:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <MX_I2S3_Init+0x54>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_I2S3_Init+0x54>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <MX_I2S3_Init+0x54>)
 8001348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_I2S3_Init+0x54>)
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <MX_I2S3_Init+0x5c>)
 8001352:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_I2S3_Init+0x54>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_I2S3_Init+0x54>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_I2S3_Init+0x54>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_I2S3_Init+0x54>)
 8001368:	f003 fe3e 	bl	8004fe8 <HAL_I2S_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001372:	f000 fa59 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000270 	.word	0x20000270
 8001380:	40003c00 	.word	0x40003c00
 8001384:	00017700 	.word	0x00017700

08001388 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_SPI1_Init+0x64>)
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <MX_SPI1_Init+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_SPI1_Init+0x64>)
 8001394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_SPI1_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_SPI1_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_SPI1_Init+0x64>)
 80013b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_SPI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_SPI1_Init+0x64>)
 80013d4:	220a      	movs	r2, #10
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_SPI1_Init+0x64>)
 80013da:	f005 f87d 	bl	80064d8 <HAL_SPI_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013e4:	f000 fa20 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200002b8 	.word	0x200002b8
 80013f0:	40013000 	.word	0x40013000

080013f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b096      	sub	sp, #88	; 0x58
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2220      	movs	r2, #32
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f00a fcdf 	bl	800bdf0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001432:	4b3e      	ldr	r3, [pc, #248]	; (800152c <MX_TIM1_Init+0x138>)
 8001434:	4a3e      	ldr	r2, [pc, #248]	; (8001530 <MX_TIM1_Init+0x13c>)
 8001436:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 8001438:	4b3c      	ldr	r3, [pc, #240]	; (800152c <MX_TIM1_Init+0x138>)
 800143a:	22a8      	movs	r2, #168	; 0xa8
 800143c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b3b      	ldr	r3, [pc, #236]	; (800152c <MX_TIM1_Init+0x138>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <MX_TIM1_Init+0x138>)
 8001446:	f644 6220 	movw	r2, #20000	; 0x4e20
 800144a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b37      	ldr	r3, [pc, #220]	; (800152c <MX_TIM1_Init+0x138>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <MX_TIM1_Init+0x138>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b34      	ldr	r3, [pc, #208]	; (800152c <MX_TIM1_Init+0x138>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800145e:	4833      	ldr	r0, [pc, #204]	; (800152c <MX_TIM1_Init+0x138>)
 8001460:	f005 f8c3 	bl	80065ea <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800146a:	f000 f9dd 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001478:	4619      	mov	r1, r3
 800147a:	482c      	ldr	r0, [pc, #176]	; (800152c <MX_TIM1_Init+0x138>)
 800147c:	f005 fae8 	bl	8006a50 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001486:	f000 f9cf 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800148a:	4828      	ldr	r0, [pc, #160]	; (800152c <MX_TIM1_Init+0x138>)
 800148c:	f005 f8fc 	bl	8006688 <HAL_TIM_PWM_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001496:	f000 f9c7 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014a6:	4619      	mov	r1, r3
 80014a8:	4820      	ldr	r0, [pc, #128]	; (800152c <MX_TIM1_Init+0x138>)
 80014aa:	f005 fea9 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80014b4:	f000 f9b8 	bl	8001828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b8:	2360      	movs	r3, #96	; 0x60
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014c4:	2300      	movs	r3, #0
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d8:	2200      	movs	r2, #0
 80014da:	4619      	mov	r1, r3
 80014dc:	4813      	ldr	r0, [pc, #76]	; (800152c <MX_TIM1_Init+0x138>)
 80014de:	f005 f9f5 	bl	80068cc <HAL_TIM_PWM_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014e8:	f000 f99e 	bl	8001828 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001504:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_TIM1_Init+0x138>)
 8001510:	f005 fef2 	bl	80072f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800151a:	f000 f985 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <MX_TIM1_Init+0x138>)
 8001520:	f000 fae2 	bl	8001ae8 <HAL_TIM_MspPostInit>

}
 8001524:	bf00      	nop
 8001526:	3758      	adds	r7, #88	; 0x58
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000310 	.word	0x20000310
 8001530:	40010000 	.word	0x40010000

08001534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <MX_USART2_UART_Init+0x50>)
 800153c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800156c:	f005 ff16 	bl	800739c <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001576:	f000 f957 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000358 	.word	0x20000358
 8001584:	40004400 	.word	0x40004400

08001588 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_USART3_UART_Init+0x50>)
 8001590:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 8001594:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001598:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015c0:	f005 feec 	bl	800739c <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015ca:	f000 f92d 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000039c 	.word	0x2000039c
 80015d8:	40004800 	.word	0x40004800

080015dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_DMA_Init+0x4c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <MX_DMA_Init+0x4c>)
 80015ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <MX_DMA_Init+0x4c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	200c      	movs	r0, #12
 8001604:	f000 fe81 	bl	800230a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001608:	200c      	movs	r0, #12
 800160a:	f000 fe9a 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2010      	movs	r0, #16
 8001614:	f000 fe79 	bl	800230a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001618:	2010      	movs	r0, #16
 800161a:	f000 fe92 	bl	8002342 <HAL_NVIC_EnableIRQ>

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	; 0x30
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	4b72      	ldr	r3, [pc, #456]	; (8001810 <MX_GPIO_Init+0x1e4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a71      	ldr	r2, [pc, #452]	; (8001810 <MX_GPIO_Init+0x1e4>)
 800164c:	f043 0310 	orr.w	r3, r3, #16
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b6f      	ldr	r3, [pc, #444]	; (8001810 <MX_GPIO_Init+0x1e4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <MX_GPIO_Init+0x1e4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a6a      	ldr	r2, [pc, #424]	; (8001810 <MX_GPIO_Init+0x1e4>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b68      	ldr	r3, [pc, #416]	; (8001810 <MX_GPIO_Init+0x1e4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b64      	ldr	r3, [pc, #400]	; (8001810 <MX_GPIO_Init+0x1e4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a63      	ldr	r2, [pc, #396]	; (8001810 <MX_GPIO_Init+0x1e4>)
 8001684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b61      	ldr	r3, [pc, #388]	; (8001810 <MX_GPIO_Init+0x1e4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b5d      	ldr	r3, [pc, #372]	; (8001810 <MX_GPIO_Init+0x1e4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a5c      	ldr	r2, [pc, #368]	; (8001810 <MX_GPIO_Init+0x1e4>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <MX_GPIO_Init+0x1e4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	4b56      	ldr	r3, [pc, #344]	; (8001810 <MX_GPIO_Init+0x1e4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a55      	ldr	r2, [pc, #340]	; (8001810 <MX_GPIO_Init+0x1e4>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b53      	ldr	r3, [pc, #332]	; (8001810 <MX_GPIO_Init+0x1e4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b4f      	ldr	r3, [pc, #316]	; (8001810 <MX_GPIO_Init+0x1e4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <MX_GPIO_Init+0x1e4>)
 80016d8:	f043 0308 	orr.w	r3, r3, #8
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <MX_GPIO_Init+0x1e4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2108      	movs	r1, #8
 80016ee:	4849      	ldr	r0, [pc, #292]	; (8001814 <MX_GPIO_Init+0x1e8>)
 80016f0:	f001 fbe0 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	2101      	movs	r1, #1
 80016f8:	4847      	ldr	r0, [pc, #284]	; (8001818 <MX_GPIO_Init+0x1ec>)
 80016fa:	f001 fbdb 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80016fe:	2200      	movs	r2, #0
 8001700:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001704:	4845      	ldr	r0, [pc, #276]	; (800181c <MX_GPIO_Init+0x1f0>)
 8001706:	f001 fbd5 	bl	8002eb4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800170a:	2308      	movs	r3, #8
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	483c      	ldr	r0, [pc, #240]	; (8001814 <MX_GPIO_Init+0x1e8>)
 8001722:	f001 fa2b 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001726:	2301      	movs	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	4836      	ldr	r0, [pc, #216]	; (8001818 <MX_GPIO_Init+0x1ec>)
 800173e:	f001 fa1d 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001742:	2308      	movs	r3, #8
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001752:	2305      	movs	r3, #5
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	482e      	ldr	r0, [pc, #184]	; (8001818 <MX_GPIO_Init+0x1ec>)
 800175e:	f001 fa0d 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001762:	2301      	movs	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001766:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800176a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	482a      	ldr	r0, [pc, #168]	; (8001820 <MX_GPIO_Init+0x1f4>)
 8001778:	f001 fa00 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800177c:	2304      	movs	r3, #4
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	4825      	ldr	r0, [pc, #148]	; (8001824 <MX_GPIO_Init+0x1f8>)
 8001790:	f001 f9f4 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017a6:	2305      	movs	r3, #5
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	481c      	ldr	r0, [pc, #112]	; (8001824 <MX_GPIO_Init+0x1f8>)
 80017b2:	f001 f9e3 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80017b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80017ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	4619      	mov	r1, r3
 80017ce:	4813      	ldr	r0, [pc, #76]	; (800181c <MX_GPIO_Init+0x1f0>)
 80017d0:	f001 f9d4 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80017d4:	2320      	movs	r3, #32
 80017d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	480d      	ldr	r0, [pc, #52]	; (800181c <MX_GPIO_Init+0x1f0>)
 80017e8:	f001 f9c8 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_GPIO_Init+0x1e8>)
 8001802:	f001 f9bb 	bl	8002b7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001806:	bf00      	nop
 8001808:	3730      	adds	r7, #48	; 0x30
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	40021000 	.word	0x40021000
 8001818:	40020800 	.word	0x40020800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40020000 	.word	0x40020000
 8001824:	40020400 	.word	0x40020400

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	e7fe      	b.n	8001830 <Error_Handler+0x8>
	...

08001834 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_MspInit+0x4c>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <HAL_MspInit+0x4c>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_MspInit+0x4c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_MspInit+0x4c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_MspInit+0x4c>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_MspInit+0x4c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001872:	2007      	movs	r0, #7
 8001874:	f000 fd3e 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800

08001884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a19      	ldr	r2, [pc, #100]	; (8001908 <HAL_I2C_MspInit+0x84>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d12c      	bne.n	8001900 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a17      	ldr	r2, [pc, #92]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80018c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80018c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c8:	2312      	movs	r3, #18
 80018ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018d4:	2304      	movs	r3, #4
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <HAL_I2C_MspInit+0x8c>)
 80018e0:	f001 f94c 	bl	8002b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f2:	6413      	str	r3, [r2, #64]	; 0x40
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40005400 	.word	0x40005400
 800190c:	40023800 	.word	0x40023800
 8001910:	40020400 	.word	0x40020400

08001914 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08e      	sub	sp, #56	; 0x38
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a31      	ldr	r2, [pc, #196]	; (8001a04 <HAL_I2S_MspInit+0xf0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d15a      	bne.n	80019fa <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001944:	2301      	movs	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001948:	23c0      	movs	r3, #192	; 0xc0
 800194a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800194c:	2302      	movs	r3, #2
 800194e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4618      	mov	r0, r3
 8001956:	f004 fc7f 	bl	8006258 <HAL_RCCEx_PeriphCLKConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001960:	f7ff ff62 	bl	8001828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_I2S_MspInit+0xf4>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <HAL_I2S_MspInit+0xf4>)
 800196e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001972:	6413      	str	r3, [r2, #64]	; 0x40
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_I2S_MspInit+0xf4>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_I2S_MspInit+0xf4>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <HAL_I2S_MspInit+0xf4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6313      	str	r3, [r2, #48]	; 0x30
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_I2S_MspInit+0xf4>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_I2S_MspInit+0xf4>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <HAL_I2S_MspInit+0xf4>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6313      	str	r3, [r2, #48]	; 0x30
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_I2S_MspInit+0xf4>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80019b8:	2310      	movs	r3, #16
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019c8:	2306      	movs	r3, #6
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	4619      	mov	r1, r3
 80019d2:	480e      	ldr	r0, [pc, #56]	; (8001a0c <HAL_I2S_MspInit+0xf8>)
 80019d4:	f001 f8d2 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80019d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019ea:	2306      	movs	r3, #6
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	4806      	ldr	r0, [pc, #24]	; (8001a10 <HAL_I2S_MspInit+0xfc>)
 80019f6:	f001 f8c1 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	3738      	adds	r7, #56	; 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40003c00 	.word	0x40003c00
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40020800 	.word	0x40020800

08001a14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_SPI_MspInit+0x84>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d12b      	bne.n	8001a8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a6e:	23e0      	movs	r3, #224	; 0xe0
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a7e:	2305      	movs	r3, #5
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_SPI_MspInit+0x8c>)
 8001a8a:	f001 f877 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40013000 	.word	0x40013000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <HAL_TIM_Base_MspInit+0x3c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_TIM_Base_MspInit+0x40>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_TIM_Base_MspInit+0x40>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_TIM_Base_MspInit+0x40>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <HAL_TIM_MspPostInit+0x68>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d11e      	bne.n	8001b48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_TIM_MspPostInit+0x6c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_TIM_MspPostInit+0x6c>)
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_TIM_MspPostInit+0x6c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	4619      	mov	r1, r3
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_TIM_MspPostInit+0x70>)
 8001b44:	f001 f81a 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08c      	sub	sp, #48	; 0x30
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a75      	ldr	r2, [pc, #468]	; (8001d50 <HAL_UART_MspInit+0x1f4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d163      	bne.n	8001c46 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	4b74      	ldr	r3, [pc, #464]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a73      	ldr	r2, [pc, #460]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b71      	ldr	r3, [pc, #452]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a6c      	ldr	r2, [pc, #432]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4861      	ldr	r0, [pc, #388]	; (8001d58 <HAL_UART_MspInit+0x1fc>)
 8001bd2:	f000 ffd3 	bl	8002b7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001bd6:	4b61      	ldr	r3, [pc, #388]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001bd8:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <HAL_UART_MspInit+0x204>)
 8001bda:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001bdc:	4b5f      	ldr	r3, [pc, #380]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001bde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001be2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001be4:	4b5d      	ldr	r3, [pc, #372]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bea:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf0:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bf6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bf8:	4b58      	ldr	r3, [pc, #352]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bfe:	4b57      	ldr	r3, [pc, #348]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c04:	4b55      	ldr	r3, [pc, #340]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c0a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c0c:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c12:	4b52      	ldr	r3, [pc, #328]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c18:	4850      	ldr	r0, [pc, #320]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001c1a:	f000 fbad 	bl	8002378 <HAL_DMA_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001c24:	f7ff fe00 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a4c      	ldr	r2, [pc, #304]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c2e:	4a4b      	ldr	r2, [pc, #300]	; (8001d5c <HAL_UART_MspInit+0x200>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	2026      	movs	r0, #38	; 0x26
 8001c3a:	f000 fb66 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c3e:	2026      	movs	r0, #38	; 0x26
 8001c40:	f000 fb7f 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c44:	e07f      	b.n	8001d46 <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a46      	ldr	r2, [pc, #280]	; (8001d64 <HAL_UART_MspInit+0x208>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d17a      	bne.n	8001d46 <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	4a3e      	ldr	r2, [pc, #248]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c60:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4a37      	ldr	r2, [pc, #220]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7c:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	6313      	str	r3, [r2, #48]	; 0x30
 8001c98:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <HAL_UART_MspInit+0x1f8>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4829      	ldr	r0, [pc, #164]	; (8001d68 <HAL_UART_MspInit+0x20c>)
 8001cc2:	f000 ff5b 	bl	8002b7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cd8:	2307      	movs	r3, #7
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4822      	ldr	r0, [pc, #136]	; (8001d6c <HAL_UART_MspInit+0x210>)
 8001ce4:	f000 ff4a 	bl	8002b7c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001ce8:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001cea:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <HAL_UART_MspInit+0x218>)
 8001cec:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001cf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d08:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d1c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d2a:	4811      	ldr	r0, [pc, #68]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001d2c:	f000 fb24 	bl	8002378 <HAL_DMA_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_UART_MspInit+0x1de>
      Error_Handler();
 8001d36:	f7ff fd77 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a0c      	ldr	r2, [pc, #48]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001d3e:	639a      	str	r2, [r3, #56]	; 0x38
 8001d40:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <HAL_UART_MspInit+0x214>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d46:	bf00      	nop
 8001d48:	3730      	adds	r7, #48	; 0x30
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40004400 	.word	0x40004400
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	200003e0 	.word	0x200003e0
 8001d60:	40026088 	.word	0x40026088
 8001d64:	40004800 	.word	0x40004800
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	20000440 	.word	0x20000440
 8001d74:	40026028 	.word	0x40026028

08001d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <NMI_Handler+0x4>

08001d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc4:	f000 f982 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <DMA1_Stream1_IRQHandler+0x10>)
 8001dd2:	f000 fc69 	bl	80026a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000440 	.word	0x20000440

08001de0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <DMA1_Stream5_IRQHandler+0x10>)
 8001de6:	f000 fc5f 	bl	80026a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200003e0 	.word	0x200003e0

08001df4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <USART2_IRQHandler+0x10>)
 8001dfa:	f005 fbdf 	bl	80075bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000358 	.word	0x20000358

08001e08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <OTG_FS_IRQHandler+0x10>)
 8001e0e:	f001 faef 	bl	80033f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000978 	.word	0x20000978

08001e1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return 1;
 8001e20:	2301      	movs	r3, #1
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_kill>:

int _kill(int pid, int sig)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e36:	f009 ff93 	bl	800bd60 <__errno>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2216      	movs	r2, #22
 8001e3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_exit>:

void _exit (int status)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ffe7 	bl	8001e2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e5e:	e7fe      	b.n	8001e5e <_exit+0x12>

08001e60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e00a      	b.n	8001e88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e72:	f3af 8000 	nop.w
 8001e76:	4601      	mov	r1, r0
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	60ba      	str	r2, [r7, #8]
 8001e7e:	b2ca      	uxtb	r2, r1
 8001e80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dbf0      	blt.n	8001e72 <_read+0x12>
  }

  return len;
 8001e90:	687b      	ldr	r3, [r7, #4]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e009      	b.n	8001ec0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	60ba      	str	r2, [r7, #8]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbf1      	blt.n	8001eac <_write+0x12>
  }
  return len;
 8001ec8:	687b      	ldr	r3, [r7, #4]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_close>:

int _close(int file)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001efa:	605a      	str	r2, [r3, #4]
  return 0;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_isatty>:

int _isatty(int file)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <_sbrk+0x5c>)
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <_sbrk+0x60>)
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <_sbrk+0x64>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <_sbrk+0x68>)
 8001f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d207      	bcs.n	8001f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f6c:	f009 fef8 	bl	800bd60 <__errno>
 8001f70:	4603      	mov	r3, r0
 8001f72:	220c      	movs	r2, #12
 8001f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	e009      	b.n	8001f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <_sbrk+0x64>)
 8001f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20020000 	.word	0x20020000
 8001f9c:	00000400 	.word	0x00000400
 8001fa0:	20000594 	.word	0x20000594
 8001fa4:	20000c90 	.word	0x20000c90

08001fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
void SystemInit(void)
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	607b      	str	r3, [r7, #4]
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <SystemInit+0x28>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <SystemInit+0x28>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
}}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800200c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd8:	480d      	ldr	r0, [pc, #52]	; (8002010 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fda:	490e      	ldr	r1, [pc, #56]	; (8002014 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe0:	e002      	b.n	8001fe8 <LoopCopyDataInit>

08001fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe6:	3304      	adds	r3, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fec:	d3f9      	bcc.n	8001fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ff0:	4c0b      	ldr	r4, [pc, #44]	; (8002020 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff4:	e001      	b.n	8001ffa <LoopFillZerobss>

08001ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff8:	3204      	adds	r2, #4

08001ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ffc:	d3fb      	bcc.n	8001ff6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ffe:	f7ff ffd3 	bl	8001fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002002:	f009 feb3 	bl	800bd6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002006:	f7ff f899 	bl	800113c <main>
  bx  lr    
 800200a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800200c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002018:	08010c9c 	.word	0x08010c9c
  ldr r2, =_sbss
 800201c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002020:	20000c8c 	.word	0x20000c8c

08002024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC_IRQHandler>
	...

08002028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_Init+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_Init+0x40>)
 8002032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_Init+0x40>)
 800203e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_Init+0x40>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002050:	2003      	movs	r0, #3
 8002052:	f000 f94f 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002056:	2000      	movs	r0, #0
 8002058:	f000 f808 	bl	800206c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800205c:	f7ff fbea 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023c00 	.word	0x40023c00

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x54>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_InitTick+0x58>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002082:	fbb3 f3f1 	udiv	r3, r3, r1
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f967 	bl	800235e <HAL_SYSTICK_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00e      	b.n	80020b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d80a      	bhi.n	80020b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a0:	2200      	movs	r2, #0
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f000 f92f 	bl	800230a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ac:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <HAL_InitTick+0x5c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000008 	.word	0x20000008
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x24>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_IncTick+0x24>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20000598 	.word	0x20000598

080020f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_GetTick+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000598 	.word	0x20000598

0800210c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff ffee 	bl	80020f4 <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d005      	beq.n	8002132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_Delay+0x44>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002132:	bf00      	nop
 8002134:	f7ff ffde 	bl	80020f4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d8f7      	bhi.n	8002134 <HAL_Delay+0x28>
  {
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000008 	.word	0x20000008

08002154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800217c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <__NVIC_GetPriorityGrouping+0x18>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0307 	and.w	r3, r3, #7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db0b      	blt.n	80021e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4907      	ldr	r1, [pc, #28]	; (80021f0 <__NVIC_EnableIRQ+0x38>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2001      	movs	r0, #1
 80021da:	fa00 f202 	lsl.w	r2, r0, r2
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00f      	b.n	80022e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SysTick_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ce:	210f      	movs	r1, #15
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f7ff ff8e 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x40>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff29 	bl	8002154 <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff3e 	bl	800219c <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff8e 	bl	8002248 <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5d 	bl	80021f4 <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff31 	bl	80021b8 <__NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffa2 	bl	80022b0 <SysTick_Config>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff feb6 	bl	80020f4 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e099      	b.n	80024c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b4:	e00f      	b.n	80023d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b6:	f7ff fe9d 	bl	80020f4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d908      	bls.n	80023d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2203      	movs	r2, #3
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e078      	b.n	80024c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e8      	bne.n	80023b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <HAL_DMA_Init+0x158>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002402:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	2b04      	cmp	r3, #4
 800242e:	d107      	bne.n	8002440 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	4313      	orrs	r3, r2
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f023 0307 	bic.w	r3, r3, #7
 8002456:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	2b04      	cmp	r3, #4
 8002468:	d117      	bne.n	800249a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00e      	beq.n	800249a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fb01 	bl	8002a84 <DMA_CheckFifoParam>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2240      	movs	r2, #64	; 0x40
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002496:	2301      	movs	r3, #1
 8002498:	e016      	b.n	80024c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fab8 	bl	8002a18 <DMA_CalcBaseAndBitshift>
 80024a8:	4603      	mov	r3, r0
 80024aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	223f      	movs	r2, #63	; 0x3f
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	f010803f 	.word	0xf010803f

080024d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_DMA_Start_IT+0x26>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e040      	b.n	800257c <HAL_DMA_Start_IT+0xa8>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d12f      	bne.n	800256e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2202      	movs	r2, #2
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fa4a 	bl	80029bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252c:	223f      	movs	r2, #63	; 0x3f
 800252e:	409a      	lsls	r2, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0216 	orr.w	r2, r2, #22
 8002542:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0208 	orr.w	r2, r2, #8
 800255a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e005      	b.n	800257a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002576:	2302      	movs	r3, #2
 8002578:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800257a:	7dfb      	ldrb	r3, [r7, #23]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002592:	f7ff fdaf 	bl	80020f4 <HAL_GetTick>
 8002596:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d008      	beq.n	80025b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e052      	b.n	800265c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0216 	bic.w	r2, r2, #22
 80025c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <HAL_DMA_Abort+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0208 	bic.w	r2, r2, #8
 80025f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002606:	e013      	b.n	8002630 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002608:	f7ff fd74 	bl	80020f4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b05      	cmp	r3, #5
 8002614:	d90c      	bls.n	8002630 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2203      	movs	r2, #3
 8002620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e015      	b.n	800265c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1e4      	bne.n	8002608 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	223f      	movs	r2, #63	; 0x3f
 8002644:	409a      	lsls	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d004      	beq.n	8002682 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00c      	b.n	800269c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2205      	movs	r2, #5
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026b4:	4b8e      	ldr	r3, [pc, #568]	; (80028f0 <HAL_DMA_IRQHandler+0x248>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a8e      	ldr	r2, [pc, #568]	; (80028f4 <HAL_DMA_IRQHandler+0x24c>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0a9b      	lsrs	r3, r3, #10
 80026c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	2208      	movs	r2, #8
 80026d4:	409a      	lsls	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01a      	beq.n	8002714 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0204 	bic.w	r2, r2, #4
 80026fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	2208      	movs	r2, #8
 8002702:	409a      	lsls	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	2201      	movs	r2, #1
 800271a:	409a      	lsls	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d012      	beq.n	800274a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	2201      	movs	r2, #1
 8002738:	409a      	lsls	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	f043 0202 	orr.w	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	2204      	movs	r2, #4
 8002750:	409a      	lsls	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d012      	beq.n	8002780 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00b      	beq.n	8002780 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	2204      	movs	r2, #4
 800276e:	409a      	lsls	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002778:	f043 0204 	orr.w	r2, r3, #4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	2210      	movs	r2, #16
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d043      	beq.n	8002818 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d03c      	beq.n	8002818 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	2210      	movs	r2, #16
 80027a4:	409a      	lsls	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d018      	beq.n	80027ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d108      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d024      	beq.n	8002818 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
 80027d6:	e01f      	b.n	8002818 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01b      	beq.n	8002818 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
 80027e8:	e016      	b.n	8002818 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d107      	bne.n	8002808 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0208 	bic.w	r2, r2, #8
 8002806:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2220      	movs	r2, #32
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 808f 	beq.w	8002948 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8087 	beq.w	8002948 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	2220      	movs	r2, #32
 8002840:	409a      	lsls	r2, r3
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b05      	cmp	r3, #5
 8002850:	d136      	bne.n	80028c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0216 	bic.w	r2, r2, #22
 8002860:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002870:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <HAL_DMA_IRQHandler+0x1da>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0208 	bic.w	r2, r2, #8
 8002890:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	223f      	movs	r2, #63	; 0x3f
 8002898:	409a      	lsls	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d07e      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
        }
        return;
 80028be:	e079      	b.n	80029b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01d      	beq.n	800290a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10d      	bne.n	80028f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d031      	beq.n	8002948 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e02c      	b.n	8002948 <HAL_DMA_IRQHandler+0x2a0>
 80028ee:	bf00      	nop
 80028f0:	20000000 	.word	0x20000000
 80028f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d023      	beq.n	8002948 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4798      	blx	r3
 8002908:	e01e      	b.n	8002948 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10f      	bne.n	8002938 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0210 	bic.w	r2, r2, #16
 8002926:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	2b00      	cmp	r3, #0
 800294e:	d032      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d022      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2205      	movs	r2, #5
 8002960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	3301      	adds	r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	429a      	cmp	r2, r3
 800297e:	d307      	bcc.n	8002990 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f2      	bne.n	8002974 <HAL_DMA_IRQHandler+0x2cc>
 800298e:	e000      	b.n	8002992 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002990:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
 80029b2:	e000      	b.n	80029b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029b4:	bf00      	nop
    }
  }
}
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d108      	bne.n	80029fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029fa:	e007      	b.n	8002a0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3b10      	subs	r3, #16
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <DMA_CalcBaseAndBitshift+0x64>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	091b      	lsrs	r3, r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <DMA_CalcBaseAndBitshift+0x68>)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d909      	bls.n	8002a5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	1d1a      	adds	r2, r3, #4
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	659a      	str	r2, [r3, #88]	; 0x58
 8002a58:	e007      	b.n	8002a6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a62:	f023 0303 	bic.w	r3, r3, #3
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	aaaaaaab 	.word	0xaaaaaaab
 8002a80:	080107dc 	.word	0x080107dc

08002a84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d11f      	bne.n	8002ade <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d856      	bhi.n	8002b52 <DMA_CheckFifoParam+0xce>
 8002aa4:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <DMA_CheckFifoParam+0x28>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002abd 	.word	0x08002abd
 8002ab0:	08002acf 	.word	0x08002acf
 8002ab4:	08002abd 	.word	0x08002abd
 8002ab8:	08002b53 	.word	0x08002b53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d046      	beq.n	8002b56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002acc:	e043      	b.n	8002b56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ad6:	d140      	bne.n	8002b5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002adc:	e03d      	b.n	8002b5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae6:	d121      	bne.n	8002b2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d837      	bhi.n	8002b5e <DMA_CheckFifoParam+0xda>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <DMA_CheckFifoParam+0x70>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b05 	.word	0x08002b05
 8002af8:	08002b0b 	.word	0x08002b0b
 8002afc:	08002b05 	.word	0x08002b05
 8002b00:	08002b1d 	.word	0x08002b1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      break;
 8002b08:	e030      	b.n	8002b6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d025      	beq.n	8002b62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1a:	e022      	b.n	8002b62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b24:	d11f      	bne.n	8002b66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b2a:	e01c      	b.n	8002b66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d903      	bls.n	8002b3a <DMA_CheckFifoParam+0xb6>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d003      	beq.n	8002b40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b38:	e018      	b.n	8002b6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3e:	e015      	b.n	8002b6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b50:	e00b      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;
 8002b52:	bf00      	nop
 8002b54:	e00a      	b.n	8002b6c <DMA_CheckFifoParam+0xe8>
      break;
 8002b56:	bf00      	nop
 8002b58:	e008      	b.n	8002b6c <DMA_CheckFifoParam+0xe8>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e006      	b.n	8002b6c <DMA_CheckFifoParam+0xe8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e004      	b.n	8002b6c <DMA_CheckFifoParam+0xe8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e002      	b.n	8002b6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b66:	bf00      	nop
 8002b68:	e000      	b.n	8002b6c <DMA_CheckFifoParam+0xe8>
      break;
 8002b6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	e16b      	b.n	8002e70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b98:	2201      	movs	r2, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	f040 815a 	bne.w	8002e6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d005      	beq.n	8002bce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d130      	bne.n	8002c30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	2203      	movs	r2, #3
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c04:	2201      	movs	r2, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 0201 	and.w	r2, r3, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d017      	beq.n	8002c6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d123      	bne.n	8002cc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	08da      	lsrs	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3208      	adds	r2, #8
 8002c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	220f      	movs	r2, #15
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	08da      	lsrs	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3208      	adds	r2, #8
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0203 	and.w	r2, r3, #3
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80b4 	beq.w	8002e6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b60      	ldr	r3, [pc, #384]	; (8002e88 <HAL_GPIO_Init+0x30c>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	4a5f      	ldr	r2, [pc, #380]	; (8002e88 <HAL_GPIO_Init+0x30c>)
 8002d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d10:	6453      	str	r3, [r2, #68]	; 0x44
 8002d12:	4b5d      	ldr	r3, [pc, #372]	; (8002e88 <HAL_GPIO_Init+0x30c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1e:	4a5b      	ldr	r2, [pc, #364]	; (8002e8c <HAL_GPIO_Init+0x310>)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	3302      	adds	r3, #2
 8002d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	220f      	movs	r2, #15
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a52      	ldr	r2, [pc, #328]	; (8002e90 <HAL_GPIO_Init+0x314>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d02b      	beq.n	8002da2 <HAL_GPIO_Init+0x226>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a51      	ldr	r2, [pc, #324]	; (8002e94 <HAL_GPIO_Init+0x318>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d025      	beq.n	8002d9e <HAL_GPIO_Init+0x222>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a50      	ldr	r2, [pc, #320]	; (8002e98 <HAL_GPIO_Init+0x31c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01f      	beq.n	8002d9a <HAL_GPIO_Init+0x21e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4f      	ldr	r2, [pc, #316]	; (8002e9c <HAL_GPIO_Init+0x320>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d019      	beq.n	8002d96 <HAL_GPIO_Init+0x21a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4e      	ldr	r2, [pc, #312]	; (8002ea0 <HAL_GPIO_Init+0x324>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <HAL_GPIO_Init+0x216>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ea4 <HAL_GPIO_Init+0x328>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00d      	beq.n	8002d8e <HAL_GPIO_Init+0x212>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4c      	ldr	r2, [pc, #304]	; (8002ea8 <HAL_GPIO_Init+0x32c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d007      	beq.n	8002d8a <HAL_GPIO_Init+0x20e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4b      	ldr	r2, [pc, #300]	; (8002eac <HAL_GPIO_Init+0x330>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_GPIO_Init+0x20a>
 8002d82:	2307      	movs	r3, #7
 8002d84:	e00e      	b.n	8002da4 <HAL_GPIO_Init+0x228>
 8002d86:	2308      	movs	r3, #8
 8002d88:	e00c      	b.n	8002da4 <HAL_GPIO_Init+0x228>
 8002d8a:	2306      	movs	r3, #6
 8002d8c:	e00a      	b.n	8002da4 <HAL_GPIO_Init+0x228>
 8002d8e:	2305      	movs	r3, #5
 8002d90:	e008      	b.n	8002da4 <HAL_GPIO_Init+0x228>
 8002d92:	2304      	movs	r3, #4
 8002d94:	e006      	b.n	8002da4 <HAL_GPIO_Init+0x228>
 8002d96:	2303      	movs	r3, #3
 8002d98:	e004      	b.n	8002da4 <HAL_GPIO_Init+0x228>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e002      	b.n	8002da4 <HAL_GPIO_Init+0x228>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_GPIO_Init+0x228>
 8002da2:	2300      	movs	r3, #0
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	f002 0203 	and.w	r2, r2, #3
 8002daa:	0092      	lsls	r2, r2, #2
 8002dac:	4093      	lsls	r3, r2
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db4:	4935      	ldr	r1, [pc, #212]	; (8002e8c <HAL_GPIO_Init+0x310>)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	3302      	adds	r3, #2
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <HAL_GPIO_Init+0x334>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002de6:	4a32      	ldr	r2, [pc, #200]	; (8002eb0 <HAL_GPIO_Init+0x334>)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <HAL_GPIO_Init+0x334>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e10:	4a27      	ldr	r2, [pc, #156]	; (8002eb0 <HAL_GPIO_Init+0x334>)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e16:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <HAL_GPIO_Init+0x334>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_GPIO_Init+0x334>)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_GPIO_Init+0x334>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e64:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <HAL_GPIO_Init+0x334>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b0f      	cmp	r3, #15
 8002e74:	f67f ae90 	bls.w	8002b98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40013800 	.word	0x40013800
 8002e90:	40020000 	.word	0x40020000
 8002e94:	40020400 	.word	0x40020400
 8002e98:	40020800 	.word	0x40020800
 8002e9c:	40020c00 	.word	0x40020c00
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40021400 	.word	0x40021400
 8002ea8:	40021800 	.word	0x40021800
 8002eac:	40021c00 	.word	0x40021c00
 8002eb0:	40013c00 	.word	0x40013c00

08002eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec4:	787b      	ldrb	r3, [r7, #1]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ed0:	e003      	b.n	8002eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ed2:	887b      	ldrh	r3, [r7, #2]
 8002ed4:	041a      	lsls	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	619a      	str	r2, [r3, #24]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef8:	887a      	ldrh	r2, [r7, #2]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4013      	ands	r3, r2
 8002efe:	041a      	lsls	r2, r3, #16
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	887b      	ldrh	r3, [r7, #2]
 8002f06:	400b      	ands	r3, r1
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	619a      	str	r2, [r3, #24]
}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1c:	b08f      	sub	sp, #60	; 0x3c
 8002f1e:	af0a      	add	r7, sp, #40	; 0x28
 8002f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e054      	b.n	8002fd6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f008 fc5c 	bl	800b804 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f005 fc8a 	bl	8008884 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	687e      	ldr	r6, [r7, #4]
 8002f78:	466d      	mov	r5, sp
 8002f7a:	f106 0410 	add.w	r4, r6, #16
 8002f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f8e:	1d33      	adds	r3, r6, #4
 8002f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f92:	6838      	ldr	r0, [r7, #0]
 8002f94:	f005 fc04 	bl	80087a0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f005 fc81 	bl	80088a6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	687e      	ldr	r6, [r7, #4]
 8002fac:	466d      	mov	r5, sp
 8002fae:	f106 0410 	add.w	r4, r6, #16
 8002fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc2:	1d33      	adds	r3, r6, #4
 8002fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc6:	6838      	ldr	r0, [r7, #0]
 8002fc8:	f005 fe0a 	bl	8008be0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fde <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002fde:	b590      	push	{r4, r7, lr}
 8002fe0:	b089      	sub	sp, #36	; 0x24
 8002fe2:	af04      	add	r7, sp, #16
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	4608      	mov	r0, r1
 8002fe8:	4611      	mov	r1, r2
 8002fea:	461a      	mov	r2, r3
 8002fec:	4603      	mov	r3, r0
 8002fee:	70fb      	strb	r3, [r7, #3]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70bb      	strb	r3, [r7, #2]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_HCD_HC_Init+0x28>
 8003002:	2302      	movs	r3, #2
 8003004:	e076      	b.n	80030f4 <HAL_HCD_HC_Init+0x116>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	333d      	adds	r3, #61	; 0x3d
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3338      	adds	r3, #56	; 0x38
 800302e:	787a      	ldrb	r2, [r7, #1]
 8003030:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3340      	adds	r3, #64	; 0x40
 8003040:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003042:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	3339      	adds	r3, #57	; 0x39
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	333f      	adds	r3, #63	; 0x3f
 8003064:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003068:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	78ba      	ldrb	r2, [r7, #2]
 800306e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003072:	b2d0      	uxtb	r0, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	333a      	adds	r3, #58	; 0x3a
 8003080:	4602      	mov	r2, r0
 8003082:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003084:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003088:	2b00      	cmp	r3, #0
 800308a:	da09      	bge.n	80030a0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	333b      	adds	r3, #59	; 0x3b
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e008      	b.n	80030b2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	212c      	movs	r1, #44	; 0x2c
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	333b      	adds	r3, #59	; 0x3b
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	333c      	adds	r3, #60	; 0x3c
 80030c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030c4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	787c      	ldrb	r4, [r7, #1]
 80030cc:	78ba      	ldrb	r2, [r7, #2]
 80030ce:	78f9      	ldrb	r1, [r7, #3]
 80030d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030d2:	9302      	str	r3, [sp, #8]
 80030d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4623      	mov	r3, r4
 80030e2:	f005 ff03 	bl	8008eec <USB_HC_Init>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd90      	pop	{r4, r7, pc}

080030fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_HCD_HC_Halt+0x1e>
 8003116:	2302      	movs	r3, #2
 8003118:	e00f      	b.n	800313a <HAL_HCD_HC_Halt+0x3e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f006 f953 	bl	80093d6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4603      	mov	r3, r0
 8003154:	70fb      	strb	r3, [r7, #3]
 8003156:	460b      	mov	r3, r1
 8003158:	70bb      	strb	r3, [r7, #2]
 800315a:	4613      	mov	r3, r2
 800315c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	333b      	adds	r3, #59	; 0x3b
 800316c:	78ba      	ldrb	r2, [r7, #2]
 800316e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	333f      	adds	r3, #63	; 0x3f
 800317e:	787a      	ldrb	r2, [r7, #1]
 8003180:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003182:	7c3b      	ldrb	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d112      	bne.n	80031ae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	3342      	adds	r3, #66	; 0x42
 8003196:	2203      	movs	r2, #3
 8003198:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	333d      	adds	r3, #61	; 0x3d
 80031a8:	7f3a      	ldrb	r2, [r7, #28]
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	e008      	b.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3342      	adds	r3, #66	; 0x42
 80031bc:	2202      	movs	r2, #2
 80031be:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80031c0:	787b      	ldrb	r3, [r7, #1]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	f200 80c6 	bhi.w	8003354 <HAL_HCD_HC_SubmitRequest+0x210>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	08003341 	.word	0x08003341
 80031d8:	08003245 	.word	0x08003245
 80031dc:	080032c3 	.word	0x080032c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80031e0:	7c3b      	ldrb	r3, [r7, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f040 80b8 	bne.w	8003358 <HAL_HCD_HC_SubmitRequest+0x214>
 80031e8:	78bb      	ldrb	r3, [r7, #2]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f040 80b4 	bne.w	8003358 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80031f0:	8b3b      	ldrh	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3355      	adds	r3, #85	; 0x55
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	212c      	movs	r1, #44	; 0x2c
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	3355      	adds	r3, #85	; 0x55
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3342      	adds	r3, #66	; 0x42
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800322e:	e093      	b.n	8003358 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	3342      	adds	r3, #66	; 0x42
 800323e:	2202      	movs	r2, #2
 8003240:	701a      	strb	r2, [r3, #0]
      break;
 8003242:	e089      	b.n	8003358 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003244:	78bb      	ldrb	r3, [r7, #2]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d11d      	bne.n	8003286 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	3355      	adds	r3, #85	; 0x55
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	3342      	adds	r3, #66	; 0x42
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003270:	e073      	b.n	800335a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3342      	adds	r3, #66	; 0x42
 8003280:	2202      	movs	r2, #2
 8003282:	701a      	strb	r2, [r3, #0]
      break;
 8003284:	e069      	b.n	800335a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3354      	adds	r3, #84	; 0x54
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3342      	adds	r3, #66	; 0x42
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
      break;
 80032ac:	e055      	b.n	800335a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3342      	adds	r3, #66	; 0x42
 80032bc:	2202      	movs	r2, #2
 80032be:	701a      	strb	r2, [r3, #0]
      break;
 80032c0:	e04b      	b.n	800335a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d11d      	bne.n	8003304 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	3355      	adds	r3, #85	; 0x55
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3342      	adds	r3, #66	; 0x42
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80032ee:	e034      	b.n	800335a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3342      	adds	r3, #66	; 0x42
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
      break;
 8003302:	e02a      	b.n	800335a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3354      	adds	r3, #84	; 0x54
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3342      	adds	r3, #66	; 0x42
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
      break;
 800332a:	e016      	b.n	800335a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3342      	adds	r3, #66	; 0x42
 800333a:	2202      	movs	r2, #2
 800333c:	701a      	strb	r2, [r3, #0]
      break;
 800333e:	e00c      	b.n	800335a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3342      	adds	r3, #66	; 0x42
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
      break;
 8003352:	e002      	b.n	800335a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003358:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	3344      	adds	r3, #68	; 0x44
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	8b3a      	ldrh	r2, [r7, #24]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	202c      	movs	r0, #44	; 0x2c
 8003374:	fb00 f303 	mul.w	r3, r0, r3
 8003378:	440b      	add	r3, r1
 800337a:	334c      	adds	r3, #76	; 0x4c
 800337c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	3360      	adds	r3, #96	; 0x60
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	212c      	movs	r1, #44	; 0x2c
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	4413      	add	r3, r2
 800339c:	3350      	adds	r3, #80	; 0x50
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3339      	adds	r3, #57	; 0x39
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3361      	adds	r3, #97	; 0x61
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	222c      	movs	r2, #44	; 0x2c
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	3338      	adds	r3, #56	; 0x38
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	18d1      	adds	r1, r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	f005 fea6 	bl	8009130 <USB_HC_StartXfer>
 80033e4:	4603      	mov	r3, r0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop

080033f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f005 fba7 	bl	8008b5a <USB_GetMode>
 800340c:	4603      	mov	r3, r0
 800340e:	2b01      	cmp	r3, #1
 8003410:	f040 80f6 	bne.w	8003600 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f005 fb8b 	bl	8008b34 <USB_ReadInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80ec 	beq.w	80035fe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f005 fb82 	bl	8008b34 <USB_ReadInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800343a:	d104      	bne.n	8003446 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003444:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f005 fb72 	bl	8008b34 <USB_ReadInterrupts>
 8003450:	4603      	mov	r3, r0
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345a:	d104      	bne.n	8003466 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003464:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f005 fb62 	bl	8008b34 <USB_ReadInterrupts>
 8003470:	4603      	mov	r3, r0
 8003472:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800347a:	d104      	bne.n	8003486 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003484:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f005 fb52 	bl	8008b34 <USB_ReadInterrupts>
 8003490:	4603      	mov	r3, r0
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b02      	cmp	r3, #2
 8003498:	d103      	bne.n	80034a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2202      	movs	r2, #2
 80034a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f005 fb44 	bl	8008b34 <USB_ReadInterrupts>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b6:	d11c      	bne.n	80034f2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80034c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80034d2:	2110      	movs	r1, #16
 80034d4:	6938      	ldr	r0, [r7, #16]
 80034d6:	f005 fa33 	bl	8008940 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80034da:	6938      	ldr	r0, [r7, #16]
 80034dc:	f005 fa64 	bl	80089a8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f005 fc3a 	bl	8008d60 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f008 fa07 	bl	800b900 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f005 fb1c 	bl	8008b34 <USB_ReadInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003502:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003506:	d102      	bne.n	800350e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f001 f89e 	bl	800464a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f005 fb0e 	bl	8008b34 <USB_ReadInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b08      	cmp	r3, #8
 8003520:	d106      	bne.n	8003530 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f008 f9d0 	bl	800b8c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2208      	movs	r2, #8
 800352e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f005 fafd 	bl	8008b34 <USB_ReadInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b10      	cmp	r3, #16
 8003542:	d101      	bne.n	8003548 <HAL_HCD_IRQHandler+0x158>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_HCD_IRQHandler+0x15a>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d012      	beq.n	8003574 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699a      	ldr	r2, [r3, #24]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0210 	bic.w	r2, r2, #16
 800355c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 ffa1 	bl	80044a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0210 	orr.w	r2, r2, #16
 8003572:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f005 fadb 	bl	8008b34 <USB_ReadInterrupts>
 800357e:	4603      	mov	r3, r0
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003588:	d13a      	bne.n	8003600 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f005 ff10 	bl	80093b4 <USB_HC_ReadInterrupt>
 8003594:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e025      	b.n	80035e8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d018      	beq.n	80035e2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c6:	d106      	bne.n	80035d6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8ab 	bl	800372a <HCD_HC_IN_IRQHandler>
 80035d4:	e005      	b.n	80035e2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fbf9 	bl	8003dd4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	3301      	adds	r3, #1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d3d4      	bcc.n	800359c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035fa:	615a      	str	r2, [r3, #20]
 80035fc:	e000      	b.n	8003600 <HAL_HCD_IRQHandler+0x210>
      return;
 80035fe:	bf00      	nop
    }
  }
}
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_HCD_Start+0x16>
 8003618:	2302      	movs	r3, #2
 800361a:	e013      	b.n	8003644 <HAL_HCD_Start+0x3e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f005 fbfc 	bl	8008e28 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f005 f914 	bl	8008862 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_HCD_Stop+0x16>
 800365e:	2302      	movs	r3, #2
 8003660:	e00d      	b.n	800367e <HAL_HCD_Stop+0x32>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f005 ffea 	bl	8009648 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f005 fb9e 	bl	8008dd4 <USB_ResetPort>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	212c      	movs	r1, #44	; 0x2c
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	3360      	adds	r3, #96	; 0x60
 80036bc:	781b      	ldrb	r3, [r3, #0]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	460b      	mov	r3, r1
 80036d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	3350      	adds	r3, #80	; 0x50
 80036e4:	681b      	ldr	r3, [r3, #0]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f005 fbe2 	bl	8008ec8 <USB_GetCurrentFrame>
 8003704:	4603      	mov	r3, r0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f005 fbbd 	bl	8008e9a <USB_GetHostSpeed>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b04      	cmp	r3, #4
 8003758:	d11a      	bne.n	8003790 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4413      	add	r3, r2
 8003762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003766:	461a      	mov	r2, r3
 8003768:	2304      	movs	r3, #4
 800376a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	3361      	adds	r3, #97	; 0x61
 800377a:	2206      	movs	r2, #6
 800377c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f005 fe24 	bl	80093d6 <USB_HC_Halt>
 800378e:	e0af      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a6:	d11b      	bne.n	80037e0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b4:	461a      	mov	r2, r3
 80037b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	212c      	movs	r1, #44	; 0x2c
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	3361      	adds	r3, #97	; 0x61
 80037ca:	2207      	movs	r2, #7
 80037cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f005 fdfc 	bl	80093d6 <USB_HC_Halt>
 80037de:	e087      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d109      	bne.n	800380a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003802:	461a      	mov	r2, r3
 8003804:	2320      	movs	r3, #32
 8003806:	6093      	str	r3, [r2, #8]
 8003808:	e072      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4413      	add	r3, r2
 8003812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b08      	cmp	r3, #8
 800381e:	d11a      	bne.n	8003856 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382c:	461a      	mov	r2, r3
 800382e:	2308      	movs	r3, #8
 8003830:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	4413      	add	r3, r2
 800383e:	3361      	adds	r3, #97	; 0x61
 8003840:	2205      	movs	r2, #5
 8003842:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f005 fdc1 	bl	80093d6 <USB_HC_Halt>
 8003854:	e04c      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386c:	d11b      	bne.n	80038a6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	461a      	mov	r2, r3
 800387c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003880:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	3361      	adds	r3, #97	; 0x61
 8003890:	2208      	movs	r2, #8
 8003892:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f005 fd99 	bl	80093d6 <USB_HC_Halt>
 80038a4:	e024      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b80      	cmp	r3, #128	; 0x80
 80038ba:	d119      	bne.n	80038f0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	461a      	mov	r2, r3
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	212c      	movs	r1, #44	; 0x2c
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	4413      	add	r3, r2
 80038da:	3361      	adds	r3, #97	; 0x61
 80038dc:	2206      	movs	r2, #6
 80038de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f005 fd73 	bl	80093d6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003906:	d112      	bne.n	800392e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f005 fd5f 	bl	80093d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	461a      	mov	r2, r3
 8003926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800392a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800392c:	e24e      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4413      	add	r3, r2
 8003936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	f040 80df 	bne.w	8003b04 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d019      	beq.n	8003982 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	3348      	adds	r3, #72	; 0x48
 800395c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	0159      	lsls	r1, r3, #5
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	440b      	add	r3, r1
 8003966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003970:	1ad2      	subs	r2, r2, r3
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	202c      	movs	r0, #44	; 0x2c
 8003978:	fb00 f303 	mul.w	r3, r0, r3
 800397c:	440b      	add	r3, r1
 800397e:	3350      	adds	r3, #80	; 0x50
 8003980:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	3361      	adds	r3, #97	; 0x61
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	335c      	adds	r3, #92	; 0x5c
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b2:	461a      	mov	r2, r3
 80039b4:	2301      	movs	r3, #1
 80039b6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	212c      	movs	r1, #44	; 0x2c
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	333f      	adds	r3, #63	; 0x3f
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	333f      	adds	r3, #63	; 0x3f
 80039da:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d111      	bne.n	8003a04 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f005 fcf3 	bl	80093d6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fc:	461a      	mov	r2, r3
 80039fe:	2310      	movs	r3, #16
 8003a00:	6093      	str	r3, [r2, #8]
 8003a02:	e03a      	b.n	8003a7a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	212c      	movs	r1, #44	; 0x2c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	333f      	adds	r3, #63	; 0x3f
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d009      	beq.n	8003a2c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	333f      	adds	r3, #63	; 0x3f
 8003a26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d126      	bne.n	8003a7a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a4a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	212c      	movs	r1, #44	; 0x2c
 8003a52:	fb01 f303 	mul.w	r3, r1, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	3360      	adds	r3, #96	; 0x60
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	b2d9      	uxtb	r1, r3
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	202c      	movs	r0, #44	; 0x2c
 8003a68:	fb00 f303 	mul.w	r3, r0, r3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3360      	adds	r3, #96	; 0x60
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f007 ff51 	bl	800b91c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d12b      	bne.n	8003ada <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	212c      	movs	r1, #44	; 0x2c
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3348      	adds	r3, #72	; 0x48
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	202c      	movs	r0, #44	; 0x2c
 8003a98:	fb00 f202 	mul.w	r2, r0, r2
 8003a9c:	440a      	add	r2, r1
 8003a9e:	3240      	adds	r2, #64	; 0x40
 8003aa0:	8812      	ldrh	r2, [r2, #0]
 8003aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 818e 	beq.w	8003dcc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	212c      	movs	r1, #44	; 0x2c
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	3354      	adds	r3, #84	; 0x54
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	f083 0301 	eor.w	r3, r3, #1
 8003ac4:	b2d8      	uxtb	r0, r3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3354      	adds	r3, #84	; 0x54
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	701a      	strb	r2, [r3, #0]
}
 8003ad8:	e178      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	212c      	movs	r1, #44	; 0x2c
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3354      	adds	r3, #84	; 0x54
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	f083 0301 	eor.w	r3, r3, #1
 8003aee:	b2d8      	uxtb	r0, r3
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	3354      	adds	r3, #84	; 0x54
 8003afe:	4602      	mov	r2, r0
 8003b00:	701a      	strb	r2, [r3, #0]
}
 8003b02:	e163      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	f040 80f6 	bne.w	8003d08 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3361      	adds	r3, #97	; 0x61
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d109      	bne.n	8003b44 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	212c      	movs	r1, #44	; 0x2c
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3360      	adds	r3, #96	; 0x60
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	e0c9      	b.n	8003cd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	212c      	movs	r1, #44	; 0x2c
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	3361      	adds	r3, #97	; 0x61
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d109      	bne.n	8003b6c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	212c      	movs	r1, #44	; 0x2c
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	3360      	adds	r3, #96	; 0x60
 8003b66:	2205      	movs	r2, #5
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e0b5      	b.n	8003cd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	212c      	movs	r1, #44	; 0x2c
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	3361      	adds	r3, #97	; 0x61
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b06      	cmp	r3, #6
 8003b7e:	d009      	beq.n	8003b94 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	212c      	movs	r1, #44	; 0x2c
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3361      	adds	r3, #97	; 0x61
 8003b8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d150      	bne.n	8003c36 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	212c      	movs	r1, #44	; 0x2c
 8003b9a:	fb01 f303 	mul.w	r3, r1, r3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	335c      	adds	r3, #92	; 0x5c
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	202c      	movs	r0, #44	; 0x2c
 8003bac:	fb00 f303 	mul.w	r3, r0, r3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	335c      	adds	r3, #92	; 0x5c
 8003bb4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	212c      	movs	r1, #44	; 0x2c
 8003bbc:	fb01 f303 	mul.w	r3, r1, r3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	335c      	adds	r3, #92	; 0x5c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d912      	bls.n	8003bf0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	212c      	movs	r1, #44	; 0x2c
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	335c      	adds	r3, #92	; 0x5c
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	212c      	movs	r1, #44	; 0x2c
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	4413      	add	r3, r2
 8003be8:	3360      	adds	r3, #96	; 0x60
 8003bea:	2204      	movs	r2, #4
 8003bec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bee:	e073      	b.n	8003cd8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	212c      	movs	r1, #44	; 0x2c
 8003bf6:	fb01 f303 	mul.w	r3, r1, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3360      	adds	r3, #96	; 0x60
 8003bfe:	2202      	movs	r2, #2
 8003c00:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c18:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c20:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c34:	e050      	b.n	8003cd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	212c      	movs	r1, #44	; 0x2c
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	3361      	adds	r3, #97	; 0x61
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d122      	bne.n	8003c90 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	212c      	movs	r1, #44	; 0x2c
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	4413      	add	r3, r2
 8003c56:	3360      	adds	r3, #96	; 0x60
 8003c58:	2202      	movs	r2, #2
 8003c5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c88:	461a      	mov	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e023      	b.n	8003cd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3361      	adds	r3, #97	; 0x61
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b07      	cmp	r3, #7
 8003ca2:	d119      	bne.n	8003cd8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	335c      	adds	r3, #92	; 0x5c
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	202c      	movs	r0, #44	; 0x2c
 8003cbc:	fb00 f303 	mul.w	r3, r0, r3
 8003cc0:	440b      	add	r3, r1
 8003cc2:	335c      	adds	r3, #92	; 0x5c
 8003cc4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	212c      	movs	r1, #44	; 0x2c
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3360      	adds	r3, #96	; 0x60
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	b2d9      	uxtb	r1, r3
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	202c      	movs	r0, #44	; 0x2c
 8003cf4:	fb00 f303 	mul.w	r3, r0, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3360      	adds	r3, #96	; 0x60
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f007 fe0b 	bl	800b91c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d06:	e061      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d156      	bne.n	8003dcc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	212c      	movs	r1, #44	; 0x2c
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	333f      	adds	r3, #63	; 0x3f
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d111      	bne.n	8003d56 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	212c      	movs	r1, #44	; 0x2c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	335c      	adds	r3, #92	; 0x5c
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f005 fb41 	bl	80093d6 <USB_HC_Halt>
 8003d54:	e031      	b.n	8003dba <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	333f      	adds	r3, #63	; 0x3f
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	212c      	movs	r1, #44	; 0x2c
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	333f      	adds	r3, #63	; 0x3f
 8003d78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d11d      	bne.n	8003dba <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	212c      	movs	r1, #44	; 0x2c
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	335c      	adds	r3, #92	; 0x5c
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d110      	bne.n	8003dba <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3361      	adds	r3, #97	; 0x61
 8003da6:	2203      	movs	r2, #3
 8003da8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f005 fb0e 	bl	80093d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2310      	movs	r3, #16
 8003dca:	6093      	str	r3, [r2, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d11a      	bne.n	8003e3a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e10:	461a      	mov	r2, r3
 8003e12:	2304      	movs	r3, #4
 8003e14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	212c      	movs	r1, #44	; 0x2c
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	4413      	add	r3, r2
 8003e22:	3361      	adds	r3, #97	; 0x61
 8003e24:	2206      	movs	r2, #6
 8003e26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	4611      	mov	r1, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f005 facf 	bl	80093d6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003e38:	e331      	b.n	800449e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d12e      	bne.n	8003eae <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2320      	movs	r3, #32
 8003e60:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	333d      	adds	r3, #61	; 0x3d
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	f040 8313 	bne.w	800449e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	212c      	movs	r1, #44	; 0x2c
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	333d      	adds	r3, #61	; 0x3d
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	3360      	adds	r3, #96	; 0x60
 8003e98:	2202      	movs	r2, #2
 8003e9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f005 fa95 	bl	80093d6 <USB_HC_Halt>
}
 8003eac:	e2f7      	b.n	800449e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec4:	d112      	bne.n	8003eec <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ed8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f005 fa76 	bl	80093d6 <USB_HC_Halt>
}
 8003eea:	e2d8      	b.n	800449e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d140      	bne.n	8003f84 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	335c      	adds	r3, #92	; 0x5c
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d111      	bne.n	8003f4e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	212c      	movs	r1, #44	; 0x2c
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	333d      	adds	r3, #61	; 0x3d
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2340      	movs	r3, #64	; 0x40
 8003f4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3361      	adds	r3, #97	; 0x61
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f005 fa2a 	bl	80093d6 <USB_HC_Halt>
}
 8003f82:	e28c      	b.n	800449e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d12c      	bne.n	8003ff4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	212c      	movs	r1, #44	; 0x2c
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3361      	adds	r3, #97	; 0x61
 8003fa8:	2204      	movs	r2, #4
 8003faa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	212c      	movs	r1, #44	; 0x2c
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	333d      	adds	r3, #61	; 0x3d
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	335c      	adds	r3, #92	; 0x5c
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f005 f9fb 	bl	80093d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fec:	461a      	mov	r2, r3
 8003fee:	2340      	movs	r3, #64	; 0x40
 8003ff0:	6093      	str	r3, [r2, #8]
}
 8003ff2:	e254      	b.n	800449e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b08      	cmp	r3, #8
 8004008:	d11a      	bne.n	8004040 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	4413      	add	r3, r2
 8004012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004016:	461a      	mov	r2, r3
 8004018:	2308      	movs	r3, #8
 800401a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	212c      	movs	r1, #44	; 0x2c
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	4413      	add	r3, r2
 8004028:	3361      	adds	r3, #97	; 0x61
 800402a:	2205      	movs	r2, #5
 800402c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f005 f9cc 	bl	80093d6 <USB_HC_Halt>
}
 800403e:	e22e      	b.n	800449e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	4413      	add	r3, r2
 8004048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b10      	cmp	r3, #16
 8004054:	d140      	bne.n	80040d8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	335c      	adds	r3, #92	; 0x5c
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3361      	adds	r3, #97	; 0x61
 8004076:	2203      	movs	r2, #3
 8004078:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	333d      	adds	r3, #61	; 0x3d
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d112      	bne.n	80040b4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	212c      	movs	r1, #44	; 0x2c
 8004094:	fb01 f303 	mul.w	r3, r1, r3
 8004098:	4413      	add	r3, r2
 800409a:	333c      	adds	r3, #60	; 0x3c
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d108      	bne.n	80040b4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	212c      	movs	r1, #44	; 0x2c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	333d      	adds	r3, #61	; 0x3d
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f005 f989 	bl	80093d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d0:	461a      	mov	r2, r3
 80040d2:	2310      	movs	r3, #16
 80040d4:	6093      	str	r3, [r2, #8]
}
 80040d6:	e1e2      	b.n	800449e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d164      	bne.n	80041b8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d111      	bne.n	800411a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	212c      	movs	r1, #44	; 0x2c
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	3361      	adds	r3, #97	; 0x61
 8004104:	2206      	movs	r2, #6
 8004106:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	4611      	mov	r1, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f005 f95f 	bl	80093d6 <USB_HC_Halt>
 8004118:	e044      	b.n	80041a4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	335c      	adds	r3, #92	; 0x5c
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	202c      	movs	r0, #44	; 0x2c
 8004132:	fb00 f303 	mul.w	r3, r0, r3
 8004136:	440b      	add	r3, r1
 8004138:	335c      	adds	r3, #92	; 0x5c
 800413a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	335c      	adds	r3, #92	; 0x5c
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d920      	bls.n	8004192 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	212c      	movs	r1, #44	; 0x2c
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	4413      	add	r3, r2
 800415c:	335c      	adds	r3, #92	; 0x5c
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	212c      	movs	r1, #44	; 0x2c
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	4413      	add	r3, r2
 800416e:	3360      	adds	r3, #96	; 0x60
 8004170:	2204      	movs	r2, #4
 8004172:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	b2d9      	uxtb	r1, r3
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	202c      	movs	r0, #44	; 0x2c
 800417e:	fb00 f303 	mul.w	r3, r0, r3
 8004182:	4413      	add	r3, r2
 8004184:	3360      	adds	r3, #96	; 0x60
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f007 fbc6 	bl	800b91c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004190:	e008      	b.n	80041a4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	3360      	adds	r3, #96	; 0x60
 80041a0:	2202      	movs	r2, #2
 80041a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b0:	461a      	mov	r2, r3
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	6093      	str	r3, [r2, #8]
}
 80041b6:	e172      	b.n	800449e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ce:	d11b      	bne.n	8004208 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	212c      	movs	r1, #44	; 0x2c
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	3361      	adds	r3, #97	; 0x61
 80041de:	2208      	movs	r2, #8
 80041e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f005 f8f2 	bl	80093d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fe:	461a      	mov	r2, r3
 8004200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004204:	6093      	str	r3, [r2, #8]
}
 8004206:	e14a      	b.n	800449e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b02      	cmp	r3, #2
 800421c:	f040 813f 	bne.w	800449e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	212c      	movs	r1, #44	; 0x2c
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	4413      	add	r3, r2
 800422c:	3361      	adds	r3, #97	; 0x61
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d17d      	bne.n	8004330 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	212c      	movs	r1, #44	; 0x2c
 800423a:	fb01 f303 	mul.w	r3, r1, r3
 800423e:	4413      	add	r3, r2
 8004240:	3360      	adds	r3, #96	; 0x60
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	333f      	adds	r3, #63	; 0x3f
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d00a      	beq.n	8004270 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	333f      	adds	r3, #63	; 0x3f
 8004268:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800426a:	2b03      	cmp	r3, #3
 800426c:	f040 8100 	bne.w	8004470 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d113      	bne.n	80042a0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	212c      	movs	r1, #44	; 0x2c
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	3355      	adds	r3, #85	; 0x55
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	f083 0301 	eor.w	r3, r3, #1
 800428c:	b2d8      	uxtb	r0, r3
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	212c      	movs	r1, #44	; 0x2c
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	4413      	add	r3, r2
 800429a:	3355      	adds	r3, #85	; 0x55
 800429c:	4602      	mov	r2, r0
 800429e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	f040 80e3 	bne.w	8004470 <HCD_HC_OUT_IRQHandler+0x69c>
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	334c      	adds	r3, #76	; 0x4c
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80d8 	beq.w	8004470 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	212c      	movs	r1, #44	; 0x2c
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	334c      	adds	r3, #76	; 0x4c
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	202c      	movs	r0, #44	; 0x2c
 80042d6:	fb00 f202 	mul.w	r2, r0, r2
 80042da:	440a      	add	r2, r1
 80042dc:	3240      	adds	r2, #64	; 0x40
 80042de:	8812      	ldrh	r2, [r2, #0]
 80042e0:	4413      	add	r3, r2
 80042e2:	3b01      	subs	r3, #1
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	202c      	movs	r0, #44	; 0x2c
 80042ea:	fb00 f202 	mul.w	r2, r0, r2
 80042ee:	440a      	add	r2, r1
 80042f0:	3240      	adds	r2, #64	; 0x40
 80042f2:	8812      	ldrh	r2, [r2, #0]
 80042f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80b5 	beq.w	8004470 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	212c      	movs	r1, #44	; 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	3355      	adds	r3, #85	; 0x55
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	f083 0301 	eor.w	r3, r3, #1
 800431a:	b2d8      	uxtb	r0, r3
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	3355      	adds	r3, #85	; 0x55
 800432a:	4602      	mov	r2, r0
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	e09f      	b.n	8004470 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	212c      	movs	r1, #44	; 0x2c
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	4413      	add	r3, r2
 800433c:	3361      	adds	r3, #97	; 0x61
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d109      	bne.n	8004358 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	212c      	movs	r1, #44	; 0x2c
 800434a:	fb01 f303 	mul.w	r3, r1, r3
 800434e:	4413      	add	r3, r2
 8004350:	3360      	adds	r3, #96	; 0x60
 8004352:	2202      	movs	r2, #2
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	e08b      	b.n	8004470 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	212c      	movs	r1, #44	; 0x2c
 800435e:	fb01 f303 	mul.w	r3, r1, r3
 8004362:	4413      	add	r3, r2
 8004364:	3361      	adds	r3, #97	; 0x61
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d109      	bne.n	8004380 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	212c      	movs	r1, #44	; 0x2c
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	4413      	add	r3, r2
 8004378:	3360      	adds	r3, #96	; 0x60
 800437a:	2202      	movs	r2, #2
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e077      	b.n	8004470 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	212c      	movs	r1, #44	; 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	4413      	add	r3, r2
 800438c:	3361      	adds	r3, #97	; 0x61
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b05      	cmp	r3, #5
 8004392:	d109      	bne.n	80043a8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	212c      	movs	r1, #44	; 0x2c
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	4413      	add	r3, r2
 80043a0:	3360      	adds	r3, #96	; 0x60
 80043a2:	2205      	movs	r2, #5
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e063      	b.n	8004470 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	212c      	movs	r1, #44	; 0x2c
 80043ae:	fb01 f303 	mul.w	r3, r1, r3
 80043b2:	4413      	add	r3, r2
 80043b4:	3361      	adds	r3, #97	; 0x61
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b06      	cmp	r3, #6
 80043ba:	d009      	beq.n	80043d0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	212c      	movs	r1, #44	; 0x2c
 80043c2:	fb01 f303 	mul.w	r3, r1, r3
 80043c6:	4413      	add	r3, r2
 80043c8:	3361      	adds	r3, #97	; 0x61
 80043ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d14f      	bne.n	8004470 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	212c      	movs	r1, #44	; 0x2c
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	4413      	add	r3, r2
 80043dc:	335c      	adds	r3, #92	; 0x5c
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	202c      	movs	r0, #44	; 0x2c
 80043e8:	fb00 f303 	mul.w	r3, r0, r3
 80043ec:	440b      	add	r3, r1
 80043ee:	335c      	adds	r3, #92	; 0x5c
 80043f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	212c      	movs	r1, #44	; 0x2c
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	4413      	add	r3, r2
 80043fe:	335c      	adds	r3, #92	; 0x5c
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d912      	bls.n	800442c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	212c      	movs	r1, #44	; 0x2c
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	4413      	add	r3, r2
 8004412:	335c      	adds	r3, #92	; 0x5c
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	212c      	movs	r1, #44	; 0x2c
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	4413      	add	r3, r2
 8004424:	3360      	adds	r3, #96	; 0x60
 8004426:	2204      	movs	r2, #4
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	e021      	b.n	8004470 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	212c      	movs	r1, #44	; 0x2c
 8004432:	fb01 f303 	mul.w	r3, r1, r3
 8004436:	4413      	add	r3, r2
 8004438:	3360      	adds	r3, #96	; 0x60
 800443a:	2202      	movs	r2, #2
 800443c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004454:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800445c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	461a      	mov	r2, r3
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	4413      	add	r3, r2
 8004478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447c:	461a      	mov	r2, r3
 800447e:	2302      	movs	r3, #2
 8004480:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	b2d9      	uxtb	r1, r3
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	202c      	movs	r0, #44	; 0x2c
 800448c:	fb00 f303 	mul.w	r3, r0, r3
 8004490:	4413      	add	r3, r2
 8004492:	3360      	adds	r3, #96	; 0x60
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f007 fa3f 	bl	800b91c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800449e:	bf00      	nop
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b08a      	sub	sp, #40	; 0x28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	0c5b      	lsrs	r3, r3, #17
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d004      	beq.n	80044ec <HCD_RXQLVL_IRQHandler+0x46>
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b05      	cmp	r3, #5
 80044e6:	f000 80a9 	beq.w	800463c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80044ea:	e0aa      	b.n	8004642 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80a6 	beq.w	8004640 <HCD_RXQLVL_IRQHandler+0x19a>
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	212c      	movs	r1, #44	; 0x2c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	3344      	adds	r3, #68	; 0x44
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 809b 	beq.w	8004640 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	212c      	movs	r1, #44	; 0x2c
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	4413      	add	r3, r2
 8004516:	3350      	adds	r3, #80	; 0x50
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	441a      	add	r2, r3
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	202c      	movs	r0, #44	; 0x2c
 8004524:	fb00 f303 	mul.w	r3, r0, r3
 8004528:	440b      	add	r3, r1
 800452a:	334c      	adds	r3, #76	; 0x4c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d87a      	bhi.n	8004628 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	212c      	movs	r1, #44	; 0x2c
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	4413      	add	r3, r2
 8004542:	3344      	adds	r3, #68	; 0x44
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	b292      	uxth	r2, r2
 800454a:	4619      	mov	r1, r3
 800454c:	f004 fa9a 	bl	8008a84 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	212c      	movs	r1, #44	; 0x2c
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	4413      	add	r3, r2
 800455c:	3344      	adds	r3, #68	; 0x44
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	441a      	add	r2, r3
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	202c      	movs	r0, #44	; 0x2c
 800456a:	fb00 f303 	mul.w	r3, r0, r3
 800456e:	440b      	add	r3, r1
 8004570:	3344      	adds	r3, #68	; 0x44
 8004572:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	3350      	adds	r3, #80	; 0x50
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	441a      	add	r2, r3
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	202c      	movs	r0, #44	; 0x2c
 800458e:	fb00 f303 	mul.w	r3, r0, r3
 8004592:	440b      	add	r3, r1
 8004594:	3350      	adds	r3, #80	; 0x50
 8004596:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	0cdb      	lsrs	r3, r3, #19
 80045a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	212c      	movs	r1, #44	; 0x2c
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	3340      	adds	r3, #64	; 0x40
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d13c      	bne.n	8004640 <HCD_RXQLVL_IRQHandler+0x19a>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d039      	beq.n	8004640 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045e2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045ea:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f8:	461a      	mov	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	212c      	movs	r1, #44	; 0x2c
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	4413      	add	r3, r2
 800460a:	3354      	adds	r3, #84	; 0x54
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	f083 0301 	eor.w	r3, r3, #1
 8004612:	b2d8      	uxtb	r0, r3
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	3354      	adds	r3, #84	; 0x54
 8004622:	4602      	mov	r2, r0
 8004624:	701a      	strb	r2, [r3, #0]
      break;
 8004626:	e00b      	b.n	8004640 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	212c      	movs	r1, #44	; 0x2c
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	3360      	adds	r3, #96	; 0x60
 8004636:	2204      	movs	r2, #4
 8004638:	701a      	strb	r2, [r3, #0]
      break;
 800463a:	e001      	b.n	8004640 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800463c:	bf00      	nop
 800463e:	e000      	b.n	8004642 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004640:	bf00      	nop
  }
}
 8004642:	bf00      	nop
 8004644:	3728      	adds	r7, #40	; 0x28
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b086      	sub	sp, #24
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004676:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d10b      	bne.n	800469a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d102      	bne.n	8004692 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f007 f929 	bl	800b8e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d132      	bne.n	800470a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f043 0308 	orr.w	r3, r3, #8
 80046aa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d126      	bne.n	8004704 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d113      	bne.n	80046e6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80046c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046c8:	d106      	bne.n	80046d8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2102      	movs	r1, #2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f004 fb45 	bl	8008d60 <USB_InitFSLSPClkSel>
 80046d6:	e011      	b.n	80046fc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2101      	movs	r1, #1
 80046de:	4618      	mov	r0, r3
 80046e0:	f004 fb3e 	bl	8008d60 <USB_InitFSLSPClkSel>
 80046e4:	e00a      	b.n	80046fc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d106      	bne.n	80046fc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046f4:	461a      	mov	r2, r3
 80046f6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80046fa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f007 f91b 	bl	800b938 <HAL_HCD_PortEnabled_Callback>
 8004702:	e002      	b.n	800470a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f007 f925 	bl	800b954 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b20      	cmp	r3, #32
 8004712:	d103      	bne.n	800471c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f043 0320 	orr.w	r3, r3, #32
 800471a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004722:	461a      	mov	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6013      	str	r3, [r2, #0]
}
 8004728:	bf00      	nop
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e12b      	b.n	800499a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fd f894 	bl	8001884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2224      	movs	r2, #36	; 0x24
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004782:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004792:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004794:	f001 fd38 	bl	8006208 <HAL_RCC_GetPCLK1Freq>
 8004798:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4a81      	ldr	r2, [pc, #516]	; (80049a4 <HAL_I2C_Init+0x274>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d807      	bhi.n	80047b4 <HAL_I2C_Init+0x84>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a80      	ldr	r2, [pc, #512]	; (80049a8 <HAL_I2C_Init+0x278>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	bf94      	ite	ls
 80047ac:	2301      	movls	r3, #1
 80047ae:	2300      	movhi	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e006      	b.n	80047c2 <HAL_I2C_Init+0x92>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a7d      	ldr	r2, [pc, #500]	; (80049ac <HAL_I2C_Init+0x27c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	bf94      	ite	ls
 80047bc:	2301      	movls	r3, #1
 80047be:	2300      	movhi	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e0e7      	b.n	800499a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4a78      	ldr	r2, [pc, #480]	; (80049b0 <HAL_I2C_Init+0x280>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	0c9b      	lsrs	r3, r3, #18
 80047d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4a6a      	ldr	r2, [pc, #424]	; (80049a4 <HAL_I2C_Init+0x274>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d802      	bhi.n	8004804 <HAL_I2C_Init+0xd4>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	3301      	adds	r3, #1
 8004802:	e009      	b.n	8004818 <HAL_I2C_Init+0xe8>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	4a69      	ldr	r2, [pc, #420]	; (80049b4 <HAL_I2C_Init+0x284>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	099b      	lsrs	r3, r3, #6
 8004816:	3301      	adds	r3, #1
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	430b      	orrs	r3, r1
 800481e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800482a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	495c      	ldr	r1, [pc, #368]	; (80049a4 <HAL_I2C_Init+0x274>)
 8004834:	428b      	cmp	r3, r1
 8004836:	d819      	bhi.n	800486c <HAL_I2C_Init+0x13c>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1e59      	subs	r1, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	fbb1 f3f3 	udiv	r3, r1, r3
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	f640 73fc 	movw	r3, #4092	; 0xffc
 800484c:	400b      	ands	r3, r1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_I2C_Init+0x138>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1e59      	subs	r1, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004860:	3301      	adds	r3, #1
 8004862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004866:	e051      	b.n	800490c <HAL_I2C_Init+0x1dc>
 8004868:	2304      	movs	r3, #4
 800486a:	e04f      	b.n	800490c <HAL_I2C_Init+0x1dc>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d111      	bne.n	8004898 <HAL_I2C_Init+0x168>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1e58      	subs	r0, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6859      	ldr	r1, [r3, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	440b      	add	r3, r1
 8004882:	fbb0 f3f3 	udiv	r3, r0, r3
 8004886:	3301      	adds	r3, #1
 8004888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e012      	b.n	80048be <HAL_I2C_Init+0x18e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1e58      	subs	r0, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6859      	ldr	r1, [r3, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	0099      	lsls	r1, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bf0c      	ite	eq
 80048b8:	2301      	moveq	r3, #1
 80048ba:	2300      	movne	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_Init+0x196>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e022      	b.n	800490c <HAL_I2C_Init+0x1dc>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10e      	bne.n	80048ec <HAL_I2C_Init+0x1bc>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1e58      	subs	r0, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	460b      	mov	r3, r1
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	440b      	add	r3, r1
 80048dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e0:	3301      	adds	r3, #1
 80048e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ea:	e00f      	b.n	800490c <HAL_I2C_Init+0x1dc>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1e58      	subs	r0, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	0099      	lsls	r1, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004902:	3301      	adds	r3, #1
 8004904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004908:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	6809      	ldr	r1, [r1, #0]
 8004910:	4313      	orrs	r3, r2
 8004912:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69da      	ldr	r2, [r3, #28]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800493a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6911      	ldr	r1, [r2, #16]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68d2      	ldr	r2, [r2, #12]
 8004946:	4311      	orrs	r1, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	430b      	orrs	r3, r1
 800494e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695a      	ldr	r2, [r3, #20]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	000186a0 	.word	0x000186a0
 80049a8:	001e847f 	.word	0x001e847f
 80049ac:	003d08ff 	.word	0x003d08ff
 80049b0:	431bde83 	.word	0x431bde83
 80049b4:	10624dd3 	.word	0x10624dd3

080049b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	4608      	mov	r0, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	817b      	strh	r3, [r7, #10]
 80049ca:	460b      	mov	r3, r1
 80049cc:	813b      	strh	r3, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049d2:	f7fd fb8f 	bl	80020f4 <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	f040 80d9 	bne.w	8004b98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	2319      	movs	r3, #25
 80049ec:	2201      	movs	r2, #1
 80049ee:	496d      	ldr	r1, [pc, #436]	; (8004ba4 <HAL_I2C_Mem_Write+0x1ec>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f971 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
 80049fe:	e0cc      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_I2C_Mem_Write+0x56>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e0c5      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d007      	beq.n	8004a34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2221      	movs	r2, #33	; 0x21
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2240      	movs	r2, #64	; 0x40
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a3a      	ldr	r2, [r7, #32]
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a4d      	ldr	r2, [pc, #308]	; (8004ba8 <HAL_I2C_Mem_Write+0x1f0>)
 8004a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a76:	88f8      	ldrh	r0, [r7, #6]
 8004a78:	893a      	ldrh	r2, [r7, #8]
 8004a7a:	8979      	ldrh	r1, [r7, #10]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	4603      	mov	r3, r0
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f890 	bl	8004bac <I2C_RequestMemoryWrite>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d052      	beq.n	8004b38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e081      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f9f2 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d107      	bne.n	8004abe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e06b      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d11b      	bne.n	8004b38 <HAL_I2C_Mem_Write+0x180>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d017      	beq.n	8004b38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1aa      	bne.n	8004a96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f9de 	bl	8004f06 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00d      	beq.n	8004b6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d107      	bne.n	8004b68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e016      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e000      	b.n	8004b9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b98:	2302      	movs	r3, #2
  }
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	00100002 	.word	0x00100002
 8004ba8:	ffff0000 	.word	0xffff0000

08004bac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	817b      	strh	r3, [r7, #10]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	813b      	strh	r3, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f878 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfc:	d103      	bne.n	8004c06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e05f      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	6a3a      	ldr	r2, [r7, #32]
 8004c1e:	492d      	ldr	r1, [pc, #180]	; (8004cd4 <I2C_RequestMemoryWrite+0x128>)
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f8b0 	bl	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e04c      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c48:	6a39      	ldr	r1, [r7, #32]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f91a 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d107      	bne.n	8004c6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e02b      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d105      	bne.n	8004c84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]
 8004c82:	e021      	b.n	8004cc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c84:	893b      	ldrh	r3, [r7, #8]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	6a39      	ldr	r1, [r7, #32]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f8f4 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d107      	bne.n	8004cba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e005      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cbe:	893b      	ldrh	r3, [r7, #8]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	00010002 	.word	0x00010002

08004cd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ce8:	e025      	b.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf0:	d021      	beq.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf2:	f7fd f9ff 	bl	80020f4 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d302      	bcc.n	8004d08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d116      	bne.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f043 0220 	orr.w	r2, r3, #32
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e023      	b.n	8004d7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10d      	bne.n	8004d5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	43da      	mvns	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	e00c      	b.n	8004d76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	43da      	mvns	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4013      	ands	r3, r2
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	2300      	movne	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d0b6      	beq.n	8004cea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d94:	e051      	b.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da4:	d123      	bne.n	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f043 0204 	orr.w	r2, r3, #4
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e046      	b.n	8004e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d021      	beq.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fd f97d 	bl	80020f4 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d116      	bne.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e020      	b.n	8004e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	0c1b      	lsrs	r3, r3, #16
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d10c      	bne.n	8004e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bf14      	ite	ne
 8004e56:	2301      	movne	r3, #1
 8004e58:	2300      	moveq	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	e00b      	b.n	8004e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	43da      	mvns	r2, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bf14      	ite	ne
 8004e70:	2301      	movne	r3, #1
 8004e72:	2300      	moveq	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d18d      	bne.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e90:	e02d      	b.n	8004eee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f878 	bl	8004f88 <I2C_IsAcknowledgeFailed>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e02d      	b.n	8004efe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d021      	beq.n	8004eee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fd f923 	bl	80020f4 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d116      	bne.n	8004eee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f043 0220 	orr.w	r2, r3, #32
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e007      	b.n	8004efe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d1ca      	bne.n	8004e92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f12:	e02d      	b.n	8004f70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f837 	bl	8004f88 <I2C_IsAcknowledgeFailed>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e02d      	b.n	8004f80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d021      	beq.n	8004f70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2c:	f7fd f8e2 	bl	80020f4 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d116      	bne.n	8004f70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	f043 0220 	orr.w	r2, r3, #32
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e007      	b.n	8004f80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d1ca      	bne.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d11b      	bne.n	8004fd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	f043 0204 	orr.w	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e128      	b.n	800524c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a90      	ldr	r2, [pc, #576]	; (8005254 <HAL_I2S_Init+0x26c>)
 8005012:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fc fc7d 	bl	8001914 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005030:	f023 030f 	bic.w	r3, r3, #15
 8005034:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2202      	movs	r2, #2
 800503c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d060      	beq.n	8005108 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d102      	bne.n	8005054 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800504e:	2310      	movs	r3, #16
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	e001      	b.n	8005058 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005054:	2320      	movs	r3, #32
 8005056:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b20      	cmp	r3, #32
 800505e:	d802      	bhi.n	8005066 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005066:	2001      	movs	r0, #1
 8005068:	f001 f9d8 	bl	800641c <HAL_RCCEx_GetPeriphCLKFreq>
 800506c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005076:	d125      	bne.n	80050c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d010      	beq.n	80050a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	fbb2 f2f3 	udiv	r2, r2, r3
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	461a      	mov	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	3305      	adds	r3, #5
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	e01f      	b.n	80050e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	461a      	mov	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80050be:	3305      	adds	r3, #5
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	e00e      	b.n	80050e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	461a      	mov	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	3305      	adds	r3, #5
 80050e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4a5c      	ldr	r2, [pc, #368]	; (8005258 <HAL_I2S_Init+0x270>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	08db      	lsrs	r3, r3, #3
 80050ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	e003      	b.n	8005110 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005108:	2302      	movs	r3, #2
 800510a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d902      	bls.n	800511c <HAL_I2S_Init+0x134>
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2bff      	cmp	r3, #255	; 0xff
 800511a:	d907      	bls.n	800512c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005120:	f043 0210 	orr.w	r2, r3, #16
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e08f      	b.n	800524c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	ea42 0103 	orr.w	r1, r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	430a      	orrs	r2, r1
 800513e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800514a:	f023 030f 	bic.w	r3, r3, #15
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6851      	ldr	r1, [r2, #4]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6892      	ldr	r2, [r2, #8]
 8005156:	4311      	orrs	r1, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68d2      	ldr	r2, [r2, #12]
 800515c:	4311      	orrs	r1, r2
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6992      	ldr	r2, [r2, #24]
 8005162:	430a      	orrs	r2, r1
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800516e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d161      	bne.n	800523c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a38      	ldr	r2, [pc, #224]	; (800525c <HAL_I2S_Init+0x274>)
 800517c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a37      	ldr	r2, [pc, #220]	; (8005260 <HAL_I2S_Init+0x278>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d101      	bne.n	800518c <HAL_I2S_Init+0x1a4>
 8005188:	4b36      	ldr	r3, [pc, #216]	; (8005264 <HAL_I2S_Init+0x27c>)
 800518a:	e001      	b.n	8005190 <HAL_I2S_Init+0x1a8>
 800518c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	4932      	ldr	r1, [pc, #200]	; (8005260 <HAL_I2S_Init+0x278>)
 8005198:	428a      	cmp	r2, r1
 800519a:	d101      	bne.n	80051a0 <HAL_I2S_Init+0x1b8>
 800519c:	4a31      	ldr	r2, [pc, #196]	; (8005264 <HAL_I2S_Init+0x27c>)
 800519e:	e001      	b.n	80051a4 <HAL_I2S_Init+0x1bc>
 80051a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80051a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80051a8:	f023 030f 	bic.w	r3, r3, #15
 80051ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a2b      	ldr	r2, [pc, #172]	; (8005260 <HAL_I2S_Init+0x278>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d101      	bne.n	80051bc <HAL_I2S_Init+0x1d4>
 80051b8:	4b2a      	ldr	r3, [pc, #168]	; (8005264 <HAL_I2S_Init+0x27c>)
 80051ba:	e001      	b.n	80051c0 <HAL_I2S_Init+0x1d8>
 80051bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051c0:	2202      	movs	r2, #2
 80051c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a25      	ldr	r2, [pc, #148]	; (8005260 <HAL_I2S_Init+0x278>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d101      	bne.n	80051d2 <HAL_I2S_Init+0x1ea>
 80051ce:	4b25      	ldr	r3, [pc, #148]	; (8005264 <HAL_I2S_Init+0x27c>)
 80051d0:	e001      	b.n	80051d6 <HAL_I2S_Init+0x1ee>
 80051d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e2:	d003      	beq.n	80051ec <HAL_I2S_Init+0x204>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80051ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e001      	b.n	80051f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005202:	4313      	orrs	r3, r2
 8005204:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800520c:	4313      	orrs	r3, r2
 800520e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005216:	4313      	orrs	r3, r2
 8005218:	b29a      	uxth	r2, r3
 800521a:	897b      	ldrh	r3, [r7, #10]
 800521c:	4313      	orrs	r3, r2
 800521e:	b29b      	uxth	r3, r3
 8005220:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005224:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a0d      	ldr	r2, [pc, #52]	; (8005260 <HAL_I2S_Init+0x278>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d101      	bne.n	8005234 <HAL_I2S_Init+0x24c>
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <HAL_I2S_Init+0x27c>)
 8005232:	e001      	b.n	8005238 <HAL_I2S_Init+0x250>
 8005234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005238:	897a      	ldrh	r2, [r7, #10]
 800523a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	0800535f 	.word	0x0800535f
 8005258:	cccccccd 	.word	0xcccccccd
 800525c:	08005475 	.word	0x08005475
 8005260:	40003800 	.word	0x40003800
 8005264:	40003400 	.word	0x40003400

08005268 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	881a      	ldrh	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10e      	bne.n	80052f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff ffb8 	bl	8005268 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	b292      	uxth	r2, r2
 8005314:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	1c9a      	adds	r2, r3, #2
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10e      	bne.n	8005356 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005346:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff ff93 	bl	800527c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005356:	bf00      	nop
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b086      	sub	sp, #24
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b04      	cmp	r3, #4
 8005378:	d13a      	bne.n	80053f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b01      	cmp	r3, #1
 8005382:	d109      	bne.n	8005398 <I2S_IRQHandler+0x3a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d102      	bne.n	8005398 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff ffb4 	bl	8005300 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d126      	bne.n	80053f0 <I2S_IRQHandler+0x92>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d11f      	bne.n	80053f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80053c0:	2300      	movs	r3, #0
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	f043 0202 	orr.w	r2, r3, #2
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff ff50 	bl	8005290 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d136      	bne.n	800546a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b02      	cmp	r3, #2
 8005404:	d109      	bne.n	800541a <I2S_IRQHandler+0xbc>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005410:	2b80      	cmp	r3, #128	; 0x80
 8005412:	d102      	bne.n	800541a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff ff45 	bl	80052a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b08      	cmp	r3, #8
 8005422:	d122      	bne.n	800546a <I2S_IRQHandler+0x10c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b20      	cmp	r3, #32
 8005430:	d11b      	bne.n	800546a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005440:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545c:	f043 0204 	orr.w	r2, r3, #4
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff ff13 	bl	8005290 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800546a:	bf00      	nop
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a92      	ldr	r2, [pc, #584]	; (80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d101      	bne.n	8005492 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800548e:	4b92      	ldr	r3, [pc, #584]	; (80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005490:	e001      	b.n	8005496 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a8b      	ldr	r2, [pc, #556]	; (80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d101      	bne.n	80054b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80054ac:	4b8a      	ldr	r3, [pc, #552]	; (80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054ae:	e001      	b.n	80054b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80054b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c0:	d004      	beq.n	80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f040 8099 	bne.w	80055fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d107      	bne.n	80054e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f925 	bl	8005730 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d107      	bne.n	8005500 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f9c8 	bl	8005890 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005506:	2b40      	cmp	r3, #64	; 0x40
 8005508:	d13a      	bne.n	8005580 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d035      	beq.n	8005580 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a6e      	ldr	r2, [pc, #440]	; (80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d101      	bne.n	8005522 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800551e:	4b6e      	ldr	r3, [pc, #440]	; (80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005520:	e001      	b.n	8005526 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005522:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4969      	ldr	r1, [pc, #420]	; (80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800552e:	428b      	cmp	r3, r1
 8005530:	d101      	bne.n	8005536 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005532:	4b69      	ldr	r3, [pc, #420]	; (80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005534:	e001      	b.n	800553a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800553a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800553e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800554e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	f043 0202 	orr.w	r2, r3, #2
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff fe88 	bl	8005290 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b08      	cmp	r3, #8
 8005588:	f040 80c3 	bne.w	8005712 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80bd 	beq.w	8005712 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a49      	ldr	r2, [pc, #292]	; (80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d101      	bne.n	80055b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80055b2:	4b49      	ldr	r3, [pc, #292]	; (80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055b4:	e001      	b.n	80055ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80055b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4944      	ldr	r1, [pc, #272]	; (80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055c2:	428b      	cmp	r3, r1
 80055c4:	d101      	bne.n	80055ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80055c6:	4b44      	ldr	r3, [pc, #272]	; (80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055c8:	e001      	b.n	80055ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80055ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80055d4:	2300      	movs	r3, #0
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60bb      	str	r3, [r7, #8]
 80055e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	f043 0204 	orr.w	r2, r3, #4
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff fe4a 	bl	8005290 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055fc:	e089      	b.n	8005712 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b02      	cmp	r3, #2
 8005606:	d107      	bne.n	8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f8be 	bl	8005794 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b01      	cmp	r3, #1
 8005620:	d107      	bne.n	8005632 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f8fd 	bl	800582c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b40      	cmp	r3, #64	; 0x40
 800563a:	d12f      	bne.n	800569c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d02a      	beq.n	800569c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005654:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d101      	bne.n	8005664 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005660:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005662:	e001      	b.n	8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4919      	ldr	r1, [pc, #100]	; (80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005670:	428b      	cmp	r3, r1
 8005672:	d101      	bne.n	8005678 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005674:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005676:	e001      	b.n	800567c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800567c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005680:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568e:	f043 0202 	orr.w	r2, r3, #2
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff fdfa 	bl	8005290 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d136      	bne.n	8005714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d031      	beq.n	8005714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a07      	ldr	r2, [pc, #28]	; (80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80056ba:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056bc:	e001      	b.n	80056c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80056be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4902      	ldr	r1, [pc, #8]	; (80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056ca:	428b      	cmp	r3, r1
 80056cc:	d106      	bne.n	80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80056ce:	4b02      	ldr	r3, [pc, #8]	; (80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056d0:	e006      	b.n	80056e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80056d2:	bf00      	nop
 80056d4:	40003800 	.word	0x40003800
 80056d8:	40003400 	.word	0x40003400
 80056dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	f043 0204 	orr.w	r2, r3, #4
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fdc0 	bl	8005290 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005710:	e000      	b.n	8005714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005712:	bf00      	nop
}
 8005714:	bf00      	nop
 8005716:	3720      	adds	r7, #32
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	1c99      	adds	r1, r3, #2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6251      	str	r1, [r2, #36]	; 0x24
 8005742:	881a      	ldrh	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574e:	b29b      	uxth	r3, r3
 8005750:	3b01      	subs	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d113      	bne.n	800578a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005770:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff ffc9 	bl	800571c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	1c99      	adds	r1, r3, #2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6251      	str	r1, [r2, #36]	; 0x24
 80057a6:	8819      	ldrh	r1, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1d      	ldr	r2, [pc, #116]	; (8005824 <I2SEx_TxISR_I2SExt+0x90>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d101      	bne.n	80057b6 <I2SEx_TxISR_I2SExt+0x22>
 80057b2:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <I2SEx_TxISR_I2SExt+0x94>)
 80057b4:	e001      	b.n	80057ba <I2SEx_TxISR_I2SExt+0x26>
 80057b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057ba:	460a      	mov	r2, r1
 80057bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d121      	bne.n	800581a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a12      	ldr	r2, [pc, #72]	; (8005824 <I2SEx_TxISR_I2SExt+0x90>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d101      	bne.n	80057e4 <I2SEx_TxISR_I2SExt+0x50>
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <I2SEx_TxISR_I2SExt+0x94>)
 80057e2:	e001      	b.n	80057e8 <I2SEx_TxISR_I2SExt+0x54>
 80057e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	490d      	ldr	r1, [pc, #52]	; (8005824 <I2SEx_TxISR_I2SExt+0x90>)
 80057f0:	428b      	cmp	r3, r1
 80057f2:	d101      	bne.n	80057f8 <I2SEx_TxISR_I2SExt+0x64>
 80057f4:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <I2SEx_TxISR_I2SExt+0x94>)
 80057f6:	e001      	b.n	80057fc <I2SEx_TxISR_I2SExt+0x68>
 80057f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005800:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff ff81 	bl	800571c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800581a:	bf00      	nop
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40003800 	.word	0x40003800
 8005828:	40003400 	.word	0x40003400

0800582c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68d8      	ldr	r0, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	1c99      	adds	r1, r3, #2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005844:	b282      	uxth	r2, r0
 8005846:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d113      	bne.n	8005888 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800586e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff ff4a 	bl	800571c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a20      	ldr	r2, [pc, #128]	; (8005920 <I2SEx_RxISR_I2SExt+0x90>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d101      	bne.n	80058a6 <I2SEx_RxISR_I2SExt+0x16>
 80058a2:	4b20      	ldr	r3, [pc, #128]	; (8005924 <I2SEx_RxISR_I2SExt+0x94>)
 80058a4:	e001      	b.n	80058aa <I2SEx_RxISR_I2SExt+0x1a>
 80058a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058aa:	68d8      	ldr	r0, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	1c99      	adds	r1, r3, #2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80058b6:	b282      	uxth	r2, r0
 80058b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d121      	bne.n	8005916 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a12      	ldr	r2, [pc, #72]	; (8005920 <I2SEx_RxISR_I2SExt+0x90>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d101      	bne.n	80058e0 <I2SEx_RxISR_I2SExt+0x50>
 80058dc:	4b11      	ldr	r3, [pc, #68]	; (8005924 <I2SEx_RxISR_I2SExt+0x94>)
 80058de:	e001      	b.n	80058e4 <I2SEx_RxISR_I2SExt+0x54>
 80058e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	490d      	ldr	r1, [pc, #52]	; (8005920 <I2SEx_RxISR_I2SExt+0x90>)
 80058ec:	428b      	cmp	r3, r1
 80058ee:	d101      	bne.n	80058f4 <I2SEx_RxISR_I2SExt+0x64>
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <I2SEx_RxISR_I2SExt+0x94>)
 80058f2:	e001      	b.n	80058f8 <I2SEx_RxISR_I2SExt+0x68>
 80058f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005902:	b29b      	uxth	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff ff03 	bl	800571c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40003800 	.word	0x40003800
 8005924:	40003400 	.word	0x40003400

08005928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e267      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d075      	beq.n	8005a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005946:	4b88      	ldr	r3, [pc, #544]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 030c 	and.w	r3, r3, #12
 800594e:	2b04      	cmp	r3, #4
 8005950:	d00c      	beq.n	800596c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005952:	4b85      	ldr	r3, [pc, #532]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800595a:	2b08      	cmp	r3, #8
 800595c:	d112      	bne.n	8005984 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800595e:	4b82      	ldr	r3, [pc, #520]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800596a:	d10b      	bne.n	8005984 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800596c:	4b7e      	ldr	r3, [pc, #504]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d05b      	beq.n	8005a30 <HAL_RCC_OscConfig+0x108>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d157      	bne.n	8005a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e242      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800598c:	d106      	bne.n	800599c <HAL_RCC_OscConfig+0x74>
 800598e:	4b76      	ldr	r3, [pc, #472]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a75      	ldr	r2, [pc, #468]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	e01d      	b.n	80059d8 <HAL_RCC_OscConfig+0xb0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059a4:	d10c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x98>
 80059a6:	4b70      	ldr	r3, [pc, #448]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a6f      	ldr	r2, [pc, #444]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 80059ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	4b6d      	ldr	r3, [pc, #436]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a6c      	ldr	r2, [pc, #432]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 80059b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	e00b      	b.n	80059d8 <HAL_RCC_OscConfig+0xb0>
 80059c0:	4b69      	ldr	r3, [pc, #420]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a68      	ldr	r2, [pc, #416]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 80059c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	4b66      	ldr	r3, [pc, #408]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a65      	ldr	r2, [pc, #404]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 80059d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d013      	beq.n	8005a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e0:	f7fc fb88 	bl	80020f4 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e8:	f7fc fb84 	bl	80020f4 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b64      	cmp	r3, #100	; 0x64
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e207      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fa:	4b5b      	ldr	r3, [pc, #364]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0xc0>
 8005a06:	e014      	b.n	8005a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a08:	f7fc fb74 	bl	80020f4 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a10:	f7fc fb70 	bl	80020f4 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b64      	cmp	r3, #100	; 0x64
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e1f3      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a22:	4b51      	ldr	r3, [pc, #324]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0xe8>
 8005a2e:	e000      	b.n	8005a32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d063      	beq.n	8005b06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a3e:	4b4a      	ldr	r3, [pc, #296]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a4a:	4b47      	ldr	r3, [pc, #284]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d11c      	bne.n	8005a90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a56:	4b44      	ldr	r3, [pc, #272]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d116      	bne.n	8005a90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a62:	4b41      	ldr	r3, [pc, #260]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_RCC_OscConfig+0x152>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d001      	beq.n	8005a7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e1c7      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7a:	4b3b      	ldr	r3, [pc, #236]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	4937      	ldr	r1, [pc, #220]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a8e:	e03a      	b.n	8005b06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d020      	beq.n	8005ada <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a98:	4b34      	ldr	r3, [pc, #208]	; (8005b6c <HAL_RCC_OscConfig+0x244>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9e:	f7fc fb29 	bl	80020f4 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aa6:	f7fc fb25 	bl	80020f4 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e1a8      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab8:	4b2b      	ldr	r3, [pc, #172]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac4:	4b28      	ldr	r3, [pc, #160]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4925      	ldr	r1, [pc, #148]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]
 8005ad8:	e015      	b.n	8005b06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ada:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <HAL_RCC_OscConfig+0x244>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7fc fb08 	bl	80020f4 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ae8:	f7fc fb04 	bl	80020f4 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e187      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005afa:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d036      	beq.n	8005b80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d016      	beq.n	8005b48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b1a:	4b15      	ldr	r3, [pc, #84]	; (8005b70 <HAL_RCC_OscConfig+0x248>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b20:	f7fc fae8 	bl	80020f4 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b28:	f7fc fae4 	bl	80020f4 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e167      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <HAL_RCC_OscConfig+0x240>)
 8005b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x200>
 8005b46:	e01b      	b.n	8005b80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b48:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <HAL_RCC_OscConfig+0x248>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b4e:	f7fc fad1 	bl	80020f4 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b54:	e00e      	b.n	8005b74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b56:	f7fc facd 	bl	80020f4 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d907      	bls.n	8005b74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e150      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	42470000 	.word	0x42470000
 8005b70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b74:	4b88      	ldr	r3, [pc, #544]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1ea      	bne.n	8005b56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8097 	beq.w	8005cbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b92:	4b81      	ldr	r3, [pc, #516]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10f      	bne.n	8005bbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	4b7d      	ldr	r3, [pc, #500]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	4a7c      	ldr	r2, [pc, #496]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bac:	6413      	str	r3, [r2, #64]	; 0x40
 8005bae:	4b7a      	ldr	r3, [pc, #488]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb6:	60bb      	str	r3, [r7, #8]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bbe:	4b77      	ldr	r3, [pc, #476]	; (8005d9c <HAL_RCC_OscConfig+0x474>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d118      	bne.n	8005bfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bca:	4b74      	ldr	r3, [pc, #464]	; (8005d9c <HAL_RCC_OscConfig+0x474>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a73      	ldr	r2, [pc, #460]	; (8005d9c <HAL_RCC_OscConfig+0x474>)
 8005bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bd6:	f7fc fa8d 	bl	80020f4 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bde:	f7fc fa89 	bl	80020f4 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e10c      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf0:	4b6a      	ldr	r3, [pc, #424]	; (8005d9c <HAL_RCC_OscConfig+0x474>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0f0      	beq.n	8005bde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d106      	bne.n	8005c12 <HAL_RCC_OscConfig+0x2ea>
 8005c04:	4b64      	ldr	r3, [pc, #400]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c08:	4a63      	ldr	r2, [pc, #396]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005c0a:	f043 0301 	orr.w	r3, r3, #1
 8005c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c10:	e01c      	b.n	8005c4c <HAL_RCC_OscConfig+0x324>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b05      	cmp	r3, #5
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCC_OscConfig+0x30c>
 8005c1a:	4b5f      	ldr	r3, [pc, #380]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	4a5e      	ldr	r2, [pc, #376]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005c20:	f043 0304 	orr.w	r3, r3, #4
 8005c24:	6713      	str	r3, [r2, #112]	; 0x70
 8005c26:	4b5c      	ldr	r3, [pc, #368]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	4a5b      	ldr	r2, [pc, #364]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005c2c:	f043 0301 	orr.w	r3, r3, #1
 8005c30:	6713      	str	r3, [r2, #112]	; 0x70
 8005c32:	e00b      	b.n	8005c4c <HAL_RCC_OscConfig+0x324>
 8005c34:	4b58      	ldr	r3, [pc, #352]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c38:	4a57      	ldr	r2, [pc, #348]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c40:	4b55      	ldr	r3, [pc, #340]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c44:	4a54      	ldr	r2, [pc, #336]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005c46:	f023 0304 	bic.w	r3, r3, #4
 8005c4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d015      	beq.n	8005c80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c54:	f7fc fa4e 	bl	80020f4 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5a:	e00a      	b.n	8005c72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c5c:	f7fc fa4a 	bl	80020f4 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e0cb      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c72:	4b49      	ldr	r3, [pc, #292]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0ee      	beq.n	8005c5c <HAL_RCC_OscConfig+0x334>
 8005c7e:	e014      	b.n	8005caa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c80:	f7fc fa38 	bl	80020f4 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c86:	e00a      	b.n	8005c9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c88:	f7fc fa34 	bl	80020f4 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e0b5      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c9e:	4b3e      	ldr	r3, [pc, #248]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1ee      	bne.n	8005c88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d105      	bne.n	8005cbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb0:	4b39      	ldr	r3, [pc, #228]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	4a38      	ldr	r2, [pc, #224]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80a1 	beq.w	8005e08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cc6:	4b34      	ldr	r3, [pc, #208]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d05c      	beq.n	8005d8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d141      	bne.n	8005d5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cda:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <HAL_RCC_OscConfig+0x478>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce0:	f7fc fa08 	bl	80020f4 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ce8:	f7fc fa04 	bl	80020f4 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e087      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfa:	4b27      	ldr	r3, [pc, #156]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69da      	ldr	r2, [r3, #28]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	019b      	lsls	r3, r3, #6
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1c:	085b      	lsrs	r3, r3, #1
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	041b      	lsls	r3, r3, #16
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	061b      	lsls	r3, r3, #24
 8005d2a:	491b      	ldr	r1, [pc, #108]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d30:	4b1b      	ldr	r3, [pc, #108]	; (8005da0 <HAL_RCC_OscConfig+0x478>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d36:	f7fc f9dd 	bl	80020f4 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d3e:	f7fc f9d9 	bl	80020f4 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e05c      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d50:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f0      	beq.n	8005d3e <HAL_RCC_OscConfig+0x416>
 8005d5c:	e054      	b.n	8005e08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d5e:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <HAL_RCC_OscConfig+0x478>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d64:	f7fc f9c6 	bl	80020f4 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d6c:	f7fc f9c2 	bl	80020f4 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e045      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d7e:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <HAL_RCC_OscConfig+0x470>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f0      	bne.n	8005d6c <HAL_RCC_OscConfig+0x444>
 8005d8a:	e03d      	b.n	8005e08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d107      	bne.n	8005da4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e038      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	40007000 	.word	0x40007000
 8005da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005da4:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <HAL_RCC_OscConfig+0x4ec>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d028      	beq.n	8005e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d121      	bne.n	8005e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d11a      	bne.n	8005e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d111      	bne.n	8005e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	3b01      	subs	r3, #1
 8005dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d001      	beq.n	8005e08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	40023800 	.word	0x40023800

08005e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0cc      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e2c:	4b68      	ldr	r3, [pc, #416]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d90c      	bls.n	8005e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3a:	4b65      	ldr	r3, [pc, #404]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e42:	4b63      	ldr	r3, [pc, #396]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d001      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0b8      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d020      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e6c:	4b59      	ldr	r3, [pc, #356]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	4a58      	ldr	r2, [pc, #352]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e84:	4b53      	ldr	r3, [pc, #332]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a52      	ldr	r2, [pc, #328]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e90:	4b50      	ldr	r3, [pc, #320]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	494d      	ldr	r1, [pc, #308]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d044      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d107      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb6:	4b47      	ldr	r3, [pc, #284]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d119      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e07f      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d003      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d107      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed6:	4b3f      	ldr	r3, [pc, #252]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e06f      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee6:	4b3b      	ldr	r3, [pc, #236]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e067      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ef6:	4b37      	ldr	r3, [pc, #220]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f023 0203 	bic.w	r2, r3, #3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4934      	ldr	r1, [pc, #208]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f08:	f7fc f8f4 	bl	80020f4 <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f10:	f7fc f8f0 	bl	80020f4 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e04f      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f26:	4b2b      	ldr	r3, [pc, #172]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 020c 	and.w	r2, r3, #12
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d1eb      	bne.n	8005f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f38:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d20c      	bcs.n	8005f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f46:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4e:	4b20      	ldr	r3, [pc, #128]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e032      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f6c:	4b19      	ldr	r3, [pc, #100]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	4916      	ldr	r1, [pc, #88]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	490e      	ldr	r1, [pc, #56]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f9e:	f000 f821 	bl	8005fe4 <HAL_RCC_GetSysClockFreq>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	490a      	ldr	r1, [pc, #40]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005fb0:	5ccb      	ldrb	r3, [r1, r3]
 8005fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb6:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fc f854 	bl	800206c <HAL_InitTick>

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40023c00 	.word	0x40023c00
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	080107c4 	.word	0x080107c4
 8005fdc:	20000000 	.word	0x20000000
 8005fe0:	20000004 	.word	0x20000004

08005fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe8:	b094      	sub	sp, #80	; 0x50
 8005fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ffc:	4b79      	ldr	r3, [pc, #484]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 030c 	and.w	r3, r3, #12
 8006004:	2b08      	cmp	r3, #8
 8006006:	d00d      	beq.n	8006024 <HAL_RCC_GetSysClockFreq+0x40>
 8006008:	2b08      	cmp	r3, #8
 800600a:	f200 80e1 	bhi.w	80061d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_RCC_GetSysClockFreq+0x34>
 8006012:	2b04      	cmp	r3, #4
 8006014:	d003      	beq.n	800601e <HAL_RCC_GetSysClockFreq+0x3a>
 8006016:	e0db      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006018:	4b73      	ldr	r3, [pc, #460]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800601a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800601c:	e0db      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800601e:	4b73      	ldr	r3, [pc, #460]	; (80061ec <HAL_RCC_GetSysClockFreq+0x208>)
 8006020:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006022:	e0d8      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006024:	4b6f      	ldr	r3, [pc, #444]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800602c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800602e:	4b6d      	ldr	r3, [pc, #436]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d063      	beq.n	8006102 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800603a:	4b6a      	ldr	r3, [pc, #424]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	099b      	lsrs	r3, r3, #6
 8006040:	2200      	movs	r2, #0
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38
 8006044:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604c:	633b      	str	r3, [r7, #48]	; 0x30
 800604e:	2300      	movs	r3, #0
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
 8006052:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006056:	4622      	mov	r2, r4
 8006058:	462b      	mov	r3, r5
 800605a:	f04f 0000 	mov.w	r0, #0
 800605e:	f04f 0100 	mov.w	r1, #0
 8006062:	0159      	lsls	r1, r3, #5
 8006064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006068:	0150      	lsls	r0, r2, #5
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4621      	mov	r1, r4
 8006070:	1a51      	subs	r1, r2, r1
 8006072:	6139      	str	r1, [r7, #16]
 8006074:	4629      	mov	r1, r5
 8006076:	eb63 0301 	sbc.w	r3, r3, r1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006088:	4659      	mov	r1, fp
 800608a:	018b      	lsls	r3, r1, #6
 800608c:	4651      	mov	r1, sl
 800608e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006092:	4651      	mov	r1, sl
 8006094:	018a      	lsls	r2, r1, #6
 8006096:	4651      	mov	r1, sl
 8006098:	ebb2 0801 	subs.w	r8, r2, r1
 800609c:	4659      	mov	r1, fp
 800609e:	eb63 0901 	sbc.w	r9, r3, r1
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060b6:	4690      	mov	r8, r2
 80060b8:	4699      	mov	r9, r3
 80060ba:	4623      	mov	r3, r4
 80060bc:	eb18 0303 	adds.w	r3, r8, r3
 80060c0:	60bb      	str	r3, [r7, #8]
 80060c2:	462b      	mov	r3, r5
 80060c4:	eb49 0303 	adc.w	r3, r9, r3
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060d6:	4629      	mov	r1, r5
 80060d8:	024b      	lsls	r3, r1, #9
 80060da:	4621      	mov	r1, r4
 80060dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060e0:	4621      	mov	r1, r4
 80060e2:	024a      	lsls	r2, r1, #9
 80060e4:	4610      	mov	r0, r2
 80060e6:	4619      	mov	r1, r3
 80060e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ea:	2200      	movs	r2, #0
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060f4:	f7fa fdc8 	bl	8000c88 <__aeabi_uldivmod>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4613      	mov	r3, r2
 80060fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006100:	e058      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006102:	4b38      	ldr	r3, [pc, #224]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	099b      	lsrs	r3, r3, #6
 8006108:	2200      	movs	r2, #0
 800610a:	4618      	mov	r0, r3
 800610c:	4611      	mov	r1, r2
 800610e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006112:	623b      	str	r3, [r7, #32]
 8006114:	2300      	movs	r3, #0
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
 8006118:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800611c:	4642      	mov	r2, r8
 800611e:	464b      	mov	r3, r9
 8006120:	f04f 0000 	mov.w	r0, #0
 8006124:	f04f 0100 	mov.w	r1, #0
 8006128:	0159      	lsls	r1, r3, #5
 800612a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800612e:	0150      	lsls	r0, r2, #5
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4641      	mov	r1, r8
 8006136:	ebb2 0a01 	subs.w	sl, r2, r1
 800613a:	4649      	mov	r1, r9
 800613c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800614c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006150:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006154:	ebb2 040a 	subs.w	r4, r2, sl
 8006158:	eb63 050b 	sbc.w	r5, r3, fp
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	00eb      	lsls	r3, r5, #3
 8006166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800616a:	00e2      	lsls	r2, r4, #3
 800616c:	4614      	mov	r4, r2
 800616e:	461d      	mov	r5, r3
 8006170:	4643      	mov	r3, r8
 8006172:	18e3      	adds	r3, r4, r3
 8006174:	603b      	str	r3, [r7, #0]
 8006176:	464b      	mov	r3, r9
 8006178:	eb45 0303 	adc.w	r3, r5, r3
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	e9d7 4500 	ldrd	r4, r5, [r7]
 800618a:	4629      	mov	r1, r5
 800618c:	028b      	lsls	r3, r1, #10
 800618e:	4621      	mov	r1, r4
 8006190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006194:	4621      	mov	r1, r4
 8006196:	028a      	lsls	r2, r1, #10
 8006198:	4610      	mov	r0, r2
 800619a:	4619      	mov	r1, r3
 800619c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800619e:	2200      	movs	r2, #0
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	61fa      	str	r2, [r7, #28]
 80061a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061a8:	f7fa fd6e 	bl	8000c88 <__aeabi_uldivmod>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4613      	mov	r3, r2
 80061b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061b4:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	0c1b      	lsrs	r3, r3, #16
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	3301      	adds	r3, #1
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80061c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061ce:	e002      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80061d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3750      	adds	r7, #80	; 0x50
 80061dc:	46bd      	mov	sp, r7
 80061de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061e2:	bf00      	nop
 80061e4:	40023800 	.word	0x40023800
 80061e8:	00f42400 	.word	0x00f42400
 80061ec:	007a1200 	.word	0x007a1200

080061f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061f4:	4b03      	ldr	r3, [pc, #12]	; (8006204 <HAL_RCC_GetHCLKFreq+0x14>)
 80061f6:	681b      	ldr	r3, [r3, #0]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	20000000 	.word	0x20000000

08006208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800620c:	f7ff fff0 	bl	80061f0 <HAL_RCC_GetHCLKFreq>
 8006210:	4602      	mov	r2, r0
 8006212:	4b05      	ldr	r3, [pc, #20]	; (8006228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	0a9b      	lsrs	r3, r3, #10
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	4903      	ldr	r1, [pc, #12]	; (800622c <HAL_RCC_GetPCLK1Freq+0x24>)
 800621e:	5ccb      	ldrb	r3, [r1, r3]
 8006220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006224:	4618      	mov	r0, r3
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40023800 	.word	0x40023800
 800622c:	080107d4 	.word	0x080107d4

08006230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006234:	f7ff ffdc 	bl	80061f0 <HAL_RCC_GetHCLKFreq>
 8006238:	4602      	mov	r2, r0
 800623a:	4b05      	ldr	r3, [pc, #20]	; (8006250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	0b5b      	lsrs	r3, r3, #13
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	4903      	ldr	r1, [pc, #12]	; (8006254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006246:	5ccb      	ldrb	r3, [r1, r3]
 8006248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800624c:	4618      	mov	r0, r3
 800624e:	bd80      	pop	{r7, pc}
 8006250:	40023800 	.word	0x40023800
 8006254:	080107d4 	.word	0x080107d4

08006258 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800627c:	2b00      	cmp	r3, #0
 800627e:	d035      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006280:	4b62      	ldr	r3, [pc, #392]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006286:	f7fb ff35 	bl	80020f4 <HAL_GetTick>
 800628a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800628c:	e008      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800628e:	f7fb ff31 	bl	80020f4 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e0b0      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062a0:	4b5b      	ldr	r3, [pc, #364]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f0      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	019a      	lsls	r2, r3, #6
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	071b      	lsls	r3, r3, #28
 80062b8:	4955      	ldr	r1, [pc, #340]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062c0:	4b52      	ldr	r3, [pc, #328]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062c6:	f7fb ff15 	bl	80020f4 <HAL_GetTick>
 80062ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062cc:	e008      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062ce:	f7fb ff11 	bl	80020f4 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e090      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062e0:	4b4b      	ldr	r3, [pc, #300]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0f0      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 8083 	beq.w	8006400 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	4b44      	ldr	r3, [pc, #272]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	4a43      	ldr	r2, [pc, #268]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006308:	6413      	str	r3, [r2, #64]	; 0x40
 800630a:	4b41      	ldr	r3, [pc, #260]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006316:	4b3f      	ldr	r3, [pc, #252]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a3e      	ldr	r2, [pc, #248]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800631c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006320:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006322:	f7fb fee7 	bl	80020f4 <HAL_GetTick>
 8006326:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006328:	e008      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800632a:	f7fb fee3 	bl	80020f4 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e062      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800633c:	4b35      	ldr	r3, [pc, #212]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006348:	4b31      	ldr	r3, [pc, #196]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006350:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d02f      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	429a      	cmp	r2, r3
 8006364:	d028      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006366:	4b2a      	ldr	r3, [pc, #168]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006370:	4b29      	ldr	r3, [pc, #164]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006376:	4b28      	ldr	r3, [pc, #160]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800637c:	4a24      	ldr	r2, [pc, #144]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006382:	4b23      	ldr	r3, [pc, #140]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b01      	cmp	r3, #1
 800638c:	d114      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800638e:	f7fb feb1 	bl	80020f4 <HAL_GetTick>
 8006392:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006394:	e00a      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006396:	f7fb fead 	bl	80020f4 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d901      	bls.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e02a      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ac:	4b18      	ldr	r3, [pc, #96]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0ee      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c4:	d10d      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80063c6:	4b12      	ldr	r3, [pc, #72]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063da:	490d      	ldr	r1, [pc, #52]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	608b      	str	r3, [r1, #8]
 80063e0:	e005      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80063e2:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	4a0a      	ldr	r2, [pc, #40]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063ec:	6093      	str	r3, [r2, #8]
 80063ee:	4b08      	ldr	r3, [pc, #32]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063fa:	4905      	ldr	r1, [pc, #20]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	42470068 	.word	0x42470068
 8006410:	40023800 	.word	0x40023800
 8006414:	40007000 	.word	0x40007000
 8006418:	42470e40 	.word	0x42470e40

0800641c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d13e      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800643a:	4b23      	ldr	r3, [pc, #140]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d12f      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006450:	4b1e      	ldr	r3, [pc, #120]	; (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006452:	617b      	str	r3, [r7, #20]
          break;
 8006454:	e02f      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006456:	4b1c      	ldr	r3, [pc, #112]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800645e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006462:	d108      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006464:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800646c:	4a18      	ldr	r2, [pc, #96]	; (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800646e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	e007      	b.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006476:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800647e:	4a15      	ldr	r2, [pc, #84]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006486:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800648c:	099b      	lsrs	r3, r3, #6
 800648e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	fb02 f303 	mul.w	r3, r2, r3
 8006498:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800649a:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800649c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a0:	0f1b      	lsrs	r3, r3, #28
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	617b      	str	r3, [r7, #20]
          break;
 80064ae:	e002      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]
          break;
 80064b4:	bf00      	nop
        }
      }
      break;
 80064b6:	bf00      	nop
    }
  }
  return frequency;
 80064b8:	697b      	ldr	r3, [r7, #20]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40023800 	.word	0x40023800
 80064cc:	00bb8000 	.word	0x00bb8000
 80064d0:	007a1200 	.word	0x007a1200
 80064d4:	00f42400 	.word	0x00f42400

080064d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e07b      	b.n	80065e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d108      	bne.n	8006504 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064fa:	d009      	beq.n	8006510 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	61da      	str	r2, [r3, #28]
 8006502:	e005      	b.n	8006510 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fb fa72 	bl	8001a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006546:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006594:	ea42 0103 	orr.w	r1, r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	0c1b      	lsrs	r3, r3, #16
 80065ae:	f003 0104 	and.w	r1, r3, #4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	f003 0210 	and.w	r2, r3, #16
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e041      	b.n	8006680 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d106      	bne.n	8006616 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fb fa47 	bl	8001aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2202      	movs	r2, #2
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3304      	adds	r3, #4
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f000 fad9 	bl	8006be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e041      	b.n	800671e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f839 	bl	8006726 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f000 fa8a 	bl	8006be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
	...

0800673c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d109      	bne.n	8006760 <HAL_TIM_PWM_Start+0x24>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b01      	cmp	r3, #1
 8006756:	bf14      	ite	ne
 8006758:	2301      	movne	r3, #1
 800675a:	2300      	moveq	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	e022      	b.n	80067a6 <HAL_TIM_PWM_Start+0x6a>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b04      	cmp	r3, #4
 8006764:	d109      	bne.n	800677a <HAL_TIM_PWM_Start+0x3e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	bf14      	ite	ne
 8006772:	2301      	movne	r3, #1
 8006774:	2300      	moveq	r3, #0
 8006776:	b2db      	uxtb	r3, r3
 8006778:	e015      	b.n	80067a6 <HAL_TIM_PWM_Start+0x6a>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b08      	cmp	r3, #8
 800677e:	d109      	bne.n	8006794 <HAL_TIM_PWM_Start+0x58>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	bf14      	ite	ne
 800678c:	2301      	movne	r3, #1
 800678e:	2300      	moveq	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	e008      	b.n	80067a6 <HAL_TIM_PWM_Start+0x6a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	bf14      	ite	ne
 80067a0:	2301      	movne	r3, #1
 80067a2:	2300      	moveq	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e07c      	b.n	80068a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d104      	bne.n	80067be <HAL_TIM_PWM_Start+0x82>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067bc:	e013      	b.n	80067e6 <HAL_TIM_PWM_Start+0xaa>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_PWM_Start+0x92>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067cc:	e00b      	b.n	80067e6 <HAL_TIM_PWM_Start+0xaa>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d104      	bne.n	80067de <HAL_TIM_PWM_Start+0xa2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067dc:	e003      	b.n	80067e6 <HAL_TIM_PWM_Start+0xaa>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2201      	movs	r2, #1
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fce0 	bl	80071b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a2d      	ldr	r2, [pc, #180]	; (80068b0 <HAL_TIM_PWM_Start+0x174>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d004      	beq.n	8006808 <HAL_TIM_PWM_Start+0xcc>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a2c      	ldr	r2, [pc, #176]	; (80068b4 <HAL_TIM_PWM_Start+0x178>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d101      	bne.n	800680c <HAL_TIM_PWM_Start+0xd0>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <HAL_TIM_PWM_Start+0xd2>
 800680c:	2300      	movs	r3, #0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a22      	ldr	r2, [pc, #136]	; (80068b0 <HAL_TIM_PWM_Start+0x174>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d022      	beq.n	8006872 <HAL_TIM_PWM_Start+0x136>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006834:	d01d      	beq.n	8006872 <HAL_TIM_PWM_Start+0x136>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <HAL_TIM_PWM_Start+0x17c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d018      	beq.n	8006872 <HAL_TIM_PWM_Start+0x136>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1d      	ldr	r2, [pc, #116]	; (80068bc <HAL_TIM_PWM_Start+0x180>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d013      	beq.n	8006872 <HAL_TIM_PWM_Start+0x136>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <HAL_TIM_PWM_Start+0x184>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00e      	beq.n	8006872 <HAL_TIM_PWM_Start+0x136>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a16      	ldr	r2, [pc, #88]	; (80068b4 <HAL_TIM_PWM_Start+0x178>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d009      	beq.n	8006872 <HAL_TIM_PWM_Start+0x136>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a18      	ldr	r2, [pc, #96]	; (80068c4 <HAL_TIM_PWM_Start+0x188>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_TIM_PWM_Start+0x136>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a16      	ldr	r2, [pc, #88]	; (80068c8 <HAL_TIM_PWM_Start+0x18c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d111      	bne.n	8006896 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b06      	cmp	r3, #6
 8006882:	d010      	beq.n	80068a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006894:	e007      	b.n	80068a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f042 0201 	orr.w	r2, r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40010000 	.word	0x40010000
 80068b4:	40010400 	.word	0x40010400
 80068b8:	40000400 	.word	0x40000400
 80068bc:	40000800 	.word	0x40000800
 80068c0:	40000c00 	.word	0x40000c00
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40001800 	.word	0x40001800

080068cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e0ae      	b.n	8006a48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b0c      	cmp	r3, #12
 80068f6:	f200 809f 	bhi.w	8006a38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068fa:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006900:	08006935 	.word	0x08006935
 8006904:	08006a39 	.word	0x08006a39
 8006908:	08006a39 	.word	0x08006a39
 800690c:	08006a39 	.word	0x08006a39
 8006910:	08006975 	.word	0x08006975
 8006914:	08006a39 	.word	0x08006a39
 8006918:	08006a39 	.word	0x08006a39
 800691c:	08006a39 	.word	0x08006a39
 8006920:	080069b7 	.word	0x080069b7
 8006924:	08006a39 	.word	0x08006a39
 8006928:	08006a39 	.word	0x08006a39
 800692c:	08006a39 	.word	0x08006a39
 8006930:	080069f7 	.word	0x080069f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	4618      	mov	r0, r3
 800693c:	f000 f9f0 	bl	8006d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0208 	orr.w	r2, r2, #8
 800694e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0204 	bic.w	r2, r2, #4
 800695e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6999      	ldr	r1, [r3, #24]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	691a      	ldr	r2, [r3, #16]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	619a      	str	r2, [r3, #24]
      break;
 8006972:	e064      	b.n	8006a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fa40 	bl	8006e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800698e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699a      	ldr	r2, [r3, #24]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800699e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6999      	ldr	r1, [r3, #24]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	021a      	lsls	r2, r3, #8
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	619a      	str	r2, [r3, #24]
      break;
 80069b4:	e043      	b.n	8006a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fa95 	bl	8006eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0208 	orr.w	r2, r2, #8
 80069d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69da      	ldr	r2, [r3, #28]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0204 	bic.w	r2, r2, #4
 80069e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69d9      	ldr	r1, [r3, #28]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	61da      	str	r2, [r3, #28]
      break;
 80069f4:	e023      	b.n	8006a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 fae9 	bl	8006fd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69da      	ldr	r2, [r3, #28]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69da      	ldr	r2, [r3, #28]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69d9      	ldr	r1, [r3, #28]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	021a      	lsls	r2, r3, #8
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	61da      	str	r2, [r3, #28]
      break;
 8006a36:	e002      	b.n	8006a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_TIM_ConfigClockSource+0x1c>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e0b4      	b.n	8006bd6 <HAL_TIM_ConfigClockSource+0x186>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa4:	d03e      	beq.n	8006b24 <HAL_TIM_ConfigClockSource+0xd4>
 8006aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aaa:	f200 8087 	bhi.w	8006bbc <HAL_TIM_ConfigClockSource+0x16c>
 8006aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab2:	f000 8086 	beq.w	8006bc2 <HAL_TIM_ConfigClockSource+0x172>
 8006ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aba:	d87f      	bhi.n	8006bbc <HAL_TIM_ConfigClockSource+0x16c>
 8006abc:	2b70      	cmp	r3, #112	; 0x70
 8006abe:	d01a      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0xa6>
 8006ac0:	2b70      	cmp	r3, #112	; 0x70
 8006ac2:	d87b      	bhi.n	8006bbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ac4:	2b60      	cmp	r3, #96	; 0x60
 8006ac6:	d050      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x11a>
 8006ac8:	2b60      	cmp	r3, #96	; 0x60
 8006aca:	d877      	bhi.n	8006bbc <HAL_TIM_ConfigClockSource+0x16c>
 8006acc:	2b50      	cmp	r3, #80	; 0x50
 8006ace:	d03c      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0xfa>
 8006ad0:	2b50      	cmp	r3, #80	; 0x50
 8006ad2:	d873      	bhi.n	8006bbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	d058      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x13a>
 8006ad8:	2b40      	cmp	r3, #64	; 0x40
 8006ada:	d86f      	bhi.n	8006bbc <HAL_TIM_ConfigClockSource+0x16c>
 8006adc:	2b30      	cmp	r3, #48	; 0x30
 8006ade:	d064      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x15a>
 8006ae0:	2b30      	cmp	r3, #48	; 0x30
 8006ae2:	d86b      	bhi.n	8006bbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d060      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x15a>
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d867      	bhi.n	8006bbc <HAL_TIM_ConfigClockSource+0x16c>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d05c      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x15a>
 8006af0:	2b10      	cmp	r3, #16
 8006af2:	d05a      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x15a>
 8006af4:	e062      	b.n	8006bbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	6899      	ldr	r1, [r3, #8]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f000 fb35 	bl	8007174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	609a      	str	r2, [r3, #8]
      break;
 8006b22:	e04f      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	6899      	ldr	r1, [r3, #8]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f000 fb1e 	bl	8007174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b46:	609a      	str	r2, [r3, #8]
      break;
 8006b48:	e03c      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f000 fa92 	bl	8007080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2150      	movs	r1, #80	; 0x50
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 faeb 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006b68:	e02c      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6859      	ldr	r1, [r3, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f000 fab1 	bl	80070de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2160      	movs	r1, #96	; 0x60
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fadb 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006b88:	e01c      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6859      	ldr	r1, [r3, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	461a      	mov	r2, r3
 8006b98:	f000 fa72 	bl	8007080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2140      	movs	r1, #64	; 0x40
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 facb 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006ba8:	e00c      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	f000 fac2 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006bba:	e003      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc0:	e000      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a40      	ldr	r2, [pc, #256]	; (8006cf4 <TIM_Base_SetConfig+0x114>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfe:	d00f      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a3d      	ldr	r2, [pc, #244]	; (8006cf8 <TIM_Base_SetConfig+0x118>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00b      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a3c      	ldr	r2, [pc, #240]	; (8006cfc <TIM_Base_SetConfig+0x11c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d007      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a3b      	ldr	r2, [pc, #236]	; (8006d00 <TIM_Base_SetConfig+0x120>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a3a      	ldr	r2, [pc, #232]	; (8006d04 <TIM_Base_SetConfig+0x124>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d108      	bne.n	8006c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a2f      	ldr	r2, [pc, #188]	; (8006cf4 <TIM_Base_SetConfig+0x114>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d02b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c40:	d027      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a2c      	ldr	r2, [pc, #176]	; (8006cf8 <TIM_Base_SetConfig+0x118>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d023      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a2b      	ldr	r2, [pc, #172]	; (8006cfc <TIM_Base_SetConfig+0x11c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01f      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a2a      	ldr	r2, [pc, #168]	; (8006d00 <TIM_Base_SetConfig+0x120>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d01b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a29      	ldr	r2, [pc, #164]	; (8006d04 <TIM_Base_SetConfig+0x124>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d017      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a28      	ldr	r2, [pc, #160]	; (8006d08 <TIM_Base_SetConfig+0x128>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d013      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a27      	ldr	r2, [pc, #156]	; (8006d0c <TIM_Base_SetConfig+0x12c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00f      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a26      	ldr	r2, [pc, #152]	; (8006d10 <TIM_Base_SetConfig+0x130>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a25      	ldr	r2, [pc, #148]	; (8006d14 <TIM_Base_SetConfig+0x134>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a24      	ldr	r2, [pc, #144]	; (8006d18 <TIM_Base_SetConfig+0x138>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d003      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a23      	ldr	r2, [pc, #140]	; (8006d1c <TIM_Base_SetConfig+0x13c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d108      	bne.n	8006ca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a0a      	ldr	r2, [pc, #40]	; (8006cf4 <TIM_Base_SetConfig+0x114>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_Base_SetConfig+0xf8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a0c      	ldr	r2, [pc, #48]	; (8006d04 <TIM_Base_SetConfig+0x124>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d103      	bne.n	8006ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	615a      	str	r2, [r3, #20]
}
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	40010000 	.word	0x40010000
 8006cf8:	40000400 	.word	0x40000400
 8006cfc:	40000800 	.word	0x40000800
 8006d00:	40000c00 	.word	0x40000c00
 8006d04:	40010400 	.word	0x40010400
 8006d08:	40014000 	.word	0x40014000
 8006d0c:	40014400 	.word	0x40014400
 8006d10:	40014800 	.word	0x40014800
 8006d14:	40001800 	.word	0x40001800
 8006d18:	40001c00 	.word	0x40001c00
 8006d1c:	40002000 	.word	0x40002000

08006d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f023 0201 	bic.w	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f023 0302 	bic.w	r3, r3, #2
 8006d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <TIM_OC1_SetConfig+0xd8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC1_SetConfig+0x64>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a1f      	ldr	r2, [pc, #124]	; (8006dfc <TIM_OC1_SetConfig+0xdc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d10c      	bne.n	8006d9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f023 0308 	bic.w	r3, r3, #8
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f023 0304 	bic.w	r3, r3, #4
 8006d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <TIM_OC1_SetConfig+0xd8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <TIM_OC1_SetConfig+0x8e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a14      	ldr	r2, [pc, #80]	; (8006dfc <TIM_OC1_SetConfig+0xdc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d111      	bne.n	8006dd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	621a      	str	r2, [r3, #32]
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	40010000 	.word	0x40010000
 8006dfc:	40010400 	.word	0x40010400

08006e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0210 	bic.w	r2, r3, #16
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 0320 	bic.w	r3, r3, #32
 8006e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a22      	ldr	r2, [pc, #136]	; (8006ee4 <TIM_OC2_SetConfig+0xe4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_OC2_SetConfig+0x68>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a21      	ldr	r2, [pc, #132]	; (8006ee8 <TIM_OC2_SetConfig+0xe8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d10d      	bne.n	8006e84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <TIM_OC2_SetConfig+0xe4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_OC2_SetConfig+0x94>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a16      	ldr	r2, [pc, #88]	; (8006ee8 <TIM_OC2_SetConfig+0xe8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d113      	bne.n	8006ebc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40010400 	.word	0x40010400

08006eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a21      	ldr	r2, [pc, #132]	; (8006fcc <TIM_OC3_SetConfig+0xe0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d003      	beq.n	8006f52 <TIM_OC3_SetConfig+0x66>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a20      	ldr	r2, [pc, #128]	; (8006fd0 <TIM_OC3_SetConfig+0xe4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d10d      	bne.n	8006f6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a16      	ldr	r2, [pc, #88]	; (8006fcc <TIM_OC3_SetConfig+0xe0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_OC3_SetConfig+0x92>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <TIM_OC3_SetConfig+0xe4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d113      	bne.n	8006fa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	621a      	str	r2, [r3, #32]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40010400 	.word	0x40010400

08006fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800701e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	031b      	lsls	r3, r3, #12
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a12      	ldr	r2, [pc, #72]	; (8007078 <TIM_OC4_SetConfig+0xa4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_OC4_SetConfig+0x68>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a11      	ldr	r2, [pc, #68]	; (800707c <TIM_OC4_SetConfig+0xa8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d109      	bne.n	8007050 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	019b      	lsls	r3, r3, #6
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4313      	orrs	r3, r2
 800704e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40010400 	.word	0x40010400

08007080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f023 0201 	bic.w	r2, r3, #1
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f023 030a 	bic.w	r3, r3, #10
 80070bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	621a      	str	r2, [r3, #32]
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070de:	b480      	push	{r7}
 80070e0:	b087      	sub	sp, #28
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	f023 0210 	bic.w	r2, r3, #16
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	031b      	lsls	r3, r3, #12
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800711a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	f043 0307 	orr.w	r3, r3, #7
 8007160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	609a      	str	r2, [r3, #8]
}
 8007168:	bf00      	nop
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800718e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	021a      	lsls	r2, r3, #8
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	431a      	orrs	r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	4313      	orrs	r3, r2
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	609a      	str	r2, [r3, #8]
}
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	2201      	movs	r2, #1
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1a      	ldr	r2, [r3, #32]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	401a      	ands	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a1a      	ldr	r2, [r3, #32]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ec:	431a      	orrs	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	621a      	str	r2, [r3, #32]
}
 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007214:	2302      	movs	r3, #2
 8007216:	e05a      	b.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a21      	ldr	r2, [pc, #132]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d022      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007264:	d01d      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a1d      	ldr	r2, [pc, #116]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d018      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d013      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1a      	ldr	r2, [pc, #104]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00e      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a18      	ldr	r2, [pc, #96]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d009      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a17      	ldr	r2, [pc, #92]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d004      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d10c      	bne.n	80072bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40010000 	.word	0x40010000
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800
 80072e8:	40000c00 	.word	0x40000c00
 80072ec:	40010400 	.word	0x40010400
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40001800 	.word	0x40001800

080072f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007310:	2302      	movs	r3, #2
 8007312:	e03d      	b.n	8007390 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	4313      	orrs	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e03f      	b.n	800742e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fa fbca 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2224      	movs	r2, #36	; 0x24
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 ff69 	bl	80082b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	695a      	ldr	r2, [r3, #20]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b08a      	sub	sp, #40	; 0x28
 800743a:	af02      	add	r7, sp, #8
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	603b      	str	r3, [r7, #0]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b20      	cmp	r3, #32
 8007454:	d17c      	bne.n	8007550 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <HAL_UART_Transmit+0x2c>
 800745c:	88fb      	ldrh	r3, [r7, #6]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e075      	b.n	8007552 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_UART_Transmit+0x3e>
 8007470:	2302      	movs	r3, #2
 8007472:	e06e      	b.n	8007552 <HAL_UART_Transmit+0x11c>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2221      	movs	r2, #33	; 0x21
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800748a:	f7fa fe33 	bl	80020f4 <HAL_GetTick>
 800748e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	88fa      	ldrh	r2, [r7, #6]
 8007494:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	88fa      	ldrh	r2, [r7, #6]
 800749a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a4:	d108      	bne.n	80074b8 <HAL_UART_Transmit+0x82>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d104      	bne.n	80074b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	e003      	b.n	80074c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074bc:	2300      	movs	r3, #0
 80074be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074c8:	e02a      	b.n	8007520 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2200      	movs	r2, #0
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 fc21 	bl	8007d1c <UART_WaitOnFlagUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e036      	b.n	8007552 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10b      	bne.n	8007502 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	3302      	adds	r3, #2
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	e007      	b.n	8007512 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	781a      	ldrb	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	3301      	adds	r3, #1
 8007510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1cf      	bne.n	80074ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2200      	movs	r2, #0
 8007532:	2140      	movs	r1, #64	; 0x40
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 fbf1 	bl	8007d1c <UART_WaitOnFlagUntilTimeout>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e006      	b.n	8007552 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	e000      	b.n	8007552 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007550:	2302      	movs	r3, #2
  }
}
 8007552:	4618      	mov	r0, r3
 8007554:	3720      	adds	r7, #32
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	4613      	mov	r3, r2
 8007566:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b20      	cmp	r3, #32
 8007572:	d11d      	bne.n	80075b0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_UART_Receive_DMA+0x26>
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e016      	b.n	80075b2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_UART_Receive_DMA+0x38>
 800758e:	2302      	movs	r3, #2
 8007590:	e00f      	b.n	80075b2 <HAL_UART_Receive_DMA+0x58>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075a0:	88fb      	ldrh	r3, [r7, #6]
 80075a2:	461a      	mov	r2, r3
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 fc26 	bl	8007df8 <UART_Start_Receive_DMA>
 80075ac:	4603      	mov	r3, r0
 80075ae:	e000      	b.n	80075b2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80075b0:	2302      	movs	r3, #2
  }
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b0ba      	sub	sp, #232	; 0xe8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80075fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10f      	bne.n	8007622 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <HAL_UART_IRQHandler+0x66>
 800760e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fd91 	bl	8008142 <UART_Receive_IT>
      return;
 8007620:	e256      	b.n	8007ad0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007622:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 80de 	beq.w	80077e8 <HAL_UART_IRQHandler+0x22c>
 800762c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d106      	bne.n	8007646 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 80d1 	beq.w	80077e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00b      	beq.n	800766a <HAL_UART_IRQHandler+0xae>
 8007652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765a:	2b00      	cmp	r3, #0
 800765c:	d005      	beq.n	800766a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	f043 0201 	orr.w	r2, r3, #1
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800766a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <HAL_UART_IRQHandler+0xd2>
 8007676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	f043 0202 	orr.w	r2, r3, #2
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800768e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00b      	beq.n	80076b2 <HAL_UART_IRQHandler+0xf6>
 800769a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d005      	beq.n	80076b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	f043 0204 	orr.w	r2, r3, #4
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d011      	beq.n	80076e2 <HAL_UART_IRQHandler+0x126>
 80076be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d105      	bne.n	80076d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d005      	beq.n	80076e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	f043 0208 	orr.w	r2, r3, #8
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 81ed 	beq.w	8007ac6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <HAL_UART_IRQHandler+0x14e>
 80076f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fd1c 	bl	8008142 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	bf0c      	ite	eq
 8007718:	2301      	moveq	r3, #1
 800771a:	2300      	movne	r3, #0
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	f003 0308 	and.w	r3, r3, #8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d103      	bne.n	8007736 <HAL_UART_IRQHandler+0x17a>
 800772e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007732:	2b00      	cmp	r3, #0
 8007734:	d04f      	beq.n	80077d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fc24 	bl	8007f84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007746:	2b40      	cmp	r3, #64	; 0x40
 8007748:	d141      	bne.n	80077ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3314      	adds	r3, #20
 8007750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3314      	adds	r3, #20
 8007772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007776:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800777a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800778e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1d9      	bne.n	800774a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	2b00      	cmp	r3, #0
 800779c:	d013      	beq.n	80077c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	4a7d      	ldr	r2, [pc, #500]	; (8007998 <HAL_UART_IRQHandler+0x3dc>)
 80077a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fa ff5a 	bl	8002664 <HAL_DMA_Abort_IT>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d016      	beq.n	80077e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c4:	e00e      	b.n	80077e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f99a 	bl	8007b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077cc:	e00a      	b.n	80077e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f996 	bl	8007b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d4:	e006      	b.n	80077e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f992 	bl	8007b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077e2:	e170      	b.n	8007ac6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e4:	bf00      	nop
    return;
 80077e6:	e16e      	b.n	8007ac6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	f040 814a 	bne.w	8007a86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80077f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 8143 	beq.w	8007a86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 813c 	beq.w	8007a86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800780e:	2300      	movs	r3, #0
 8007810:	60bb      	str	r3, [r7, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60bb      	str	r3, [r7, #8]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	60bb      	str	r3, [r7, #8]
 8007822:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	f040 80b4 	bne.w	800799c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007840:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8140 	beq.w	8007aca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800784e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007852:	429a      	cmp	r2, r3
 8007854:	f080 8139 	bcs.w	8007aca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800785e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786a:	f000 8088 	beq.w	800797e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	330c      	adds	r3, #12
 8007874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800788c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	330c      	adds	r3, #12
 8007896:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800789a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800789e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1d9      	bne.n	800786e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3314      	adds	r3, #20
 80078c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078cc:	f023 0301 	bic.w	r3, r3, #1
 80078d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3314      	adds	r3, #20
 80078da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e1      	bne.n	80078ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3314      	adds	r3, #20
 80078fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3314      	adds	r3, #20
 8007916:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800791a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800791c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007920:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e3      	bne.n	80078f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800794c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800794e:	f023 0310 	bic.w	r3, r3, #16
 8007952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	330c      	adds	r3, #12
 800795c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007960:	65ba      	str	r2, [r7, #88]	; 0x58
 8007962:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800796e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e3      	bne.n	800793c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	4618      	mov	r0, r3
 800797a:	f7fa fe03 	bl	8002584 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007986:	b29b      	uxth	r3, r3
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	b29b      	uxth	r3, r3
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f8c0 	bl	8007b14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007994:	e099      	b.n	8007aca <HAL_UART_IRQHandler+0x50e>
 8007996:	bf00      	nop
 8007998:	0800804b 	.word	0x0800804b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 808b 	beq.w	8007ace <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8086 	beq.w	8007ace <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	330c      	adds	r3, #12
 80079c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	330c      	adds	r3, #12
 80079e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80079e6:	647a      	str	r2, [r7, #68]	; 0x44
 80079e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e3      	bne.n	80079c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3314      	adds	r3, #20
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	623b      	str	r3, [r7, #32]
   return(result);
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	f023 0301 	bic.w	r3, r3, #1
 8007a10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3314      	adds	r3, #20
 8007a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a1e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e3      	bne.n	80079fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0310 	bic.w	r3, r3, #16
 8007a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	330c      	adds	r3, #12
 8007a60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a64:	61fa      	str	r2, [r7, #28]
 8007a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	69b9      	ldr	r1, [r7, #24]
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	617b      	str	r3, [r7, #20]
   return(result);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e3      	bne.n	8007a40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f848 	bl	8007b14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a84:	e023      	b.n	8007ace <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x4ea>
 8007a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fae7 	bl	8008072 <UART_Transmit_IT>
    return;
 8007aa4:	e014      	b.n	8007ad0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x514>
 8007ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d008      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fb27 	bl	8008112 <UART_EndTransmit_IT>
    return;
 8007ac4:	e004      	b.n	8007ad0 <HAL_UART_IRQHandler+0x514>
    return;
 8007ac6:	bf00      	nop
 8007ac8:	e002      	b.n	8007ad0 <HAL_UART_IRQHandler+0x514>
      return;
 8007aca:	bf00      	nop
 8007acc:	e000      	b.n	8007ad0 <HAL_UART_IRQHandler+0x514>
      return;
 8007ace:	bf00      	nop
  }
}
 8007ad0:	37e8      	adds	r7, #232	; 0xe8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop

08007ad8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b09c      	sub	sp, #112	; 0x70
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b38:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d172      	bne.n	8007c2e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	330c      	adds	r3, #12
 8007b54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b64:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b70:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e5      	bne.n	8007b4e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3314      	adds	r3, #20
 8007b88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	667b      	str	r3, [r7, #100]	; 0x64
 8007b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3314      	adds	r3, #20
 8007ba0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ba2:	647a      	str	r2, [r7, #68]	; 0x44
 8007ba4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e5      	bne.n	8007b82 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3314      	adds	r3, #20
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8007bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3314      	adds	r3, #20
 8007bd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bd6:	633a      	str	r2, [r7, #48]	; 0x30
 8007bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e5      	bne.n	8007bb6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bec:	2220      	movs	r2, #32
 8007bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d119      	bne.n	8007c2e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	330c      	adds	r3, #12
 8007c00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f023 0310 	bic.w	r3, r3, #16
 8007c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	330c      	adds	r3, #12
 8007c18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c1a:	61fa      	str	r2, [r7, #28]
 8007c1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	69b9      	ldr	r1, [r7, #24]
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	e841 2300 	strex	r3, r2, [r1]
 8007c26:	617b      	str	r3, [r7, #20]
   return(result);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e5      	bne.n	8007bfa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d106      	bne.n	8007c44 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c3e:	f7ff ff69 	bl	8007b14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c42:	e002      	b.n	8007c4a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007c44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c46:	f7f9 f9d7 	bl	8000ff8 <HAL_UART_RxCpltCallback>
}
 8007c4a:	bf00      	nop
 8007c4c:	3770      	adds	r7, #112	; 0x70
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d108      	bne.n	8007c7a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c6c:	085b      	lsrs	r3, r3, #1
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	4619      	mov	r1, r3
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f7ff ff4e 	bl	8007b14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c78:	e002      	b.n	8007c80 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7ff ff36 	bl	8007aec <HAL_UART_RxHalfCpltCallback>
}
 8007c80:	bf00      	nop
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca4:	2b80      	cmp	r3, #128	; 0x80
 8007ca6:	bf0c      	ite	eq
 8007ca8:	2301      	moveq	r3, #1
 8007caa:	2300      	movne	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b21      	cmp	r3, #33	; 0x21
 8007cba:	d108      	bne.n	8007cce <UART_DMAError+0x46>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007cc8:	68b8      	ldr	r0, [r7, #8]
 8007cca:	f000 f933 	bl	8007f34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b40      	cmp	r3, #64	; 0x40
 8007cda:	bf0c      	ite	eq
 8007cdc:	2301      	moveq	r3, #1
 8007cde:	2300      	movne	r3, #0
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b22      	cmp	r3, #34	; 0x22
 8007cee:	d108      	bne.n	8007d02 <UART_DMAError+0x7a>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d005      	beq.n	8007d02 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007cfc:	68b8      	ldr	r0, [r7, #8]
 8007cfe:	f000 f941 	bl	8007f84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d06:	f043 0210 	orr.w	r2, r3, #16
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d0e:	68b8      	ldr	r0, [r7, #8]
 8007d10:	f7ff fef6 	bl	8007b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b090      	sub	sp, #64	; 0x40
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d2c:	e050      	b.n	8007dd0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d34:	d04c      	beq.n	8007dd0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d007      	beq.n	8007d4c <UART_WaitOnFlagUntilTimeout+0x30>
 8007d3c:	f7fa f9da 	bl	80020f4 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d241      	bcs.n	8007dd0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	e853 3f00 	ldrex	r3, [r3]
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	330c      	adds	r3, #12
 8007d6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d6c:	637a      	str	r2, [r7, #52]	; 0x34
 8007d6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d74:	e841 2300 	strex	r3, r2, [r1]
 8007d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e5      	bne.n	8007d4c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3314      	adds	r3, #20
 8007d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	e853 3f00 	ldrex	r3, [r3]
 8007d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f023 0301 	bic.w	r3, r3, #1
 8007d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3314      	adds	r3, #20
 8007d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007da0:	623a      	str	r2, [r7, #32]
 8007da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da4:	69f9      	ldr	r1, [r7, #28]
 8007da6:	6a3a      	ldr	r2, [r7, #32]
 8007da8:	e841 2300 	strex	r3, r2, [r1]
 8007dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e5      	bne.n	8007d80 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e00f      	b.n	8007df0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	bf0c      	ite	eq
 8007de0:	2301      	moveq	r3, #1
 8007de2:	2300      	movne	r3, #0
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	461a      	mov	r2, r3
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d09f      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3740      	adds	r7, #64	; 0x40
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b098      	sub	sp, #96	; 0x60
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	88fa      	ldrh	r2, [r7, #6]
 8007e10:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2222      	movs	r2, #34	; 0x22
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	4a40      	ldr	r2, [pc, #256]	; (8007f28 <UART_Start_Receive_DMA+0x130>)
 8007e26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	4a3f      	ldr	r2, [pc, #252]	; (8007f2c <UART_Start_Receive_DMA+0x134>)
 8007e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e34:	4a3e      	ldr	r2, [pc, #248]	; (8007f30 <UART_Start_Receive_DMA+0x138>)
 8007e36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e40:	f107 0308 	add.w	r3, r7, #8
 8007e44:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4619      	mov	r1, r3
 8007e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	f7fa fb3c 	bl	80024d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	613b      	str	r3, [r7, #16]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d019      	beq.n	8007eb6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	330c      	adds	r3, #12
 8007e88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e98:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ea2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007ea4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e5      	bne.n	8007e82 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3314      	adds	r3, #20
 8007ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	f043 0301 	orr.w	r3, r3, #1
 8007ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3314      	adds	r3, #20
 8007ed4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ed6:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e5      	bne.n	8007eb6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3314      	adds	r3, #20
 8007ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f00:	653b      	str	r3, [r7, #80]	; 0x50
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3314      	adds	r3, #20
 8007f08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f0a:	627a      	str	r2, [r7, #36]	; 0x24
 8007f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	6a39      	ldr	r1, [r7, #32]
 8007f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e5      	bne.n	8007eea <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3760      	adds	r7, #96	; 0x60
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	08007b2d 	.word	0x08007b2d
 8007f2c:	08007c53 	.word	0x08007c53
 8007f30:	08007c89 	.word	0x08007c89

08007f34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b089      	sub	sp, #36	; 0x24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	330c      	adds	r3, #12
 8007f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f52:	61fb      	str	r3, [r7, #28]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	330c      	adds	r3, #12
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	61ba      	str	r2, [r7, #24]
 8007f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6979      	ldr	r1, [r7, #20]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	613b      	str	r3, [r7, #16]
   return(result);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e5      	bne.n	8007f3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007f78:	bf00      	nop
 8007f7a:	3724      	adds	r7, #36	; 0x24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b095      	sub	sp, #84	; 0x54
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	330c      	adds	r3, #12
 8007f92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	330c      	adds	r3, #12
 8007faa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fac:	643a      	str	r2, [r7, #64]	; 0x40
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e5      	bne.n	8007f8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3314      	adds	r3, #20
 8007fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
 8007fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3314      	adds	r3, #20
 8007fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e5      	bne.n	8007fc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d119      	bne.n	8008030 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	330c      	adds	r3, #12
 8008002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	60bb      	str	r3, [r7, #8]
   return(result);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f023 0310 	bic.w	r3, r3, #16
 8008012:	647b      	str	r3, [r7, #68]	; 0x44
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	330c      	adds	r3, #12
 800801a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800801c:	61ba      	str	r2, [r7, #24]
 800801e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6979      	ldr	r1, [r7, #20]
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	613b      	str	r3, [r7, #16]
   return(result);
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e5      	bne.n	8007ffc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800803e:	bf00      	nop
 8008040:	3754      	adds	r7, #84	; 0x54
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7ff fd4b 	bl	8007b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800806a:	bf00      	nop
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b21      	cmp	r3, #33	; 0x21
 8008084:	d13e      	bne.n	8008104 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800808e:	d114      	bne.n	80080ba <UART_Transmit_IT+0x48>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d110      	bne.n	80080ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	1c9a      	adds	r2, r3, #2
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	621a      	str	r2, [r3, #32]
 80080b8:	e008      	b.n	80080cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	1c59      	adds	r1, r3, #1
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6211      	str	r1, [r2, #32]
 80080c4:	781a      	ldrb	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	4619      	mov	r1, r3
 80080da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10f      	bne.n	8008100 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	e000      	b.n	8008106 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008104:	2302      	movs	r3, #2
  }
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008128:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2220      	movs	r2, #32
 800812e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff fcd0 	bl	8007ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b08c      	sub	sp, #48	; 0x30
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b22      	cmp	r3, #34	; 0x22
 8008154:	f040 80ab 	bne.w	80082ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008160:	d117      	bne.n	8008192 <UART_Receive_IT+0x50>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d113      	bne.n	8008192 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008180:	b29a      	uxth	r2, r3
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	1c9a      	adds	r2, r3, #2
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	629a      	str	r2, [r3, #40]	; 0x28
 8008190:	e026      	b.n	80081e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008198:	2300      	movs	r3, #0
 800819a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a4:	d007      	beq.n	80081b6 <UART_Receive_IT+0x74>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <UART_Receive_IT+0x82>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d106      	bne.n	80081c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	e008      	b.n	80081d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	4619      	mov	r1, r3
 80081ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d15a      	bne.n	80082aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0220 	bic.w	r2, r2, #32
 8008202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695a      	ldr	r2, [r3, #20]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0201 	bic.w	r2, r2, #1
 8008222:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2220      	movs	r2, #32
 8008228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008230:	2b01      	cmp	r3, #1
 8008232:	d135      	bne.n	80082a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	330c      	adds	r3, #12
 8008240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	613b      	str	r3, [r7, #16]
   return(result);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f023 0310 	bic.w	r3, r3, #16
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	330c      	adds	r3, #12
 8008258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825a:	623a      	str	r2, [r7, #32]
 800825c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	69f9      	ldr	r1, [r7, #28]
 8008260:	6a3a      	ldr	r2, [r7, #32]
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	61bb      	str	r3, [r7, #24]
   return(result);
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e5      	bne.n	800823a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0310 	and.w	r3, r3, #16
 8008278:	2b10      	cmp	r3, #16
 800827a:	d10a      	bne.n	8008292 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800827c:	2300      	movs	r3, #0
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7ff fc3b 	bl	8007b14 <HAL_UARTEx_RxEventCallback>
 800829e:	e002      	b.n	80082a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7f8 fea9 	bl	8000ff8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	e002      	b.n	80082b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e000      	b.n	80082b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082ae:	2302      	movs	r3, #2
  }
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3730      	adds	r7, #48	; 0x30
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082bc:	b0c0      	sub	sp, #256	; 0x100
 80082be:	af00      	add	r7, sp, #0
 80082c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d4:	68d9      	ldr	r1, [r3, #12]
 80082d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	ea40 0301 	orr.w	r3, r0, r1
 80082e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	431a      	orrs	r2, r3
 80082f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	4313      	orrs	r3, r2
 8008300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008310:	f021 010c 	bic.w	r1, r1, #12
 8008314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800831e:	430b      	orrs	r3, r1
 8008320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800832e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008332:	6999      	ldr	r1, [r3, #24]
 8008334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	ea40 0301 	orr.w	r3, r0, r1
 800833e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	4b8f      	ldr	r3, [pc, #572]	; (8008584 <UART_SetConfig+0x2cc>)
 8008348:	429a      	cmp	r2, r3
 800834a:	d005      	beq.n	8008358 <UART_SetConfig+0xa0>
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	4b8d      	ldr	r3, [pc, #564]	; (8008588 <UART_SetConfig+0x2d0>)
 8008354:	429a      	cmp	r2, r3
 8008356:	d104      	bne.n	8008362 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008358:	f7fd ff6a 	bl	8006230 <HAL_RCC_GetPCLK2Freq>
 800835c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008360:	e003      	b.n	800836a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008362:	f7fd ff51 	bl	8006208 <HAL_RCC_GetPCLK1Freq>
 8008366:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800836a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008374:	f040 810c 	bne.w	8008590 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800837c:	2200      	movs	r2, #0
 800837e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008382:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800838a:	4622      	mov	r2, r4
 800838c:	462b      	mov	r3, r5
 800838e:	1891      	adds	r1, r2, r2
 8008390:	65b9      	str	r1, [r7, #88]	; 0x58
 8008392:	415b      	adcs	r3, r3
 8008394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008396:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800839a:	4621      	mov	r1, r4
 800839c:	eb12 0801 	adds.w	r8, r2, r1
 80083a0:	4629      	mov	r1, r5
 80083a2:	eb43 0901 	adc.w	r9, r3, r1
 80083a6:	f04f 0200 	mov.w	r2, #0
 80083aa:	f04f 0300 	mov.w	r3, #0
 80083ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083ba:	4690      	mov	r8, r2
 80083bc:	4699      	mov	r9, r3
 80083be:	4623      	mov	r3, r4
 80083c0:	eb18 0303 	adds.w	r3, r8, r3
 80083c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083c8:	462b      	mov	r3, r5
 80083ca:	eb49 0303 	adc.w	r3, r9, r3
 80083ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80083e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083e6:	460b      	mov	r3, r1
 80083e8:	18db      	adds	r3, r3, r3
 80083ea:	653b      	str	r3, [r7, #80]	; 0x50
 80083ec:	4613      	mov	r3, r2
 80083ee:	eb42 0303 	adc.w	r3, r2, r3
 80083f2:	657b      	str	r3, [r7, #84]	; 0x54
 80083f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80083f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80083fc:	f7f8 fc44 	bl	8000c88 <__aeabi_uldivmod>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4b61      	ldr	r3, [pc, #388]	; (800858c <UART_SetConfig+0x2d4>)
 8008406:	fba3 2302 	umull	r2, r3, r3, r2
 800840a:	095b      	lsrs	r3, r3, #5
 800840c:	011c      	lsls	r4, r3, #4
 800840e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008412:	2200      	movs	r2, #0
 8008414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008418:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800841c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008420:	4642      	mov	r2, r8
 8008422:	464b      	mov	r3, r9
 8008424:	1891      	adds	r1, r2, r2
 8008426:	64b9      	str	r1, [r7, #72]	; 0x48
 8008428:	415b      	adcs	r3, r3
 800842a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800842c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008430:	4641      	mov	r1, r8
 8008432:	eb12 0a01 	adds.w	sl, r2, r1
 8008436:	4649      	mov	r1, r9
 8008438:	eb43 0b01 	adc.w	fp, r3, r1
 800843c:	f04f 0200 	mov.w	r2, #0
 8008440:	f04f 0300 	mov.w	r3, #0
 8008444:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008448:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800844c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008450:	4692      	mov	sl, r2
 8008452:	469b      	mov	fp, r3
 8008454:	4643      	mov	r3, r8
 8008456:	eb1a 0303 	adds.w	r3, sl, r3
 800845a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800845e:	464b      	mov	r3, r9
 8008460:	eb4b 0303 	adc.w	r3, fp, r3
 8008464:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008474:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008478:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800847c:	460b      	mov	r3, r1
 800847e:	18db      	adds	r3, r3, r3
 8008480:	643b      	str	r3, [r7, #64]	; 0x40
 8008482:	4613      	mov	r3, r2
 8008484:	eb42 0303 	adc.w	r3, r2, r3
 8008488:	647b      	str	r3, [r7, #68]	; 0x44
 800848a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800848e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008492:	f7f8 fbf9 	bl	8000c88 <__aeabi_uldivmod>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4611      	mov	r1, r2
 800849c:	4b3b      	ldr	r3, [pc, #236]	; (800858c <UART_SetConfig+0x2d4>)
 800849e:	fba3 2301 	umull	r2, r3, r3, r1
 80084a2:	095b      	lsrs	r3, r3, #5
 80084a4:	2264      	movs	r2, #100	; 0x64
 80084a6:	fb02 f303 	mul.w	r3, r2, r3
 80084aa:	1acb      	subs	r3, r1, r3
 80084ac:	00db      	lsls	r3, r3, #3
 80084ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80084b2:	4b36      	ldr	r3, [pc, #216]	; (800858c <UART_SetConfig+0x2d4>)
 80084b4:	fba3 2302 	umull	r2, r3, r3, r2
 80084b8:	095b      	lsrs	r3, r3, #5
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084c0:	441c      	add	r4, r3
 80084c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80084d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80084d4:	4642      	mov	r2, r8
 80084d6:	464b      	mov	r3, r9
 80084d8:	1891      	adds	r1, r2, r2
 80084da:	63b9      	str	r1, [r7, #56]	; 0x38
 80084dc:	415b      	adcs	r3, r3
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084e4:	4641      	mov	r1, r8
 80084e6:	1851      	adds	r1, r2, r1
 80084e8:	6339      	str	r1, [r7, #48]	; 0x30
 80084ea:	4649      	mov	r1, r9
 80084ec:	414b      	adcs	r3, r1
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34
 80084f0:	f04f 0200 	mov.w	r2, #0
 80084f4:	f04f 0300 	mov.w	r3, #0
 80084f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80084fc:	4659      	mov	r1, fp
 80084fe:	00cb      	lsls	r3, r1, #3
 8008500:	4651      	mov	r1, sl
 8008502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008506:	4651      	mov	r1, sl
 8008508:	00ca      	lsls	r2, r1, #3
 800850a:	4610      	mov	r0, r2
 800850c:	4619      	mov	r1, r3
 800850e:	4603      	mov	r3, r0
 8008510:	4642      	mov	r2, r8
 8008512:	189b      	adds	r3, r3, r2
 8008514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008518:	464b      	mov	r3, r9
 800851a:	460a      	mov	r2, r1
 800851c:	eb42 0303 	adc.w	r3, r2, r3
 8008520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008530:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008534:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008538:	460b      	mov	r3, r1
 800853a:	18db      	adds	r3, r3, r3
 800853c:	62bb      	str	r3, [r7, #40]	; 0x28
 800853e:	4613      	mov	r3, r2
 8008540:	eb42 0303 	adc.w	r3, r2, r3
 8008544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800854a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800854e:	f7f8 fb9b 	bl	8000c88 <__aeabi_uldivmod>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4b0d      	ldr	r3, [pc, #52]	; (800858c <UART_SetConfig+0x2d4>)
 8008558:	fba3 1302 	umull	r1, r3, r3, r2
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	2164      	movs	r1, #100	; 0x64
 8008560:	fb01 f303 	mul.w	r3, r1, r3
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	3332      	adds	r3, #50	; 0x32
 800856a:	4a08      	ldr	r2, [pc, #32]	; (800858c <UART_SetConfig+0x2d4>)
 800856c:	fba2 2303 	umull	r2, r3, r2, r3
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	f003 0207 	and.w	r2, r3, #7
 8008576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4422      	add	r2, r4
 800857e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008580:	e105      	b.n	800878e <UART_SetConfig+0x4d6>
 8008582:	bf00      	nop
 8008584:	40011000 	.word	0x40011000
 8008588:	40011400 	.word	0x40011400
 800858c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008594:	2200      	movs	r2, #0
 8008596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800859a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800859e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80085a2:	4642      	mov	r2, r8
 80085a4:	464b      	mov	r3, r9
 80085a6:	1891      	adds	r1, r2, r2
 80085a8:	6239      	str	r1, [r7, #32]
 80085aa:	415b      	adcs	r3, r3
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24
 80085ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085b2:	4641      	mov	r1, r8
 80085b4:	1854      	adds	r4, r2, r1
 80085b6:	4649      	mov	r1, r9
 80085b8:	eb43 0501 	adc.w	r5, r3, r1
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	00eb      	lsls	r3, r5, #3
 80085c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085ca:	00e2      	lsls	r2, r4, #3
 80085cc:	4614      	mov	r4, r2
 80085ce:	461d      	mov	r5, r3
 80085d0:	4643      	mov	r3, r8
 80085d2:	18e3      	adds	r3, r4, r3
 80085d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085d8:	464b      	mov	r3, r9
 80085da:	eb45 0303 	adc.w	r3, r5, r3
 80085de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085f2:	f04f 0200 	mov.w	r2, #0
 80085f6:	f04f 0300 	mov.w	r3, #0
 80085fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80085fe:	4629      	mov	r1, r5
 8008600:	008b      	lsls	r3, r1, #2
 8008602:	4621      	mov	r1, r4
 8008604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008608:	4621      	mov	r1, r4
 800860a:	008a      	lsls	r2, r1, #2
 800860c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008610:	f7f8 fb3a 	bl	8000c88 <__aeabi_uldivmod>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4b60      	ldr	r3, [pc, #384]	; (800879c <UART_SetConfig+0x4e4>)
 800861a:	fba3 2302 	umull	r2, r3, r3, r2
 800861e:	095b      	lsrs	r3, r3, #5
 8008620:	011c      	lsls	r4, r3, #4
 8008622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008626:	2200      	movs	r2, #0
 8008628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800862c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008630:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008634:	4642      	mov	r2, r8
 8008636:	464b      	mov	r3, r9
 8008638:	1891      	adds	r1, r2, r2
 800863a:	61b9      	str	r1, [r7, #24]
 800863c:	415b      	adcs	r3, r3
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008644:	4641      	mov	r1, r8
 8008646:	1851      	adds	r1, r2, r1
 8008648:	6139      	str	r1, [r7, #16]
 800864a:	4649      	mov	r1, r9
 800864c:	414b      	adcs	r3, r1
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	f04f 0300 	mov.w	r3, #0
 8008658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800865c:	4659      	mov	r1, fp
 800865e:	00cb      	lsls	r3, r1, #3
 8008660:	4651      	mov	r1, sl
 8008662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008666:	4651      	mov	r1, sl
 8008668:	00ca      	lsls	r2, r1, #3
 800866a:	4610      	mov	r0, r2
 800866c:	4619      	mov	r1, r3
 800866e:	4603      	mov	r3, r0
 8008670:	4642      	mov	r2, r8
 8008672:	189b      	adds	r3, r3, r2
 8008674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008678:	464b      	mov	r3, r9
 800867a:	460a      	mov	r2, r1
 800867c:	eb42 0303 	adc.w	r3, r2, r3
 8008680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	67bb      	str	r3, [r7, #120]	; 0x78
 800868e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008690:	f04f 0200 	mov.w	r2, #0
 8008694:	f04f 0300 	mov.w	r3, #0
 8008698:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800869c:	4649      	mov	r1, r9
 800869e:	008b      	lsls	r3, r1, #2
 80086a0:	4641      	mov	r1, r8
 80086a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086a6:	4641      	mov	r1, r8
 80086a8:	008a      	lsls	r2, r1, #2
 80086aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086ae:	f7f8 faeb 	bl	8000c88 <__aeabi_uldivmod>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4b39      	ldr	r3, [pc, #228]	; (800879c <UART_SetConfig+0x4e4>)
 80086b8:	fba3 1302 	umull	r1, r3, r3, r2
 80086bc:	095b      	lsrs	r3, r3, #5
 80086be:	2164      	movs	r1, #100	; 0x64
 80086c0:	fb01 f303 	mul.w	r3, r1, r3
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	011b      	lsls	r3, r3, #4
 80086c8:	3332      	adds	r3, #50	; 0x32
 80086ca:	4a34      	ldr	r2, [pc, #208]	; (800879c <UART_SetConfig+0x4e4>)
 80086cc:	fba2 2303 	umull	r2, r3, r2, r3
 80086d0:	095b      	lsrs	r3, r3, #5
 80086d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086d6:	441c      	add	r4, r3
 80086d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086dc:	2200      	movs	r2, #0
 80086de:	673b      	str	r3, [r7, #112]	; 0x70
 80086e0:	677a      	str	r2, [r7, #116]	; 0x74
 80086e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80086e6:	4642      	mov	r2, r8
 80086e8:	464b      	mov	r3, r9
 80086ea:	1891      	adds	r1, r2, r2
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	415b      	adcs	r3, r3
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086f6:	4641      	mov	r1, r8
 80086f8:	1851      	adds	r1, r2, r1
 80086fa:	6039      	str	r1, [r7, #0]
 80086fc:	4649      	mov	r1, r9
 80086fe:	414b      	adcs	r3, r1
 8008700:	607b      	str	r3, [r7, #4]
 8008702:	f04f 0200 	mov.w	r2, #0
 8008706:	f04f 0300 	mov.w	r3, #0
 800870a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800870e:	4659      	mov	r1, fp
 8008710:	00cb      	lsls	r3, r1, #3
 8008712:	4651      	mov	r1, sl
 8008714:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008718:	4651      	mov	r1, sl
 800871a:	00ca      	lsls	r2, r1, #3
 800871c:	4610      	mov	r0, r2
 800871e:	4619      	mov	r1, r3
 8008720:	4603      	mov	r3, r0
 8008722:	4642      	mov	r2, r8
 8008724:	189b      	adds	r3, r3, r2
 8008726:	66bb      	str	r3, [r7, #104]	; 0x68
 8008728:	464b      	mov	r3, r9
 800872a:	460a      	mov	r2, r1
 800872c:	eb42 0303 	adc.w	r3, r2, r3
 8008730:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	663b      	str	r3, [r7, #96]	; 0x60
 800873c:	667a      	str	r2, [r7, #100]	; 0x64
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	f04f 0300 	mov.w	r3, #0
 8008746:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800874a:	4649      	mov	r1, r9
 800874c:	008b      	lsls	r3, r1, #2
 800874e:	4641      	mov	r1, r8
 8008750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008754:	4641      	mov	r1, r8
 8008756:	008a      	lsls	r2, r1, #2
 8008758:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800875c:	f7f8 fa94 	bl	8000c88 <__aeabi_uldivmod>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4b0d      	ldr	r3, [pc, #52]	; (800879c <UART_SetConfig+0x4e4>)
 8008766:	fba3 1302 	umull	r1, r3, r3, r2
 800876a:	095b      	lsrs	r3, r3, #5
 800876c:	2164      	movs	r1, #100	; 0x64
 800876e:	fb01 f303 	mul.w	r3, r1, r3
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	011b      	lsls	r3, r3, #4
 8008776:	3332      	adds	r3, #50	; 0x32
 8008778:	4a08      	ldr	r2, [pc, #32]	; (800879c <UART_SetConfig+0x4e4>)
 800877a:	fba2 2303 	umull	r2, r3, r2, r3
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	f003 020f 	and.w	r2, r3, #15
 8008784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4422      	add	r2, r4
 800878c:	609a      	str	r2, [r3, #8]
}
 800878e:	bf00      	nop
 8008790:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008794:	46bd      	mov	sp, r7
 8008796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800879a:	bf00      	nop
 800879c:	51eb851f 	.word	0x51eb851f

080087a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087a0:	b084      	sub	sp, #16
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	f107 001c 	add.w	r0, r7, #28
 80087ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d122      	bne.n	80087fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80087cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80087e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d105      	bne.n	80087f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f9c0 	bl	8008b78 <USB_CoreReset>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73fb      	strb	r3, [r7, #15]
 80087fc:	e01a      	b.n	8008834 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f9b4 	bl	8008b78 <USB_CoreReset>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	639a      	str	r2, [r3, #56]	; 0x38
 8008826:	e005      	b.n	8008834 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	2b01      	cmp	r3, #1
 8008838:	d10b      	bne.n	8008852 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f043 0206 	orr.w	r2, r3, #6
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f043 0220 	orr.w	r2, r3, #32
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008852:	7bfb      	ldrb	r3, [r7, #15]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800885e:	b004      	add	sp, #16
 8008860:	4770      	bx	lr

08008862 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f043 0201 	orr.w	r2, r3, #1
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f023 0201 	bic.w	r2, r3, #1
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d115      	bne.n	80088f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088d4:	2001      	movs	r0, #1
 80088d6:	f7f9 fc19 	bl	800210c <HAL_Delay>
      ms++;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3301      	adds	r3, #1
 80088de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f93a 	bl	8008b5a <USB_GetMode>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d01e      	beq.n	800892a <USB_SetCurrentMode+0x84>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b31      	cmp	r3, #49	; 0x31
 80088f0:	d9f0      	bls.n	80088d4 <USB_SetCurrentMode+0x2e>
 80088f2:	e01a      	b.n	800892a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d115      	bne.n	8008926 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008906:	2001      	movs	r0, #1
 8008908:	f7f9 fc00 	bl	800210c <HAL_Delay>
      ms++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3301      	adds	r3, #1
 8008910:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f921 	bl	8008b5a <USB_GetMode>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d005      	beq.n	800892a <USB_SetCurrentMode+0x84>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b31      	cmp	r3, #49	; 0x31
 8008922:	d9f0      	bls.n	8008906 <USB_SetCurrentMode+0x60>
 8008924:	e001      	b.n	800892a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e005      	b.n	8008936 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b32      	cmp	r3, #50	; 0x32
 800892e:	d101      	bne.n	8008934 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e000      	b.n	8008936 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3301      	adds	r3, #1
 8008952:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4a13      	ldr	r2, [pc, #76]	; (80089a4 <USB_FlushTxFifo+0x64>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d901      	bls.n	8008960 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e01b      	b.n	8008998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	daf2      	bge.n	800894e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	019b      	lsls	r3, r3, #6
 8008970:	f043 0220 	orr.w	r2, r3, #32
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3301      	adds	r3, #1
 800897c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4a08      	ldr	r2, [pc, #32]	; (80089a4 <USB_FlushTxFifo+0x64>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d901      	bls.n	800898a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e006      	b.n	8008998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	f003 0320 	and.w	r3, r3, #32
 8008992:	2b20      	cmp	r3, #32
 8008994:	d0f0      	beq.n	8008978 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	00030d40 	.word	0x00030d40

080089a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3301      	adds	r3, #1
 80089b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4a11      	ldr	r2, [pc, #68]	; (8008a04 <USB_FlushRxFifo+0x5c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d901      	bls.n	80089c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e018      	b.n	80089f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	daf2      	bge.n	80089b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2210      	movs	r2, #16
 80089d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3301      	adds	r3, #1
 80089dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <USB_FlushRxFifo+0x5c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d901      	bls.n	80089ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e006      	b.n	80089f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	f003 0310 	and.w	r3, r3, #16
 80089f2:	2b10      	cmp	r3, #16
 80089f4:	d0f0      	beq.n	80089d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	00030d40 	.word	0x00030d40

08008a08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b089      	sub	sp, #36	; 0x24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	4611      	mov	r1, r2
 8008a14:	461a      	mov	r2, r3
 8008a16:	460b      	mov	r3, r1
 8008a18:	71fb      	strb	r3, [r7, #7]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d123      	bne.n	8008a76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a2e:	88bb      	ldrh	r3, [r7, #4]
 8008a30:	3303      	adds	r3, #3
 8008a32:	089b      	lsrs	r3, r3, #2
 8008a34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a36:	2300      	movs	r3, #0
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	e018      	b.n	8008a6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
 8008a3e:	031a      	lsls	r2, r3, #12
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a48:	461a      	mov	r2, r3
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	3301      	adds	r3, #1
 8008a54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	3301      	adds	r3, #1
 8008a66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	61bb      	str	r3, [r7, #24]
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d3e2      	bcc.n	8008a3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3724      	adds	r7, #36	; 0x24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b08b      	sub	sp, #44	; 0x2c
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a9a:	88fb      	ldrh	r3, [r7, #6]
 8008a9c:	089b      	lsrs	r3, r3, #2
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008aa2:	88fb      	ldrh	r3, [r7, #6]
 8008aa4:	f003 0303 	and.w	r3, r3, #3
 8008aa8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008aaa:	2300      	movs	r3, #0
 8008aac:	623b      	str	r3, [r7, #32]
 8008aae:	e014      	b.n	8008ada <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	601a      	str	r2, [r3, #0]
    pDest++;
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	3301      	adds	r3, #1
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	3301      	adds	r3, #1
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	623b      	str	r3, [r7, #32]
 8008ada:	6a3a      	ldr	r2, [r7, #32]
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d3e6      	bcc.n	8008ab0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ae2:	8bfb      	ldrh	r3, [r7, #30]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01e      	beq.n	8008b26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af2:	461a      	mov	r2, r3
 8008af4:	f107 0310 	add.w	r3, r7, #16
 8008af8:	6812      	ldr	r2, [r2, #0]
 8008afa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	701a      	strb	r2, [r3, #0]
      i++;
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	3301      	adds	r3, #1
 8008b12:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	3301      	adds	r3, #1
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008b1a:	8bfb      	ldrh	r3, [r7, #30]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b20:	8bfb      	ldrh	r3, [r7, #30]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1ea      	bne.n	8008afc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	372c      	adds	r7, #44	; 0x2c
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	4013      	ands	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	f003 0301 	and.w	r3, r3, #1
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
	...

08008b78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3301      	adds	r3, #1
 8008b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4a13      	ldr	r2, [pc, #76]	; (8008bdc <USB_CoreReset+0x64>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d901      	bls.n	8008b96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e01b      	b.n	8008bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	daf2      	bge.n	8008b84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	f043 0201 	orr.w	r2, r3, #1
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4a09      	ldr	r2, [pc, #36]	; (8008bdc <USB_CoreReset+0x64>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d901      	bls.n	8008bc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e006      	b.n	8008bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d0f0      	beq.n	8008bae <USB_CoreReset+0x36>

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	00030d40 	.word	0x00030d40

08008be0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008be0:	b084      	sub	sp, #16
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b086      	sub	sp, #24
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c00:	461a      	mov	r2, r3
 8008c02:	2300      	movs	r3, #0
 8008c04:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c22:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d018      	beq.n	8008c68 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d10a      	bne.n	8008c52 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c4a:	f043 0304 	orr.w	r3, r3, #4
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	e014      	b.n	8008c7c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c60:	f023 0304 	bic.w	r3, r3, #4
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	e009      	b.n	8008c7c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c76:	f023 0304 	bic.w	r3, r3, #4
 8008c7a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c7c:	2110      	movs	r1, #16
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff fe5e 	bl	8008940 <USB_FlushTxFifo>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7ff fe8a 	bl	80089a8 <USB_FlushRxFifo>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	613b      	str	r3, [r7, #16]
 8008ca2:	e015      	b.n	8008cd0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	613b      	str	r3, [r7, #16]
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d3e5      	bcc.n	8008ca4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00b      	beq.n	8008d0a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cf8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a13      	ldr	r2, [pc, #76]	; (8008d4c <USB_HostInit+0x16c>)
 8008cfe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <USB_HostInit+0x170>)
 8008d04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008d08:	e009      	b.n	8008d1e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2280      	movs	r2, #128	; 0x80
 8008d0e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a10      	ldr	r2, [pc, #64]	; (8008d54 <USB_HostInit+0x174>)
 8008d14:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a0f      	ldr	r2, [pc, #60]	; (8008d58 <USB_HostInit+0x178>)
 8008d1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d105      	bne.n	8008d30 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	f043 0210 	orr.w	r2, r3, #16
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	699a      	ldr	r2, [r3, #24]
 8008d34:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <USB_HostInit+0x17c>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d48:	b004      	add	sp, #16
 8008d4a:	4770      	bx	lr
 8008d4c:	01000200 	.word	0x01000200
 8008d50:	00e00300 	.word	0x00e00300
 8008d54:	00600080 	.word	0x00600080
 8008d58:	004000e0 	.word	0x004000e0
 8008d5c:	a3200008 	.word	0xa3200008

08008d60 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d7e:	f023 0303 	bic.w	r3, r3, #3
 8008d82:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	68f9      	ldr	r1, [r7, #12]
 8008d94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d107      	bne.n	8008db2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008da8:	461a      	mov	r2, r3
 8008daa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008dae:	6053      	str	r3, [r2, #4]
 8008db0:	e009      	b.n	8008dc6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d106      	bne.n	8008dc6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f241 7370 	movw	r3, #6000	; 0x1770
 8008dc4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008df4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e02:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008e04:	2064      	movs	r0, #100	; 0x64
 8008e06:	f7f9 f981 	bl	800210c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e16:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008e18:	200a      	movs	r0, #10
 8008e1a:	f7f9 f977 	bl	800210c <HAL_Delay>

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008e4c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d109      	bne.n	8008e6c <USB_DriveVbus+0x44>
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d106      	bne.n	8008e6c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e6a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e76:	d109      	bne.n	8008e8c <USB_DriveVbus+0x64>
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d106      	bne.n	8008e8c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e8a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	0c5b      	lsrs	r3, r3, #17
 8008eb8:	f003 0303 	and.w	r3, r3, #3
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	b29b      	uxth	r3, r3
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4603      	mov	r3, r0
 8008efc:	70fb      	strb	r3, [r7, #3]
 8008efe:	460b      	mov	r3, r1
 8008f00:	70bb      	strb	r3, [r7, #2]
 8008f02:	4613      	mov	r3, r2
 8008f04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008f0e:	78fb      	ldrb	r3, [r7, #3]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f20:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008f22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d87e      	bhi.n	8009028 <USB_HC_Init+0x13c>
 8008f2a:	a201      	add	r2, pc, #4	; (adr r2, 8008f30 <USB_HC_Init+0x44>)
 8008f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f30:	08008f41 	.word	0x08008f41
 8008f34:	08008feb 	.word	0x08008feb
 8008f38:	08008f41 	.word	0x08008f41
 8008f3c:	08008fad 	.word	0x08008fad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008f52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008f54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	da10      	bge.n	8008f7e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	0151      	lsls	r1, r2, #5
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	440a      	add	r2, r1
 8008f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f7a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008f7c:	e057      	b.n	800902e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d051      	beq.n	800902e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	78fa      	ldrb	r2, [r7, #3]
 8008f9a:	0151      	lsls	r1, r2, #5
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	440a      	add	r2, r1
 8008fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fa4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008fa8:	60d3      	str	r3, [r2, #12]
      break;
 8008faa:	e040      	b.n	800902e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f240 639d 	movw	r3, #1693	; 0x69d
 8008fbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008fc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da34      	bge.n	8009032 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	0151      	lsls	r1, r2, #5
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	440a      	add	r2, r1
 8008fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fe6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008fe8:	e023      	b.n	8009032 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008fea:	78fb      	ldrb	r3, [r7, #3]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f240 2325 	movw	r3, #549	; 0x225
 8008ffc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ffe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009002:	2b00      	cmp	r3, #0
 8009004:	da17      	bge.n	8009036 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	4413      	add	r3, r2
 800900e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	78fa      	ldrb	r2, [r7, #3]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	440a      	add	r2, r1
 800901c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009020:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009024:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009026:	e006      	b.n	8009036 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	77fb      	strb	r3, [r7, #31]
      break;
 800902c:	e004      	b.n	8009038 <USB_HC_Init+0x14c>
      break;
 800902e:	bf00      	nop
 8009030:	e002      	b.n	8009038 <USB_HC_Init+0x14c>
      break;
 8009032:	bf00      	nop
 8009034:	e000      	b.n	8009038 <USB_HC_Init+0x14c>
      break;
 8009036:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	4413      	add	r3, r2
 8009040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	440a      	add	r2, r1
 800904e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009052:	f043 0302 	orr.w	r3, r3, #2
 8009056:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800905e:	699a      	ldr	r2, [r3, #24]
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	f003 030f 	and.w	r3, r3, #15
 8009066:	2101      	movs	r1, #1
 8009068:	fa01 f303 	lsl.w	r3, r1, r3
 800906c:	6939      	ldr	r1, [r7, #16]
 800906e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009072:	4313      	orrs	r3, r2
 8009074:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009082:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009086:	2b00      	cmp	r3, #0
 8009088:	da03      	bge.n	8009092 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800908a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800908e:	61bb      	str	r3, [r7, #24]
 8009090:	e001      	b.n	8009096 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009092:	2300      	movs	r3, #0
 8009094:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff feff 	bl	8008e9a <USB_GetHostSpeed>
 800909c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800909e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d106      	bne.n	80090b4 <USB_HC_Init+0x1c8>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d003      	beq.n	80090b4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80090ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090b0:	617b      	str	r3, [r7, #20]
 80090b2:	e001      	b.n	80090b8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80090b4:	2300      	movs	r3, #0
 80090b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090b8:	787b      	ldrb	r3, [r7, #1]
 80090ba:	059b      	lsls	r3, r3, #22
 80090bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80090c0:	78bb      	ldrb	r3, [r7, #2]
 80090c2:	02db      	lsls	r3, r3, #11
 80090c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80090ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090ce:	049b      	lsls	r3, r3, #18
 80090d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80090d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80090d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80090dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090e2:	78fb      	ldrb	r3, [r7, #3]
 80090e4:	0159      	lsls	r1, r3, #5
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	440b      	add	r3, r1
 80090ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090f4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80090f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d003      	beq.n	8009106 <USB_HC_Init+0x21a>
 80090fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009102:	2b01      	cmp	r3, #1
 8009104:	d10f      	bne.n	8009126 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	4413      	add	r3, r2
 800910e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	78fa      	ldrb	r2, [r7, #3]
 8009116:	0151      	lsls	r1, r2, #5
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	440a      	add	r2, r1
 800911c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009120:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009124:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009126:	7ffb      	ldrb	r3, [r7, #31]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3720      	adds	r7, #32
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08c      	sub	sp, #48	; 0x30
 8009134:	af02      	add	r7, sp, #8
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	4613      	mov	r3, r2
 800913c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	785b      	ldrb	r3, [r3, #1]
 8009146:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800914c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009156:	2b00      	cmp	r3, #0
 8009158:	d02d      	beq.n	80091b6 <USB_HC_StartXfer+0x86>
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	791b      	ldrb	r3, [r3, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d129      	bne.n	80091b6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d117      	bne.n	8009198 <USB_HC_StartXfer+0x68>
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	79db      	ldrb	r3, [r3, #7]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <USB_HC_StartXfer+0x48>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	79db      	ldrb	r3, [r3, #7]
 8009174:	2b02      	cmp	r3, #2
 8009176:	d10f      	bne.n	8009198 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	4413      	add	r3, r2
 8009180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	6a3a      	ldr	r2, [r7, #32]
 800918c:	440a      	add	r2, r1
 800918e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009196:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009198:	79fb      	ldrb	r3, [r7, #7]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10b      	bne.n	80091b6 <USB_HC_StartXfer+0x86>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	795b      	ldrb	r3, [r3, #5]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d107      	bne.n	80091b6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	785b      	ldrb	r3, [r3, #1]
 80091aa:	4619      	mov	r1, r3
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 fa0f 	bl	80095d0 <USB_DoPing>
      return HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	e0f8      	b.n	80093a8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d018      	beq.n	80091f0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	8912      	ldrh	r2, [r2, #8]
 80091c6:	4413      	add	r3, r2
 80091c8:	3b01      	subs	r3, #1
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	8912      	ldrh	r2, [r2, #8]
 80091ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80091d2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80091d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80091d6:	8b7b      	ldrh	r3, [r7, #26]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d90b      	bls.n	80091f4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80091dc:	8b7b      	ldrh	r3, [r7, #26]
 80091de:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80091e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	8912      	ldrh	r2, [r2, #8]
 80091e6:	fb03 f202 	mul.w	r2, r3, r2
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	611a      	str	r2, [r3, #16]
 80091ee:	e001      	b.n	80091f4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80091f0:	2301      	movs	r3, #1
 80091f2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	78db      	ldrb	r3, [r3, #3]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d007      	beq.n	800920c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80091fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	8912      	ldrh	r2, [r2, #8]
 8009202:	fb03 f202 	mul.w	r2, r3, r2
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	611a      	str	r2, [r3, #16]
 800920a:	e003      	b.n	8009214 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	695a      	ldr	r2, [r3, #20]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800921c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800921e:	04d9      	lsls	r1, r3, #19
 8009220:	4b63      	ldr	r3, [pc, #396]	; (80093b0 <USB_HC_StartXfer+0x280>)
 8009222:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009224:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	7a9b      	ldrb	r3, [r3, #10]
 800922a:	075b      	lsls	r3, r3, #29
 800922c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009230:	69f9      	ldr	r1, [r7, #28]
 8009232:	0148      	lsls	r0, r1, #5
 8009234:	6a39      	ldr	r1, [r7, #32]
 8009236:	4401      	add	r1, r0
 8009238:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800923c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800923e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d009      	beq.n	800925a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	68d9      	ldr	r1, [r3, #12]
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	4413      	add	r3, r2
 8009252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009256:	460a      	mov	r2, r1
 8009258:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	bf0c      	ite	eq
 800926a:	2301      	moveq	r3, #1
 800926c:	2300      	movne	r3, #0
 800926e:	b2db      	uxtb	r3, r3
 8009270:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	4413      	add	r3, r2
 800927a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	69fa      	ldr	r2, [r7, #28]
 8009282:	0151      	lsls	r1, r2, #5
 8009284:	6a3a      	ldr	r2, [r7, #32]
 8009286:	440a      	add	r2, r1
 8009288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800928c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009290:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	4413      	add	r3, r2
 800929a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	7e7b      	ldrb	r3, [r7, #25]
 80092a2:	075b      	lsls	r3, r3, #29
 80092a4:	69f9      	ldr	r1, [r7, #28]
 80092a6:	0148      	lsls	r0, r1, #5
 80092a8:	6a39      	ldr	r1, [r7, #32]
 80092aa:	4401      	add	r1, r0
 80092ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80092b0:	4313      	orrs	r3, r2
 80092b2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	015a      	lsls	r2, r3, #5
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	4413      	add	r3, r2
 80092bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092ca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	78db      	ldrb	r3, [r3, #3]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d004      	beq.n	80092de <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092da:	613b      	str	r3, [r7, #16]
 80092dc:	e003      	b.n	80092e6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092e4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092ec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092fa:	461a      	mov	r2, r3
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	e04e      	b.n	80093a8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	78db      	ldrb	r3, [r3, #3]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d149      	bne.n	80093a6 <USB_HC_StartXfer+0x276>
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d045      	beq.n	80093a6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	79db      	ldrb	r3, [r3, #7]
 800931e:	2b03      	cmp	r3, #3
 8009320:	d830      	bhi.n	8009384 <USB_HC_StartXfer+0x254>
 8009322:	a201      	add	r2, pc, #4	; (adr r2, 8009328 <USB_HC_StartXfer+0x1f8>)
 8009324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009328:	08009339 	.word	0x08009339
 800932c:	0800935d 	.word	0x0800935d
 8009330:	08009339 	.word	0x08009339
 8009334:	0800935d 	.word	0x0800935d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	3303      	adds	r3, #3
 800933e:	089b      	lsrs	r3, r3, #2
 8009340:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009342:	8afa      	ldrh	r2, [r7, #22]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	b29b      	uxth	r3, r3
 800934a:	429a      	cmp	r2, r3
 800934c:	d91c      	bls.n	8009388 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	f043 0220 	orr.w	r2, r3, #32
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	619a      	str	r2, [r3, #24]
        }
        break;
 800935a:	e015      	b.n	8009388 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	3303      	adds	r3, #3
 8009362:	089b      	lsrs	r3, r3, #2
 8009364:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009366:	8afa      	ldrh	r2, [r7, #22]
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	b29b      	uxth	r3, r3
 8009372:	429a      	cmp	r2, r3
 8009374:	d90a      	bls.n	800938c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	619a      	str	r2, [r3, #24]
        }
        break;
 8009382:	e003      	b.n	800938c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009384:	bf00      	nop
 8009386:	e002      	b.n	800938e <USB_HC_StartXfer+0x25e>
        break;
 8009388:	bf00      	nop
 800938a:	e000      	b.n	800938e <USB_HC_StartXfer+0x25e>
        break;
 800938c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	68d9      	ldr	r1, [r3, #12]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	785a      	ldrb	r2, [r3, #1]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	b29b      	uxth	r3, r3
 800939c:	2000      	movs	r0, #0
 800939e:	9000      	str	r0, [sp, #0]
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f7ff fb31 	bl	8008a08 <USB_WritePacket>
  }

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3728      	adds	r7, #40	; 0x28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	1ff80000 	.word	0x1ff80000

080093b4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	b29b      	uxth	r3, r3
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b089      	sub	sp, #36	; 0x24
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	0c9b      	lsrs	r3, r3, #18
 80093fe:	f003 0303 	and.w	r3, r3, #3
 8009402:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	4413      	add	r3, r2
 800940c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	0fdb      	lsrs	r3, r3, #31
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f003 0320 	and.w	r3, r3, #32
 8009422:	2b20      	cmp	r3, #32
 8009424:	d104      	bne.n	8009430 <USB_HC_Halt+0x5a>
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	e0c8      	b.n	80095c2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <USB_HC_Halt+0x66>
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2b02      	cmp	r3, #2
 800943a:	d163      	bne.n	8009504 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4413      	add	r3, r2
 8009444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	440a      	add	r2, r1
 8009452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009456:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800945a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f003 0320 	and.w	r3, r3, #32
 8009464:	2b00      	cmp	r3, #0
 8009466:	f040 80ab 	bne.w	80095c0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d133      	bne.n	80094de <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	4413      	add	r3, r2
 800947e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	0151      	lsls	r1, r2, #5
 8009488:	69fa      	ldr	r2, [r7, #28]
 800948a:	440a      	add	r2, r1
 800948c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009494:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	4413      	add	r3, r2
 800949e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	69fa      	ldr	r2, [r7, #28]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094b4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3301      	adds	r3, #1
 80094ba:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094c2:	d81d      	bhi.n	8009500 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094da:	d0ec      	beq.n	80094b6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80094dc:	e070      	b.n	80095c0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	69ba      	ldr	r2, [r7, #24]
 80094ee:	0151      	lsls	r1, r2, #5
 80094f0:	69fa      	ldr	r2, [r7, #28]
 80094f2:	440a      	add	r2, r1
 80094f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094fc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80094fe:	e05f      	b.n	80095c0 <USB_HC_Halt+0x1ea>
            break;
 8009500:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009502:	e05d      	b.n	80095c0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	4413      	add	r3, r2
 800950c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	69fa      	ldr	r2, [r7, #28]
 8009518:	440a      	add	r2, r1
 800951a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800951e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009522:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d133      	bne.n	800959c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	4413      	add	r3, r2
 800953c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69ba      	ldr	r2, [r7, #24]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	440a      	add	r2, r1
 800954a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800954e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009552:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	4413      	add	r3, r2
 800955c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	69fa      	ldr	r2, [r7, #28]
 8009568:	440a      	add	r2, r1
 800956a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800956e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009572:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3301      	adds	r3, #1
 8009578:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009580:	d81d      	bhi.n	80095be <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	015a      	lsls	r2, r3, #5
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	4413      	add	r3, r2
 800958a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009598:	d0ec      	beq.n	8009574 <USB_HC_Halt+0x19e>
 800959a:	e011      	b.n	80095c0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69ba      	ldr	r2, [r7, #24]
 80095ac:	0151      	lsls	r1, r2, #5
 80095ae:	69fa      	ldr	r2, [r7, #28]
 80095b0:	440a      	add	r2, r1
 80095b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	e000      	b.n	80095c0 <USB_HC_Halt+0x1ea>
          break;
 80095be:	bf00      	nop
    }
  }

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3724      	adds	r7, #36	; 0x24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
	...

080095d0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80095e4:	2301      	movs	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	04da      	lsls	r2, r3, #19
 80095ec:	4b15      	ldr	r3, [pc, #84]	; (8009644 <USB_DoPing+0x74>)
 80095ee:	4013      	ands	r3, r2
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	0151      	lsls	r1, r2, #5
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	440a      	add	r2, r1
 80095f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009600:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	4413      	add	r3, r2
 800960a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009618:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009620:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	4413      	add	r3, r2
 800962a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800962e:	461a      	mov	r2, r3
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	371c      	adds	r7, #28
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	1ff80000 	.word	0x1ff80000

08009648 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009658:	2300      	movs	r3, #0
 800965a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7ff f911 	bl	8008884 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009662:	2110      	movs	r1, #16
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff f96b 	bl	8008940 <USB_FlushTxFifo>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff f997 	bl	80089a8 <USB_FlushRxFifo>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009684:	2300      	movs	r3, #0
 8009686:	61bb      	str	r3, [r7, #24]
 8009688:	e01f      	b.n	80096ca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	4413      	add	r3, r2
 8009692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096be:	461a      	mov	r2, r3
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	3301      	adds	r3, #1
 80096c8:	61bb      	str	r3, [r7, #24]
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	2b0f      	cmp	r3, #15
 80096ce:	d9dc      	bls.n	800968a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80096d0:	2300      	movs	r3, #0
 80096d2:	61bb      	str	r3, [r7, #24]
 80096d4:	e034      	b.n	8009740 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	4413      	add	r3, r2
 8009706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800970a:	461a      	mov	r2, r3
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3301      	adds	r3, #1
 8009714:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800971c:	d80c      	bhi.n	8009738 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	4413      	add	r3, r2
 8009726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009734:	d0ec      	beq.n	8009710 <USB_StopHost+0xc8>
 8009736:	e000      	b.n	800973a <USB_StopHost+0xf2>
        break;
 8009738:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	3301      	adds	r3, #1
 800973e:	61bb      	str	r3, [r7, #24]
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	2b0f      	cmp	r3, #15
 8009744:	d9c7      	bls.n	80096d6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800974c:	461a      	mov	r2, r3
 800974e:	f04f 33ff 	mov.w	r3, #4294967295
 8009752:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f04f 32ff 	mov.w	r2, #4294967295
 800975a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7ff f880 	bl	8008862 <USB_EnableGlobalInt>

  return ret;
 8009762:	7ffb      	ldrb	r3, [r7, #31]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3720      	adds	r7, #32
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800976c:	b590      	push	{r4, r7, lr}
 800976e:	b089      	sub	sp, #36	; 0x24
 8009770:	af04      	add	r7, sp, #16
 8009772:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009774:	2301      	movs	r3, #1
 8009776:	2202      	movs	r2, #2
 8009778:	2102      	movs	r1, #2
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fc66 	bl	800a04c <USBH_FindInterface>
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	2bff      	cmp	r3, #255	; 0xff
 8009788:	d002      	beq.n	8009790 <USBH_CDC_InterfaceInit+0x24>
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d901      	bls.n	8009794 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009790:	2302      	movs	r3, #2
 8009792:	e13d      	b.n	8009a10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009794:	7bfb      	ldrb	r3, [r7, #15]
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fc3b 	bl	800a014 <USBH_SelectInterface>
 800979e:	4603      	mov	r3, r0
 80097a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80097a8:	2302      	movs	r3, #2
 80097aa:	e131      	b.n	8009a10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80097b2:	2050      	movs	r0, #80	; 0x50
 80097b4:	f002 fafe 	bl	800bdb4 <malloc>
 80097b8:	4603      	mov	r3, r0
 80097ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80097cc:	2302      	movs	r3, #2
 80097ce:	e11f      	b.n	8009a10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80097d0:	2250      	movs	r2, #80	; 0x50
 80097d2:	2100      	movs	r1, #0
 80097d4:	68b8      	ldr	r0, [r7, #8]
 80097d6:	f002 fb0b 	bl	800bdf0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	211a      	movs	r1, #26
 80097e0:	fb01 f303 	mul.w	r3, r1, r3
 80097e4:	4413      	add	r3, r2
 80097e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	b25b      	sxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	da15      	bge.n	800981e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	211a      	movs	r1, #26
 80097f8:	fb01 f303 	mul.w	r3, r1, r3
 80097fc:	4413      	add	r3, r2
 80097fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009802:	781a      	ldrb	r2, [r3, #0]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	211a      	movs	r1, #26
 800980e:	fb01 f303 	mul.w	r3, r1, r3
 8009812:	4413      	add	r3, r2
 8009814:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009818:	881a      	ldrh	r2, [r3, #0]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	785b      	ldrb	r3, [r3, #1]
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 ff2c 	bl	800b682 <USBH_AllocPipe>
 800982a:	4603      	mov	r3, r0
 800982c:	461a      	mov	r2, r3
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	7819      	ldrb	r1, [r3, #0]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	7858      	ldrb	r0, [r3, #1]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	8952      	ldrh	r2, [r2, #10]
 800984a:	9202      	str	r2, [sp, #8]
 800984c:	2203      	movs	r2, #3
 800984e:	9201      	str	r2, [sp, #4]
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	4623      	mov	r3, r4
 8009854:	4602      	mov	r2, r0
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f001 fee4 	bl	800b624 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	2200      	movs	r2, #0
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f002 f9f3 	bl	800bc50 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800986a:	2300      	movs	r3, #0
 800986c:	2200      	movs	r2, #0
 800986e:	210a      	movs	r1, #10
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fbeb 	bl	800a04c <USBH_FindInterface>
 8009876:	4603      	mov	r3, r0
 8009878:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	2bff      	cmp	r3, #255	; 0xff
 800987e:	d002      	beq.n	8009886 <USBH_CDC_InterfaceInit+0x11a>
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d901      	bls.n	800988a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009886:	2302      	movs	r3, #2
 8009888:	e0c2      	b.n	8009a10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	211a      	movs	r1, #26
 8009890:	fb01 f303 	mul.w	r3, r1, r3
 8009894:	4413      	add	r3, r2
 8009896:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	b25b      	sxtb	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	da16      	bge.n	80098d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	211a      	movs	r1, #26
 80098a8:	fb01 f303 	mul.w	r3, r1, r3
 80098ac:	4413      	add	r3, r2
 80098ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80098b2:	781a      	ldrb	r2, [r3, #0]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	211a      	movs	r1, #26
 80098be:	fb01 f303 	mul.w	r3, r1, r3
 80098c2:	4413      	add	r3, r2
 80098c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80098c8:	881a      	ldrh	r2, [r3, #0]
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	835a      	strh	r2, [r3, #26]
 80098ce:	e015      	b.n	80098fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	211a      	movs	r1, #26
 80098d6:	fb01 f303 	mul.w	r3, r1, r3
 80098da:	4413      	add	r3, r2
 80098dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80098e0:	781a      	ldrb	r2, [r3, #0]
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	211a      	movs	r1, #26
 80098ec:	fb01 f303 	mul.w	r3, r1, r3
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80098f6:	881a      	ldrh	r2, [r3, #0]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	211a      	movs	r1, #26
 8009902:	fb01 f303 	mul.w	r3, r1, r3
 8009906:	4413      	add	r3, r2
 8009908:	f203 3356 	addw	r3, r3, #854	; 0x356
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	b25b      	sxtb	r3, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	da16      	bge.n	8009942 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	211a      	movs	r1, #26
 800991a:	fb01 f303 	mul.w	r3, r1, r3
 800991e:	4413      	add	r3, r2
 8009920:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009924:	781a      	ldrb	r2, [r3, #0]
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	211a      	movs	r1, #26
 8009930:	fb01 f303 	mul.w	r3, r1, r3
 8009934:	4413      	add	r3, r2
 8009936:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800993a:	881a      	ldrh	r2, [r3, #0]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	835a      	strh	r2, [r3, #26]
 8009940:	e015      	b.n	800996e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009942:	7bfb      	ldrb	r3, [r7, #15]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	211a      	movs	r1, #26
 8009948:	fb01 f303 	mul.w	r3, r1, r3
 800994c:	4413      	add	r3, r2
 800994e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009952:	781a      	ldrb	r2, [r3, #0]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	211a      	movs	r1, #26
 800995e:	fb01 f303 	mul.w	r3, r1, r3
 8009962:	4413      	add	r3, r2
 8009964:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009968:	881a      	ldrh	r2, [r3, #0]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	7b9b      	ldrb	r3, [r3, #14]
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f001 fe84 	bl	800b682 <USBH_AllocPipe>
 800997a:	4603      	mov	r3, r0
 800997c:	461a      	mov	r2, r3
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	7bdb      	ldrb	r3, [r3, #15]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 fe7a 	bl	800b682 <USBH_AllocPipe>
 800998e:	4603      	mov	r3, r0
 8009990:	461a      	mov	r2, r3
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	7b59      	ldrb	r1, [r3, #13]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	7b98      	ldrb	r0, [r3, #14]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	8b12      	ldrh	r2, [r2, #24]
 80099ae:	9202      	str	r2, [sp, #8]
 80099b0:	2202      	movs	r2, #2
 80099b2:	9201      	str	r2, [sp, #4]
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	4623      	mov	r3, r4
 80099b8:	4602      	mov	r2, r0
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f001 fe32 	bl	800b624 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	7b19      	ldrb	r1, [r3, #12]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	7bd8      	ldrb	r0, [r3, #15]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	8b52      	ldrh	r2, [r2, #26]
 80099d8:	9202      	str	r2, [sp, #8]
 80099da:	2202      	movs	r2, #2
 80099dc:	9201      	str	r2, [sp, #4]
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	4623      	mov	r3, r4
 80099e2:	4602      	mov	r2, r0
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 fe1d 	bl	800b624 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	7b5b      	ldrb	r3, [r3, #13]
 80099f6:	2200      	movs	r2, #0
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f002 f928 	bl	800bc50 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	7b1b      	ldrb	r3, [r3, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f002 f921 	bl	800bc50 <USBH_LL_SetToggle>

  return USBH_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd90      	pop	{r4, r7, pc}

08009a18 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00e      	beq.n	8009a50 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f001 fe12 	bl	800b662 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f001 fe3d 	bl	800b6c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	7b1b      	ldrb	r3, [r3, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00e      	beq.n	8009a76 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	7b1b      	ldrb	r3, [r3, #12]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 fdff 	bl	800b662 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	7b1b      	ldrb	r3, [r3, #12]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f001 fe2a 	bl	800b6c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	7b5b      	ldrb	r3, [r3, #13]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00e      	beq.n	8009a9c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	7b5b      	ldrb	r3, [r3, #13]
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f001 fdec 	bl	800b662 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	7b5b      	ldrb	r3, [r3, #13]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f001 fe17 	bl	800b6c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00b      	beq.n	8009ac0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f002 f987 	bl	800bdc4 <free>
    phost->pActiveClass->pData = 0U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009abc:	2200      	movs	r2, #0
 8009abe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3340      	adds	r3, #64	; 0x40
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f8b1 	bl	8009c4a <GetLineCoding>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009aec:	7afb      	ldrb	r3, [r7, #11]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d105      	bne.n	8009afe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009af8:	2102      	movs	r1, #2
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009afe:	7afb      	ldrb	r3, [r7, #11]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b10:	2301      	movs	r3, #1
 8009b12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009b28:	2b04      	cmp	r3, #4
 8009b2a:	d877      	bhi.n	8009c1c <USBH_CDC_Process+0x114>
 8009b2c:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <USBH_CDC_Process+0x2c>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b49 	.word	0x08009b49
 8009b38:	08009b4f 	.word	0x08009b4f
 8009b3c:	08009b7f 	.word	0x08009b7f
 8009b40:	08009bf3 	.word	0x08009bf3
 8009b44:	08009c01 	.word	0x08009c01
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b4c:	e06d      	b.n	8009c2a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f897 	bl	8009c88 <SetLineCoding>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009b5e:	7bbb      	ldrb	r3, [r7, #14]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d104      	bne.n	8009b6e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	2202      	movs	r2, #2
 8009b68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009b6c:	e058      	b.n	8009c20 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d055      	beq.n	8009c20 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2204      	movs	r2, #4
 8009b78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009b7c:	e050      	b.n	8009c20 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	3340      	adds	r3, #64	; 0x40
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f860 	bl	8009c4a <GetLineCoding>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d126      	bne.n	8009be2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ba6:	791b      	ldrb	r3, [r3, #4]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d13b      	bne.n	8009c24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bb6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d133      	bne.n	8009c24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bc6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d12b      	bne.n	8009c24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bd4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d124      	bne.n	8009c24 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f958 	bl	8009e90 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009be0:	e020      	b.n	8009c24 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d01d      	beq.n	8009c24 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2204      	movs	r2, #4
 8009bec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009bf0:	e018      	b.n	8009c24 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f867 	bl	8009cc6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f8da 	bl	8009db2 <CDC_ProcessReception>
      break;
 8009bfe:	e014      	b.n	8009c2a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009c00:	2100      	movs	r1, #0
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 ffef 	bl	800abe6 <USBH_ClrFeature>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009c0c:	7bbb      	ldrb	r3, [r7, #14]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10a      	bne.n	8009c28 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009c1a:	e005      	b.n	8009c28 <USBH_CDC_Process+0x120>

    default:
      break;
 8009c1c:	bf00      	nop
 8009c1e:	e004      	b.n	8009c2a <USBH_CDC_Process+0x122>
      break;
 8009c20:	bf00      	nop
 8009c22:	e002      	b.n	8009c2a <USBH_CDC_Process+0x122>
      break;
 8009c24:	bf00      	nop
 8009c26:	e000      	b.n	8009c2a <USBH_CDC_Process+0x122>
      break;
 8009c28:	bf00      	nop

  }

  return status;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	22a1      	movs	r2, #161	; 0xa1
 8009c58:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2221      	movs	r2, #33	; 0x21
 8009c5e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2207      	movs	r2, #7
 8009c70:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2207      	movs	r2, #7
 8009c76:	4619      	mov	r1, r3
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f001 fa81 	bl	800b180 <USBH_CtlReq>
 8009c7e:	4603      	mov	r3, r0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2221      	movs	r2, #33	; 0x21
 8009c96:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2207      	movs	r2, #7
 8009cae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	2207      	movs	r2, #7
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 fa62 	bl	800b180 <USBH_CtlReq>
 8009cbc:	4603      	mov	r3, r0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b086      	sub	sp, #24
 8009cca:	af02      	add	r7, sp, #8
 8009ccc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cd4:	69db      	ldr	r3, [r3, #28]
 8009cd6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d002      	beq.n	8009cec <CDC_ProcessTransmission+0x26>
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d023      	beq.n	8009d32 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009cea:	e05e      	b.n	8009daa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	8b12      	ldrh	r2, [r2, #24]
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d90b      	bls.n	8009d10 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	69d9      	ldr	r1, [r3, #28]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	8b1a      	ldrh	r2, [r3, #24]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	7b5b      	ldrb	r3, [r3, #13]
 8009d04:	2001      	movs	r0, #1
 8009d06:	9000      	str	r0, [sp, #0]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f001 fc48 	bl	800b59e <USBH_BulkSendData>
 8009d0e:	e00b      	b.n	8009d28 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	7b5b      	ldrb	r3, [r3, #13]
 8009d1e:	2001      	movs	r0, #1
 8009d20:	9000      	str	r0, [sp, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f001 fc3b 	bl	800b59e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009d30:	e03b      	b.n	8009daa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	7b5b      	ldrb	r3, [r3, #13]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f001 ff5f 	bl	800bbfc <USBH_LL_GetURBState>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009d42:	7afb      	ldrb	r3, [r7, #11]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d128      	bne.n	8009d9a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	8b12      	ldrh	r2, [r2, #24]
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d90e      	bls.n	8009d72 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	8b12      	ldrh	r2, [r2, #24]
 8009d5c:	1a9a      	subs	r2, r3, r2
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	8b12      	ldrh	r2, [r2, #24]
 8009d6a:	441a      	add	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	61da      	str	r2, [r3, #28]
 8009d70:	e002      	b.n	8009d78 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d004      	beq.n	8009d8a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009d88:	e00e      	b.n	8009da8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f868 	bl	8009e68 <USBH_CDC_TransmitCallback>
      break;
 8009d98:	e006      	b.n	8009da8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009d9a:	7afb      	ldrb	r3, [r7, #11]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d103      	bne.n	8009da8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009da8:	bf00      	nop
  }
}
 8009daa:	bf00      	nop
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b086      	sub	sp, #24
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d002      	beq.n	8009dd8 <CDC_ProcessReception+0x26>
 8009dd2:	2b04      	cmp	r3, #4
 8009dd4:	d00e      	beq.n	8009df4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009dd6:	e043      	b.n	8009e60 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	6a19      	ldr	r1, [r3, #32]
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	8b5a      	ldrh	r2, [r3, #26]
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	7b1b      	ldrb	r3, [r3, #12]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 fbff 	bl	800b5e8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	2204      	movs	r2, #4
 8009dee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009df2:	e035      	b.n	8009e60 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	7b1b      	ldrb	r3, [r3, #12]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f001 fefe 	bl	800bbfc <USBH_LL_GetURBState>
 8009e00:	4603      	mov	r3, r0
 8009e02:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009e04:	7cfb      	ldrb	r3, [r7, #19]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d129      	bne.n	8009e5e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	7b1b      	ldrb	r3, [r3, #12]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 fe61 	bl	800bad8 <USBH_LL_GetLastXferSize>
 8009e16:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d016      	beq.n	8009e50 <CDC_ProcessReception+0x9e>
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	8b5b      	ldrh	r3, [r3, #26]
 8009e26:	461a      	mov	r2, r3
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d910      	bls.n	8009e50 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	1ad2      	subs	r2, r2, r3
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	6a1a      	ldr	r2, [r3, #32]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	441a      	add	r2, r3
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2203      	movs	r2, #3
 8009e4a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009e4e:	e006      	b.n	8009e5e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f80f 	bl	8009e7c <USBH_CDC_ReceiveCallback>
      break;
 8009e5e:	bf00      	nop
  }
}
 8009e60:	bf00      	nop
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009eb8:	2302      	movs	r3, #2
 8009eba:	e029      	b.n	8009f10 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	79fa      	ldrb	r2, [r7, #7]
 8009ec0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f000 f81f 	bl	8009f18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d003      	beq.n	8009f08 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f001 fd31 	bl	800b970 <USBH_LL_Init>

  return USBH_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f24:	2300      	movs	r3, #0
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	e009      	b.n	8009f3e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	33e0      	adds	r3, #224	; 0xe0
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	2200      	movs	r2, #0
 8009f36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	60fb      	str	r3, [r7, #12]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b0f      	cmp	r3, #15
 8009f42:	d9f2      	bls.n	8009f2a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f44:	2300      	movs	r3, #0
 8009f46:	60fb      	str	r3, [r7, #12]
 8009f48:	e009      	b.n	8009f5e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f64:	d3f1      	bcc.n	8009f4a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2240      	movs	r2, #64	; 0x40
 8009f8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d016      	beq.n	800a002 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10e      	bne.n	8009ffc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fe4:	1c59      	adds	r1, r3, #1
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	33de      	adds	r3, #222	; 0xde
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]
 8009ffa:	e004      	b.n	800a006 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	73fb      	strb	r3, [r7, #15]
 800a000:	e001      	b.n	800a006 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a002:	2302      	movs	r3, #2
 800a004:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a006:	7bfb      	ldrb	r3, [r7, #15]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a02a:	78fa      	ldrb	r2, [r7, #3]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d204      	bcs.n	800a03a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	78fa      	ldrb	r2, [r7, #3]
 800a034:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a038:	e001      	b.n	800a03e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a03a:	2302      	movs	r3, #2
 800a03c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	4608      	mov	r0, r1
 800a056:	4611      	mov	r1, r2
 800a058:	461a      	mov	r2, r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	70fb      	strb	r3, [r7, #3]
 800a05e:	460b      	mov	r3, r1
 800a060:	70bb      	strb	r3, [r7, #2]
 800a062:	4613      	mov	r3, r2
 800a064:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a074:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a076:	e025      	b.n	800a0c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a078:	7dfb      	ldrb	r3, [r7, #23]
 800a07a:	221a      	movs	r2, #26
 800a07c:	fb02 f303 	mul.w	r3, r2, r3
 800a080:	3308      	adds	r3, #8
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4413      	add	r3, r2
 800a086:	3302      	adds	r3, #2
 800a088:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	795b      	ldrb	r3, [r3, #5]
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	429a      	cmp	r2, r3
 800a092:	d002      	beq.n	800a09a <USBH_FindInterface+0x4e>
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	2bff      	cmp	r3, #255	; 0xff
 800a098:	d111      	bne.n	800a0be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a09e:	78ba      	ldrb	r2, [r7, #2]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d002      	beq.n	800a0aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a0a4:	78bb      	ldrb	r3, [r7, #2]
 800a0a6:	2bff      	cmp	r3, #255	; 0xff
 800a0a8:	d109      	bne.n	800a0be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a0ae:	787a      	ldrb	r2, [r7, #1]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d002      	beq.n	800a0ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a0b4:	787b      	ldrb	r3, [r7, #1]
 800a0b6:	2bff      	cmp	r3, #255	; 0xff
 800a0b8:	d101      	bne.n	800a0be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
 800a0bc:	e006      	b.n	800a0cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d9d6      	bls.n	800a078 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a0ca:	23ff      	movs	r3, #255	; 0xff
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	371c      	adds	r7, #28
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f001 fc81 	bl	800b9e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f001 fd9a 	bl	800bc22 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b088      	sub	sp, #32
 800a0fc:	af04      	add	r7, sp, #16
 800a0fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a100:	2302      	movs	r3, #2
 800a102:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b01      	cmp	r3, #1
 800a112:	d102      	bne.n	800a11a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2203      	movs	r2, #3
 800a118:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b0b      	cmp	r3, #11
 800a122:	f200 81be 	bhi.w	800a4a2 <USBH_Process+0x3aa>
 800a126:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <USBH_Process+0x34>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a15d 	.word	0x0800a15d
 800a130:	0800a18f 	.word	0x0800a18f
 800a134:	0800a1f7 	.word	0x0800a1f7
 800a138:	0800a43d 	.word	0x0800a43d
 800a13c:	0800a4a3 	.word	0x0800a4a3
 800a140:	0800a29b 	.word	0x0800a29b
 800a144:	0800a3e3 	.word	0x0800a3e3
 800a148:	0800a2d1 	.word	0x0800a2d1
 800a14c:	0800a2f1 	.word	0x0800a2f1
 800a150:	0800a311 	.word	0x0800a311
 800a154:	0800a355 	.word	0x0800a355
 800a158:	0800a425 	.word	0x0800a425
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 819e 	beq.w	800a4a6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a170:	20c8      	movs	r0, #200	; 0xc8
 800a172:	f001 fd9d 	bl	800bcb0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f001 fc93 	bl	800baa2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a18c:	e18b      	b.n	800a4a6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a194:	2b01      	cmp	r3, #1
 800a196:	d107      	bne.n	800a1a8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a1a6:	e18d      	b.n	800a4c4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a1ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1b2:	d914      	bls.n	800a1de <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a1ca:	2b03      	cmp	r3, #3
 800a1cc:	d903      	bls.n	800a1d6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	220d      	movs	r2, #13
 800a1d2:	701a      	strb	r2, [r3, #0]
      break;
 800a1d4:	e176      	b.n	800a4c4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	701a      	strb	r2, [r3, #0]
      break;
 800a1dc:	e172      	b.n	800a4c4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a1e4:	f103 020a 	add.w	r2, r3, #10
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a1ee:	200a      	movs	r0, #10
 800a1f0:	f001 fd5e 	bl	800bcb0 <USBH_Delay>
      break;
 800a1f4:	e166      	b.n	800a4c4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d005      	beq.n	800a20c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a206:	2104      	movs	r1, #4
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a20c:	2064      	movs	r0, #100	; 0x64
 800a20e:	f001 fd4f 	bl	800bcb0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f001 fc1e 	bl	800ba54 <USBH_LL_GetSpeed>
 800a218:	4603      	mov	r3, r0
 800a21a:	461a      	mov	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2205      	movs	r2, #5
 800a226:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a228:	2100      	movs	r1, #0
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f001 fa29 	bl	800b682 <USBH_AllocPipe>
 800a230:	4603      	mov	r3, r0
 800a232:	461a      	mov	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a238:	2180      	movs	r1, #128	; 0x80
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f001 fa21 	bl	800b682 <USBH_AllocPipe>
 800a240:	4603      	mov	r3, r0
 800a242:	461a      	mov	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	7919      	ldrb	r1, [r3, #4]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a25c:	b292      	uxth	r2, r2
 800a25e:	9202      	str	r2, [sp, #8]
 800a260:	2200      	movs	r2, #0
 800a262:	9201      	str	r2, [sp, #4]
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	4603      	mov	r3, r0
 800a268:	2280      	movs	r2, #128	; 0x80
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f001 f9da 	bl	800b624 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	7959      	ldrb	r1, [r3, #5]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a284:	b292      	uxth	r2, r2
 800a286:	9202      	str	r2, [sp, #8]
 800a288:	2200      	movs	r2, #0
 800a28a:	9201      	str	r2, [sp, #4]
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	4603      	mov	r3, r0
 800a290:	2200      	movs	r2, #0
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f001 f9c6 	bl	800b624 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a298:	e114      	b.n	800a4c4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f918 	bl	800a4d0 <USBH_HandleEnum>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f040 80fe 	bne.w	800a4aa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d103      	bne.n	800a2c8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2208      	movs	r2, #8
 800a2c4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a2c6:	e0f0      	b.n	800a4aa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2207      	movs	r2, #7
 800a2cc:	701a      	strb	r2, [r3, #0]
      break;
 800a2ce:	e0ec      	b.n	800a4aa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f000 80e9 	beq.w	800a4ae <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2208      	movs	r2, #8
 800a2ec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a2ee:	e0de      	b.n	800a4ae <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fc2c 	bl	800ab58 <USBH_SetCfg>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	f040 80d5 	bne.w	800a4b2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2209      	movs	r2, #9
 800a30c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a30e:	e0d0      	b.n	800a4b2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a316:	f003 0320 	and.w	r3, r3, #32
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d016      	beq.n	800a34c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a31e:	2101      	movs	r1, #1
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fc3c 	bl	800ab9e <USBH_SetFeature>
 800a326:	4603      	mov	r3, r0
 800a328:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a32a:	7bbb      	ldrb	r3, [r7, #14]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	220a      	movs	r2, #10
 800a336:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a338:	e0bd      	b.n	800a4b6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a33a:	7bbb      	ldrb	r3, [r7, #14]
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b03      	cmp	r3, #3
 800a340:	f040 80b9 	bne.w	800a4b6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	220a      	movs	r2, #10
 800a348:	701a      	strb	r2, [r3, #0]
      break;
 800a34a:	e0b4      	b.n	800a4b6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	220a      	movs	r2, #10
 800a350:	701a      	strb	r2, [r3, #0]
      break;
 800a352:	e0b0      	b.n	800a4b6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 80ad 	beq.w	800a4ba <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a368:	2300      	movs	r3, #0
 800a36a:	73fb      	strb	r3, [r7, #15]
 800a36c:	e016      	b.n	800a39c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a36e:	7bfa      	ldrb	r2, [r7, #15]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	32de      	adds	r2, #222	; 0xde
 800a374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a378:	791a      	ldrb	r2, [r3, #4]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a380:	429a      	cmp	r2, r3
 800a382:	d108      	bne.n	800a396 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a384:	7bfa      	ldrb	r2, [r7, #15]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	32de      	adds	r2, #222	; 0xde
 800a38a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a394:	e005      	b.n	800a3a2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a396:	7bfb      	ldrb	r3, [r7, #15]
 800a398:	3301      	adds	r3, #1
 800a39a:	73fb      	strb	r3, [r7, #15]
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d0e5      	beq.n	800a36e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d016      	beq.n	800a3da <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	4798      	blx	r3
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d109      	bne.n	800a3d2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2206      	movs	r2, #6
 800a3c2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3ca:	2103      	movs	r1, #3
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a3d0:	e073      	b.n	800a4ba <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	220d      	movs	r2, #13
 800a3d6:	701a      	strb	r2, [r3, #0]
      break;
 800a3d8:	e06f      	b.n	800a4ba <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	220d      	movs	r2, #13
 800a3de:	701a      	strb	r2, [r3, #0]
      break;
 800a3e0:	e06b      	b.n	800a4ba <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d017      	beq.n	800a41c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	4798      	blx	r3
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a3fc:	7bbb      	ldrb	r3, [r7, #14]
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b00      	cmp	r3, #0
 800a402:	d103      	bne.n	800a40c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	220b      	movs	r2, #11
 800a408:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a40a:	e058      	b.n	800a4be <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a40c:	7bbb      	ldrb	r3, [r7, #14]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b02      	cmp	r3, #2
 800a412:	d154      	bne.n	800a4be <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	220d      	movs	r2, #13
 800a418:	701a      	strb	r2, [r3, #0]
      break;
 800a41a:	e050      	b.n	800a4be <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	220d      	movs	r2, #13
 800a420:	701a      	strb	r2, [r3, #0]
      break;
 800a422:	e04c      	b.n	800a4be <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d049      	beq.n	800a4c2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	4798      	blx	r3
      }
      break;
 800a43a:	e042      	b.n	800a4c2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff fd67 	bl	8009f18 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d009      	beq.n	800a468 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d005      	beq.n	800a47e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a478:	2105      	movs	r1, #5
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b01      	cmp	r3, #1
 800a488:	d107      	bne.n	800a49a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff fe20 	bl	800a0d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a498:	e014      	b.n	800a4c4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f001 faa4 	bl	800b9e8 <USBH_LL_Start>
      break;
 800a4a0:	e010      	b.n	800a4c4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a4a2:	bf00      	nop
 800a4a4:	e00e      	b.n	800a4c4 <USBH_Process+0x3cc>
      break;
 800a4a6:	bf00      	nop
 800a4a8:	e00c      	b.n	800a4c4 <USBH_Process+0x3cc>
      break;
 800a4aa:	bf00      	nop
 800a4ac:	e00a      	b.n	800a4c4 <USBH_Process+0x3cc>
    break;
 800a4ae:	bf00      	nop
 800a4b0:	e008      	b.n	800a4c4 <USBH_Process+0x3cc>
      break;
 800a4b2:	bf00      	nop
 800a4b4:	e006      	b.n	800a4c4 <USBH_Process+0x3cc>
      break;
 800a4b6:	bf00      	nop
 800a4b8:	e004      	b.n	800a4c4 <USBH_Process+0x3cc>
      break;
 800a4ba:	bf00      	nop
 800a4bc:	e002      	b.n	800a4c4 <USBH_Process+0x3cc>
      break;
 800a4be:	bf00      	nop
 800a4c0:	e000      	b.n	800a4c4 <USBH_Process+0x3cc>
      break;
 800a4c2:	bf00      	nop
  }
  return USBH_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop

0800a4d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b088      	sub	sp, #32
 800a4d4:	af04      	add	r7, sp, #16
 800a4d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	785b      	ldrb	r3, [r3, #1]
 800a4e4:	2b07      	cmp	r3, #7
 800a4e6:	f200 81c1 	bhi.w	800a86c <USBH_HandleEnum+0x39c>
 800a4ea:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <USBH_HandleEnum+0x20>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a511 	.word	0x0800a511
 800a4f4:	0800a5cf 	.word	0x0800a5cf
 800a4f8:	0800a639 	.word	0x0800a639
 800a4fc:	0800a6c7 	.word	0x0800a6c7
 800a500:	0800a731 	.word	0x0800a731
 800a504:	0800a7a1 	.word	0x0800a7a1
 800a508:	0800a7e7 	.word	0x0800a7e7
 800a50c:	0800a82d 	.word	0x0800a82d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a510:	2108      	movs	r1, #8
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fa50 	bl	800a9b8 <USBH_Get_DevDesc>
 800a518:	4603      	mov	r3, r0
 800a51a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a51c:	7bbb      	ldrb	r3, [r7, #14]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d130      	bne.n	800a584 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	7919      	ldrb	r1, [r3, #4]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a546:	b292      	uxth	r2, r2
 800a548:	9202      	str	r2, [sp, #8]
 800a54a:	2200      	movs	r2, #0
 800a54c:	9201      	str	r2, [sp, #4]
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	4603      	mov	r3, r0
 800a552:	2280      	movs	r2, #128	; 0x80
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 f865 	bl	800b624 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	7959      	ldrb	r1, [r3, #5]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a56e:	b292      	uxth	r2, r2
 800a570:	9202      	str	r2, [sp, #8]
 800a572:	2200      	movs	r2, #0
 800a574:	9201      	str	r2, [sp, #4]
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	4603      	mov	r3, r0
 800a57a:	2200      	movs	r2, #0
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f001 f851 	bl	800b624 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a582:	e175      	b.n	800a870 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a584:	7bbb      	ldrb	r3, [r7, #14]
 800a586:	2b03      	cmp	r3, #3
 800a588:	f040 8172 	bne.w	800a870 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a592:	3301      	adds	r3, #1
 800a594:	b2da      	uxtb	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d903      	bls.n	800a5ae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	220d      	movs	r2, #13
 800a5aa:	701a      	strb	r2, [r3, #0]
      break;
 800a5ac:	e160      	b.n	800a870 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	795b      	ldrb	r3, [r3, #5]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f001 f885 	bl	800b6c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	791b      	ldrb	r3, [r3, #4]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f001 f87f 	bl	800b6c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	701a      	strb	r2, [r3, #0]
      break;
 800a5cc:	e150      	b.n	800a870 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a5ce:	2112      	movs	r1, #18
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f9f1 	bl	800a9b8 <USBH_Get_DevDesc>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5da:	7bbb      	ldrb	r3, [r7, #14]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d103      	bne.n	800a5e8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a5e6:	e145      	b.n	800a874 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	f040 8142 	bne.w	800a874 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a606:	2b03      	cmp	r3, #3
 800a608:	d903      	bls.n	800a612 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	220d      	movs	r2, #13
 800a60e:	701a      	strb	r2, [r3, #0]
      break;
 800a610:	e130      	b.n	800a874 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	795b      	ldrb	r3, [r3, #5]
 800a616:	4619      	mov	r1, r3
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f001 f853 	bl	800b6c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	791b      	ldrb	r3, [r3, #4]
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f001 f84d 	bl	800b6c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	701a      	strb	r2, [r3, #0]
      break;
 800a636:	e11d      	b.n	800a874 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a638:	2101      	movs	r1, #1
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fa68 	bl	800ab10 <USBH_SetAddress>
 800a640:	4603      	mov	r3, r0
 800a642:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d132      	bne.n	800a6b0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a64a:	2002      	movs	r0, #2
 800a64c:	f001 fb30 	bl	800bcb0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2203      	movs	r2, #3
 800a65c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	7919      	ldrb	r1, [r3, #4]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a672:	b292      	uxth	r2, r2
 800a674:	9202      	str	r2, [sp, #8]
 800a676:	2200      	movs	r2, #0
 800a678:	9201      	str	r2, [sp, #4]
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	4603      	mov	r3, r0
 800a67e:	2280      	movs	r2, #128	; 0x80
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 ffcf 	bl	800b624 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	7959      	ldrb	r1, [r3, #5]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a69a:	b292      	uxth	r2, r2
 800a69c:	9202      	str	r2, [sp, #8]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	9201      	str	r2, [sp, #4]
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 ffbb 	bl	800b624 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a6ae:	e0e3      	b.n	800a878 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	f040 80e0 	bne.w	800a878 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	220d      	movs	r2, #13
 800a6bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	705a      	strb	r2, [r3, #1]
      break;
 800a6c4:	e0d8      	b.n	800a878 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a6c6:	2109      	movs	r1, #9
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f99d 	bl	800aa08 <USBH_Get_CfgDesc>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6d2:	7bbb      	ldrb	r3, [r7, #14]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d103      	bne.n	800a6e0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2204      	movs	r2, #4
 800a6dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a6de:	e0cd      	b.n	800a87c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	f040 80ca 	bne.w	800a87c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	d903      	bls.n	800a70a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	220d      	movs	r2, #13
 800a706:	701a      	strb	r2, [r3, #0]
      break;
 800a708:	e0b8      	b.n	800a87c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	795b      	ldrb	r3, [r3, #5]
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 ffd7 	bl	800b6c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	791b      	ldrb	r3, [r3, #4]
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 ffd1 	bl	800b6c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	701a      	strb	r2, [r3, #0]
      break;
 800a72e:	e0a5      	b.n	800a87c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f965 	bl	800aa08 <USBH_Get_CfgDesc>
 800a73e:	4603      	mov	r3, r0
 800a740:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a742:	7bbb      	ldrb	r3, [r7, #14]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d103      	bne.n	800a750 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2205      	movs	r2, #5
 800a74c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a74e:	e097      	b.n	800a880 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a750:	7bbb      	ldrb	r3, [r7, #14]
 800a752:	2b03      	cmp	r3, #3
 800a754:	f040 8094 	bne.w	800a880 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a75e:	3301      	adds	r3, #1
 800a760:	b2da      	uxtb	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a76e:	2b03      	cmp	r3, #3
 800a770:	d903      	bls.n	800a77a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	220d      	movs	r2, #13
 800a776:	701a      	strb	r2, [r3, #0]
      break;
 800a778:	e082      	b.n	800a880 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	795b      	ldrb	r3, [r3, #5]
 800a77e:	4619      	mov	r1, r3
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 ff9f 	bl	800b6c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	791b      	ldrb	r3, [r3, #4]
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 ff99 	bl	800b6c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	701a      	strb	r2, [r3, #0]
      break;
 800a79e:	e06f      	b.n	800a880 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d019      	beq.n	800a7de <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a7b6:	23ff      	movs	r3, #255	; 0xff
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f949 	bl	800aa50 <USBH_Get_StringDesc>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a7c2:	7bbb      	ldrb	r3, [r7, #14]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d103      	bne.n	800a7d0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2206      	movs	r2, #6
 800a7cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a7ce:	e059      	b.n	800a884 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d156      	bne.n	800a884 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2206      	movs	r2, #6
 800a7da:	705a      	strb	r2, [r3, #1]
      break;
 800a7dc:	e052      	b.n	800a884 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2206      	movs	r2, #6
 800a7e2:	705a      	strb	r2, [r3, #1]
      break;
 800a7e4:	e04e      	b.n	800a884 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d019      	beq.n	800a824 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a7fc:	23ff      	movs	r3, #255	; 0xff
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f926 	bl	800aa50 <USBH_Get_StringDesc>
 800a804:	4603      	mov	r3, r0
 800a806:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d103      	bne.n	800a816 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2207      	movs	r2, #7
 800a812:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a814:	e038      	b.n	800a888 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a816:	7bbb      	ldrb	r3, [r7, #14]
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d135      	bne.n	800a888 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2207      	movs	r2, #7
 800a820:	705a      	strb	r2, [r3, #1]
      break;
 800a822:	e031      	b.n	800a888 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2207      	movs	r2, #7
 800a828:	705a      	strb	r2, [r3, #1]
      break;
 800a82a:	e02d      	b.n	800a888 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a832:	2b00      	cmp	r3, #0
 800a834:	d017      	beq.n	800a866 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a842:	23ff      	movs	r3, #255	; 0xff
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f903 	bl	800aa50 <USBH_Get_StringDesc>
 800a84a:	4603      	mov	r3, r0
 800a84c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d102      	bne.n	800a85a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a858:	e018      	b.n	800a88c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	d115      	bne.n	800a88c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	73fb      	strb	r3, [r7, #15]
      break;
 800a864:	e012      	b.n	800a88c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]
      break;
 800a86a:	e00f      	b.n	800a88c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a86c:	bf00      	nop
 800a86e:	e00e      	b.n	800a88e <USBH_HandleEnum+0x3be>
      break;
 800a870:	bf00      	nop
 800a872:	e00c      	b.n	800a88e <USBH_HandleEnum+0x3be>
      break;
 800a874:	bf00      	nop
 800a876:	e00a      	b.n	800a88e <USBH_HandleEnum+0x3be>
      break;
 800a878:	bf00      	nop
 800a87a:	e008      	b.n	800a88e <USBH_HandleEnum+0x3be>
      break;
 800a87c:	bf00      	nop
 800a87e:	e006      	b.n	800a88e <USBH_HandleEnum+0x3be>
      break;
 800a880:	bf00      	nop
 800a882:	e004      	b.n	800a88e <USBH_HandleEnum+0x3be>
      break;
 800a884:	bf00      	nop
 800a886:	e002      	b.n	800a88e <USBH_HandleEnum+0x3be>
      break;
 800a888:	bf00      	nop
 800a88a:	e000      	b.n	800a88e <USBH_HandleEnum+0x3be>
      break;
 800a88c:	bf00      	nop
  }
  return Status;
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a8aa:	bf00      	nop
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f804 	bl	800a8da <USBH_HandleSof>
}
 800a8d2:	bf00      	nop
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b082      	sub	sp, #8
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b0b      	cmp	r3, #11
 800a8ea:	d10a      	bne.n	800a902 <USBH_HandleSof+0x28>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d005      	beq.n	800a902 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	4798      	blx	r3
  }
}
 800a902:	bf00      	nop
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a91a:	bf00      	nop
}
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a926:	b480      	push	{r7}
 800a928:	b083      	sub	sp, #12
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a936:	bf00      	nop
}
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a942:	b480      	push	{r7}
 800a944:	b083      	sub	sp, #12
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 f844 	bl	800ba1e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	791b      	ldrb	r3, [r3, #4]
 800a99a:	4619      	mov	r1, r3
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fe91 	bl	800b6c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	795b      	ldrb	r3, [r3, #5]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fe8b 	bl	800b6c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a9ca:	78fb      	ldrb	r3, [r7, #3]
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f864 	bl	800aaa6 <USBH_GetDescriptor>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10a      	bne.n	800a9fe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a9f4:	78fa      	ldrb	r2, [r7, #3]
 800a9f6:	b292      	uxth	r2, r2
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	f000 f918 	bl	800ac2e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af02      	add	r7, sp, #8
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	331c      	adds	r3, #28
 800aa18:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aa1a:	887b      	ldrh	r3, [r7, #2]
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa24:	2100      	movs	r1, #0
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f83d 	bl	800aaa6 <USBH_GetDescriptor>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d107      	bne.n	800aa46 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800aa36:	887b      	ldrh	r3, [r7, #2]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	68b9      	ldr	r1, [r7, #8]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f987 	bl	800ad50 <USBH_ParseCfgDesc>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b088      	sub	sp, #32
 800aa54:	af02      	add	r7, sp, #8
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	607a      	str	r2, [r7, #4]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	72fb      	strb	r3, [r7, #11]
 800aa60:	4613      	mov	r3, r2
 800aa62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800aa64:	7afb      	ldrb	r3, [r7, #11]
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aa6c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800aa74:	893b      	ldrh	r3, [r7, #8]
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f000 f812 	bl	800aaa6 <USBH_GetDescriptor>
 800aa82:	4603      	mov	r3, r0
 800aa84:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d107      	bne.n	800aa9c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa92:	893a      	ldrh	r2, [r7, #8]
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 fb24 	bl	800b0e4 <USBH_ParseStringDesc>
  }

  return status;
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3718      	adds	r7, #24
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	607b      	str	r3, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	72fb      	strb	r3, [r7, #11]
 800aab4:	4613      	mov	r3, r2
 800aab6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	789b      	ldrb	r3, [r3, #2]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d11c      	bne.n	800aafa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800aac0:	7afb      	ldrb	r3, [r7, #11]
 800aac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2206      	movs	r2, #6
 800aad0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	893a      	ldrh	r2, [r7, #8]
 800aad6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aad8:	893b      	ldrh	r3, [r7, #8]
 800aada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aae2:	d104      	bne.n	800aaee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f240 4209 	movw	r2, #1033	; 0x409
 800aaea:	829a      	strh	r2, [r3, #20]
 800aaec:	e002      	b.n	800aaf4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	8b3a      	ldrh	r2, [r7, #24]
 800aaf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aafa:	8b3b      	ldrh	r3, [r7, #24]
 800aafc:	461a      	mov	r2, r3
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f000 fb3d 	bl	800b180 <USBH_CtlReq>
 800ab06:	4603      	mov	r3, r0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	789b      	ldrb	r3, [r3, #2]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d10f      	bne.n	800ab44 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2205      	movs	r2, #5
 800ab2e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ab30:	78fb      	ldrb	r3, [r7, #3]
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab44:	2200      	movs	r2, #0
 800ab46:	2100      	movs	r1, #0
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 fb19 	bl	800b180 <USBH_CtlReq>
 800ab4e:	4603      	mov	r3, r0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	789b      	ldrb	r3, [r3, #2]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d10e      	bne.n	800ab8a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2209      	movs	r2, #9
 800ab76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	887a      	ldrh	r2, [r7, #2]
 800ab7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 faf6 	bl	800b180 <USBH_CtlReq>
 800ab94:	4603      	mov	r3, r0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b082      	sub	sp, #8
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	460b      	mov	r3, r1
 800aba8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	789b      	ldrb	r3, [r3, #2]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d10f      	bne.n	800abd2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2203      	movs	r2, #3
 800abbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800abd2:	2200      	movs	r2, #0
 800abd4:	2100      	movs	r1, #0
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fad2 	bl	800b180 <USBH_CtlReq>
 800abdc:	4603      	mov	r3, r0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b082      	sub	sp, #8
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	460b      	mov	r3, r1
 800abf0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	789b      	ldrb	r3, [r3, #2]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d10f      	bne.n	800ac1a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2202      	movs	r2, #2
 800abfe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 faae 	bl	800b180 <USBH_CtlReq>
 800ac24:	4603      	mov	r3, r0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b085      	sub	sp, #20
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	60b9      	str	r1, [r7, #8]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	781a      	ldrb	r2, [r3, #0]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	785a      	ldrb	r2, [r3, #1]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	3302      	adds	r3, #2
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	3303      	adds	r3, #3
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	4313      	orrs	r3, r2
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	791a      	ldrb	r2, [r3, #4]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	795a      	ldrb	r2, [r3, #5]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	799a      	ldrb	r2, [r3, #6]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	79da      	ldrb	r2, [r3, #7]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	79db      	ldrb	r3, [r3, #7]
 800ac8c:	2b20      	cmp	r3, #32
 800ac8e:	dc11      	bgt.n	800acb4 <USBH_ParseDevDesc+0x86>
 800ac90:	2b08      	cmp	r3, #8
 800ac92:	db16      	blt.n	800acc2 <USBH_ParseDevDesc+0x94>
 800ac94:	3b08      	subs	r3, #8
 800ac96:	2201      	movs	r2, #1
 800ac98:	fa02 f303 	lsl.w	r3, r2, r3
 800ac9c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800aca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	bf14      	ite	ne
 800aca8:	2301      	movne	r3, #1
 800acaa:	2300      	moveq	r3, #0
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d102      	bne.n	800acb8 <USBH_ParseDevDesc+0x8a>
 800acb2:	e006      	b.n	800acc2 <USBH_ParseDevDesc+0x94>
 800acb4:	2b40      	cmp	r3, #64	; 0x40
 800acb6:	d104      	bne.n	800acc2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	79da      	ldrb	r2, [r3, #7]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	71da      	strb	r2, [r3, #7]
      break;
 800acc0:	e003      	b.n	800acca <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2240      	movs	r2, #64	; 0x40
 800acc6:	71da      	strb	r2, [r3, #7]
      break;
 800acc8:	bf00      	nop
  }

  if (length > 8U)
 800acca:	88fb      	ldrh	r3, [r7, #6]
 800accc:	2b08      	cmp	r3, #8
 800acce:	d939      	bls.n	800ad44 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	3308      	adds	r3, #8
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	3309      	adds	r3, #9
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	021b      	lsls	r3, r3, #8
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	4313      	orrs	r3, r2
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	330a      	adds	r3, #10
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	b29a      	uxth	r2, r3
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	330b      	adds	r3, #11
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	021b      	lsls	r3, r3, #8
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	4313      	orrs	r3, r2
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	330c      	adds	r3, #12
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	330d      	adds	r3, #13
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	021b      	lsls	r3, r3, #8
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	7b9a      	ldrb	r2, [r3, #14]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	7bda      	ldrb	r2, [r3, #15]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	7c1a      	ldrb	r2, [r3, #16]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	7c5a      	ldrb	r2, [r3, #17]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	745a      	strb	r2, [r3, #17]
  }
}
 800ad44:	bf00      	nop
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b08c      	sub	sp, #48	; 0x30
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ad64:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ad66:	2300      	movs	r3, #0
 800ad68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ad76:	2300      	movs	r3, #0
 800ad78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	781a      	ldrb	r2, [r3, #0]
 800ad84:	6a3b      	ldr	r3, [r7, #32]
 800ad86:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	785a      	ldrb	r2, [r3, #1]
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	3302      	adds	r3, #2
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	3303      	adds	r3, #3
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	021b      	lsls	r3, r3, #8
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	4313      	orrs	r3, r2
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adac:	bf28      	it	cs
 800adae:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	6a3b      	ldr	r3, [r7, #32]
 800adb6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	791a      	ldrb	r2, [r3, #4]
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	795a      	ldrb	r2, [r3, #5]
 800adc4:	6a3b      	ldr	r3, [r7, #32]
 800adc6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	799a      	ldrb	r2, [r3, #6]
 800adcc:	6a3b      	ldr	r3, [r7, #32]
 800adce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	79da      	ldrb	r2, [r3, #7]
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	7a1a      	ldrb	r2, [r3, #8]
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	2b09      	cmp	r3, #9
 800ade6:	d002      	beq.n	800adee <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	2209      	movs	r2, #9
 800adec:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800adee:	88fb      	ldrh	r3, [r7, #6]
 800adf0:	2b09      	cmp	r3, #9
 800adf2:	f240 809d 	bls.w	800af30 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800adf6:	2309      	movs	r3, #9
 800adf8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800adfe:	e081      	b.n	800af04 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae00:	f107 0316 	add.w	r3, r7, #22
 800ae04:	4619      	mov	r1, r3
 800ae06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae08:	f000 f99f 	bl	800b14a <USBH_GetNextDesc>
 800ae0c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	785b      	ldrb	r3, [r3, #1]
 800ae12:	2b04      	cmp	r3, #4
 800ae14:	d176      	bne.n	800af04 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b09      	cmp	r3, #9
 800ae1c:	d002      	beq.n	800ae24 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	2209      	movs	r2, #9
 800ae22:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ae24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae28:	221a      	movs	r2, #26
 800ae2a:	fb02 f303 	mul.w	r3, r2, r3
 800ae2e:	3308      	adds	r3, #8
 800ae30:	6a3a      	ldr	r2, [r7, #32]
 800ae32:	4413      	add	r3, r2
 800ae34:	3302      	adds	r3, #2
 800ae36:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ae38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae3a:	69f8      	ldr	r0, [r7, #28]
 800ae3c:	f000 f87e 	bl	800af3c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ae40:	2300      	movs	r3, #0
 800ae42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ae46:	2300      	movs	r3, #0
 800ae48:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae4a:	e043      	b.n	800aed4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae4c:	f107 0316 	add.w	r3, r7, #22
 800ae50:	4619      	mov	r1, r3
 800ae52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae54:	f000 f979 	bl	800b14a <USBH_GetNextDesc>
 800ae58:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	785b      	ldrb	r3, [r3, #1]
 800ae5e:	2b05      	cmp	r3, #5
 800ae60:	d138      	bne.n	800aed4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	795b      	ldrb	r3, [r3, #5]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d10f      	bne.n	800ae8a <USBH_ParseCfgDesc+0x13a>
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	799b      	ldrb	r3, [r3, #6]
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d10b      	bne.n	800ae8a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	79db      	ldrb	r3, [r3, #7]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10f      	bne.n	800ae9a <USBH_ParseCfgDesc+0x14a>
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b09      	cmp	r3, #9
 800ae80:	d00b      	beq.n	800ae9a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	2209      	movs	r2, #9
 800ae86:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae88:	e007      	b.n	800ae9a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800ae8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b07      	cmp	r3, #7
 800ae90:	d004      	beq.n	800ae9c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	2207      	movs	r2, #7
 800ae96:	701a      	strb	r2, [r3, #0]
 800ae98:	e000      	b.n	800ae9c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae9a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ae9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aea0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aea4:	3201      	adds	r2, #1
 800aea6:	00d2      	lsls	r2, r2, #3
 800aea8:	211a      	movs	r1, #26
 800aeaa:	fb01 f303 	mul.w	r3, r1, r3
 800aeae:	4413      	add	r3, r2
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	6a3a      	ldr	r2, [r7, #32]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800aeba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aebc:	69b9      	ldr	r1, [r7, #24]
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f000 f86b 	bl	800af9a <USBH_ParseEPDesc>
 800aec4:	4603      	mov	r3, r0
 800aec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800aeca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aece:	3301      	adds	r3, #1
 800aed0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	791b      	ldrb	r3, [r3, #4]
 800aed8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aedc:	429a      	cmp	r2, r3
 800aede:	d204      	bcs.n	800aeea <USBH_ParseCfgDesc+0x19a>
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	885a      	ldrh	r2, [r3, #2]
 800aee4:	8afb      	ldrh	r3, [r7, #22]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d8b0      	bhi.n	800ae4c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	791b      	ldrb	r3, [r3, #4]
 800aeee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d201      	bcs.n	800aefa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e01c      	b.n	800af34 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800aefa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aefe:	3301      	adds	r3, #1
 800af00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d805      	bhi.n	800af18 <USBH_ParseCfgDesc+0x1c8>
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	885a      	ldrh	r2, [r3, #2]
 800af10:	8afb      	ldrh	r3, [r7, #22]
 800af12:	429a      	cmp	r2, r3
 800af14:	f63f af74 	bhi.w	800ae00 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	791b      	ldrb	r3, [r3, #4]
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	bf28      	it	cs
 800af20:	2302      	movcs	r3, #2
 800af22:	b2db      	uxtb	r3, r3
 800af24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800af28:	429a      	cmp	r2, r3
 800af2a:	d201      	bcs.n	800af30 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e001      	b.n	800af34 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800af30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800af34:	4618      	mov	r0, r3
 800af36:	3730      	adds	r7, #48	; 0x30
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	781a      	ldrb	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	785a      	ldrb	r2, [r3, #1]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	789a      	ldrb	r2, [r3, #2]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	78da      	ldrb	r2, [r3, #3]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	791a      	ldrb	r2, [r3, #4]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	795a      	ldrb	r2, [r3, #5]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	799a      	ldrb	r2, [r3, #6]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	79da      	ldrb	r2, [r3, #7]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	7a1a      	ldrb	r2, [r3, #8]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	721a      	strb	r2, [r3, #8]
}
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b087      	sub	sp, #28
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	60f8      	str	r0, [r7, #12]
 800afa2:	60b9      	str	r1, [r7, #8]
 800afa4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800afa6:	2300      	movs	r3, #0
 800afa8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	781a      	ldrb	r2, [r3, #0]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	785a      	ldrb	r2, [r3, #1]
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	789a      	ldrb	r2, [r3, #2]
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	78da      	ldrb	r2, [r3, #3]
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3304      	adds	r3, #4
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3305      	adds	r3, #5
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	021b      	lsls	r3, r3, #8
 800afdc:	b29b      	uxth	r3, r3
 800afde:	4313      	orrs	r3, r2
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	799a      	ldrb	r2, [r3, #6]
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	889b      	ldrh	r3, [r3, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d102      	bne.n	800affc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800aff6:	2303      	movs	r3, #3
 800aff8:	75fb      	strb	r3, [r7, #23]
 800affa:	e033      	b.n	800b064 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	889b      	ldrh	r3, [r3, #4]
 800b000:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b004:	f023 0307 	bic.w	r3, r3, #7
 800b008:	b29a      	uxth	r2, r3
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	889b      	ldrh	r3, [r3, #4]
 800b012:	b21a      	sxth	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	3304      	adds	r3, #4
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	b299      	uxth	r1, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3305      	adds	r3, #5
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	b29b      	uxth	r3, r3
 800b024:	021b      	lsls	r3, r3, #8
 800b026:	b29b      	uxth	r3, r3
 800b028:	430b      	orrs	r3, r1
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b030:	2b00      	cmp	r3, #0
 800b032:	d110      	bne.n	800b056 <USBH_ParseEPDesc+0xbc>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3304      	adds	r3, #4
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	b299      	uxth	r1, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3305      	adds	r3, #5
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	b29b      	uxth	r3, r3
 800b044:	021b      	lsls	r3, r3, #8
 800b046:	b29b      	uxth	r3, r3
 800b048:	430b      	orrs	r3, r1
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	b21b      	sxth	r3, r3
 800b04e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b052:	b21b      	sxth	r3, r3
 800b054:	e001      	b.n	800b05a <USBH_ParseEPDesc+0xc0>
 800b056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b05a:	4313      	orrs	r3, r2
 800b05c:	b21b      	sxth	r3, r3
 800b05e:	b29a      	uxth	r2, r3
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d116      	bne.n	800b09c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	78db      	ldrb	r3, [r3, #3]
 800b072:	f003 0303 	and.w	r3, r3, #3
 800b076:	2b01      	cmp	r3, #1
 800b078:	d005      	beq.n	800b086 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	78db      	ldrb	r3, [r3, #3]
 800b07e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b082:	2b03      	cmp	r3, #3
 800b084:	d127      	bne.n	800b0d6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	799b      	ldrb	r3, [r3, #6]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <USBH_ParseEPDesc+0xfc>
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	799b      	ldrb	r3, [r3, #6]
 800b092:	2b10      	cmp	r3, #16
 800b094:	d91f      	bls.n	800b0d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b096:	2303      	movs	r3, #3
 800b098:	75fb      	strb	r3, [r7, #23]
 800b09a:	e01c      	b.n	800b0d6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	78db      	ldrb	r3, [r3, #3]
 800b0a0:	f003 0303 	and.w	r3, r3, #3
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d10a      	bne.n	800b0be <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	799b      	ldrb	r3, [r3, #6]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d003      	beq.n	800b0b8 <USBH_ParseEPDesc+0x11e>
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	799b      	ldrb	r3, [r3, #6]
 800b0b4:	2b10      	cmp	r3, #16
 800b0b6:	d90e      	bls.n	800b0d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	75fb      	strb	r3, [r7, #23]
 800b0bc:	e00b      	b.n	800b0d6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	78db      	ldrb	r3, [r3, #3]
 800b0c2:	f003 0303 	and.w	r3, r3, #3
 800b0c6:	2b03      	cmp	r3, #3
 800b0c8:	d105      	bne.n	800b0d6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	799b      	ldrb	r3, [r3, #6]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b0d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	371c      	adds	r7, #28
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	2b03      	cmp	r3, #3
 800b0fa:	d120      	bne.n	800b13e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	1e9a      	subs	r2, r3, #2
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	4293      	cmp	r3, r2
 800b106:	bf28      	it	cs
 800b108:	4613      	movcs	r3, r2
 800b10a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	3302      	adds	r3, #2
 800b110:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b112:	2300      	movs	r3, #0
 800b114:	82fb      	strh	r3, [r7, #22]
 800b116:	e00b      	b.n	800b130 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b118:	8afb      	ldrh	r3, [r7, #22]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	4413      	add	r3, r2
 800b11e:	781a      	ldrb	r2, [r3, #0]
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	3301      	adds	r3, #1
 800b128:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b12a:	8afb      	ldrh	r3, [r7, #22]
 800b12c:	3302      	adds	r3, #2
 800b12e:	82fb      	strh	r3, [r7, #22]
 800b130:	8afa      	ldrh	r2, [r7, #22]
 800b132:	8abb      	ldrh	r3, [r7, #20]
 800b134:	429a      	cmp	r2, r3
 800b136:	d3ef      	bcc.n	800b118 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2200      	movs	r2, #0
 800b13c:	701a      	strb	r2, [r3, #0]
  }
}
 800b13e:	bf00      	nop
 800b140:	371c      	adds	r7, #28
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b085      	sub	sp, #20
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	881a      	ldrh	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	4413      	add	r3, r2
 800b160:	b29a      	uxth	r2, r3
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4413      	add	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b172:	68fb      	ldr	r3, [r7, #12]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	4613      	mov	r3, r2
 800b18c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b18e:	2301      	movs	r3, #1
 800b190:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	789b      	ldrb	r3, [r3, #2]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d002      	beq.n	800b1a0 <USBH_CtlReq+0x20>
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d00f      	beq.n	800b1be <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b19e:	e027      	b.n	800b1f0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	88fa      	ldrh	r2, [r7, #6]
 800b1aa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2202      	movs	r2, #2
 800b1b6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b1bc:	e018      	b.n	800b1f0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f000 f81c 	bl	800b1fc <USBH_HandleControl>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d002      	beq.n	800b1d4 <USBH_CtlReq+0x54>
 800b1ce:	7dfb      	ldrb	r3, [r7, #23]
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d106      	bne.n	800b1e2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	761a      	strb	r2, [r3, #24]
      break;
 800b1e0:	e005      	b.n	800b1ee <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d102      	bne.n	800b1ee <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	709a      	strb	r2, [r3, #2]
      break;
 800b1ee:	bf00      	nop
  }
  return status;
 800b1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af02      	add	r7, sp, #8
 800b202:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b204:	2301      	movs	r3, #1
 800b206:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b208:	2300      	movs	r3, #0
 800b20a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	7e1b      	ldrb	r3, [r3, #24]
 800b210:	3b01      	subs	r3, #1
 800b212:	2b0a      	cmp	r3, #10
 800b214:	f200 8156 	bhi.w	800b4c4 <USBH_HandleControl+0x2c8>
 800b218:	a201      	add	r2, pc, #4	; (adr r2, 800b220 <USBH_HandleControl+0x24>)
 800b21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21e:	bf00      	nop
 800b220:	0800b24d 	.word	0x0800b24d
 800b224:	0800b267 	.word	0x0800b267
 800b228:	0800b2d1 	.word	0x0800b2d1
 800b22c:	0800b2f7 	.word	0x0800b2f7
 800b230:	0800b32f 	.word	0x0800b32f
 800b234:	0800b359 	.word	0x0800b359
 800b238:	0800b3ab 	.word	0x0800b3ab
 800b23c:	0800b3cd 	.word	0x0800b3cd
 800b240:	0800b409 	.word	0x0800b409
 800b244:	0800b42f 	.word	0x0800b42f
 800b248:	0800b46d 	.word	0x0800b46d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f103 0110 	add.w	r1, r3, #16
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	795b      	ldrb	r3, [r3, #5]
 800b256:	461a      	mov	r2, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f943 	bl	800b4e4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2202      	movs	r2, #2
 800b262:	761a      	strb	r2, [r3, #24]
      break;
 800b264:	e139      	b.n	800b4da <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	795b      	ldrb	r3, [r3, #5]
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fcc5 	bl	800bbfc <USBH_LL_GetURBState>
 800b272:	4603      	mov	r3, r0
 800b274:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b276:	7bbb      	ldrb	r3, [r7, #14]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d11e      	bne.n	800b2ba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	7c1b      	ldrb	r3, [r3, #16]
 800b280:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b284:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	8adb      	ldrh	r3, [r3, #22]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b28e:	7b7b      	ldrb	r3, [r7, #13]
 800b290:	2b80      	cmp	r3, #128	; 0x80
 800b292:	d103      	bne.n	800b29c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2203      	movs	r2, #3
 800b298:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b29a:	e115      	b.n	800b4c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2205      	movs	r2, #5
 800b2a0:	761a      	strb	r2, [r3, #24]
      break;
 800b2a2:	e111      	b.n	800b4c8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b2a4:	7b7b      	ldrb	r3, [r7, #13]
 800b2a6:	2b80      	cmp	r3, #128	; 0x80
 800b2a8:	d103      	bne.n	800b2b2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2209      	movs	r2, #9
 800b2ae:	761a      	strb	r2, [r3, #24]
      break;
 800b2b0:	e10a      	b.n	800b4c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2207      	movs	r2, #7
 800b2b6:	761a      	strb	r2, [r3, #24]
      break;
 800b2b8:	e106      	b.n	800b4c8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b2ba:	7bbb      	ldrb	r3, [r7, #14]
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	d003      	beq.n	800b2c8 <USBH_HandleControl+0xcc>
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	f040 8100 	bne.w	800b4c8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	220b      	movs	r2, #11
 800b2cc:	761a      	strb	r2, [r3, #24]
      break;
 800b2ce:	e0fb      	b.n	800b4c8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6899      	ldr	r1, [r3, #8]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	899a      	ldrh	r2, [r3, #12]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	791b      	ldrb	r3, [r3, #4]
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f93a 	bl	800b562 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2204      	movs	r2, #4
 800b2f2:	761a      	strb	r2, [r3, #24]
      break;
 800b2f4:	e0f1      	b.n	800b4da <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	791b      	ldrb	r3, [r3, #4]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fc7d 	bl	800bbfc <USBH_LL_GetURBState>
 800b302:	4603      	mov	r3, r0
 800b304:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b306:	7bbb      	ldrb	r3, [r7, #14]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d102      	bne.n	800b312 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2209      	movs	r2, #9
 800b310:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b312:	7bbb      	ldrb	r3, [r7, #14]
 800b314:	2b05      	cmp	r3, #5
 800b316:	d102      	bne.n	800b31e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b318:	2303      	movs	r3, #3
 800b31a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b31c:	e0d6      	b.n	800b4cc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b31e:	7bbb      	ldrb	r3, [r7, #14]
 800b320:	2b04      	cmp	r3, #4
 800b322:	f040 80d3 	bne.w	800b4cc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	220b      	movs	r2, #11
 800b32a:	761a      	strb	r2, [r3, #24]
      break;
 800b32c:	e0ce      	b.n	800b4cc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6899      	ldr	r1, [r3, #8]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	899a      	ldrh	r2, [r3, #12]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	795b      	ldrb	r3, [r3, #5]
 800b33a:	2001      	movs	r0, #1
 800b33c:	9000      	str	r0, [sp, #0]
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f8ea 	bl	800b518 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2206      	movs	r2, #6
 800b354:	761a      	strb	r2, [r3, #24]
      break;
 800b356:	e0c0      	b.n	800b4da <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	795b      	ldrb	r3, [r3, #5]
 800b35c:	4619      	mov	r1, r3
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fc4c 	bl	800bbfc <USBH_LL_GetURBState>
 800b364:	4603      	mov	r3, r0
 800b366:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b368:	7bbb      	ldrb	r3, [r7, #14]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d103      	bne.n	800b376 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2207      	movs	r2, #7
 800b372:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b374:	e0ac      	b.n	800b4d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b376:	7bbb      	ldrb	r3, [r7, #14]
 800b378:	2b05      	cmp	r3, #5
 800b37a:	d105      	bne.n	800b388 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	220c      	movs	r2, #12
 800b380:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b382:	2303      	movs	r3, #3
 800b384:	73fb      	strb	r3, [r7, #15]
      break;
 800b386:	e0a3      	b.n	800b4d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d103      	bne.n	800b396 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2205      	movs	r2, #5
 800b392:	761a      	strb	r2, [r3, #24]
      break;
 800b394:	e09c      	b.n	800b4d0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b396:	7bbb      	ldrb	r3, [r7, #14]
 800b398:	2b04      	cmp	r3, #4
 800b39a:	f040 8099 	bne.w	800b4d0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	220b      	movs	r2, #11
 800b3a2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b3a8:	e092      	b.n	800b4d0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	791b      	ldrb	r3, [r3, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f8d5 	bl	800b562 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2208      	movs	r2, #8
 800b3c8:	761a      	strb	r2, [r3, #24]

      break;
 800b3ca:	e086      	b.n	800b4da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	791b      	ldrb	r3, [r3, #4]
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fc12 	bl	800bbfc <USBH_LL_GetURBState>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b3dc:	7bbb      	ldrb	r3, [r7, #14]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d105      	bne.n	800b3ee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	220d      	movs	r2, #13
 800b3e6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b3ec:	e072      	b.n	800b4d4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b3ee:	7bbb      	ldrb	r3, [r7, #14]
 800b3f0:	2b04      	cmp	r3, #4
 800b3f2:	d103      	bne.n	800b3fc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	220b      	movs	r2, #11
 800b3f8:	761a      	strb	r2, [r3, #24]
      break;
 800b3fa:	e06b      	b.n	800b4d4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b3fc:	7bbb      	ldrb	r3, [r7, #14]
 800b3fe:	2b05      	cmp	r3, #5
 800b400:	d168      	bne.n	800b4d4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b402:	2303      	movs	r3, #3
 800b404:	73fb      	strb	r3, [r7, #15]
      break;
 800b406:	e065      	b.n	800b4d4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	795b      	ldrb	r3, [r3, #5]
 800b40c:	2201      	movs	r2, #1
 800b40e:	9200      	str	r2, [sp, #0]
 800b410:	2200      	movs	r2, #0
 800b412:	2100      	movs	r1, #0
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 f87f 	bl	800b518 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b420:	b29a      	uxth	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	220a      	movs	r2, #10
 800b42a:	761a      	strb	r2, [r3, #24]
      break;
 800b42c:	e055      	b.n	800b4da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	795b      	ldrb	r3, [r3, #5]
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fbe1 	bl	800bbfc <USBH_LL_GetURBState>
 800b43a:	4603      	mov	r3, r0
 800b43c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b43e:	7bbb      	ldrb	r3, [r7, #14]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d105      	bne.n	800b450 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	220d      	movs	r2, #13
 800b44c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b44e:	e043      	b.n	800b4d8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	2b02      	cmp	r3, #2
 800b454:	d103      	bne.n	800b45e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2209      	movs	r2, #9
 800b45a:	761a      	strb	r2, [r3, #24]
      break;
 800b45c:	e03c      	b.n	800b4d8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	2b04      	cmp	r3, #4
 800b462:	d139      	bne.n	800b4d8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	220b      	movs	r2, #11
 800b468:	761a      	strb	r2, [r3, #24]
      break;
 800b46a:	e035      	b.n	800b4d8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	7e5b      	ldrb	r3, [r3, #25]
 800b470:	3301      	adds	r3, #1
 800b472:	b2da      	uxtb	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	765a      	strb	r2, [r3, #25]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	7e5b      	ldrb	r3, [r3, #25]
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d806      	bhi.n	800b48e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b48c:	e025      	b.n	800b4da <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b494:	2106      	movs	r1, #6
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	795b      	ldrb	r3, [r3, #5]
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 f90c 	bl	800b6c4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	791b      	ldrb	r3, [r3, #4]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f906 	bl	800b6c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b4be:	2302      	movs	r3, #2
 800b4c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b4c2:	e00a      	b.n	800b4da <USBH_HandleControl+0x2de>

    default:
      break;
 800b4c4:	bf00      	nop
 800b4c6:	e008      	b.n	800b4da <USBH_HandleControl+0x2de>
      break;
 800b4c8:	bf00      	nop
 800b4ca:	e006      	b.n	800b4da <USBH_HandleControl+0x2de>
      break;
 800b4cc:	bf00      	nop
 800b4ce:	e004      	b.n	800b4da <USBH_HandleControl+0x2de>
      break;
 800b4d0:	bf00      	nop
 800b4d2:	e002      	b.n	800b4da <USBH_HandleControl+0x2de>
      break;
 800b4d4:	bf00      	nop
 800b4d6:	e000      	b.n	800b4da <USBH_HandleControl+0x2de>
      break;
 800b4d8:	bf00      	nop
  }

  return status;
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b088      	sub	sp, #32
 800b4e8:	af04      	add	r7, sp, #16
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b4f2:	79f9      	ldrb	r1, [r7, #7]
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	9303      	str	r3, [sp, #12]
 800b4f8:	2308      	movs	r3, #8
 800b4fa:	9302      	str	r3, [sp, #8]
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	9301      	str	r3, [sp, #4]
 800b500:	2300      	movs	r3, #0
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	2300      	movs	r3, #0
 800b506:	2200      	movs	r2, #0
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 fb46 	bl	800bb9a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af04      	add	r7, sp, #16
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	4611      	mov	r1, r2
 800b524:	461a      	mov	r2, r3
 800b526:	460b      	mov	r3, r1
 800b528:	80fb      	strh	r3, [r7, #6]
 800b52a:	4613      	mov	r3, r2
 800b52c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b534:	2b00      	cmp	r3, #0
 800b536:	d001      	beq.n	800b53c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b538:	2300      	movs	r3, #0
 800b53a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b53c:	7979      	ldrb	r1, [r7, #5]
 800b53e:	7e3b      	ldrb	r3, [r7, #24]
 800b540:	9303      	str	r3, [sp, #12]
 800b542:	88fb      	ldrh	r3, [r7, #6]
 800b544:	9302      	str	r3, [sp, #8]
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	9301      	str	r3, [sp, #4]
 800b54a:	2301      	movs	r3, #1
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	2300      	movs	r3, #0
 800b550:	2200      	movs	r2, #0
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f000 fb21 	bl	800bb9a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b088      	sub	sp, #32
 800b566:	af04      	add	r7, sp, #16
 800b568:	60f8      	str	r0, [r7, #12]
 800b56a:	60b9      	str	r1, [r7, #8]
 800b56c:	4611      	mov	r1, r2
 800b56e:	461a      	mov	r2, r3
 800b570:	460b      	mov	r3, r1
 800b572:	80fb      	strh	r3, [r7, #6]
 800b574:	4613      	mov	r3, r2
 800b576:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b578:	7979      	ldrb	r1, [r7, #5]
 800b57a:	2300      	movs	r3, #0
 800b57c:	9303      	str	r3, [sp, #12]
 800b57e:	88fb      	ldrh	r3, [r7, #6]
 800b580:	9302      	str	r3, [sp, #8]
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	2301      	movs	r3, #1
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	2300      	movs	r3, #0
 800b58c:	2201      	movs	r2, #1
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f000 fb03 	bl	800bb9a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b594:	2300      	movs	r3, #0

}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b088      	sub	sp, #32
 800b5a2:	af04      	add	r7, sp, #16
 800b5a4:	60f8      	str	r0, [r7, #12]
 800b5a6:	60b9      	str	r1, [r7, #8]
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	80fb      	strh	r3, [r7, #6]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5c2:	7979      	ldrb	r1, [r7, #5]
 800b5c4:	7e3b      	ldrb	r3, [r7, #24]
 800b5c6:	9303      	str	r3, [sp, #12]
 800b5c8:	88fb      	ldrh	r3, [r7, #6]
 800b5ca:	9302      	str	r3, [sp, #8]
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	9301      	str	r3, [sp, #4]
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f000 fade 	bl	800bb9a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af04      	add	r7, sp, #16
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	80fb      	strh	r3, [r7, #6]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5fe:	7979      	ldrb	r1, [r7, #5]
 800b600:	2300      	movs	r3, #0
 800b602:	9303      	str	r3, [sp, #12]
 800b604:	88fb      	ldrh	r3, [r7, #6]
 800b606:	9302      	str	r3, [sp, #8]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	9301      	str	r3, [sp, #4]
 800b60c:	2301      	movs	r3, #1
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	2302      	movs	r3, #2
 800b612:	2201      	movs	r2, #1
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 fac0 	bl	800bb9a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b086      	sub	sp, #24
 800b628:	af04      	add	r7, sp, #16
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	4608      	mov	r0, r1
 800b62e:	4611      	mov	r1, r2
 800b630:	461a      	mov	r2, r3
 800b632:	4603      	mov	r3, r0
 800b634:	70fb      	strb	r3, [r7, #3]
 800b636:	460b      	mov	r3, r1
 800b638:	70bb      	strb	r3, [r7, #2]
 800b63a:	4613      	mov	r3, r2
 800b63c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b63e:	7878      	ldrb	r0, [r7, #1]
 800b640:	78ba      	ldrb	r2, [r7, #2]
 800b642:	78f9      	ldrb	r1, [r7, #3]
 800b644:	8b3b      	ldrh	r3, [r7, #24]
 800b646:	9302      	str	r3, [sp, #8]
 800b648:	7d3b      	ldrb	r3, [r7, #20]
 800b64a:	9301      	str	r3, [sp, #4]
 800b64c:	7c3b      	ldrb	r3, [r7, #16]
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	4603      	mov	r3, r0
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fa53 	bl	800bafe <USBH_LL_OpenPipe>

  return USBH_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b66e:	78fb      	ldrb	r3, [r7, #3]
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 fa72 	bl	800bb5c <USBH_LL_ClosePipe>

  return USBH_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b084      	sub	sp, #16
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	460b      	mov	r3, r1
 800b68c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f836 	bl	800b700 <USBH_GetFreePipe>
 800b694:	4603      	mov	r3, r0
 800b696:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b698:	89fb      	ldrh	r3, [r7, #14]
 800b69a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d00a      	beq.n	800b6b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b6a2:	78fa      	ldrb	r2, [r7, #3]
 800b6a4:	89fb      	ldrh	r3, [r7, #14]
 800b6a6:	f003 030f 	and.w	r3, r3, #15
 800b6aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	33e0      	adds	r3, #224	; 0xe0
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	440b      	add	r3, r1
 800b6b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b6b8:	89fb      	ldrh	r3, [r7, #14]
 800b6ba:	b2db      	uxtb	r3, r3
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	2b0f      	cmp	r3, #15
 800b6d4:	d80d      	bhi.n	800b6f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b6d6:	78fb      	ldrb	r3, [r7, #3]
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	33e0      	adds	r3, #224	; 0xe0
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	78fb      	ldrb	r3, [r7, #3]
 800b6e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b6e8:	6879      	ldr	r1, [r7, #4]
 800b6ea:	33e0      	adds	r3, #224	; 0xe0
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	440b      	add	r3, r1
 800b6f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b70c:	2300      	movs	r3, #0
 800b70e:	73fb      	strb	r3, [r7, #15]
 800b710:	e00f      	b.n	800b732 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	33e0      	adds	r3, #224	; 0xe0
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4413      	add	r3, r2
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b722:	2b00      	cmp	r3, #0
 800b724:	d102      	bne.n	800b72c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b726:	7bfb      	ldrb	r3, [r7, #15]
 800b728:	b29b      	uxth	r3, r3
 800b72a:	e007      	b.n	800b73c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	3301      	adds	r3, #1
 800b730:	73fb      	strb	r3, [r7, #15]
 800b732:	7bfb      	ldrb	r3, [r7, #15]
 800b734:	2b0f      	cmp	r3, #15
 800b736:	d9ec      	bls.n	800b712 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b738:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b74c:	2201      	movs	r2, #1
 800b74e:	490e      	ldr	r1, [pc, #56]	; (800b788 <MX_USB_HOST_Init+0x40>)
 800b750:	480e      	ldr	r0, [pc, #56]	; (800b78c <MX_USB_HOST_Init+0x44>)
 800b752:	f7fe fba7 	bl	8009ea4 <USBH_Init>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d001      	beq.n	800b760 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b75c:	f7f6 f864 	bl	8001828 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b760:	490b      	ldr	r1, [pc, #44]	; (800b790 <MX_USB_HOST_Init+0x48>)
 800b762:	480a      	ldr	r0, [pc, #40]	; (800b78c <MX_USB_HOST_Init+0x44>)
 800b764:	f7fe fc2c 	bl	8009fc0 <USBH_RegisterClass>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d001      	beq.n	800b772 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b76e:	f7f6 f85b 	bl	8001828 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b772:	4806      	ldr	r0, [pc, #24]	; (800b78c <MX_USB_HOST_Init+0x44>)
 800b774:	f7fe fcb0 	bl	800a0d8 <USBH_Start>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b77e:	f7f6 f853 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b782:	bf00      	nop
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	0800b7a9 	.word	0x0800b7a9
 800b78c:	2000059c 	.word	0x2000059c
 800b790:	2000000c 	.word	0x2000000c

0800b794 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b798:	4802      	ldr	r0, [pc, #8]	; (800b7a4 <MX_USB_HOST_Process+0x10>)
 800b79a:	f7fe fcad 	bl	800a0f8 <USBH_Process>
}
 800b79e:	bf00      	nop
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	2000059c 	.word	0x2000059c

0800b7a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b7b4:	78fb      	ldrb	r3, [r7, #3]
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	2b04      	cmp	r3, #4
 800b7ba:	d819      	bhi.n	800b7f0 <USBH_UserProcess+0x48>
 800b7bc:	a201      	add	r2, pc, #4	; (adr r2, 800b7c4 <USBH_UserProcess+0x1c>)
 800b7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c2:	bf00      	nop
 800b7c4:	0800b7f1 	.word	0x0800b7f1
 800b7c8:	0800b7e1 	.word	0x0800b7e1
 800b7cc:	0800b7f1 	.word	0x0800b7f1
 800b7d0:	0800b7e9 	.word	0x0800b7e9
 800b7d4:	0800b7d9 	.word	0x0800b7d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b7d8:	4b09      	ldr	r3, [pc, #36]	; (800b800 <USBH_UserProcess+0x58>)
 800b7da:	2203      	movs	r2, #3
 800b7dc:	701a      	strb	r2, [r3, #0]
  break;
 800b7de:	e008      	b.n	800b7f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b7e0:	4b07      	ldr	r3, [pc, #28]	; (800b800 <USBH_UserProcess+0x58>)
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	701a      	strb	r2, [r3, #0]
  break;
 800b7e6:	e004      	b.n	800b7f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b7e8:	4b05      	ldr	r3, [pc, #20]	; (800b800 <USBH_UserProcess+0x58>)
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	701a      	strb	r2, [r3, #0]
  break;
 800b7ee:	e000      	b.n	800b7f2 <USBH_UserProcess+0x4a>

  default:
  break;
 800b7f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b7f2:	bf00      	nop
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	20000974 	.word	0x20000974

0800b804 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b08a      	sub	sp, #40	; 0x28
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b80c:	f107 0314 	add.w	r3, r7, #20
 800b810:	2200      	movs	r2, #0
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	605a      	str	r2, [r3, #4]
 800b816:	609a      	str	r2, [r3, #8]
 800b818:	60da      	str	r2, [r3, #12]
 800b81a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b824:	d147      	bne.n	800b8b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b826:	2300      	movs	r3, #0
 800b828:	613b      	str	r3, [r7, #16]
 800b82a:	4b25      	ldr	r3, [pc, #148]	; (800b8c0 <HAL_HCD_MspInit+0xbc>)
 800b82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82e:	4a24      	ldr	r2, [pc, #144]	; (800b8c0 <HAL_HCD_MspInit+0xbc>)
 800b830:	f043 0301 	orr.w	r3, r3, #1
 800b834:	6313      	str	r3, [r2, #48]	; 0x30
 800b836:	4b22      	ldr	r3, [pc, #136]	; (800b8c0 <HAL_HCD_MspInit+0xbc>)
 800b838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	613b      	str	r3, [r7, #16]
 800b840:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b842:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b848:	2300      	movs	r3, #0
 800b84a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b84c:	2300      	movs	r3, #0
 800b84e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b850:	f107 0314 	add.w	r3, r7, #20
 800b854:	4619      	mov	r1, r3
 800b856:	481b      	ldr	r0, [pc, #108]	; (800b8c4 <HAL_HCD_MspInit+0xc0>)
 800b858:	f7f7 f990 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b85c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b862:	2302      	movs	r3, #2
 800b864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b866:	2300      	movs	r3, #0
 800b868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b86a:	2300      	movs	r3, #0
 800b86c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b86e:	230a      	movs	r3, #10
 800b870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b872:	f107 0314 	add.w	r3, r7, #20
 800b876:	4619      	mov	r1, r3
 800b878:	4812      	ldr	r0, [pc, #72]	; (800b8c4 <HAL_HCD_MspInit+0xc0>)
 800b87a:	f7f7 f97f 	bl	8002b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b87e:	4b10      	ldr	r3, [pc, #64]	; (800b8c0 <HAL_HCD_MspInit+0xbc>)
 800b880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b882:	4a0f      	ldr	r2, [pc, #60]	; (800b8c0 <HAL_HCD_MspInit+0xbc>)
 800b884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b888:	6353      	str	r3, [r2, #52]	; 0x34
 800b88a:	2300      	movs	r3, #0
 800b88c:	60fb      	str	r3, [r7, #12]
 800b88e:	4b0c      	ldr	r3, [pc, #48]	; (800b8c0 <HAL_HCD_MspInit+0xbc>)
 800b890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b892:	4a0b      	ldr	r2, [pc, #44]	; (800b8c0 <HAL_HCD_MspInit+0xbc>)
 800b894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b898:	6453      	str	r3, [r2, #68]	; 0x44
 800b89a:	4b09      	ldr	r3, [pc, #36]	; (800b8c0 <HAL_HCD_MspInit+0xbc>)
 800b89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8a2:	60fb      	str	r3, [r7, #12]
 800b8a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	2043      	movs	r0, #67	; 0x43
 800b8ac:	f7f6 fd2d 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8b0:	2043      	movs	r0, #67	; 0x43
 800b8b2:	f7f6 fd46 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8b6:	bf00      	nop
 800b8b8:	3728      	adds	r7, #40	; 0x28
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	40023800 	.word	0x40023800
 800b8c4:	40020000 	.word	0x40020000

0800b8c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fe ffed 	bl	800a8b6 <USBH_LL_IncTimer>
}
 800b8dc:	bf00      	nop
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff f825 	bl	800a942 <USBH_LL_Connect>
}
 800b8f8:	bf00      	nop
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff f82e 	bl	800a970 <USBH_LL_Disconnect>
}
 800b914:	bf00      	nop
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	460b      	mov	r3, r1
 800b926:	70fb      	strb	r3, [r7, #3]
 800b928:	4613      	mov	r3, r2
 800b92a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe ffdf 	bl	800a90a <USBH_LL_PortEnabled>
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b962:	4618      	mov	r0, r3
 800b964:	f7fe ffdf 	bl	800a926 <USBH_LL_PortDisabled>
}
 800b968:	bf00      	nop
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d12a      	bne.n	800b9d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b982:	4a18      	ldr	r2, [pc, #96]	; (800b9e4 <USBH_LL_Init+0x74>)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a15      	ldr	r2, [pc, #84]	; (800b9e4 <USBH_LL_Init+0x74>)
 800b98e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b992:	4b14      	ldr	r3, [pc, #80]	; (800b9e4 <USBH_LL_Init+0x74>)
 800b994:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b998:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b99a:	4b12      	ldr	r3, [pc, #72]	; (800b9e4 <USBH_LL_Init+0x74>)
 800b99c:	2208      	movs	r2, #8
 800b99e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b9a0:	4b10      	ldr	r3, [pc, #64]	; (800b9e4 <USBH_LL_Init+0x74>)
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b9a6:	4b0f      	ldr	r3, [pc, #60]	; (800b9e4 <USBH_LL_Init+0x74>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b9ac:	4b0d      	ldr	r3, [pc, #52]	; (800b9e4 <USBH_LL_Init+0x74>)
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b9b2:	4b0c      	ldr	r3, [pc, #48]	; (800b9e4 <USBH_LL_Init+0x74>)
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b9b8:	480a      	ldr	r0, [pc, #40]	; (800b9e4 <USBH_LL_Init+0x74>)
 800b9ba:	f7f7 faae 	bl	8002f1a <HAL_HCD_Init>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d001      	beq.n	800b9c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b9c4:	f7f5 ff30 	bl	8001828 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b9c8:	4806      	ldr	r0, [pc, #24]	; (800b9e4 <USBH_LL_Init+0x74>)
 800b9ca:	f7f7 fe92 	bl	80036f2 <HAL_HCD_GetCurrentFrame>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7fe ff60 	bl	800a898 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20000978 	.word	0x20000978

0800b9e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7f7 fe01 	bl	8003606 <HAL_HCD_Start>
 800ba04:	4603      	mov	r3, r0
 800ba06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 f95c 	bl	800bcc8 <USBH_Get_USB_Status>
 800ba10:	4603      	mov	r3, r0
 800ba12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba14:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7f7 fe09 	bl	800364c <HAL_HCD_Stop>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 f941 	bl	800bcc8 <USBH_Get_USB_Status>
 800ba46:	4603      	mov	r3, r0
 800ba48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7f7 fe51 	bl	800370e <HAL_HCD_GetCurrentSpeed>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d00c      	beq.n	800ba8c <USBH_LL_GetSpeed+0x38>
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d80d      	bhi.n	800ba92 <USBH_LL_GetSpeed+0x3e>
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d002      	beq.n	800ba80 <USBH_LL_GetSpeed+0x2c>
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d003      	beq.n	800ba86 <USBH_LL_GetSpeed+0x32>
 800ba7e:	e008      	b.n	800ba92 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]
    break;
 800ba84:	e008      	b.n	800ba98 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ba86:	2301      	movs	r3, #1
 800ba88:	73fb      	strb	r3, [r7, #15]
    break;
 800ba8a:	e005      	b.n	800ba98 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba90:	e002      	b.n	800ba98 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ba92:	2301      	movs	r3, #1
 800ba94:	73fb      	strb	r3, [r7, #15]
    break;
 800ba96:	bf00      	nop
  }
  return  speed;
 800ba98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bab8:	4618      	mov	r0, r3
 800baba:	f7f7 fde4 	bl	8003686 <HAL_HCD_ResetPort>
 800babe:	4603      	mov	r3, r0
 800bac0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
 800bac4:	4618      	mov	r0, r3
 800bac6:	f000 f8ff 	bl	800bcc8 <USBH_Get_USB_Status>
 800baca:	4603      	mov	r3, r0
 800bacc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bace:	7bbb      	ldrb	r3, [r7, #14]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	460b      	mov	r3, r1
 800bae2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800baea:	78fa      	ldrb	r2, [r7, #3]
 800baec:	4611      	mov	r1, r2
 800baee:	4618      	mov	r0, r3
 800baf0:	f7f7 fdeb 	bl	80036ca <HAL_HCD_HC_GetXferCount>
 800baf4:	4603      	mov	r3, r0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bafe:	b590      	push	{r4, r7, lr}
 800bb00:	b089      	sub	sp, #36	; 0x24
 800bb02:	af04      	add	r7, sp, #16
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	4608      	mov	r0, r1
 800bb08:	4611      	mov	r1, r2
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	70fb      	strb	r3, [r7, #3]
 800bb10:	460b      	mov	r3, r1
 800bb12:	70bb      	strb	r3, [r7, #2]
 800bb14:	4613      	mov	r3, r2
 800bb16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bb26:	787c      	ldrb	r4, [r7, #1]
 800bb28:	78ba      	ldrb	r2, [r7, #2]
 800bb2a:	78f9      	ldrb	r1, [r7, #3]
 800bb2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb2e:	9302      	str	r3, [sp, #8]
 800bb30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb34:	9301      	str	r3, [sp, #4]
 800bb36:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	4623      	mov	r3, r4
 800bb3e:	f7f7 fa4e 	bl	8002fde <HAL_HCD_HC_Init>
 800bb42:	4603      	mov	r3, r0
 800bb44:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 f8bd 	bl	800bcc8 <USBH_Get_USB_Status>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb52:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd90      	pop	{r4, r7, pc}

0800bb5c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb76:	78fa      	ldrb	r2, [r7, #3]
 800bb78:	4611      	mov	r1, r2
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7f7 fabe 	bl	80030fc <HAL_HCD_HC_Halt>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 f89e 	bl	800bcc8 <USBH_Get_USB_Status>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bb9a:	b590      	push	{r4, r7, lr}
 800bb9c:	b089      	sub	sp, #36	; 0x24
 800bb9e:	af04      	add	r7, sp, #16
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	4608      	mov	r0, r1
 800bba4:	4611      	mov	r1, r2
 800bba6:	461a      	mov	r2, r3
 800bba8:	4603      	mov	r3, r0
 800bbaa:	70fb      	strb	r3, [r7, #3]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70bb      	strb	r3, [r7, #2]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bbc2:	787c      	ldrb	r4, [r7, #1]
 800bbc4:	78ba      	ldrb	r2, [r7, #2]
 800bbc6:	78f9      	ldrb	r1, [r7, #3]
 800bbc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bbcc:	9303      	str	r3, [sp, #12]
 800bbce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bbd0:	9302      	str	r3, [sp, #8]
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	9301      	str	r3, [sp, #4]
 800bbd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	4623      	mov	r3, r4
 800bbde:	f7f7 fab1 	bl	8003144 <HAL_HCD_HC_SubmitRequest>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bbe6:	7bfb      	ldrb	r3, [r7, #15]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 f86d 	bl	800bcc8 <USBH_Get_USB_Status>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd90      	pop	{r4, r7, pc}

0800bbfc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	460b      	mov	r3, r1
 800bc06:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc0e:	78fa      	ldrb	r2, [r7, #3]
 800bc10:	4611      	mov	r1, r2
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7f7 fd45 	bl	80036a2 <HAL_HCD_HC_GetURBState>
 800bc18:	4603      	mov	r3, r0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d103      	bne.n	800bc40 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bc38:	78fb      	ldrb	r3, [r7, #3]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f000 f870 	bl	800bd20 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bc40:	20c8      	movs	r0, #200	; 0xc8
 800bc42:	f7f6 fa63 	bl	800210c <HAL_Delay>
  return USBH_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	460b      	mov	r3, r1
 800bc5a:	70fb      	strb	r3, [r7, #3]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc66:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bc68:	78fb      	ldrb	r3, [r7, #3]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	212c      	movs	r1, #44	; 0x2c
 800bc6e:	fb01 f303 	mul.w	r3, r1, r3
 800bc72:	4413      	add	r3, r2
 800bc74:	333b      	adds	r3, #59	; 0x3b
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d009      	beq.n	800bc90 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bc7c:	78fb      	ldrb	r3, [r7, #3]
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	212c      	movs	r1, #44	; 0x2c
 800bc82:	fb01 f303 	mul.w	r3, r1, r3
 800bc86:	4413      	add	r3, r2
 800bc88:	3354      	adds	r3, #84	; 0x54
 800bc8a:	78ba      	ldrb	r2, [r7, #2]
 800bc8c:	701a      	strb	r2, [r3, #0]
 800bc8e:	e008      	b.n	800bca2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bc90:	78fb      	ldrb	r3, [r7, #3]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	212c      	movs	r1, #44	; 0x2c
 800bc96:	fb01 f303 	mul.w	r3, r1, r3
 800bc9a:	4413      	add	r3, r2
 800bc9c:	3355      	adds	r3, #85	; 0x55
 800bc9e:	78ba      	ldrb	r2, [r7, #2]
 800bca0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7f6 fa27 	bl	800210c <HAL_Delay>
}
 800bcbe:	bf00      	nop
 800bcc0:	3708      	adds	r7, #8
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
	...

0800bcc8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
 800bcd8:	2b03      	cmp	r3, #3
 800bcda:	d817      	bhi.n	800bd0c <USBH_Get_USB_Status+0x44>
 800bcdc:	a201      	add	r2, pc, #4	; (adr r2, 800bce4 <USBH_Get_USB_Status+0x1c>)
 800bcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce2:	bf00      	nop
 800bce4:	0800bcf5 	.word	0x0800bcf5
 800bce8:	0800bcfb 	.word	0x0800bcfb
 800bcec:	0800bd01 	.word	0x0800bd01
 800bcf0:	0800bd07 	.word	0x0800bd07
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf8:	e00b      	b.n	800bd12 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	73fb      	strb	r3, [r7, #15]
    break;
 800bcfe:	e008      	b.n	800bd12 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bd00:	2301      	movs	r3, #1
 800bd02:	73fb      	strb	r3, [r7, #15]
    break;
 800bd04:	e005      	b.n	800bd12 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bd06:	2302      	movs	r3, #2
 800bd08:	73fb      	strb	r3, [r7, #15]
    break;
 800bd0a:	e002      	b.n	800bd12 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd10:	bf00      	nop
  }
  return usb_status;
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bd2a:	79fb      	ldrb	r3, [r7, #7]
 800bd2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bd2e:	79fb      	ldrb	r3, [r7, #7]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d102      	bne.n	800bd3a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]
 800bd38:	e001      	b.n	800bd3e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	461a      	mov	r2, r3
 800bd42:	2101      	movs	r1, #1
 800bd44:	4803      	ldr	r0, [pc, #12]	; (800bd54 <MX_DriverVbusFS+0x34>)
 800bd46:	f7f7 f8b5 	bl	8002eb4 <HAL_GPIO_WritePin>
}
 800bd4a:	bf00      	nop
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	40020800 	.word	0x40020800

0800bd58 <atof>:
 800bd58:	2100      	movs	r1, #0
 800bd5a:	f001 be2d 	b.w	800d9b8 <strtod>
	...

0800bd60 <__errno>:
 800bd60:	4b01      	ldr	r3, [pc, #4]	; (800bd68 <__errno+0x8>)
 800bd62:	6818      	ldr	r0, [r3, #0]
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	2000002c 	.word	0x2000002c

0800bd6c <__libc_init_array>:
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	4d0d      	ldr	r5, [pc, #52]	; (800bda4 <__libc_init_array+0x38>)
 800bd70:	4c0d      	ldr	r4, [pc, #52]	; (800bda8 <__libc_init_array+0x3c>)
 800bd72:	1b64      	subs	r4, r4, r5
 800bd74:	10a4      	asrs	r4, r4, #2
 800bd76:	2600      	movs	r6, #0
 800bd78:	42a6      	cmp	r6, r4
 800bd7a:	d109      	bne.n	800bd90 <__libc_init_array+0x24>
 800bd7c:	4d0b      	ldr	r5, [pc, #44]	; (800bdac <__libc_init_array+0x40>)
 800bd7e:	4c0c      	ldr	r4, [pc, #48]	; (800bdb0 <__libc_init_array+0x44>)
 800bd80:	f004 fcf2 	bl	8010768 <_init>
 800bd84:	1b64      	subs	r4, r4, r5
 800bd86:	10a4      	asrs	r4, r4, #2
 800bd88:	2600      	movs	r6, #0
 800bd8a:	42a6      	cmp	r6, r4
 800bd8c:	d105      	bne.n	800bd9a <__libc_init_array+0x2e>
 800bd8e:	bd70      	pop	{r4, r5, r6, pc}
 800bd90:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd94:	4798      	blx	r3
 800bd96:	3601      	adds	r6, #1
 800bd98:	e7ee      	b.n	800bd78 <__libc_init_array+0xc>
 800bd9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd9e:	4798      	blx	r3
 800bda0:	3601      	adds	r6, #1
 800bda2:	e7f2      	b.n	800bd8a <__libc_init_array+0x1e>
 800bda4:	08010c94 	.word	0x08010c94
 800bda8:	08010c94 	.word	0x08010c94
 800bdac:	08010c94 	.word	0x08010c94
 800bdb0:	08010c98 	.word	0x08010c98

0800bdb4 <malloc>:
 800bdb4:	4b02      	ldr	r3, [pc, #8]	; (800bdc0 <malloc+0xc>)
 800bdb6:	4601      	mov	r1, r0
 800bdb8:	6818      	ldr	r0, [r3, #0]
 800bdba:	f000 b88d 	b.w	800bed8 <_malloc_r>
 800bdbe:	bf00      	nop
 800bdc0:	2000002c 	.word	0x2000002c

0800bdc4 <free>:
 800bdc4:	4b02      	ldr	r3, [pc, #8]	; (800bdd0 <free+0xc>)
 800bdc6:	4601      	mov	r1, r0
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	f000 b819 	b.w	800be00 <_free_r>
 800bdce:	bf00      	nop
 800bdd0:	2000002c 	.word	0x2000002c

0800bdd4 <memcpy>:
 800bdd4:	440a      	add	r2, r1
 800bdd6:	4291      	cmp	r1, r2
 800bdd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bddc:	d100      	bne.n	800bde0 <memcpy+0xc>
 800bdde:	4770      	bx	lr
 800bde0:	b510      	push	{r4, lr}
 800bde2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bde6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdea:	4291      	cmp	r1, r2
 800bdec:	d1f9      	bne.n	800bde2 <memcpy+0xe>
 800bdee:	bd10      	pop	{r4, pc}

0800bdf0 <memset>:
 800bdf0:	4402      	add	r2, r0
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d100      	bne.n	800bdfa <memset+0xa>
 800bdf8:	4770      	bx	lr
 800bdfa:	f803 1b01 	strb.w	r1, [r3], #1
 800bdfe:	e7f9      	b.n	800bdf4 <memset+0x4>

0800be00 <_free_r>:
 800be00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be02:	2900      	cmp	r1, #0
 800be04:	d044      	beq.n	800be90 <_free_r+0x90>
 800be06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be0a:	9001      	str	r0, [sp, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f1a1 0404 	sub.w	r4, r1, #4
 800be12:	bfb8      	it	lt
 800be14:	18e4      	addlt	r4, r4, r3
 800be16:	f003 f881 	bl	800ef1c <__malloc_lock>
 800be1a:	4a1e      	ldr	r2, [pc, #120]	; (800be94 <_free_r+0x94>)
 800be1c:	9801      	ldr	r0, [sp, #4]
 800be1e:	6813      	ldr	r3, [r2, #0]
 800be20:	b933      	cbnz	r3, 800be30 <_free_r+0x30>
 800be22:	6063      	str	r3, [r4, #4]
 800be24:	6014      	str	r4, [r2, #0]
 800be26:	b003      	add	sp, #12
 800be28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be2c:	f003 b87c 	b.w	800ef28 <__malloc_unlock>
 800be30:	42a3      	cmp	r3, r4
 800be32:	d908      	bls.n	800be46 <_free_r+0x46>
 800be34:	6825      	ldr	r5, [r4, #0]
 800be36:	1961      	adds	r1, r4, r5
 800be38:	428b      	cmp	r3, r1
 800be3a:	bf01      	itttt	eq
 800be3c:	6819      	ldreq	r1, [r3, #0]
 800be3e:	685b      	ldreq	r3, [r3, #4]
 800be40:	1949      	addeq	r1, r1, r5
 800be42:	6021      	streq	r1, [r4, #0]
 800be44:	e7ed      	b.n	800be22 <_free_r+0x22>
 800be46:	461a      	mov	r2, r3
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	b10b      	cbz	r3, 800be50 <_free_r+0x50>
 800be4c:	42a3      	cmp	r3, r4
 800be4e:	d9fa      	bls.n	800be46 <_free_r+0x46>
 800be50:	6811      	ldr	r1, [r2, #0]
 800be52:	1855      	adds	r5, r2, r1
 800be54:	42a5      	cmp	r5, r4
 800be56:	d10b      	bne.n	800be70 <_free_r+0x70>
 800be58:	6824      	ldr	r4, [r4, #0]
 800be5a:	4421      	add	r1, r4
 800be5c:	1854      	adds	r4, r2, r1
 800be5e:	42a3      	cmp	r3, r4
 800be60:	6011      	str	r1, [r2, #0]
 800be62:	d1e0      	bne.n	800be26 <_free_r+0x26>
 800be64:	681c      	ldr	r4, [r3, #0]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	6053      	str	r3, [r2, #4]
 800be6a:	4421      	add	r1, r4
 800be6c:	6011      	str	r1, [r2, #0]
 800be6e:	e7da      	b.n	800be26 <_free_r+0x26>
 800be70:	d902      	bls.n	800be78 <_free_r+0x78>
 800be72:	230c      	movs	r3, #12
 800be74:	6003      	str	r3, [r0, #0]
 800be76:	e7d6      	b.n	800be26 <_free_r+0x26>
 800be78:	6825      	ldr	r5, [r4, #0]
 800be7a:	1961      	adds	r1, r4, r5
 800be7c:	428b      	cmp	r3, r1
 800be7e:	bf04      	itt	eq
 800be80:	6819      	ldreq	r1, [r3, #0]
 800be82:	685b      	ldreq	r3, [r3, #4]
 800be84:	6063      	str	r3, [r4, #4]
 800be86:	bf04      	itt	eq
 800be88:	1949      	addeq	r1, r1, r5
 800be8a:	6021      	streq	r1, [r4, #0]
 800be8c:	6054      	str	r4, [r2, #4]
 800be8e:	e7ca      	b.n	800be26 <_free_r+0x26>
 800be90:	b003      	add	sp, #12
 800be92:	bd30      	pop	{r4, r5, pc}
 800be94:	20000c7c 	.word	0x20000c7c

0800be98 <sbrk_aligned>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	4e0e      	ldr	r6, [pc, #56]	; (800bed4 <sbrk_aligned+0x3c>)
 800be9c:	460c      	mov	r4, r1
 800be9e:	6831      	ldr	r1, [r6, #0]
 800bea0:	4605      	mov	r5, r0
 800bea2:	b911      	cbnz	r1, 800beaa <sbrk_aligned+0x12>
 800bea4:	f000 ff06 	bl	800ccb4 <_sbrk_r>
 800bea8:	6030      	str	r0, [r6, #0]
 800beaa:	4621      	mov	r1, r4
 800beac:	4628      	mov	r0, r5
 800beae:	f000 ff01 	bl	800ccb4 <_sbrk_r>
 800beb2:	1c43      	adds	r3, r0, #1
 800beb4:	d00a      	beq.n	800becc <sbrk_aligned+0x34>
 800beb6:	1cc4      	adds	r4, r0, #3
 800beb8:	f024 0403 	bic.w	r4, r4, #3
 800bebc:	42a0      	cmp	r0, r4
 800bebe:	d007      	beq.n	800bed0 <sbrk_aligned+0x38>
 800bec0:	1a21      	subs	r1, r4, r0
 800bec2:	4628      	mov	r0, r5
 800bec4:	f000 fef6 	bl	800ccb4 <_sbrk_r>
 800bec8:	3001      	adds	r0, #1
 800beca:	d101      	bne.n	800bed0 <sbrk_aligned+0x38>
 800becc:	f04f 34ff 	mov.w	r4, #4294967295
 800bed0:	4620      	mov	r0, r4
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
 800bed4:	20000c80 	.word	0x20000c80

0800bed8 <_malloc_r>:
 800bed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bedc:	1ccd      	adds	r5, r1, #3
 800bede:	f025 0503 	bic.w	r5, r5, #3
 800bee2:	3508      	adds	r5, #8
 800bee4:	2d0c      	cmp	r5, #12
 800bee6:	bf38      	it	cc
 800bee8:	250c      	movcc	r5, #12
 800beea:	2d00      	cmp	r5, #0
 800beec:	4607      	mov	r7, r0
 800beee:	db01      	blt.n	800bef4 <_malloc_r+0x1c>
 800bef0:	42a9      	cmp	r1, r5
 800bef2:	d905      	bls.n	800bf00 <_malloc_r+0x28>
 800bef4:	230c      	movs	r3, #12
 800bef6:	603b      	str	r3, [r7, #0]
 800bef8:	2600      	movs	r6, #0
 800befa:	4630      	mov	r0, r6
 800befc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf00:	4e2e      	ldr	r6, [pc, #184]	; (800bfbc <_malloc_r+0xe4>)
 800bf02:	f003 f80b 	bl	800ef1c <__malloc_lock>
 800bf06:	6833      	ldr	r3, [r6, #0]
 800bf08:	461c      	mov	r4, r3
 800bf0a:	bb34      	cbnz	r4, 800bf5a <_malloc_r+0x82>
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	4638      	mov	r0, r7
 800bf10:	f7ff ffc2 	bl	800be98 <sbrk_aligned>
 800bf14:	1c43      	adds	r3, r0, #1
 800bf16:	4604      	mov	r4, r0
 800bf18:	d14d      	bne.n	800bfb6 <_malloc_r+0xde>
 800bf1a:	6834      	ldr	r4, [r6, #0]
 800bf1c:	4626      	mov	r6, r4
 800bf1e:	2e00      	cmp	r6, #0
 800bf20:	d140      	bne.n	800bfa4 <_malloc_r+0xcc>
 800bf22:	6823      	ldr	r3, [r4, #0]
 800bf24:	4631      	mov	r1, r6
 800bf26:	4638      	mov	r0, r7
 800bf28:	eb04 0803 	add.w	r8, r4, r3
 800bf2c:	f000 fec2 	bl	800ccb4 <_sbrk_r>
 800bf30:	4580      	cmp	r8, r0
 800bf32:	d13a      	bne.n	800bfaa <_malloc_r+0xd2>
 800bf34:	6821      	ldr	r1, [r4, #0]
 800bf36:	3503      	adds	r5, #3
 800bf38:	1a6d      	subs	r5, r5, r1
 800bf3a:	f025 0503 	bic.w	r5, r5, #3
 800bf3e:	3508      	adds	r5, #8
 800bf40:	2d0c      	cmp	r5, #12
 800bf42:	bf38      	it	cc
 800bf44:	250c      	movcc	r5, #12
 800bf46:	4629      	mov	r1, r5
 800bf48:	4638      	mov	r0, r7
 800bf4a:	f7ff ffa5 	bl	800be98 <sbrk_aligned>
 800bf4e:	3001      	adds	r0, #1
 800bf50:	d02b      	beq.n	800bfaa <_malloc_r+0xd2>
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	442b      	add	r3, r5
 800bf56:	6023      	str	r3, [r4, #0]
 800bf58:	e00e      	b.n	800bf78 <_malloc_r+0xa0>
 800bf5a:	6822      	ldr	r2, [r4, #0]
 800bf5c:	1b52      	subs	r2, r2, r5
 800bf5e:	d41e      	bmi.n	800bf9e <_malloc_r+0xc6>
 800bf60:	2a0b      	cmp	r2, #11
 800bf62:	d916      	bls.n	800bf92 <_malloc_r+0xba>
 800bf64:	1961      	adds	r1, r4, r5
 800bf66:	42a3      	cmp	r3, r4
 800bf68:	6025      	str	r5, [r4, #0]
 800bf6a:	bf18      	it	ne
 800bf6c:	6059      	strne	r1, [r3, #4]
 800bf6e:	6863      	ldr	r3, [r4, #4]
 800bf70:	bf08      	it	eq
 800bf72:	6031      	streq	r1, [r6, #0]
 800bf74:	5162      	str	r2, [r4, r5]
 800bf76:	604b      	str	r3, [r1, #4]
 800bf78:	4638      	mov	r0, r7
 800bf7a:	f104 060b 	add.w	r6, r4, #11
 800bf7e:	f002 ffd3 	bl	800ef28 <__malloc_unlock>
 800bf82:	f026 0607 	bic.w	r6, r6, #7
 800bf86:	1d23      	adds	r3, r4, #4
 800bf88:	1af2      	subs	r2, r6, r3
 800bf8a:	d0b6      	beq.n	800befa <_malloc_r+0x22>
 800bf8c:	1b9b      	subs	r3, r3, r6
 800bf8e:	50a3      	str	r3, [r4, r2]
 800bf90:	e7b3      	b.n	800befa <_malloc_r+0x22>
 800bf92:	6862      	ldr	r2, [r4, #4]
 800bf94:	42a3      	cmp	r3, r4
 800bf96:	bf0c      	ite	eq
 800bf98:	6032      	streq	r2, [r6, #0]
 800bf9a:	605a      	strne	r2, [r3, #4]
 800bf9c:	e7ec      	b.n	800bf78 <_malloc_r+0xa0>
 800bf9e:	4623      	mov	r3, r4
 800bfa0:	6864      	ldr	r4, [r4, #4]
 800bfa2:	e7b2      	b.n	800bf0a <_malloc_r+0x32>
 800bfa4:	4634      	mov	r4, r6
 800bfa6:	6876      	ldr	r6, [r6, #4]
 800bfa8:	e7b9      	b.n	800bf1e <_malloc_r+0x46>
 800bfaa:	230c      	movs	r3, #12
 800bfac:	603b      	str	r3, [r7, #0]
 800bfae:	4638      	mov	r0, r7
 800bfb0:	f002 ffba 	bl	800ef28 <__malloc_unlock>
 800bfb4:	e7a1      	b.n	800befa <_malloc_r+0x22>
 800bfb6:	6025      	str	r5, [r4, #0]
 800bfb8:	e7de      	b.n	800bf78 <_malloc_r+0xa0>
 800bfba:	bf00      	nop
 800bfbc:	20000c7c 	.word	0x20000c7c

0800bfc0 <__cvt>:
 800bfc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc4:	ec55 4b10 	vmov	r4, r5, d0
 800bfc8:	2d00      	cmp	r5, #0
 800bfca:	460e      	mov	r6, r1
 800bfcc:	4619      	mov	r1, r3
 800bfce:	462b      	mov	r3, r5
 800bfd0:	bfbb      	ittet	lt
 800bfd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bfd6:	461d      	movlt	r5, r3
 800bfd8:	2300      	movge	r3, #0
 800bfda:	232d      	movlt	r3, #45	; 0x2d
 800bfdc:	700b      	strb	r3, [r1, #0]
 800bfde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfe0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bfe4:	4691      	mov	r9, r2
 800bfe6:	f023 0820 	bic.w	r8, r3, #32
 800bfea:	bfbc      	itt	lt
 800bfec:	4622      	movlt	r2, r4
 800bfee:	4614      	movlt	r4, r2
 800bff0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bff4:	d005      	beq.n	800c002 <__cvt+0x42>
 800bff6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bffa:	d100      	bne.n	800bffe <__cvt+0x3e>
 800bffc:	3601      	adds	r6, #1
 800bffe:	2102      	movs	r1, #2
 800c000:	e000      	b.n	800c004 <__cvt+0x44>
 800c002:	2103      	movs	r1, #3
 800c004:	ab03      	add	r3, sp, #12
 800c006:	9301      	str	r3, [sp, #4]
 800c008:	ab02      	add	r3, sp, #8
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	ec45 4b10 	vmov	d0, r4, r5
 800c010:	4653      	mov	r3, sl
 800c012:	4632      	mov	r2, r6
 800c014:	f001 fdec 	bl	800dbf0 <_dtoa_r>
 800c018:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c01c:	4607      	mov	r7, r0
 800c01e:	d102      	bne.n	800c026 <__cvt+0x66>
 800c020:	f019 0f01 	tst.w	r9, #1
 800c024:	d022      	beq.n	800c06c <__cvt+0xac>
 800c026:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c02a:	eb07 0906 	add.w	r9, r7, r6
 800c02e:	d110      	bne.n	800c052 <__cvt+0x92>
 800c030:	783b      	ldrb	r3, [r7, #0]
 800c032:	2b30      	cmp	r3, #48	; 0x30
 800c034:	d10a      	bne.n	800c04c <__cvt+0x8c>
 800c036:	2200      	movs	r2, #0
 800c038:	2300      	movs	r3, #0
 800c03a:	4620      	mov	r0, r4
 800c03c:	4629      	mov	r1, r5
 800c03e:	f7f4 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 800c042:	b918      	cbnz	r0, 800c04c <__cvt+0x8c>
 800c044:	f1c6 0601 	rsb	r6, r6, #1
 800c048:	f8ca 6000 	str.w	r6, [sl]
 800c04c:	f8da 3000 	ldr.w	r3, [sl]
 800c050:	4499      	add	r9, r3
 800c052:	2200      	movs	r2, #0
 800c054:	2300      	movs	r3, #0
 800c056:	4620      	mov	r0, r4
 800c058:	4629      	mov	r1, r5
 800c05a:	f7f4 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800c05e:	b108      	cbz	r0, 800c064 <__cvt+0xa4>
 800c060:	f8cd 900c 	str.w	r9, [sp, #12]
 800c064:	2230      	movs	r2, #48	; 0x30
 800c066:	9b03      	ldr	r3, [sp, #12]
 800c068:	454b      	cmp	r3, r9
 800c06a:	d307      	bcc.n	800c07c <__cvt+0xbc>
 800c06c:	9b03      	ldr	r3, [sp, #12]
 800c06e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c070:	1bdb      	subs	r3, r3, r7
 800c072:	4638      	mov	r0, r7
 800c074:	6013      	str	r3, [r2, #0]
 800c076:	b004      	add	sp, #16
 800c078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07c:	1c59      	adds	r1, r3, #1
 800c07e:	9103      	str	r1, [sp, #12]
 800c080:	701a      	strb	r2, [r3, #0]
 800c082:	e7f0      	b.n	800c066 <__cvt+0xa6>

0800c084 <__exponent>:
 800c084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c086:	4603      	mov	r3, r0
 800c088:	2900      	cmp	r1, #0
 800c08a:	bfb8      	it	lt
 800c08c:	4249      	neglt	r1, r1
 800c08e:	f803 2b02 	strb.w	r2, [r3], #2
 800c092:	bfb4      	ite	lt
 800c094:	222d      	movlt	r2, #45	; 0x2d
 800c096:	222b      	movge	r2, #43	; 0x2b
 800c098:	2909      	cmp	r1, #9
 800c09a:	7042      	strb	r2, [r0, #1]
 800c09c:	dd2a      	ble.n	800c0f4 <__exponent+0x70>
 800c09e:	f10d 0407 	add.w	r4, sp, #7
 800c0a2:	46a4      	mov	ip, r4
 800c0a4:	270a      	movs	r7, #10
 800c0a6:	46a6      	mov	lr, r4
 800c0a8:	460a      	mov	r2, r1
 800c0aa:	fb91 f6f7 	sdiv	r6, r1, r7
 800c0ae:	fb07 1516 	mls	r5, r7, r6, r1
 800c0b2:	3530      	adds	r5, #48	; 0x30
 800c0b4:	2a63      	cmp	r2, #99	; 0x63
 800c0b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c0ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c0be:	4631      	mov	r1, r6
 800c0c0:	dcf1      	bgt.n	800c0a6 <__exponent+0x22>
 800c0c2:	3130      	adds	r1, #48	; 0x30
 800c0c4:	f1ae 0502 	sub.w	r5, lr, #2
 800c0c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c0cc:	1c44      	adds	r4, r0, #1
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	4561      	cmp	r1, ip
 800c0d2:	d30a      	bcc.n	800c0ea <__exponent+0x66>
 800c0d4:	f10d 0209 	add.w	r2, sp, #9
 800c0d8:	eba2 020e 	sub.w	r2, r2, lr
 800c0dc:	4565      	cmp	r5, ip
 800c0de:	bf88      	it	hi
 800c0e0:	2200      	movhi	r2, #0
 800c0e2:	4413      	add	r3, r2
 800c0e4:	1a18      	subs	r0, r3, r0
 800c0e6:	b003      	add	sp, #12
 800c0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c0f2:	e7ed      	b.n	800c0d0 <__exponent+0x4c>
 800c0f4:	2330      	movs	r3, #48	; 0x30
 800c0f6:	3130      	adds	r1, #48	; 0x30
 800c0f8:	7083      	strb	r3, [r0, #2]
 800c0fa:	70c1      	strb	r1, [r0, #3]
 800c0fc:	1d03      	adds	r3, r0, #4
 800c0fe:	e7f1      	b.n	800c0e4 <__exponent+0x60>

0800c100 <_printf_float>:
 800c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c104:	ed2d 8b02 	vpush	{d8}
 800c108:	b08d      	sub	sp, #52	; 0x34
 800c10a:	460c      	mov	r4, r1
 800c10c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c110:	4616      	mov	r6, r2
 800c112:	461f      	mov	r7, r3
 800c114:	4605      	mov	r5, r0
 800c116:	f002 fec9 	bl	800eeac <_localeconv_r>
 800c11a:	f8d0 a000 	ldr.w	sl, [r0]
 800c11e:	4650      	mov	r0, sl
 800c120:	f7f4 f856 	bl	80001d0 <strlen>
 800c124:	2300      	movs	r3, #0
 800c126:	930a      	str	r3, [sp, #40]	; 0x28
 800c128:	6823      	ldr	r3, [r4, #0]
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	f8d8 3000 	ldr.w	r3, [r8]
 800c130:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c134:	3307      	adds	r3, #7
 800c136:	f023 0307 	bic.w	r3, r3, #7
 800c13a:	f103 0208 	add.w	r2, r3, #8
 800c13e:	f8c8 2000 	str.w	r2, [r8]
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c14a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c14e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c152:	9307      	str	r3, [sp, #28]
 800c154:	f8cd 8018 	str.w	r8, [sp, #24]
 800c158:	ee08 0a10 	vmov	s16, r0
 800c15c:	4b9f      	ldr	r3, [pc, #636]	; (800c3dc <_printf_float+0x2dc>)
 800c15e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c162:	f04f 32ff 	mov.w	r2, #4294967295
 800c166:	f7f4 fce1 	bl	8000b2c <__aeabi_dcmpun>
 800c16a:	bb88      	cbnz	r0, 800c1d0 <_printf_float+0xd0>
 800c16c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c170:	4b9a      	ldr	r3, [pc, #616]	; (800c3dc <_printf_float+0x2dc>)
 800c172:	f04f 32ff 	mov.w	r2, #4294967295
 800c176:	f7f4 fcbb 	bl	8000af0 <__aeabi_dcmple>
 800c17a:	bb48      	cbnz	r0, 800c1d0 <_printf_float+0xd0>
 800c17c:	2200      	movs	r2, #0
 800c17e:	2300      	movs	r3, #0
 800c180:	4640      	mov	r0, r8
 800c182:	4649      	mov	r1, r9
 800c184:	f7f4 fcaa 	bl	8000adc <__aeabi_dcmplt>
 800c188:	b110      	cbz	r0, 800c190 <_printf_float+0x90>
 800c18a:	232d      	movs	r3, #45	; 0x2d
 800c18c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c190:	4b93      	ldr	r3, [pc, #588]	; (800c3e0 <_printf_float+0x2e0>)
 800c192:	4894      	ldr	r0, [pc, #592]	; (800c3e4 <_printf_float+0x2e4>)
 800c194:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c198:	bf94      	ite	ls
 800c19a:	4698      	movls	r8, r3
 800c19c:	4680      	movhi	r8, r0
 800c19e:	2303      	movs	r3, #3
 800c1a0:	6123      	str	r3, [r4, #16]
 800c1a2:	9b05      	ldr	r3, [sp, #20]
 800c1a4:	f023 0204 	bic.w	r2, r3, #4
 800c1a8:	6022      	str	r2, [r4, #0]
 800c1aa:	f04f 0900 	mov.w	r9, #0
 800c1ae:	9700      	str	r7, [sp, #0]
 800c1b0:	4633      	mov	r3, r6
 800c1b2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	f000 f9d8 	bl	800c56c <_printf_common>
 800c1bc:	3001      	adds	r0, #1
 800c1be:	f040 8090 	bne.w	800c2e2 <_printf_float+0x1e2>
 800c1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c6:	b00d      	add	sp, #52	; 0x34
 800c1c8:	ecbd 8b02 	vpop	{d8}
 800c1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d0:	4642      	mov	r2, r8
 800c1d2:	464b      	mov	r3, r9
 800c1d4:	4640      	mov	r0, r8
 800c1d6:	4649      	mov	r1, r9
 800c1d8:	f7f4 fca8 	bl	8000b2c <__aeabi_dcmpun>
 800c1dc:	b140      	cbz	r0, 800c1f0 <_printf_float+0xf0>
 800c1de:	464b      	mov	r3, r9
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	bfbc      	itt	lt
 800c1e4:	232d      	movlt	r3, #45	; 0x2d
 800c1e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c1ea:	487f      	ldr	r0, [pc, #508]	; (800c3e8 <_printf_float+0x2e8>)
 800c1ec:	4b7f      	ldr	r3, [pc, #508]	; (800c3ec <_printf_float+0x2ec>)
 800c1ee:	e7d1      	b.n	800c194 <_printf_float+0x94>
 800c1f0:	6863      	ldr	r3, [r4, #4]
 800c1f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c1f6:	9206      	str	r2, [sp, #24]
 800c1f8:	1c5a      	adds	r2, r3, #1
 800c1fa:	d13f      	bne.n	800c27c <_printf_float+0x17c>
 800c1fc:	2306      	movs	r3, #6
 800c1fe:	6063      	str	r3, [r4, #4]
 800c200:	9b05      	ldr	r3, [sp, #20]
 800c202:	6861      	ldr	r1, [r4, #4]
 800c204:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c208:	2300      	movs	r3, #0
 800c20a:	9303      	str	r3, [sp, #12]
 800c20c:	ab0a      	add	r3, sp, #40	; 0x28
 800c20e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c212:	ab09      	add	r3, sp, #36	; 0x24
 800c214:	ec49 8b10 	vmov	d0, r8, r9
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	6022      	str	r2, [r4, #0]
 800c21c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c220:	4628      	mov	r0, r5
 800c222:	f7ff fecd 	bl	800bfc0 <__cvt>
 800c226:	9b06      	ldr	r3, [sp, #24]
 800c228:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c22a:	2b47      	cmp	r3, #71	; 0x47
 800c22c:	4680      	mov	r8, r0
 800c22e:	d108      	bne.n	800c242 <_printf_float+0x142>
 800c230:	1cc8      	adds	r0, r1, #3
 800c232:	db02      	blt.n	800c23a <_printf_float+0x13a>
 800c234:	6863      	ldr	r3, [r4, #4]
 800c236:	4299      	cmp	r1, r3
 800c238:	dd41      	ble.n	800c2be <_printf_float+0x1be>
 800c23a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c23e:	fa5f fb8b 	uxtb.w	fp, fp
 800c242:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c246:	d820      	bhi.n	800c28a <_printf_float+0x18a>
 800c248:	3901      	subs	r1, #1
 800c24a:	465a      	mov	r2, fp
 800c24c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c250:	9109      	str	r1, [sp, #36]	; 0x24
 800c252:	f7ff ff17 	bl	800c084 <__exponent>
 800c256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c258:	1813      	adds	r3, r2, r0
 800c25a:	2a01      	cmp	r2, #1
 800c25c:	4681      	mov	r9, r0
 800c25e:	6123      	str	r3, [r4, #16]
 800c260:	dc02      	bgt.n	800c268 <_printf_float+0x168>
 800c262:	6822      	ldr	r2, [r4, #0]
 800c264:	07d2      	lsls	r2, r2, #31
 800c266:	d501      	bpl.n	800c26c <_printf_float+0x16c>
 800c268:	3301      	adds	r3, #1
 800c26a:	6123      	str	r3, [r4, #16]
 800c26c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c270:	2b00      	cmp	r3, #0
 800c272:	d09c      	beq.n	800c1ae <_printf_float+0xae>
 800c274:	232d      	movs	r3, #45	; 0x2d
 800c276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c27a:	e798      	b.n	800c1ae <_printf_float+0xae>
 800c27c:	9a06      	ldr	r2, [sp, #24]
 800c27e:	2a47      	cmp	r2, #71	; 0x47
 800c280:	d1be      	bne.n	800c200 <_printf_float+0x100>
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1bc      	bne.n	800c200 <_printf_float+0x100>
 800c286:	2301      	movs	r3, #1
 800c288:	e7b9      	b.n	800c1fe <_printf_float+0xfe>
 800c28a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c28e:	d118      	bne.n	800c2c2 <_printf_float+0x1c2>
 800c290:	2900      	cmp	r1, #0
 800c292:	6863      	ldr	r3, [r4, #4]
 800c294:	dd0b      	ble.n	800c2ae <_printf_float+0x1ae>
 800c296:	6121      	str	r1, [r4, #16]
 800c298:	b913      	cbnz	r3, 800c2a0 <_printf_float+0x1a0>
 800c29a:	6822      	ldr	r2, [r4, #0]
 800c29c:	07d0      	lsls	r0, r2, #31
 800c29e:	d502      	bpl.n	800c2a6 <_printf_float+0x1a6>
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	440b      	add	r3, r1
 800c2a4:	6123      	str	r3, [r4, #16]
 800c2a6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c2a8:	f04f 0900 	mov.w	r9, #0
 800c2ac:	e7de      	b.n	800c26c <_printf_float+0x16c>
 800c2ae:	b913      	cbnz	r3, 800c2b6 <_printf_float+0x1b6>
 800c2b0:	6822      	ldr	r2, [r4, #0]
 800c2b2:	07d2      	lsls	r2, r2, #31
 800c2b4:	d501      	bpl.n	800c2ba <_printf_float+0x1ba>
 800c2b6:	3302      	adds	r3, #2
 800c2b8:	e7f4      	b.n	800c2a4 <_printf_float+0x1a4>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e7f2      	b.n	800c2a4 <_printf_float+0x1a4>
 800c2be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c4:	4299      	cmp	r1, r3
 800c2c6:	db05      	blt.n	800c2d4 <_printf_float+0x1d4>
 800c2c8:	6823      	ldr	r3, [r4, #0]
 800c2ca:	6121      	str	r1, [r4, #16]
 800c2cc:	07d8      	lsls	r0, r3, #31
 800c2ce:	d5ea      	bpl.n	800c2a6 <_printf_float+0x1a6>
 800c2d0:	1c4b      	adds	r3, r1, #1
 800c2d2:	e7e7      	b.n	800c2a4 <_printf_float+0x1a4>
 800c2d4:	2900      	cmp	r1, #0
 800c2d6:	bfd4      	ite	le
 800c2d8:	f1c1 0202 	rsble	r2, r1, #2
 800c2dc:	2201      	movgt	r2, #1
 800c2de:	4413      	add	r3, r2
 800c2e0:	e7e0      	b.n	800c2a4 <_printf_float+0x1a4>
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	055a      	lsls	r2, r3, #21
 800c2e6:	d407      	bmi.n	800c2f8 <_printf_float+0x1f8>
 800c2e8:	6923      	ldr	r3, [r4, #16]
 800c2ea:	4642      	mov	r2, r8
 800c2ec:	4631      	mov	r1, r6
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	47b8      	blx	r7
 800c2f2:	3001      	adds	r0, #1
 800c2f4:	d12c      	bne.n	800c350 <_printf_float+0x250>
 800c2f6:	e764      	b.n	800c1c2 <_printf_float+0xc2>
 800c2f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c2fc:	f240 80e0 	bls.w	800c4c0 <_printf_float+0x3c0>
 800c300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c304:	2200      	movs	r2, #0
 800c306:	2300      	movs	r3, #0
 800c308:	f7f4 fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d034      	beq.n	800c37a <_printf_float+0x27a>
 800c310:	4a37      	ldr	r2, [pc, #220]	; (800c3f0 <_printf_float+0x2f0>)
 800c312:	2301      	movs	r3, #1
 800c314:	4631      	mov	r1, r6
 800c316:	4628      	mov	r0, r5
 800c318:	47b8      	blx	r7
 800c31a:	3001      	adds	r0, #1
 800c31c:	f43f af51 	beq.w	800c1c2 <_printf_float+0xc2>
 800c320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c324:	429a      	cmp	r2, r3
 800c326:	db02      	blt.n	800c32e <_printf_float+0x22e>
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	07d8      	lsls	r0, r3, #31
 800c32c:	d510      	bpl.n	800c350 <_printf_float+0x250>
 800c32e:	ee18 3a10 	vmov	r3, s16
 800c332:	4652      	mov	r2, sl
 800c334:	4631      	mov	r1, r6
 800c336:	4628      	mov	r0, r5
 800c338:	47b8      	blx	r7
 800c33a:	3001      	adds	r0, #1
 800c33c:	f43f af41 	beq.w	800c1c2 <_printf_float+0xc2>
 800c340:	f04f 0800 	mov.w	r8, #0
 800c344:	f104 091a 	add.w	r9, r4, #26
 800c348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c34a:	3b01      	subs	r3, #1
 800c34c:	4543      	cmp	r3, r8
 800c34e:	dc09      	bgt.n	800c364 <_printf_float+0x264>
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	079b      	lsls	r3, r3, #30
 800c354:	f100 8105 	bmi.w	800c562 <_printf_float+0x462>
 800c358:	68e0      	ldr	r0, [r4, #12]
 800c35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c35c:	4298      	cmp	r0, r3
 800c35e:	bfb8      	it	lt
 800c360:	4618      	movlt	r0, r3
 800c362:	e730      	b.n	800c1c6 <_printf_float+0xc6>
 800c364:	2301      	movs	r3, #1
 800c366:	464a      	mov	r2, r9
 800c368:	4631      	mov	r1, r6
 800c36a:	4628      	mov	r0, r5
 800c36c:	47b8      	blx	r7
 800c36e:	3001      	adds	r0, #1
 800c370:	f43f af27 	beq.w	800c1c2 <_printf_float+0xc2>
 800c374:	f108 0801 	add.w	r8, r8, #1
 800c378:	e7e6      	b.n	800c348 <_printf_float+0x248>
 800c37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dc39      	bgt.n	800c3f4 <_printf_float+0x2f4>
 800c380:	4a1b      	ldr	r2, [pc, #108]	; (800c3f0 <_printf_float+0x2f0>)
 800c382:	2301      	movs	r3, #1
 800c384:	4631      	mov	r1, r6
 800c386:	4628      	mov	r0, r5
 800c388:	47b8      	blx	r7
 800c38a:	3001      	adds	r0, #1
 800c38c:	f43f af19 	beq.w	800c1c2 <_printf_float+0xc2>
 800c390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c394:	4313      	orrs	r3, r2
 800c396:	d102      	bne.n	800c39e <_printf_float+0x29e>
 800c398:	6823      	ldr	r3, [r4, #0]
 800c39a:	07d9      	lsls	r1, r3, #31
 800c39c:	d5d8      	bpl.n	800c350 <_printf_float+0x250>
 800c39e:	ee18 3a10 	vmov	r3, s16
 800c3a2:	4652      	mov	r2, sl
 800c3a4:	4631      	mov	r1, r6
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	47b8      	blx	r7
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	f43f af09 	beq.w	800c1c2 <_printf_float+0xc2>
 800c3b0:	f04f 0900 	mov.w	r9, #0
 800c3b4:	f104 0a1a 	add.w	sl, r4, #26
 800c3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ba:	425b      	negs	r3, r3
 800c3bc:	454b      	cmp	r3, r9
 800c3be:	dc01      	bgt.n	800c3c4 <_printf_float+0x2c4>
 800c3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3c2:	e792      	b.n	800c2ea <_printf_float+0x1ea>
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	4652      	mov	r2, sl
 800c3c8:	4631      	mov	r1, r6
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	47b8      	blx	r7
 800c3ce:	3001      	adds	r0, #1
 800c3d0:	f43f aef7 	beq.w	800c1c2 <_printf_float+0xc2>
 800c3d4:	f109 0901 	add.w	r9, r9, #1
 800c3d8:	e7ee      	b.n	800c3b8 <_printf_float+0x2b8>
 800c3da:	bf00      	nop
 800c3dc:	7fefffff 	.word	0x7fefffff
 800c3e0:	080107e8 	.word	0x080107e8
 800c3e4:	080107ec 	.word	0x080107ec
 800c3e8:	080107f4 	.word	0x080107f4
 800c3ec:	080107f0 	.word	0x080107f0
 800c3f0:	080107f8 	.word	0x080107f8
 800c3f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	bfa8      	it	ge
 800c3fc:	461a      	movge	r2, r3
 800c3fe:	2a00      	cmp	r2, #0
 800c400:	4691      	mov	r9, r2
 800c402:	dc37      	bgt.n	800c474 <_printf_float+0x374>
 800c404:	f04f 0b00 	mov.w	fp, #0
 800c408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c40c:	f104 021a 	add.w	r2, r4, #26
 800c410:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c412:	9305      	str	r3, [sp, #20]
 800c414:	eba3 0309 	sub.w	r3, r3, r9
 800c418:	455b      	cmp	r3, fp
 800c41a:	dc33      	bgt.n	800c484 <_printf_float+0x384>
 800c41c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c420:	429a      	cmp	r2, r3
 800c422:	db3b      	blt.n	800c49c <_printf_float+0x39c>
 800c424:	6823      	ldr	r3, [r4, #0]
 800c426:	07da      	lsls	r2, r3, #31
 800c428:	d438      	bmi.n	800c49c <_printf_float+0x39c>
 800c42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c42c:	9a05      	ldr	r2, [sp, #20]
 800c42e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c430:	1a9a      	subs	r2, r3, r2
 800c432:	eba3 0901 	sub.w	r9, r3, r1
 800c436:	4591      	cmp	r9, r2
 800c438:	bfa8      	it	ge
 800c43a:	4691      	movge	r9, r2
 800c43c:	f1b9 0f00 	cmp.w	r9, #0
 800c440:	dc35      	bgt.n	800c4ae <_printf_float+0x3ae>
 800c442:	f04f 0800 	mov.w	r8, #0
 800c446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c44a:	f104 0a1a 	add.w	sl, r4, #26
 800c44e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c452:	1a9b      	subs	r3, r3, r2
 800c454:	eba3 0309 	sub.w	r3, r3, r9
 800c458:	4543      	cmp	r3, r8
 800c45a:	f77f af79 	ble.w	800c350 <_printf_float+0x250>
 800c45e:	2301      	movs	r3, #1
 800c460:	4652      	mov	r2, sl
 800c462:	4631      	mov	r1, r6
 800c464:	4628      	mov	r0, r5
 800c466:	47b8      	blx	r7
 800c468:	3001      	adds	r0, #1
 800c46a:	f43f aeaa 	beq.w	800c1c2 <_printf_float+0xc2>
 800c46e:	f108 0801 	add.w	r8, r8, #1
 800c472:	e7ec      	b.n	800c44e <_printf_float+0x34e>
 800c474:	4613      	mov	r3, r2
 800c476:	4631      	mov	r1, r6
 800c478:	4642      	mov	r2, r8
 800c47a:	4628      	mov	r0, r5
 800c47c:	47b8      	blx	r7
 800c47e:	3001      	adds	r0, #1
 800c480:	d1c0      	bne.n	800c404 <_printf_float+0x304>
 800c482:	e69e      	b.n	800c1c2 <_printf_float+0xc2>
 800c484:	2301      	movs	r3, #1
 800c486:	4631      	mov	r1, r6
 800c488:	4628      	mov	r0, r5
 800c48a:	9205      	str	r2, [sp, #20]
 800c48c:	47b8      	blx	r7
 800c48e:	3001      	adds	r0, #1
 800c490:	f43f ae97 	beq.w	800c1c2 <_printf_float+0xc2>
 800c494:	9a05      	ldr	r2, [sp, #20]
 800c496:	f10b 0b01 	add.w	fp, fp, #1
 800c49a:	e7b9      	b.n	800c410 <_printf_float+0x310>
 800c49c:	ee18 3a10 	vmov	r3, s16
 800c4a0:	4652      	mov	r2, sl
 800c4a2:	4631      	mov	r1, r6
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	47b8      	blx	r7
 800c4a8:	3001      	adds	r0, #1
 800c4aa:	d1be      	bne.n	800c42a <_printf_float+0x32a>
 800c4ac:	e689      	b.n	800c1c2 <_printf_float+0xc2>
 800c4ae:	9a05      	ldr	r2, [sp, #20]
 800c4b0:	464b      	mov	r3, r9
 800c4b2:	4442      	add	r2, r8
 800c4b4:	4631      	mov	r1, r6
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	47b8      	blx	r7
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	d1c1      	bne.n	800c442 <_printf_float+0x342>
 800c4be:	e680      	b.n	800c1c2 <_printf_float+0xc2>
 800c4c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4c2:	2a01      	cmp	r2, #1
 800c4c4:	dc01      	bgt.n	800c4ca <_printf_float+0x3ca>
 800c4c6:	07db      	lsls	r3, r3, #31
 800c4c8:	d538      	bpl.n	800c53c <_printf_float+0x43c>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	4642      	mov	r2, r8
 800c4ce:	4631      	mov	r1, r6
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	47b8      	blx	r7
 800c4d4:	3001      	adds	r0, #1
 800c4d6:	f43f ae74 	beq.w	800c1c2 <_printf_float+0xc2>
 800c4da:	ee18 3a10 	vmov	r3, s16
 800c4de:	4652      	mov	r2, sl
 800c4e0:	4631      	mov	r1, r6
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	47b8      	blx	r7
 800c4e6:	3001      	adds	r0, #1
 800c4e8:	f43f ae6b 	beq.w	800c1c2 <_printf_float+0xc2>
 800c4ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	f7f4 fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4f8:	b9d8      	cbnz	r0, 800c532 <_printf_float+0x432>
 800c4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4fc:	f108 0201 	add.w	r2, r8, #1
 800c500:	3b01      	subs	r3, #1
 800c502:	4631      	mov	r1, r6
 800c504:	4628      	mov	r0, r5
 800c506:	47b8      	blx	r7
 800c508:	3001      	adds	r0, #1
 800c50a:	d10e      	bne.n	800c52a <_printf_float+0x42a>
 800c50c:	e659      	b.n	800c1c2 <_printf_float+0xc2>
 800c50e:	2301      	movs	r3, #1
 800c510:	4652      	mov	r2, sl
 800c512:	4631      	mov	r1, r6
 800c514:	4628      	mov	r0, r5
 800c516:	47b8      	blx	r7
 800c518:	3001      	adds	r0, #1
 800c51a:	f43f ae52 	beq.w	800c1c2 <_printf_float+0xc2>
 800c51e:	f108 0801 	add.w	r8, r8, #1
 800c522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c524:	3b01      	subs	r3, #1
 800c526:	4543      	cmp	r3, r8
 800c528:	dcf1      	bgt.n	800c50e <_printf_float+0x40e>
 800c52a:	464b      	mov	r3, r9
 800c52c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c530:	e6dc      	b.n	800c2ec <_printf_float+0x1ec>
 800c532:	f04f 0800 	mov.w	r8, #0
 800c536:	f104 0a1a 	add.w	sl, r4, #26
 800c53a:	e7f2      	b.n	800c522 <_printf_float+0x422>
 800c53c:	2301      	movs	r3, #1
 800c53e:	4642      	mov	r2, r8
 800c540:	e7df      	b.n	800c502 <_printf_float+0x402>
 800c542:	2301      	movs	r3, #1
 800c544:	464a      	mov	r2, r9
 800c546:	4631      	mov	r1, r6
 800c548:	4628      	mov	r0, r5
 800c54a:	47b8      	blx	r7
 800c54c:	3001      	adds	r0, #1
 800c54e:	f43f ae38 	beq.w	800c1c2 <_printf_float+0xc2>
 800c552:	f108 0801 	add.w	r8, r8, #1
 800c556:	68e3      	ldr	r3, [r4, #12]
 800c558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c55a:	1a5b      	subs	r3, r3, r1
 800c55c:	4543      	cmp	r3, r8
 800c55e:	dcf0      	bgt.n	800c542 <_printf_float+0x442>
 800c560:	e6fa      	b.n	800c358 <_printf_float+0x258>
 800c562:	f04f 0800 	mov.w	r8, #0
 800c566:	f104 0919 	add.w	r9, r4, #25
 800c56a:	e7f4      	b.n	800c556 <_printf_float+0x456>

0800c56c <_printf_common>:
 800c56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c570:	4616      	mov	r6, r2
 800c572:	4699      	mov	r9, r3
 800c574:	688a      	ldr	r2, [r1, #8]
 800c576:	690b      	ldr	r3, [r1, #16]
 800c578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c57c:	4293      	cmp	r3, r2
 800c57e:	bfb8      	it	lt
 800c580:	4613      	movlt	r3, r2
 800c582:	6033      	str	r3, [r6, #0]
 800c584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c588:	4607      	mov	r7, r0
 800c58a:	460c      	mov	r4, r1
 800c58c:	b10a      	cbz	r2, 800c592 <_printf_common+0x26>
 800c58e:	3301      	adds	r3, #1
 800c590:	6033      	str	r3, [r6, #0]
 800c592:	6823      	ldr	r3, [r4, #0]
 800c594:	0699      	lsls	r1, r3, #26
 800c596:	bf42      	ittt	mi
 800c598:	6833      	ldrmi	r3, [r6, #0]
 800c59a:	3302      	addmi	r3, #2
 800c59c:	6033      	strmi	r3, [r6, #0]
 800c59e:	6825      	ldr	r5, [r4, #0]
 800c5a0:	f015 0506 	ands.w	r5, r5, #6
 800c5a4:	d106      	bne.n	800c5b4 <_printf_common+0x48>
 800c5a6:	f104 0a19 	add.w	sl, r4, #25
 800c5aa:	68e3      	ldr	r3, [r4, #12]
 800c5ac:	6832      	ldr	r2, [r6, #0]
 800c5ae:	1a9b      	subs	r3, r3, r2
 800c5b0:	42ab      	cmp	r3, r5
 800c5b2:	dc26      	bgt.n	800c602 <_printf_common+0x96>
 800c5b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5b8:	1e13      	subs	r3, r2, #0
 800c5ba:	6822      	ldr	r2, [r4, #0]
 800c5bc:	bf18      	it	ne
 800c5be:	2301      	movne	r3, #1
 800c5c0:	0692      	lsls	r2, r2, #26
 800c5c2:	d42b      	bmi.n	800c61c <_printf_common+0xb0>
 800c5c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5c8:	4649      	mov	r1, r9
 800c5ca:	4638      	mov	r0, r7
 800c5cc:	47c0      	blx	r8
 800c5ce:	3001      	adds	r0, #1
 800c5d0:	d01e      	beq.n	800c610 <_printf_common+0xa4>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	68e5      	ldr	r5, [r4, #12]
 800c5d6:	6832      	ldr	r2, [r6, #0]
 800c5d8:	f003 0306 	and.w	r3, r3, #6
 800c5dc:	2b04      	cmp	r3, #4
 800c5de:	bf08      	it	eq
 800c5e0:	1aad      	subeq	r5, r5, r2
 800c5e2:	68a3      	ldr	r3, [r4, #8]
 800c5e4:	6922      	ldr	r2, [r4, #16]
 800c5e6:	bf0c      	ite	eq
 800c5e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5ec:	2500      	movne	r5, #0
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	bfc4      	itt	gt
 800c5f2:	1a9b      	subgt	r3, r3, r2
 800c5f4:	18ed      	addgt	r5, r5, r3
 800c5f6:	2600      	movs	r6, #0
 800c5f8:	341a      	adds	r4, #26
 800c5fa:	42b5      	cmp	r5, r6
 800c5fc:	d11a      	bne.n	800c634 <_printf_common+0xc8>
 800c5fe:	2000      	movs	r0, #0
 800c600:	e008      	b.n	800c614 <_printf_common+0xa8>
 800c602:	2301      	movs	r3, #1
 800c604:	4652      	mov	r2, sl
 800c606:	4649      	mov	r1, r9
 800c608:	4638      	mov	r0, r7
 800c60a:	47c0      	blx	r8
 800c60c:	3001      	adds	r0, #1
 800c60e:	d103      	bne.n	800c618 <_printf_common+0xac>
 800c610:	f04f 30ff 	mov.w	r0, #4294967295
 800c614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c618:	3501      	adds	r5, #1
 800c61a:	e7c6      	b.n	800c5aa <_printf_common+0x3e>
 800c61c:	18e1      	adds	r1, r4, r3
 800c61e:	1c5a      	adds	r2, r3, #1
 800c620:	2030      	movs	r0, #48	; 0x30
 800c622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c626:	4422      	add	r2, r4
 800c628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c62c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c630:	3302      	adds	r3, #2
 800c632:	e7c7      	b.n	800c5c4 <_printf_common+0x58>
 800c634:	2301      	movs	r3, #1
 800c636:	4622      	mov	r2, r4
 800c638:	4649      	mov	r1, r9
 800c63a:	4638      	mov	r0, r7
 800c63c:	47c0      	blx	r8
 800c63e:	3001      	adds	r0, #1
 800c640:	d0e6      	beq.n	800c610 <_printf_common+0xa4>
 800c642:	3601      	adds	r6, #1
 800c644:	e7d9      	b.n	800c5fa <_printf_common+0x8e>
	...

0800c648 <_printf_i>:
 800c648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c64c:	7e0f      	ldrb	r7, [r1, #24]
 800c64e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c650:	2f78      	cmp	r7, #120	; 0x78
 800c652:	4691      	mov	r9, r2
 800c654:	4680      	mov	r8, r0
 800c656:	460c      	mov	r4, r1
 800c658:	469a      	mov	sl, r3
 800c65a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c65e:	d807      	bhi.n	800c670 <_printf_i+0x28>
 800c660:	2f62      	cmp	r7, #98	; 0x62
 800c662:	d80a      	bhi.n	800c67a <_printf_i+0x32>
 800c664:	2f00      	cmp	r7, #0
 800c666:	f000 80d8 	beq.w	800c81a <_printf_i+0x1d2>
 800c66a:	2f58      	cmp	r7, #88	; 0x58
 800c66c:	f000 80a3 	beq.w	800c7b6 <_printf_i+0x16e>
 800c670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c678:	e03a      	b.n	800c6f0 <_printf_i+0xa8>
 800c67a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c67e:	2b15      	cmp	r3, #21
 800c680:	d8f6      	bhi.n	800c670 <_printf_i+0x28>
 800c682:	a101      	add	r1, pc, #4	; (adr r1, 800c688 <_printf_i+0x40>)
 800c684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c688:	0800c6e1 	.word	0x0800c6e1
 800c68c:	0800c6f5 	.word	0x0800c6f5
 800c690:	0800c671 	.word	0x0800c671
 800c694:	0800c671 	.word	0x0800c671
 800c698:	0800c671 	.word	0x0800c671
 800c69c:	0800c671 	.word	0x0800c671
 800c6a0:	0800c6f5 	.word	0x0800c6f5
 800c6a4:	0800c671 	.word	0x0800c671
 800c6a8:	0800c671 	.word	0x0800c671
 800c6ac:	0800c671 	.word	0x0800c671
 800c6b0:	0800c671 	.word	0x0800c671
 800c6b4:	0800c801 	.word	0x0800c801
 800c6b8:	0800c725 	.word	0x0800c725
 800c6bc:	0800c7e3 	.word	0x0800c7e3
 800c6c0:	0800c671 	.word	0x0800c671
 800c6c4:	0800c671 	.word	0x0800c671
 800c6c8:	0800c823 	.word	0x0800c823
 800c6cc:	0800c671 	.word	0x0800c671
 800c6d0:	0800c725 	.word	0x0800c725
 800c6d4:	0800c671 	.word	0x0800c671
 800c6d8:	0800c671 	.word	0x0800c671
 800c6dc:	0800c7eb 	.word	0x0800c7eb
 800c6e0:	682b      	ldr	r3, [r5, #0]
 800c6e2:	1d1a      	adds	r2, r3, #4
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	602a      	str	r2, [r5, #0]
 800c6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e0a3      	b.n	800c83c <_printf_i+0x1f4>
 800c6f4:	6820      	ldr	r0, [r4, #0]
 800c6f6:	6829      	ldr	r1, [r5, #0]
 800c6f8:	0606      	lsls	r6, r0, #24
 800c6fa:	f101 0304 	add.w	r3, r1, #4
 800c6fe:	d50a      	bpl.n	800c716 <_printf_i+0xce>
 800c700:	680e      	ldr	r6, [r1, #0]
 800c702:	602b      	str	r3, [r5, #0]
 800c704:	2e00      	cmp	r6, #0
 800c706:	da03      	bge.n	800c710 <_printf_i+0xc8>
 800c708:	232d      	movs	r3, #45	; 0x2d
 800c70a:	4276      	negs	r6, r6
 800c70c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c710:	485e      	ldr	r0, [pc, #376]	; (800c88c <_printf_i+0x244>)
 800c712:	230a      	movs	r3, #10
 800c714:	e019      	b.n	800c74a <_printf_i+0x102>
 800c716:	680e      	ldr	r6, [r1, #0]
 800c718:	602b      	str	r3, [r5, #0]
 800c71a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c71e:	bf18      	it	ne
 800c720:	b236      	sxthne	r6, r6
 800c722:	e7ef      	b.n	800c704 <_printf_i+0xbc>
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	6820      	ldr	r0, [r4, #0]
 800c728:	1d19      	adds	r1, r3, #4
 800c72a:	6029      	str	r1, [r5, #0]
 800c72c:	0601      	lsls	r1, r0, #24
 800c72e:	d501      	bpl.n	800c734 <_printf_i+0xec>
 800c730:	681e      	ldr	r6, [r3, #0]
 800c732:	e002      	b.n	800c73a <_printf_i+0xf2>
 800c734:	0646      	lsls	r6, r0, #25
 800c736:	d5fb      	bpl.n	800c730 <_printf_i+0xe8>
 800c738:	881e      	ldrh	r6, [r3, #0]
 800c73a:	4854      	ldr	r0, [pc, #336]	; (800c88c <_printf_i+0x244>)
 800c73c:	2f6f      	cmp	r7, #111	; 0x6f
 800c73e:	bf0c      	ite	eq
 800c740:	2308      	moveq	r3, #8
 800c742:	230a      	movne	r3, #10
 800c744:	2100      	movs	r1, #0
 800c746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c74a:	6865      	ldr	r5, [r4, #4]
 800c74c:	60a5      	str	r5, [r4, #8]
 800c74e:	2d00      	cmp	r5, #0
 800c750:	bfa2      	ittt	ge
 800c752:	6821      	ldrge	r1, [r4, #0]
 800c754:	f021 0104 	bicge.w	r1, r1, #4
 800c758:	6021      	strge	r1, [r4, #0]
 800c75a:	b90e      	cbnz	r6, 800c760 <_printf_i+0x118>
 800c75c:	2d00      	cmp	r5, #0
 800c75e:	d04d      	beq.n	800c7fc <_printf_i+0x1b4>
 800c760:	4615      	mov	r5, r2
 800c762:	fbb6 f1f3 	udiv	r1, r6, r3
 800c766:	fb03 6711 	mls	r7, r3, r1, r6
 800c76a:	5dc7      	ldrb	r7, [r0, r7]
 800c76c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c770:	4637      	mov	r7, r6
 800c772:	42bb      	cmp	r3, r7
 800c774:	460e      	mov	r6, r1
 800c776:	d9f4      	bls.n	800c762 <_printf_i+0x11a>
 800c778:	2b08      	cmp	r3, #8
 800c77a:	d10b      	bne.n	800c794 <_printf_i+0x14c>
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	07de      	lsls	r6, r3, #31
 800c780:	d508      	bpl.n	800c794 <_printf_i+0x14c>
 800c782:	6923      	ldr	r3, [r4, #16]
 800c784:	6861      	ldr	r1, [r4, #4]
 800c786:	4299      	cmp	r1, r3
 800c788:	bfde      	ittt	le
 800c78a:	2330      	movle	r3, #48	; 0x30
 800c78c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c790:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c794:	1b52      	subs	r2, r2, r5
 800c796:	6122      	str	r2, [r4, #16]
 800c798:	f8cd a000 	str.w	sl, [sp]
 800c79c:	464b      	mov	r3, r9
 800c79e:	aa03      	add	r2, sp, #12
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	f7ff fee2 	bl	800c56c <_printf_common>
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d14c      	bne.n	800c846 <_printf_i+0x1fe>
 800c7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b0:	b004      	add	sp, #16
 800c7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b6:	4835      	ldr	r0, [pc, #212]	; (800c88c <_printf_i+0x244>)
 800c7b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c7bc:	6829      	ldr	r1, [r5, #0]
 800c7be:	6823      	ldr	r3, [r4, #0]
 800c7c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c7c4:	6029      	str	r1, [r5, #0]
 800c7c6:	061d      	lsls	r5, r3, #24
 800c7c8:	d514      	bpl.n	800c7f4 <_printf_i+0x1ac>
 800c7ca:	07df      	lsls	r7, r3, #31
 800c7cc:	bf44      	itt	mi
 800c7ce:	f043 0320 	orrmi.w	r3, r3, #32
 800c7d2:	6023      	strmi	r3, [r4, #0]
 800c7d4:	b91e      	cbnz	r6, 800c7de <_printf_i+0x196>
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	f023 0320 	bic.w	r3, r3, #32
 800c7dc:	6023      	str	r3, [r4, #0]
 800c7de:	2310      	movs	r3, #16
 800c7e0:	e7b0      	b.n	800c744 <_printf_i+0xfc>
 800c7e2:	6823      	ldr	r3, [r4, #0]
 800c7e4:	f043 0320 	orr.w	r3, r3, #32
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	2378      	movs	r3, #120	; 0x78
 800c7ec:	4828      	ldr	r0, [pc, #160]	; (800c890 <_printf_i+0x248>)
 800c7ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c7f2:	e7e3      	b.n	800c7bc <_printf_i+0x174>
 800c7f4:	0659      	lsls	r1, r3, #25
 800c7f6:	bf48      	it	mi
 800c7f8:	b2b6      	uxthmi	r6, r6
 800c7fa:	e7e6      	b.n	800c7ca <_printf_i+0x182>
 800c7fc:	4615      	mov	r5, r2
 800c7fe:	e7bb      	b.n	800c778 <_printf_i+0x130>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	6826      	ldr	r6, [r4, #0]
 800c804:	6961      	ldr	r1, [r4, #20]
 800c806:	1d18      	adds	r0, r3, #4
 800c808:	6028      	str	r0, [r5, #0]
 800c80a:	0635      	lsls	r5, r6, #24
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	d501      	bpl.n	800c814 <_printf_i+0x1cc>
 800c810:	6019      	str	r1, [r3, #0]
 800c812:	e002      	b.n	800c81a <_printf_i+0x1d2>
 800c814:	0670      	lsls	r0, r6, #25
 800c816:	d5fb      	bpl.n	800c810 <_printf_i+0x1c8>
 800c818:	8019      	strh	r1, [r3, #0]
 800c81a:	2300      	movs	r3, #0
 800c81c:	6123      	str	r3, [r4, #16]
 800c81e:	4615      	mov	r5, r2
 800c820:	e7ba      	b.n	800c798 <_printf_i+0x150>
 800c822:	682b      	ldr	r3, [r5, #0]
 800c824:	1d1a      	adds	r2, r3, #4
 800c826:	602a      	str	r2, [r5, #0]
 800c828:	681d      	ldr	r5, [r3, #0]
 800c82a:	6862      	ldr	r2, [r4, #4]
 800c82c:	2100      	movs	r1, #0
 800c82e:	4628      	mov	r0, r5
 800c830:	f7f3 fcd6 	bl	80001e0 <memchr>
 800c834:	b108      	cbz	r0, 800c83a <_printf_i+0x1f2>
 800c836:	1b40      	subs	r0, r0, r5
 800c838:	6060      	str	r0, [r4, #4]
 800c83a:	6863      	ldr	r3, [r4, #4]
 800c83c:	6123      	str	r3, [r4, #16]
 800c83e:	2300      	movs	r3, #0
 800c840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c844:	e7a8      	b.n	800c798 <_printf_i+0x150>
 800c846:	6923      	ldr	r3, [r4, #16]
 800c848:	462a      	mov	r2, r5
 800c84a:	4649      	mov	r1, r9
 800c84c:	4640      	mov	r0, r8
 800c84e:	47d0      	blx	sl
 800c850:	3001      	adds	r0, #1
 800c852:	d0ab      	beq.n	800c7ac <_printf_i+0x164>
 800c854:	6823      	ldr	r3, [r4, #0]
 800c856:	079b      	lsls	r3, r3, #30
 800c858:	d413      	bmi.n	800c882 <_printf_i+0x23a>
 800c85a:	68e0      	ldr	r0, [r4, #12]
 800c85c:	9b03      	ldr	r3, [sp, #12]
 800c85e:	4298      	cmp	r0, r3
 800c860:	bfb8      	it	lt
 800c862:	4618      	movlt	r0, r3
 800c864:	e7a4      	b.n	800c7b0 <_printf_i+0x168>
 800c866:	2301      	movs	r3, #1
 800c868:	4632      	mov	r2, r6
 800c86a:	4649      	mov	r1, r9
 800c86c:	4640      	mov	r0, r8
 800c86e:	47d0      	blx	sl
 800c870:	3001      	adds	r0, #1
 800c872:	d09b      	beq.n	800c7ac <_printf_i+0x164>
 800c874:	3501      	adds	r5, #1
 800c876:	68e3      	ldr	r3, [r4, #12]
 800c878:	9903      	ldr	r1, [sp, #12]
 800c87a:	1a5b      	subs	r3, r3, r1
 800c87c:	42ab      	cmp	r3, r5
 800c87e:	dcf2      	bgt.n	800c866 <_printf_i+0x21e>
 800c880:	e7eb      	b.n	800c85a <_printf_i+0x212>
 800c882:	2500      	movs	r5, #0
 800c884:	f104 0619 	add.w	r6, r4, #25
 800c888:	e7f5      	b.n	800c876 <_printf_i+0x22e>
 800c88a:	bf00      	nop
 800c88c:	080107fa 	.word	0x080107fa
 800c890:	0801080b 	.word	0x0801080b

0800c894 <_scanf_float>:
 800c894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c898:	b087      	sub	sp, #28
 800c89a:	4617      	mov	r7, r2
 800c89c:	9303      	str	r3, [sp, #12]
 800c89e:	688b      	ldr	r3, [r1, #8]
 800c8a0:	1e5a      	subs	r2, r3, #1
 800c8a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c8a6:	bf83      	ittte	hi
 800c8a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c8ac:	195b      	addhi	r3, r3, r5
 800c8ae:	9302      	strhi	r3, [sp, #8]
 800c8b0:	2300      	movls	r3, #0
 800c8b2:	bf86      	itte	hi
 800c8b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c8b8:	608b      	strhi	r3, [r1, #8]
 800c8ba:	9302      	strls	r3, [sp, #8]
 800c8bc:	680b      	ldr	r3, [r1, #0]
 800c8be:	468b      	mov	fp, r1
 800c8c0:	2500      	movs	r5, #0
 800c8c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c8c6:	f84b 3b1c 	str.w	r3, [fp], #28
 800c8ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c8ce:	4680      	mov	r8, r0
 800c8d0:	460c      	mov	r4, r1
 800c8d2:	465e      	mov	r6, fp
 800c8d4:	46aa      	mov	sl, r5
 800c8d6:	46a9      	mov	r9, r5
 800c8d8:	9501      	str	r5, [sp, #4]
 800c8da:	68a2      	ldr	r2, [r4, #8]
 800c8dc:	b152      	cbz	r2, 800c8f4 <_scanf_float+0x60>
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	2b4e      	cmp	r3, #78	; 0x4e
 800c8e4:	d864      	bhi.n	800c9b0 <_scanf_float+0x11c>
 800c8e6:	2b40      	cmp	r3, #64	; 0x40
 800c8e8:	d83c      	bhi.n	800c964 <_scanf_float+0xd0>
 800c8ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c8ee:	b2c8      	uxtb	r0, r1
 800c8f0:	280e      	cmp	r0, #14
 800c8f2:	d93a      	bls.n	800c96a <_scanf_float+0xd6>
 800c8f4:	f1b9 0f00 	cmp.w	r9, #0
 800c8f8:	d003      	beq.n	800c902 <_scanf_float+0x6e>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c906:	f1ba 0f01 	cmp.w	sl, #1
 800c90a:	f200 8113 	bhi.w	800cb34 <_scanf_float+0x2a0>
 800c90e:	455e      	cmp	r6, fp
 800c910:	f200 8105 	bhi.w	800cb1e <_scanf_float+0x28a>
 800c914:	2501      	movs	r5, #1
 800c916:	4628      	mov	r0, r5
 800c918:	b007      	add	sp, #28
 800c91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c922:	2a0d      	cmp	r2, #13
 800c924:	d8e6      	bhi.n	800c8f4 <_scanf_float+0x60>
 800c926:	a101      	add	r1, pc, #4	; (adr r1, 800c92c <_scanf_float+0x98>)
 800c928:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c92c:	0800ca6b 	.word	0x0800ca6b
 800c930:	0800c8f5 	.word	0x0800c8f5
 800c934:	0800c8f5 	.word	0x0800c8f5
 800c938:	0800c8f5 	.word	0x0800c8f5
 800c93c:	0800cacb 	.word	0x0800cacb
 800c940:	0800caa3 	.word	0x0800caa3
 800c944:	0800c8f5 	.word	0x0800c8f5
 800c948:	0800c8f5 	.word	0x0800c8f5
 800c94c:	0800ca79 	.word	0x0800ca79
 800c950:	0800c8f5 	.word	0x0800c8f5
 800c954:	0800c8f5 	.word	0x0800c8f5
 800c958:	0800c8f5 	.word	0x0800c8f5
 800c95c:	0800c8f5 	.word	0x0800c8f5
 800c960:	0800ca31 	.word	0x0800ca31
 800c964:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c968:	e7db      	b.n	800c922 <_scanf_float+0x8e>
 800c96a:	290e      	cmp	r1, #14
 800c96c:	d8c2      	bhi.n	800c8f4 <_scanf_float+0x60>
 800c96e:	a001      	add	r0, pc, #4	; (adr r0, 800c974 <_scanf_float+0xe0>)
 800c970:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c974:	0800ca23 	.word	0x0800ca23
 800c978:	0800c8f5 	.word	0x0800c8f5
 800c97c:	0800ca23 	.word	0x0800ca23
 800c980:	0800cab7 	.word	0x0800cab7
 800c984:	0800c8f5 	.word	0x0800c8f5
 800c988:	0800c9d1 	.word	0x0800c9d1
 800c98c:	0800ca0d 	.word	0x0800ca0d
 800c990:	0800ca0d 	.word	0x0800ca0d
 800c994:	0800ca0d 	.word	0x0800ca0d
 800c998:	0800ca0d 	.word	0x0800ca0d
 800c99c:	0800ca0d 	.word	0x0800ca0d
 800c9a0:	0800ca0d 	.word	0x0800ca0d
 800c9a4:	0800ca0d 	.word	0x0800ca0d
 800c9a8:	0800ca0d 	.word	0x0800ca0d
 800c9ac:	0800ca0d 	.word	0x0800ca0d
 800c9b0:	2b6e      	cmp	r3, #110	; 0x6e
 800c9b2:	d809      	bhi.n	800c9c8 <_scanf_float+0x134>
 800c9b4:	2b60      	cmp	r3, #96	; 0x60
 800c9b6:	d8b2      	bhi.n	800c91e <_scanf_float+0x8a>
 800c9b8:	2b54      	cmp	r3, #84	; 0x54
 800c9ba:	d077      	beq.n	800caac <_scanf_float+0x218>
 800c9bc:	2b59      	cmp	r3, #89	; 0x59
 800c9be:	d199      	bne.n	800c8f4 <_scanf_float+0x60>
 800c9c0:	2d07      	cmp	r5, #7
 800c9c2:	d197      	bne.n	800c8f4 <_scanf_float+0x60>
 800c9c4:	2508      	movs	r5, #8
 800c9c6:	e029      	b.n	800ca1c <_scanf_float+0x188>
 800c9c8:	2b74      	cmp	r3, #116	; 0x74
 800c9ca:	d06f      	beq.n	800caac <_scanf_float+0x218>
 800c9cc:	2b79      	cmp	r3, #121	; 0x79
 800c9ce:	e7f6      	b.n	800c9be <_scanf_float+0x12a>
 800c9d0:	6821      	ldr	r1, [r4, #0]
 800c9d2:	05c8      	lsls	r0, r1, #23
 800c9d4:	d51a      	bpl.n	800ca0c <_scanf_float+0x178>
 800c9d6:	9b02      	ldr	r3, [sp, #8]
 800c9d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c9dc:	6021      	str	r1, [r4, #0]
 800c9de:	f109 0901 	add.w	r9, r9, #1
 800c9e2:	b11b      	cbz	r3, 800c9ec <_scanf_float+0x158>
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	3201      	adds	r2, #1
 800c9e8:	9302      	str	r3, [sp, #8]
 800c9ea:	60a2      	str	r2, [r4, #8]
 800c9ec:	68a3      	ldr	r3, [r4, #8]
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	60a3      	str	r3, [r4, #8]
 800c9f2:	6923      	ldr	r3, [r4, #16]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	6123      	str	r3, [r4, #16]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	607b      	str	r3, [r7, #4]
 800ca00:	f340 8084 	ble.w	800cb0c <_scanf_float+0x278>
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	3301      	adds	r3, #1
 800ca08:	603b      	str	r3, [r7, #0]
 800ca0a:	e766      	b.n	800c8da <_scanf_float+0x46>
 800ca0c:	eb1a 0f05 	cmn.w	sl, r5
 800ca10:	f47f af70 	bne.w	800c8f4 <_scanf_float+0x60>
 800ca14:	6822      	ldr	r2, [r4, #0]
 800ca16:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ca1a:	6022      	str	r2, [r4, #0]
 800ca1c:	f806 3b01 	strb.w	r3, [r6], #1
 800ca20:	e7e4      	b.n	800c9ec <_scanf_float+0x158>
 800ca22:	6822      	ldr	r2, [r4, #0]
 800ca24:	0610      	lsls	r0, r2, #24
 800ca26:	f57f af65 	bpl.w	800c8f4 <_scanf_float+0x60>
 800ca2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ca2e:	e7f4      	b.n	800ca1a <_scanf_float+0x186>
 800ca30:	f1ba 0f00 	cmp.w	sl, #0
 800ca34:	d10e      	bne.n	800ca54 <_scanf_float+0x1c0>
 800ca36:	f1b9 0f00 	cmp.w	r9, #0
 800ca3a:	d10e      	bne.n	800ca5a <_scanf_float+0x1c6>
 800ca3c:	6822      	ldr	r2, [r4, #0]
 800ca3e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ca42:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ca46:	d108      	bne.n	800ca5a <_scanf_float+0x1c6>
 800ca48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ca4c:	6022      	str	r2, [r4, #0]
 800ca4e:	f04f 0a01 	mov.w	sl, #1
 800ca52:	e7e3      	b.n	800ca1c <_scanf_float+0x188>
 800ca54:	f1ba 0f02 	cmp.w	sl, #2
 800ca58:	d055      	beq.n	800cb06 <_scanf_float+0x272>
 800ca5a:	2d01      	cmp	r5, #1
 800ca5c:	d002      	beq.n	800ca64 <_scanf_float+0x1d0>
 800ca5e:	2d04      	cmp	r5, #4
 800ca60:	f47f af48 	bne.w	800c8f4 <_scanf_float+0x60>
 800ca64:	3501      	adds	r5, #1
 800ca66:	b2ed      	uxtb	r5, r5
 800ca68:	e7d8      	b.n	800ca1c <_scanf_float+0x188>
 800ca6a:	f1ba 0f01 	cmp.w	sl, #1
 800ca6e:	f47f af41 	bne.w	800c8f4 <_scanf_float+0x60>
 800ca72:	f04f 0a02 	mov.w	sl, #2
 800ca76:	e7d1      	b.n	800ca1c <_scanf_float+0x188>
 800ca78:	b97d      	cbnz	r5, 800ca9a <_scanf_float+0x206>
 800ca7a:	f1b9 0f00 	cmp.w	r9, #0
 800ca7e:	f47f af3c 	bne.w	800c8fa <_scanf_float+0x66>
 800ca82:	6822      	ldr	r2, [r4, #0]
 800ca84:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ca88:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ca8c:	f47f af39 	bne.w	800c902 <_scanf_float+0x6e>
 800ca90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ca94:	6022      	str	r2, [r4, #0]
 800ca96:	2501      	movs	r5, #1
 800ca98:	e7c0      	b.n	800ca1c <_scanf_float+0x188>
 800ca9a:	2d03      	cmp	r5, #3
 800ca9c:	d0e2      	beq.n	800ca64 <_scanf_float+0x1d0>
 800ca9e:	2d05      	cmp	r5, #5
 800caa0:	e7de      	b.n	800ca60 <_scanf_float+0x1cc>
 800caa2:	2d02      	cmp	r5, #2
 800caa4:	f47f af26 	bne.w	800c8f4 <_scanf_float+0x60>
 800caa8:	2503      	movs	r5, #3
 800caaa:	e7b7      	b.n	800ca1c <_scanf_float+0x188>
 800caac:	2d06      	cmp	r5, #6
 800caae:	f47f af21 	bne.w	800c8f4 <_scanf_float+0x60>
 800cab2:	2507      	movs	r5, #7
 800cab4:	e7b2      	b.n	800ca1c <_scanf_float+0x188>
 800cab6:	6822      	ldr	r2, [r4, #0]
 800cab8:	0591      	lsls	r1, r2, #22
 800caba:	f57f af1b 	bpl.w	800c8f4 <_scanf_float+0x60>
 800cabe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cac2:	6022      	str	r2, [r4, #0]
 800cac4:	f8cd 9004 	str.w	r9, [sp, #4]
 800cac8:	e7a8      	b.n	800ca1c <_scanf_float+0x188>
 800caca:	6822      	ldr	r2, [r4, #0]
 800cacc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cad0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cad4:	d006      	beq.n	800cae4 <_scanf_float+0x250>
 800cad6:	0550      	lsls	r0, r2, #21
 800cad8:	f57f af0c 	bpl.w	800c8f4 <_scanf_float+0x60>
 800cadc:	f1b9 0f00 	cmp.w	r9, #0
 800cae0:	f43f af0f 	beq.w	800c902 <_scanf_float+0x6e>
 800cae4:	0591      	lsls	r1, r2, #22
 800cae6:	bf58      	it	pl
 800cae8:	9901      	ldrpl	r1, [sp, #4]
 800caea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800caee:	bf58      	it	pl
 800caf0:	eba9 0101 	subpl.w	r1, r9, r1
 800caf4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800caf8:	bf58      	it	pl
 800cafa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cafe:	6022      	str	r2, [r4, #0]
 800cb00:	f04f 0900 	mov.w	r9, #0
 800cb04:	e78a      	b.n	800ca1c <_scanf_float+0x188>
 800cb06:	f04f 0a03 	mov.w	sl, #3
 800cb0a:	e787      	b.n	800ca1c <_scanf_float+0x188>
 800cb0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cb10:	4639      	mov	r1, r7
 800cb12:	4640      	mov	r0, r8
 800cb14:	4798      	blx	r3
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f43f aedf 	beq.w	800c8da <_scanf_float+0x46>
 800cb1c:	e6ea      	b.n	800c8f4 <_scanf_float+0x60>
 800cb1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb26:	463a      	mov	r2, r7
 800cb28:	4640      	mov	r0, r8
 800cb2a:	4798      	blx	r3
 800cb2c:	6923      	ldr	r3, [r4, #16]
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	6123      	str	r3, [r4, #16]
 800cb32:	e6ec      	b.n	800c90e <_scanf_float+0x7a>
 800cb34:	1e6b      	subs	r3, r5, #1
 800cb36:	2b06      	cmp	r3, #6
 800cb38:	d825      	bhi.n	800cb86 <_scanf_float+0x2f2>
 800cb3a:	2d02      	cmp	r5, #2
 800cb3c:	d836      	bhi.n	800cbac <_scanf_float+0x318>
 800cb3e:	455e      	cmp	r6, fp
 800cb40:	f67f aee8 	bls.w	800c914 <_scanf_float+0x80>
 800cb44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb4c:	463a      	mov	r2, r7
 800cb4e:	4640      	mov	r0, r8
 800cb50:	4798      	blx	r3
 800cb52:	6923      	ldr	r3, [r4, #16]
 800cb54:	3b01      	subs	r3, #1
 800cb56:	6123      	str	r3, [r4, #16]
 800cb58:	e7f1      	b.n	800cb3e <_scanf_float+0x2aa>
 800cb5a:	9802      	ldr	r0, [sp, #8]
 800cb5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cb64:	9002      	str	r0, [sp, #8]
 800cb66:	463a      	mov	r2, r7
 800cb68:	4640      	mov	r0, r8
 800cb6a:	4798      	blx	r3
 800cb6c:	6923      	ldr	r3, [r4, #16]
 800cb6e:	3b01      	subs	r3, #1
 800cb70:	6123      	str	r3, [r4, #16]
 800cb72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb76:	fa5f fa8a 	uxtb.w	sl, sl
 800cb7a:	f1ba 0f02 	cmp.w	sl, #2
 800cb7e:	d1ec      	bne.n	800cb5a <_scanf_float+0x2c6>
 800cb80:	3d03      	subs	r5, #3
 800cb82:	b2ed      	uxtb	r5, r5
 800cb84:	1b76      	subs	r6, r6, r5
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	05da      	lsls	r2, r3, #23
 800cb8a:	d52f      	bpl.n	800cbec <_scanf_float+0x358>
 800cb8c:	055b      	lsls	r3, r3, #21
 800cb8e:	d510      	bpl.n	800cbb2 <_scanf_float+0x31e>
 800cb90:	455e      	cmp	r6, fp
 800cb92:	f67f aebf 	bls.w	800c914 <_scanf_float+0x80>
 800cb96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb9e:	463a      	mov	r2, r7
 800cba0:	4640      	mov	r0, r8
 800cba2:	4798      	blx	r3
 800cba4:	6923      	ldr	r3, [r4, #16]
 800cba6:	3b01      	subs	r3, #1
 800cba8:	6123      	str	r3, [r4, #16]
 800cbaa:	e7f1      	b.n	800cb90 <_scanf_float+0x2fc>
 800cbac:	46aa      	mov	sl, r5
 800cbae:	9602      	str	r6, [sp, #8]
 800cbb0:	e7df      	b.n	800cb72 <_scanf_float+0x2de>
 800cbb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cbb6:	6923      	ldr	r3, [r4, #16]
 800cbb8:	2965      	cmp	r1, #101	; 0x65
 800cbba:	f103 33ff 	add.w	r3, r3, #4294967295
 800cbbe:	f106 35ff 	add.w	r5, r6, #4294967295
 800cbc2:	6123      	str	r3, [r4, #16]
 800cbc4:	d00c      	beq.n	800cbe0 <_scanf_float+0x34c>
 800cbc6:	2945      	cmp	r1, #69	; 0x45
 800cbc8:	d00a      	beq.n	800cbe0 <_scanf_float+0x34c>
 800cbca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbce:	463a      	mov	r2, r7
 800cbd0:	4640      	mov	r0, r8
 800cbd2:	4798      	blx	r3
 800cbd4:	6923      	ldr	r3, [r4, #16]
 800cbd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	1eb5      	subs	r5, r6, #2
 800cbde:	6123      	str	r3, [r4, #16]
 800cbe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbe4:	463a      	mov	r2, r7
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	4798      	blx	r3
 800cbea:	462e      	mov	r6, r5
 800cbec:	6825      	ldr	r5, [r4, #0]
 800cbee:	f015 0510 	ands.w	r5, r5, #16
 800cbf2:	d159      	bne.n	800cca8 <_scanf_float+0x414>
 800cbf4:	7035      	strb	r5, [r6, #0]
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cbfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc00:	d11b      	bne.n	800cc3a <_scanf_float+0x3a6>
 800cc02:	9b01      	ldr	r3, [sp, #4]
 800cc04:	454b      	cmp	r3, r9
 800cc06:	eba3 0209 	sub.w	r2, r3, r9
 800cc0a:	d123      	bne.n	800cc54 <_scanf_float+0x3c0>
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	4659      	mov	r1, fp
 800cc10:	4640      	mov	r0, r8
 800cc12:	f000 fecb 	bl	800d9ac <_strtod_r>
 800cc16:	6822      	ldr	r2, [r4, #0]
 800cc18:	9b03      	ldr	r3, [sp, #12]
 800cc1a:	f012 0f02 	tst.w	r2, #2
 800cc1e:	ec57 6b10 	vmov	r6, r7, d0
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	d021      	beq.n	800cc6a <_scanf_float+0x3d6>
 800cc26:	9903      	ldr	r1, [sp, #12]
 800cc28:	1d1a      	adds	r2, r3, #4
 800cc2a:	600a      	str	r2, [r1, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	e9c3 6700 	strd	r6, r7, [r3]
 800cc32:	68e3      	ldr	r3, [r4, #12]
 800cc34:	3301      	adds	r3, #1
 800cc36:	60e3      	str	r3, [r4, #12]
 800cc38:	e66d      	b.n	800c916 <_scanf_float+0x82>
 800cc3a:	9b04      	ldr	r3, [sp, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d0e5      	beq.n	800cc0c <_scanf_float+0x378>
 800cc40:	9905      	ldr	r1, [sp, #20]
 800cc42:	230a      	movs	r3, #10
 800cc44:	462a      	mov	r2, r5
 800cc46:	3101      	adds	r1, #1
 800cc48:	4640      	mov	r0, r8
 800cc4a:	f000 ff43 	bl	800dad4 <_strtol_r>
 800cc4e:	9b04      	ldr	r3, [sp, #16]
 800cc50:	9e05      	ldr	r6, [sp, #20]
 800cc52:	1ac2      	subs	r2, r0, r3
 800cc54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cc58:	429e      	cmp	r6, r3
 800cc5a:	bf28      	it	cs
 800cc5c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cc60:	4912      	ldr	r1, [pc, #72]	; (800ccac <_scanf_float+0x418>)
 800cc62:	4630      	mov	r0, r6
 800cc64:	f000 f83c 	bl	800cce0 <siprintf>
 800cc68:	e7d0      	b.n	800cc0c <_scanf_float+0x378>
 800cc6a:	9903      	ldr	r1, [sp, #12]
 800cc6c:	f012 0f04 	tst.w	r2, #4
 800cc70:	f103 0204 	add.w	r2, r3, #4
 800cc74:	600a      	str	r2, [r1, #0]
 800cc76:	d1d9      	bne.n	800cc2c <_scanf_float+0x398>
 800cc78:	f8d3 8000 	ldr.w	r8, [r3]
 800cc7c:	ee10 2a10 	vmov	r2, s0
 800cc80:	ee10 0a10 	vmov	r0, s0
 800cc84:	463b      	mov	r3, r7
 800cc86:	4639      	mov	r1, r7
 800cc88:	f7f3 ff50 	bl	8000b2c <__aeabi_dcmpun>
 800cc8c:	b128      	cbz	r0, 800cc9a <_scanf_float+0x406>
 800cc8e:	4808      	ldr	r0, [pc, #32]	; (800ccb0 <_scanf_float+0x41c>)
 800cc90:	f000 f820 	bl	800ccd4 <nanf>
 800cc94:	ed88 0a00 	vstr	s0, [r8]
 800cc98:	e7cb      	b.n	800cc32 <_scanf_float+0x39e>
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	4639      	mov	r1, r7
 800cc9e:	f7f3 ffa3 	bl	8000be8 <__aeabi_d2f>
 800cca2:	f8c8 0000 	str.w	r0, [r8]
 800cca6:	e7c4      	b.n	800cc32 <_scanf_float+0x39e>
 800cca8:	2500      	movs	r5, #0
 800ccaa:	e634      	b.n	800c916 <_scanf_float+0x82>
 800ccac:	0801081c 	.word	0x0801081c
 800ccb0:	08010c28 	.word	0x08010c28

0800ccb4 <_sbrk_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4d06      	ldr	r5, [pc, #24]	; (800ccd0 <_sbrk_r+0x1c>)
 800ccb8:	2300      	movs	r3, #0
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	602b      	str	r3, [r5, #0]
 800ccc0:	f7f5 f93c 	bl	8001f3c <_sbrk>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_sbrk_r+0x1a>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_sbrk_r+0x1a>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	20000c84 	.word	0x20000c84

0800ccd4 <nanf>:
 800ccd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ccdc <nanf+0x8>
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	7fc00000 	.word	0x7fc00000

0800cce0 <siprintf>:
 800cce0:	b40e      	push	{r1, r2, r3}
 800cce2:	b500      	push	{lr}
 800cce4:	b09c      	sub	sp, #112	; 0x70
 800cce6:	ab1d      	add	r3, sp, #116	; 0x74
 800cce8:	9002      	str	r0, [sp, #8]
 800ccea:	9006      	str	r0, [sp, #24]
 800ccec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ccf0:	4809      	ldr	r0, [pc, #36]	; (800cd18 <siprintf+0x38>)
 800ccf2:	9107      	str	r1, [sp, #28]
 800ccf4:	9104      	str	r1, [sp, #16]
 800ccf6:	4909      	ldr	r1, [pc, #36]	; (800cd1c <siprintf+0x3c>)
 800ccf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccfc:	9105      	str	r1, [sp, #20]
 800ccfe:	6800      	ldr	r0, [r0, #0]
 800cd00:	9301      	str	r3, [sp, #4]
 800cd02:	a902      	add	r1, sp, #8
 800cd04:	f002 fe48 	bl	800f998 <_svfiprintf_r>
 800cd08:	9b02      	ldr	r3, [sp, #8]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	701a      	strb	r2, [r3, #0]
 800cd0e:	b01c      	add	sp, #112	; 0x70
 800cd10:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd14:	b003      	add	sp, #12
 800cd16:	4770      	bx	lr
 800cd18:	2000002c 	.word	0x2000002c
 800cd1c:	ffff0208 	.word	0xffff0208

0800cd20 <strnstr>:
 800cd20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd22:	460c      	mov	r4, r1
 800cd24:	4605      	mov	r5, r0
 800cd26:	4611      	mov	r1, r2
 800cd28:	4620      	mov	r0, r4
 800cd2a:	9201      	str	r2, [sp, #4]
 800cd2c:	f002 ff50 	bl	800fbd0 <strnlen>
 800cd30:	9901      	ldr	r1, [sp, #4]
 800cd32:	4281      	cmp	r1, r0
 800cd34:	d805      	bhi.n	800cd42 <strnstr+0x22>
 800cd36:	5c23      	ldrb	r3, [r4, r0]
 800cd38:	b11b      	cbz	r3, 800cd42 <strnstr+0x22>
 800cd3a:	2400      	movs	r4, #0
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	b003      	add	sp, #12
 800cd40:	bd30      	pop	{r4, r5, pc}
 800cd42:	4603      	mov	r3, r0
 800cd44:	4622      	mov	r2, r4
 800cd46:	4628      	mov	r0, r5
 800cd48:	f002 f8c6 	bl	800eed8 <memmem>
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d0f3      	beq.n	800cd3a <strnstr+0x1a>
 800cd52:	1b42      	subs	r2, r0, r5
 800cd54:	2100      	movs	r1, #0
 800cd56:	4628      	mov	r0, r5
 800cd58:	f7f3 fa42 	bl	80001e0 <memchr>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d1ec      	bne.n	800cd3a <strnstr+0x1a>
 800cd60:	e7ec      	b.n	800cd3c <strnstr+0x1c>

0800cd62 <sulp>:
 800cd62:	b570      	push	{r4, r5, r6, lr}
 800cd64:	4604      	mov	r4, r0
 800cd66:	460d      	mov	r5, r1
 800cd68:	ec45 4b10 	vmov	d0, r4, r5
 800cd6c:	4616      	mov	r6, r2
 800cd6e:	f002 fc53 	bl	800f618 <__ulp>
 800cd72:	ec51 0b10 	vmov	r0, r1, d0
 800cd76:	b17e      	cbz	r6, 800cd98 <sulp+0x36>
 800cd78:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cd7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	dd09      	ble.n	800cd98 <sulp+0x36>
 800cd84:	051b      	lsls	r3, r3, #20
 800cd86:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cd8a:	2400      	movs	r4, #0
 800cd8c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cd90:	4622      	mov	r2, r4
 800cd92:	462b      	mov	r3, r5
 800cd94:	f7f3 fc30 	bl	80005f8 <__aeabi_dmul>
 800cd98:	bd70      	pop	{r4, r5, r6, pc}
 800cd9a:	0000      	movs	r0, r0
 800cd9c:	0000      	movs	r0, r0
	...

0800cda0 <_strtod_l>:
 800cda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda4:	ed2d 8b02 	vpush	{d8}
 800cda8:	b09d      	sub	sp, #116	; 0x74
 800cdaa:	461f      	mov	r7, r3
 800cdac:	2300      	movs	r3, #0
 800cdae:	9318      	str	r3, [sp, #96]	; 0x60
 800cdb0:	4ba2      	ldr	r3, [pc, #648]	; (800d03c <_strtod_l+0x29c>)
 800cdb2:	9213      	str	r2, [sp, #76]	; 0x4c
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	9305      	str	r3, [sp, #20]
 800cdb8:	4604      	mov	r4, r0
 800cdba:	4618      	mov	r0, r3
 800cdbc:	4688      	mov	r8, r1
 800cdbe:	f7f3 fa07 	bl	80001d0 <strlen>
 800cdc2:	f04f 0a00 	mov.w	sl, #0
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	f04f 0b00 	mov.w	fp, #0
 800cdcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cdd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdd2:	781a      	ldrb	r2, [r3, #0]
 800cdd4:	2a2b      	cmp	r2, #43	; 0x2b
 800cdd6:	d04e      	beq.n	800ce76 <_strtod_l+0xd6>
 800cdd8:	d83b      	bhi.n	800ce52 <_strtod_l+0xb2>
 800cdda:	2a0d      	cmp	r2, #13
 800cddc:	d834      	bhi.n	800ce48 <_strtod_l+0xa8>
 800cdde:	2a08      	cmp	r2, #8
 800cde0:	d834      	bhi.n	800ce4c <_strtod_l+0xac>
 800cde2:	2a00      	cmp	r2, #0
 800cde4:	d03e      	beq.n	800ce64 <_strtod_l+0xc4>
 800cde6:	2300      	movs	r3, #0
 800cde8:	930a      	str	r3, [sp, #40]	; 0x28
 800cdea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cdec:	7833      	ldrb	r3, [r6, #0]
 800cdee:	2b30      	cmp	r3, #48	; 0x30
 800cdf0:	f040 80b0 	bne.w	800cf54 <_strtod_l+0x1b4>
 800cdf4:	7873      	ldrb	r3, [r6, #1]
 800cdf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cdfa:	2b58      	cmp	r3, #88	; 0x58
 800cdfc:	d168      	bne.n	800ced0 <_strtod_l+0x130>
 800cdfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce00:	9301      	str	r3, [sp, #4]
 800ce02:	ab18      	add	r3, sp, #96	; 0x60
 800ce04:	9702      	str	r7, [sp, #8]
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	4a8d      	ldr	r2, [pc, #564]	; (800d040 <_strtod_l+0x2a0>)
 800ce0a:	ab19      	add	r3, sp, #100	; 0x64
 800ce0c:	a917      	add	r1, sp, #92	; 0x5c
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f001 fd44 	bl	800e89c <__gethex>
 800ce14:	f010 0707 	ands.w	r7, r0, #7
 800ce18:	4605      	mov	r5, r0
 800ce1a:	d005      	beq.n	800ce28 <_strtod_l+0x88>
 800ce1c:	2f06      	cmp	r7, #6
 800ce1e:	d12c      	bne.n	800ce7a <_strtod_l+0xda>
 800ce20:	3601      	adds	r6, #1
 800ce22:	2300      	movs	r3, #0
 800ce24:	9617      	str	r6, [sp, #92]	; 0x5c
 800ce26:	930a      	str	r3, [sp, #40]	; 0x28
 800ce28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f040 8590 	bne.w	800d950 <_strtod_l+0xbb0>
 800ce30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce32:	b1eb      	cbz	r3, 800ce70 <_strtod_l+0xd0>
 800ce34:	4652      	mov	r2, sl
 800ce36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ce3a:	ec43 2b10 	vmov	d0, r2, r3
 800ce3e:	b01d      	add	sp, #116	; 0x74
 800ce40:	ecbd 8b02 	vpop	{d8}
 800ce44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce48:	2a20      	cmp	r2, #32
 800ce4a:	d1cc      	bne.n	800cde6 <_strtod_l+0x46>
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce50:	e7be      	b.n	800cdd0 <_strtod_l+0x30>
 800ce52:	2a2d      	cmp	r2, #45	; 0x2d
 800ce54:	d1c7      	bne.n	800cde6 <_strtod_l+0x46>
 800ce56:	2201      	movs	r2, #1
 800ce58:	920a      	str	r2, [sp, #40]	; 0x28
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce5e:	785b      	ldrb	r3, [r3, #1]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d1c2      	bne.n	800cdea <_strtod_l+0x4a>
 800ce64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f040 856e 	bne.w	800d94c <_strtod_l+0xbac>
 800ce70:	4652      	mov	r2, sl
 800ce72:	465b      	mov	r3, fp
 800ce74:	e7e1      	b.n	800ce3a <_strtod_l+0x9a>
 800ce76:	2200      	movs	r2, #0
 800ce78:	e7ee      	b.n	800ce58 <_strtod_l+0xb8>
 800ce7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ce7c:	b13a      	cbz	r2, 800ce8e <_strtod_l+0xee>
 800ce7e:	2135      	movs	r1, #53	; 0x35
 800ce80:	a81a      	add	r0, sp, #104	; 0x68
 800ce82:	f002 fcd4 	bl	800f82e <__copybits>
 800ce86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f002 f893 	bl	800efb4 <_Bfree>
 800ce8e:	3f01      	subs	r7, #1
 800ce90:	2f04      	cmp	r7, #4
 800ce92:	d806      	bhi.n	800cea2 <_strtod_l+0x102>
 800ce94:	e8df f007 	tbb	[pc, r7]
 800ce98:	1714030a 	.word	0x1714030a
 800ce9c:	0a          	.byte	0x0a
 800ce9d:	00          	.byte	0x00
 800ce9e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cea2:	0728      	lsls	r0, r5, #28
 800cea4:	d5c0      	bpl.n	800ce28 <_strtod_l+0x88>
 800cea6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ceaa:	e7bd      	b.n	800ce28 <_strtod_l+0x88>
 800ceac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ceb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ceb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ceb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ceba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cebe:	e7f0      	b.n	800cea2 <_strtod_l+0x102>
 800cec0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d044 <_strtod_l+0x2a4>
 800cec4:	e7ed      	b.n	800cea2 <_strtod_l+0x102>
 800cec6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ceca:	f04f 3aff 	mov.w	sl, #4294967295
 800cece:	e7e8      	b.n	800cea2 <_strtod_l+0x102>
 800ced0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	9217      	str	r2, [sp, #92]	; 0x5c
 800ced6:	785b      	ldrb	r3, [r3, #1]
 800ced8:	2b30      	cmp	r3, #48	; 0x30
 800ceda:	d0f9      	beq.n	800ced0 <_strtod_l+0x130>
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d0a3      	beq.n	800ce28 <_strtod_l+0x88>
 800cee0:	2301      	movs	r3, #1
 800cee2:	f04f 0900 	mov.w	r9, #0
 800cee6:	9304      	str	r3, [sp, #16]
 800cee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ceea:	9308      	str	r3, [sp, #32]
 800ceec:	f8cd 901c 	str.w	r9, [sp, #28]
 800cef0:	464f      	mov	r7, r9
 800cef2:	220a      	movs	r2, #10
 800cef4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cef6:	7806      	ldrb	r6, [r0, #0]
 800cef8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cefc:	b2d9      	uxtb	r1, r3
 800cefe:	2909      	cmp	r1, #9
 800cf00:	d92a      	bls.n	800cf58 <_strtod_l+0x1b8>
 800cf02:	9905      	ldr	r1, [sp, #20]
 800cf04:	462a      	mov	r2, r5
 800cf06:	f002 fe4f 	bl	800fba8 <strncmp>
 800cf0a:	b398      	cbz	r0, 800cf74 <_strtod_l+0x1d4>
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	4632      	mov	r2, r6
 800cf10:	463d      	mov	r5, r7
 800cf12:	9005      	str	r0, [sp, #20]
 800cf14:	4603      	mov	r3, r0
 800cf16:	2a65      	cmp	r2, #101	; 0x65
 800cf18:	d001      	beq.n	800cf1e <_strtod_l+0x17e>
 800cf1a:	2a45      	cmp	r2, #69	; 0x45
 800cf1c:	d118      	bne.n	800cf50 <_strtod_l+0x1b0>
 800cf1e:	b91d      	cbnz	r5, 800cf28 <_strtod_l+0x188>
 800cf20:	9a04      	ldr	r2, [sp, #16]
 800cf22:	4302      	orrs	r2, r0
 800cf24:	d09e      	beq.n	800ce64 <_strtod_l+0xc4>
 800cf26:	2500      	movs	r5, #0
 800cf28:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cf2c:	f108 0201 	add.w	r2, r8, #1
 800cf30:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf32:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cf36:	2a2b      	cmp	r2, #43	; 0x2b
 800cf38:	d075      	beq.n	800d026 <_strtod_l+0x286>
 800cf3a:	2a2d      	cmp	r2, #45	; 0x2d
 800cf3c:	d07b      	beq.n	800d036 <_strtod_l+0x296>
 800cf3e:	f04f 0c00 	mov.w	ip, #0
 800cf42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cf46:	2909      	cmp	r1, #9
 800cf48:	f240 8082 	bls.w	800d050 <_strtod_l+0x2b0>
 800cf4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cf50:	2600      	movs	r6, #0
 800cf52:	e09d      	b.n	800d090 <_strtod_l+0x2f0>
 800cf54:	2300      	movs	r3, #0
 800cf56:	e7c4      	b.n	800cee2 <_strtod_l+0x142>
 800cf58:	2f08      	cmp	r7, #8
 800cf5a:	bfd8      	it	le
 800cf5c:	9907      	ldrle	r1, [sp, #28]
 800cf5e:	f100 0001 	add.w	r0, r0, #1
 800cf62:	bfda      	itte	le
 800cf64:	fb02 3301 	mlale	r3, r2, r1, r3
 800cf68:	9307      	strle	r3, [sp, #28]
 800cf6a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cf6e:	3701      	adds	r7, #1
 800cf70:	9017      	str	r0, [sp, #92]	; 0x5c
 800cf72:	e7bf      	b.n	800cef4 <_strtod_l+0x154>
 800cf74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf76:	195a      	adds	r2, r3, r5
 800cf78:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf7a:	5d5a      	ldrb	r2, [r3, r5]
 800cf7c:	2f00      	cmp	r7, #0
 800cf7e:	d037      	beq.n	800cff0 <_strtod_l+0x250>
 800cf80:	9005      	str	r0, [sp, #20]
 800cf82:	463d      	mov	r5, r7
 800cf84:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cf88:	2b09      	cmp	r3, #9
 800cf8a:	d912      	bls.n	800cfb2 <_strtod_l+0x212>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e7c2      	b.n	800cf16 <_strtod_l+0x176>
 800cf90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf96:	785a      	ldrb	r2, [r3, #1]
 800cf98:	3001      	adds	r0, #1
 800cf9a:	2a30      	cmp	r2, #48	; 0x30
 800cf9c:	d0f8      	beq.n	800cf90 <_strtod_l+0x1f0>
 800cf9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cfa2:	2b08      	cmp	r3, #8
 800cfa4:	f200 84d9 	bhi.w	800d95a <_strtod_l+0xbba>
 800cfa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfaa:	9005      	str	r0, [sp, #20]
 800cfac:	2000      	movs	r0, #0
 800cfae:	9308      	str	r3, [sp, #32]
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	3a30      	subs	r2, #48	; 0x30
 800cfb4:	f100 0301 	add.w	r3, r0, #1
 800cfb8:	d014      	beq.n	800cfe4 <_strtod_l+0x244>
 800cfba:	9905      	ldr	r1, [sp, #20]
 800cfbc:	4419      	add	r1, r3
 800cfbe:	9105      	str	r1, [sp, #20]
 800cfc0:	462b      	mov	r3, r5
 800cfc2:	eb00 0e05 	add.w	lr, r0, r5
 800cfc6:	210a      	movs	r1, #10
 800cfc8:	4573      	cmp	r3, lr
 800cfca:	d113      	bne.n	800cff4 <_strtod_l+0x254>
 800cfcc:	182b      	adds	r3, r5, r0
 800cfce:	2b08      	cmp	r3, #8
 800cfd0:	f105 0501 	add.w	r5, r5, #1
 800cfd4:	4405      	add	r5, r0
 800cfd6:	dc1c      	bgt.n	800d012 <_strtod_l+0x272>
 800cfd8:	9907      	ldr	r1, [sp, #28]
 800cfda:	230a      	movs	r3, #10
 800cfdc:	fb03 2301 	mla	r3, r3, r1, r2
 800cfe0:	9307      	str	r3, [sp, #28]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cfe6:	1c51      	adds	r1, r2, #1
 800cfe8:	9117      	str	r1, [sp, #92]	; 0x5c
 800cfea:	7852      	ldrb	r2, [r2, #1]
 800cfec:	4618      	mov	r0, r3
 800cfee:	e7c9      	b.n	800cf84 <_strtod_l+0x1e4>
 800cff0:	4638      	mov	r0, r7
 800cff2:	e7d2      	b.n	800cf9a <_strtod_l+0x1fa>
 800cff4:	2b08      	cmp	r3, #8
 800cff6:	dc04      	bgt.n	800d002 <_strtod_l+0x262>
 800cff8:	9e07      	ldr	r6, [sp, #28]
 800cffa:	434e      	muls	r6, r1
 800cffc:	9607      	str	r6, [sp, #28]
 800cffe:	3301      	adds	r3, #1
 800d000:	e7e2      	b.n	800cfc8 <_strtod_l+0x228>
 800d002:	f103 0c01 	add.w	ip, r3, #1
 800d006:	f1bc 0f10 	cmp.w	ip, #16
 800d00a:	bfd8      	it	le
 800d00c:	fb01 f909 	mulle.w	r9, r1, r9
 800d010:	e7f5      	b.n	800cffe <_strtod_l+0x25e>
 800d012:	2d10      	cmp	r5, #16
 800d014:	bfdc      	itt	le
 800d016:	230a      	movle	r3, #10
 800d018:	fb03 2909 	mlale	r9, r3, r9, r2
 800d01c:	e7e1      	b.n	800cfe2 <_strtod_l+0x242>
 800d01e:	2300      	movs	r3, #0
 800d020:	9305      	str	r3, [sp, #20]
 800d022:	2301      	movs	r3, #1
 800d024:	e77c      	b.n	800cf20 <_strtod_l+0x180>
 800d026:	f04f 0c00 	mov.w	ip, #0
 800d02a:	f108 0202 	add.w	r2, r8, #2
 800d02e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d030:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d034:	e785      	b.n	800cf42 <_strtod_l+0x1a2>
 800d036:	f04f 0c01 	mov.w	ip, #1
 800d03a:	e7f6      	b.n	800d02a <_strtod_l+0x28a>
 800d03c:	08010a70 	.word	0x08010a70
 800d040:	08010824 	.word	0x08010824
 800d044:	7ff00000 	.word	0x7ff00000
 800d048:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d04a:	1c51      	adds	r1, r2, #1
 800d04c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d04e:	7852      	ldrb	r2, [r2, #1]
 800d050:	2a30      	cmp	r2, #48	; 0x30
 800d052:	d0f9      	beq.n	800d048 <_strtod_l+0x2a8>
 800d054:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d058:	2908      	cmp	r1, #8
 800d05a:	f63f af79 	bhi.w	800cf50 <_strtod_l+0x1b0>
 800d05e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d062:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d064:	9206      	str	r2, [sp, #24]
 800d066:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d068:	1c51      	adds	r1, r2, #1
 800d06a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d06c:	7852      	ldrb	r2, [r2, #1]
 800d06e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d072:	2e09      	cmp	r6, #9
 800d074:	d937      	bls.n	800d0e6 <_strtod_l+0x346>
 800d076:	9e06      	ldr	r6, [sp, #24]
 800d078:	1b89      	subs	r1, r1, r6
 800d07a:	2908      	cmp	r1, #8
 800d07c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d080:	dc02      	bgt.n	800d088 <_strtod_l+0x2e8>
 800d082:	4576      	cmp	r6, lr
 800d084:	bfa8      	it	ge
 800d086:	4676      	movge	r6, lr
 800d088:	f1bc 0f00 	cmp.w	ip, #0
 800d08c:	d000      	beq.n	800d090 <_strtod_l+0x2f0>
 800d08e:	4276      	negs	r6, r6
 800d090:	2d00      	cmp	r5, #0
 800d092:	d14d      	bne.n	800d130 <_strtod_l+0x390>
 800d094:	9904      	ldr	r1, [sp, #16]
 800d096:	4301      	orrs	r1, r0
 800d098:	f47f aec6 	bne.w	800ce28 <_strtod_l+0x88>
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f47f aee1 	bne.w	800ce64 <_strtod_l+0xc4>
 800d0a2:	2a69      	cmp	r2, #105	; 0x69
 800d0a4:	d027      	beq.n	800d0f6 <_strtod_l+0x356>
 800d0a6:	dc24      	bgt.n	800d0f2 <_strtod_l+0x352>
 800d0a8:	2a49      	cmp	r2, #73	; 0x49
 800d0aa:	d024      	beq.n	800d0f6 <_strtod_l+0x356>
 800d0ac:	2a4e      	cmp	r2, #78	; 0x4e
 800d0ae:	f47f aed9 	bne.w	800ce64 <_strtod_l+0xc4>
 800d0b2:	499f      	ldr	r1, [pc, #636]	; (800d330 <_strtod_l+0x590>)
 800d0b4:	a817      	add	r0, sp, #92	; 0x5c
 800d0b6:	f001 fe49 	bl	800ed4c <__match>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	f43f aed2 	beq.w	800ce64 <_strtod_l+0xc4>
 800d0c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	2b28      	cmp	r3, #40	; 0x28
 800d0c6:	d12d      	bne.n	800d124 <_strtod_l+0x384>
 800d0c8:	499a      	ldr	r1, [pc, #616]	; (800d334 <_strtod_l+0x594>)
 800d0ca:	aa1a      	add	r2, sp, #104	; 0x68
 800d0cc:	a817      	add	r0, sp, #92	; 0x5c
 800d0ce:	f001 fe51 	bl	800ed74 <__hexnan>
 800d0d2:	2805      	cmp	r0, #5
 800d0d4:	d126      	bne.n	800d124 <_strtod_l+0x384>
 800d0d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d0dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d0e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d0e4:	e6a0      	b.n	800ce28 <_strtod_l+0x88>
 800d0e6:	210a      	movs	r1, #10
 800d0e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d0ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d0f0:	e7b9      	b.n	800d066 <_strtod_l+0x2c6>
 800d0f2:	2a6e      	cmp	r2, #110	; 0x6e
 800d0f4:	e7db      	b.n	800d0ae <_strtod_l+0x30e>
 800d0f6:	4990      	ldr	r1, [pc, #576]	; (800d338 <_strtod_l+0x598>)
 800d0f8:	a817      	add	r0, sp, #92	; 0x5c
 800d0fa:	f001 fe27 	bl	800ed4c <__match>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	f43f aeb0 	beq.w	800ce64 <_strtod_l+0xc4>
 800d104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d106:	498d      	ldr	r1, [pc, #564]	; (800d33c <_strtod_l+0x59c>)
 800d108:	3b01      	subs	r3, #1
 800d10a:	a817      	add	r0, sp, #92	; 0x5c
 800d10c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d10e:	f001 fe1d 	bl	800ed4c <__match>
 800d112:	b910      	cbnz	r0, 800d11a <_strtod_l+0x37a>
 800d114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d116:	3301      	adds	r3, #1
 800d118:	9317      	str	r3, [sp, #92]	; 0x5c
 800d11a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d34c <_strtod_l+0x5ac>
 800d11e:	f04f 0a00 	mov.w	sl, #0
 800d122:	e681      	b.n	800ce28 <_strtod_l+0x88>
 800d124:	4886      	ldr	r0, [pc, #536]	; (800d340 <_strtod_l+0x5a0>)
 800d126:	f002 fd37 	bl	800fb98 <nan>
 800d12a:	ec5b ab10 	vmov	sl, fp, d0
 800d12e:	e67b      	b.n	800ce28 <_strtod_l+0x88>
 800d130:	9b05      	ldr	r3, [sp, #20]
 800d132:	9807      	ldr	r0, [sp, #28]
 800d134:	1af3      	subs	r3, r6, r3
 800d136:	2f00      	cmp	r7, #0
 800d138:	bf08      	it	eq
 800d13a:	462f      	moveq	r7, r5
 800d13c:	2d10      	cmp	r5, #16
 800d13e:	9306      	str	r3, [sp, #24]
 800d140:	46a8      	mov	r8, r5
 800d142:	bfa8      	it	ge
 800d144:	f04f 0810 	movge.w	r8, #16
 800d148:	f7f3 f9dc 	bl	8000504 <__aeabi_ui2d>
 800d14c:	2d09      	cmp	r5, #9
 800d14e:	4682      	mov	sl, r0
 800d150:	468b      	mov	fp, r1
 800d152:	dd13      	ble.n	800d17c <_strtod_l+0x3dc>
 800d154:	4b7b      	ldr	r3, [pc, #492]	; (800d344 <_strtod_l+0x5a4>)
 800d156:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d15a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d15e:	f7f3 fa4b 	bl	80005f8 <__aeabi_dmul>
 800d162:	4682      	mov	sl, r0
 800d164:	4648      	mov	r0, r9
 800d166:	468b      	mov	fp, r1
 800d168:	f7f3 f9cc 	bl	8000504 <__aeabi_ui2d>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4650      	mov	r0, sl
 800d172:	4659      	mov	r1, fp
 800d174:	f7f3 f88a 	bl	800028c <__adddf3>
 800d178:	4682      	mov	sl, r0
 800d17a:	468b      	mov	fp, r1
 800d17c:	2d0f      	cmp	r5, #15
 800d17e:	dc38      	bgt.n	800d1f2 <_strtod_l+0x452>
 800d180:	9b06      	ldr	r3, [sp, #24]
 800d182:	2b00      	cmp	r3, #0
 800d184:	f43f ae50 	beq.w	800ce28 <_strtod_l+0x88>
 800d188:	dd24      	ble.n	800d1d4 <_strtod_l+0x434>
 800d18a:	2b16      	cmp	r3, #22
 800d18c:	dc0b      	bgt.n	800d1a6 <_strtod_l+0x406>
 800d18e:	496d      	ldr	r1, [pc, #436]	; (800d344 <_strtod_l+0x5a4>)
 800d190:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d194:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d198:	4652      	mov	r2, sl
 800d19a:	465b      	mov	r3, fp
 800d19c:	f7f3 fa2c 	bl	80005f8 <__aeabi_dmul>
 800d1a0:	4682      	mov	sl, r0
 800d1a2:	468b      	mov	fp, r1
 800d1a4:	e640      	b.n	800ce28 <_strtod_l+0x88>
 800d1a6:	9a06      	ldr	r2, [sp, #24]
 800d1a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	db20      	blt.n	800d1f2 <_strtod_l+0x452>
 800d1b0:	4c64      	ldr	r4, [pc, #400]	; (800d344 <_strtod_l+0x5a4>)
 800d1b2:	f1c5 050f 	rsb	r5, r5, #15
 800d1b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d1ba:	4652      	mov	r2, sl
 800d1bc:	465b      	mov	r3, fp
 800d1be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1c2:	f7f3 fa19 	bl	80005f8 <__aeabi_dmul>
 800d1c6:	9b06      	ldr	r3, [sp, #24]
 800d1c8:	1b5d      	subs	r5, r3, r5
 800d1ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d1ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d1d2:	e7e3      	b.n	800d19c <_strtod_l+0x3fc>
 800d1d4:	9b06      	ldr	r3, [sp, #24]
 800d1d6:	3316      	adds	r3, #22
 800d1d8:	db0b      	blt.n	800d1f2 <_strtod_l+0x452>
 800d1da:	9b05      	ldr	r3, [sp, #20]
 800d1dc:	1b9e      	subs	r6, r3, r6
 800d1de:	4b59      	ldr	r3, [pc, #356]	; (800d344 <_strtod_l+0x5a4>)
 800d1e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d1e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	4659      	mov	r1, fp
 800d1ec:	f7f3 fb2e 	bl	800084c <__aeabi_ddiv>
 800d1f0:	e7d6      	b.n	800d1a0 <_strtod_l+0x400>
 800d1f2:	9b06      	ldr	r3, [sp, #24]
 800d1f4:	eba5 0808 	sub.w	r8, r5, r8
 800d1f8:	4498      	add	r8, r3
 800d1fa:	f1b8 0f00 	cmp.w	r8, #0
 800d1fe:	dd74      	ble.n	800d2ea <_strtod_l+0x54a>
 800d200:	f018 030f 	ands.w	r3, r8, #15
 800d204:	d00a      	beq.n	800d21c <_strtod_l+0x47c>
 800d206:	494f      	ldr	r1, [pc, #316]	; (800d344 <_strtod_l+0x5a4>)
 800d208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d20c:	4652      	mov	r2, sl
 800d20e:	465b      	mov	r3, fp
 800d210:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d214:	f7f3 f9f0 	bl	80005f8 <__aeabi_dmul>
 800d218:	4682      	mov	sl, r0
 800d21a:	468b      	mov	fp, r1
 800d21c:	f038 080f 	bics.w	r8, r8, #15
 800d220:	d04f      	beq.n	800d2c2 <_strtod_l+0x522>
 800d222:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d226:	dd22      	ble.n	800d26e <_strtod_l+0x4ce>
 800d228:	2500      	movs	r5, #0
 800d22a:	462e      	mov	r6, r5
 800d22c:	9507      	str	r5, [sp, #28]
 800d22e:	9505      	str	r5, [sp, #20]
 800d230:	2322      	movs	r3, #34	; 0x22
 800d232:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d34c <_strtod_l+0x5ac>
 800d236:	6023      	str	r3, [r4, #0]
 800d238:	f04f 0a00 	mov.w	sl, #0
 800d23c:	9b07      	ldr	r3, [sp, #28]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	f43f adf2 	beq.w	800ce28 <_strtod_l+0x88>
 800d244:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d246:	4620      	mov	r0, r4
 800d248:	f001 feb4 	bl	800efb4 <_Bfree>
 800d24c:	9905      	ldr	r1, [sp, #20]
 800d24e:	4620      	mov	r0, r4
 800d250:	f001 feb0 	bl	800efb4 <_Bfree>
 800d254:	4631      	mov	r1, r6
 800d256:	4620      	mov	r0, r4
 800d258:	f001 feac 	bl	800efb4 <_Bfree>
 800d25c:	9907      	ldr	r1, [sp, #28]
 800d25e:	4620      	mov	r0, r4
 800d260:	f001 fea8 	bl	800efb4 <_Bfree>
 800d264:	4629      	mov	r1, r5
 800d266:	4620      	mov	r0, r4
 800d268:	f001 fea4 	bl	800efb4 <_Bfree>
 800d26c:	e5dc      	b.n	800ce28 <_strtod_l+0x88>
 800d26e:	4b36      	ldr	r3, [pc, #216]	; (800d348 <_strtod_l+0x5a8>)
 800d270:	9304      	str	r3, [sp, #16]
 800d272:	2300      	movs	r3, #0
 800d274:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d278:	4650      	mov	r0, sl
 800d27a:	4659      	mov	r1, fp
 800d27c:	4699      	mov	r9, r3
 800d27e:	f1b8 0f01 	cmp.w	r8, #1
 800d282:	dc21      	bgt.n	800d2c8 <_strtod_l+0x528>
 800d284:	b10b      	cbz	r3, 800d28a <_strtod_l+0x4ea>
 800d286:	4682      	mov	sl, r0
 800d288:	468b      	mov	fp, r1
 800d28a:	4b2f      	ldr	r3, [pc, #188]	; (800d348 <_strtod_l+0x5a8>)
 800d28c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d290:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d294:	4652      	mov	r2, sl
 800d296:	465b      	mov	r3, fp
 800d298:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d29c:	f7f3 f9ac 	bl	80005f8 <__aeabi_dmul>
 800d2a0:	4b2a      	ldr	r3, [pc, #168]	; (800d34c <_strtod_l+0x5ac>)
 800d2a2:	460a      	mov	r2, r1
 800d2a4:	400b      	ands	r3, r1
 800d2a6:	492a      	ldr	r1, [pc, #168]	; (800d350 <_strtod_l+0x5b0>)
 800d2a8:	428b      	cmp	r3, r1
 800d2aa:	4682      	mov	sl, r0
 800d2ac:	d8bc      	bhi.n	800d228 <_strtod_l+0x488>
 800d2ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d2b2:	428b      	cmp	r3, r1
 800d2b4:	bf86      	itte	hi
 800d2b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d354 <_strtod_l+0x5b4>
 800d2ba:	f04f 3aff 	movhi.w	sl, #4294967295
 800d2be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	9304      	str	r3, [sp, #16]
 800d2c6:	e084      	b.n	800d3d2 <_strtod_l+0x632>
 800d2c8:	f018 0f01 	tst.w	r8, #1
 800d2cc:	d005      	beq.n	800d2da <_strtod_l+0x53a>
 800d2ce:	9b04      	ldr	r3, [sp, #16]
 800d2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d4:	f7f3 f990 	bl	80005f8 <__aeabi_dmul>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	9a04      	ldr	r2, [sp, #16]
 800d2dc:	3208      	adds	r2, #8
 800d2de:	f109 0901 	add.w	r9, r9, #1
 800d2e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d2e6:	9204      	str	r2, [sp, #16]
 800d2e8:	e7c9      	b.n	800d27e <_strtod_l+0x4de>
 800d2ea:	d0ea      	beq.n	800d2c2 <_strtod_l+0x522>
 800d2ec:	f1c8 0800 	rsb	r8, r8, #0
 800d2f0:	f018 020f 	ands.w	r2, r8, #15
 800d2f4:	d00a      	beq.n	800d30c <_strtod_l+0x56c>
 800d2f6:	4b13      	ldr	r3, [pc, #76]	; (800d344 <_strtod_l+0x5a4>)
 800d2f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2fc:	4650      	mov	r0, sl
 800d2fe:	4659      	mov	r1, fp
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	f7f3 faa2 	bl	800084c <__aeabi_ddiv>
 800d308:	4682      	mov	sl, r0
 800d30a:	468b      	mov	fp, r1
 800d30c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d310:	d0d7      	beq.n	800d2c2 <_strtod_l+0x522>
 800d312:	f1b8 0f1f 	cmp.w	r8, #31
 800d316:	dd1f      	ble.n	800d358 <_strtod_l+0x5b8>
 800d318:	2500      	movs	r5, #0
 800d31a:	462e      	mov	r6, r5
 800d31c:	9507      	str	r5, [sp, #28]
 800d31e:	9505      	str	r5, [sp, #20]
 800d320:	2322      	movs	r3, #34	; 0x22
 800d322:	f04f 0a00 	mov.w	sl, #0
 800d326:	f04f 0b00 	mov.w	fp, #0
 800d32a:	6023      	str	r3, [r4, #0]
 800d32c:	e786      	b.n	800d23c <_strtod_l+0x49c>
 800d32e:	bf00      	nop
 800d330:	080107f5 	.word	0x080107f5
 800d334:	08010838 	.word	0x08010838
 800d338:	080107ed 	.word	0x080107ed
 800d33c:	0801097c 	.word	0x0801097c
 800d340:	08010c28 	.word	0x08010c28
 800d344:	08010b08 	.word	0x08010b08
 800d348:	08010ae0 	.word	0x08010ae0
 800d34c:	7ff00000 	.word	0x7ff00000
 800d350:	7ca00000 	.word	0x7ca00000
 800d354:	7fefffff 	.word	0x7fefffff
 800d358:	f018 0310 	ands.w	r3, r8, #16
 800d35c:	bf18      	it	ne
 800d35e:	236a      	movne	r3, #106	; 0x6a
 800d360:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d710 <_strtod_l+0x970>
 800d364:	9304      	str	r3, [sp, #16]
 800d366:	4650      	mov	r0, sl
 800d368:	4659      	mov	r1, fp
 800d36a:	2300      	movs	r3, #0
 800d36c:	f018 0f01 	tst.w	r8, #1
 800d370:	d004      	beq.n	800d37c <_strtod_l+0x5dc>
 800d372:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d376:	f7f3 f93f 	bl	80005f8 <__aeabi_dmul>
 800d37a:	2301      	movs	r3, #1
 800d37c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d380:	f109 0908 	add.w	r9, r9, #8
 800d384:	d1f2      	bne.n	800d36c <_strtod_l+0x5cc>
 800d386:	b10b      	cbz	r3, 800d38c <_strtod_l+0x5ec>
 800d388:	4682      	mov	sl, r0
 800d38a:	468b      	mov	fp, r1
 800d38c:	9b04      	ldr	r3, [sp, #16]
 800d38e:	b1c3      	cbz	r3, 800d3c2 <_strtod_l+0x622>
 800d390:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d394:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d398:	2b00      	cmp	r3, #0
 800d39a:	4659      	mov	r1, fp
 800d39c:	dd11      	ble.n	800d3c2 <_strtod_l+0x622>
 800d39e:	2b1f      	cmp	r3, #31
 800d3a0:	f340 8124 	ble.w	800d5ec <_strtod_l+0x84c>
 800d3a4:	2b34      	cmp	r3, #52	; 0x34
 800d3a6:	bfde      	ittt	le
 800d3a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d3ac:	f04f 33ff 	movle.w	r3, #4294967295
 800d3b0:	fa03 f202 	lslle.w	r2, r3, r2
 800d3b4:	f04f 0a00 	mov.w	sl, #0
 800d3b8:	bfcc      	ite	gt
 800d3ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d3be:	ea02 0b01 	andle.w	fp, r2, r1
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	4650      	mov	r0, sl
 800d3c8:	4659      	mov	r1, fp
 800d3ca:	f7f3 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d1a2      	bne.n	800d318 <_strtod_l+0x578>
 800d3d2:	9b07      	ldr	r3, [sp, #28]
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	9908      	ldr	r1, [sp, #32]
 800d3d8:	462b      	mov	r3, r5
 800d3da:	463a      	mov	r2, r7
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f001 fe51 	bl	800f084 <__s2b>
 800d3e2:	9007      	str	r0, [sp, #28]
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	f43f af1f 	beq.w	800d228 <_strtod_l+0x488>
 800d3ea:	9b05      	ldr	r3, [sp, #20]
 800d3ec:	1b9e      	subs	r6, r3, r6
 800d3ee:	9b06      	ldr	r3, [sp, #24]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	bfb4      	ite	lt
 800d3f4:	4633      	movlt	r3, r6
 800d3f6:	2300      	movge	r3, #0
 800d3f8:	930c      	str	r3, [sp, #48]	; 0x30
 800d3fa:	9b06      	ldr	r3, [sp, #24]
 800d3fc:	2500      	movs	r5, #0
 800d3fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d402:	9312      	str	r3, [sp, #72]	; 0x48
 800d404:	462e      	mov	r6, r5
 800d406:	9b07      	ldr	r3, [sp, #28]
 800d408:	4620      	mov	r0, r4
 800d40a:	6859      	ldr	r1, [r3, #4]
 800d40c:	f001 fd92 	bl	800ef34 <_Balloc>
 800d410:	9005      	str	r0, [sp, #20]
 800d412:	2800      	cmp	r0, #0
 800d414:	f43f af0c 	beq.w	800d230 <_strtod_l+0x490>
 800d418:	9b07      	ldr	r3, [sp, #28]
 800d41a:	691a      	ldr	r2, [r3, #16]
 800d41c:	3202      	adds	r2, #2
 800d41e:	f103 010c 	add.w	r1, r3, #12
 800d422:	0092      	lsls	r2, r2, #2
 800d424:	300c      	adds	r0, #12
 800d426:	f7fe fcd5 	bl	800bdd4 <memcpy>
 800d42a:	ec4b ab10 	vmov	d0, sl, fp
 800d42e:	aa1a      	add	r2, sp, #104	; 0x68
 800d430:	a919      	add	r1, sp, #100	; 0x64
 800d432:	4620      	mov	r0, r4
 800d434:	f002 f96c 	bl	800f710 <__d2b>
 800d438:	ec4b ab18 	vmov	d8, sl, fp
 800d43c:	9018      	str	r0, [sp, #96]	; 0x60
 800d43e:	2800      	cmp	r0, #0
 800d440:	f43f aef6 	beq.w	800d230 <_strtod_l+0x490>
 800d444:	2101      	movs	r1, #1
 800d446:	4620      	mov	r0, r4
 800d448:	f001 feb6 	bl	800f1b8 <__i2b>
 800d44c:	4606      	mov	r6, r0
 800d44e:	2800      	cmp	r0, #0
 800d450:	f43f aeee 	beq.w	800d230 <_strtod_l+0x490>
 800d454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d456:	9904      	ldr	r1, [sp, #16]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	bfab      	itete	ge
 800d45c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d45e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d460:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d462:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d466:	bfac      	ite	ge
 800d468:	eb03 0902 	addge.w	r9, r3, r2
 800d46c:	1ad7      	sublt	r7, r2, r3
 800d46e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d470:	eba3 0801 	sub.w	r8, r3, r1
 800d474:	4490      	add	r8, r2
 800d476:	4ba1      	ldr	r3, [pc, #644]	; (800d6fc <_strtod_l+0x95c>)
 800d478:	f108 38ff 	add.w	r8, r8, #4294967295
 800d47c:	4598      	cmp	r8, r3
 800d47e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d482:	f280 80c7 	bge.w	800d614 <_strtod_l+0x874>
 800d486:	eba3 0308 	sub.w	r3, r3, r8
 800d48a:	2b1f      	cmp	r3, #31
 800d48c:	eba2 0203 	sub.w	r2, r2, r3
 800d490:	f04f 0101 	mov.w	r1, #1
 800d494:	f300 80b1 	bgt.w	800d5fa <_strtod_l+0x85a>
 800d498:	fa01 f303 	lsl.w	r3, r1, r3
 800d49c:	930d      	str	r3, [sp, #52]	; 0x34
 800d49e:	2300      	movs	r3, #0
 800d4a0:	9308      	str	r3, [sp, #32]
 800d4a2:	eb09 0802 	add.w	r8, r9, r2
 800d4a6:	9b04      	ldr	r3, [sp, #16]
 800d4a8:	45c1      	cmp	r9, r8
 800d4aa:	4417      	add	r7, r2
 800d4ac:	441f      	add	r7, r3
 800d4ae:	464b      	mov	r3, r9
 800d4b0:	bfa8      	it	ge
 800d4b2:	4643      	movge	r3, r8
 800d4b4:	42bb      	cmp	r3, r7
 800d4b6:	bfa8      	it	ge
 800d4b8:	463b      	movge	r3, r7
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	bfc2      	ittt	gt
 800d4be:	eba8 0803 	subgt.w	r8, r8, r3
 800d4c2:	1aff      	subgt	r7, r7, r3
 800d4c4:	eba9 0903 	subgt.w	r9, r9, r3
 800d4c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	dd17      	ble.n	800d4fe <_strtod_l+0x75e>
 800d4ce:	4631      	mov	r1, r6
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f001 ff30 	bl	800f338 <__pow5mult>
 800d4d8:	4606      	mov	r6, r0
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	f43f aea8 	beq.w	800d230 <_strtod_l+0x490>
 800d4e0:	4601      	mov	r1, r0
 800d4e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f001 fe7d 	bl	800f1e4 <__multiply>
 800d4ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	f43f ae9f 	beq.w	800d230 <_strtod_l+0x490>
 800d4f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f001 fd5d 	bl	800efb4 <_Bfree>
 800d4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4fc:	9318      	str	r3, [sp, #96]	; 0x60
 800d4fe:	f1b8 0f00 	cmp.w	r8, #0
 800d502:	f300 808c 	bgt.w	800d61e <_strtod_l+0x87e>
 800d506:	9b06      	ldr	r3, [sp, #24]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	dd08      	ble.n	800d51e <_strtod_l+0x77e>
 800d50c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d50e:	9905      	ldr	r1, [sp, #20]
 800d510:	4620      	mov	r0, r4
 800d512:	f001 ff11 	bl	800f338 <__pow5mult>
 800d516:	9005      	str	r0, [sp, #20]
 800d518:	2800      	cmp	r0, #0
 800d51a:	f43f ae89 	beq.w	800d230 <_strtod_l+0x490>
 800d51e:	2f00      	cmp	r7, #0
 800d520:	dd08      	ble.n	800d534 <_strtod_l+0x794>
 800d522:	9905      	ldr	r1, [sp, #20]
 800d524:	463a      	mov	r2, r7
 800d526:	4620      	mov	r0, r4
 800d528:	f001 ff60 	bl	800f3ec <__lshift>
 800d52c:	9005      	str	r0, [sp, #20]
 800d52e:	2800      	cmp	r0, #0
 800d530:	f43f ae7e 	beq.w	800d230 <_strtod_l+0x490>
 800d534:	f1b9 0f00 	cmp.w	r9, #0
 800d538:	dd08      	ble.n	800d54c <_strtod_l+0x7ac>
 800d53a:	4631      	mov	r1, r6
 800d53c:	464a      	mov	r2, r9
 800d53e:	4620      	mov	r0, r4
 800d540:	f001 ff54 	bl	800f3ec <__lshift>
 800d544:	4606      	mov	r6, r0
 800d546:	2800      	cmp	r0, #0
 800d548:	f43f ae72 	beq.w	800d230 <_strtod_l+0x490>
 800d54c:	9a05      	ldr	r2, [sp, #20]
 800d54e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d550:	4620      	mov	r0, r4
 800d552:	f001 ffd7 	bl	800f504 <__mdiff>
 800d556:	4605      	mov	r5, r0
 800d558:	2800      	cmp	r0, #0
 800d55a:	f43f ae69 	beq.w	800d230 <_strtod_l+0x490>
 800d55e:	68c3      	ldr	r3, [r0, #12]
 800d560:	930b      	str	r3, [sp, #44]	; 0x2c
 800d562:	2300      	movs	r3, #0
 800d564:	60c3      	str	r3, [r0, #12]
 800d566:	4631      	mov	r1, r6
 800d568:	f001 ffb0 	bl	800f4cc <__mcmp>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	da60      	bge.n	800d632 <_strtod_l+0x892>
 800d570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d572:	ea53 030a 	orrs.w	r3, r3, sl
 800d576:	f040 8082 	bne.w	800d67e <_strtod_l+0x8de>
 800d57a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d17d      	bne.n	800d67e <_strtod_l+0x8de>
 800d582:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d586:	0d1b      	lsrs	r3, r3, #20
 800d588:	051b      	lsls	r3, r3, #20
 800d58a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d58e:	d976      	bls.n	800d67e <_strtod_l+0x8de>
 800d590:	696b      	ldr	r3, [r5, #20]
 800d592:	b913      	cbnz	r3, 800d59a <_strtod_l+0x7fa>
 800d594:	692b      	ldr	r3, [r5, #16]
 800d596:	2b01      	cmp	r3, #1
 800d598:	dd71      	ble.n	800d67e <_strtod_l+0x8de>
 800d59a:	4629      	mov	r1, r5
 800d59c:	2201      	movs	r2, #1
 800d59e:	4620      	mov	r0, r4
 800d5a0:	f001 ff24 	bl	800f3ec <__lshift>
 800d5a4:	4631      	mov	r1, r6
 800d5a6:	4605      	mov	r5, r0
 800d5a8:	f001 ff90 	bl	800f4cc <__mcmp>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	dd66      	ble.n	800d67e <_strtod_l+0x8de>
 800d5b0:	9904      	ldr	r1, [sp, #16]
 800d5b2:	4a53      	ldr	r2, [pc, #332]	; (800d700 <_strtod_l+0x960>)
 800d5b4:	465b      	mov	r3, fp
 800d5b6:	2900      	cmp	r1, #0
 800d5b8:	f000 8081 	beq.w	800d6be <_strtod_l+0x91e>
 800d5bc:	ea02 010b 	and.w	r1, r2, fp
 800d5c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d5c4:	dc7b      	bgt.n	800d6be <_strtod_l+0x91e>
 800d5c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d5ca:	f77f aea9 	ble.w	800d320 <_strtod_l+0x580>
 800d5ce:	4b4d      	ldr	r3, [pc, #308]	; (800d704 <_strtod_l+0x964>)
 800d5d0:	4650      	mov	r0, sl
 800d5d2:	4659      	mov	r1, fp
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f7f3 f80f 	bl	80005f8 <__aeabi_dmul>
 800d5da:	460b      	mov	r3, r1
 800d5dc:	4303      	orrs	r3, r0
 800d5de:	bf08      	it	eq
 800d5e0:	2322      	moveq	r3, #34	; 0x22
 800d5e2:	4682      	mov	sl, r0
 800d5e4:	468b      	mov	fp, r1
 800d5e6:	bf08      	it	eq
 800d5e8:	6023      	streq	r3, [r4, #0]
 800d5ea:	e62b      	b.n	800d244 <_strtod_l+0x4a4>
 800d5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5f4:	ea03 0a0a 	and.w	sl, r3, sl
 800d5f8:	e6e3      	b.n	800d3c2 <_strtod_l+0x622>
 800d5fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d5fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d602:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d606:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d60a:	fa01 f308 	lsl.w	r3, r1, r8
 800d60e:	9308      	str	r3, [sp, #32]
 800d610:	910d      	str	r1, [sp, #52]	; 0x34
 800d612:	e746      	b.n	800d4a2 <_strtod_l+0x702>
 800d614:	2300      	movs	r3, #0
 800d616:	9308      	str	r3, [sp, #32]
 800d618:	2301      	movs	r3, #1
 800d61a:	930d      	str	r3, [sp, #52]	; 0x34
 800d61c:	e741      	b.n	800d4a2 <_strtod_l+0x702>
 800d61e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d620:	4642      	mov	r2, r8
 800d622:	4620      	mov	r0, r4
 800d624:	f001 fee2 	bl	800f3ec <__lshift>
 800d628:	9018      	str	r0, [sp, #96]	; 0x60
 800d62a:	2800      	cmp	r0, #0
 800d62c:	f47f af6b 	bne.w	800d506 <_strtod_l+0x766>
 800d630:	e5fe      	b.n	800d230 <_strtod_l+0x490>
 800d632:	465f      	mov	r7, fp
 800d634:	d16e      	bne.n	800d714 <_strtod_l+0x974>
 800d636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d638:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d63c:	b342      	cbz	r2, 800d690 <_strtod_l+0x8f0>
 800d63e:	4a32      	ldr	r2, [pc, #200]	; (800d708 <_strtod_l+0x968>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d128      	bne.n	800d696 <_strtod_l+0x8f6>
 800d644:	9b04      	ldr	r3, [sp, #16]
 800d646:	4651      	mov	r1, sl
 800d648:	b1eb      	cbz	r3, 800d686 <_strtod_l+0x8e6>
 800d64a:	4b2d      	ldr	r3, [pc, #180]	; (800d700 <_strtod_l+0x960>)
 800d64c:	403b      	ands	r3, r7
 800d64e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d652:	f04f 32ff 	mov.w	r2, #4294967295
 800d656:	d819      	bhi.n	800d68c <_strtod_l+0x8ec>
 800d658:	0d1b      	lsrs	r3, r3, #20
 800d65a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d65e:	fa02 f303 	lsl.w	r3, r2, r3
 800d662:	4299      	cmp	r1, r3
 800d664:	d117      	bne.n	800d696 <_strtod_l+0x8f6>
 800d666:	4b29      	ldr	r3, [pc, #164]	; (800d70c <_strtod_l+0x96c>)
 800d668:	429f      	cmp	r7, r3
 800d66a:	d102      	bne.n	800d672 <_strtod_l+0x8d2>
 800d66c:	3101      	adds	r1, #1
 800d66e:	f43f addf 	beq.w	800d230 <_strtod_l+0x490>
 800d672:	4b23      	ldr	r3, [pc, #140]	; (800d700 <_strtod_l+0x960>)
 800d674:	403b      	ands	r3, r7
 800d676:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d67a:	f04f 0a00 	mov.w	sl, #0
 800d67e:	9b04      	ldr	r3, [sp, #16]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1a4      	bne.n	800d5ce <_strtod_l+0x82e>
 800d684:	e5de      	b.n	800d244 <_strtod_l+0x4a4>
 800d686:	f04f 33ff 	mov.w	r3, #4294967295
 800d68a:	e7ea      	b.n	800d662 <_strtod_l+0x8c2>
 800d68c:	4613      	mov	r3, r2
 800d68e:	e7e8      	b.n	800d662 <_strtod_l+0x8c2>
 800d690:	ea53 030a 	orrs.w	r3, r3, sl
 800d694:	d08c      	beq.n	800d5b0 <_strtod_l+0x810>
 800d696:	9b08      	ldr	r3, [sp, #32]
 800d698:	b1db      	cbz	r3, 800d6d2 <_strtod_l+0x932>
 800d69a:	423b      	tst	r3, r7
 800d69c:	d0ef      	beq.n	800d67e <_strtod_l+0x8de>
 800d69e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6a0:	9a04      	ldr	r2, [sp, #16]
 800d6a2:	4650      	mov	r0, sl
 800d6a4:	4659      	mov	r1, fp
 800d6a6:	b1c3      	cbz	r3, 800d6da <_strtod_l+0x93a>
 800d6a8:	f7ff fb5b 	bl	800cd62 <sulp>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	ec51 0b18 	vmov	r0, r1, d8
 800d6b4:	f7f2 fdea 	bl	800028c <__adddf3>
 800d6b8:	4682      	mov	sl, r0
 800d6ba:	468b      	mov	fp, r1
 800d6bc:	e7df      	b.n	800d67e <_strtod_l+0x8de>
 800d6be:	4013      	ands	r3, r2
 800d6c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d6c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d6c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d6cc:	f04f 3aff 	mov.w	sl, #4294967295
 800d6d0:	e7d5      	b.n	800d67e <_strtod_l+0x8de>
 800d6d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6d4:	ea13 0f0a 	tst.w	r3, sl
 800d6d8:	e7e0      	b.n	800d69c <_strtod_l+0x8fc>
 800d6da:	f7ff fb42 	bl	800cd62 <sulp>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	ec51 0b18 	vmov	r0, r1, d8
 800d6e6:	f7f2 fdcf 	bl	8000288 <__aeabi_dsub>
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	4682      	mov	sl, r0
 800d6f0:	468b      	mov	fp, r1
 800d6f2:	f7f3 f9e9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	d0c1      	beq.n	800d67e <_strtod_l+0x8de>
 800d6fa:	e611      	b.n	800d320 <_strtod_l+0x580>
 800d6fc:	fffffc02 	.word	0xfffffc02
 800d700:	7ff00000 	.word	0x7ff00000
 800d704:	39500000 	.word	0x39500000
 800d708:	000fffff 	.word	0x000fffff
 800d70c:	7fefffff 	.word	0x7fefffff
 800d710:	08010850 	.word	0x08010850
 800d714:	4631      	mov	r1, r6
 800d716:	4628      	mov	r0, r5
 800d718:	f002 f856 	bl	800f7c8 <__ratio>
 800d71c:	ec59 8b10 	vmov	r8, r9, d0
 800d720:	ee10 0a10 	vmov	r0, s0
 800d724:	2200      	movs	r2, #0
 800d726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d72a:	4649      	mov	r1, r9
 800d72c:	f7f3 f9e0 	bl	8000af0 <__aeabi_dcmple>
 800d730:	2800      	cmp	r0, #0
 800d732:	d07a      	beq.n	800d82a <_strtod_l+0xa8a>
 800d734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d736:	2b00      	cmp	r3, #0
 800d738:	d04a      	beq.n	800d7d0 <_strtod_l+0xa30>
 800d73a:	4b95      	ldr	r3, [pc, #596]	; (800d990 <_strtod_l+0xbf0>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d742:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d990 <_strtod_l+0xbf0>
 800d746:	f04f 0800 	mov.w	r8, #0
 800d74a:	4b92      	ldr	r3, [pc, #584]	; (800d994 <_strtod_l+0xbf4>)
 800d74c:	403b      	ands	r3, r7
 800d74e:	930d      	str	r3, [sp, #52]	; 0x34
 800d750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d752:	4b91      	ldr	r3, [pc, #580]	; (800d998 <_strtod_l+0xbf8>)
 800d754:	429a      	cmp	r2, r3
 800d756:	f040 80b0 	bne.w	800d8ba <_strtod_l+0xb1a>
 800d75a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d75e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d762:	ec4b ab10 	vmov	d0, sl, fp
 800d766:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d76a:	f001 ff55 	bl	800f618 <__ulp>
 800d76e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d772:	ec53 2b10 	vmov	r2, r3, d0
 800d776:	f7f2 ff3f 	bl	80005f8 <__aeabi_dmul>
 800d77a:	4652      	mov	r2, sl
 800d77c:	465b      	mov	r3, fp
 800d77e:	f7f2 fd85 	bl	800028c <__adddf3>
 800d782:	460b      	mov	r3, r1
 800d784:	4983      	ldr	r1, [pc, #524]	; (800d994 <_strtod_l+0xbf4>)
 800d786:	4a85      	ldr	r2, [pc, #532]	; (800d99c <_strtod_l+0xbfc>)
 800d788:	4019      	ands	r1, r3
 800d78a:	4291      	cmp	r1, r2
 800d78c:	4682      	mov	sl, r0
 800d78e:	d960      	bls.n	800d852 <_strtod_l+0xab2>
 800d790:	ee18 3a90 	vmov	r3, s17
 800d794:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d798:	4293      	cmp	r3, r2
 800d79a:	d104      	bne.n	800d7a6 <_strtod_l+0xa06>
 800d79c:	ee18 3a10 	vmov	r3, s16
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	f43f ad45 	beq.w	800d230 <_strtod_l+0x490>
 800d7a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d9a8 <_strtod_l+0xc08>
 800d7aa:	f04f 3aff 	mov.w	sl, #4294967295
 800d7ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f001 fbff 	bl	800efb4 <_Bfree>
 800d7b6:	9905      	ldr	r1, [sp, #20]
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f001 fbfb 	bl	800efb4 <_Bfree>
 800d7be:	4631      	mov	r1, r6
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f001 fbf7 	bl	800efb4 <_Bfree>
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f001 fbf3 	bl	800efb4 <_Bfree>
 800d7ce:	e61a      	b.n	800d406 <_strtod_l+0x666>
 800d7d0:	f1ba 0f00 	cmp.w	sl, #0
 800d7d4:	d11b      	bne.n	800d80e <_strtod_l+0xa6e>
 800d7d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7da:	b9f3      	cbnz	r3, 800d81a <_strtod_l+0xa7a>
 800d7dc:	4b6c      	ldr	r3, [pc, #432]	; (800d990 <_strtod_l+0xbf0>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	4649      	mov	r1, r9
 800d7e4:	f7f3 f97a 	bl	8000adc <__aeabi_dcmplt>
 800d7e8:	b9d0      	cbnz	r0, 800d820 <_strtod_l+0xa80>
 800d7ea:	4640      	mov	r0, r8
 800d7ec:	4649      	mov	r1, r9
 800d7ee:	4b6c      	ldr	r3, [pc, #432]	; (800d9a0 <_strtod_l+0xc00>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f7f2 ff01 	bl	80005f8 <__aeabi_dmul>
 800d7f6:	4680      	mov	r8, r0
 800d7f8:	4689      	mov	r9, r1
 800d7fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d7fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d802:	9315      	str	r3, [sp, #84]	; 0x54
 800d804:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d808:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d80c:	e79d      	b.n	800d74a <_strtod_l+0x9aa>
 800d80e:	f1ba 0f01 	cmp.w	sl, #1
 800d812:	d102      	bne.n	800d81a <_strtod_l+0xa7a>
 800d814:	2f00      	cmp	r7, #0
 800d816:	f43f ad83 	beq.w	800d320 <_strtod_l+0x580>
 800d81a:	4b62      	ldr	r3, [pc, #392]	; (800d9a4 <_strtod_l+0xc04>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	e78e      	b.n	800d73e <_strtod_l+0x99e>
 800d820:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d9a0 <_strtod_l+0xc00>
 800d824:	f04f 0800 	mov.w	r8, #0
 800d828:	e7e7      	b.n	800d7fa <_strtod_l+0xa5a>
 800d82a:	4b5d      	ldr	r3, [pc, #372]	; (800d9a0 <_strtod_l+0xc00>)
 800d82c:	4640      	mov	r0, r8
 800d82e:	4649      	mov	r1, r9
 800d830:	2200      	movs	r2, #0
 800d832:	f7f2 fee1 	bl	80005f8 <__aeabi_dmul>
 800d836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d838:	4680      	mov	r8, r0
 800d83a:	4689      	mov	r9, r1
 800d83c:	b933      	cbnz	r3, 800d84c <_strtod_l+0xaac>
 800d83e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d842:	900e      	str	r0, [sp, #56]	; 0x38
 800d844:	930f      	str	r3, [sp, #60]	; 0x3c
 800d846:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d84a:	e7dd      	b.n	800d808 <_strtod_l+0xa68>
 800d84c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d850:	e7f9      	b.n	800d846 <_strtod_l+0xaa6>
 800d852:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d856:	9b04      	ldr	r3, [sp, #16]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1a8      	bne.n	800d7ae <_strtod_l+0xa0e>
 800d85c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d862:	0d1b      	lsrs	r3, r3, #20
 800d864:	051b      	lsls	r3, r3, #20
 800d866:	429a      	cmp	r2, r3
 800d868:	d1a1      	bne.n	800d7ae <_strtod_l+0xa0e>
 800d86a:	4640      	mov	r0, r8
 800d86c:	4649      	mov	r1, r9
 800d86e:	f7f3 fa23 	bl	8000cb8 <__aeabi_d2lz>
 800d872:	f7f2 fe93 	bl	800059c <__aeabi_l2d>
 800d876:	4602      	mov	r2, r0
 800d878:	460b      	mov	r3, r1
 800d87a:	4640      	mov	r0, r8
 800d87c:	4649      	mov	r1, r9
 800d87e:	f7f2 fd03 	bl	8000288 <__aeabi_dsub>
 800d882:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d888:	ea43 030a 	orr.w	r3, r3, sl
 800d88c:	4313      	orrs	r3, r2
 800d88e:	4680      	mov	r8, r0
 800d890:	4689      	mov	r9, r1
 800d892:	d055      	beq.n	800d940 <_strtod_l+0xba0>
 800d894:	a336      	add	r3, pc, #216	; (adr r3, 800d970 <_strtod_l+0xbd0>)
 800d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89a:	f7f3 f91f 	bl	8000adc <__aeabi_dcmplt>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	f47f acd0 	bne.w	800d244 <_strtod_l+0x4a4>
 800d8a4:	a334      	add	r3, pc, #208	; (adr r3, 800d978 <_strtod_l+0xbd8>)
 800d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	4649      	mov	r1, r9
 800d8ae:	f7f3 f933 	bl	8000b18 <__aeabi_dcmpgt>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	f43f af7b 	beq.w	800d7ae <_strtod_l+0xa0e>
 800d8b8:	e4c4      	b.n	800d244 <_strtod_l+0x4a4>
 800d8ba:	9b04      	ldr	r3, [sp, #16]
 800d8bc:	b333      	cbz	r3, 800d90c <_strtod_l+0xb6c>
 800d8be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d8c4:	d822      	bhi.n	800d90c <_strtod_l+0xb6c>
 800d8c6:	a32e      	add	r3, pc, #184	; (adr r3, 800d980 <_strtod_l+0xbe0>)
 800d8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8cc:	4640      	mov	r0, r8
 800d8ce:	4649      	mov	r1, r9
 800d8d0:	f7f3 f90e 	bl	8000af0 <__aeabi_dcmple>
 800d8d4:	b1a0      	cbz	r0, 800d900 <_strtod_l+0xb60>
 800d8d6:	4649      	mov	r1, r9
 800d8d8:	4640      	mov	r0, r8
 800d8da:	f7f3 f965 	bl	8000ba8 <__aeabi_d2uiz>
 800d8de:	2801      	cmp	r0, #1
 800d8e0:	bf38      	it	cc
 800d8e2:	2001      	movcc	r0, #1
 800d8e4:	f7f2 fe0e 	bl	8000504 <__aeabi_ui2d>
 800d8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8ea:	4680      	mov	r8, r0
 800d8ec:	4689      	mov	r9, r1
 800d8ee:	bb23      	cbnz	r3, 800d93a <_strtod_l+0xb9a>
 800d8f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8f4:	9010      	str	r0, [sp, #64]	; 0x40
 800d8f6:	9311      	str	r3, [sp, #68]	; 0x44
 800d8f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d8fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d904:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d908:	1a9b      	subs	r3, r3, r2
 800d90a:	9309      	str	r3, [sp, #36]	; 0x24
 800d90c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d910:	eeb0 0a48 	vmov.f32	s0, s16
 800d914:	eef0 0a68 	vmov.f32	s1, s17
 800d918:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d91c:	f001 fe7c 	bl	800f618 <__ulp>
 800d920:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d924:	ec53 2b10 	vmov	r2, r3, d0
 800d928:	f7f2 fe66 	bl	80005f8 <__aeabi_dmul>
 800d92c:	ec53 2b18 	vmov	r2, r3, d8
 800d930:	f7f2 fcac 	bl	800028c <__adddf3>
 800d934:	4682      	mov	sl, r0
 800d936:	468b      	mov	fp, r1
 800d938:	e78d      	b.n	800d856 <_strtod_l+0xab6>
 800d93a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d93e:	e7db      	b.n	800d8f8 <_strtod_l+0xb58>
 800d940:	a311      	add	r3, pc, #68	; (adr r3, 800d988 <_strtod_l+0xbe8>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	f7f3 f8c9 	bl	8000adc <__aeabi_dcmplt>
 800d94a:	e7b2      	b.n	800d8b2 <_strtod_l+0xb12>
 800d94c:	2300      	movs	r3, #0
 800d94e:	930a      	str	r3, [sp, #40]	; 0x28
 800d950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d954:	6013      	str	r3, [r2, #0]
 800d956:	f7ff ba6b 	b.w	800ce30 <_strtod_l+0x90>
 800d95a:	2a65      	cmp	r2, #101	; 0x65
 800d95c:	f43f ab5f 	beq.w	800d01e <_strtod_l+0x27e>
 800d960:	2a45      	cmp	r2, #69	; 0x45
 800d962:	f43f ab5c 	beq.w	800d01e <_strtod_l+0x27e>
 800d966:	2301      	movs	r3, #1
 800d968:	f7ff bb94 	b.w	800d094 <_strtod_l+0x2f4>
 800d96c:	f3af 8000 	nop.w
 800d970:	94a03595 	.word	0x94a03595
 800d974:	3fdfffff 	.word	0x3fdfffff
 800d978:	35afe535 	.word	0x35afe535
 800d97c:	3fe00000 	.word	0x3fe00000
 800d980:	ffc00000 	.word	0xffc00000
 800d984:	41dfffff 	.word	0x41dfffff
 800d988:	94a03595 	.word	0x94a03595
 800d98c:	3fcfffff 	.word	0x3fcfffff
 800d990:	3ff00000 	.word	0x3ff00000
 800d994:	7ff00000 	.word	0x7ff00000
 800d998:	7fe00000 	.word	0x7fe00000
 800d99c:	7c9fffff 	.word	0x7c9fffff
 800d9a0:	3fe00000 	.word	0x3fe00000
 800d9a4:	bff00000 	.word	0xbff00000
 800d9a8:	7fefffff 	.word	0x7fefffff

0800d9ac <_strtod_r>:
 800d9ac:	4b01      	ldr	r3, [pc, #4]	; (800d9b4 <_strtod_r+0x8>)
 800d9ae:	f7ff b9f7 	b.w	800cda0 <_strtod_l>
 800d9b2:	bf00      	nop
 800d9b4:	20000094 	.word	0x20000094

0800d9b8 <strtod>:
 800d9b8:	460a      	mov	r2, r1
 800d9ba:	4601      	mov	r1, r0
 800d9bc:	4802      	ldr	r0, [pc, #8]	; (800d9c8 <strtod+0x10>)
 800d9be:	4b03      	ldr	r3, [pc, #12]	; (800d9cc <strtod+0x14>)
 800d9c0:	6800      	ldr	r0, [r0, #0]
 800d9c2:	f7ff b9ed 	b.w	800cda0 <_strtod_l>
 800d9c6:	bf00      	nop
 800d9c8:	2000002c 	.word	0x2000002c
 800d9cc:	20000094 	.word	0x20000094

0800d9d0 <_strtol_l.constprop.0>:
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d6:	d001      	beq.n	800d9dc <_strtol_l.constprop.0+0xc>
 800d9d8:	2b24      	cmp	r3, #36	; 0x24
 800d9da:	d906      	bls.n	800d9ea <_strtol_l.constprop.0+0x1a>
 800d9dc:	f7fe f9c0 	bl	800bd60 <__errno>
 800d9e0:	2316      	movs	r3, #22
 800d9e2:	6003      	str	r3, [r0, #0]
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dad0 <_strtol_l.constprop.0+0x100>
 800d9ee:	460d      	mov	r5, r1
 800d9f0:	462e      	mov	r6, r5
 800d9f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d9fa:	f017 0708 	ands.w	r7, r7, #8
 800d9fe:	d1f7      	bne.n	800d9f0 <_strtol_l.constprop.0+0x20>
 800da00:	2c2d      	cmp	r4, #45	; 0x2d
 800da02:	d132      	bne.n	800da6a <_strtol_l.constprop.0+0x9a>
 800da04:	782c      	ldrb	r4, [r5, #0]
 800da06:	2701      	movs	r7, #1
 800da08:	1cb5      	adds	r5, r6, #2
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d05b      	beq.n	800dac6 <_strtol_l.constprop.0+0xf6>
 800da0e:	2b10      	cmp	r3, #16
 800da10:	d109      	bne.n	800da26 <_strtol_l.constprop.0+0x56>
 800da12:	2c30      	cmp	r4, #48	; 0x30
 800da14:	d107      	bne.n	800da26 <_strtol_l.constprop.0+0x56>
 800da16:	782c      	ldrb	r4, [r5, #0]
 800da18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800da1c:	2c58      	cmp	r4, #88	; 0x58
 800da1e:	d14d      	bne.n	800dabc <_strtol_l.constprop.0+0xec>
 800da20:	786c      	ldrb	r4, [r5, #1]
 800da22:	2310      	movs	r3, #16
 800da24:	3502      	adds	r5, #2
 800da26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800da2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800da2e:	f04f 0c00 	mov.w	ip, #0
 800da32:	fbb8 f9f3 	udiv	r9, r8, r3
 800da36:	4666      	mov	r6, ip
 800da38:	fb03 8a19 	mls	sl, r3, r9, r8
 800da3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800da40:	f1be 0f09 	cmp.w	lr, #9
 800da44:	d816      	bhi.n	800da74 <_strtol_l.constprop.0+0xa4>
 800da46:	4674      	mov	r4, lr
 800da48:	42a3      	cmp	r3, r4
 800da4a:	dd24      	ble.n	800da96 <_strtol_l.constprop.0+0xc6>
 800da4c:	f1bc 0f00 	cmp.w	ip, #0
 800da50:	db1e      	blt.n	800da90 <_strtol_l.constprop.0+0xc0>
 800da52:	45b1      	cmp	r9, r6
 800da54:	d31c      	bcc.n	800da90 <_strtol_l.constprop.0+0xc0>
 800da56:	d101      	bne.n	800da5c <_strtol_l.constprop.0+0x8c>
 800da58:	45a2      	cmp	sl, r4
 800da5a:	db19      	blt.n	800da90 <_strtol_l.constprop.0+0xc0>
 800da5c:	fb06 4603 	mla	r6, r6, r3, r4
 800da60:	f04f 0c01 	mov.w	ip, #1
 800da64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da68:	e7e8      	b.n	800da3c <_strtol_l.constprop.0+0x6c>
 800da6a:	2c2b      	cmp	r4, #43	; 0x2b
 800da6c:	bf04      	itt	eq
 800da6e:	782c      	ldrbeq	r4, [r5, #0]
 800da70:	1cb5      	addeq	r5, r6, #2
 800da72:	e7ca      	b.n	800da0a <_strtol_l.constprop.0+0x3a>
 800da74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800da78:	f1be 0f19 	cmp.w	lr, #25
 800da7c:	d801      	bhi.n	800da82 <_strtol_l.constprop.0+0xb2>
 800da7e:	3c37      	subs	r4, #55	; 0x37
 800da80:	e7e2      	b.n	800da48 <_strtol_l.constprop.0+0x78>
 800da82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800da86:	f1be 0f19 	cmp.w	lr, #25
 800da8a:	d804      	bhi.n	800da96 <_strtol_l.constprop.0+0xc6>
 800da8c:	3c57      	subs	r4, #87	; 0x57
 800da8e:	e7db      	b.n	800da48 <_strtol_l.constprop.0+0x78>
 800da90:	f04f 3cff 	mov.w	ip, #4294967295
 800da94:	e7e6      	b.n	800da64 <_strtol_l.constprop.0+0x94>
 800da96:	f1bc 0f00 	cmp.w	ip, #0
 800da9a:	da05      	bge.n	800daa8 <_strtol_l.constprop.0+0xd8>
 800da9c:	2322      	movs	r3, #34	; 0x22
 800da9e:	6003      	str	r3, [r0, #0]
 800daa0:	4646      	mov	r6, r8
 800daa2:	b942      	cbnz	r2, 800dab6 <_strtol_l.constprop.0+0xe6>
 800daa4:	4630      	mov	r0, r6
 800daa6:	e79e      	b.n	800d9e6 <_strtol_l.constprop.0+0x16>
 800daa8:	b107      	cbz	r7, 800daac <_strtol_l.constprop.0+0xdc>
 800daaa:	4276      	negs	r6, r6
 800daac:	2a00      	cmp	r2, #0
 800daae:	d0f9      	beq.n	800daa4 <_strtol_l.constprop.0+0xd4>
 800dab0:	f1bc 0f00 	cmp.w	ip, #0
 800dab4:	d000      	beq.n	800dab8 <_strtol_l.constprop.0+0xe8>
 800dab6:	1e69      	subs	r1, r5, #1
 800dab8:	6011      	str	r1, [r2, #0]
 800daba:	e7f3      	b.n	800daa4 <_strtol_l.constprop.0+0xd4>
 800dabc:	2430      	movs	r4, #48	; 0x30
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1b1      	bne.n	800da26 <_strtol_l.constprop.0+0x56>
 800dac2:	2308      	movs	r3, #8
 800dac4:	e7af      	b.n	800da26 <_strtol_l.constprop.0+0x56>
 800dac6:	2c30      	cmp	r4, #48	; 0x30
 800dac8:	d0a5      	beq.n	800da16 <_strtol_l.constprop.0+0x46>
 800daca:	230a      	movs	r3, #10
 800dacc:	e7ab      	b.n	800da26 <_strtol_l.constprop.0+0x56>
 800dace:	bf00      	nop
 800dad0:	08010879 	.word	0x08010879

0800dad4 <_strtol_r>:
 800dad4:	f7ff bf7c 	b.w	800d9d0 <_strtol_l.constprop.0>

0800dad8 <quorem>:
 800dad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dadc:	6903      	ldr	r3, [r0, #16]
 800dade:	690c      	ldr	r4, [r1, #16]
 800dae0:	42a3      	cmp	r3, r4
 800dae2:	4607      	mov	r7, r0
 800dae4:	f2c0 8081 	blt.w	800dbea <quorem+0x112>
 800dae8:	3c01      	subs	r4, #1
 800daea:	f101 0814 	add.w	r8, r1, #20
 800daee:	f100 0514 	add.w	r5, r0, #20
 800daf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800daf6:	9301      	str	r3, [sp, #4]
 800daf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dafc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db00:	3301      	adds	r3, #1
 800db02:	429a      	cmp	r2, r3
 800db04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800db08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800db10:	d331      	bcc.n	800db76 <quorem+0x9e>
 800db12:	f04f 0e00 	mov.w	lr, #0
 800db16:	4640      	mov	r0, r8
 800db18:	46ac      	mov	ip, r5
 800db1a:	46f2      	mov	sl, lr
 800db1c:	f850 2b04 	ldr.w	r2, [r0], #4
 800db20:	b293      	uxth	r3, r2
 800db22:	fb06 e303 	mla	r3, r6, r3, lr
 800db26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	ebaa 0303 	sub.w	r3, sl, r3
 800db30:	f8dc a000 	ldr.w	sl, [ip]
 800db34:	0c12      	lsrs	r2, r2, #16
 800db36:	fa13 f38a 	uxtah	r3, r3, sl
 800db3a:	fb06 e202 	mla	r2, r6, r2, lr
 800db3e:	9300      	str	r3, [sp, #0]
 800db40:	9b00      	ldr	r3, [sp, #0]
 800db42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db46:	b292      	uxth	r2, r2
 800db48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800db4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db50:	f8bd 3000 	ldrh.w	r3, [sp]
 800db54:	4581      	cmp	r9, r0
 800db56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db5a:	f84c 3b04 	str.w	r3, [ip], #4
 800db5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800db62:	d2db      	bcs.n	800db1c <quorem+0x44>
 800db64:	f855 300b 	ldr.w	r3, [r5, fp]
 800db68:	b92b      	cbnz	r3, 800db76 <quorem+0x9e>
 800db6a:	9b01      	ldr	r3, [sp, #4]
 800db6c:	3b04      	subs	r3, #4
 800db6e:	429d      	cmp	r5, r3
 800db70:	461a      	mov	r2, r3
 800db72:	d32e      	bcc.n	800dbd2 <quorem+0xfa>
 800db74:	613c      	str	r4, [r7, #16]
 800db76:	4638      	mov	r0, r7
 800db78:	f001 fca8 	bl	800f4cc <__mcmp>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	db24      	blt.n	800dbca <quorem+0xf2>
 800db80:	3601      	adds	r6, #1
 800db82:	4628      	mov	r0, r5
 800db84:	f04f 0c00 	mov.w	ip, #0
 800db88:	f858 2b04 	ldr.w	r2, [r8], #4
 800db8c:	f8d0 e000 	ldr.w	lr, [r0]
 800db90:	b293      	uxth	r3, r2
 800db92:	ebac 0303 	sub.w	r3, ip, r3
 800db96:	0c12      	lsrs	r2, r2, #16
 800db98:	fa13 f38e 	uxtah	r3, r3, lr
 800db9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbaa:	45c1      	cmp	r9, r8
 800dbac:	f840 3b04 	str.w	r3, [r0], #4
 800dbb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dbb4:	d2e8      	bcs.n	800db88 <quorem+0xb0>
 800dbb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbbe:	b922      	cbnz	r2, 800dbca <quorem+0xf2>
 800dbc0:	3b04      	subs	r3, #4
 800dbc2:	429d      	cmp	r5, r3
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	d30a      	bcc.n	800dbde <quorem+0x106>
 800dbc8:	613c      	str	r4, [r7, #16]
 800dbca:	4630      	mov	r0, r6
 800dbcc:	b003      	add	sp, #12
 800dbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd2:	6812      	ldr	r2, [r2, #0]
 800dbd4:	3b04      	subs	r3, #4
 800dbd6:	2a00      	cmp	r2, #0
 800dbd8:	d1cc      	bne.n	800db74 <quorem+0x9c>
 800dbda:	3c01      	subs	r4, #1
 800dbdc:	e7c7      	b.n	800db6e <quorem+0x96>
 800dbde:	6812      	ldr	r2, [r2, #0]
 800dbe0:	3b04      	subs	r3, #4
 800dbe2:	2a00      	cmp	r2, #0
 800dbe4:	d1f0      	bne.n	800dbc8 <quorem+0xf0>
 800dbe6:	3c01      	subs	r4, #1
 800dbe8:	e7eb      	b.n	800dbc2 <quorem+0xea>
 800dbea:	2000      	movs	r0, #0
 800dbec:	e7ee      	b.n	800dbcc <quorem+0xf4>
	...

0800dbf0 <_dtoa_r>:
 800dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	ed2d 8b04 	vpush	{d8-d9}
 800dbf8:	ec57 6b10 	vmov	r6, r7, d0
 800dbfc:	b093      	sub	sp, #76	; 0x4c
 800dbfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dc00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dc04:	9106      	str	r1, [sp, #24]
 800dc06:	ee10 aa10 	vmov	sl, s0
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	9209      	str	r2, [sp, #36]	; 0x24
 800dc0e:	930c      	str	r3, [sp, #48]	; 0x30
 800dc10:	46bb      	mov	fp, r7
 800dc12:	b975      	cbnz	r5, 800dc32 <_dtoa_r+0x42>
 800dc14:	2010      	movs	r0, #16
 800dc16:	f7fe f8cd 	bl	800bdb4 <malloc>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	6260      	str	r0, [r4, #36]	; 0x24
 800dc1e:	b920      	cbnz	r0, 800dc2a <_dtoa_r+0x3a>
 800dc20:	4ba7      	ldr	r3, [pc, #668]	; (800dec0 <_dtoa_r+0x2d0>)
 800dc22:	21ea      	movs	r1, #234	; 0xea
 800dc24:	48a7      	ldr	r0, [pc, #668]	; (800dec4 <_dtoa_r+0x2d4>)
 800dc26:	f001 ffed 	bl	800fc04 <__assert_func>
 800dc2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc2e:	6005      	str	r5, [r0, #0]
 800dc30:	60c5      	str	r5, [r0, #12]
 800dc32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc34:	6819      	ldr	r1, [r3, #0]
 800dc36:	b151      	cbz	r1, 800dc4e <_dtoa_r+0x5e>
 800dc38:	685a      	ldr	r2, [r3, #4]
 800dc3a:	604a      	str	r2, [r1, #4]
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	4093      	lsls	r3, r2
 800dc40:	608b      	str	r3, [r1, #8]
 800dc42:	4620      	mov	r0, r4
 800dc44:	f001 f9b6 	bl	800efb4 <_Bfree>
 800dc48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	1e3b      	subs	r3, r7, #0
 800dc50:	bfaa      	itet	ge
 800dc52:	2300      	movge	r3, #0
 800dc54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800dc58:	f8c8 3000 	strge.w	r3, [r8]
 800dc5c:	4b9a      	ldr	r3, [pc, #616]	; (800dec8 <_dtoa_r+0x2d8>)
 800dc5e:	bfbc      	itt	lt
 800dc60:	2201      	movlt	r2, #1
 800dc62:	f8c8 2000 	strlt.w	r2, [r8]
 800dc66:	ea33 030b 	bics.w	r3, r3, fp
 800dc6a:	d11b      	bne.n	800dca4 <_dtoa_r+0xb4>
 800dc6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc6e:	f242 730f 	movw	r3, #9999	; 0x270f
 800dc72:	6013      	str	r3, [r2, #0]
 800dc74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc78:	4333      	orrs	r3, r6
 800dc7a:	f000 8592 	beq.w	800e7a2 <_dtoa_r+0xbb2>
 800dc7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc80:	b963      	cbnz	r3, 800dc9c <_dtoa_r+0xac>
 800dc82:	4b92      	ldr	r3, [pc, #584]	; (800decc <_dtoa_r+0x2dc>)
 800dc84:	e022      	b.n	800dccc <_dtoa_r+0xdc>
 800dc86:	4b92      	ldr	r3, [pc, #584]	; (800ded0 <_dtoa_r+0x2e0>)
 800dc88:	9301      	str	r3, [sp, #4]
 800dc8a:	3308      	adds	r3, #8
 800dc8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc8e:	6013      	str	r3, [r2, #0]
 800dc90:	9801      	ldr	r0, [sp, #4]
 800dc92:	b013      	add	sp, #76	; 0x4c
 800dc94:	ecbd 8b04 	vpop	{d8-d9}
 800dc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc9c:	4b8b      	ldr	r3, [pc, #556]	; (800decc <_dtoa_r+0x2dc>)
 800dc9e:	9301      	str	r3, [sp, #4]
 800dca0:	3303      	adds	r3, #3
 800dca2:	e7f3      	b.n	800dc8c <_dtoa_r+0x9c>
 800dca4:	2200      	movs	r2, #0
 800dca6:	2300      	movs	r3, #0
 800dca8:	4650      	mov	r0, sl
 800dcaa:	4659      	mov	r1, fp
 800dcac:	f7f2 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcb0:	ec4b ab19 	vmov	d9, sl, fp
 800dcb4:	4680      	mov	r8, r0
 800dcb6:	b158      	cbz	r0, 800dcd0 <_dtoa_r+0xe0>
 800dcb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcba:	2301      	movs	r3, #1
 800dcbc:	6013      	str	r3, [r2, #0]
 800dcbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f000 856b 	beq.w	800e79c <_dtoa_r+0xbac>
 800dcc6:	4883      	ldr	r0, [pc, #524]	; (800ded4 <_dtoa_r+0x2e4>)
 800dcc8:	6018      	str	r0, [r3, #0]
 800dcca:	1e43      	subs	r3, r0, #1
 800dccc:	9301      	str	r3, [sp, #4]
 800dcce:	e7df      	b.n	800dc90 <_dtoa_r+0xa0>
 800dcd0:	ec4b ab10 	vmov	d0, sl, fp
 800dcd4:	aa10      	add	r2, sp, #64	; 0x40
 800dcd6:	a911      	add	r1, sp, #68	; 0x44
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f001 fd19 	bl	800f710 <__d2b>
 800dcde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dce2:	ee08 0a10 	vmov	s16, r0
 800dce6:	2d00      	cmp	r5, #0
 800dce8:	f000 8084 	beq.w	800ddf4 <_dtoa_r+0x204>
 800dcec:	ee19 3a90 	vmov	r3, s19
 800dcf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcf4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dcf8:	4656      	mov	r6, sl
 800dcfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dcfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dd02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dd06:	4b74      	ldr	r3, [pc, #464]	; (800ded8 <_dtoa_r+0x2e8>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	4639      	mov	r1, r7
 800dd0e:	f7f2 fabb 	bl	8000288 <__aeabi_dsub>
 800dd12:	a365      	add	r3, pc, #404	; (adr r3, 800dea8 <_dtoa_r+0x2b8>)
 800dd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd18:	f7f2 fc6e 	bl	80005f8 <__aeabi_dmul>
 800dd1c:	a364      	add	r3, pc, #400	; (adr r3, 800deb0 <_dtoa_r+0x2c0>)
 800dd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd22:	f7f2 fab3 	bl	800028c <__adddf3>
 800dd26:	4606      	mov	r6, r0
 800dd28:	4628      	mov	r0, r5
 800dd2a:	460f      	mov	r7, r1
 800dd2c:	f7f2 fbfa 	bl	8000524 <__aeabi_i2d>
 800dd30:	a361      	add	r3, pc, #388	; (adr r3, 800deb8 <_dtoa_r+0x2c8>)
 800dd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd36:	f7f2 fc5f 	bl	80005f8 <__aeabi_dmul>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	4630      	mov	r0, r6
 800dd40:	4639      	mov	r1, r7
 800dd42:	f7f2 faa3 	bl	800028c <__adddf3>
 800dd46:	4606      	mov	r6, r0
 800dd48:	460f      	mov	r7, r1
 800dd4a:	f7f2 ff05 	bl	8000b58 <__aeabi_d2iz>
 800dd4e:	2200      	movs	r2, #0
 800dd50:	9000      	str	r0, [sp, #0]
 800dd52:	2300      	movs	r3, #0
 800dd54:	4630      	mov	r0, r6
 800dd56:	4639      	mov	r1, r7
 800dd58:	f7f2 fec0 	bl	8000adc <__aeabi_dcmplt>
 800dd5c:	b150      	cbz	r0, 800dd74 <_dtoa_r+0x184>
 800dd5e:	9800      	ldr	r0, [sp, #0]
 800dd60:	f7f2 fbe0 	bl	8000524 <__aeabi_i2d>
 800dd64:	4632      	mov	r2, r6
 800dd66:	463b      	mov	r3, r7
 800dd68:	f7f2 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd6c:	b910      	cbnz	r0, 800dd74 <_dtoa_r+0x184>
 800dd6e:	9b00      	ldr	r3, [sp, #0]
 800dd70:	3b01      	subs	r3, #1
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	9b00      	ldr	r3, [sp, #0]
 800dd76:	2b16      	cmp	r3, #22
 800dd78:	d85a      	bhi.n	800de30 <_dtoa_r+0x240>
 800dd7a:	9a00      	ldr	r2, [sp, #0]
 800dd7c:	4b57      	ldr	r3, [pc, #348]	; (800dedc <_dtoa_r+0x2ec>)
 800dd7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd86:	ec51 0b19 	vmov	r0, r1, d9
 800dd8a:	f7f2 fea7 	bl	8000adc <__aeabi_dcmplt>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d050      	beq.n	800de34 <_dtoa_r+0x244>
 800dd92:	9b00      	ldr	r3, [sp, #0]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	9300      	str	r3, [sp, #0]
 800dd98:	2300      	movs	r3, #0
 800dd9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd9e:	1b5d      	subs	r5, r3, r5
 800dda0:	1e6b      	subs	r3, r5, #1
 800dda2:	9305      	str	r3, [sp, #20]
 800dda4:	bf45      	ittet	mi
 800dda6:	f1c5 0301 	rsbmi	r3, r5, #1
 800ddaa:	9304      	strmi	r3, [sp, #16]
 800ddac:	2300      	movpl	r3, #0
 800ddae:	2300      	movmi	r3, #0
 800ddb0:	bf4c      	ite	mi
 800ddb2:	9305      	strmi	r3, [sp, #20]
 800ddb4:	9304      	strpl	r3, [sp, #16]
 800ddb6:	9b00      	ldr	r3, [sp, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	db3d      	blt.n	800de38 <_dtoa_r+0x248>
 800ddbc:	9b05      	ldr	r3, [sp, #20]
 800ddbe:	9a00      	ldr	r2, [sp, #0]
 800ddc0:	920a      	str	r2, [sp, #40]	; 0x28
 800ddc2:	4413      	add	r3, r2
 800ddc4:	9305      	str	r3, [sp, #20]
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	9307      	str	r3, [sp, #28]
 800ddca:	9b06      	ldr	r3, [sp, #24]
 800ddcc:	2b09      	cmp	r3, #9
 800ddce:	f200 8089 	bhi.w	800dee4 <_dtoa_r+0x2f4>
 800ddd2:	2b05      	cmp	r3, #5
 800ddd4:	bfc4      	itt	gt
 800ddd6:	3b04      	subgt	r3, #4
 800ddd8:	9306      	strgt	r3, [sp, #24]
 800ddda:	9b06      	ldr	r3, [sp, #24]
 800dddc:	f1a3 0302 	sub.w	r3, r3, #2
 800dde0:	bfcc      	ite	gt
 800dde2:	2500      	movgt	r5, #0
 800dde4:	2501      	movle	r5, #1
 800dde6:	2b03      	cmp	r3, #3
 800dde8:	f200 8087 	bhi.w	800defa <_dtoa_r+0x30a>
 800ddec:	e8df f003 	tbb	[pc, r3]
 800ddf0:	59383a2d 	.word	0x59383a2d
 800ddf4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ddf8:	441d      	add	r5, r3
 800ddfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ddfe:	2b20      	cmp	r3, #32
 800de00:	bfc1      	itttt	gt
 800de02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800de06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800de0a:	fa0b f303 	lslgt.w	r3, fp, r3
 800de0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800de12:	bfda      	itte	le
 800de14:	f1c3 0320 	rsble	r3, r3, #32
 800de18:	fa06 f003 	lslle.w	r0, r6, r3
 800de1c:	4318      	orrgt	r0, r3
 800de1e:	f7f2 fb71 	bl	8000504 <__aeabi_ui2d>
 800de22:	2301      	movs	r3, #1
 800de24:	4606      	mov	r6, r0
 800de26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800de2a:	3d01      	subs	r5, #1
 800de2c:	930e      	str	r3, [sp, #56]	; 0x38
 800de2e:	e76a      	b.n	800dd06 <_dtoa_r+0x116>
 800de30:	2301      	movs	r3, #1
 800de32:	e7b2      	b.n	800dd9a <_dtoa_r+0x1aa>
 800de34:	900b      	str	r0, [sp, #44]	; 0x2c
 800de36:	e7b1      	b.n	800dd9c <_dtoa_r+0x1ac>
 800de38:	9b04      	ldr	r3, [sp, #16]
 800de3a:	9a00      	ldr	r2, [sp, #0]
 800de3c:	1a9b      	subs	r3, r3, r2
 800de3e:	9304      	str	r3, [sp, #16]
 800de40:	4253      	negs	r3, r2
 800de42:	9307      	str	r3, [sp, #28]
 800de44:	2300      	movs	r3, #0
 800de46:	930a      	str	r3, [sp, #40]	; 0x28
 800de48:	e7bf      	b.n	800ddca <_dtoa_r+0x1da>
 800de4a:	2300      	movs	r3, #0
 800de4c:	9308      	str	r3, [sp, #32]
 800de4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de50:	2b00      	cmp	r3, #0
 800de52:	dc55      	bgt.n	800df00 <_dtoa_r+0x310>
 800de54:	2301      	movs	r3, #1
 800de56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800de5a:	461a      	mov	r2, r3
 800de5c:	9209      	str	r2, [sp, #36]	; 0x24
 800de5e:	e00c      	b.n	800de7a <_dtoa_r+0x28a>
 800de60:	2301      	movs	r3, #1
 800de62:	e7f3      	b.n	800de4c <_dtoa_r+0x25c>
 800de64:	2300      	movs	r3, #0
 800de66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de68:	9308      	str	r3, [sp, #32]
 800de6a:	9b00      	ldr	r3, [sp, #0]
 800de6c:	4413      	add	r3, r2
 800de6e:	9302      	str	r3, [sp, #8]
 800de70:	3301      	adds	r3, #1
 800de72:	2b01      	cmp	r3, #1
 800de74:	9303      	str	r3, [sp, #12]
 800de76:	bfb8      	it	lt
 800de78:	2301      	movlt	r3, #1
 800de7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800de7c:	2200      	movs	r2, #0
 800de7e:	6042      	str	r2, [r0, #4]
 800de80:	2204      	movs	r2, #4
 800de82:	f102 0614 	add.w	r6, r2, #20
 800de86:	429e      	cmp	r6, r3
 800de88:	6841      	ldr	r1, [r0, #4]
 800de8a:	d93d      	bls.n	800df08 <_dtoa_r+0x318>
 800de8c:	4620      	mov	r0, r4
 800de8e:	f001 f851 	bl	800ef34 <_Balloc>
 800de92:	9001      	str	r0, [sp, #4]
 800de94:	2800      	cmp	r0, #0
 800de96:	d13b      	bne.n	800df10 <_dtoa_r+0x320>
 800de98:	4b11      	ldr	r3, [pc, #68]	; (800dee0 <_dtoa_r+0x2f0>)
 800de9a:	4602      	mov	r2, r0
 800de9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dea0:	e6c0      	b.n	800dc24 <_dtoa_r+0x34>
 800dea2:	2301      	movs	r3, #1
 800dea4:	e7df      	b.n	800de66 <_dtoa_r+0x276>
 800dea6:	bf00      	nop
 800dea8:	636f4361 	.word	0x636f4361
 800deac:	3fd287a7 	.word	0x3fd287a7
 800deb0:	8b60c8b3 	.word	0x8b60c8b3
 800deb4:	3fc68a28 	.word	0x3fc68a28
 800deb8:	509f79fb 	.word	0x509f79fb
 800debc:	3fd34413 	.word	0x3fd34413
 800dec0:	08010986 	.word	0x08010986
 800dec4:	0801099d 	.word	0x0801099d
 800dec8:	7ff00000 	.word	0x7ff00000
 800decc:	08010982 	.word	0x08010982
 800ded0:	08010979 	.word	0x08010979
 800ded4:	080107f9 	.word	0x080107f9
 800ded8:	3ff80000 	.word	0x3ff80000
 800dedc:	08010b08 	.word	0x08010b08
 800dee0:	080109f8 	.word	0x080109f8
 800dee4:	2501      	movs	r5, #1
 800dee6:	2300      	movs	r3, #0
 800dee8:	9306      	str	r3, [sp, #24]
 800deea:	9508      	str	r5, [sp, #32]
 800deec:	f04f 33ff 	mov.w	r3, #4294967295
 800def0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800def4:	2200      	movs	r2, #0
 800def6:	2312      	movs	r3, #18
 800def8:	e7b0      	b.n	800de5c <_dtoa_r+0x26c>
 800defa:	2301      	movs	r3, #1
 800defc:	9308      	str	r3, [sp, #32]
 800defe:	e7f5      	b.n	800deec <_dtoa_r+0x2fc>
 800df00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800df06:	e7b8      	b.n	800de7a <_dtoa_r+0x28a>
 800df08:	3101      	adds	r1, #1
 800df0a:	6041      	str	r1, [r0, #4]
 800df0c:	0052      	lsls	r2, r2, #1
 800df0e:	e7b8      	b.n	800de82 <_dtoa_r+0x292>
 800df10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df12:	9a01      	ldr	r2, [sp, #4]
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	9b03      	ldr	r3, [sp, #12]
 800df18:	2b0e      	cmp	r3, #14
 800df1a:	f200 809d 	bhi.w	800e058 <_dtoa_r+0x468>
 800df1e:	2d00      	cmp	r5, #0
 800df20:	f000 809a 	beq.w	800e058 <_dtoa_r+0x468>
 800df24:	9b00      	ldr	r3, [sp, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	dd32      	ble.n	800df90 <_dtoa_r+0x3a0>
 800df2a:	4ab7      	ldr	r2, [pc, #732]	; (800e208 <_dtoa_r+0x618>)
 800df2c:	f003 030f 	and.w	r3, r3, #15
 800df30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800df34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df38:	9b00      	ldr	r3, [sp, #0]
 800df3a:	05d8      	lsls	r0, r3, #23
 800df3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800df40:	d516      	bpl.n	800df70 <_dtoa_r+0x380>
 800df42:	4bb2      	ldr	r3, [pc, #712]	; (800e20c <_dtoa_r+0x61c>)
 800df44:	ec51 0b19 	vmov	r0, r1, d9
 800df48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df4c:	f7f2 fc7e 	bl	800084c <__aeabi_ddiv>
 800df50:	f007 070f 	and.w	r7, r7, #15
 800df54:	4682      	mov	sl, r0
 800df56:	468b      	mov	fp, r1
 800df58:	2503      	movs	r5, #3
 800df5a:	4eac      	ldr	r6, [pc, #688]	; (800e20c <_dtoa_r+0x61c>)
 800df5c:	b957      	cbnz	r7, 800df74 <_dtoa_r+0x384>
 800df5e:	4642      	mov	r2, r8
 800df60:	464b      	mov	r3, r9
 800df62:	4650      	mov	r0, sl
 800df64:	4659      	mov	r1, fp
 800df66:	f7f2 fc71 	bl	800084c <__aeabi_ddiv>
 800df6a:	4682      	mov	sl, r0
 800df6c:	468b      	mov	fp, r1
 800df6e:	e028      	b.n	800dfc2 <_dtoa_r+0x3d2>
 800df70:	2502      	movs	r5, #2
 800df72:	e7f2      	b.n	800df5a <_dtoa_r+0x36a>
 800df74:	07f9      	lsls	r1, r7, #31
 800df76:	d508      	bpl.n	800df8a <_dtoa_r+0x39a>
 800df78:	4640      	mov	r0, r8
 800df7a:	4649      	mov	r1, r9
 800df7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df80:	f7f2 fb3a 	bl	80005f8 <__aeabi_dmul>
 800df84:	3501      	adds	r5, #1
 800df86:	4680      	mov	r8, r0
 800df88:	4689      	mov	r9, r1
 800df8a:	107f      	asrs	r7, r7, #1
 800df8c:	3608      	adds	r6, #8
 800df8e:	e7e5      	b.n	800df5c <_dtoa_r+0x36c>
 800df90:	f000 809b 	beq.w	800e0ca <_dtoa_r+0x4da>
 800df94:	9b00      	ldr	r3, [sp, #0]
 800df96:	4f9d      	ldr	r7, [pc, #628]	; (800e20c <_dtoa_r+0x61c>)
 800df98:	425e      	negs	r6, r3
 800df9a:	4b9b      	ldr	r3, [pc, #620]	; (800e208 <_dtoa_r+0x618>)
 800df9c:	f006 020f 	and.w	r2, r6, #15
 800dfa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa8:	ec51 0b19 	vmov	r0, r1, d9
 800dfac:	f7f2 fb24 	bl	80005f8 <__aeabi_dmul>
 800dfb0:	1136      	asrs	r6, r6, #4
 800dfb2:	4682      	mov	sl, r0
 800dfb4:	468b      	mov	fp, r1
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	2502      	movs	r5, #2
 800dfba:	2e00      	cmp	r6, #0
 800dfbc:	d17a      	bne.n	800e0b4 <_dtoa_r+0x4c4>
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1d3      	bne.n	800df6a <_dtoa_r+0x37a>
 800dfc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f000 8082 	beq.w	800e0ce <_dtoa_r+0x4de>
 800dfca:	4b91      	ldr	r3, [pc, #580]	; (800e210 <_dtoa_r+0x620>)
 800dfcc:	2200      	movs	r2, #0
 800dfce:	4650      	mov	r0, sl
 800dfd0:	4659      	mov	r1, fp
 800dfd2:	f7f2 fd83 	bl	8000adc <__aeabi_dcmplt>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d079      	beq.n	800e0ce <_dtoa_r+0x4de>
 800dfda:	9b03      	ldr	r3, [sp, #12]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d076      	beq.n	800e0ce <_dtoa_r+0x4de>
 800dfe0:	9b02      	ldr	r3, [sp, #8]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	dd36      	ble.n	800e054 <_dtoa_r+0x464>
 800dfe6:	9b00      	ldr	r3, [sp, #0]
 800dfe8:	4650      	mov	r0, sl
 800dfea:	4659      	mov	r1, fp
 800dfec:	1e5f      	subs	r7, r3, #1
 800dfee:	2200      	movs	r2, #0
 800dff0:	4b88      	ldr	r3, [pc, #544]	; (800e214 <_dtoa_r+0x624>)
 800dff2:	f7f2 fb01 	bl	80005f8 <__aeabi_dmul>
 800dff6:	9e02      	ldr	r6, [sp, #8]
 800dff8:	4682      	mov	sl, r0
 800dffa:	468b      	mov	fp, r1
 800dffc:	3501      	adds	r5, #1
 800dffe:	4628      	mov	r0, r5
 800e000:	f7f2 fa90 	bl	8000524 <__aeabi_i2d>
 800e004:	4652      	mov	r2, sl
 800e006:	465b      	mov	r3, fp
 800e008:	f7f2 faf6 	bl	80005f8 <__aeabi_dmul>
 800e00c:	4b82      	ldr	r3, [pc, #520]	; (800e218 <_dtoa_r+0x628>)
 800e00e:	2200      	movs	r2, #0
 800e010:	f7f2 f93c 	bl	800028c <__adddf3>
 800e014:	46d0      	mov	r8, sl
 800e016:	46d9      	mov	r9, fp
 800e018:	4682      	mov	sl, r0
 800e01a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e01e:	2e00      	cmp	r6, #0
 800e020:	d158      	bne.n	800e0d4 <_dtoa_r+0x4e4>
 800e022:	4b7e      	ldr	r3, [pc, #504]	; (800e21c <_dtoa_r+0x62c>)
 800e024:	2200      	movs	r2, #0
 800e026:	4640      	mov	r0, r8
 800e028:	4649      	mov	r1, r9
 800e02a:	f7f2 f92d 	bl	8000288 <__aeabi_dsub>
 800e02e:	4652      	mov	r2, sl
 800e030:	465b      	mov	r3, fp
 800e032:	4680      	mov	r8, r0
 800e034:	4689      	mov	r9, r1
 800e036:	f7f2 fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	f040 8295 	bne.w	800e56a <_dtoa_r+0x97a>
 800e040:	4652      	mov	r2, sl
 800e042:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e046:	4640      	mov	r0, r8
 800e048:	4649      	mov	r1, r9
 800e04a:	f7f2 fd47 	bl	8000adc <__aeabi_dcmplt>
 800e04e:	2800      	cmp	r0, #0
 800e050:	f040 8289 	bne.w	800e566 <_dtoa_r+0x976>
 800e054:	ec5b ab19 	vmov	sl, fp, d9
 800e058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	f2c0 8148 	blt.w	800e2f0 <_dtoa_r+0x700>
 800e060:	9a00      	ldr	r2, [sp, #0]
 800e062:	2a0e      	cmp	r2, #14
 800e064:	f300 8144 	bgt.w	800e2f0 <_dtoa_r+0x700>
 800e068:	4b67      	ldr	r3, [pc, #412]	; (800e208 <_dtoa_r+0x618>)
 800e06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e06e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e074:	2b00      	cmp	r3, #0
 800e076:	f280 80d5 	bge.w	800e224 <_dtoa_r+0x634>
 800e07a:	9b03      	ldr	r3, [sp, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f300 80d1 	bgt.w	800e224 <_dtoa_r+0x634>
 800e082:	f040 826f 	bne.w	800e564 <_dtoa_r+0x974>
 800e086:	4b65      	ldr	r3, [pc, #404]	; (800e21c <_dtoa_r+0x62c>)
 800e088:	2200      	movs	r2, #0
 800e08a:	4640      	mov	r0, r8
 800e08c:	4649      	mov	r1, r9
 800e08e:	f7f2 fab3 	bl	80005f8 <__aeabi_dmul>
 800e092:	4652      	mov	r2, sl
 800e094:	465b      	mov	r3, fp
 800e096:	f7f2 fd35 	bl	8000b04 <__aeabi_dcmpge>
 800e09a:	9e03      	ldr	r6, [sp, #12]
 800e09c:	4637      	mov	r7, r6
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	f040 8245 	bne.w	800e52e <_dtoa_r+0x93e>
 800e0a4:	9d01      	ldr	r5, [sp, #4]
 800e0a6:	2331      	movs	r3, #49	; 0x31
 800e0a8:	f805 3b01 	strb.w	r3, [r5], #1
 800e0ac:	9b00      	ldr	r3, [sp, #0]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	e240      	b.n	800e536 <_dtoa_r+0x946>
 800e0b4:	07f2      	lsls	r2, r6, #31
 800e0b6:	d505      	bpl.n	800e0c4 <_dtoa_r+0x4d4>
 800e0b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0bc:	f7f2 fa9c 	bl	80005f8 <__aeabi_dmul>
 800e0c0:	3501      	adds	r5, #1
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	1076      	asrs	r6, r6, #1
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	e777      	b.n	800dfba <_dtoa_r+0x3ca>
 800e0ca:	2502      	movs	r5, #2
 800e0cc:	e779      	b.n	800dfc2 <_dtoa_r+0x3d2>
 800e0ce:	9f00      	ldr	r7, [sp, #0]
 800e0d0:	9e03      	ldr	r6, [sp, #12]
 800e0d2:	e794      	b.n	800dffe <_dtoa_r+0x40e>
 800e0d4:	9901      	ldr	r1, [sp, #4]
 800e0d6:	4b4c      	ldr	r3, [pc, #304]	; (800e208 <_dtoa_r+0x618>)
 800e0d8:	4431      	add	r1, r6
 800e0da:	910d      	str	r1, [sp, #52]	; 0x34
 800e0dc:	9908      	ldr	r1, [sp, #32]
 800e0de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e0e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e0e6:	2900      	cmp	r1, #0
 800e0e8:	d043      	beq.n	800e172 <_dtoa_r+0x582>
 800e0ea:	494d      	ldr	r1, [pc, #308]	; (800e220 <_dtoa_r+0x630>)
 800e0ec:	2000      	movs	r0, #0
 800e0ee:	f7f2 fbad 	bl	800084c <__aeabi_ddiv>
 800e0f2:	4652      	mov	r2, sl
 800e0f4:	465b      	mov	r3, fp
 800e0f6:	f7f2 f8c7 	bl	8000288 <__aeabi_dsub>
 800e0fa:	9d01      	ldr	r5, [sp, #4]
 800e0fc:	4682      	mov	sl, r0
 800e0fe:	468b      	mov	fp, r1
 800e100:	4649      	mov	r1, r9
 800e102:	4640      	mov	r0, r8
 800e104:	f7f2 fd28 	bl	8000b58 <__aeabi_d2iz>
 800e108:	4606      	mov	r6, r0
 800e10a:	f7f2 fa0b 	bl	8000524 <__aeabi_i2d>
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	4640      	mov	r0, r8
 800e114:	4649      	mov	r1, r9
 800e116:	f7f2 f8b7 	bl	8000288 <__aeabi_dsub>
 800e11a:	3630      	adds	r6, #48	; 0x30
 800e11c:	f805 6b01 	strb.w	r6, [r5], #1
 800e120:	4652      	mov	r2, sl
 800e122:	465b      	mov	r3, fp
 800e124:	4680      	mov	r8, r0
 800e126:	4689      	mov	r9, r1
 800e128:	f7f2 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d163      	bne.n	800e1f8 <_dtoa_r+0x608>
 800e130:	4642      	mov	r2, r8
 800e132:	464b      	mov	r3, r9
 800e134:	4936      	ldr	r1, [pc, #216]	; (800e210 <_dtoa_r+0x620>)
 800e136:	2000      	movs	r0, #0
 800e138:	f7f2 f8a6 	bl	8000288 <__aeabi_dsub>
 800e13c:	4652      	mov	r2, sl
 800e13e:	465b      	mov	r3, fp
 800e140:	f7f2 fccc 	bl	8000adc <__aeabi_dcmplt>
 800e144:	2800      	cmp	r0, #0
 800e146:	f040 80b5 	bne.w	800e2b4 <_dtoa_r+0x6c4>
 800e14a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e14c:	429d      	cmp	r5, r3
 800e14e:	d081      	beq.n	800e054 <_dtoa_r+0x464>
 800e150:	4b30      	ldr	r3, [pc, #192]	; (800e214 <_dtoa_r+0x624>)
 800e152:	2200      	movs	r2, #0
 800e154:	4650      	mov	r0, sl
 800e156:	4659      	mov	r1, fp
 800e158:	f7f2 fa4e 	bl	80005f8 <__aeabi_dmul>
 800e15c:	4b2d      	ldr	r3, [pc, #180]	; (800e214 <_dtoa_r+0x624>)
 800e15e:	4682      	mov	sl, r0
 800e160:	468b      	mov	fp, r1
 800e162:	4640      	mov	r0, r8
 800e164:	4649      	mov	r1, r9
 800e166:	2200      	movs	r2, #0
 800e168:	f7f2 fa46 	bl	80005f8 <__aeabi_dmul>
 800e16c:	4680      	mov	r8, r0
 800e16e:	4689      	mov	r9, r1
 800e170:	e7c6      	b.n	800e100 <_dtoa_r+0x510>
 800e172:	4650      	mov	r0, sl
 800e174:	4659      	mov	r1, fp
 800e176:	f7f2 fa3f 	bl	80005f8 <__aeabi_dmul>
 800e17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e17c:	9d01      	ldr	r5, [sp, #4]
 800e17e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e180:	4682      	mov	sl, r0
 800e182:	468b      	mov	fp, r1
 800e184:	4649      	mov	r1, r9
 800e186:	4640      	mov	r0, r8
 800e188:	f7f2 fce6 	bl	8000b58 <__aeabi_d2iz>
 800e18c:	4606      	mov	r6, r0
 800e18e:	f7f2 f9c9 	bl	8000524 <__aeabi_i2d>
 800e192:	3630      	adds	r6, #48	; 0x30
 800e194:	4602      	mov	r2, r0
 800e196:	460b      	mov	r3, r1
 800e198:	4640      	mov	r0, r8
 800e19a:	4649      	mov	r1, r9
 800e19c:	f7f2 f874 	bl	8000288 <__aeabi_dsub>
 800e1a0:	f805 6b01 	strb.w	r6, [r5], #1
 800e1a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1a6:	429d      	cmp	r5, r3
 800e1a8:	4680      	mov	r8, r0
 800e1aa:	4689      	mov	r9, r1
 800e1ac:	f04f 0200 	mov.w	r2, #0
 800e1b0:	d124      	bne.n	800e1fc <_dtoa_r+0x60c>
 800e1b2:	4b1b      	ldr	r3, [pc, #108]	; (800e220 <_dtoa_r+0x630>)
 800e1b4:	4650      	mov	r0, sl
 800e1b6:	4659      	mov	r1, fp
 800e1b8:	f7f2 f868 	bl	800028c <__adddf3>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	460b      	mov	r3, r1
 800e1c0:	4640      	mov	r0, r8
 800e1c2:	4649      	mov	r1, r9
 800e1c4:	f7f2 fca8 	bl	8000b18 <__aeabi_dcmpgt>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d173      	bne.n	800e2b4 <_dtoa_r+0x6c4>
 800e1cc:	4652      	mov	r2, sl
 800e1ce:	465b      	mov	r3, fp
 800e1d0:	4913      	ldr	r1, [pc, #76]	; (800e220 <_dtoa_r+0x630>)
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	f7f2 f858 	bl	8000288 <__aeabi_dsub>
 800e1d8:	4602      	mov	r2, r0
 800e1da:	460b      	mov	r3, r1
 800e1dc:	4640      	mov	r0, r8
 800e1de:	4649      	mov	r1, r9
 800e1e0:	f7f2 fc7c 	bl	8000adc <__aeabi_dcmplt>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	f43f af35 	beq.w	800e054 <_dtoa_r+0x464>
 800e1ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e1ec:	1e6b      	subs	r3, r5, #1
 800e1ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1f4:	2b30      	cmp	r3, #48	; 0x30
 800e1f6:	d0f8      	beq.n	800e1ea <_dtoa_r+0x5fa>
 800e1f8:	9700      	str	r7, [sp, #0]
 800e1fa:	e049      	b.n	800e290 <_dtoa_r+0x6a0>
 800e1fc:	4b05      	ldr	r3, [pc, #20]	; (800e214 <_dtoa_r+0x624>)
 800e1fe:	f7f2 f9fb 	bl	80005f8 <__aeabi_dmul>
 800e202:	4680      	mov	r8, r0
 800e204:	4689      	mov	r9, r1
 800e206:	e7bd      	b.n	800e184 <_dtoa_r+0x594>
 800e208:	08010b08 	.word	0x08010b08
 800e20c:	08010ae0 	.word	0x08010ae0
 800e210:	3ff00000 	.word	0x3ff00000
 800e214:	40240000 	.word	0x40240000
 800e218:	401c0000 	.word	0x401c0000
 800e21c:	40140000 	.word	0x40140000
 800e220:	3fe00000 	.word	0x3fe00000
 800e224:	9d01      	ldr	r5, [sp, #4]
 800e226:	4656      	mov	r6, sl
 800e228:	465f      	mov	r7, fp
 800e22a:	4642      	mov	r2, r8
 800e22c:	464b      	mov	r3, r9
 800e22e:	4630      	mov	r0, r6
 800e230:	4639      	mov	r1, r7
 800e232:	f7f2 fb0b 	bl	800084c <__aeabi_ddiv>
 800e236:	f7f2 fc8f 	bl	8000b58 <__aeabi_d2iz>
 800e23a:	4682      	mov	sl, r0
 800e23c:	f7f2 f972 	bl	8000524 <__aeabi_i2d>
 800e240:	4642      	mov	r2, r8
 800e242:	464b      	mov	r3, r9
 800e244:	f7f2 f9d8 	bl	80005f8 <__aeabi_dmul>
 800e248:	4602      	mov	r2, r0
 800e24a:	460b      	mov	r3, r1
 800e24c:	4630      	mov	r0, r6
 800e24e:	4639      	mov	r1, r7
 800e250:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e254:	f7f2 f818 	bl	8000288 <__aeabi_dsub>
 800e258:	f805 6b01 	strb.w	r6, [r5], #1
 800e25c:	9e01      	ldr	r6, [sp, #4]
 800e25e:	9f03      	ldr	r7, [sp, #12]
 800e260:	1bae      	subs	r6, r5, r6
 800e262:	42b7      	cmp	r7, r6
 800e264:	4602      	mov	r2, r0
 800e266:	460b      	mov	r3, r1
 800e268:	d135      	bne.n	800e2d6 <_dtoa_r+0x6e6>
 800e26a:	f7f2 f80f 	bl	800028c <__adddf3>
 800e26e:	4642      	mov	r2, r8
 800e270:	464b      	mov	r3, r9
 800e272:	4606      	mov	r6, r0
 800e274:	460f      	mov	r7, r1
 800e276:	f7f2 fc4f 	bl	8000b18 <__aeabi_dcmpgt>
 800e27a:	b9d0      	cbnz	r0, 800e2b2 <_dtoa_r+0x6c2>
 800e27c:	4642      	mov	r2, r8
 800e27e:	464b      	mov	r3, r9
 800e280:	4630      	mov	r0, r6
 800e282:	4639      	mov	r1, r7
 800e284:	f7f2 fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 800e288:	b110      	cbz	r0, 800e290 <_dtoa_r+0x6a0>
 800e28a:	f01a 0f01 	tst.w	sl, #1
 800e28e:	d110      	bne.n	800e2b2 <_dtoa_r+0x6c2>
 800e290:	4620      	mov	r0, r4
 800e292:	ee18 1a10 	vmov	r1, s16
 800e296:	f000 fe8d 	bl	800efb4 <_Bfree>
 800e29a:	2300      	movs	r3, #0
 800e29c:	9800      	ldr	r0, [sp, #0]
 800e29e:	702b      	strb	r3, [r5, #0]
 800e2a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2a2:	3001      	adds	r0, #1
 800e2a4:	6018      	str	r0, [r3, #0]
 800e2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	f43f acf1 	beq.w	800dc90 <_dtoa_r+0xa0>
 800e2ae:	601d      	str	r5, [r3, #0]
 800e2b0:	e4ee      	b.n	800dc90 <_dtoa_r+0xa0>
 800e2b2:	9f00      	ldr	r7, [sp, #0]
 800e2b4:	462b      	mov	r3, r5
 800e2b6:	461d      	mov	r5, r3
 800e2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2bc:	2a39      	cmp	r2, #57	; 0x39
 800e2be:	d106      	bne.n	800e2ce <_dtoa_r+0x6de>
 800e2c0:	9a01      	ldr	r2, [sp, #4]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d1f7      	bne.n	800e2b6 <_dtoa_r+0x6c6>
 800e2c6:	9901      	ldr	r1, [sp, #4]
 800e2c8:	2230      	movs	r2, #48	; 0x30
 800e2ca:	3701      	adds	r7, #1
 800e2cc:	700a      	strb	r2, [r1, #0]
 800e2ce:	781a      	ldrb	r2, [r3, #0]
 800e2d0:	3201      	adds	r2, #1
 800e2d2:	701a      	strb	r2, [r3, #0]
 800e2d4:	e790      	b.n	800e1f8 <_dtoa_r+0x608>
 800e2d6:	4ba6      	ldr	r3, [pc, #664]	; (800e570 <_dtoa_r+0x980>)
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f7f2 f98d 	bl	80005f8 <__aeabi_dmul>
 800e2de:	2200      	movs	r2, #0
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	460f      	mov	r7, r1
 800e2e6:	f7f2 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d09d      	beq.n	800e22a <_dtoa_r+0x63a>
 800e2ee:	e7cf      	b.n	800e290 <_dtoa_r+0x6a0>
 800e2f0:	9a08      	ldr	r2, [sp, #32]
 800e2f2:	2a00      	cmp	r2, #0
 800e2f4:	f000 80d7 	beq.w	800e4a6 <_dtoa_r+0x8b6>
 800e2f8:	9a06      	ldr	r2, [sp, #24]
 800e2fa:	2a01      	cmp	r2, #1
 800e2fc:	f300 80ba 	bgt.w	800e474 <_dtoa_r+0x884>
 800e300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e302:	2a00      	cmp	r2, #0
 800e304:	f000 80b2 	beq.w	800e46c <_dtoa_r+0x87c>
 800e308:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e30c:	9e07      	ldr	r6, [sp, #28]
 800e30e:	9d04      	ldr	r5, [sp, #16]
 800e310:	9a04      	ldr	r2, [sp, #16]
 800e312:	441a      	add	r2, r3
 800e314:	9204      	str	r2, [sp, #16]
 800e316:	9a05      	ldr	r2, [sp, #20]
 800e318:	2101      	movs	r1, #1
 800e31a:	441a      	add	r2, r3
 800e31c:	4620      	mov	r0, r4
 800e31e:	9205      	str	r2, [sp, #20]
 800e320:	f000 ff4a 	bl	800f1b8 <__i2b>
 800e324:	4607      	mov	r7, r0
 800e326:	2d00      	cmp	r5, #0
 800e328:	dd0c      	ble.n	800e344 <_dtoa_r+0x754>
 800e32a:	9b05      	ldr	r3, [sp, #20]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	dd09      	ble.n	800e344 <_dtoa_r+0x754>
 800e330:	42ab      	cmp	r3, r5
 800e332:	9a04      	ldr	r2, [sp, #16]
 800e334:	bfa8      	it	ge
 800e336:	462b      	movge	r3, r5
 800e338:	1ad2      	subs	r2, r2, r3
 800e33a:	9204      	str	r2, [sp, #16]
 800e33c:	9a05      	ldr	r2, [sp, #20]
 800e33e:	1aed      	subs	r5, r5, r3
 800e340:	1ad3      	subs	r3, r2, r3
 800e342:	9305      	str	r3, [sp, #20]
 800e344:	9b07      	ldr	r3, [sp, #28]
 800e346:	b31b      	cbz	r3, 800e390 <_dtoa_r+0x7a0>
 800e348:	9b08      	ldr	r3, [sp, #32]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f000 80af 	beq.w	800e4ae <_dtoa_r+0x8be>
 800e350:	2e00      	cmp	r6, #0
 800e352:	dd13      	ble.n	800e37c <_dtoa_r+0x78c>
 800e354:	4639      	mov	r1, r7
 800e356:	4632      	mov	r2, r6
 800e358:	4620      	mov	r0, r4
 800e35a:	f000 ffed 	bl	800f338 <__pow5mult>
 800e35e:	ee18 2a10 	vmov	r2, s16
 800e362:	4601      	mov	r1, r0
 800e364:	4607      	mov	r7, r0
 800e366:	4620      	mov	r0, r4
 800e368:	f000 ff3c 	bl	800f1e4 <__multiply>
 800e36c:	ee18 1a10 	vmov	r1, s16
 800e370:	4680      	mov	r8, r0
 800e372:	4620      	mov	r0, r4
 800e374:	f000 fe1e 	bl	800efb4 <_Bfree>
 800e378:	ee08 8a10 	vmov	s16, r8
 800e37c:	9b07      	ldr	r3, [sp, #28]
 800e37e:	1b9a      	subs	r2, r3, r6
 800e380:	d006      	beq.n	800e390 <_dtoa_r+0x7a0>
 800e382:	ee18 1a10 	vmov	r1, s16
 800e386:	4620      	mov	r0, r4
 800e388:	f000 ffd6 	bl	800f338 <__pow5mult>
 800e38c:	ee08 0a10 	vmov	s16, r0
 800e390:	2101      	movs	r1, #1
 800e392:	4620      	mov	r0, r4
 800e394:	f000 ff10 	bl	800f1b8 <__i2b>
 800e398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	4606      	mov	r6, r0
 800e39e:	f340 8088 	ble.w	800e4b2 <_dtoa_r+0x8c2>
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	4601      	mov	r1, r0
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f000 ffc6 	bl	800f338 <__pow5mult>
 800e3ac:	9b06      	ldr	r3, [sp, #24]
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	4606      	mov	r6, r0
 800e3b2:	f340 8081 	ble.w	800e4b8 <_dtoa_r+0x8c8>
 800e3b6:	f04f 0800 	mov.w	r8, #0
 800e3ba:	6933      	ldr	r3, [r6, #16]
 800e3bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e3c0:	6918      	ldr	r0, [r3, #16]
 800e3c2:	f000 fea9 	bl	800f118 <__hi0bits>
 800e3c6:	f1c0 0020 	rsb	r0, r0, #32
 800e3ca:	9b05      	ldr	r3, [sp, #20]
 800e3cc:	4418      	add	r0, r3
 800e3ce:	f010 001f 	ands.w	r0, r0, #31
 800e3d2:	f000 8092 	beq.w	800e4fa <_dtoa_r+0x90a>
 800e3d6:	f1c0 0320 	rsb	r3, r0, #32
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	f340 808a 	ble.w	800e4f4 <_dtoa_r+0x904>
 800e3e0:	f1c0 001c 	rsb	r0, r0, #28
 800e3e4:	9b04      	ldr	r3, [sp, #16]
 800e3e6:	4403      	add	r3, r0
 800e3e8:	9304      	str	r3, [sp, #16]
 800e3ea:	9b05      	ldr	r3, [sp, #20]
 800e3ec:	4403      	add	r3, r0
 800e3ee:	4405      	add	r5, r0
 800e3f0:	9305      	str	r3, [sp, #20]
 800e3f2:	9b04      	ldr	r3, [sp, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dd07      	ble.n	800e408 <_dtoa_r+0x818>
 800e3f8:	ee18 1a10 	vmov	r1, s16
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	4620      	mov	r0, r4
 800e400:	f000 fff4 	bl	800f3ec <__lshift>
 800e404:	ee08 0a10 	vmov	s16, r0
 800e408:	9b05      	ldr	r3, [sp, #20]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	dd05      	ble.n	800e41a <_dtoa_r+0x82a>
 800e40e:	4631      	mov	r1, r6
 800e410:	461a      	mov	r2, r3
 800e412:	4620      	mov	r0, r4
 800e414:	f000 ffea 	bl	800f3ec <__lshift>
 800e418:	4606      	mov	r6, r0
 800e41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d06e      	beq.n	800e4fe <_dtoa_r+0x90e>
 800e420:	ee18 0a10 	vmov	r0, s16
 800e424:	4631      	mov	r1, r6
 800e426:	f001 f851 	bl	800f4cc <__mcmp>
 800e42a:	2800      	cmp	r0, #0
 800e42c:	da67      	bge.n	800e4fe <_dtoa_r+0x90e>
 800e42e:	9b00      	ldr	r3, [sp, #0]
 800e430:	3b01      	subs	r3, #1
 800e432:	ee18 1a10 	vmov	r1, s16
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	220a      	movs	r2, #10
 800e43a:	2300      	movs	r3, #0
 800e43c:	4620      	mov	r0, r4
 800e43e:	f000 fddb 	bl	800eff8 <__multadd>
 800e442:	9b08      	ldr	r3, [sp, #32]
 800e444:	ee08 0a10 	vmov	s16, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f000 81b1 	beq.w	800e7b0 <_dtoa_r+0xbc0>
 800e44e:	2300      	movs	r3, #0
 800e450:	4639      	mov	r1, r7
 800e452:	220a      	movs	r2, #10
 800e454:	4620      	mov	r0, r4
 800e456:	f000 fdcf 	bl	800eff8 <__multadd>
 800e45a:	9b02      	ldr	r3, [sp, #8]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	4607      	mov	r7, r0
 800e460:	f300 808e 	bgt.w	800e580 <_dtoa_r+0x990>
 800e464:	9b06      	ldr	r3, [sp, #24]
 800e466:	2b02      	cmp	r3, #2
 800e468:	dc51      	bgt.n	800e50e <_dtoa_r+0x91e>
 800e46a:	e089      	b.n	800e580 <_dtoa_r+0x990>
 800e46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e46e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e472:	e74b      	b.n	800e30c <_dtoa_r+0x71c>
 800e474:	9b03      	ldr	r3, [sp, #12]
 800e476:	1e5e      	subs	r6, r3, #1
 800e478:	9b07      	ldr	r3, [sp, #28]
 800e47a:	42b3      	cmp	r3, r6
 800e47c:	bfbf      	itttt	lt
 800e47e:	9b07      	ldrlt	r3, [sp, #28]
 800e480:	9607      	strlt	r6, [sp, #28]
 800e482:	1af2      	sublt	r2, r6, r3
 800e484:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e486:	bfb6      	itet	lt
 800e488:	189b      	addlt	r3, r3, r2
 800e48a:	1b9e      	subge	r6, r3, r6
 800e48c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e48e:	9b03      	ldr	r3, [sp, #12]
 800e490:	bfb8      	it	lt
 800e492:	2600      	movlt	r6, #0
 800e494:	2b00      	cmp	r3, #0
 800e496:	bfb7      	itett	lt
 800e498:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e49c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e4a0:	1a9d      	sublt	r5, r3, r2
 800e4a2:	2300      	movlt	r3, #0
 800e4a4:	e734      	b.n	800e310 <_dtoa_r+0x720>
 800e4a6:	9e07      	ldr	r6, [sp, #28]
 800e4a8:	9d04      	ldr	r5, [sp, #16]
 800e4aa:	9f08      	ldr	r7, [sp, #32]
 800e4ac:	e73b      	b.n	800e326 <_dtoa_r+0x736>
 800e4ae:	9a07      	ldr	r2, [sp, #28]
 800e4b0:	e767      	b.n	800e382 <_dtoa_r+0x792>
 800e4b2:	9b06      	ldr	r3, [sp, #24]
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	dc18      	bgt.n	800e4ea <_dtoa_r+0x8fa>
 800e4b8:	f1ba 0f00 	cmp.w	sl, #0
 800e4bc:	d115      	bne.n	800e4ea <_dtoa_r+0x8fa>
 800e4be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4c2:	b993      	cbnz	r3, 800e4ea <_dtoa_r+0x8fa>
 800e4c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e4c8:	0d1b      	lsrs	r3, r3, #20
 800e4ca:	051b      	lsls	r3, r3, #20
 800e4cc:	b183      	cbz	r3, 800e4f0 <_dtoa_r+0x900>
 800e4ce:	9b04      	ldr	r3, [sp, #16]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	9304      	str	r3, [sp, #16]
 800e4d4:	9b05      	ldr	r3, [sp, #20]
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	9305      	str	r3, [sp, #20]
 800e4da:	f04f 0801 	mov.w	r8, #1
 800e4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f47f af6a 	bne.w	800e3ba <_dtoa_r+0x7ca>
 800e4e6:	2001      	movs	r0, #1
 800e4e8:	e76f      	b.n	800e3ca <_dtoa_r+0x7da>
 800e4ea:	f04f 0800 	mov.w	r8, #0
 800e4ee:	e7f6      	b.n	800e4de <_dtoa_r+0x8ee>
 800e4f0:	4698      	mov	r8, r3
 800e4f2:	e7f4      	b.n	800e4de <_dtoa_r+0x8ee>
 800e4f4:	f43f af7d 	beq.w	800e3f2 <_dtoa_r+0x802>
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	301c      	adds	r0, #28
 800e4fc:	e772      	b.n	800e3e4 <_dtoa_r+0x7f4>
 800e4fe:	9b03      	ldr	r3, [sp, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	dc37      	bgt.n	800e574 <_dtoa_r+0x984>
 800e504:	9b06      	ldr	r3, [sp, #24]
 800e506:	2b02      	cmp	r3, #2
 800e508:	dd34      	ble.n	800e574 <_dtoa_r+0x984>
 800e50a:	9b03      	ldr	r3, [sp, #12]
 800e50c:	9302      	str	r3, [sp, #8]
 800e50e:	9b02      	ldr	r3, [sp, #8]
 800e510:	b96b      	cbnz	r3, 800e52e <_dtoa_r+0x93e>
 800e512:	4631      	mov	r1, r6
 800e514:	2205      	movs	r2, #5
 800e516:	4620      	mov	r0, r4
 800e518:	f000 fd6e 	bl	800eff8 <__multadd>
 800e51c:	4601      	mov	r1, r0
 800e51e:	4606      	mov	r6, r0
 800e520:	ee18 0a10 	vmov	r0, s16
 800e524:	f000 ffd2 	bl	800f4cc <__mcmp>
 800e528:	2800      	cmp	r0, #0
 800e52a:	f73f adbb 	bgt.w	800e0a4 <_dtoa_r+0x4b4>
 800e52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e530:	9d01      	ldr	r5, [sp, #4]
 800e532:	43db      	mvns	r3, r3
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	f04f 0800 	mov.w	r8, #0
 800e53a:	4631      	mov	r1, r6
 800e53c:	4620      	mov	r0, r4
 800e53e:	f000 fd39 	bl	800efb4 <_Bfree>
 800e542:	2f00      	cmp	r7, #0
 800e544:	f43f aea4 	beq.w	800e290 <_dtoa_r+0x6a0>
 800e548:	f1b8 0f00 	cmp.w	r8, #0
 800e54c:	d005      	beq.n	800e55a <_dtoa_r+0x96a>
 800e54e:	45b8      	cmp	r8, r7
 800e550:	d003      	beq.n	800e55a <_dtoa_r+0x96a>
 800e552:	4641      	mov	r1, r8
 800e554:	4620      	mov	r0, r4
 800e556:	f000 fd2d 	bl	800efb4 <_Bfree>
 800e55a:	4639      	mov	r1, r7
 800e55c:	4620      	mov	r0, r4
 800e55e:	f000 fd29 	bl	800efb4 <_Bfree>
 800e562:	e695      	b.n	800e290 <_dtoa_r+0x6a0>
 800e564:	2600      	movs	r6, #0
 800e566:	4637      	mov	r7, r6
 800e568:	e7e1      	b.n	800e52e <_dtoa_r+0x93e>
 800e56a:	9700      	str	r7, [sp, #0]
 800e56c:	4637      	mov	r7, r6
 800e56e:	e599      	b.n	800e0a4 <_dtoa_r+0x4b4>
 800e570:	40240000 	.word	0x40240000
 800e574:	9b08      	ldr	r3, [sp, #32]
 800e576:	2b00      	cmp	r3, #0
 800e578:	f000 80ca 	beq.w	800e710 <_dtoa_r+0xb20>
 800e57c:	9b03      	ldr	r3, [sp, #12]
 800e57e:	9302      	str	r3, [sp, #8]
 800e580:	2d00      	cmp	r5, #0
 800e582:	dd05      	ble.n	800e590 <_dtoa_r+0x9a0>
 800e584:	4639      	mov	r1, r7
 800e586:	462a      	mov	r2, r5
 800e588:	4620      	mov	r0, r4
 800e58a:	f000 ff2f 	bl	800f3ec <__lshift>
 800e58e:	4607      	mov	r7, r0
 800e590:	f1b8 0f00 	cmp.w	r8, #0
 800e594:	d05b      	beq.n	800e64e <_dtoa_r+0xa5e>
 800e596:	6879      	ldr	r1, [r7, #4]
 800e598:	4620      	mov	r0, r4
 800e59a:	f000 fccb 	bl	800ef34 <_Balloc>
 800e59e:	4605      	mov	r5, r0
 800e5a0:	b928      	cbnz	r0, 800e5ae <_dtoa_r+0x9be>
 800e5a2:	4b87      	ldr	r3, [pc, #540]	; (800e7c0 <_dtoa_r+0xbd0>)
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e5aa:	f7ff bb3b 	b.w	800dc24 <_dtoa_r+0x34>
 800e5ae:	693a      	ldr	r2, [r7, #16]
 800e5b0:	3202      	adds	r2, #2
 800e5b2:	0092      	lsls	r2, r2, #2
 800e5b4:	f107 010c 	add.w	r1, r7, #12
 800e5b8:	300c      	adds	r0, #12
 800e5ba:	f7fd fc0b 	bl	800bdd4 <memcpy>
 800e5be:	2201      	movs	r2, #1
 800e5c0:	4629      	mov	r1, r5
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f000 ff12 	bl	800f3ec <__lshift>
 800e5c8:	9b01      	ldr	r3, [sp, #4]
 800e5ca:	f103 0901 	add.w	r9, r3, #1
 800e5ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	9305      	str	r3, [sp, #20]
 800e5d6:	f00a 0301 	and.w	r3, sl, #1
 800e5da:	46b8      	mov	r8, r7
 800e5dc:	9304      	str	r3, [sp, #16]
 800e5de:	4607      	mov	r7, r0
 800e5e0:	4631      	mov	r1, r6
 800e5e2:	ee18 0a10 	vmov	r0, s16
 800e5e6:	f7ff fa77 	bl	800dad8 <quorem>
 800e5ea:	4641      	mov	r1, r8
 800e5ec:	9002      	str	r0, [sp, #8]
 800e5ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e5f2:	ee18 0a10 	vmov	r0, s16
 800e5f6:	f000 ff69 	bl	800f4cc <__mcmp>
 800e5fa:	463a      	mov	r2, r7
 800e5fc:	9003      	str	r0, [sp, #12]
 800e5fe:	4631      	mov	r1, r6
 800e600:	4620      	mov	r0, r4
 800e602:	f000 ff7f 	bl	800f504 <__mdiff>
 800e606:	68c2      	ldr	r2, [r0, #12]
 800e608:	f109 3bff 	add.w	fp, r9, #4294967295
 800e60c:	4605      	mov	r5, r0
 800e60e:	bb02      	cbnz	r2, 800e652 <_dtoa_r+0xa62>
 800e610:	4601      	mov	r1, r0
 800e612:	ee18 0a10 	vmov	r0, s16
 800e616:	f000 ff59 	bl	800f4cc <__mcmp>
 800e61a:	4602      	mov	r2, r0
 800e61c:	4629      	mov	r1, r5
 800e61e:	4620      	mov	r0, r4
 800e620:	9207      	str	r2, [sp, #28]
 800e622:	f000 fcc7 	bl	800efb4 <_Bfree>
 800e626:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e62a:	ea43 0102 	orr.w	r1, r3, r2
 800e62e:	9b04      	ldr	r3, [sp, #16]
 800e630:	430b      	orrs	r3, r1
 800e632:	464d      	mov	r5, r9
 800e634:	d10f      	bne.n	800e656 <_dtoa_r+0xa66>
 800e636:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e63a:	d02a      	beq.n	800e692 <_dtoa_r+0xaa2>
 800e63c:	9b03      	ldr	r3, [sp, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	dd02      	ble.n	800e648 <_dtoa_r+0xa58>
 800e642:	9b02      	ldr	r3, [sp, #8]
 800e644:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e648:	f88b a000 	strb.w	sl, [fp]
 800e64c:	e775      	b.n	800e53a <_dtoa_r+0x94a>
 800e64e:	4638      	mov	r0, r7
 800e650:	e7ba      	b.n	800e5c8 <_dtoa_r+0x9d8>
 800e652:	2201      	movs	r2, #1
 800e654:	e7e2      	b.n	800e61c <_dtoa_r+0xa2c>
 800e656:	9b03      	ldr	r3, [sp, #12]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	db04      	blt.n	800e666 <_dtoa_r+0xa76>
 800e65c:	9906      	ldr	r1, [sp, #24]
 800e65e:	430b      	orrs	r3, r1
 800e660:	9904      	ldr	r1, [sp, #16]
 800e662:	430b      	orrs	r3, r1
 800e664:	d122      	bne.n	800e6ac <_dtoa_r+0xabc>
 800e666:	2a00      	cmp	r2, #0
 800e668:	ddee      	ble.n	800e648 <_dtoa_r+0xa58>
 800e66a:	ee18 1a10 	vmov	r1, s16
 800e66e:	2201      	movs	r2, #1
 800e670:	4620      	mov	r0, r4
 800e672:	f000 febb 	bl	800f3ec <__lshift>
 800e676:	4631      	mov	r1, r6
 800e678:	ee08 0a10 	vmov	s16, r0
 800e67c:	f000 ff26 	bl	800f4cc <__mcmp>
 800e680:	2800      	cmp	r0, #0
 800e682:	dc03      	bgt.n	800e68c <_dtoa_r+0xa9c>
 800e684:	d1e0      	bne.n	800e648 <_dtoa_r+0xa58>
 800e686:	f01a 0f01 	tst.w	sl, #1
 800e68a:	d0dd      	beq.n	800e648 <_dtoa_r+0xa58>
 800e68c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e690:	d1d7      	bne.n	800e642 <_dtoa_r+0xa52>
 800e692:	2339      	movs	r3, #57	; 0x39
 800e694:	f88b 3000 	strb.w	r3, [fp]
 800e698:	462b      	mov	r3, r5
 800e69a:	461d      	mov	r5, r3
 800e69c:	3b01      	subs	r3, #1
 800e69e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e6a2:	2a39      	cmp	r2, #57	; 0x39
 800e6a4:	d071      	beq.n	800e78a <_dtoa_r+0xb9a>
 800e6a6:	3201      	adds	r2, #1
 800e6a8:	701a      	strb	r2, [r3, #0]
 800e6aa:	e746      	b.n	800e53a <_dtoa_r+0x94a>
 800e6ac:	2a00      	cmp	r2, #0
 800e6ae:	dd07      	ble.n	800e6c0 <_dtoa_r+0xad0>
 800e6b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e6b4:	d0ed      	beq.n	800e692 <_dtoa_r+0xaa2>
 800e6b6:	f10a 0301 	add.w	r3, sl, #1
 800e6ba:	f88b 3000 	strb.w	r3, [fp]
 800e6be:	e73c      	b.n	800e53a <_dtoa_r+0x94a>
 800e6c0:	9b05      	ldr	r3, [sp, #20]
 800e6c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e6c6:	4599      	cmp	r9, r3
 800e6c8:	d047      	beq.n	800e75a <_dtoa_r+0xb6a>
 800e6ca:	ee18 1a10 	vmov	r1, s16
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	220a      	movs	r2, #10
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f000 fc90 	bl	800eff8 <__multadd>
 800e6d8:	45b8      	cmp	r8, r7
 800e6da:	ee08 0a10 	vmov	s16, r0
 800e6de:	f04f 0300 	mov.w	r3, #0
 800e6e2:	f04f 020a 	mov.w	r2, #10
 800e6e6:	4641      	mov	r1, r8
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	d106      	bne.n	800e6fa <_dtoa_r+0xb0a>
 800e6ec:	f000 fc84 	bl	800eff8 <__multadd>
 800e6f0:	4680      	mov	r8, r0
 800e6f2:	4607      	mov	r7, r0
 800e6f4:	f109 0901 	add.w	r9, r9, #1
 800e6f8:	e772      	b.n	800e5e0 <_dtoa_r+0x9f0>
 800e6fa:	f000 fc7d 	bl	800eff8 <__multadd>
 800e6fe:	4639      	mov	r1, r7
 800e700:	4680      	mov	r8, r0
 800e702:	2300      	movs	r3, #0
 800e704:	220a      	movs	r2, #10
 800e706:	4620      	mov	r0, r4
 800e708:	f000 fc76 	bl	800eff8 <__multadd>
 800e70c:	4607      	mov	r7, r0
 800e70e:	e7f1      	b.n	800e6f4 <_dtoa_r+0xb04>
 800e710:	9b03      	ldr	r3, [sp, #12]
 800e712:	9302      	str	r3, [sp, #8]
 800e714:	9d01      	ldr	r5, [sp, #4]
 800e716:	ee18 0a10 	vmov	r0, s16
 800e71a:	4631      	mov	r1, r6
 800e71c:	f7ff f9dc 	bl	800dad8 <quorem>
 800e720:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e724:	9b01      	ldr	r3, [sp, #4]
 800e726:	f805 ab01 	strb.w	sl, [r5], #1
 800e72a:	1aea      	subs	r2, r5, r3
 800e72c:	9b02      	ldr	r3, [sp, #8]
 800e72e:	4293      	cmp	r3, r2
 800e730:	dd09      	ble.n	800e746 <_dtoa_r+0xb56>
 800e732:	ee18 1a10 	vmov	r1, s16
 800e736:	2300      	movs	r3, #0
 800e738:	220a      	movs	r2, #10
 800e73a:	4620      	mov	r0, r4
 800e73c:	f000 fc5c 	bl	800eff8 <__multadd>
 800e740:	ee08 0a10 	vmov	s16, r0
 800e744:	e7e7      	b.n	800e716 <_dtoa_r+0xb26>
 800e746:	9b02      	ldr	r3, [sp, #8]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	bfc8      	it	gt
 800e74c:	461d      	movgt	r5, r3
 800e74e:	9b01      	ldr	r3, [sp, #4]
 800e750:	bfd8      	it	le
 800e752:	2501      	movle	r5, #1
 800e754:	441d      	add	r5, r3
 800e756:	f04f 0800 	mov.w	r8, #0
 800e75a:	ee18 1a10 	vmov	r1, s16
 800e75e:	2201      	movs	r2, #1
 800e760:	4620      	mov	r0, r4
 800e762:	f000 fe43 	bl	800f3ec <__lshift>
 800e766:	4631      	mov	r1, r6
 800e768:	ee08 0a10 	vmov	s16, r0
 800e76c:	f000 feae 	bl	800f4cc <__mcmp>
 800e770:	2800      	cmp	r0, #0
 800e772:	dc91      	bgt.n	800e698 <_dtoa_r+0xaa8>
 800e774:	d102      	bne.n	800e77c <_dtoa_r+0xb8c>
 800e776:	f01a 0f01 	tst.w	sl, #1
 800e77a:	d18d      	bne.n	800e698 <_dtoa_r+0xaa8>
 800e77c:	462b      	mov	r3, r5
 800e77e:	461d      	mov	r5, r3
 800e780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e784:	2a30      	cmp	r2, #48	; 0x30
 800e786:	d0fa      	beq.n	800e77e <_dtoa_r+0xb8e>
 800e788:	e6d7      	b.n	800e53a <_dtoa_r+0x94a>
 800e78a:	9a01      	ldr	r2, [sp, #4]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d184      	bne.n	800e69a <_dtoa_r+0xaaa>
 800e790:	9b00      	ldr	r3, [sp, #0]
 800e792:	3301      	adds	r3, #1
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	2331      	movs	r3, #49	; 0x31
 800e798:	7013      	strb	r3, [r2, #0]
 800e79a:	e6ce      	b.n	800e53a <_dtoa_r+0x94a>
 800e79c:	4b09      	ldr	r3, [pc, #36]	; (800e7c4 <_dtoa_r+0xbd4>)
 800e79e:	f7ff ba95 	b.w	800dccc <_dtoa_r+0xdc>
 800e7a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f47f aa6e 	bne.w	800dc86 <_dtoa_r+0x96>
 800e7aa:	4b07      	ldr	r3, [pc, #28]	; (800e7c8 <_dtoa_r+0xbd8>)
 800e7ac:	f7ff ba8e 	b.w	800dccc <_dtoa_r+0xdc>
 800e7b0:	9b02      	ldr	r3, [sp, #8]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	dcae      	bgt.n	800e714 <_dtoa_r+0xb24>
 800e7b6:	9b06      	ldr	r3, [sp, #24]
 800e7b8:	2b02      	cmp	r3, #2
 800e7ba:	f73f aea8 	bgt.w	800e50e <_dtoa_r+0x91e>
 800e7be:	e7a9      	b.n	800e714 <_dtoa_r+0xb24>
 800e7c0:	080109f8 	.word	0x080109f8
 800e7c4:	080107f8 	.word	0x080107f8
 800e7c8:	08010979 	.word	0x08010979

0800e7cc <rshift>:
 800e7cc:	6903      	ldr	r3, [r0, #16]
 800e7ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e7d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e7da:	f100 0414 	add.w	r4, r0, #20
 800e7de:	dd45      	ble.n	800e86c <rshift+0xa0>
 800e7e0:	f011 011f 	ands.w	r1, r1, #31
 800e7e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e7e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e7ec:	d10c      	bne.n	800e808 <rshift+0x3c>
 800e7ee:	f100 0710 	add.w	r7, r0, #16
 800e7f2:	4629      	mov	r1, r5
 800e7f4:	42b1      	cmp	r1, r6
 800e7f6:	d334      	bcc.n	800e862 <rshift+0x96>
 800e7f8:	1a9b      	subs	r3, r3, r2
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	1eea      	subs	r2, r5, #3
 800e7fe:	4296      	cmp	r6, r2
 800e800:	bf38      	it	cc
 800e802:	2300      	movcc	r3, #0
 800e804:	4423      	add	r3, r4
 800e806:	e015      	b.n	800e834 <rshift+0x68>
 800e808:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e80c:	f1c1 0820 	rsb	r8, r1, #32
 800e810:	40cf      	lsrs	r7, r1
 800e812:	f105 0e04 	add.w	lr, r5, #4
 800e816:	46a1      	mov	r9, r4
 800e818:	4576      	cmp	r6, lr
 800e81a:	46f4      	mov	ip, lr
 800e81c:	d815      	bhi.n	800e84a <rshift+0x7e>
 800e81e:	1a9a      	subs	r2, r3, r2
 800e820:	0092      	lsls	r2, r2, #2
 800e822:	3a04      	subs	r2, #4
 800e824:	3501      	adds	r5, #1
 800e826:	42ae      	cmp	r6, r5
 800e828:	bf38      	it	cc
 800e82a:	2200      	movcc	r2, #0
 800e82c:	18a3      	adds	r3, r4, r2
 800e82e:	50a7      	str	r7, [r4, r2]
 800e830:	b107      	cbz	r7, 800e834 <rshift+0x68>
 800e832:	3304      	adds	r3, #4
 800e834:	1b1a      	subs	r2, r3, r4
 800e836:	42a3      	cmp	r3, r4
 800e838:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e83c:	bf08      	it	eq
 800e83e:	2300      	moveq	r3, #0
 800e840:	6102      	str	r2, [r0, #16]
 800e842:	bf08      	it	eq
 800e844:	6143      	streq	r3, [r0, #20]
 800e846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e84a:	f8dc c000 	ldr.w	ip, [ip]
 800e84e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e852:	ea4c 0707 	orr.w	r7, ip, r7
 800e856:	f849 7b04 	str.w	r7, [r9], #4
 800e85a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e85e:	40cf      	lsrs	r7, r1
 800e860:	e7da      	b.n	800e818 <rshift+0x4c>
 800e862:	f851 cb04 	ldr.w	ip, [r1], #4
 800e866:	f847 cf04 	str.w	ip, [r7, #4]!
 800e86a:	e7c3      	b.n	800e7f4 <rshift+0x28>
 800e86c:	4623      	mov	r3, r4
 800e86e:	e7e1      	b.n	800e834 <rshift+0x68>

0800e870 <__hexdig_fun>:
 800e870:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e874:	2b09      	cmp	r3, #9
 800e876:	d802      	bhi.n	800e87e <__hexdig_fun+0xe>
 800e878:	3820      	subs	r0, #32
 800e87a:	b2c0      	uxtb	r0, r0
 800e87c:	4770      	bx	lr
 800e87e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e882:	2b05      	cmp	r3, #5
 800e884:	d801      	bhi.n	800e88a <__hexdig_fun+0x1a>
 800e886:	3847      	subs	r0, #71	; 0x47
 800e888:	e7f7      	b.n	800e87a <__hexdig_fun+0xa>
 800e88a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e88e:	2b05      	cmp	r3, #5
 800e890:	d801      	bhi.n	800e896 <__hexdig_fun+0x26>
 800e892:	3827      	subs	r0, #39	; 0x27
 800e894:	e7f1      	b.n	800e87a <__hexdig_fun+0xa>
 800e896:	2000      	movs	r0, #0
 800e898:	4770      	bx	lr
	...

0800e89c <__gethex>:
 800e89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a0:	ed2d 8b02 	vpush	{d8}
 800e8a4:	b089      	sub	sp, #36	; 0x24
 800e8a6:	ee08 0a10 	vmov	s16, r0
 800e8aa:	9304      	str	r3, [sp, #16]
 800e8ac:	4bb4      	ldr	r3, [pc, #720]	; (800eb80 <__gethex+0x2e4>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	9301      	str	r3, [sp, #4]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	468b      	mov	fp, r1
 800e8b6:	4690      	mov	r8, r2
 800e8b8:	f7f1 fc8a 	bl	80001d0 <strlen>
 800e8bc:	9b01      	ldr	r3, [sp, #4]
 800e8be:	f8db 2000 	ldr.w	r2, [fp]
 800e8c2:	4403      	add	r3, r0
 800e8c4:	4682      	mov	sl, r0
 800e8c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e8ca:	9305      	str	r3, [sp, #20]
 800e8cc:	1c93      	adds	r3, r2, #2
 800e8ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e8d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e8d6:	32fe      	adds	r2, #254	; 0xfe
 800e8d8:	18d1      	adds	r1, r2, r3
 800e8da:	461f      	mov	r7, r3
 800e8dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e8e0:	9100      	str	r1, [sp, #0]
 800e8e2:	2830      	cmp	r0, #48	; 0x30
 800e8e4:	d0f8      	beq.n	800e8d8 <__gethex+0x3c>
 800e8e6:	f7ff ffc3 	bl	800e870 <__hexdig_fun>
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	d13a      	bne.n	800e966 <__gethex+0xca>
 800e8f0:	9901      	ldr	r1, [sp, #4]
 800e8f2:	4652      	mov	r2, sl
 800e8f4:	4638      	mov	r0, r7
 800e8f6:	f001 f957 	bl	800fba8 <strncmp>
 800e8fa:	4605      	mov	r5, r0
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d168      	bne.n	800e9d2 <__gethex+0x136>
 800e900:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e904:	eb07 060a 	add.w	r6, r7, sl
 800e908:	f7ff ffb2 	bl	800e870 <__hexdig_fun>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d062      	beq.n	800e9d6 <__gethex+0x13a>
 800e910:	4633      	mov	r3, r6
 800e912:	7818      	ldrb	r0, [r3, #0]
 800e914:	2830      	cmp	r0, #48	; 0x30
 800e916:	461f      	mov	r7, r3
 800e918:	f103 0301 	add.w	r3, r3, #1
 800e91c:	d0f9      	beq.n	800e912 <__gethex+0x76>
 800e91e:	f7ff ffa7 	bl	800e870 <__hexdig_fun>
 800e922:	2301      	movs	r3, #1
 800e924:	fab0 f480 	clz	r4, r0
 800e928:	0964      	lsrs	r4, r4, #5
 800e92a:	4635      	mov	r5, r6
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	463a      	mov	r2, r7
 800e930:	4616      	mov	r6, r2
 800e932:	3201      	adds	r2, #1
 800e934:	7830      	ldrb	r0, [r6, #0]
 800e936:	f7ff ff9b 	bl	800e870 <__hexdig_fun>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d1f8      	bne.n	800e930 <__gethex+0x94>
 800e93e:	9901      	ldr	r1, [sp, #4]
 800e940:	4652      	mov	r2, sl
 800e942:	4630      	mov	r0, r6
 800e944:	f001 f930 	bl	800fba8 <strncmp>
 800e948:	b980      	cbnz	r0, 800e96c <__gethex+0xd0>
 800e94a:	b94d      	cbnz	r5, 800e960 <__gethex+0xc4>
 800e94c:	eb06 050a 	add.w	r5, r6, sl
 800e950:	462a      	mov	r2, r5
 800e952:	4616      	mov	r6, r2
 800e954:	3201      	adds	r2, #1
 800e956:	7830      	ldrb	r0, [r6, #0]
 800e958:	f7ff ff8a 	bl	800e870 <__hexdig_fun>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d1f8      	bne.n	800e952 <__gethex+0xb6>
 800e960:	1bad      	subs	r5, r5, r6
 800e962:	00ad      	lsls	r5, r5, #2
 800e964:	e004      	b.n	800e970 <__gethex+0xd4>
 800e966:	2400      	movs	r4, #0
 800e968:	4625      	mov	r5, r4
 800e96a:	e7e0      	b.n	800e92e <__gethex+0x92>
 800e96c:	2d00      	cmp	r5, #0
 800e96e:	d1f7      	bne.n	800e960 <__gethex+0xc4>
 800e970:	7833      	ldrb	r3, [r6, #0]
 800e972:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e976:	2b50      	cmp	r3, #80	; 0x50
 800e978:	d13b      	bne.n	800e9f2 <__gethex+0x156>
 800e97a:	7873      	ldrb	r3, [r6, #1]
 800e97c:	2b2b      	cmp	r3, #43	; 0x2b
 800e97e:	d02c      	beq.n	800e9da <__gethex+0x13e>
 800e980:	2b2d      	cmp	r3, #45	; 0x2d
 800e982:	d02e      	beq.n	800e9e2 <__gethex+0x146>
 800e984:	1c71      	adds	r1, r6, #1
 800e986:	f04f 0900 	mov.w	r9, #0
 800e98a:	7808      	ldrb	r0, [r1, #0]
 800e98c:	f7ff ff70 	bl	800e870 <__hexdig_fun>
 800e990:	1e43      	subs	r3, r0, #1
 800e992:	b2db      	uxtb	r3, r3
 800e994:	2b18      	cmp	r3, #24
 800e996:	d82c      	bhi.n	800e9f2 <__gethex+0x156>
 800e998:	f1a0 0210 	sub.w	r2, r0, #16
 800e99c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e9a0:	f7ff ff66 	bl	800e870 <__hexdig_fun>
 800e9a4:	1e43      	subs	r3, r0, #1
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	2b18      	cmp	r3, #24
 800e9aa:	d91d      	bls.n	800e9e8 <__gethex+0x14c>
 800e9ac:	f1b9 0f00 	cmp.w	r9, #0
 800e9b0:	d000      	beq.n	800e9b4 <__gethex+0x118>
 800e9b2:	4252      	negs	r2, r2
 800e9b4:	4415      	add	r5, r2
 800e9b6:	f8cb 1000 	str.w	r1, [fp]
 800e9ba:	b1e4      	cbz	r4, 800e9f6 <__gethex+0x15a>
 800e9bc:	9b00      	ldr	r3, [sp, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	bf14      	ite	ne
 800e9c2:	2700      	movne	r7, #0
 800e9c4:	2706      	moveq	r7, #6
 800e9c6:	4638      	mov	r0, r7
 800e9c8:	b009      	add	sp, #36	; 0x24
 800e9ca:	ecbd 8b02 	vpop	{d8}
 800e9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d2:	463e      	mov	r6, r7
 800e9d4:	4625      	mov	r5, r4
 800e9d6:	2401      	movs	r4, #1
 800e9d8:	e7ca      	b.n	800e970 <__gethex+0xd4>
 800e9da:	f04f 0900 	mov.w	r9, #0
 800e9de:	1cb1      	adds	r1, r6, #2
 800e9e0:	e7d3      	b.n	800e98a <__gethex+0xee>
 800e9e2:	f04f 0901 	mov.w	r9, #1
 800e9e6:	e7fa      	b.n	800e9de <__gethex+0x142>
 800e9e8:	230a      	movs	r3, #10
 800e9ea:	fb03 0202 	mla	r2, r3, r2, r0
 800e9ee:	3a10      	subs	r2, #16
 800e9f0:	e7d4      	b.n	800e99c <__gethex+0x100>
 800e9f2:	4631      	mov	r1, r6
 800e9f4:	e7df      	b.n	800e9b6 <__gethex+0x11a>
 800e9f6:	1bf3      	subs	r3, r6, r7
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	4621      	mov	r1, r4
 800e9fc:	2b07      	cmp	r3, #7
 800e9fe:	dc0b      	bgt.n	800ea18 <__gethex+0x17c>
 800ea00:	ee18 0a10 	vmov	r0, s16
 800ea04:	f000 fa96 	bl	800ef34 <_Balloc>
 800ea08:	4604      	mov	r4, r0
 800ea0a:	b940      	cbnz	r0, 800ea1e <__gethex+0x182>
 800ea0c:	4b5d      	ldr	r3, [pc, #372]	; (800eb84 <__gethex+0x2e8>)
 800ea0e:	4602      	mov	r2, r0
 800ea10:	21de      	movs	r1, #222	; 0xde
 800ea12:	485d      	ldr	r0, [pc, #372]	; (800eb88 <__gethex+0x2ec>)
 800ea14:	f001 f8f6 	bl	800fc04 <__assert_func>
 800ea18:	3101      	adds	r1, #1
 800ea1a:	105b      	asrs	r3, r3, #1
 800ea1c:	e7ee      	b.n	800e9fc <__gethex+0x160>
 800ea1e:	f100 0914 	add.w	r9, r0, #20
 800ea22:	f04f 0b00 	mov.w	fp, #0
 800ea26:	f1ca 0301 	rsb	r3, sl, #1
 800ea2a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ea2e:	f8cd b000 	str.w	fp, [sp]
 800ea32:	9306      	str	r3, [sp, #24]
 800ea34:	42b7      	cmp	r7, r6
 800ea36:	d340      	bcc.n	800eaba <__gethex+0x21e>
 800ea38:	9802      	ldr	r0, [sp, #8]
 800ea3a:	9b00      	ldr	r3, [sp, #0]
 800ea3c:	f840 3b04 	str.w	r3, [r0], #4
 800ea40:	eba0 0009 	sub.w	r0, r0, r9
 800ea44:	1080      	asrs	r0, r0, #2
 800ea46:	0146      	lsls	r6, r0, #5
 800ea48:	6120      	str	r0, [r4, #16]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f000 fb64 	bl	800f118 <__hi0bits>
 800ea50:	1a30      	subs	r0, r6, r0
 800ea52:	f8d8 6000 	ldr.w	r6, [r8]
 800ea56:	42b0      	cmp	r0, r6
 800ea58:	dd63      	ble.n	800eb22 <__gethex+0x286>
 800ea5a:	1b87      	subs	r7, r0, r6
 800ea5c:	4639      	mov	r1, r7
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f000 ff08 	bl	800f874 <__any_on>
 800ea64:	4682      	mov	sl, r0
 800ea66:	b1a8      	cbz	r0, 800ea94 <__gethex+0x1f8>
 800ea68:	1e7b      	subs	r3, r7, #1
 800ea6a:	1159      	asrs	r1, r3, #5
 800ea6c:	f003 021f 	and.w	r2, r3, #31
 800ea70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ea74:	f04f 0a01 	mov.w	sl, #1
 800ea78:	fa0a f202 	lsl.w	r2, sl, r2
 800ea7c:	420a      	tst	r2, r1
 800ea7e:	d009      	beq.n	800ea94 <__gethex+0x1f8>
 800ea80:	4553      	cmp	r3, sl
 800ea82:	dd05      	ble.n	800ea90 <__gethex+0x1f4>
 800ea84:	1eb9      	subs	r1, r7, #2
 800ea86:	4620      	mov	r0, r4
 800ea88:	f000 fef4 	bl	800f874 <__any_on>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d145      	bne.n	800eb1c <__gethex+0x280>
 800ea90:	f04f 0a02 	mov.w	sl, #2
 800ea94:	4639      	mov	r1, r7
 800ea96:	4620      	mov	r0, r4
 800ea98:	f7ff fe98 	bl	800e7cc <rshift>
 800ea9c:	443d      	add	r5, r7
 800ea9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eaa2:	42ab      	cmp	r3, r5
 800eaa4:	da4c      	bge.n	800eb40 <__gethex+0x2a4>
 800eaa6:	ee18 0a10 	vmov	r0, s16
 800eaaa:	4621      	mov	r1, r4
 800eaac:	f000 fa82 	bl	800efb4 <_Bfree>
 800eab0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eab2:	2300      	movs	r3, #0
 800eab4:	6013      	str	r3, [r2, #0]
 800eab6:	27a3      	movs	r7, #163	; 0xa3
 800eab8:	e785      	b.n	800e9c6 <__gethex+0x12a>
 800eaba:	1e73      	subs	r3, r6, #1
 800eabc:	9a05      	ldr	r2, [sp, #20]
 800eabe:	9303      	str	r3, [sp, #12]
 800eac0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d019      	beq.n	800eafc <__gethex+0x260>
 800eac8:	f1bb 0f20 	cmp.w	fp, #32
 800eacc:	d107      	bne.n	800eade <__gethex+0x242>
 800eace:	9b02      	ldr	r3, [sp, #8]
 800ead0:	9a00      	ldr	r2, [sp, #0]
 800ead2:	f843 2b04 	str.w	r2, [r3], #4
 800ead6:	9302      	str	r3, [sp, #8]
 800ead8:	2300      	movs	r3, #0
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	469b      	mov	fp, r3
 800eade:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800eae2:	f7ff fec5 	bl	800e870 <__hexdig_fun>
 800eae6:	9b00      	ldr	r3, [sp, #0]
 800eae8:	f000 000f 	and.w	r0, r0, #15
 800eaec:	fa00 f00b 	lsl.w	r0, r0, fp
 800eaf0:	4303      	orrs	r3, r0
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	f10b 0b04 	add.w	fp, fp, #4
 800eaf8:	9b03      	ldr	r3, [sp, #12]
 800eafa:	e00d      	b.n	800eb18 <__gethex+0x27c>
 800eafc:	9b03      	ldr	r3, [sp, #12]
 800eafe:	9a06      	ldr	r2, [sp, #24]
 800eb00:	4413      	add	r3, r2
 800eb02:	42bb      	cmp	r3, r7
 800eb04:	d3e0      	bcc.n	800eac8 <__gethex+0x22c>
 800eb06:	4618      	mov	r0, r3
 800eb08:	9901      	ldr	r1, [sp, #4]
 800eb0a:	9307      	str	r3, [sp, #28]
 800eb0c:	4652      	mov	r2, sl
 800eb0e:	f001 f84b 	bl	800fba8 <strncmp>
 800eb12:	9b07      	ldr	r3, [sp, #28]
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d1d7      	bne.n	800eac8 <__gethex+0x22c>
 800eb18:	461e      	mov	r6, r3
 800eb1a:	e78b      	b.n	800ea34 <__gethex+0x198>
 800eb1c:	f04f 0a03 	mov.w	sl, #3
 800eb20:	e7b8      	b.n	800ea94 <__gethex+0x1f8>
 800eb22:	da0a      	bge.n	800eb3a <__gethex+0x29e>
 800eb24:	1a37      	subs	r7, r6, r0
 800eb26:	4621      	mov	r1, r4
 800eb28:	ee18 0a10 	vmov	r0, s16
 800eb2c:	463a      	mov	r2, r7
 800eb2e:	f000 fc5d 	bl	800f3ec <__lshift>
 800eb32:	1bed      	subs	r5, r5, r7
 800eb34:	4604      	mov	r4, r0
 800eb36:	f100 0914 	add.w	r9, r0, #20
 800eb3a:	f04f 0a00 	mov.w	sl, #0
 800eb3e:	e7ae      	b.n	800ea9e <__gethex+0x202>
 800eb40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eb44:	42a8      	cmp	r0, r5
 800eb46:	dd72      	ble.n	800ec2e <__gethex+0x392>
 800eb48:	1b45      	subs	r5, r0, r5
 800eb4a:	42ae      	cmp	r6, r5
 800eb4c:	dc36      	bgt.n	800ebbc <__gethex+0x320>
 800eb4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb52:	2b02      	cmp	r3, #2
 800eb54:	d02a      	beq.n	800ebac <__gethex+0x310>
 800eb56:	2b03      	cmp	r3, #3
 800eb58:	d02c      	beq.n	800ebb4 <__gethex+0x318>
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d11c      	bne.n	800eb98 <__gethex+0x2fc>
 800eb5e:	42ae      	cmp	r6, r5
 800eb60:	d11a      	bne.n	800eb98 <__gethex+0x2fc>
 800eb62:	2e01      	cmp	r6, #1
 800eb64:	d112      	bne.n	800eb8c <__gethex+0x2f0>
 800eb66:	9a04      	ldr	r2, [sp, #16]
 800eb68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb6c:	6013      	str	r3, [r2, #0]
 800eb6e:	2301      	movs	r3, #1
 800eb70:	6123      	str	r3, [r4, #16]
 800eb72:	f8c9 3000 	str.w	r3, [r9]
 800eb76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb78:	2762      	movs	r7, #98	; 0x62
 800eb7a:	601c      	str	r4, [r3, #0]
 800eb7c:	e723      	b.n	800e9c6 <__gethex+0x12a>
 800eb7e:	bf00      	nop
 800eb80:	08010a70 	.word	0x08010a70
 800eb84:	080109f8 	.word	0x080109f8
 800eb88:	08010a09 	.word	0x08010a09
 800eb8c:	1e71      	subs	r1, r6, #1
 800eb8e:	4620      	mov	r0, r4
 800eb90:	f000 fe70 	bl	800f874 <__any_on>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d1e6      	bne.n	800eb66 <__gethex+0x2ca>
 800eb98:	ee18 0a10 	vmov	r0, s16
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	f000 fa09 	bl	800efb4 <_Bfree>
 800eba2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eba4:	2300      	movs	r3, #0
 800eba6:	6013      	str	r3, [r2, #0]
 800eba8:	2750      	movs	r7, #80	; 0x50
 800ebaa:	e70c      	b.n	800e9c6 <__gethex+0x12a>
 800ebac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d1f2      	bne.n	800eb98 <__gethex+0x2fc>
 800ebb2:	e7d8      	b.n	800eb66 <__gethex+0x2ca>
 800ebb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d1d5      	bne.n	800eb66 <__gethex+0x2ca>
 800ebba:	e7ed      	b.n	800eb98 <__gethex+0x2fc>
 800ebbc:	1e6f      	subs	r7, r5, #1
 800ebbe:	f1ba 0f00 	cmp.w	sl, #0
 800ebc2:	d131      	bne.n	800ec28 <__gethex+0x38c>
 800ebc4:	b127      	cbz	r7, 800ebd0 <__gethex+0x334>
 800ebc6:	4639      	mov	r1, r7
 800ebc8:	4620      	mov	r0, r4
 800ebca:	f000 fe53 	bl	800f874 <__any_on>
 800ebce:	4682      	mov	sl, r0
 800ebd0:	117b      	asrs	r3, r7, #5
 800ebd2:	2101      	movs	r1, #1
 800ebd4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ebd8:	f007 071f 	and.w	r7, r7, #31
 800ebdc:	fa01 f707 	lsl.w	r7, r1, r7
 800ebe0:	421f      	tst	r7, r3
 800ebe2:	4629      	mov	r1, r5
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	bf18      	it	ne
 800ebe8:	f04a 0a02 	orrne.w	sl, sl, #2
 800ebec:	1b76      	subs	r6, r6, r5
 800ebee:	f7ff fded 	bl	800e7cc <rshift>
 800ebf2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ebf6:	2702      	movs	r7, #2
 800ebf8:	f1ba 0f00 	cmp.w	sl, #0
 800ebfc:	d048      	beq.n	800ec90 <__gethex+0x3f4>
 800ebfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec02:	2b02      	cmp	r3, #2
 800ec04:	d015      	beq.n	800ec32 <__gethex+0x396>
 800ec06:	2b03      	cmp	r3, #3
 800ec08:	d017      	beq.n	800ec3a <__gethex+0x39e>
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d109      	bne.n	800ec22 <__gethex+0x386>
 800ec0e:	f01a 0f02 	tst.w	sl, #2
 800ec12:	d006      	beq.n	800ec22 <__gethex+0x386>
 800ec14:	f8d9 0000 	ldr.w	r0, [r9]
 800ec18:	ea4a 0a00 	orr.w	sl, sl, r0
 800ec1c:	f01a 0f01 	tst.w	sl, #1
 800ec20:	d10e      	bne.n	800ec40 <__gethex+0x3a4>
 800ec22:	f047 0710 	orr.w	r7, r7, #16
 800ec26:	e033      	b.n	800ec90 <__gethex+0x3f4>
 800ec28:	f04f 0a01 	mov.w	sl, #1
 800ec2c:	e7d0      	b.n	800ebd0 <__gethex+0x334>
 800ec2e:	2701      	movs	r7, #1
 800ec30:	e7e2      	b.n	800ebf8 <__gethex+0x35c>
 800ec32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec34:	f1c3 0301 	rsb	r3, r3, #1
 800ec38:	9315      	str	r3, [sp, #84]	; 0x54
 800ec3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d0f0      	beq.n	800ec22 <__gethex+0x386>
 800ec40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ec44:	f104 0314 	add.w	r3, r4, #20
 800ec48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ec4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ec50:	f04f 0c00 	mov.w	ip, #0
 800ec54:	4618      	mov	r0, r3
 800ec56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec5a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ec5e:	d01c      	beq.n	800ec9a <__gethex+0x3fe>
 800ec60:	3201      	adds	r2, #1
 800ec62:	6002      	str	r2, [r0, #0]
 800ec64:	2f02      	cmp	r7, #2
 800ec66:	f104 0314 	add.w	r3, r4, #20
 800ec6a:	d13f      	bne.n	800ecec <__gethex+0x450>
 800ec6c:	f8d8 2000 	ldr.w	r2, [r8]
 800ec70:	3a01      	subs	r2, #1
 800ec72:	42b2      	cmp	r2, r6
 800ec74:	d10a      	bne.n	800ec8c <__gethex+0x3f0>
 800ec76:	1171      	asrs	r1, r6, #5
 800ec78:	2201      	movs	r2, #1
 800ec7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec7e:	f006 061f 	and.w	r6, r6, #31
 800ec82:	fa02 f606 	lsl.w	r6, r2, r6
 800ec86:	421e      	tst	r6, r3
 800ec88:	bf18      	it	ne
 800ec8a:	4617      	movne	r7, r2
 800ec8c:	f047 0720 	orr.w	r7, r7, #32
 800ec90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec92:	601c      	str	r4, [r3, #0]
 800ec94:	9b04      	ldr	r3, [sp, #16]
 800ec96:	601d      	str	r5, [r3, #0]
 800ec98:	e695      	b.n	800e9c6 <__gethex+0x12a>
 800ec9a:	4299      	cmp	r1, r3
 800ec9c:	f843 cc04 	str.w	ip, [r3, #-4]
 800eca0:	d8d8      	bhi.n	800ec54 <__gethex+0x3b8>
 800eca2:	68a3      	ldr	r3, [r4, #8]
 800eca4:	459b      	cmp	fp, r3
 800eca6:	db19      	blt.n	800ecdc <__gethex+0x440>
 800eca8:	6861      	ldr	r1, [r4, #4]
 800ecaa:	ee18 0a10 	vmov	r0, s16
 800ecae:	3101      	adds	r1, #1
 800ecb0:	f000 f940 	bl	800ef34 <_Balloc>
 800ecb4:	4681      	mov	r9, r0
 800ecb6:	b918      	cbnz	r0, 800ecc0 <__gethex+0x424>
 800ecb8:	4b1a      	ldr	r3, [pc, #104]	; (800ed24 <__gethex+0x488>)
 800ecba:	4602      	mov	r2, r0
 800ecbc:	2184      	movs	r1, #132	; 0x84
 800ecbe:	e6a8      	b.n	800ea12 <__gethex+0x176>
 800ecc0:	6922      	ldr	r2, [r4, #16]
 800ecc2:	3202      	adds	r2, #2
 800ecc4:	f104 010c 	add.w	r1, r4, #12
 800ecc8:	0092      	lsls	r2, r2, #2
 800ecca:	300c      	adds	r0, #12
 800eccc:	f7fd f882 	bl	800bdd4 <memcpy>
 800ecd0:	4621      	mov	r1, r4
 800ecd2:	ee18 0a10 	vmov	r0, s16
 800ecd6:	f000 f96d 	bl	800efb4 <_Bfree>
 800ecda:	464c      	mov	r4, r9
 800ecdc:	6923      	ldr	r3, [r4, #16]
 800ecde:	1c5a      	adds	r2, r3, #1
 800ece0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ece4:	6122      	str	r2, [r4, #16]
 800ece6:	2201      	movs	r2, #1
 800ece8:	615a      	str	r2, [r3, #20]
 800ecea:	e7bb      	b.n	800ec64 <__gethex+0x3c8>
 800ecec:	6922      	ldr	r2, [r4, #16]
 800ecee:	455a      	cmp	r2, fp
 800ecf0:	dd0b      	ble.n	800ed0a <__gethex+0x46e>
 800ecf2:	2101      	movs	r1, #1
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	f7ff fd69 	bl	800e7cc <rshift>
 800ecfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ecfe:	3501      	adds	r5, #1
 800ed00:	42ab      	cmp	r3, r5
 800ed02:	f6ff aed0 	blt.w	800eaa6 <__gethex+0x20a>
 800ed06:	2701      	movs	r7, #1
 800ed08:	e7c0      	b.n	800ec8c <__gethex+0x3f0>
 800ed0a:	f016 061f 	ands.w	r6, r6, #31
 800ed0e:	d0fa      	beq.n	800ed06 <__gethex+0x46a>
 800ed10:	4453      	add	r3, sl
 800ed12:	f1c6 0620 	rsb	r6, r6, #32
 800ed16:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ed1a:	f000 f9fd 	bl	800f118 <__hi0bits>
 800ed1e:	42b0      	cmp	r0, r6
 800ed20:	dbe7      	blt.n	800ecf2 <__gethex+0x456>
 800ed22:	e7f0      	b.n	800ed06 <__gethex+0x46a>
 800ed24:	080109f8 	.word	0x080109f8

0800ed28 <L_shift>:
 800ed28:	f1c2 0208 	rsb	r2, r2, #8
 800ed2c:	0092      	lsls	r2, r2, #2
 800ed2e:	b570      	push	{r4, r5, r6, lr}
 800ed30:	f1c2 0620 	rsb	r6, r2, #32
 800ed34:	6843      	ldr	r3, [r0, #4]
 800ed36:	6804      	ldr	r4, [r0, #0]
 800ed38:	fa03 f506 	lsl.w	r5, r3, r6
 800ed3c:	432c      	orrs	r4, r5
 800ed3e:	40d3      	lsrs	r3, r2
 800ed40:	6004      	str	r4, [r0, #0]
 800ed42:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed46:	4288      	cmp	r0, r1
 800ed48:	d3f4      	bcc.n	800ed34 <L_shift+0xc>
 800ed4a:	bd70      	pop	{r4, r5, r6, pc}

0800ed4c <__match>:
 800ed4c:	b530      	push	{r4, r5, lr}
 800ed4e:	6803      	ldr	r3, [r0, #0]
 800ed50:	3301      	adds	r3, #1
 800ed52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed56:	b914      	cbnz	r4, 800ed5e <__match+0x12>
 800ed58:	6003      	str	r3, [r0, #0]
 800ed5a:	2001      	movs	r0, #1
 800ed5c:	bd30      	pop	{r4, r5, pc}
 800ed5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ed66:	2d19      	cmp	r5, #25
 800ed68:	bf98      	it	ls
 800ed6a:	3220      	addls	r2, #32
 800ed6c:	42a2      	cmp	r2, r4
 800ed6e:	d0f0      	beq.n	800ed52 <__match+0x6>
 800ed70:	2000      	movs	r0, #0
 800ed72:	e7f3      	b.n	800ed5c <__match+0x10>

0800ed74 <__hexnan>:
 800ed74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed78:	680b      	ldr	r3, [r1, #0]
 800ed7a:	115e      	asrs	r6, r3, #5
 800ed7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ed80:	f013 031f 	ands.w	r3, r3, #31
 800ed84:	b087      	sub	sp, #28
 800ed86:	bf18      	it	ne
 800ed88:	3604      	addne	r6, #4
 800ed8a:	2500      	movs	r5, #0
 800ed8c:	1f37      	subs	r7, r6, #4
 800ed8e:	4690      	mov	r8, r2
 800ed90:	6802      	ldr	r2, [r0, #0]
 800ed92:	9301      	str	r3, [sp, #4]
 800ed94:	4682      	mov	sl, r0
 800ed96:	f846 5c04 	str.w	r5, [r6, #-4]
 800ed9a:	46b9      	mov	r9, r7
 800ed9c:	463c      	mov	r4, r7
 800ed9e:	9502      	str	r5, [sp, #8]
 800eda0:	46ab      	mov	fp, r5
 800eda2:	7851      	ldrb	r1, [r2, #1]
 800eda4:	1c53      	adds	r3, r2, #1
 800eda6:	9303      	str	r3, [sp, #12]
 800eda8:	b341      	cbz	r1, 800edfc <__hexnan+0x88>
 800edaa:	4608      	mov	r0, r1
 800edac:	9205      	str	r2, [sp, #20]
 800edae:	9104      	str	r1, [sp, #16]
 800edb0:	f7ff fd5e 	bl	800e870 <__hexdig_fun>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d14f      	bne.n	800ee58 <__hexnan+0xe4>
 800edb8:	9904      	ldr	r1, [sp, #16]
 800edba:	9a05      	ldr	r2, [sp, #20]
 800edbc:	2920      	cmp	r1, #32
 800edbe:	d818      	bhi.n	800edf2 <__hexnan+0x7e>
 800edc0:	9b02      	ldr	r3, [sp, #8]
 800edc2:	459b      	cmp	fp, r3
 800edc4:	dd13      	ble.n	800edee <__hexnan+0x7a>
 800edc6:	454c      	cmp	r4, r9
 800edc8:	d206      	bcs.n	800edd8 <__hexnan+0x64>
 800edca:	2d07      	cmp	r5, #7
 800edcc:	dc04      	bgt.n	800edd8 <__hexnan+0x64>
 800edce:	462a      	mov	r2, r5
 800edd0:	4649      	mov	r1, r9
 800edd2:	4620      	mov	r0, r4
 800edd4:	f7ff ffa8 	bl	800ed28 <L_shift>
 800edd8:	4544      	cmp	r4, r8
 800edda:	d950      	bls.n	800ee7e <__hexnan+0x10a>
 800eddc:	2300      	movs	r3, #0
 800edde:	f1a4 0904 	sub.w	r9, r4, #4
 800ede2:	f844 3c04 	str.w	r3, [r4, #-4]
 800ede6:	f8cd b008 	str.w	fp, [sp, #8]
 800edea:	464c      	mov	r4, r9
 800edec:	461d      	mov	r5, r3
 800edee:	9a03      	ldr	r2, [sp, #12]
 800edf0:	e7d7      	b.n	800eda2 <__hexnan+0x2e>
 800edf2:	2929      	cmp	r1, #41	; 0x29
 800edf4:	d156      	bne.n	800eea4 <__hexnan+0x130>
 800edf6:	3202      	adds	r2, #2
 800edf8:	f8ca 2000 	str.w	r2, [sl]
 800edfc:	f1bb 0f00 	cmp.w	fp, #0
 800ee00:	d050      	beq.n	800eea4 <__hexnan+0x130>
 800ee02:	454c      	cmp	r4, r9
 800ee04:	d206      	bcs.n	800ee14 <__hexnan+0xa0>
 800ee06:	2d07      	cmp	r5, #7
 800ee08:	dc04      	bgt.n	800ee14 <__hexnan+0xa0>
 800ee0a:	462a      	mov	r2, r5
 800ee0c:	4649      	mov	r1, r9
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f7ff ff8a 	bl	800ed28 <L_shift>
 800ee14:	4544      	cmp	r4, r8
 800ee16:	d934      	bls.n	800ee82 <__hexnan+0x10e>
 800ee18:	f1a8 0204 	sub.w	r2, r8, #4
 800ee1c:	4623      	mov	r3, r4
 800ee1e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee22:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee26:	429f      	cmp	r7, r3
 800ee28:	d2f9      	bcs.n	800ee1e <__hexnan+0xaa>
 800ee2a:	1b3b      	subs	r3, r7, r4
 800ee2c:	f023 0303 	bic.w	r3, r3, #3
 800ee30:	3304      	adds	r3, #4
 800ee32:	3401      	adds	r4, #1
 800ee34:	3e03      	subs	r6, #3
 800ee36:	42b4      	cmp	r4, r6
 800ee38:	bf88      	it	hi
 800ee3a:	2304      	movhi	r3, #4
 800ee3c:	4443      	add	r3, r8
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f843 2b04 	str.w	r2, [r3], #4
 800ee44:	429f      	cmp	r7, r3
 800ee46:	d2fb      	bcs.n	800ee40 <__hexnan+0xcc>
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	b91b      	cbnz	r3, 800ee54 <__hexnan+0xe0>
 800ee4c:	4547      	cmp	r7, r8
 800ee4e:	d127      	bne.n	800eea0 <__hexnan+0x12c>
 800ee50:	2301      	movs	r3, #1
 800ee52:	603b      	str	r3, [r7, #0]
 800ee54:	2005      	movs	r0, #5
 800ee56:	e026      	b.n	800eea6 <__hexnan+0x132>
 800ee58:	3501      	adds	r5, #1
 800ee5a:	2d08      	cmp	r5, #8
 800ee5c:	f10b 0b01 	add.w	fp, fp, #1
 800ee60:	dd06      	ble.n	800ee70 <__hexnan+0xfc>
 800ee62:	4544      	cmp	r4, r8
 800ee64:	d9c3      	bls.n	800edee <__hexnan+0x7a>
 800ee66:	2300      	movs	r3, #0
 800ee68:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee6c:	2501      	movs	r5, #1
 800ee6e:	3c04      	subs	r4, #4
 800ee70:	6822      	ldr	r2, [r4, #0]
 800ee72:	f000 000f 	and.w	r0, r0, #15
 800ee76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ee7a:	6022      	str	r2, [r4, #0]
 800ee7c:	e7b7      	b.n	800edee <__hexnan+0x7a>
 800ee7e:	2508      	movs	r5, #8
 800ee80:	e7b5      	b.n	800edee <__hexnan+0x7a>
 800ee82:	9b01      	ldr	r3, [sp, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d0df      	beq.n	800ee48 <__hexnan+0xd4>
 800ee88:	f04f 32ff 	mov.w	r2, #4294967295
 800ee8c:	f1c3 0320 	rsb	r3, r3, #32
 800ee90:	fa22 f303 	lsr.w	r3, r2, r3
 800ee94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ee98:	401a      	ands	r2, r3
 800ee9a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ee9e:	e7d3      	b.n	800ee48 <__hexnan+0xd4>
 800eea0:	3f04      	subs	r7, #4
 800eea2:	e7d1      	b.n	800ee48 <__hexnan+0xd4>
 800eea4:	2004      	movs	r0, #4
 800eea6:	b007      	add	sp, #28
 800eea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eeac <_localeconv_r>:
 800eeac:	4800      	ldr	r0, [pc, #0]	; (800eeb0 <_localeconv_r+0x4>)
 800eeae:	4770      	bx	lr
 800eeb0:	20000184 	.word	0x20000184

0800eeb4 <__ascii_mbtowc>:
 800eeb4:	b082      	sub	sp, #8
 800eeb6:	b901      	cbnz	r1, 800eeba <__ascii_mbtowc+0x6>
 800eeb8:	a901      	add	r1, sp, #4
 800eeba:	b142      	cbz	r2, 800eece <__ascii_mbtowc+0x1a>
 800eebc:	b14b      	cbz	r3, 800eed2 <__ascii_mbtowc+0x1e>
 800eebe:	7813      	ldrb	r3, [r2, #0]
 800eec0:	600b      	str	r3, [r1, #0]
 800eec2:	7812      	ldrb	r2, [r2, #0]
 800eec4:	1e10      	subs	r0, r2, #0
 800eec6:	bf18      	it	ne
 800eec8:	2001      	movne	r0, #1
 800eeca:	b002      	add	sp, #8
 800eecc:	4770      	bx	lr
 800eece:	4610      	mov	r0, r2
 800eed0:	e7fb      	b.n	800eeca <__ascii_mbtowc+0x16>
 800eed2:	f06f 0001 	mvn.w	r0, #1
 800eed6:	e7f8      	b.n	800eeca <__ascii_mbtowc+0x16>

0800eed8 <memmem>:
 800eed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eedc:	b1a3      	cbz	r3, 800ef08 <memmem+0x30>
 800eede:	1ac9      	subs	r1, r1, r3
 800eee0:	7817      	ldrb	r7, [r2, #0]
 800eee2:	4401      	add	r1, r0
 800eee4:	4604      	mov	r4, r0
 800eee6:	f103 3cff 	add.w	ip, r3, #4294967295
 800eeea:	428c      	cmp	r4, r1
 800eeec:	4620      	mov	r0, r4
 800eeee:	d901      	bls.n	800eef4 <memmem+0x1c>
 800eef0:	2000      	movs	r0, #0
 800eef2:	e009      	b.n	800ef08 <memmem+0x30>
 800eef4:	7805      	ldrb	r5, [r0, #0]
 800eef6:	42bd      	cmp	r5, r7
 800eef8:	f104 0401 	add.w	r4, r4, #1
 800eefc:	d1f5      	bne.n	800eeea <memmem+0x12>
 800eefe:	eb0c 0504 	add.w	r5, ip, r4
 800ef02:	18d6      	adds	r6, r2, r3
 800ef04:	42a5      	cmp	r5, r4
 800ef06:	d101      	bne.n	800ef0c <memmem+0x34>
 800ef08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef0c:	f815 8d01 	ldrb.w	r8, [r5, #-1]!
 800ef10:	f816 ed01 	ldrb.w	lr, [r6, #-1]!
 800ef14:	45f0      	cmp	r8, lr
 800ef16:	d0f5      	beq.n	800ef04 <memmem+0x2c>
 800ef18:	e7e7      	b.n	800eeea <memmem+0x12>
	...

0800ef1c <__malloc_lock>:
 800ef1c:	4801      	ldr	r0, [pc, #4]	; (800ef24 <__malloc_lock+0x8>)
 800ef1e:	f000 bea2 	b.w	800fc66 <__retarget_lock_acquire_recursive>
 800ef22:	bf00      	nop
 800ef24:	20000c88 	.word	0x20000c88

0800ef28 <__malloc_unlock>:
 800ef28:	4801      	ldr	r0, [pc, #4]	; (800ef30 <__malloc_unlock+0x8>)
 800ef2a:	f000 be9d 	b.w	800fc68 <__retarget_lock_release_recursive>
 800ef2e:	bf00      	nop
 800ef30:	20000c88 	.word	0x20000c88

0800ef34 <_Balloc>:
 800ef34:	b570      	push	{r4, r5, r6, lr}
 800ef36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef38:	4604      	mov	r4, r0
 800ef3a:	460d      	mov	r5, r1
 800ef3c:	b976      	cbnz	r6, 800ef5c <_Balloc+0x28>
 800ef3e:	2010      	movs	r0, #16
 800ef40:	f7fc ff38 	bl	800bdb4 <malloc>
 800ef44:	4602      	mov	r2, r0
 800ef46:	6260      	str	r0, [r4, #36]	; 0x24
 800ef48:	b920      	cbnz	r0, 800ef54 <_Balloc+0x20>
 800ef4a:	4b18      	ldr	r3, [pc, #96]	; (800efac <_Balloc+0x78>)
 800ef4c:	4818      	ldr	r0, [pc, #96]	; (800efb0 <_Balloc+0x7c>)
 800ef4e:	2166      	movs	r1, #102	; 0x66
 800ef50:	f000 fe58 	bl	800fc04 <__assert_func>
 800ef54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef58:	6006      	str	r6, [r0, #0]
 800ef5a:	60c6      	str	r6, [r0, #12]
 800ef5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ef5e:	68f3      	ldr	r3, [r6, #12]
 800ef60:	b183      	cbz	r3, 800ef84 <_Balloc+0x50>
 800ef62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef6a:	b9b8      	cbnz	r0, 800ef9c <_Balloc+0x68>
 800ef6c:	2101      	movs	r1, #1
 800ef6e:	fa01 f605 	lsl.w	r6, r1, r5
 800ef72:	1d72      	adds	r2, r6, #5
 800ef74:	0092      	lsls	r2, r2, #2
 800ef76:	4620      	mov	r0, r4
 800ef78:	f000 fc9d 	bl	800f8b6 <_calloc_r>
 800ef7c:	b160      	cbz	r0, 800ef98 <_Balloc+0x64>
 800ef7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef82:	e00e      	b.n	800efa2 <_Balloc+0x6e>
 800ef84:	2221      	movs	r2, #33	; 0x21
 800ef86:	2104      	movs	r1, #4
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f000 fc94 	bl	800f8b6 <_calloc_r>
 800ef8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef90:	60f0      	str	r0, [r6, #12]
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d1e4      	bne.n	800ef62 <_Balloc+0x2e>
 800ef98:	2000      	movs	r0, #0
 800ef9a:	bd70      	pop	{r4, r5, r6, pc}
 800ef9c:	6802      	ldr	r2, [r0, #0]
 800ef9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800efa2:	2300      	movs	r3, #0
 800efa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800efa8:	e7f7      	b.n	800ef9a <_Balloc+0x66>
 800efaa:	bf00      	nop
 800efac:	08010986 	.word	0x08010986
 800efb0:	08010a84 	.word	0x08010a84

0800efb4 <_Bfree>:
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800efb8:	4605      	mov	r5, r0
 800efba:	460c      	mov	r4, r1
 800efbc:	b976      	cbnz	r6, 800efdc <_Bfree+0x28>
 800efbe:	2010      	movs	r0, #16
 800efc0:	f7fc fef8 	bl	800bdb4 <malloc>
 800efc4:	4602      	mov	r2, r0
 800efc6:	6268      	str	r0, [r5, #36]	; 0x24
 800efc8:	b920      	cbnz	r0, 800efd4 <_Bfree+0x20>
 800efca:	4b09      	ldr	r3, [pc, #36]	; (800eff0 <_Bfree+0x3c>)
 800efcc:	4809      	ldr	r0, [pc, #36]	; (800eff4 <_Bfree+0x40>)
 800efce:	218a      	movs	r1, #138	; 0x8a
 800efd0:	f000 fe18 	bl	800fc04 <__assert_func>
 800efd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800efd8:	6006      	str	r6, [r0, #0]
 800efda:	60c6      	str	r6, [r0, #12]
 800efdc:	b13c      	cbz	r4, 800efee <_Bfree+0x3a>
 800efde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800efe0:	6862      	ldr	r2, [r4, #4]
 800efe2:	68db      	ldr	r3, [r3, #12]
 800efe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800efe8:	6021      	str	r1, [r4, #0]
 800efea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800efee:	bd70      	pop	{r4, r5, r6, pc}
 800eff0:	08010986 	.word	0x08010986
 800eff4:	08010a84 	.word	0x08010a84

0800eff8 <__multadd>:
 800eff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800effc:	690d      	ldr	r5, [r1, #16]
 800effe:	4607      	mov	r7, r0
 800f000:	460c      	mov	r4, r1
 800f002:	461e      	mov	r6, r3
 800f004:	f101 0c14 	add.w	ip, r1, #20
 800f008:	2000      	movs	r0, #0
 800f00a:	f8dc 3000 	ldr.w	r3, [ip]
 800f00e:	b299      	uxth	r1, r3
 800f010:	fb02 6101 	mla	r1, r2, r1, r6
 800f014:	0c1e      	lsrs	r6, r3, #16
 800f016:	0c0b      	lsrs	r3, r1, #16
 800f018:	fb02 3306 	mla	r3, r2, r6, r3
 800f01c:	b289      	uxth	r1, r1
 800f01e:	3001      	adds	r0, #1
 800f020:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f024:	4285      	cmp	r5, r0
 800f026:	f84c 1b04 	str.w	r1, [ip], #4
 800f02a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f02e:	dcec      	bgt.n	800f00a <__multadd+0x12>
 800f030:	b30e      	cbz	r6, 800f076 <__multadd+0x7e>
 800f032:	68a3      	ldr	r3, [r4, #8]
 800f034:	42ab      	cmp	r3, r5
 800f036:	dc19      	bgt.n	800f06c <__multadd+0x74>
 800f038:	6861      	ldr	r1, [r4, #4]
 800f03a:	4638      	mov	r0, r7
 800f03c:	3101      	adds	r1, #1
 800f03e:	f7ff ff79 	bl	800ef34 <_Balloc>
 800f042:	4680      	mov	r8, r0
 800f044:	b928      	cbnz	r0, 800f052 <__multadd+0x5a>
 800f046:	4602      	mov	r2, r0
 800f048:	4b0c      	ldr	r3, [pc, #48]	; (800f07c <__multadd+0x84>)
 800f04a:	480d      	ldr	r0, [pc, #52]	; (800f080 <__multadd+0x88>)
 800f04c:	21b5      	movs	r1, #181	; 0xb5
 800f04e:	f000 fdd9 	bl	800fc04 <__assert_func>
 800f052:	6922      	ldr	r2, [r4, #16]
 800f054:	3202      	adds	r2, #2
 800f056:	f104 010c 	add.w	r1, r4, #12
 800f05a:	0092      	lsls	r2, r2, #2
 800f05c:	300c      	adds	r0, #12
 800f05e:	f7fc feb9 	bl	800bdd4 <memcpy>
 800f062:	4621      	mov	r1, r4
 800f064:	4638      	mov	r0, r7
 800f066:	f7ff ffa5 	bl	800efb4 <_Bfree>
 800f06a:	4644      	mov	r4, r8
 800f06c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f070:	3501      	adds	r5, #1
 800f072:	615e      	str	r6, [r3, #20]
 800f074:	6125      	str	r5, [r4, #16]
 800f076:	4620      	mov	r0, r4
 800f078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f07c:	080109f8 	.word	0x080109f8
 800f080:	08010a84 	.word	0x08010a84

0800f084 <__s2b>:
 800f084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f088:	460c      	mov	r4, r1
 800f08a:	4615      	mov	r5, r2
 800f08c:	461f      	mov	r7, r3
 800f08e:	2209      	movs	r2, #9
 800f090:	3308      	adds	r3, #8
 800f092:	4606      	mov	r6, r0
 800f094:	fb93 f3f2 	sdiv	r3, r3, r2
 800f098:	2100      	movs	r1, #0
 800f09a:	2201      	movs	r2, #1
 800f09c:	429a      	cmp	r2, r3
 800f09e:	db09      	blt.n	800f0b4 <__s2b+0x30>
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	f7ff ff47 	bl	800ef34 <_Balloc>
 800f0a6:	b940      	cbnz	r0, 800f0ba <__s2b+0x36>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	4b19      	ldr	r3, [pc, #100]	; (800f110 <__s2b+0x8c>)
 800f0ac:	4819      	ldr	r0, [pc, #100]	; (800f114 <__s2b+0x90>)
 800f0ae:	21ce      	movs	r1, #206	; 0xce
 800f0b0:	f000 fda8 	bl	800fc04 <__assert_func>
 800f0b4:	0052      	lsls	r2, r2, #1
 800f0b6:	3101      	adds	r1, #1
 800f0b8:	e7f0      	b.n	800f09c <__s2b+0x18>
 800f0ba:	9b08      	ldr	r3, [sp, #32]
 800f0bc:	6143      	str	r3, [r0, #20]
 800f0be:	2d09      	cmp	r5, #9
 800f0c0:	f04f 0301 	mov.w	r3, #1
 800f0c4:	6103      	str	r3, [r0, #16]
 800f0c6:	dd16      	ble.n	800f0f6 <__s2b+0x72>
 800f0c8:	f104 0909 	add.w	r9, r4, #9
 800f0cc:	46c8      	mov	r8, r9
 800f0ce:	442c      	add	r4, r5
 800f0d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f0d4:	4601      	mov	r1, r0
 800f0d6:	3b30      	subs	r3, #48	; 0x30
 800f0d8:	220a      	movs	r2, #10
 800f0da:	4630      	mov	r0, r6
 800f0dc:	f7ff ff8c 	bl	800eff8 <__multadd>
 800f0e0:	45a0      	cmp	r8, r4
 800f0e2:	d1f5      	bne.n	800f0d0 <__s2b+0x4c>
 800f0e4:	f1a5 0408 	sub.w	r4, r5, #8
 800f0e8:	444c      	add	r4, r9
 800f0ea:	1b2d      	subs	r5, r5, r4
 800f0ec:	1963      	adds	r3, r4, r5
 800f0ee:	42bb      	cmp	r3, r7
 800f0f0:	db04      	blt.n	800f0fc <__s2b+0x78>
 800f0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f6:	340a      	adds	r4, #10
 800f0f8:	2509      	movs	r5, #9
 800f0fa:	e7f6      	b.n	800f0ea <__s2b+0x66>
 800f0fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f100:	4601      	mov	r1, r0
 800f102:	3b30      	subs	r3, #48	; 0x30
 800f104:	220a      	movs	r2, #10
 800f106:	4630      	mov	r0, r6
 800f108:	f7ff ff76 	bl	800eff8 <__multadd>
 800f10c:	e7ee      	b.n	800f0ec <__s2b+0x68>
 800f10e:	bf00      	nop
 800f110:	080109f8 	.word	0x080109f8
 800f114:	08010a84 	.word	0x08010a84

0800f118 <__hi0bits>:
 800f118:	0c03      	lsrs	r3, r0, #16
 800f11a:	041b      	lsls	r3, r3, #16
 800f11c:	b9d3      	cbnz	r3, 800f154 <__hi0bits+0x3c>
 800f11e:	0400      	lsls	r0, r0, #16
 800f120:	2310      	movs	r3, #16
 800f122:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f126:	bf04      	itt	eq
 800f128:	0200      	lsleq	r0, r0, #8
 800f12a:	3308      	addeq	r3, #8
 800f12c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f130:	bf04      	itt	eq
 800f132:	0100      	lsleq	r0, r0, #4
 800f134:	3304      	addeq	r3, #4
 800f136:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f13a:	bf04      	itt	eq
 800f13c:	0080      	lsleq	r0, r0, #2
 800f13e:	3302      	addeq	r3, #2
 800f140:	2800      	cmp	r0, #0
 800f142:	db05      	blt.n	800f150 <__hi0bits+0x38>
 800f144:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f148:	f103 0301 	add.w	r3, r3, #1
 800f14c:	bf08      	it	eq
 800f14e:	2320      	moveq	r3, #32
 800f150:	4618      	mov	r0, r3
 800f152:	4770      	bx	lr
 800f154:	2300      	movs	r3, #0
 800f156:	e7e4      	b.n	800f122 <__hi0bits+0xa>

0800f158 <__lo0bits>:
 800f158:	6803      	ldr	r3, [r0, #0]
 800f15a:	f013 0207 	ands.w	r2, r3, #7
 800f15e:	4601      	mov	r1, r0
 800f160:	d00b      	beq.n	800f17a <__lo0bits+0x22>
 800f162:	07da      	lsls	r2, r3, #31
 800f164:	d423      	bmi.n	800f1ae <__lo0bits+0x56>
 800f166:	0798      	lsls	r0, r3, #30
 800f168:	bf49      	itett	mi
 800f16a:	085b      	lsrmi	r3, r3, #1
 800f16c:	089b      	lsrpl	r3, r3, #2
 800f16e:	2001      	movmi	r0, #1
 800f170:	600b      	strmi	r3, [r1, #0]
 800f172:	bf5c      	itt	pl
 800f174:	600b      	strpl	r3, [r1, #0]
 800f176:	2002      	movpl	r0, #2
 800f178:	4770      	bx	lr
 800f17a:	b298      	uxth	r0, r3
 800f17c:	b9a8      	cbnz	r0, 800f1aa <__lo0bits+0x52>
 800f17e:	0c1b      	lsrs	r3, r3, #16
 800f180:	2010      	movs	r0, #16
 800f182:	b2da      	uxtb	r2, r3
 800f184:	b90a      	cbnz	r2, 800f18a <__lo0bits+0x32>
 800f186:	3008      	adds	r0, #8
 800f188:	0a1b      	lsrs	r3, r3, #8
 800f18a:	071a      	lsls	r2, r3, #28
 800f18c:	bf04      	itt	eq
 800f18e:	091b      	lsreq	r3, r3, #4
 800f190:	3004      	addeq	r0, #4
 800f192:	079a      	lsls	r2, r3, #30
 800f194:	bf04      	itt	eq
 800f196:	089b      	lsreq	r3, r3, #2
 800f198:	3002      	addeq	r0, #2
 800f19a:	07da      	lsls	r2, r3, #31
 800f19c:	d403      	bmi.n	800f1a6 <__lo0bits+0x4e>
 800f19e:	085b      	lsrs	r3, r3, #1
 800f1a0:	f100 0001 	add.w	r0, r0, #1
 800f1a4:	d005      	beq.n	800f1b2 <__lo0bits+0x5a>
 800f1a6:	600b      	str	r3, [r1, #0]
 800f1a8:	4770      	bx	lr
 800f1aa:	4610      	mov	r0, r2
 800f1ac:	e7e9      	b.n	800f182 <__lo0bits+0x2a>
 800f1ae:	2000      	movs	r0, #0
 800f1b0:	4770      	bx	lr
 800f1b2:	2020      	movs	r0, #32
 800f1b4:	4770      	bx	lr
	...

0800f1b8 <__i2b>:
 800f1b8:	b510      	push	{r4, lr}
 800f1ba:	460c      	mov	r4, r1
 800f1bc:	2101      	movs	r1, #1
 800f1be:	f7ff feb9 	bl	800ef34 <_Balloc>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	b928      	cbnz	r0, 800f1d2 <__i2b+0x1a>
 800f1c6:	4b05      	ldr	r3, [pc, #20]	; (800f1dc <__i2b+0x24>)
 800f1c8:	4805      	ldr	r0, [pc, #20]	; (800f1e0 <__i2b+0x28>)
 800f1ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f1ce:	f000 fd19 	bl	800fc04 <__assert_func>
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	6144      	str	r4, [r0, #20]
 800f1d6:	6103      	str	r3, [r0, #16]
 800f1d8:	bd10      	pop	{r4, pc}
 800f1da:	bf00      	nop
 800f1dc:	080109f8 	.word	0x080109f8
 800f1e0:	08010a84 	.word	0x08010a84

0800f1e4 <__multiply>:
 800f1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e8:	4691      	mov	r9, r2
 800f1ea:	690a      	ldr	r2, [r1, #16]
 800f1ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	bfb8      	it	lt
 800f1f4:	460b      	movlt	r3, r1
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	bfbc      	itt	lt
 800f1fa:	464c      	movlt	r4, r9
 800f1fc:	4699      	movlt	r9, r3
 800f1fe:	6927      	ldr	r7, [r4, #16]
 800f200:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f204:	68a3      	ldr	r3, [r4, #8]
 800f206:	6861      	ldr	r1, [r4, #4]
 800f208:	eb07 060a 	add.w	r6, r7, sl
 800f20c:	42b3      	cmp	r3, r6
 800f20e:	b085      	sub	sp, #20
 800f210:	bfb8      	it	lt
 800f212:	3101      	addlt	r1, #1
 800f214:	f7ff fe8e 	bl	800ef34 <_Balloc>
 800f218:	b930      	cbnz	r0, 800f228 <__multiply+0x44>
 800f21a:	4602      	mov	r2, r0
 800f21c:	4b44      	ldr	r3, [pc, #272]	; (800f330 <__multiply+0x14c>)
 800f21e:	4845      	ldr	r0, [pc, #276]	; (800f334 <__multiply+0x150>)
 800f220:	f240 115d 	movw	r1, #349	; 0x15d
 800f224:	f000 fcee 	bl	800fc04 <__assert_func>
 800f228:	f100 0514 	add.w	r5, r0, #20
 800f22c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f230:	462b      	mov	r3, r5
 800f232:	2200      	movs	r2, #0
 800f234:	4543      	cmp	r3, r8
 800f236:	d321      	bcc.n	800f27c <__multiply+0x98>
 800f238:	f104 0314 	add.w	r3, r4, #20
 800f23c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f240:	f109 0314 	add.w	r3, r9, #20
 800f244:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f248:	9202      	str	r2, [sp, #8]
 800f24a:	1b3a      	subs	r2, r7, r4
 800f24c:	3a15      	subs	r2, #21
 800f24e:	f022 0203 	bic.w	r2, r2, #3
 800f252:	3204      	adds	r2, #4
 800f254:	f104 0115 	add.w	r1, r4, #21
 800f258:	428f      	cmp	r7, r1
 800f25a:	bf38      	it	cc
 800f25c:	2204      	movcc	r2, #4
 800f25e:	9201      	str	r2, [sp, #4]
 800f260:	9a02      	ldr	r2, [sp, #8]
 800f262:	9303      	str	r3, [sp, #12]
 800f264:	429a      	cmp	r2, r3
 800f266:	d80c      	bhi.n	800f282 <__multiply+0x9e>
 800f268:	2e00      	cmp	r6, #0
 800f26a:	dd03      	ble.n	800f274 <__multiply+0x90>
 800f26c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f270:	2b00      	cmp	r3, #0
 800f272:	d05a      	beq.n	800f32a <__multiply+0x146>
 800f274:	6106      	str	r6, [r0, #16]
 800f276:	b005      	add	sp, #20
 800f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27c:	f843 2b04 	str.w	r2, [r3], #4
 800f280:	e7d8      	b.n	800f234 <__multiply+0x50>
 800f282:	f8b3 a000 	ldrh.w	sl, [r3]
 800f286:	f1ba 0f00 	cmp.w	sl, #0
 800f28a:	d024      	beq.n	800f2d6 <__multiply+0xf2>
 800f28c:	f104 0e14 	add.w	lr, r4, #20
 800f290:	46a9      	mov	r9, r5
 800f292:	f04f 0c00 	mov.w	ip, #0
 800f296:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f29a:	f8d9 1000 	ldr.w	r1, [r9]
 800f29e:	fa1f fb82 	uxth.w	fp, r2
 800f2a2:	b289      	uxth	r1, r1
 800f2a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800f2a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f2ac:	f8d9 2000 	ldr.w	r2, [r9]
 800f2b0:	4461      	add	r1, ip
 800f2b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f2b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800f2ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f2be:	b289      	uxth	r1, r1
 800f2c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f2c4:	4577      	cmp	r7, lr
 800f2c6:	f849 1b04 	str.w	r1, [r9], #4
 800f2ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f2ce:	d8e2      	bhi.n	800f296 <__multiply+0xb2>
 800f2d0:	9a01      	ldr	r2, [sp, #4]
 800f2d2:	f845 c002 	str.w	ip, [r5, r2]
 800f2d6:	9a03      	ldr	r2, [sp, #12]
 800f2d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f2dc:	3304      	adds	r3, #4
 800f2de:	f1b9 0f00 	cmp.w	r9, #0
 800f2e2:	d020      	beq.n	800f326 <__multiply+0x142>
 800f2e4:	6829      	ldr	r1, [r5, #0]
 800f2e6:	f104 0c14 	add.w	ip, r4, #20
 800f2ea:	46ae      	mov	lr, r5
 800f2ec:	f04f 0a00 	mov.w	sl, #0
 800f2f0:	f8bc b000 	ldrh.w	fp, [ip]
 800f2f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f2f8:	fb09 220b 	mla	r2, r9, fp, r2
 800f2fc:	4492      	add	sl, r2
 800f2fe:	b289      	uxth	r1, r1
 800f300:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f304:	f84e 1b04 	str.w	r1, [lr], #4
 800f308:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f30c:	f8be 1000 	ldrh.w	r1, [lr]
 800f310:	0c12      	lsrs	r2, r2, #16
 800f312:	fb09 1102 	mla	r1, r9, r2, r1
 800f316:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f31a:	4567      	cmp	r7, ip
 800f31c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f320:	d8e6      	bhi.n	800f2f0 <__multiply+0x10c>
 800f322:	9a01      	ldr	r2, [sp, #4]
 800f324:	50a9      	str	r1, [r5, r2]
 800f326:	3504      	adds	r5, #4
 800f328:	e79a      	b.n	800f260 <__multiply+0x7c>
 800f32a:	3e01      	subs	r6, #1
 800f32c:	e79c      	b.n	800f268 <__multiply+0x84>
 800f32e:	bf00      	nop
 800f330:	080109f8 	.word	0x080109f8
 800f334:	08010a84 	.word	0x08010a84

0800f338 <__pow5mult>:
 800f338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f33c:	4615      	mov	r5, r2
 800f33e:	f012 0203 	ands.w	r2, r2, #3
 800f342:	4606      	mov	r6, r0
 800f344:	460f      	mov	r7, r1
 800f346:	d007      	beq.n	800f358 <__pow5mult+0x20>
 800f348:	4c25      	ldr	r4, [pc, #148]	; (800f3e0 <__pow5mult+0xa8>)
 800f34a:	3a01      	subs	r2, #1
 800f34c:	2300      	movs	r3, #0
 800f34e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f352:	f7ff fe51 	bl	800eff8 <__multadd>
 800f356:	4607      	mov	r7, r0
 800f358:	10ad      	asrs	r5, r5, #2
 800f35a:	d03d      	beq.n	800f3d8 <__pow5mult+0xa0>
 800f35c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f35e:	b97c      	cbnz	r4, 800f380 <__pow5mult+0x48>
 800f360:	2010      	movs	r0, #16
 800f362:	f7fc fd27 	bl	800bdb4 <malloc>
 800f366:	4602      	mov	r2, r0
 800f368:	6270      	str	r0, [r6, #36]	; 0x24
 800f36a:	b928      	cbnz	r0, 800f378 <__pow5mult+0x40>
 800f36c:	4b1d      	ldr	r3, [pc, #116]	; (800f3e4 <__pow5mult+0xac>)
 800f36e:	481e      	ldr	r0, [pc, #120]	; (800f3e8 <__pow5mult+0xb0>)
 800f370:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f374:	f000 fc46 	bl	800fc04 <__assert_func>
 800f378:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f37c:	6004      	str	r4, [r0, #0]
 800f37e:	60c4      	str	r4, [r0, #12]
 800f380:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f384:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f388:	b94c      	cbnz	r4, 800f39e <__pow5mult+0x66>
 800f38a:	f240 2171 	movw	r1, #625	; 0x271
 800f38e:	4630      	mov	r0, r6
 800f390:	f7ff ff12 	bl	800f1b8 <__i2b>
 800f394:	2300      	movs	r3, #0
 800f396:	f8c8 0008 	str.w	r0, [r8, #8]
 800f39a:	4604      	mov	r4, r0
 800f39c:	6003      	str	r3, [r0, #0]
 800f39e:	f04f 0900 	mov.w	r9, #0
 800f3a2:	07eb      	lsls	r3, r5, #31
 800f3a4:	d50a      	bpl.n	800f3bc <__pow5mult+0x84>
 800f3a6:	4639      	mov	r1, r7
 800f3a8:	4622      	mov	r2, r4
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	f7ff ff1a 	bl	800f1e4 <__multiply>
 800f3b0:	4639      	mov	r1, r7
 800f3b2:	4680      	mov	r8, r0
 800f3b4:	4630      	mov	r0, r6
 800f3b6:	f7ff fdfd 	bl	800efb4 <_Bfree>
 800f3ba:	4647      	mov	r7, r8
 800f3bc:	106d      	asrs	r5, r5, #1
 800f3be:	d00b      	beq.n	800f3d8 <__pow5mult+0xa0>
 800f3c0:	6820      	ldr	r0, [r4, #0]
 800f3c2:	b938      	cbnz	r0, 800f3d4 <__pow5mult+0x9c>
 800f3c4:	4622      	mov	r2, r4
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	f7ff ff0b 	bl	800f1e4 <__multiply>
 800f3ce:	6020      	str	r0, [r4, #0]
 800f3d0:	f8c0 9000 	str.w	r9, [r0]
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	e7e4      	b.n	800f3a2 <__pow5mult+0x6a>
 800f3d8:	4638      	mov	r0, r7
 800f3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3de:	bf00      	nop
 800f3e0:	08010bd0 	.word	0x08010bd0
 800f3e4:	08010986 	.word	0x08010986
 800f3e8:	08010a84 	.word	0x08010a84

0800f3ec <__lshift>:
 800f3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3f0:	460c      	mov	r4, r1
 800f3f2:	6849      	ldr	r1, [r1, #4]
 800f3f4:	6923      	ldr	r3, [r4, #16]
 800f3f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f3fa:	68a3      	ldr	r3, [r4, #8]
 800f3fc:	4607      	mov	r7, r0
 800f3fe:	4691      	mov	r9, r2
 800f400:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f404:	f108 0601 	add.w	r6, r8, #1
 800f408:	42b3      	cmp	r3, r6
 800f40a:	db0b      	blt.n	800f424 <__lshift+0x38>
 800f40c:	4638      	mov	r0, r7
 800f40e:	f7ff fd91 	bl	800ef34 <_Balloc>
 800f412:	4605      	mov	r5, r0
 800f414:	b948      	cbnz	r0, 800f42a <__lshift+0x3e>
 800f416:	4602      	mov	r2, r0
 800f418:	4b2a      	ldr	r3, [pc, #168]	; (800f4c4 <__lshift+0xd8>)
 800f41a:	482b      	ldr	r0, [pc, #172]	; (800f4c8 <__lshift+0xdc>)
 800f41c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f420:	f000 fbf0 	bl	800fc04 <__assert_func>
 800f424:	3101      	adds	r1, #1
 800f426:	005b      	lsls	r3, r3, #1
 800f428:	e7ee      	b.n	800f408 <__lshift+0x1c>
 800f42a:	2300      	movs	r3, #0
 800f42c:	f100 0114 	add.w	r1, r0, #20
 800f430:	f100 0210 	add.w	r2, r0, #16
 800f434:	4618      	mov	r0, r3
 800f436:	4553      	cmp	r3, sl
 800f438:	db37      	blt.n	800f4aa <__lshift+0xbe>
 800f43a:	6920      	ldr	r0, [r4, #16]
 800f43c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f440:	f104 0314 	add.w	r3, r4, #20
 800f444:	f019 091f 	ands.w	r9, r9, #31
 800f448:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f44c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f450:	d02f      	beq.n	800f4b2 <__lshift+0xc6>
 800f452:	f1c9 0e20 	rsb	lr, r9, #32
 800f456:	468a      	mov	sl, r1
 800f458:	f04f 0c00 	mov.w	ip, #0
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	fa02 f209 	lsl.w	r2, r2, r9
 800f462:	ea42 020c 	orr.w	r2, r2, ip
 800f466:	f84a 2b04 	str.w	r2, [sl], #4
 800f46a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f46e:	4298      	cmp	r0, r3
 800f470:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f474:	d8f2      	bhi.n	800f45c <__lshift+0x70>
 800f476:	1b03      	subs	r3, r0, r4
 800f478:	3b15      	subs	r3, #21
 800f47a:	f023 0303 	bic.w	r3, r3, #3
 800f47e:	3304      	adds	r3, #4
 800f480:	f104 0215 	add.w	r2, r4, #21
 800f484:	4290      	cmp	r0, r2
 800f486:	bf38      	it	cc
 800f488:	2304      	movcc	r3, #4
 800f48a:	f841 c003 	str.w	ip, [r1, r3]
 800f48e:	f1bc 0f00 	cmp.w	ip, #0
 800f492:	d001      	beq.n	800f498 <__lshift+0xac>
 800f494:	f108 0602 	add.w	r6, r8, #2
 800f498:	3e01      	subs	r6, #1
 800f49a:	4638      	mov	r0, r7
 800f49c:	612e      	str	r6, [r5, #16]
 800f49e:	4621      	mov	r1, r4
 800f4a0:	f7ff fd88 	bl	800efb4 <_Bfree>
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	e7c1      	b.n	800f436 <__lshift+0x4a>
 800f4b2:	3904      	subs	r1, #4
 800f4b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4bc:	4298      	cmp	r0, r3
 800f4be:	d8f9      	bhi.n	800f4b4 <__lshift+0xc8>
 800f4c0:	e7ea      	b.n	800f498 <__lshift+0xac>
 800f4c2:	bf00      	nop
 800f4c4:	080109f8 	.word	0x080109f8
 800f4c8:	08010a84 	.word	0x08010a84

0800f4cc <__mcmp>:
 800f4cc:	b530      	push	{r4, r5, lr}
 800f4ce:	6902      	ldr	r2, [r0, #16]
 800f4d0:	690c      	ldr	r4, [r1, #16]
 800f4d2:	1b12      	subs	r2, r2, r4
 800f4d4:	d10e      	bne.n	800f4f4 <__mcmp+0x28>
 800f4d6:	f100 0314 	add.w	r3, r0, #20
 800f4da:	3114      	adds	r1, #20
 800f4dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f4e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f4e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f4e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f4ec:	42a5      	cmp	r5, r4
 800f4ee:	d003      	beq.n	800f4f8 <__mcmp+0x2c>
 800f4f0:	d305      	bcc.n	800f4fe <__mcmp+0x32>
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	4610      	mov	r0, r2
 800f4f6:	bd30      	pop	{r4, r5, pc}
 800f4f8:	4283      	cmp	r3, r0
 800f4fa:	d3f3      	bcc.n	800f4e4 <__mcmp+0x18>
 800f4fc:	e7fa      	b.n	800f4f4 <__mcmp+0x28>
 800f4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f502:	e7f7      	b.n	800f4f4 <__mcmp+0x28>

0800f504 <__mdiff>:
 800f504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f508:	460c      	mov	r4, r1
 800f50a:	4606      	mov	r6, r0
 800f50c:	4611      	mov	r1, r2
 800f50e:	4620      	mov	r0, r4
 800f510:	4690      	mov	r8, r2
 800f512:	f7ff ffdb 	bl	800f4cc <__mcmp>
 800f516:	1e05      	subs	r5, r0, #0
 800f518:	d110      	bne.n	800f53c <__mdiff+0x38>
 800f51a:	4629      	mov	r1, r5
 800f51c:	4630      	mov	r0, r6
 800f51e:	f7ff fd09 	bl	800ef34 <_Balloc>
 800f522:	b930      	cbnz	r0, 800f532 <__mdiff+0x2e>
 800f524:	4b3a      	ldr	r3, [pc, #232]	; (800f610 <__mdiff+0x10c>)
 800f526:	4602      	mov	r2, r0
 800f528:	f240 2132 	movw	r1, #562	; 0x232
 800f52c:	4839      	ldr	r0, [pc, #228]	; (800f614 <__mdiff+0x110>)
 800f52e:	f000 fb69 	bl	800fc04 <__assert_func>
 800f532:	2301      	movs	r3, #1
 800f534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53c:	bfa4      	itt	ge
 800f53e:	4643      	movge	r3, r8
 800f540:	46a0      	movge	r8, r4
 800f542:	4630      	mov	r0, r6
 800f544:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f548:	bfa6      	itte	ge
 800f54a:	461c      	movge	r4, r3
 800f54c:	2500      	movge	r5, #0
 800f54e:	2501      	movlt	r5, #1
 800f550:	f7ff fcf0 	bl	800ef34 <_Balloc>
 800f554:	b920      	cbnz	r0, 800f560 <__mdiff+0x5c>
 800f556:	4b2e      	ldr	r3, [pc, #184]	; (800f610 <__mdiff+0x10c>)
 800f558:	4602      	mov	r2, r0
 800f55a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f55e:	e7e5      	b.n	800f52c <__mdiff+0x28>
 800f560:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f564:	6926      	ldr	r6, [r4, #16]
 800f566:	60c5      	str	r5, [r0, #12]
 800f568:	f104 0914 	add.w	r9, r4, #20
 800f56c:	f108 0514 	add.w	r5, r8, #20
 800f570:	f100 0e14 	add.w	lr, r0, #20
 800f574:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f578:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f57c:	f108 0210 	add.w	r2, r8, #16
 800f580:	46f2      	mov	sl, lr
 800f582:	2100      	movs	r1, #0
 800f584:	f859 3b04 	ldr.w	r3, [r9], #4
 800f588:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f58c:	fa1f f883 	uxth.w	r8, r3
 800f590:	fa11 f18b 	uxtah	r1, r1, fp
 800f594:	0c1b      	lsrs	r3, r3, #16
 800f596:	eba1 0808 	sub.w	r8, r1, r8
 800f59a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f59e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f5a2:	fa1f f888 	uxth.w	r8, r8
 800f5a6:	1419      	asrs	r1, r3, #16
 800f5a8:	454e      	cmp	r6, r9
 800f5aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f5ae:	f84a 3b04 	str.w	r3, [sl], #4
 800f5b2:	d8e7      	bhi.n	800f584 <__mdiff+0x80>
 800f5b4:	1b33      	subs	r3, r6, r4
 800f5b6:	3b15      	subs	r3, #21
 800f5b8:	f023 0303 	bic.w	r3, r3, #3
 800f5bc:	3304      	adds	r3, #4
 800f5be:	3415      	adds	r4, #21
 800f5c0:	42a6      	cmp	r6, r4
 800f5c2:	bf38      	it	cc
 800f5c4:	2304      	movcc	r3, #4
 800f5c6:	441d      	add	r5, r3
 800f5c8:	4473      	add	r3, lr
 800f5ca:	469e      	mov	lr, r3
 800f5cc:	462e      	mov	r6, r5
 800f5ce:	4566      	cmp	r6, ip
 800f5d0:	d30e      	bcc.n	800f5f0 <__mdiff+0xec>
 800f5d2:	f10c 0203 	add.w	r2, ip, #3
 800f5d6:	1b52      	subs	r2, r2, r5
 800f5d8:	f022 0203 	bic.w	r2, r2, #3
 800f5dc:	3d03      	subs	r5, #3
 800f5de:	45ac      	cmp	ip, r5
 800f5e0:	bf38      	it	cc
 800f5e2:	2200      	movcc	r2, #0
 800f5e4:	441a      	add	r2, r3
 800f5e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f5ea:	b17b      	cbz	r3, 800f60c <__mdiff+0x108>
 800f5ec:	6107      	str	r7, [r0, #16]
 800f5ee:	e7a3      	b.n	800f538 <__mdiff+0x34>
 800f5f0:	f856 8b04 	ldr.w	r8, [r6], #4
 800f5f4:	fa11 f288 	uxtah	r2, r1, r8
 800f5f8:	1414      	asrs	r4, r2, #16
 800f5fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f5fe:	b292      	uxth	r2, r2
 800f600:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f604:	f84e 2b04 	str.w	r2, [lr], #4
 800f608:	1421      	asrs	r1, r4, #16
 800f60a:	e7e0      	b.n	800f5ce <__mdiff+0xca>
 800f60c:	3f01      	subs	r7, #1
 800f60e:	e7ea      	b.n	800f5e6 <__mdiff+0xe2>
 800f610:	080109f8 	.word	0x080109f8
 800f614:	08010a84 	.word	0x08010a84

0800f618 <__ulp>:
 800f618:	b082      	sub	sp, #8
 800f61a:	ed8d 0b00 	vstr	d0, [sp]
 800f61e:	9b01      	ldr	r3, [sp, #4]
 800f620:	4912      	ldr	r1, [pc, #72]	; (800f66c <__ulp+0x54>)
 800f622:	4019      	ands	r1, r3
 800f624:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f628:	2900      	cmp	r1, #0
 800f62a:	dd05      	ble.n	800f638 <__ulp+0x20>
 800f62c:	2200      	movs	r2, #0
 800f62e:	460b      	mov	r3, r1
 800f630:	ec43 2b10 	vmov	d0, r2, r3
 800f634:	b002      	add	sp, #8
 800f636:	4770      	bx	lr
 800f638:	4249      	negs	r1, r1
 800f63a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f63e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f642:	f04f 0200 	mov.w	r2, #0
 800f646:	f04f 0300 	mov.w	r3, #0
 800f64a:	da04      	bge.n	800f656 <__ulp+0x3e>
 800f64c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f650:	fa41 f300 	asr.w	r3, r1, r0
 800f654:	e7ec      	b.n	800f630 <__ulp+0x18>
 800f656:	f1a0 0114 	sub.w	r1, r0, #20
 800f65a:	291e      	cmp	r1, #30
 800f65c:	bfda      	itte	le
 800f65e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f662:	fa20 f101 	lsrle.w	r1, r0, r1
 800f666:	2101      	movgt	r1, #1
 800f668:	460a      	mov	r2, r1
 800f66a:	e7e1      	b.n	800f630 <__ulp+0x18>
 800f66c:	7ff00000 	.word	0x7ff00000

0800f670 <__b2d>:
 800f670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f672:	6905      	ldr	r5, [r0, #16]
 800f674:	f100 0714 	add.w	r7, r0, #20
 800f678:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f67c:	1f2e      	subs	r6, r5, #4
 800f67e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f682:	4620      	mov	r0, r4
 800f684:	f7ff fd48 	bl	800f118 <__hi0bits>
 800f688:	f1c0 0320 	rsb	r3, r0, #32
 800f68c:	280a      	cmp	r0, #10
 800f68e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f70c <__b2d+0x9c>
 800f692:	600b      	str	r3, [r1, #0]
 800f694:	dc14      	bgt.n	800f6c0 <__b2d+0x50>
 800f696:	f1c0 0e0b 	rsb	lr, r0, #11
 800f69a:	fa24 f10e 	lsr.w	r1, r4, lr
 800f69e:	42b7      	cmp	r7, r6
 800f6a0:	ea41 030c 	orr.w	r3, r1, ip
 800f6a4:	bf34      	ite	cc
 800f6a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f6aa:	2100      	movcs	r1, #0
 800f6ac:	3015      	adds	r0, #21
 800f6ae:	fa04 f000 	lsl.w	r0, r4, r0
 800f6b2:	fa21 f10e 	lsr.w	r1, r1, lr
 800f6b6:	ea40 0201 	orr.w	r2, r0, r1
 800f6ba:	ec43 2b10 	vmov	d0, r2, r3
 800f6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6c0:	42b7      	cmp	r7, r6
 800f6c2:	bf3a      	itte	cc
 800f6c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f6c8:	f1a5 0608 	subcc.w	r6, r5, #8
 800f6cc:	2100      	movcs	r1, #0
 800f6ce:	380b      	subs	r0, #11
 800f6d0:	d017      	beq.n	800f702 <__b2d+0x92>
 800f6d2:	f1c0 0c20 	rsb	ip, r0, #32
 800f6d6:	fa04 f500 	lsl.w	r5, r4, r0
 800f6da:	42be      	cmp	r6, r7
 800f6dc:	fa21 f40c 	lsr.w	r4, r1, ip
 800f6e0:	ea45 0504 	orr.w	r5, r5, r4
 800f6e4:	bf8c      	ite	hi
 800f6e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f6ea:	2400      	movls	r4, #0
 800f6ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f6f0:	fa01 f000 	lsl.w	r0, r1, r0
 800f6f4:	fa24 f40c 	lsr.w	r4, r4, ip
 800f6f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f6fc:	ea40 0204 	orr.w	r2, r0, r4
 800f700:	e7db      	b.n	800f6ba <__b2d+0x4a>
 800f702:	ea44 030c 	orr.w	r3, r4, ip
 800f706:	460a      	mov	r2, r1
 800f708:	e7d7      	b.n	800f6ba <__b2d+0x4a>
 800f70a:	bf00      	nop
 800f70c:	3ff00000 	.word	0x3ff00000

0800f710 <__d2b>:
 800f710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f714:	4689      	mov	r9, r1
 800f716:	2101      	movs	r1, #1
 800f718:	ec57 6b10 	vmov	r6, r7, d0
 800f71c:	4690      	mov	r8, r2
 800f71e:	f7ff fc09 	bl	800ef34 <_Balloc>
 800f722:	4604      	mov	r4, r0
 800f724:	b930      	cbnz	r0, 800f734 <__d2b+0x24>
 800f726:	4602      	mov	r2, r0
 800f728:	4b25      	ldr	r3, [pc, #148]	; (800f7c0 <__d2b+0xb0>)
 800f72a:	4826      	ldr	r0, [pc, #152]	; (800f7c4 <__d2b+0xb4>)
 800f72c:	f240 310a 	movw	r1, #778	; 0x30a
 800f730:	f000 fa68 	bl	800fc04 <__assert_func>
 800f734:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f738:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f73c:	bb35      	cbnz	r5, 800f78c <__d2b+0x7c>
 800f73e:	2e00      	cmp	r6, #0
 800f740:	9301      	str	r3, [sp, #4]
 800f742:	d028      	beq.n	800f796 <__d2b+0x86>
 800f744:	4668      	mov	r0, sp
 800f746:	9600      	str	r6, [sp, #0]
 800f748:	f7ff fd06 	bl	800f158 <__lo0bits>
 800f74c:	9900      	ldr	r1, [sp, #0]
 800f74e:	b300      	cbz	r0, 800f792 <__d2b+0x82>
 800f750:	9a01      	ldr	r2, [sp, #4]
 800f752:	f1c0 0320 	rsb	r3, r0, #32
 800f756:	fa02 f303 	lsl.w	r3, r2, r3
 800f75a:	430b      	orrs	r3, r1
 800f75c:	40c2      	lsrs	r2, r0
 800f75e:	6163      	str	r3, [r4, #20]
 800f760:	9201      	str	r2, [sp, #4]
 800f762:	9b01      	ldr	r3, [sp, #4]
 800f764:	61a3      	str	r3, [r4, #24]
 800f766:	2b00      	cmp	r3, #0
 800f768:	bf14      	ite	ne
 800f76a:	2202      	movne	r2, #2
 800f76c:	2201      	moveq	r2, #1
 800f76e:	6122      	str	r2, [r4, #16]
 800f770:	b1d5      	cbz	r5, 800f7a8 <__d2b+0x98>
 800f772:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f776:	4405      	add	r5, r0
 800f778:	f8c9 5000 	str.w	r5, [r9]
 800f77c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f780:	f8c8 0000 	str.w	r0, [r8]
 800f784:	4620      	mov	r0, r4
 800f786:	b003      	add	sp, #12
 800f788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f78c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f790:	e7d5      	b.n	800f73e <__d2b+0x2e>
 800f792:	6161      	str	r1, [r4, #20]
 800f794:	e7e5      	b.n	800f762 <__d2b+0x52>
 800f796:	a801      	add	r0, sp, #4
 800f798:	f7ff fcde 	bl	800f158 <__lo0bits>
 800f79c:	9b01      	ldr	r3, [sp, #4]
 800f79e:	6163      	str	r3, [r4, #20]
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	6122      	str	r2, [r4, #16]
 800f7a4:	3020      	adds	r0, #32
 800f7a6:	e7e3      	b.n	800f770 <__d2b+0x60>
 800f7a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f7b0:	f8c9 0000 	str.w	r0, [r9]
 800f7b4:	6918      	ldr	r0, [r3, #16]
 800f7b6:	f7ff fcaf 	bl	800f118 <__hi0bits>
 800f7ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7be:	e7df      	b.n	800f780 <__d2b+0x70>
 800f7c0:	080109f8 	.word	0x080109f8
 800f7c4:	08010a84 	.word	0x08010a84

0800f7c8 <__ratio>:
 800f7c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7cc:	4688      	mov	r8, r1
 800f7ce:	4669      	mov	r1, sp
 800f7d0:	4681      	mov	r9, r0
 800f7d2:	f7ff ff4d 	bl	800f670 <__b2d>
 800f7d6:	a901      	add	r1, sp, #4
 800f7d8:	4640      	mov	r0, r8
 800f7da:	ec55 4b10 	vmov	r4, r5, d0
 800f7de:	f7ff ff47 	bl	800f670 <__b2d>
 800f7e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f7e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f7ea:	eba3 0c02 	sub.w	ip, r3, r2
 800f7ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f7f2:	1a9b      	subs	r3, r3, r2
 800f7f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f7f8:	ec51 0b10 	vmov	r0, r1, d0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	bfd6      	itet	le
 800f800:	460a      	movle	r2, r1
 800f802:	462a      	movgt	r2, r5
 800f804:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f808:	468b      	mov	fp, r1
 800f80a:	462f      	mov	r7, r5
 800f80c:	bfd4      	ite	le
 800f80e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f812:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f816:	4620      	mov	r0, r4
 800f818:	ee10 2a10 	vmov	r2, s0
 800f81c:	465b      	mov	r3, fp
 800f81e:	4639      	mov	r1, r7
 800f820:	f7f1 f814 	bl	800084c <__aeabi_ddiv>
 800f824:	ec41 0b10 	vmov	d0, r0, r1
 800f828:	b003      	add	sp, #12
 800f82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f82e <__copybits>:
 800f82e:	3901      	subs	r1, #1
 800f830:	b570      	push	{r4, r5, r6, lr}
 800f832:	1149      	asrs	r1, r1, #5
 800f834:	6914      	ldr	r4, [r2, #16]
 800f836:	3101      	adds	r1, #1
 800f838:	f102 0314 	add.w	r3, r2, #20
 800f83c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f840:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f844:	1f05      	subs	r5, r0, #4
 800f846:	42a3      	cmp	r3, r4
 800f848:	d30c      	bcc.n	800f864 <__copybits+0x36>
 800f84a:	1aa3      	subs	r3, r4, r2
 800f84c:	3b11      	subs	r3, #17
 800f84e:	f023 0303 	bic.w	r3, r3, #3
 800f852:	3211      	adds	r2, #17
 800f854:	42a2      	cmp	r2, r4
 800f856:	bf88      	it	hi
 800f858:	2300      	movhi	r3, #0
 800f85a:	4418      	add	r0, r3
 800f85c:	2300      	movs	r3, #0
 800f85e:	4288      	cmp	r0, r1
 800f860:	d305      	bcc.n	800f86e <__copybits+0x40>
 800f862:	bd70      	pop	{r4, r5, r6, pc}
 800f864:	f853 6b04 	ldr.w	r6, [r3], #4
 800f868:	f845 6f04 	str.w	r6, [r5, #4]!
 800f86c:	e7eb      	b.n	800f846 <__copybits+0x18>
 800f86e:	f840 3b04 	str.w	r3, [r0], #4
 800f872:	e7f4      	b.n	800f85e <__copybits+0x30>

0800f874 <__any_on>:
 800f874:	f100 0214 	add.w	r2, r0, #20
 800f878:	6900      	ldr	r0, [r0, #16]
 800f87a:	114b      	asrs	r3, r1, #5
 800f87c:	4298      	cmp	r0, r3
 800f87e:	b510      	push	{r4, lr}
 800f880:	db11      	blt.n	800f8a6 <__any_on+0x32>
 800f882:	dd0a      	ble.n	800f89a <__any_on+0x26>
 800f884:	f011 011f 	ands.w	r1, r1, #31
 800f888:	d007      	beq.n	800f89a <__any_on+0x26>
 800f88a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f88e:	fa24 f001 	lsr.w	r0, r4, r1
 800f892:	fa00 f101 	lsl.w	r1, r0, r1
 800f896:	428c      	cmp	r4, r1
 800f898:	d10b      	bne.n	800f8b2 <__any_on+0x3e>
 800f89a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d803      	bhi.n	800f8aa <__any_on+0x36>
 800f8a2:	2000      	movs	r0, #0
 800f8a4:	bd10      	pop	{r4, pc}
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	e7f7      	b.n	800f89a <__any_on+0x26>
 800f8aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f8ae:	2900      	cmp	r1, #0
 800f8b0:	d0f5      	beq.n	800f89e <__any_on+0x2a>
 800f8b2:	2001      	movs	r0, #1
 800f8b4:	e7f6      	b.n	800f8a4 <__any_on+0x30>

0800f8b6 <_calloc_r>:
 800f8b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8b8:	fba1 2402 	umull	r2, r4, r1, r2
 800f8bc:	b94c      	cbnz	r4, 800f8d2 <_calloc_r+0x1c>
 800f8be:	4611      	mov	r1, r2
 800f8c0:	9201      	str	r2, [sp, #4]
 800f8c2:	f7fc fb09 	bl	800bed8 <_malloc_r>
 800f8c6:	9a01      	ldr	r2, [sp, #4]
 800f8c8:	4605      	mov	r5, r0
 800f8ca:	b930      	cbnz	r0, 800f8da <_calloc_r+0x24>
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	b003      	add	sp, #12
 800f8d0:	bd30      	pop	{r4, r5, pc}
 800f8d2:	220c      	movs	r2, #12
 800f8d4:	6002      	str	r2, [r0, #0]
 800f8d6:	2500      	movs	r5, #0
 800f8d8:	e7f8      	b.n	800f8cc <_calloc_r+0x16>
 800f8da:	4621      	mov	r1, r4
 800f8dc:	f7fc fa88 	bl	800bdf0 <memset>
 800f8e0:	e7f4      	b.n	800f8cc <_calloc_r+0x16>

0800f8e2 <__ssputs_r>:
 800f8e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8e6:	688e      	ldr	r6, [r1, #8]
 800f8e8:	429e      	cmp	r6, r3
 800f8ea:	4682      	mov	sl, r0
 800f8ec:	460c      	mov	r4, r1
 800f8ee:	4690      	mov	r8, r2
 800f8f0:	461f      	mov	r7, r3
 800f8f2:	d838      	bhi.n	800f966 <__ssputs_r+0x84>
 800f8f4:	898a      	ldrh	r2, [r1, #12]
 800f8f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f8fa:	d032      	beq.n	800f962 <__ssputs_r+0x80>
 800f8fc:	6825      	ldr	r5, [r4, #0]
 800f8fe:	6909      	ldr	r1, [r1, #16]
 800f900:	eba5 0901 	sub.w	r9, r5, r1
 800f904:	6965      	ldr	r5, [r4, #20]
 800f906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f90a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f90e:	3301      	adds	r3, #1
 800f910:	444b      	add	r3, r9
 800f912:	106d      	asrs	r5, r5, #1
 800f914:	429d      	cmp	r5, r3
 800f916:	bf38      	it	cc
 800f918:	461d      	movcc	r5, r3
 800f91a:	0553      	lsls	r3, r2, #21
 800f91c:	d531      	bpl.n	800f982 <__ssputs_r+0xa0>
 800f91e:	4629      	mov	r1, r5
 800f920:	f7fc fada 	bl	800bed8 <_malloc_r>
 800f924:	4606      	mov	r6, r0
 800f926:	b950      	cbnz	r0, 800f93e <__ssputs_r+0x5c>
 800f928:	230c      	movs	r3, #12
 800f92a:	f8ca 3000 	str.w	r3, [sl]
 800f92e:	89a3      	ldrh	r3, [r4, #12]
 800f930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f934:	81a3      	strh	r3, [r4, #12]
 800f936:	f04f 30ff 	mov.w	r0, #4294967295
 800f93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f93e:	6921      	ldr	r1, [r4, #16]
 800f940:	464a      	mov	r2, r9
 800f942:	f7fc fa47 	bl	800bdd4 <memcpy>
 800f946:	89a3      	ldrh	r3, [r4, #12]
 800f948:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f94c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f950:	81a3      	strh	r3, [r4, #12]
 800f952:	6126      	str	r6, [r4, #16]
 800f954:	6165      	str	r5, [r4, #20]
 800f956:	444e      	add	r6, r9
 800f958:	eba5 0509 	sub.w	r5, r5, r9
 800f95c:	6026      	str	r6, [r4, #0]
 800f95e:	60a5      	str	r5, [r4, #8]
 800f960:	463e      	mov	r6, r7
 800f962:	42be      	cmp	r6, r7
 800f964:	d900      	bls.n	800f968 <__ssputs_r+0x86>
 800f966:	463e      	mov	r6, r7
 800f968:	6820      	ldr	r0, [r4, #0]
 800f96a:	4632      	mov	r2, r6
 800f96c:	4641      	mov	r1, r8
 800f96e:	f000 f97c 	bl	800fc6a <memmove>
 800f972:	68a3      	ldr	r3, [r4, #8]
 800f974:	1b9b      	subs	r3, r3, r6
 800f976:	60a3      	str	r3, [r4, #8]
 800f978:	6823      	ldr	r3, [r4, #0]
 800f97a:	4433      	add	r3, r6
 800f97c:	6023      	str	r3, [r4, #0]
 800f97e:	2000      	movs	r0, #0
 800f980:	e7db      	b.n	800f93a <__ssputs_r+0x58>
 800f982:	462a      	mov	r2, r5
 800f984:	f000 f98b 	bl	800fc9e <_realloc_r>
 800f988:	4606      	mov	r6, r0
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d1e1      	bne.n	800f952 <__ssputs_r+0x70>
 800f98e:	6921      	ldr	r1, [r4, #16]
 800f990:	4650      	mov	r0, sl
 800f992:	f7fc fa35 	bl	800be00 <_free_r>
 800f996:	e7c7      	b.n	800f928 <__ssputs_r+0x46>

0800f998 <_svfiprintf_r>:
 800f998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99c:	4698      	mov	r8, r3
 800f99e:	898b      	ldrh	r3, [r1, #12]
 800f9a0:	061b      	lsls	r3, r3, #24
 800f9a2:	b09d      	sub	sp, #116	; 0x74
 800f9a4:	4607      	mov	r7, r0
 800f9a6:	460d      	mov	r5, r1
 800f9a8:	4614      	mov	r4, r2
 800f9aa:	d50e      	bpl.n	800f9ca <_svfiprintf_r+0x32>
 800f9ac:	690b      	ldr	r3, [r1, #16]
 800f9ae:	b963      	cbnz	r3, 800f9ca <_svfiprintf_r+0x32>
 800f9b0:	2140      	movs	r1, #64	; 0x40
 800f9b2:	f7fc fa91 	bl	800bed8 <_malloc_r>
 800f9b6:	6028      	str	r0, [r5, #0]
 800f9b8:	6128      	str	r0, [r5, #16]
 800f9ba:	b920      	cbnz	r0, 800f9c6 <_svfiprintf_r+0x2e>
 800f9bc:	230c      	movs	r3, #12
 800f9be:	603b      	str	r3, [r7, #0]
 800f9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9c4:	e0d1      	b.n	800fb6a <_svfiprintf_r+0x1d2>
 800f9c6:	2340      	movs	r3, #64	; 0x40
 800f9c8:	616b      	str	r3, [r5, #20]
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f9ce:	2320      	movs	r3, #32
 800f9d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9d8:	2330      	movs	r3, #48	; 0x30
 800f9da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fb84 <_svfiprintf_r+0x1ec>
 800f9de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9e2:	f04f 0901 	mov.w	r9, #1
 800f9e6:	4623      	mov	r3, r4
 800f9e8:	469a      	mov	sl, r3
 800f9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9ee:	b10a      	cbz	r2, 800f9f4 <_svfiprintf_r+0x5c>
 800f9f0:	2a25      	cmp	r2, #37	; 0x25
 800f9f2:	d1f9      	bne.n	800f9e8 <_svfiprintf_r+0x50>
 800f9f4:	ebba 0b04 	subs.w	fp, sl, r4
 800f9f8:	d00b      	beq.n	800fa12 <_svfiprintf_r+0x7a>
 800f9fa:	465b      	mov	r3, fp
 800f9fc:	4622      	mov	r2, r4
 800f9fe:	4629      	mov	r1, r5
 800fa00:	4638      	mov	r0, r7
 800fa02:	f7ff ff6e 	bl	800f8e2 <__ssputs_r>
 800fa06:	3001      	adds	r0, #1
 800fa08:	f000 80aa 	beq.w	800fb60 <_svfiprintf_r+0x1c8>
 800fa0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa0e:	445a      	add	r2, fp
 800fa10:	9209      	str	r2, [sp, #36]	; 0x24
 800fa12:	f89a 3000 	ldrb.w	r3, [sl]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	f000 80a2 	beq.w	800fb60 <_svfiprintf_r+0x1c8>
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa26:	f10a 0a01 	add.w	sl, sl, #1
 800fa2a:	9304      	str	r3, [sp, #16]
 800fa2c:	9307      	str	r3, [sp, #28]
 800fa2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa32:	931a      	str	r3, [sp, #104]	; 0x68
 800fa34:	4654      	mov	r4, sl
 800fa36:	2205      	movs	r2, #5
 800fa38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa3c:	4851      	ldr	r0, [pc, #324]	; (800fb84 <_svfiprintf_r+0x1ec>)
 800fa3e:	f7f0 fbcf 	bl	80001e0 <memchr>
 800fa42:	9a04      	ldr	r2, [sp, #16]
 800fa44:	b9d8      	cbnz	r0, 800fa7e <_svfiprintf_r+0xe6>
 800fa46:	06d0      	lsls	r0, r2, #27
 800fa48:	bf44      	itt	mi
 800fa4a:	2320      	movmi	r3, #32
 800fa4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa50:	0711      	lsls	r1, r2, #28
 800fa52:	bf44      	itt	mi
 800fa54:	232b      	movmi	r3, #43	; 0x2b
 800fa56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa5a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa5e:	2b2a      	cmp	r3, #42	; 0x2a
 800fa60:	d015      	beq.n	800fa8e <_svfiprintf_r+0xf6>
 800fa62:	9a07      	ldr	r2, [sp, #28]
 800fa64:	4654      	mov	r4, sl
 800fa66:	2000      	movs	r0, #0
 800fa68:	f04f 0c0a 	mov.w	ip, #10
 800fa6c:	4621      	mov	r1, r4
 800fa6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa72:	3b30      	subs	r3, #48	; 0x30
 800fa74:	2b09      	cmp	r3, #9
 800fa76:	d94e      	bls.n	800fb16 <_svfiprintf_r+0x17e>
 800fa78:	b1b0      	cbz	r0, 800faa8 <_svfiprintf_r+0x110>
 800fa7a:	9207      	str	r2, [sp, #28]
 800fa7c:	e014      	b.n	800faa8 <_svfiprintf_r+0x110>
 800fa7e:	eba0 0308 	sub.w	r3, r0, r8
 800fa82:	fa09 f303 	lsl.w	r3, r9, r3
 800fa86:	4313      	orrs	r3, r2
 800fa88:	9304      	str	r3, [sp, #16]
 800fa8a:	46a2      	mov	sl, r4
 800fa8c:	e7d2      	b.n	800fa34 <_svfiprintf_r+0x9c>
 800fa8e:	9b03      	ldr	r3, [sp, #12]
 800fa90:	1d19      	adds	r1, r3, #4
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	9103      	str	r1, [sp, #12]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	bfbb      	ittet	lt
 800fa9a:	425b      	neglt	r3, r3
 800fa9c:	f042 0202 	orrlt.w	r2, r2, #2
 800faa0:	9307      	strge	r3, [sp, #28]
 800faa2:	9307      	strlt	r3, [sp, #28]
 800faa4:	bfb8      	it	lt
 800faa6:	9204      	strlt	r2, [sp, #16]
 800faa8:	7823      	ldrb	r3, [r4, #0]
 800faaa:	2b2e      	cmp	r3, #46	; 0x2e
 800faac:	d10c      	bne.n	800fac8 <_svfiprintf_r+0x130>
 800faae:	7863      	ldrb	r3, [r4, #1]
 800fab0:	2b2a      	cmp	r3, #42	; 0x2a
 800fab2:	d135      	bne.n	800fb20 <_svfiprintf_r+0x188>
 800fab4:	9b03      	ldr	r3, [sp, #12]
 800fab6:	1d1a      	adds	r2, r3, #4
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	9203      	str	r2, [sp, #12]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	bfb8      	it	lt
 800fac0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fac4:	3402      	adds	r4, #2
 800fac6:	9305      	str	r3, [sp, #20]
 800fac8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fb94 <_svfiprintf_r+0x1fc>
 800facc:	7821      	ldrb	r1, [r4, #0]
 800face:	2203      	movs	r2, #3
 800fad0:	4650      	mov	r0, sl
 800fad2:	f7f0 fb85 	bl	80001e0 <memchr>
 800fad6:	b140      	cbz	r0, 800faea <_svfiprintf_r+0x152>
 800fad8:	2340      	movs	r3, #64	; 0x40
 800fada:	eba0 000a 	sub.w	r0, r0, sl
 800fade:	fa03 f000 	lsl.w	r0, r3, r0
 800fae2:	9b04      	ldr	r3, [sp, #16]
 800fae4:	4303      	orrs	r3, r0
 800fae6:	3401      	adds	r4, #1
 800fae8:	9304      	str	r3, [sp, #16]
 800faea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faee:	4826      	ldr	r0, [pc, #152]	; (800fb88 <_svfiprintf_r+0x1f0>)
 800faf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800faf4:	2206      	movs	r2, #6
 800faf6:	f7f0 fb73 	bl	80001e0 <memchr>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	d038      	beq.n	800fb70 <_svfiprintf_r+0x1d8>
 800fafe:	4b23      	ldr	r3, [pc, #140]	; (800fb8c <_svfiprintf_r+0x1f4>)
 800fb00:	bb1b      	cbnz	r3, 800fb4a <_svfiprintf_r+0x1b2>
 800fb02:	9b03      	ldr	r3, [sp, #12]
 800fb04:	3307      	adds	r3, #7
 800fb06:	f023 0307 	bic.w	r3, r3, #7
 800fb0a:	3308      	adds	r3, #8
 800fb0c:	9303      	str	r3, [sp, #12]
 800fb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb10:	4433      	add	r3, r6
 800fb12:	9309      	str	r3, [sp, #36]	; 0x24
 800fb14:	e767      	b.n	800f9e6 <_svfiprintf_r+0x4e>
 800fb16:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb1a:	460c      	mov	r4, r1
 800fb1c:	2001      	movs	r0, #1
 800fb1e:	e7a5      	b.n	800fa6c <_svfiprintf_r+0xd4>
 800fb20:	2300      	movs	r3, #0
 800fb22:	3401      	adds	r4, #1
 800fb24:	9305      	str	r3, [sp, #20]
 800fb26:	4619      	mov	r1, r3
 800fb28:	f04f 0c0a 	mov.w	ip, #10
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb32:	3a30      	subs	r2, #48	; 0x30
 800fb34:	2a09      	cmp	r2, #9
 800fb36:	d903      	bls.n	800fb40 <_svfiprintf_r+0x1a8>
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d0c5      	beq.n	800fac8 <_svfiprintf_r+0x130>
 800fb3c:	9105      	str	r1, [sp, #20]
 800fb3e:	e7c3      	b.n	800fac8 <_svfiprintf_r+0x130>
 800fb40:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb44:	4604      	mov	r4, r0
 800fb46:	2301      	movs	r3, #1
 800fb48:	e7f0      	b.n	800fb2c <_svfiprintf_r+0x194>
 800fb4a:	ab03      	add	r3, sp, #12
 800fb4c:	9300      	str	r3, [sp, #0]
 800fb4e:	462a      	mov	r2, r5
 800fb50:	4b0f      	ldr	r3, [pc, #60]	; (800fb90 <_svfiprintf_r+0x1f8>)
 800fb52:	a904      	add	r1, sp, #16
 800fb54:	4638      	mov	r0, r7
 800fb56:	f7fc fad3 	bl	800c100 <_printf_float>
 800fb5a:	1c42      	adds	r2, r0, #1
 800fb5c:	4606      	mov	r6, r0
 800fb5e:	d1d6      	bne.n	800fb0e <_svfiprintf_r+0x176>
 800fb60:	89ab      	ldrh	r3, [r5, #12]
 800fb62:	065b      	lsls	r3, r3, #25
 800fb64:	f53f af2c 	bmi.w	800f9c0 <_svfiprintf_r+0x28>
 800fb68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb6a:	b01d      	add	sp, #116	; 0x74
 800fb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb70:	ab03      	add	r3, sp, #12
 800fb72:	9300      	str	r3, [sp, #0]
 800fb74:	462a      	mov	r2, r5
 800fb76:	4b06      	ldr	r3, [pc, #24]	; (800fb90 <_svfiprintf_r+0x1f8>)
 800fb78:	a904      	add	r1, sp, #16
 800fb7a:	4638      	mov	r0, r7
 800fb7c:	f7fc fd64 	bl	800c648 <_printf_i>
 800fb80:	e7eb      	b.n	800fb5a <_svfiprintf_r+0x1c2>
 800fb82:	bf00      	nop
 800fb84:	08010bdc 	.word	0x08010bdc
 800fb88:	08010be6 	.word	0x08010be6
 800fb8c:	0800c101 	.word	0x0800c101
 800fb90:	0800f8e3 	.word	0x0800f8e3
 800fb94:	08010be2 	.word	0x08010be2

0800fb98 <nan>:
 800fb98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fba0 <nan+0x8>
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop
 800fba0:	00000000 	.word	0x00000000
 800fba4:	7ff80000 	.word	0x7ff80000

0800fba8 <strncmp>:
 800fba8:	b510      	push	{r4, lr}
 800fbaa:	b17a      	cbz	r2, 800fbcc <strncmp+0x24>
 800fbac:	4603      	mov	r3, r0
 800fbae:	3901      	subs	r1, #1
 800fbb0:	1884      	adds	r4, r0, r2
 800fbb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fbb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fbba:	4290      	cmp	r0, r2
 800fbbc:	d101      	bne.n	800fbc2 <strncmp+0x1a>
 800fbbe:	42a3      	cmp	r3, r4
 800fbc0:	d101      	bne.n	800fbc6 <strncmp+0x1e>
 800fbc2:	1a80      	subs	r0, r0, r2
 800fbc4:	bd10      	pop	{r4, pc}
 800fbc6:	2800      	cmp	r0, #0
 800fbc8:	d1f3      	bne.n	800fbb2 <strncmp+0xa>
 800fbca:	e7fa      	b.n	800fbc2 <strncmp+0x1a>
 800fbcc:	4610      	mov	r0, r2
 800fbce:	e7f9      	b.n	800fbc4 <strncmp+0x1c>

0800fbd0 <strnlen>:
 800fbd0:	b510      	push	{r4, lr}
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	4401      	add	r1, r0
 800fbd6:	428a      	cmp	r2, r1
 800fbd8:	4613      	mov	r3, r2
 800fbda:	d003      	beq.n	800fbe4 <strnlen+0x14>
 800fbdc:	781c      	ldrb	r4, [r3, #0]
 800fbde:	3201      	adds	r2, #1
 800fbe0:	2c00      	cmp	r4, #0
 800fbe2:	d1f8      	bne.n	800fbd6 <strnlen+0x6>
 800fbe4:	1a18      	subs	r0, r3, r0
 800fbe6:	bd10      	pop	{r4, pc}

0800fbe8 <__ascii_wctomb>:
 800fbe8:	b149      	cbz	r1, 800fbfe <__ascii_wctomb+0x16>
 800fbea:	2aff      	cmp	r2, #255	; 0xff
 800fbec:	bf85      	ittet	hi
 800fbee:	238a      	movhi	r3, #138	; 0x8a
 800fbf0:	6003      	strhi	r3, [r0, #0]
 800fbf2:	700a      	strbls	r2, [r1, #0]
 800fbf4:	f04f 30ff 	movhi.w	r0, #4294967295
 800fbf8:	bf98      	it	ls
 800fbfa:	2001      	movls	r0, #1
 800fbfc:	4770      	bx	lr
 800fbfe:	4608      	mov	r0, r1
 800fc00:	4770      	bx	lr
	...

0800fc04 <__assert_func>:
 800fc04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc06:	4614      	mov	r4, r2
 800fc08:	461a      	mov	r2, r3
 800fc0a:	4b09      	ldr	r3, [pc, #36]	; (800fc30 <__assert_func+0x2c>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	4605      	mov	r5, r0
 800fc10:	68d8      	ldr	r0, [r3, #12]
 800fc12:	b14c      	cbz	r4, 800fc28 <__assert_func+0x24>
 800fc14:	4b07      	ldr	r3, [pc, #28]	; (800fc34 <__assert_func+0x30>)
 800fc16:	9100      	str	r1, [sp, #0]
 800fc18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc1c:	4906      	ldr	r1, [pc, #24]	; (800fc38 <__assert_func+0x34>)
 800fc1e:	462b      	mov	r3, r5
 800fc20:	f000 f80e 	bl	800fc40 <fiprintf>
 800fc24:	f000 fa84 	bl	8010130 <abort>
 800fc28:	4b04      	ldr	r3, [pc, #16]	; (800fc3c <__assert_func+0x38>)
 800fc2a:	461c      	mov	r4, r3
 800fc2c:	e7f3      	b.n	800fc16 <__assert_func+0x12>
 800fc2e:	bf00      	nop
 800fc30:	2000002c 	.word	0x2000002c
 800fc34:	08010bed 	.word	0x08010bed
 800fc38:	08010bfa 	.word	0x08010bfa
 800fc3c:	08010c28 	.word	0x08010c28

0800fc40 <fiprintf>:
 800fc40:	b40e      	push	{r1, r2, r3}
 800fc42:	b503      	push	{r0, r1, lr}
 800fc44:	4601      	mov	r1, r0
 800fc46:	ab03      	add	r3, sp, #12
 800fc48:	4805      	ldr	r0, [pc, #20]	; (800fc60 <fiprintf+0x20>)
 800fc4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc4e:	6800      	ldr	r0, [r0, #0]
 800fc50:	9301      	str	r3, [sp, #4]
 800fc52:	f000 f87d 	bl	800fd50 <_vfiprintf_r>
 800fc56:	b002      	add	sp, #8
 800fc58:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc5c:	b003      	add	sp, #12
 800fc5e:	4770      	bx	lr
 800fc60:	2000002c 	.word	0x2000002c

0800fc64 <__retarget_lock_init_recursive>:
 800fc64:	4770      	bx	lr

0800fc66 <__retarget_lock_acquire_recursive>:
 800fc66:	4770      	bx	lr

0800fc68 <__retarget_lock_release_recursive>:
 800fc68:	4770      	bx	lr

0800fc6a <memmove>:
 800fc6a:	4288      	cmp	r0, r1
 800fc6c:	b510      	push	{r4, lr}
 800fc6e:	eb01 0402 	add.w	r4, r1, r2
 800fc72:	d902      	bls.n	800fc7a <memmove+0x10>
 800fc74:	4284      	cmp	r4, r0
 800fc76:	4623      	mov	r3, r4
 800fc78:	d807      	bhi.n	800fc8a <memmove+0x20>
 800fc7a:	1e43      	subs	r3, r0, #1
 800fc7c:	42a1      	cmp	r1, r4
 800fc7e:	d008      	beq.n	800fc92 <memmove+0x28>
 800fc80:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc84:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc88:	e7f8      	b.n	800fc7c <memmove+0x12>
 800fc8a:	4402      	add	r2, r0
 800fc8c:	4601      	mov	r1, r0
 800fc8e:	428a      	cmp	r2, r1
 800fc90:	d100      	bne.n	800fc94 <memmove+0x2a>
 800fc92:	bd10      	pop	{r4, pc}
 800fc94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc98:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc9c:	e7f7      	b.n	800fc8e <memmove+0x24>

0800fc9e <_realloc_r>:
 800fc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca2:	4680      	mov	r8, r0
 800fca4:	4614      	mov	r4, r2
 800fca6:	460e      	mov	r6, r1
 800fca8:	b921      	cbnz	r1, 800fcb4 <_realloc_r+0x16>
 800fcaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcae:	4611      	mov	r1, r2
 800fcb0:	f7fc b912 	b.w	800bed8 <_malloc_r>
 800fcb4:	b92a      	cbnz	r2, 800fcc2 <_realloc_r+0x24>
 800fcb6:	f7fc f8a3 	bl	800be00 <_free_r>
 800fcba:	4625      	mov	r5, r4
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc2:	f000 fc59 	bl	8010578 <_malloc_usable_size_r>
 800fcc6:	4284      	cmp	r4, r0
 800fcc8:	4607      	mov	r7, r0
 800fcca:	d802      	bhi.n	800fcd2 <_realloc_r+0x34>
 800fccc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fcd0:	d812      	bhi.n	800fcf8 <_realloc_r+0x5a>
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	4640      	mov	r0, r8
 800fcd6:	f7fc f8ff 	bl	800bed8 <_malloc_r>
 800fcda:	4605      	mov	r5, r0
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	d0ed      	beq.n	800fcbc <_realloc_r+0x1e>
 800fce0:	42bc      	cmp	r4, r7
 800fce2:	4622      	mov	r2, r4
 800fce4:	4631      	mov	r1, r6
 800fce6:	bf28      	it	cs
 800fce8:	463a      	movcs	r2, r7
 800fcea:	f7fc f873 	bl	800bdd4 <memcpy>
 800fcee:	4631      	mov	r1, r6
 800fcf0:	4640      	mov	r0, r8
 800fcf2:	f7fc f885 	bl	800be00 <_free_r>
 800fcf6:	e7e1      	b.n	800fcbc <_realloc_r+0x1e>
 800fcf8:	4635      	mov	r5, r6
 800fcfa:	e7df      	b.n	800fcbc <_realloc_r+0x1e>

0800fcfc <__sfputc_r>:
 800fcfc:	6893      	ldr	r3, [r2, #8]
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	b410      	push	{r4}
 800fd04:	6093      	str	r3, [r2, #8]
 800fd06:	da08      	bge.n	800fd1a <__sfputc_r+0x1e>
 800fd08:	6994      	ldr	r4, [r2, #24]
 800fd0a:	42a3      	cmp	r3, r4
 800fd0c:	db01      	blt.n	800fd12 <__sfputc_r+0x16>
 800fd0e:	290a      	cmp	r1, #10
 800fd10:	d103      	bne.n	800fd1a <__sfputc_r+0x1e>
 800fd12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd16:	f000 b94b 	b.w	800ffb0 <__swbuf_r>
 800fd1a:	6813      	ldr	r3, [r2, #0]
 800fd1c:	1c58      	adds	r0, r3, #1
 800fd1e:	6010      	str	r0, [r2, #0]
 800fd20:	7019      	strb	r1, [r3, #0]
 800fd22:	4608      	mov	r0, r1
 800fd24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd28:	4770      	bx	lr

0800fd2a <__sfputs_r>:
 800fd2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd2c:	4606      	mov	r6, r0
 800fd2e:	460f      	mov	r7, r1
 800fd30:	4614      	mov	r4, r2
 800fd32:	18d5      	adds	r5, r2, r3
 800fd34:	42ac      	cmp	r4, r5
 800fd36:	d101      	bne.n	800fd3c <__sfputs_r+0x12>
 800fd38:	2000      	movs	r0, #0
 800fd3a:	e007      	b.n	800fd4c <__sfputs_r+0x22>
 800fd3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd40:	463a      	mov	r2, r7
 800fd42:	4630      	mov	r0, r6
 800fd44:	f7ff ffda 	bl	800fcfc <__sfputc_r>
 800fd48:	1c43      	adds	r3, r0, #1
 800fd4a:	d1f3      	bne.n	800fd34 <__sfputs_r+0xa>
 800fd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd50 <_vfiprintf_r>:
 800fd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	460d      	mov	r5, r1
 800fd56:	b09d      	sub	sp, #116	; 0x74
 800fd58:	4614      	mov	r4, r2
 800fd5a:	4698      	mov	r8, r3
 800fd5c:	4606      	mov	r6, r0
 800fd5e:	b118      	cbz	r0, 800fd68 <_vfiprintf_r+0x18>
 800fd60:	6983      	ldr	r3, [r0, #24]
 800fd62:	b90b      	cbnz	r3, 800fd68 <_vfiprintf_r+0x18>
 800fd64:	f000 fb06 	bl	8010374 <__sinit>
 800fd68:	4b89      	ldr	r3, [pc, #548]	; (800ff90 <_vfiprintf_r+0x240>)
 800fd6a:	429d      	cmp	r5, r3
 800fd6c:	d11b      	bne.n	800fda6 <_vfiprintf_r+0x56>
 800fd6e:	6875      	ldr	r5, [r6, #4]
 800fd70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd72:	07d9      	lsls	r1, r3, #31
 800fd74:	d405      	bmi.n	800fd82 <_vfiprintf_r+0x32>
 800fd76:	89ab      	ldrh	r3, [r5, #12]
 800fd78:	059a      	lsls	r2, r3, #22
 800fd7a:	d402      	bmi.n	800fd82 <_vfiprintf_r+0x32>
 800fd7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd7e:	f7ff ff72 	bl	800fc66 <__retarget_lock_acquire_recursive>
 800fd82:	89ab      	ldrh	r3, [r5, #12]
 800fd84:	071b      	lsls	r3, r3, #28
 800fd86:	d501      	bpl.n	800fd8c <_vfiprintf_r+0x3c>
 800fd88:	692b      	ldr	r3, [r5, #16]
 800fd8a:	b9eb      	cbnz	r3, 800fdc8 <_vfiprintf_r+0x78>
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f000 f960 	bl	8010054 <__swsetup_r>
 800fd94:	b1c0      	cbz	r0, 800fdc8 <_vfiprintf_r+0x78>
 800fd96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd98:	07dc      	lsls	r4, r3, #31
 800fd9a:	d50e      	bpl.n	800fdba <_vfiprintf_r+0x6a>
 800fd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fda0:	b01d      	add	sp, #116	; 0x74
 800fda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda6:	4b7b      	ldr	r3, [pc, #492]	; (800ff94 <_vfiprintf_r+0x244>)
 800fda8:	429d      	cmp	r5, r3
 800fdaa:	d101      	bne.n	800fdb0 <_vfiprintf_r+0x60>
 800fdac:	68b5      	ldr	r5, [r6, #8]
 800fdae:	e7df      	b.n	800fd70 <_vfiprintf_r+0x20>
 800fdb0:	4b79      	ldr	r3, [pc, #484]	; (800ff98 <_vfiprintf_r+0x248>)
 800fdb2:	429d      	cmp	r5, r3
 800fdb4:	bf08      	it	eq
 800fdb6:	68f5      	ldreq	r5, [r6, #12]
 800fdb8:	e7da      	b.n	800fd70 <_vfiprintf_r+0x20>
 800fdba:	89ab      	ldrh	r3, [r5, #12]
 800fdbc:	0598      	lsls	r0, r3, #22
 800fdbe:	d4ed      	bmi.n	800fd9c <_vfiprintf_r+0x4c>
 800fdc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdc2:	f7ff ff51 	bl	800fc68 <__retarget_lock_release_recursive>
 800fdc6:	e7e9      	b.n	800fd9c <_vfiprintf_r+0x4c>
 800fdc8:	2300      	movs	r3, #0
 800fdca:	9309      	str	r3, [sp, #36]	; 0x24
 800fdcc:	2320      	movs	r3, #32
 800fdce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdd6:	2330      	movs	r3, #48	; 0x30
 800fdd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ff9c <_vfiprintf_r+0x24c>
 800fddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fde0:	f04f 0901 	mov.w	r9, #1
 800fde4:	4623      	mov	r3, r4
 800fde6:	469a      	mov	sl, r3
 800fde8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdec:	b10a      	cbz	r2, 800fdf2 <_vfiprintf_r+0xa2>
 800fdee:	2a25      	cmp	r2, #37	; 0x25
 800fdf0:	d1f9      	bne.n	800fde6 <_vfiprintf_r+0x96>
 800fdf2:	ebba 0b04 	subs.w	fp, sl, r4
 800fdf6:	d00b      	beq.n	800fe10 <_vfiprintf_r+0xc0>
 800fdf8:	465b      	mov	r3, fp
 800fdfa:	4622      	mov	r2, r4
 800fdfc:	4629      	mov	r1, r5
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f7ff ff93 	bl	800fd2a <__sfputs_r>
 800fe04:	3001      	adds	r0, #1
 800fe06:	f000 80aa 	beq.w	800ff5e <_vfiprintf_r+0x20e>
 800fe0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe0c:	445a      	add	r2, fp
 800fe0e:	9209      	str	r2, [sp, #36]	; 0x24
 800fe10:	f89a 3000 	ldrb.w	r3, [sl]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	f000 80a2 	beq.w	800ff5e <_vfiprintf_r+0x20e>
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe24:	f10a 0a01 	add.w	sl, sl, #1
 800fe28:	9304      	str	r3, [sp, #16]
 800fe2a:	9307      	str	r3, [sp, #28]
 800fe2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe30:	931a      	str	r3, [sp, #104]	; 0x68
 800fe32:	4654      	mov	r4, sl
 800fe34:	2205      	movs	r2, #5
 800fe36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe3a:	4858      	ldr	r0, [pc, #352]	; (800ff9c <_vfiprintf_r+0x24c>)
 800fe3c:	f7f0 f9d0 	bl	80001e0 <memchr>
 800fe40:	9a04      	ldr	r2, [sp, #16]
 800fe42:	b9d8      	cbnz	r0, 800fe7c <_vfiprintf_r+0x12c>
 800fe44:	06d1      	lsls	r1, r2, #27
 800fe46:	bf44      	itt	mi
 800fe48:	2320      	movmi	r3, #32
 800fe4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe4e:	0713      	lsls	r3, r2, #28
 800fe50:	bf44      	itt	mi
 800fe52:	232b      	movmi	r3, #43	; 0x2b
 800fe54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe58:	f89a 3000 	ldrb.w	r3, [sl]
 800fe5c:	2b2a      	cmp	r3, #42	; 0x2a
 800fe5e:	d015      	beq.n	800fe8c <_vfiprintf_r+0x13c>
 800fe60:	9a07      	ldr	r2, [sp, #28]
 800fe62:	4654      	mov	r4, sl
 800fe64:	2000      	movs	r0, #0
 800fe66:	f04f 0c0a 	mov.w	ip, #10
 800fe6a:	4621      	mov	r1, r4
 800fe6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe70:	3b30      	subs	r3, #48	; 0x30
 800fe72:	2b09      	cmp	r3, #9
 800fe74:	d94e      	bls.n	800ff14 <_vfiprintf_r+0x1c4>
 800fe76:	b1b0      	cbz	r0, 800fea6 <_vfiprintf_r+0x156>
 800fe78:	9207      	str	r2, [sp, #28]
 800fe7a:	e014      	b.n	800fea6 <_vfiprintf_r+0x156>
 800fe7c:	eba0 0308 	sub.w	r3, r0, r8
 800fe80:	fa09 f303 	lsl.w	r3, r9, r3
 800fe84:	4313      	orrs	r3, r2
 800fe86:	9304      	str	r3, [sp, #16]
 800fe88:	46a2      	mov	sl, r4
 800fe8a:	e7d2      	b.n	800fe32 <_vfiprintf_r+0xe2>
 800fe8c:	9b03      	ldr	r3, [sp, #12]
 800fe8e:	1d19      	adds	r1, r3, #4
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	9103      	str	r1, [sp, #12]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	bfbb      	ittet	lt
 800fe98:	425b      	neglt	r3, r3
 800fe9a:	f042 0202 	orrlt.w	r2, r2, #2
 800fe9e:	9307      	strge	r3, [sp, #28]
 800fea0:	9307      	strlt	r3, [sp, #28]
 800fea2:	bfb8      	it	lt
 800fea4:	9204      	strlt	r2, [sp, #16]
 800fea6:	7823      	ldrb	r3, [r4, #0]
 800fea8:	2b2e      	cmp	r3, #46	; 0x2e
 800feaa:	d10c      	bne.n	800fec6 <_vfiprintf_r+0x176>
 800feac:	7863      	ldrb	r3, [r4, #1]
 800feae:	2b2a      	cmp	r3, #42	; 0x2a
 800feb0:	d135      	bne.n	800ff1e <_vfiprintf_r+0x1ce>
 800feb2:	9b03      	ldr	r3, [sp, #12]
 800feb4:	1d1a      	adds	r2, r3, #4
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	9203      	str	r2, [sp, #12]
 800feba:	2b00      	cmp	r3, #0
 800febc:	bfb8      	it	lt
 800febe:	f04f 33ff 	movlt.w	r3, #4294967295
 800fec2:	3402      	adds	r4, #2
 800fec4:	9305      	str	r3, [sp, #20]
 800fec6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ffac <_vfiprintf_r+0x25c>
 800feca:	7821      	ldrb	r1, [r4, #0]
 800fecc:	2203      	movs	r2, #3
 800fece:	4650      	mov	r0, sl
 800fed0:	f7f0 f986 	bl	80001e0 <memchr>
 800fed4:	b140      	cbz	r0, 800fee8 <_vfiprintf_r+0x198>
 800fed6:	2340      	movs	r3, #64	; 0x40
 800fed8:	eba0 000a 	sub.w	r0, r0, sl
 800fedc:	fa03 f000 	lsl.w	r0, r3, r0
 800fee0:	9b04      	ldr	r3, [sp, #16]
 800fee2:	4303      	orrs	r3, r0
 800fee4:	3401      	adds	r4, #1
 800fee6:	9304      	str	r3, [sp, #16]
 800fee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feec:	482c      	ldr	r0, [pc, #176]	; (800ffa0 <_vfiprintf_r+0x250>)
 800feee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fef2:	2206      	movs	r2, #6
 800fef4:	f7f0 f974 	bl	80001e0 <memchr>
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d03f      	beq.n	800ff7c <_vfiprintf_r+0x22c>
 800fefc:	4b29      	ldr	r3, [pc, #164]	; (800ffa4 <_vfiprintf_r+0x254>)
 800fefe:	bb1b      	cbnz	r3, 800ff48 <_vfiprintf_r+0x1f8>
 800ff00:	9b03      	ldr	r3, [sp, #12]
 800ff02:	3307      	adds	r3, #7
 800ff04:	f023 0307 	bic.w	r3, r3, #7
 800ff08:	3308      	adds	r3, #8
 800ff0a:	9303      	str	r3, [sp, #12]
 800ff0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff0e:	443b      	add	r3, r7
 800ff10:	9309      	str	r3, [sp, #36]	; 0x24
 800ff12:	e767      	b.n	800fde4 <_vfiprintf_r+0x94>
 800ff14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff18:	460c      	mov	r4, r1
 800ff1a:	2001      	movs	r0, #1
 800ff1c:	e7a5      	b.n	800fe6a <_vfiprintf_r+0x11a>
 800ff1e:	2300      	movs	r3, #0
 800ff20:	3401      	adds	r4, #1
 800ff22:	9305      	str	r3, [sp, #20]
 800ff24:	4619      	mov	r1, r3
 800ff26:	f04f 0c0a 	mov.w	ip, #10
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff30:	3a30      	subs	r2, #48	; 0x30
 800ff32:	2a09      	cmp	r2, #9
 800ff34:	d903      	bls.n	800ff3e <_vfiprintf_r+0x1ee>
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d0c5      	beq.n	800fec6 <_vfiprintf_r+0x176>
 800ff3a:	9105      	str	r1, [sp, #20]
 800ff3c:	e7c3      	b.n	800fec6 <_vfiprintf_r+0x176>
 800ff3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff42:	4604      	mov	r4, r0
 800ff44:	2301      	movs	r3, #1
 800ff46:	e7f0      	b.n	800ff2a <_vfiprintf_r+0x1da>
 800ff48:	ab03      	add	r3, sp, #12
 800ff4a:	9300      	str	r3, [sp, #0]
 800ff4c:	462a      	mov	r2, r5
 800ff4e:	4b16      	ldr	r3, [pc, #88]	; (800ffa8 <_vfiprintf_r+0x258>)
 800ff50:	a904      	add	r1, sp, #16
 800ff52:	4630      	mov	r0, r6
 800ff54:	f7fc f8d4 	bl	800c100 <_printf_float>
 800ff58:	4607      	mov	r7, r0
 800ff5a:	1c78      	adds	r0, r7, #1
 800ff5c:	d1d6      	bne.n	800ff0c <_vfiprintf_r+0x1bc>
 800ff5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff60:	07d9      	lsls	r1, r3, #31
 800ff62:	d405      	bmi.n	800ff70 <_vfiprintf_r+0x220>
 800ff64:	89ab      	ldrh	r3, [r5, #12]
 800ff66:	059a      	lsls	r2, r3, #22
 800ff68:	d402      	bmi.n	800ff70 <_vfiprintf_r+0x220>
 800ff6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff6c:	f7ff fe7c 	bl	800fc68 <__retarget_lock_release_recursive>
 800ff70:	89ab      	ldrh	r3, [r5, #12]
 800ff72:	065b      	lsls	r3, r3, #25
 800ff74:	f53f af12 	bmi.w	800fd9c <_vfiprintf_r+0x4c>
 800ff78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff7a:	e711      	b.n	800fda0 <_vfiprintf_r+0x50>
 800ff7c:	ab03      	add	r3, sp, #12
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	462a      	mov	r2, r5
 800ff82:	4b09      	ldr	r3, [pc, #36]	; (800ffa8 <_vfiprintf_r+0x258>)
 800ff84:	a904      	add	r1, sp, #16
 800ff86:	4630      	mov	r0, r6
 800ff88:	f7fc fb5e 	bl	800c648 <_printf_i>
 800ff8c:	e7e4      	b.n	800ff58 <_vfiprintf_r+0x208>
 800ff8e:	bf00      	nop
 800ff90:	08010c4c 	.word	0x08010c4c
 800ff94:	08010c6c 	.word	0x08010c6c
 800ff98:	08010c2c 	.word	0x08010c2c
 800ff9c:	08010bdc 	.word	0x08010bdc
 800ffa0:	08010be6 	.word	0x08010be6
 800ffa4:	0800c101 	.word	0x0800c101
 800ffa8:	0800fd2b 	.word	0x0800fd2b
 800ffac:	08010be2 	.word	0x08010be2

0800ffb0 <__swbuf_r>:
 800ffb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb2:	460e      	mov	r6, r1
 800ffb4:	4614      	mov	r4, r2
 800ffb6:	4605      	mov	r5, r0
 800ffb8:	b118      	cbz	r0, 800ffc2 <__swbuf_r+0x12>
 800ffba:	6983      	ldr	r3, [r0, #24]
 800ffbc:	b90b      	cbnz	r3, 800ffc2 <__swbuf_r+0x12>
 800ffbe:	f000 f9d9 	bl	8010374 <__sinit>
 800ffc2:	4b21      	ldr	r3, [pc, #132]	; (8010048 <__swbuf_r+0x98>)
 800ffc4:	429c      	cmp	r4, r3
 800ffc6:	d12b      	bne.n	8010020 <__swbuf_r+0x70>
 800ffc8:	686c      	ldr	r4, [r5, #4]
 800ffca:	69a3      	ldr	r3, [r4, #24]
 800ffcc:	60a3      	str	r3, [r4, #8]
 800ffce:	89a3      	ldrh	r3, [r4, #12]
 800ffd0:	071a      	lsls	r2, r3, #28
 800ffd2:	d52f      	bpl.n	8010034 <__swbuf_r+0x84>
 800ffd4:	6923      	ldr	r3, [r4, #16]
 800ffd6:	b36b      	cbz	r3, 8010034 <__swbuf_r+0x84>
 800ffd8:	6923      	ldr	r3, [r4, #16]
 800ffda:	6820      	ldr	r0, [r4, #0]
 800ffdc:	1ac0      	subs	r0, r0, r3
 800ffde:	6963      	ldr	r3, [r4, #20]
 800ffe0:	b2f6      	uxtb	r6, r6
 800ffe2:	4283      	cmp	r3, r0
 800ffe4:	4637      	mov	r7, r6
 800ffe6:	dc04      	bgt.n	800fff2 <__swbuf_r+0x42>
 800ffe8:	4621      	mov	r1, r4
 800ffea:	4628      	mov	r0, r5
 800ffec:	f000 f92e 	bl	801024c <_fflush_r>
 800fff0:	bb30      	cbnz	r0, 8010040 <__swbuf_r+0x90>
 800fff2:	68a3      	ldr	r3, [r4, #8]
 800fff4:	3b01      	subs	r3, #1
 800fff6:	60a3      	str	r3, [r4, #8]
 800fff8:	6823      	ldr	r3, [r4, #0]
 800fffa:	1c5a      	adds	r2, r3, #1
 800fffc:	6022      	str	r2, [r4, #0]
 800fffe:	701e      	strb	r6, [r3, #0]
 8010000:	6963      	ldr	r3, [r4, #20]
 8010002:	3001      	adds	r0, #1
 8010004:	4283      	cmp	r3, r0
 8010006:	d004      	beq.n	8010012 <__swbuf_r+0x62>
 8010008:	89a3      	ldrh	r3, [r4, #12]
 801000a:	07db      	lsls	r3, r3, #31
 801000c:	d506      	bpl.n	801001c <__swbuf_r+0x6c>
 801000e:	2e0a      	cmp	r6, #10
 8010010:	d104      	bne.n	801001c <__swbuf_r+0x6c>
 8010012:	4621      	mov	r1, r4
 8010014:	4628      	mov	r0, r5
 8010016:	f000 f919 	bl	801024c <_fflush_r>
 801001a:	b988      	cbnz	r0, 8010040 <__swbuf_r+0x90>
 801001c:	4638      	mov	r0, r7
 801001e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010020:	4b0a      	ldr	r3, [pc, #40]	; (801004c <__swbuf_r+0x9c>)
 8010022:	429c      	cmp	r4, r3
 8010024:	d101      	bne.n	801002a <__swbuf_r+0x7a>
 8010026:	68ac      	ldr	r4, [r5, #8]
 8010028:	e7cf      	b.n	800ffca <__swbuf_r+0x1a>
 801002a:	4b09      	ldr	r3, [pc, #36]	; (8010050 <__swbuf_r+0xa0>)
 801002c:	429c      	cmp	r4, r3
 801002e:	bf08      	it	eq
 8010030:	68ec      	ldreq	r4, [r5, #12]
 8010032:	e7ca      	b.n	800ffca <__swbuf_r+0x1a>
 8010034:	4621      	mov	r1, r4
 8010036:	4628      	mov	r0, r5
 8010038:	f000 f80c 	bl	8010054 <__swsetup_r>
 801003c:	2800      	cmp	r0, #0
 801003e:	d0cb      	beq.n	800ffd8 <__swbuf_r+0x28>
 8010040:	f04f 37ff 	mov.w	r7, #4294967295
 8010044:	e7ea      	b.n	801001c <__swbuf_r+0x6c>
 8010046:	bf00      	nop
 8010048:	08010c4c 	.word	0x08010c4c
 801004c:	08010c6c 	.word	0x08010c6c
 8010050:	08010c2c 	.word	0x08010c2c

08010054 <__swsetup_r>:
 8010054:	4b32      	ldr	r3, [pc, #200]	; (8010120 <__swsetup_r+0xcc>)
 8010056:	b570      	push	{r4, r5, r6, lr}
 8010058:	681d      	ldr	r5, [r3, #0]
 801005a:	4606      	mov	r6, r0
 801005c:	460c      	mov	r4, r1
 801005e:	b125      	cbz	r5, 801006a <__swsetup_r+0x16>
 8010060:	69ab      	ldr	r3, [r5, #24]
 8010062:	b913      	cbnz	r3, 801006a <__swsetup_r+0x16>
 8010064:	4628      	mov	r0, r5
 8010066:	f000 f985 	bl	8010374 <__sinit>
 801006a:	4b2e      	ldr	r3, [pc, #184]	; (8010124 <__swsetup_r+0xd0>)
 801006c:	429c      	cmp	r4, r3
 801006e:	d10f      	bne.n	8010090 <__swsetup_r+0x3c>
 8010070:	686c      	ldr	r4, [r5, #4]
 8010072:	89a3      	ldrh	r3, [r4, #12]
 8010074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010078:	0719      	lsls	r1, r3, #28
 801007a:	d42c      	bmi.n	80100d6 <__swsetup_r+0x82>
 801007c:	06dd      	lsls	r5, r3, #27
 801007e:	d411      	bmi.n	80100a4 <__swsetup_r+0x50>
 8010080:	2309      	movs	r3, #9
 8010082:	6033      	str	r3, [r6, #0]
 8010084:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010088:	81a3      	strh	r3, [r4, #12]
 801008a:	f04f 30ff 	mov.w	r0, #4294967295
 801008e:	e03e      	b.n	801010e <__swsetup_r+0xba>
 8010090:	4b25      	ldr	r3, [pc, #148]	; (8010128 <__swsetup_r+0xd4>)
 8010092:	429c      	cmp	r4, r3
 8010094:	d101      	bne.n	801009a <__swsetup_r+0x46>
 8010096:	68ac      	ldr	r4, [r5, #8]
 8010098:	e7eb      	b.n	8010072 <__swsetup_r+0x1e>
 801009a:	4b24      	ldr	r3, [pc, #144]	; (801012c <__swsetup_r+0xd8>)
 801009c:	429c      	cmp	r4, r3
 801009e:	bf08      	it	eq
 80100a0:	68ec      	ldreq	r4, [r5, #12]
 80100a2:	e7e6      	b.n	8010072 <__swsetup_r+0x1e>
 80100a4:	0758      	lsls	r0, r3, #29
 80100a6:	d512      	bpl.n	80100ce <__swsetup_r+0x7a>
 80100a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100aa:	b141      	cbz	r1, 80100be <__swsetup_r+0x6a>
 80100ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100b0:	4299      	cmp	r1, r3
 80100b2:	d002      	beq.n	80100ba <__swsetup_r+0x66>
 80100b4:	4630      	mov	r0, r6
 80100b6:	f7fb fea3 	bl	800be00 <_free_r>
 80100ba:	2300      	movs	r3, #0
 80100bc:	6363      	str	r3, [r4, #52]	; 0x34
 80100be:	89a3      	ldrh	r3, [r4, #12]
 80100c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100c4:	81a3      	strh	r3, [r4, #12]
 80100c6:	2300      	movs	r3, #0
 80100c8:	6063      	str	r3, [r4, #4]
 80100ca:	6923      	ldr	r3, [r4, #16]
 80100cc:	6023      	str	r3, [r4, #0]
 80100ce:	89a3      	ldrh	r3, [r4, #12]
 80100d0:	f043 0308 	orr.w	r3, r3, #8
 80100d4:	81a3      	strh	r3, [r4, #12]
 80100d6:	6923      	ldr	r3, [r4, #16]
 80100d8:	b94b      	cbnz	r3, 80100ee <__swsetup_r+0x9a>
 80100da:	89a3      	ldrh	r3, [r4, #12]
 80100dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80100e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100e4:	d003      	beq.n	80100ee <__swsetup_r+0x9a>
 80100e6:	4621      	mov	r1, r4
 80100e8:	4630      	mov	r0, r6
 80100ea:	f000 fa05 	bl	80104f8 <__smakebuf_r>
 80100ee:	89a0      	ldrh	r0, [r4, #12]
 80100f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100f4:	f010 0301 	ands.w	r3, r0, #1
 80100f8:	d00a      	beq.n	8010110 <__swsetup_r+0xbc>
 80100fa:	2300      	movs	r3, #0
 80100fc:	60a3      	str	r3, [r4, #8]
 80100fe:	6963      	ldr	r3, [r4, #20]
 8010100:	425b      	negs	r3, r3
 8010102:	61a3      	str	r3, [r4, #24]
 8010104:	6923      	ldr	r3, [r4, #16]
 8010106:	b943      	cbnz	r3, 801011a <__swsetup_r+0xc6>
 8010108:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801010c:	d1ba      	bne.n	8010084 <__swsetup_r+0x30>
 801010e:	bd70      	pop	{r4, r5, r6, pc}
 8010110:	0781      	lsls	r1, r0, #30
 8010112:	bf58      	it	pl
 8010114:	6963      	ldrpl	r3, [r4, #20]
 8010116:	60a3      	str	r3, [r4, #8]
 8010118:	e7f4      	b.n	8010104 <__swsetup_r+0xb0>
 801011a:	2000      	movs	r0, #0
 801011c:	e7f7      	b.n	801010e <__swsetup_r+0xba>
 801011e:	bf00      	nop
 8010120:	2000002c 	.word	0x2000002c
 8010124:	08010c4c 	.word	0x08010c4c
 8010128:	08010c6c 	.word	0x08010c6c
 801012c:	08010c2c 	.word	0x08010c2c

08010130 <abort>:
 8010130:	b508      	push	{r3, lr}
 8010132:	2006      	movs	r0, #6
 8010134:	f000 fa50 	bl	80105d8 <raise>
 8010138:	2001      	movs	r0, #1
 801013a:	f7f1 fe87 	bl	8001e4c <_exit>
	...

08010140 <__sflush_r>:
 8010140:	898a      	ldrh	r2, [r1, #12]
 8010142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010146:	4605      	mov	r5, r0
 8010148:	0710      	lsls	r0, r2, #28
 801014a:	460c      	mov	r4, r1
 801014c:	d458      	bmi.n	8010200 <__sflush_r+0xc0>
 801014e:	684b      	ldr	r3, [r1, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	dc05      	bgt.n	8010160 <__sflush_r+0x20>
 8010154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010156:	2b00      	cmp	r3, #0
 8010158:	dc02      	bgt.n	8010160 <__sflush_r+0x20>
 801015a:	2000      	movs	r0, #0
 801015c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010162:	2e00      	cmp	r6, #0
 8010164:	d0f9      	beq.n	801015a <__sflush_r+0x1a>
 8010166:	2300      	movs	r3, #0
 8010168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801016c:	682f      	ldr	r7, [r5, #0]
 801016e:	602b      	str	r3, [r5, #0]
 8010170:	d032      	beq.n	80101d8 <__sflush_r+0x98>
 8010172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010174:	89a3      	ldrh	r3, [r4, #12]
 8010176:	075a      	lsls	r2, r3, #29
 8010178:	d505      	bpl.n	8010186 <__sflush_r+0x46>
 801017a:	6863      	ldr	r3, [r4, #4]
 801017c:	1ac0      	subs	r0, r0, r3
 801017e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010180:	b10b      	cbz	r3, 8010186 <__sflush_r+0x46>
 8010182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010184:	1ac0      	subs	r0, r0, r3
 8010186:	2300      	movs	r3, #0
 8010188:	4602      	mov	r2, r0
 801018a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801018c:	6a21      	ldr	r1, [r4, #32]
 801018e:	4628      	mov	r0, r5
 8010190:	47b0      	blx	r6
 8010192:	1c43      	adds	r3, r0, #1
 8010194:	89a3      	ldrh	r3, [r4, #12]
 8010196:	d106      	bne.n	80101a6 <__sflush_r+0x66>
 8010198:	6829      	ldr	r1, [r5, #0]
 801019a:	291d      	cmp	r1, #29
 801019c:	d82c      	bhi.n	80101f8 <__sflush_r+0xb8>
 801019e:	4a2a      	ldr	r2, [pc, #168]	; (8010248 <__sflush_r+0x108>)
 80101a0:	40ca      	lsrs	r2, r1
 80101a2:	07d6      	lsls	r6, r2, #31
 80101a4:	d528      	bpl.n	80101f8 <__sflush_r+0xb8>
 80101a6:	2200      	movs	r2, #0
 80101a8:	6062      	str	r2, [r4, #4]
 80101aa:	04d9      	lsls	r1, r3, #19
 80101ac:	6922      	ldr	r2, [r4, #16]
 80101ae:	6022      	str	r2, [r4, #0]
 80101b0:	d504      	bpl.n	80101bc <__sflush_r+0x7c>
 80101b2:	1c42      	adds	r2, r0, #1
 80101b4:	d101      	bne.n	80101ba <__sflush_r+0x7a>
 80101b6:	682b      	ldr	r3, [r5, #0]
 80101b8:	b903      	cbnz	r3, 80101bc <__sflush_r+0x7c>
 80101ba:	6560      	str	r0, [r4, #84]	; 0x54
 80101bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101be:	602f      	str	r7, [r5, #0]
 80101c0:	2900      	cmp	r1, #0
 80101c2:	d0ca      	beq.n	801015a <__sflush_r+0x1a>
 80101c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101c8:	4299      	cmp	r1, r3
 80101ca:	d002      	beq.n	80101d2 <__sflush_r+0x92>
 80101cc:	4628      	mov	r0, r5
 80101ce:	f7fb fe17 	bl	800be00 <_free_r>
 80101d2:	2000      	movs	r0, #0
 80101d4:	6360      	str	r0, [r4, #52]	; 0x34
 80101d6:	e7c1      	b.n	801015c <__sflush_r+0x1c>
 80101d8:	6a21      	ldr	r1, [r4, #32]
 80101da:	2301      	movs	r3, #1
 80101dc:	4628      	mov	r0, r5
 80101de:	47b0      	blx	r6
 80101e0:	1c41      	adds	r1, r0, #1
 80101e2:	d1c7      	bne.n	8010174 <__sflush_r+0x34>
 80101e4:	682b      	ldr	r3, [r5, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d0c4      	beq.n	8010174 <__sflush_r+0x34>
 80101ea:	2b1d      	cmp	r3, #29
 80101ec:	d001      	beq.n	80101f2 <__sflush_r+0xb2>
 80101ee:	2b16      	cmp	r3, #22
 80101f0:	d101      	bne.n	80101f6 <__sflush_r+0xb6>
 80101f2:	602f      	str	r7, [r5, #0]
 80101f4:	e7b1      	b.n	801015a <__sflush_r+0x1a>
 80101f6:	89a3      	ldrh	r3, [r4, #12]
 80101f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101fc:	81a3      	strh	r3, [r4, #12]
 80101fe:	e7ad      	b.n	801015c <__sflush_r+0x1c>
 8010200:	690f      	ldr	r7, [r1, #16]
 8010202:	2f00      	cmp	r7, #0
 8010204:	d0a9      	beq.n	801015a <__sflush_r+0x1a>
 8010206:	0793      	lsls	r3, r2, #30
 8010208:	680e      	ldr	r6, [r1, #0]
 801020a:	bf08      	it	eq
 801020c:	694b      	ldreq	r3, [r1, #20]
 801020e:	600f      	str	r7, [r1, #0]
 8010210:	bf18      	it	ne
 8010212:	2300      	movne	r3, #0
 8010214:	eba6 0807 	sub.w	r8, r6, r7
 8010218:	608b      	str	r3, [r1, #8]
 801021a:	f1b8 0f00 	cmp.w	r8, #0
 801021e:	dd9c      	ble.n	801015a <__sflush_r+0x1a>
 8010220:	6a21      	ldr	r1, [r4, #32]
 8010222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010224:	4643      	mov	r3, r8
 8010226:	463a      	mov	r2, r7
 8010228:	4628      	mov	r0, r5
 801022a:	47b0      	blx	r6
 801022c:	2800      	cmp	r0, #0
 801022e:	dc06      	bgt.n	801023e <__sflush_r+0xfe>
 8010230:	89a3      	ldrh	r3, [r4, #12]
 8010232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010236:	81a3      	strh	r3, [r4, #12]
 8010238:	f04f 30ff 	mov.w	r0, #4294967295
 801023c:	e78e      	b.n	801015c <__sflush_r+0x1c>
 801023e:	4407      	add	r7, r0
 8010240:	eba8 0800 	sub.w	r8, r8, r0
 8010244:	e7e9      	b.n	801021a <__sflush_r+0xda>
 8010246:	bf00      	nop
 8010248:	20400001 	.word	0x20400001

0801024c <_fflush_r>:
 801024c:	b538      	push	{r3, r4, r5, lr}
 801024e:	690b      	ldr	r3, [r1, #16]
 8010250:	4605      	mov	r5, r0
 8010252:	460c      	mov	r4, r1
 8010254:	b913      	cbnz	r3, 801025c <_fflush_r+0x10>
 8010256:	2500      	movs	r5, #0
 8010258:	4628      	mov	r0, r5
 801025a:	bd38      	pop	{r3, r4, r5, pc}
 801025c:	b118      	cbz	r0, 8010266 <_fflush_r+0x1a>
 801025e:	6983      	ldr	r3, [r0, #24]
 8010260:	b90b      	cbnz	r3, 8010266 <_fflush_r+0x1a>
 8010262:	f000 f887 	bl	8010374 <__sinit>
 8010266:	4b14      	ldr	r3, [pc, #80]	; (80102b8 <_fflush_r+0x6c>)
 8010268:	429c      	cmp	r4, r3
 801026a:	d11b      	bne.n	80102a4 <_fflush_r+0x58>
 801026c:	686c      	ldr	r4, [r5, #4]
 801026e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d0ef      	beq.n	8010256 <_fflush_r+0xa>
 8010276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010278:	07d0      	lsls	r0, r2, #31
 801027a:	d404      	bmi.n	8010286 <_fflush_r+0x3a>
 801027c:	0599      	lsls	r1, r3, #22
 801027e:	d402      	bmi.n	8010286 <_fflush_r+0x3a>
 8010280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010282:	f7ff fcf0 	bl	800fc66 <__retarget_lock_acquire_recursive>
 8010286:	4628      	mov	r0, r5
 8010288:	4621      	mov	r1, r4
 801028a:	f7ff ff59 	bl	8010140 <__sflush_r>
 801028e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010290:	07da      	lsls	r2, r3, #31
 8010292:	4605      	mov	r5, r0
 8010294:	d4e0      	bmi.n	8010258 <_fflush_r+0xc>
 8010296:	89a3      	ldrh	r3, [r4, #12]
 8010298:	059b      	lsls	r3, r3, #22
 801029a:	d4dd      	bmi.n	8010258 <_fflush_r+0xc>
 801029c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801029e:	f7ff fce3 	bl	800fc68 <__retarget_lock_release_recursive>
 80102a2:	e7d9      	b.n	8010258 <_fflush_r+0xc>
 80102a4:	4b05      	ldr	r3, [pc, #20]	; (80102bc <_fflush_r+0x70>)
 80102a6:	429c      	cmp	r4, r3
 80102a8:	d101      	bne.n	80102ae <_fflush_r+0x62>
 80102aa:	68ac      	ldr	r4, [r5, #8]
 80102ac:	e7df      	b.n	801026e <_fflush_r+0x22>
 80102ae:	4b04      	ldr	r3, [pc, #16]	; (80102c0 <_fflush_r+0x74>)
 80102b0:	429c      	cmp	r4, r3
 80102b2:	bf08      	it	eq
 80102b4:	68ec      	ldreq	r4, [r5, #12]
 80102b6:	e7da      	b.n	801026e <_fflush_r+0x22>
 80102b8:	08010c4c 	.word	0x08010c4c
 80102bc:	08010c6c 	.word	0x08010c6c
 80102c0:	08010c2c 	.word	0x08010c2c

080102c4 <std>:
 80102c4:	2300      	movs	r3, #0
 80102c6:	b510      	push	{r4, lr}
 80102c8:	4604      	mov	r4, r0
 80102ca:	e9c0 3300 	strd	r3, r3, [r0]
 80102ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80102d2:	6083      	str	r3, [r0, #8]
 80102d4:	8181      	strh	r1, [r0, #12]
 80102d6:	6643      	str	r3, [r0, #100]	; 0x64
 80102d8:	81c2      	strh	r2, [r0, #14]
 80102da:	6183      	str	r3, [r0, #24]
 80102dc:	4619      	mov	r1, r3
 80102de:	2208      	movs	r2, #8
 80102e0:	305c      	adds	r0, #92	; 0x5c
 80102e2:	f7fb fd85 	bl	800bdf0 <memset>
 80102e6:	4b05      	ldr	r3, [pc, #20]	; (80102fc <std+0x38>)
 80102e8:	6263      	str	r3, [r4, #36]	; 0x24
 80102ea:	4b05      	ldr	r3, [pc, #20]	; (8010300 <std+0x3c>)
 80102ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80102ee:	4b05      	ldr	r3, [pc, #20]	; (8010304 <std+0x40>)
 80102f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80102f2:	4b05      	ldr	r3, [pc, #20]	; (8010308 <std+0x44>)
 80102f4:	6224      	str	r4, [r4, #32]
 80102f6:	6323      	str	r3, [r4, #48]	; 0x30
 80102f8:	bd10      	pop	{r4, pc}
 80102fa:	bf00      	nop
 80102fc:	08010611 	.word	0x08010611
 8010300:	08010633 	.word	0x08010633
 8010304:	0801066b 	.word	0x0801066b
 8010308:	0801068f 	.word	0x0801068f

0801030c <_cleanup_r>:
 801030c:	4901      	ldr	r1, [pc, #4]	; (8010314 <_cleanup_r+0x8>)
 801030e:	f000 b8af 	b.w	8010470 <_fwalk_reent>
 8010312:	bf00      	nop
 8010314:	0801024d 	.word	0x0801024d

08010318 <__sfmoreglue>:
 8010318:	b570      	push	{r4, r5, r6, lr}
 801031a:	2268      	movs	r2, #104	; 0x68
 801031c:	1e4d      	subs	r5, r1, #1
 801031e:	4355      	muls	r5, r2
 8010320:	460e      	mov	r6, r1
 8010322:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010326:	f7fb fdd7 	bl	800bed8 <_malloc_r>
 801032a:	4604      	mov	r4, r0
 801032c:	b140      	cbz	r0, 8010340 <__sfmoreglue+0x28>
 801032e:	2100      	movs	r1, #0
 8010330:	e9c0 1600 	strd	r1, r6, [r0]
 8010334:	300c      	adds	r0, #12
 8010336:	60a0      	str	r0, [r4, #8]
 8010338:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801033c:	f7fb fd58 	bl	800bdf0 <memset>
 8010340:	4620      	mov	r0, r4
 8010342:	bd70      	pop	{r4, r5, r6, pc}

08010344 <__sfp_lock_acquire>:
 8010344:	4801      	ldr	r0, [pc, #4]	; (801034c <__sfp_lock_acquire+0x8>)
 8010346:	f7ff bc8e 	b.w	800fc66 <__retarget_lock_acquire_recursive>
 801034a:	bf00      	nop
 801034c:	20000c89 	.word	0x20000c89

08010350 <__sfp_lock_release>:
 8010350:	4801      	ldr	r0, [pc, #4]	; (8010358 <__sfp_lock_release+0x8>)
 8010352:	f7ff bc89 	b.w	800fc68 <__retarget_lock_release_recursive>
 8010356:	bf00      	nop
 8010358:	20000c89 	.word	0x20000c89

0801035c <__sinit_lock_acquire>:
 801035c:	4801      	ldr	r0, [pc, #4]	; (8010364 <__sinit_lock_acquire+0x8>)
 801035e:	f7ff bc82 	b.w	800fc66 <__retarget_lock_acquire_recursive>
 8010362:	bf00      	nop
 8010364:	20000c8a 	.word	0x20000c8a

08010368 <__sinit_lock_release>:
 8010368:	4801      	ldr	r0, [pc, #4]	; (8010370 <__sinit_lock_release+0x8>)
 801036a:	f7ff bc7d 	b.w	800fc68 <__retarget_lock_release_recursive>
 801036e:	bf00      	nop
 8010370:	20000c8a 	.word	0x20000c8a

08010374 <__sinit>:
 8010374:	b510      	push	{r4, lr}
 8010376:	4604      	mov	r4, r0
 8010378:	f7ff fff0 	bl	801035c <__sinit_lock_acquire>
 801037c:	69a3      	ldr	r3, [r4, #24]
 801037e:	b11b      	cbz	r3, 8010388 <__sinit+0x14>
 8010380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010384:	f7ff bff0 	b.w	8010368 <__sinit_lock_release>
 8010388:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801038c:	6523      	str	r3, [r4, #80]	; 0x50
 801038e:	4b13      	ldr	r3, [pc, #76]	; (80103dc <__sinit+0x68>)
 8010390:	4a13      	ldr	r2, [pc, #76]	; (80103e0 <__sinit+0x6c>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	62a2      	str	r2, [r4, #40]	; 0x28
 8010396:	42a3      	cmp	r3, r4
 8010398:	bf04      	itt	eq
 801039a:	2301      	moveq	r3, #1
 801039c:	61a3      	streq	r3, [r4, #24]
 801039e:	4620      	mov	r0, r4
 80103a0:	f000 f820 	bl	80103e4 <__sfp>
 80103a4:	6060      	str	r0, [r4, #4]
 80103a6:	4620      	mov	r0, r4
 80103a8:	f000 f81c 	bl	80103e4 <__sfp>
 80103ac:	60a0      	str	r0, [r4, #8]
 80103ae:	4620      	mov	r0, r4
 80103b0:	f000 f818 	bl	80103e4 <__sfp>
 80103b4:	2200      	movs	r2, #0
 80103b6:	60e0      	str	r0, [r4, #12]
 80103b8:	2104      	movs	r1, #4
 80103ba:	6860      	ldr	r0, [r4, #4]
 80103bc:	f7ff ff82 	bl	80102c4 <std>
 80103c0:	68a0      	ldr	r0, [r4, #8]
 80103c2:	2201      	movs	r2, #1
 80103c4:	2109      	movs	r1, #9
 80103c6:	f7ff ff7d 	bl	80102c4 <std>
 80103ca:	68e0      	ldr	r0, [r4, #12]
 80103cc:	2202      	movs	r2, #2
 80103ce:	2112      	movs	r1, #18
 80103d0:	f7ff ff78 	bl	80102c4 <std>
 80103d4:	2301      	movs	r3, #1
 80103d6:	61a3      	str	r3, [r4, #24]
 80103d8:	e7d2      	b.n	8010380 <__sinit+0xc>
 80103da:	bf00      	nop
 80103dc:	080107e4 	.word	0x080107e4
 80103e0:	0801030d 	.word	0x0801030d

080103e4 <__sfp>:
 80103e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e6:	4607      	mov	r7, r0
 80103e8:	f7ff ffac 	bl	8010344 <__sfp_lock_acquire>
 80103ec:	4b1e      	ldr	r3, [pc, #120]	; (8010468 <__sfp+0x84>)
 80103ee:	681e      	ldr	r6, [r3, #0]
 80103f0:	69b3      	ldr	r3, [r6, #24]
 80103f2:	b913      	cbnz	r3, 80103fa <__sfp+0x16>
 80103f4:	4630      	mov	r0, r6
 80103f6:	f7ff ffbd 	bl	8010374 <__sinit>
 80103fa:	3648      	adds	r6, #72	; 0x48
 80103fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010400:	3b01      	subs	r3, #1
 8010402:	d503      	bpl.n	801040c <__sfp+0x28>
 8010404:	6833      	ldr	r3, [r6, #0]
 8010406:	b30b      	cbz	r3, 801044c <__sfp+0x68>
 8010408:	6836      	ldr	r6, [r6, #0]
 801040a:	e7f7      	b.n	80103fc <__sfp+0x18>
 801040c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010410:	b9d5      	cbnz	r5, 8010448 <__sfp+0x64>
 8010412:	4b16      	ldr	r3, [pc, #88]	; (801046c <__sfp+0x88>)
 8010414:	60e3      	str	r3, [r4, #12]
 8010416:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801041a:	6665      	str	r5, [r4, #100]	; 0x64
 801041c:	f7ff fc22 	bl	800fc64 <__retarget_lock_init_recursive>
 8010420:	f7ff ff96 	bl	8010350 <__sfp_lock_release>
 8010424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801042c:	6025      	str	r5, [r4, #0]
 801042e:	61a5      	str	r5, [r4, #24]
 8010430:	2208      	movs	r2, #8
 8010432:	4629      	mov	r1, r5
 8010434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010438:	f7fb fcda 	bl	800bdf0 <memset>
 801043c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010440:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010444:	4620      	mov	r0, r4
 8010446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010448:	3468      	adds	r4, #104	; 0x68
 801044a:	e7d9      	b.n	8010400 <__sfp+0x1c>
 801044c:	2104      	movs	r1, #4
 801044e:	4638      	mov	r0, r7
 8010450:	f7ff ff62 	bl	8010318 <__sfmoreglue>
 8010454:	4604      	mov	r4, r0
 8010456:	6030      	str	r0, [r6, #0]
 8010458:	2800      	cmp	r0, #0
 801045a:	d1d5      	bne.n	8010408 <__sfp+0x24>
 801045c:	f7ff ff78 	bl	8010350 <__sfp_lock_release>
 8010460:	230c      	movs	r3, #12
 8010462:	603b      	str	r3, [r7, #0]
 8010464:	e7ee      	b.n	8010444 <__sfp+0x60>
 8010466:	bf00      	nop
 8010468:	080107e4 	.word	0x080107e4
 801046c:	ffff0001 	.word	0xffff0001

08010470 <_fwalk_reent>:
 8010470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010474:	4606      	mov	r6, r0
 8010476:	4688      	mov	r8, r1
 8010478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801047c:	2700      	movs	r7, #0
 801047e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010482:	f1b9 0901 	subs.w	r9, r9, #1
 8010486:	d505      	bpl.n	8010494 <_fwalk_reent+0x24>
 8010488:	6824      	ldr	r4, [r4, #0]
 801048a:	2c00      	cmp	r4, #0
 801048c:	d1f7      	bne.n	801047e <_fwalk_reent+0xe>
 801048e:	4638      	mov	r0, r7
 8010490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010494:	89ab      	ldrh	r3, [r5, #12]
 8010496:	2b01      	cmp	r3, #1
 8010498:	d907      	bls.n	80104aa <_fwalk_reent+0x3a>
 801049a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801049e:	3301      	adds	r3, #1
 80104a0:	d003      	beq.n	80104aa <_fwalk_reent+0x3a>
 80104a2:	4629      	mov	r1, r5
 80104a4:	4630      	mov	r0, r6
 80104a6:	47c0      	blx	r8
 80104a8:	4307      	orrs	r7, r0
 80104aa:	3568      	adds	r5, #104	; 0x68
 80104ac:	e7e9      	b.n	8010482 <_fwalk_reent+0x12>

080104ae <__swhatbuf_r>:
 80104ae:	b570      	push	{r4, r5, r6, lr}
 80104b0:	460e      	mov	r6, r1
 80104b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104b6:	2900      	cmp	r1, #0
 80104b8:	b096      	sub	sp, #88	; 0x58
 80104ba:	4614      	mov	r4, r2
 80104bc:	461d      	mov	r5, r3
 80104be:	da08      	bge.n	80104d2 <__swhatbuf_r+0x24>
 80104c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80104c4:	2200      	movs	r2, #0
 80104c6:	602a      	str	r2, [r5, #0]
 80104c8:	061a      	lsls	r2, r3, #24
 80104ca:	d410      	bmi.n	80104ee <__swhatbuf_r+0x40>
 80104cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104d0:	e00e      	b.n	80104f0 <__swhatbuf_r+0x42>
 80104d2:	466a      	mov	r2, sp
 80104d4:	f000 f902 	bl	80106dc <_fstat_r>
 80104d8:	2800      	cmp	r0, #0
 80104da:	dbf1      	blt.n	80104c0 <__swhatbuf_r+0x12>
 80104dc:	9a01      	ldr	r2, [sp, #4]
 80104de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80104e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80104e6:	425a      	negs	r2, r3
 80104e8:	415a      	adcs	r2, r3
 80104ea:	602a      	str	r2, [r5, #0]
 80104ec:	e7ee      	b.n	80104cc <__swhatbuf_r+0x1e>
 80104ee:	2340      	movs	r3, #64	; 0x40
 80104f0:	2000      	movs	r0, #0
 80104f2:	6023      	str	r3, [r4, #0]
 80104f4:	b016      	add	sp, #88	; 0x58
 80104f6:	bd70      	pop	{r4, r5, r6, pc}

080104f8 <__smakebuf_r>:
 80104f8:	898b      	ldrh	r3, [r1, #12]
 80104fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80104fc:	079d      	lsls	r5, r3, #30
 80104fe:	4606      	mov	r6, r0
 8010500:	460c      	mov	r4, r1
 8010502:	d507      	bpl.n	8010514 <__smakebuf_r+0x1c>
 8010504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010508:	6023      	str	r3, [r4, #0]
 801050a:	6123      	str	r3, [r4, #16]
 801050c:	2301      	movs	r3, #1
 801050e:	6163      	str	r3, [r4, #20]
 8010510:	b002      	add	sp, #8
 8010512:	bd70      	pop	{r4, r5, r6, pc}
 8010514:	ab01      	add	r3, sp, #4
 8010516:	466a      	mov	r2, sp
 8010518:	f7ff ffc9 	bl	80104ae <__swhatbuf_r>
 801051c:	9900      	ldr	r1, [sp, #0]
 801051e:	4605      	mov	r5, r0
 8010520:	4630      	mov	r0, r6
 8010522:	f7fb fcd9 	bl	800bed8 <_malloc_r>
 8010526:	b948      	cbnz	r0, 801053c <__smakebuf_r+0x44>
 8010528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801052c:	059a      	lsls	r2, r3, #22
 801052e:	d4ef      	bmi.n	8010510 <__smakebuf_r+0x18>
 8010530:	f023 0303 	bic.w	r3, r3, #3
 8010534:	f043 0302 	orr.w	r3, r3, #2
 8010538:	81a3      	strh	r3, [r4, #12]
 801053a:	e7e3      	b.n	8010504 <__smakebuf_r+0xc>
 801053c:	4b0d      	ldr	r3, [pc, #52]	; (8010574 <__smakebuf_r+0x7c>)
 801053e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010540:	89a3      	ldrh	r3, [r4, #12]
 8010542:	6020      	str	r0, [r4, #0]
 8010544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010548:	81a3      	strh	r3, [r4, #12]
 801054a:	9b00      	ldr	r3, [sp, #0]
 801054c:	6163      	str	r3, [r4, #20]
 801054e:	9b01      	ldr	r3, [sp, #4]
 8010550:	6120      	str	r0, [r4, #16]
 8010552:	b15b      	cbz	r3, 801056c <__smakebuf_r+0x74>
 8010554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010558:	4630      	mov	r0, r6
 801055a:	f000 f8d1 	bl	8010700 <_isatty_r>
 801055e:	b128      	cbz	r0, 801056c <__smakebuf_r+0x74>
 8010560:	89a3      	ldrh	r3, [r4, #12]
 8010562:	f023 0303 	bic.w	r3, r3, #3
 8010566:	f043 0301 	orr.w	r3, r3, #1
 801056a:	81a3      	strh	r3, [r4, #12]
 801056c:	89a0      	ldrh	r0, [r4, #12]
 801056e:	4305      	orrs	r5, r0
 8010570:	81a5      	strh	r5, [r4, #12]
 8010572:	e7cd      	b.n	8010510 <__smakebuf_r+0x18>
 8010574:	0801030d 	.word	0x0801030d

08010578 <_malloc_usable_size_r>:
 8010578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801057c:	1f18      	subs	r0, r3, #4
 801057e:	2b00      	cmp	r3, #0
 8010580:	bfbc      	itt	lt
 8010582:	580b      	ldrlt	r3, [r1, r0]
 8010584:	18c0      	addlt	r0, r0, r3
 8010586:	4770      	bx	lr

08010588 <_raise_r>:
 8010588:	291f      	cmp	r1, #31
 801058a:	b538      	push	{r3, r4, r5, lr}
 801058c:	4604      	mov	r4, r0
 801058e:	460d      	mov	r5, r1
 8010590:	d904      	bls.n	801059c <_raise_r+0x14>
 8010592:	2316      	movs	r3, #22
 8010594:	6003      	str	r3, [r0, #0]
 8010596:	f04f 30ff 	mov.w	r0, #4294967295
 801059a:	bd38      	pop	{r3, r4, r5, pc}
 801059c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801059e:	b112      	cbz	r2, 80105a6 <_raise_r+0x1e>
 80105a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105a4:	b94b      	cbnz	r3, 80105ba <_raise_r+0x32>
 80105a6:	4620      	mov	r0, r4
 80105a8:	f000 f830 	bl	801060c <_getpid_r>
 80105ac:	462a      	mov	r2, r5
 80105ae:	4601      	mov	r1, r0
 80105b0:	4620      	mov	r0, r4
 80105b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105b6:	f000 b817 	b.w	80105e8 <_kill_r>
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d00a      	beq.n	80105d4 <_raise_r+0x4c>
 80105be:	1c59      	adds	r1, r3, #1
 80105c0:	d103      	bne.n	80105ca <_raise_r+0x42>
 80105c2:	2316      	movs	r3, #22
 80105c4:	6003      	str	r3, [r0, #0]
 80105c6:	2001      	movs	r0, #1
 80105c8:	e7e7      	b.n	801059a <_raise_r+0x12>
 80105ca:	2400      	movs	r4, #0
 80105cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80105d0:	4628      	mov	r0, r5
 80105d2:	4798      	blx	r3
 80105d4:	2000      	movs	r0, #0
 80105d6:	e7e0      	b.n	801059a <_raise_r+0x12>

080105d8 <raise>:
 80105d8:	4b02      	ldr	r3, [pc, #8]	; (80105e4 <raise+0xc>)
 80105da:	4601      	mov	r1, r0
 80105dc:	6818      	ldr	r0, [r3, #0]
 80105de:	f7ff bfd3 	b.w	8010588 <_raise_r>
 80105e2:	bf00      	nop
 80105e4:	2000002c 	.word	0x2000002c

080105e8 <_kill_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4d07      	ldr	r5, [pc, #28]	; (8010608 <_kill_r+0x20>)
 80105ec:	2300      	movs	r3, #0
 80105ee:	4604      	mov	r4, r0
 80105f0:	4608      	mov	r0, r1
 80105f2:	4611      	mov	r1, r2
 80105f4:	602b      	str	r3, [r5, #0]
 80105f6:	f7f1 fc19 	bl	8001e2c <_kill>
 80105fa:	1c43      	adds	r3, r0, #1
 80105fc:	d102      	bne.n	8010604 <_kill_r+0x1c>
 80105fe:	682b      	ldr	r3, [r5, #0]
 8010600:	b103      	cbz	r3, 8010604 <_kill_r+0x1c>
 8010602:	6023      	str	r3, [r4, #0]
 8010604:	bd38      	pop	{r3, r4, r5, pc}
 8010606:	bf00      	nop
 8010608:	20000c84 	.word	0x20000c84

0801060c <_getpid_r>:
 801060c:	f7f1 bc06 	b.w	8001e1c <_getpid>

08010610 <__sread>:
 8010610:	b510      	push	{r4, lr}
 8010612:	460c      	mov	r4, r1
 8010614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010618:	f000 f894 	bl	8010744 <_read_r>
 801061c:	2800      	cmp	r0, #0
 801061e:	bfab      	itete	ge
 8010620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010622:	89a3      	ldrhlt	r3, [r4, #12]
 8010624:	181b      	addge	r3, r3, r0
 8010626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801062a:	bfac      	ite	ge
 801062c:	6563      	strge	r3, [r4, #84]	; 0x54
 801062e:	81a3      	strhlt	r3, [r4, #12]
 8010630:	bd10      	pop	{r4, pc}

08010632 <__swrite>:
 8010632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010636:	461f      	mov	r7, r3
 8010638:	898b      	ldrh	r3, [r1, #12]
 801063a:	05db      	lsls	r3, r3, #23
 801063c:	4605      	mov	r5, r0
 801063e:	460c      	mov	r4, r1
 8010640:	4616      	mov	r6, r2
 8010642:	d505      	bpl.n	8010650 <__swrite+0x1e>
 8010644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010648:	2302      	movs	r3, #2
 801064a:	2200      	movs	r2, #0
 801064c:	f000 f868 	bl	8010720 <_lseek_r>
 8010650:	89a3      	ldrh	r3, [r4, #12]
 8010652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801065a:	81a3      	strh	r3, [r4, #12]
 801065c:	4632      	mov	r2, r6
 801065e:	463b      	mov	r3, r7
 8010660:	4628      	mov	r0, r5
 8010662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010666:	f000 b817 	b.w	8010698 <_write_r>

0801066a <__sseek>:
 801066a:	b510      	push	{r4, lr}
 801066c:	460c      	mov	r4, r1
 801066e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010672:	f000 f855 	bl	8010720 <_lseek_r>
 8010676:	1c43      	adds	r3, r0, #1
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	bf15      	itete	ne
 801067c:	6560      	strne	r0, [r4, #84]	; 0x54
 801067e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010686:	81a3      	strheq	r3, [r4, #12]
 8010688:	bf18      	it	ne
 801068a:	81a3      	strhne	r3, [r4, #12]
 801068c:	bd10      	pop	{r4, pc}

0801068e <__sclose>:
 801068e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010692:	f000 b813 	b.w	80106bc <_close_r>
	...

08010698 <_write_r>:
 8010698:	b538      	push	{r3, r4, r5, lr}
 801069a:	4d07      	ldr	r5, [pc, #28]	; (80106b8 <_write_r+0x20>)
 801069c:	4604      	mov	r4, r0
 801069e:	4608      	mov	r0, r1
 80106a0:	4611      	mov	r1, r2
 80106a2:	2200      	movs	r2, #0
 80106a4:	602a      	str	r2, [r5, #0]
 80106a6:	461a      	mov	r2, r3
 80106a8:	f7f1 fbf7 	bl	8001e9a <_write>
 80106ac:	1c43      	adds	r3, r0, #1
 80106ae:	d102      	bne.n	80106b6 <_write_r+0x1e>
 80106b0:	682b      	ldr	r3, [r5, #0]
 80106b2:	b103      	cbz	r3, 80106b6 <_write_r+0x1e>
 80106b4:	6023      	str	r3, [r4, #0]
 80106b6:	bd38      	pop	{r3, r4, r5, pc}
 80106b8:	20000c84 	.word	0x20000c84

080106bc <_close_r>:
 80106bc:	b538      	push	{r3, r4, r5, lr}
 80106be:	4d06      	ldr	r5, [pc, #24]	; (80106d8 <_close_r+0x1c>)
 80106c0:	2300      	movs	r3, #0
 80106c2:	4604      	mov	r4, r0
 80106c4:	4608      	mov	r0, r1
 80106c6:	602b      	str	r3, [r5, #0]
 80106c8:	f7f1 fc03 	bl	8001ed2 <_close>
 80106cc:	1c43      	adds	r3, r0, #1
 80106ce:	d102      	bne.n	80106d6 <_close_r+0x1a>
 80106d0:	682b      	ldr	r3, [r5, #0]
 80106d2:	b103      	cbz	r3, 80106d6 <_close_r+0x1a>
 80106d4:	6023      	str	r3, [r4, #0]
 80106d6:	bd38      	pop	{r3, r4, r5, pc}
 80106d8:	20000c84 	.word	0x20000c84

080106dc <_fstat_r>:
 80106dc:	b538      	push	{r3, r4, r5, lr}
 80106de:	4d07      	ldr	r5, [pc, #28]	; (80106fc <_fstat_r+0x20>)
 80106e0:	2300      	movs	r3, #0
 80106e2:	4604      	mov	r4, r0
 80106e4:	4608      	mov	r0, r1
 80106e6:	4611      	mov	r1, r2
 80106e8:	602b      	str	r3, [r5, #0]
 80106ea:	f7f1 fbfe 	bl	8001eea <_fstat>
 80106ee:	1c43      	adds	r3, r0, #1
 80106f0:	d102      	bne.n	80106f8 <_fstat_r+0x1c>
 80106f2:	682b      	ldr	r3, [r5, #0]
 80106f4:	b103      	cbz	r3, 80106f8 <_fstat_r+0x1c>
 80106f6:	6023      	str	r3, [r4, #0]
 80106f8:	bd38      	pop	{r3, r4, r5, pc}
 80106fa:	bf00      	nop
 80106fc:	20000c84 	.word	0x20000c84

08010700 <_isatty_r>:
 8010700:	b538      	push	{r3, r4, r5, lr}
 8010702:	4d06      	ldr	r5, [pc, #24]	; (801071c <_isatty_r+0x1c>)
 8010704:	2300      	movs	r3, #0
 8010706:	4604      	mov	r4, r0
 8010708:	4608      	mov	r0, r1
 801070a:	602b      	str	r3, [r5, #0]
 801070c:	f7f1 fbfd 	bl	8001f0a <_isatty>
 8010710:	1c43      	adds	r3, r0, #1
 8010712:	d102      	bne.n	801071a <_isatty_r+0x1a>
 8010714:	682b      	ldr	r3, [r5, #0]
 8010716:	b103      	cbz	r3, 801071a <_isatty_r+0x1a>
 8010718:	6023      	str	r3, [r4, #0]
 801071a:	bd38      	pop	{r3, r4, r5, pc}
 801071c:	20000c84 	.word	0x20000c84

08010720 <_lseek_r>:
 8010720:	b538      	push	{r3, r4, r5, lr}
 8010722:	4d07      	ldr	r5, [pc, #28]	; (8010740 <_lseek_r+0x20>)
 8010724:	4604      	mov	r4, r0
 8010726:	4608      	mov	r0, r1
 8010728:	4611      	mov	r1, r2
 801072a:	2200      	movs	r2, #0
 801072c:	602a      	str	r2, [r5, #0]
 801072e:	461a      	mov	r2, r3
 8010730:	f7f1 fbf6 	bl	8001f20 <_lseek>
 8010734:	1c43      	adds	r3, r0, #1
 8010736:	d102      	bne.n	801073e <_lseek_r+0x1e>
 8010738:	682b      	ldr	r3, [r5, #0]
 801073a:	b103      	cbz	r3, 801073e <_lseek_r+0x1e>
 801073c:	6023      	str	r3, [r4, #0]
 801073e:	bd38      	pop	{r3, r4, r5, pc}
 8010740:	20000c84 	.word	0x20000c84

08010744 <_read_r>:
 8010744:	b538      	push	{r3, r4, r5, lr}
 8010746:	4d07      	ldr	r5, [pc, #28]	; (8010764 <_read_r+0x20>)
 8010748:	4604      	mov	r4, r0
 801074a:	4608      	mov	r0, r1
 801074c:	4611      	mov	r1, r2
 801074e:	2200      	movs	r2, #0
 8010750:	602a      	str	r2, [r5, #0]
 8010752:	461a      	mov	r2, r3
 8010754:	f7f1 fb84 	bl	8001e60 <_read>
 8010758:	1c43      	adds	r3, r0, #1
 801075a:	d102      	bne.n	8010762 <_read_r+0x1e>
 801075c:	682b      	ldr	r3, [r5, #0]
 801075e:	b103      	cbz	r3, 8010762 <_read_r+0x1e>
 8010760:	6023      	str	r3, [r4, #0]
 8010762:	bd38      	pop	{r3, r4, r5, pc}
 8010764:	20000c84 	.word	0x20000c84

08010768 <_init>:
 8010768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801076a:	bf00      	nop
 801076c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801076e:	bc08      	pop	{r3}
 8010770:	469e      	mov	lr, r3
 8010772:	4770      	bx	lr

08010774 <_fini>:
 8010774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010776:	bf00      	nop
 8010778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801077a:	bc08      	pop	{r3}
 801077c:	469e      	mov	lr, r3
 801077e:	4770      	bx	lr
