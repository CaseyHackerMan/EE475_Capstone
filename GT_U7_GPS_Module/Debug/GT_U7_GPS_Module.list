
GT_U7_GPS_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008df0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08008fc0  08008fc0  00018fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009484  08009484  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009484  08009484  00019484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800948c  0800948c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800948c  0800948c  0001948c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c0  200001d4  08009668  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a94  08009668  00020a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000950a  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b75  00000000  00000000  00029751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0002b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000622  00000000  00000000  0002bad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021dd0  00000000  00000000  0002c0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aecc  00000000  00000000  0004deca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca060  00000000  00000000  00058d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003794  00000000  00000000  00122df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0012658c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008fa8 	.word	0x08008fa8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008fa8 	.word	0x08008fa8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f000 fcaa 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f81a 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f000 f8fa 	bl	8001234 <MX_GPIO_Init>
  MX_DMA_Init();
 8001040:	f000 f8d8 	bl	80011f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001044:	f000 f8ac 	bl	80011a0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001048:	f000 f880 	bl	800114c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*) Rx_Data, 700);
 800104c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001050:	4905      	ldr	r1, [pc, #20]	; (8001068 <main+0x38>)
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <main+0x3c>)
 8001054:	f002 fa27 	bl	80034a6 <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	//printf("Hello world\r\n");
	//HAL_Delay(1000);
	get_location();
 8001058:	f000 f97c 	bl	8001354 <get_location>
	HAL_Delay(1000);
 800105c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001060:	f000 fd06 	bl	8001a70 <HAL_Delay>
	get_location();
 8001064:	e7f8      	b.n	8001058 <main+0x28>
 8001066:	bf00      	nop
 8001068:	200002d8 	.word	0x200002d8
 800106c:	200001f0 	.word	0x200001f0

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	2234      	movs	r2, #52	; 0x34
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f003 ff2f 	bl	8004ee2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <SystemClock_Config+0xd4>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a29      	ldr	r2, [pc, #164]	; (8001144 <SystemClock_Config+0xd4>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <SystemClock_Config+0xd4>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b0:	2300      	movs	r3, #0
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <SystemClock_Config+0xd8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010bc:	4a22      	ldr	r2, [pc, #136]	; (8001148 <SystemClock_Config+0xd8>)
 80010be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <SystemClock_Config+0xd8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d8:	2310      	movs	r3, #16
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010dc:	2302      	movs	r3, #2
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010e4:	2310      	movs	r3, #16
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ee:	2304      	movs	r3, #4
 80010f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fe54 	bl	8002dac <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800110a:	f000 fa2b 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	230f      	movs	r3, #15
 8001110:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2302      	movs	r3, #2
 8001114:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800111a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	2102      	movs	r1, #2
 800112a:	4618      	mov	r0, r3
 800112c:	f001 faf4 	bl	8002718 <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001136:	f000 fa15 	bl	8001564 <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	3750      	adds	r7, #80	; 0x50
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_USART1_UART_Init+0x50>)
 8001154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001158:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800115c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001184:	f002 f8b0 	bl	80032e8 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800118e:	f000 f9e9 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200001f0 	.word	0x200001f0
 800119c:	40011000 	.word	0x40011000

080011a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_USART2_UART_Init+0x50>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011d8:	f002 f886 	bl	80032e8 <HAL_UART_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011e2:	f000 f9bf 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000234 	.word	0x20000234
 80011f0:	40004400 	.word	0x40004400

080011f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_DMA_Init+0x3c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <MX_DMA_Init+0x3c>)
 8001204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_DMA_Init+0x3c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	203a      	movs	r0, #58	; 0x3a
 800121c:	f000 fd27 	bl	8001c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001220:	203a      	movs	r0, #58	; 0x3a
 8001222:	f000 fd40 	bl	8001ca6 <HAL_NVIC_EnableIRQ>

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800

08001234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <MX_GPIO_Init+0xd0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <MX_GPIO_Init+0xd0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a25      	ldr	r2, [pc, #148]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <MX_GPIO_Init+0xd0>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <MX_GPIO_Init+0xd0>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_GPIO_Init+0xd0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2120      	movs	r1, #32
 80012be:	4812      	ldr	r0, [pc, #72]	; (8001308 <MX_GPIO_Init+0xd4>)
 80012c0:	f001 fa10 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <MX_GPIO_Init+0xd8>)
 80012dc:	f001 f86e 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012e0:	2320      	movs	r3, #32
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_GPIO_Init+0xd4>)
 80012f8:	f001 f860 	bl	80023bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020800 	.word	0x40020800

08001310 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	Rx_Data_Ready_Flag = 1;
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <HAL_UART_RxCpltCallback+0x1c>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	2000091c 	.word	0x2000091c

08001330 <__io_putchar>:


PUTCHAR_PROTOTYPE
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001338:	1d39      	adds	r1, r7, #4
 800133a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800133e:	2201      	movs	r2, #1
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <__io_putchar+0x20>)
 8001342:	f002 f81e 	bl	8003382 <HAL_UART_Transmit>

  return ch;
 8001346:	687b      	ldr	r3, [r7, #4]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000234 	.word	0x20000234

08001354 <get_location>:


void get_location() {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af02      	add	r7, sp, #8

	if(Rx_Data_Ready_Flag == 1) {
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <get_location+0xb8>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d151      	bne.n	8001406 <get_location+0xb2>
		Msg_Index = 0;
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <get_location+0xbc>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
		strcpy(Data_Buffer, (char*)(Rx_Data));
 8001368:	492a      	ldr	r1, [pc, #168]	; (8001414 <get_location+0xc0>)
 800136a:	482b      	ldr	r0, [pc, #172]	; (8001418 <get_location+0xc4>)
 800136c:	f003 fe4f 	bl	800500e <strcpy>
		GPS_Data_Ptr = strstr(Data_Buffer, "GPRMC");
 8001370:	492a      	ldr	r1, [pc, #168]	; (800141c <get_location+0xc8>)
 8001372:	4829      	ldr	r0, [pc, #164]	; (8001418 <get_location+0xc4>)
 8001374:	f003 fdbd 	bl	8004ef2 <strstr>
 8001378:	4603      	mov	r3, r0
 800137a:	4a29      	ldr	r2, [pc, #164]	; (8001420 <get_location+0xcc>)
 800137c:	6013      	str	r3, [r2, #0]

		if(*GPS_Data_Ptr == 'G') {
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <get_location+0xcc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b47      	cmp	r3, #71	; 0x47
 8001386:	d13e      	bne.n	8001406 <get_location+0xb2>
			while(1) {
				GPS_Payload[Msg_Index] = *GPS_Data_Ptr;
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <get_location+0xcc>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <get_location+0xbc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	7811      	ldrb	r1, [r2, #0]
 8001392:	4a24      	ldr	r2, [pc, #144]	; (8001424 <get_location+0xd0>)
 8001394:	54d1      	strb	r1, [r2, r3]
				Msg_Index++;
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <get_location+0xbc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <get_location+0xbc>)
 800139e:	6013      	str	r3, [r2, #0]
				*GPS_Data_Ptr = *(GPS_Data_Ptr + Msg_Index);
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <get_location+0xcc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1a      	ldr	r2, [pc, #104]	; (8001410 <get_location+0xbc>)
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	441a      	add	r2, r3
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <get_location+0xcc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	7812      	ldrb	r2, [r2, #0]
 80013b0:	701a      	strb	r2, [r3, #0]

				if(*GPS_Data_Ptr == '\n') {
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <get_location+0xcc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b0a      	cmp	r3, #10
 80013ba:	d1e5      	bne.n	8001388 <get_location+0x34>
					GPS_Payload[Msg_Index] = '\0';
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <get_location+0xbc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <get_location+0xd0>)
 80013c2:	2100      	movs	r1, #0
 80013c4:	54d1      	strb	r1, [r2, r3]
					break;
 80013c6:	bf00      	nop
				}
			}

		sscanf(GPS_Payload, "GPRMC, %f, A, %f, N, %f,", &Time, &Latitude, &Longitude);
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <get_location+0xd4>)
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <get_location+0xd8>)
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <get_location+0xdc>)
 80013d0:	4918      	ldr	r1, [pc, #96]	; (8001434 <get_location+0xe0>)
 80013d2:	4814      	ldr	r0, [pc, #80]	; (8001424 <get_location+0xd0>)
 80013d4:	f003 fd14 	bl	8004e00 <siscanf>
		format_data(Time, Latitude, Longitude);
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <get_location+0xdc>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <get_location+0xd8>)
 80013e0:	ed93 7a00 	vldr	s14, [r3]
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <get_location+0xd4>)
 80013e6:	edd3 6a00 	vldr	s13, [r3]
 80013ea:	eeb0 1a66 	vmov.f32	s2, s13
 80013ee:	eef0 0a47 	vmov.f32	s1, s14
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	f000 f81f 	bl	8001438 <format_data>
		HAL_Delay(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f000 fb38 	bl	8001a70 <HAL_Delay>
		Rx_Data_Ready_Flag = 0;
 8001400:	4b02      	ldr	r3, [pc, #8]	; (800140c <get_location+0xb8>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000091c 	.word	0x2000091c
 8001410:	20000920 	.word	0x20000920
 8001414:	200002d8 	.word	0x200002d8
 8001418:	200005c8 	.word	0x200005c8
 800141c:	08008fc0 	.word	0x08008fc0
 8001420:	20000924 	.word	0x20000924
 8001424:	200008b8 	.word	0x200008b8
 8001428:	20000930 	.word	0x20000930
 800142c:	2000092c 	.word	0x2000092c
 8001430:	20000928 	.word	0x20000928
 8001434:	08008fc8 	.word	0x08008fc8

08001438 <format_data>:



void format_data(float Time, float Lat, float Long) {
 8001438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800143c:	b0a4      	sub	sp, #144	; 0x90
 800143e:	af06      	add	r7, sp, #24
 8001440:	ed87 0a03 	vstr	s0, [r7, #12]
 8001444:	edc7 0a02 	vstr	s1, [r7, #8]
 8001448:	ed87 1a01 	vstr	s2, [r7, #4]
	char Data[100];
	Hours = (int)Time / 10000;
 800144c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 1a90 	vmov	r1, s15
 8001458:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <format_data+0x10c>)
 800145a:	fb83 2301 	smull	r2, r3, r3, r1
 800145e:	131a      	asrs	r2, r3, #12
 8001460:	17cb      	asrs	r3, r1, #31
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	4a38      	ldr	r2, [pc, #224]	; (8001548 <format_data+0x110>)
 8001466:	6013      	str	r3, [r2, #0]
	Min = (int)(Time - (Hours * 10000)) / 100;
 8001468:	4b37      	ldr	r3, [pc, #220]	; (8001548 <format_data+0x110>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001488:	ee17 1a90 	vmov	r1, s15
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <format_data+0x114>)
 800148e:	fb83 2301 	smull	r2, r3, r3, r1
 8001492:	115a      	asrs	r2, r3, #5
 8001494:	17cb      	asrs	r3, r1, #31
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	4a2d      	ldr	r2, [pc, #180]	; (8001550 <format_data+0x118>)
 800149a:	6013      	str	r3, [r2, #0]
	Sec = (int)(Time - ((Hours * 10000) + (Min * 100)));
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <format_data+0x110>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80014a4:	fb03 f202 	mul.w	r2, r3, r2
 80014a8:	4b29      	ldr	r3, [pc, #164]	; (8001550 <format_data+0x118>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2164      	movs	r1, #100	; 0x64
 80014ae:	fb01 f303 	mul.w	r3, r1, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80014c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c8:	ee17 2a90 	vmov	r2, s15
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <format_data+0x11c>)
 80014ce:	601a      	str	r2, [r3, #0]
	sprintf(Data, "\r\nTime=%d:%d:%d Latitude=%f, Longitude=%f", Hours+3, Min, Sec, Lat, Long);
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <format_data+0x110>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f103 0803 	add.w	r8, r3, #3
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <format_data+0x118>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <format_data+0x11c>)
 80014e0:	681e      	ldr	r6, [r3, #0]
 80014e2:	68b8      	ldr	r0, [r7, #8]
 80014e4:	f7ff f850 	bl	8000588 <__aeabi_f2d>
 80014e8:	4604      	mov	r4, r0
 80014ea:	460d      	mov	r5, r1
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff f84b 	bl	8000588 <__aeabi_f2d>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	f107 0014 	add.w	r0, r7, #20
 80014fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001502:	9600      	str	r6, [sp, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	4642      	mov	r2, r8
 8001508:	4913      	ldr	r1, [pc, #76]	; (8001558 <format_data+0x120>)
 800150a:	f003 fc59 	bl	8004dc0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Data, strlen(Data), HAL_MAX_DELAY);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe fecc 	bl	80002b0 <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	f107 0114 	add.w	r1, r7, #20
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <format_data+0x124>)
 8001526:	f001 ff2c 	bl	8003382 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n\n", 3, HAL_MAX_DELAY);
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	2203      	movs	r2, #3
 8001530:	490b      	ldr	r1, [pc, #44]	; (8001560 <format_data+0x128>)
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <format_data+0x124>)
 8001534:	f001 ff25 	bl	8003382 <HAL_UART_Transmit>

}
 8001538:	bf00      	nop
 800153a:	3778      	adds	r7, #120	; 0x78
 800153c:	46bd      	mov	sp, r7
 800153e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001542:	bf00      	nop
 8001544:	68db8bad 	.word	0x68db8bad
 8001548:	20000934 	.word	0x20000934
 800154c:	51eb851f 	.word	0x51eb851f
 8001550:	20000938 	.word	0x20000938
 8001554:	2000093c 	.word	0x2000093c
 8001558:	08008fe4 	.word	0x08008fe4
 800155c:	20000234 	.word	0x20000234
 8001560:	08009010 	.word	0x08009010

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	e7fe      	b.n	800156c <Error_Handler+0x8>
	...

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_MspInit+0x4c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_MspInit+0x4c>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_MspInit+0x4c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_MspInit+0x4c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ae:	2007      	movs	r0, #7
 80015b0:	f000 fb52 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	; 0x30
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a4a      	ldr	r2, [pc, #296]	; (8001708 <HAL_UART_MspInit+0x148>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d15c      	bne.n	800169c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	4b49      	ldr	r3, [pc, #292]	; (800170c <HAL_UART_MspInit+0x14c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_UART_MspInit+0x14c>)
 80015ec:	f043 0310 	orr.w	r3, r3, #16
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_UART_MspInit+0x14c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <HAL_UART_MspInit+0x14c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a41      	ldr	r2, [pc, #260]	; (800170c <HAL_UART_MspInit+0x14c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <HAL_UART_MspInit+0x14c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800161a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800162c:	2307      	movs	r3, #7
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4836      	ldr	r0, [pc, #216]	; (8001710 <HAL_UART_MspInit+0x150>)
 8001638:	f000 fec0 	bl	80023bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <HAL_UART_MspInit+0x154>)
 800163e:	4a36      	ldr	r2, [pc, #216]	; (8001718 <HAL_UART_MspInit+0x158>)
 8001640:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_UART_MspInit+0x154>)
 8001644:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001648:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_UART_MspInit+0x154>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001650:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_UART_MspInit+0x154>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_UART_MspInit+0x154>)
 8001658:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800165c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_UART_MspInit+0x154>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_UART_MspInit+0x154>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800166a:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <HAL_UART_MspInit+0x154>)
 800166c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001670:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_UART_MspInit+0x154>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_UART_MspInit+0x154>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800167e:	4825      	ldr	r0, [pc, #148]	; (8001714 <HAL_UART_MspInit+0x154>)
 8001680:	f000 fb2c 	bl	8001cdc <HAL_DMA_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800168a:	f7ff ff6b 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a20      	ldr	r2, [pc, #128]	; (8001714 <HAL_UART_MspInit+0x154>)
 8001692:	639a      	str	r2, [r3, #56]	; 0x38
 8001694:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <HAL_UART_MspInit+0x154>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800169a:	e030      	b.n	80016fe <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_UART_MspInit+0x15c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12b      	bne.n	80016fe <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_UART_MspInit+0x14c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_UART_MspInit+0x14c>)
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_UART_MspInit+0x14c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_UART_MspInit+0x14c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a10      	ldr	r2, [pc, #64]	; (800170c <HAL_UART_MspInit+0x14c>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_UART_MspInit+0x14c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016de:	230c      	movs	r3, #12
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ee:	2307      	movs	r3, #7
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_UART_MspInit+0x150>)
 80016fa:	f000 fe5f 	bl	80023bc <HAL_GPIO_Init>
}
 80016fe:	bf00      	nop
 8001700:	3730      	adds	r7, #48	; 0x30
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40011000 	.word	0x40011000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	20000278 	.word	0x20000278
 8001718:	40026440 	.word	0x40026440
 800171c:	40004400 	.word	0x40004400

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176c:	f000 f960 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA2_Stream2_IRQHandler+0x10>)
 800177a:	f000 fbb5 	bl	8001ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000278 	.word	0x20000278

08001788 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return 1;
 800178c:	2301      	movs	r3, #1
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_kill>:

int _kill(int pid, int sig)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017a2:	f003 fc07 	bl	8004fb4 <__errno>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2216      	movs	r2, #22
 80017aa:	601a      	str	r2, [r3, #0]
  return -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_exit>:

void _exit (int status)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ffe7 	bl	8001798 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ca:	e7fe      	b.n	80017ca <_exit+0x12>

080017cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e00a      	b.n	80017f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017de:	f3af 8000 	nop.w
 80017e2:	4601      	mov	r1, r0
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	b2ca      	uxtb	r2, r1
 80017ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbf0      	blt.n	80017de <_read+0x12>
  }

  return len;
 80017fc:	687b      	ldr	r3, [r7, #4]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e009      	b.n	800182c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	60ba      	str	r2, [r7, #8]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fd85 	bl	8001330 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbf1      	blt.n	8001818 <_write+0x12>
  }
  return len;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_close>:

int _close(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001866:	605a      	str	r2, [r3, #4]
  return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_isatty>:

int _isatty(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f003 fb6c 	bl	8004fb4 <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20020000 	.word	0x20020000
 8001908:	00000400 	.word	0x00000400
 800190c:	20000940 	.word	0x20000940
 8001910:	20000a98 	.word	0x20000a98

08001914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193e:	490e      	ldr	r1, [pc, #56]	; (8001978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001940:	4a0e      	ldr	r2, [pc, #56]	; (800197c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001944:	e002      	b.n	800194c <LoopCopyDataInit>

08001946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194a:	3304      	adds	r3, #4

0800194c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800194c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001950:	d3f9      	bcc.n	8001946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001954:	4c0b      	ldr	r4, [pc, #44]	; (8001984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001958:	e001      	b.n	800195e <LoopFillZerobss>

0800195a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800195c:	3204      	adds	r2, #4

0800195e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001960:	d3fb      	bcc.n	800195a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001962:	f7ff ffd7 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001966:	f003 fb2b 	bl	8004fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196a:	f7ff fb61 	bl	8001030 <main>
  bx  lr    
 800196e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800197c:	08009494 	.word	0x08009494
  ldr r2, =_sbss
 8001980:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001984:	20000a94 	.word	0x20000a94

08001988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <HAL_Init+0x40>)
 8001996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_Init+0x40>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_Init+0x40>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 f94f 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fdd6 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f967 	bl	8001cc2 <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 f92f 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x20>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x24>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_IncTick+0x24>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000944 	.word	0x20000944

08001a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_GetTick+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000944 	.word	0x20000944

08001a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff ffee 	bl	8001a58 <HAL_GetTick>
 8001a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d005      	beq.n	8001a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_Delay+0x44>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a96:	bf00      	nop
 8001a98:	f7ff ffde 	bl	8001a58 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d8f7      	bhi.n	8001a98 <HAL_Delay+0x28>
  {
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0b      	blt.n	8001b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4907      	ldr	r1, [pc, #28]	; (8001b54 <__NVIC_EnableIRQ+0x38>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff8e 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff29 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff3e 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff8e 	bl	8001bac <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5d 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff31 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa2 	bl	8001c14 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff feb6 	bl	8001a58 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e099      	b.n	8001e2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d18:	e00f      	b.n	8001d3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d1a:	f7ff fe9d 	bl	8001a58 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d908      	bls.n	8001d3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2203      	movs	r2, #3
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e078      	b.n	8001e2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e8      	bne.n	8001d1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <HAL_DMA_Init+0x158>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d107      	bne.n	8001da4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f023 0307 	bic.w	r3, r3, #7
 8001dba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d117      	bne.n	8001dfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00e      	beq.n	8001dfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fa6f 	bl	80022c4 <DMA_CheckFifoParam>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2240      	movs	r2, #64	; 0x40
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e016      	b.n	8001e2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fa26 	bl	8002258 <DMA_CalcBaseAndBitshift>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	223f      	movs	r2, #63	; 0x3f
 8001e16:	409a      	lsls	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	f010803f 	.word	0xf010803f

08001e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_DMA_Start_IT+0x26>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e040      	b.n	8001ee0 <HAL_DMA_Start_IT+0xa8>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d12f      	bne.n	8001ed2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2202      	movs	r2, #2
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f9b8 	bl	80021fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	223f      	movs	r2, #63	; 0x3f
 8001e92:	409a      	lsls	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0216 	orr.w	r2, r2, #22
 8001ea6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0208 	orr.w	r2, r2, #8
 8001ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e005      	b.n	8001ede <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eda:	2302      	movs	r3, #2
 8001edc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef4:	4b8e      	ldr	r3, [pc, #568]	; (8002130 <HAL_DMA_IRQHandler+0x248>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a8e      	ldr	r2, [pc, #568]	; (8002134 <HAL_DMA_IRQHandler+0x24c>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0a9b      	lsrs	r3, r3, #10
 8001f00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2208      	movs	r2, #8
 8001f14:	409a      	lsls	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d01a      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0204 	bic.w	r2, r2, #4
 8001f3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	2208      	movs	r2, #8
 8001f42:	409a      	lsls	r2, r3
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	2201      	movs	r2, #1
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d012      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	2201      	movs	r2, #1
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	2204      	movs	r2, #4
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d012      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	2204      	movs	r2, #4
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f043 0204 	orr.w	r2, r3, #4
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d043      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d03c      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d018      	beq.n	800202a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d108      	bne.n	8002018 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d024      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
 8002016:	e01f      	b.n	8002058 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	e016      	b.n	8002058 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0208 	bic.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2220      	movs	r2, #32
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 808f 	beq.w	8002188 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8087 	beq.w	8002188 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	2220      	movs	r2, #32
 8002080:	409a      	lsls	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b05      	cmp	r3, #5
 8002090:	d136      	bne.n	8002100 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0216 	bic.w	r2, r2, #22
 80020a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_DMA_IRQHandler+0x1da>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0208 	bic.w	r2, r2, #8
 80020d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	223f      	movs	r2, #63	; 0x3f
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d07e      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
        }
        return;
 80020fe:	e079      	b.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01d      	beq.n	800214a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	2b00      	cmp	r3, #0
 8002122:	d031      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e02c      	b.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000
 8002134:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d023      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
 8002148:	e01e      	b.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10f      	bne.n	8002178 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0210 	bic.w	r2, r2, #16
 8002166:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	2b00      	cmp	r3, #0
 800218e:	d032      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d022      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2205      	movs	r2, #5
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3301      	adds	r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d307      	bcc.n	80021d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f2      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x2cc>
 80021ce:	e000      	b.n	80021d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
 80021f2:	e000      	b.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021f4:	bf00      	nop
    }
  }
}
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002218:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b40      	cmp	r3, #64	; 0x40
 8002228:	d108      	bne.n	800223c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800223a:	e007      	b.n	800224c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3b10      	subs	r3, #16
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <DMA_CalcBaseAndBitshift+0x64>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002272:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d909      	bls.n	800229a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	1d1a      	adds	r2, r3, #4
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	659a      	str	r2, [r3, #88]	; 0x58
 8002298:	e007      	b.n	80022aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	aaaaaaab 	.word	0xaaaaaaab
 80022c0:	08009038 	.word	0x08009038

080022c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d11f      	bne.n	800231e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d856      	bhi.n	8002392 <DMA_CheckFifoParam+0xce>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <DMA_CheckFifoParam+0x28>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	0800230f 	.word	0x0800230f
 80022f4:	080022fd 	.word	0x080022fd
 80022f8:	08002393 	.word	0x08002393
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d046      	beq.n	8002396 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230c:	e043      	b.n	8002396 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002316:	d140      	bne.n	800239a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800231c:	e03d      	b.n	800239a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002326:	d121      	bne.n	800236c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d837      	bhi.n	800239e <DMA_CheckFifoParam+0xda>
 800232e:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <DMA_CheckFifoParam+0x70>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002345 	.word	0x08002345
 8002338:	0800234b 	.word	0x0800234b
 800233c:	08002345 	.word	0x08002345
 8002340:	0800235d 	.word	0x0800235d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      break;
 8002348:	e030      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d025      	beq.n	80023a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235a:	e022      	b.n	80023a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002364:	d11f      	bne.n	80023a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800236a:	e01c      	b.n	80023a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d903      	bls.n	800237a <DMA_CheckFifoParam+0xb6>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d003      	beq.n	8002380 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002378:	e018      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
      break;
 800237e:	e015      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e00b      	b.n	80023aa <DMA_CheckFifoParam+0xe6>
      break;
 8002392:	bf00      	nop
 8002394:	e00a      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e008      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e006      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e004      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 80023a2:	bf00      	nop
 80023a4:	e002      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;   
 80023a6:	bf00      	nop
 80023a8:	e000      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 80023aa:	bf00      	nop
    }
  } 
  
  return status; 
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e165      	b.n	80026a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f040 8154 	bne.w	800269e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d005      	beq.n	800240e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	2b02      	cmp	r3, #2
 800240c:	d130      	bne.n	8002470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 0201 	and.w	r2, r3, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b03      	cmp	r3, #3
 800247a:	d017      	beq.n	80024ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d123      	bne.n	8002500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	08da      	lsrs	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3208      	adds	r2, #8
 80024c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	08da      	lsrs	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3208      	adds	r2, #8
 80024fa:	69b9      	ldr	r1, [r7, #24]
 80024fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0203 	and.w	r2, r3, #3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80ae 	beq.w	800269e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b5d      	ldr	r3, [pc, #372]	; (80026bc <HAL_GPIO_Init+0x300>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a5c      	ldr	r2, [pc, #368]	; (80026bc <HAL_GPIO_Init+0x300>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b5a      	ldr	r3, [pc, #360]	; (80026bc <HAL_GPIO_Init+0x300>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255e:	4a58      	ldr	r2, [pc, #352]	; (80026c0 <HAL_GPIO_Init+0x304>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4f      	ldr	r2, [pc, #316]	; (80026c4 <HAL_GPIO_Init+0x308>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d025      	beq.n	80025d6 <HAL_GPIO_Init+0x21a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <HAL_GPIO_Init+0x30c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <HAL_GPIO_Init+0x216>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4d      	ldr	r2, [pc, #308]	; (80026cc <HAL_GPIO_Init+0x310>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d019      	beq.n	80025ce <HAL_GPIO_Init+0x212>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4c      	ldr	r2, [pc, #304]	; (80026d0 <HAL_GPIO_Init+0x314>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_GPIO_Init+0x20e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4b      	ldr	r2, [pc, #300]	; (80026d4 <HAL_GPIO_Init+0x318>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00d      	beq.n	80025c6 <HAL_GPIO_Init+0x20a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4a      	ldr	r2, [pc, #296]	; (80026d8 <HAL_GPIO_Init+0x31c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x206>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a49      	ldr	r2, [pc, #292]	; (80026dc <HAL_GPIO_Init+0x320>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_GPIO_Init+0x202>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e00c      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025be:	2307      	movs	r3, #7
 80025c0:	e00a      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025c2:	2305      	movs	r3, #5
 80025c4:	e008      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025ca:	2303      	movs	r3, #3
 80025cc:	e004      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025d6:	2300      	movs	r3, #0
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f002 0203 	and.w	r2, r2, #3
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	4093      	lsls	r3, r2
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e8:	4935      	ldr	r1, [pc, #212]	; (80026c0 <HAL_GPIO_Init+0x304>)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f6:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <HAL_GPIO_Init+0x324>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261a:	4a31      	ldr	r2, [pc, #196]	; (80026e0 <HAL_GPIO_Init+0x324>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002644:	4a26      	ldr	r2, [pc, #152]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_GPIO_Init+0x324>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266e:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002698:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <HAL_GPIO_Init+0x324>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3301      	adds	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	f67f ae96 	bls.w	80023d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40013800 	.word	0x40013800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40021400 	.word	0x40021400
 80026dc:	40021800 	.word	0x40021800
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0cc      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d90c      	bls.n	8002754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0b8      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002784:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800278e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	494d      	ldr	r1, [pc, #308]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d044      	beq.n	8002838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d119      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e07f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e067      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4934      	ldr	r1, [pc, #208]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002808:	f7ff f926 	bl	8001a58 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7ff f922 	bl	8001a58 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e04f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 020c 	and.w	r2, r3, #12
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1eb      	bne.n	8002810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d20c      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e032      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4916      	ldr	r1, [pc, #88]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	490e      	ldr	r1, [pc, #56]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800289e:	f000 f855 	bl	800294c <HAL_RCC_GetSysClockFreq>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	490a      	ldr	r1, [pc, #40]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	5ccb      	ldrb	r3, [r1, r3]
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	4a09      	ldr	r2, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f886 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023c00 	.word	0x40023c00
 80028d4:	40023800 	.word	0x40023800
 80028d8:	08009020 	.word	0x08009020
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000004 	.word	0x20000004

080028e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000000 	.word	0x20000000

080028fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002900:	f7ff fff0 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	0a9b      	lsrs	r3, r3, #10
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	08009030 	.word	0x08009030

08002924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002928:	f7ff ffdc 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0b5b      	lsrs	r3, r3, #13
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	08009030 	.word	0x08009030

0800294c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002950:	b0ae      	sub	sp, #184	; 0xb8
 8002952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002972:	4bcb      	ldr	r3, [pc, #812]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b0c      	cmp	r3, #12
 800297c:	f200 8206 	bhi.w	8002d8c <HAL_RCC_GetSysClockFreq+0x440>
 8002980:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	080029bd 	.word	0x080029bd
 800298c:	08002d8d 	.word	0x08002d8d
 8002990:	08002d8d 	.word	0x08002d8d
 8002994:	08002d8d 	.word	0x08002d8d
 8002998:	080029c5 	.word	0x080029c5
 800299c:	08002d8d 	.word	0x08002d8d
 80029a0:	08002d8d 	.word	0x08002d8d
 80029a4:	08002d8d 	.word	0x08002d8d
 80029a8:	080029cd 	.word	0x080029cd
 80029ac:	08002d8d 	.word	0x08002d8d
 80029b0:	08002d8d 	.word	0x08002d8d
 80029b4:	08002d8d 	.word	0x08002d8d
 80029b8:	08002bbd 	.word	0x08002bbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029bc:	4bb9      	ldr	r3, [pc, #740]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x358>)
 80029be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80029c2:	e1e7      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029c4:	4bb8      	ldr	r3, [pc, #736]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80029c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029ca:	e1e3      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029cc:	4bb4      	ldr	r3, [pc, #720]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d8:	4bb1      	ldr	r3, [pc, #708]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d071      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e4:	4bae      	ldr	r3, [pc, #696]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	2200      	movs	r2, #0
 80029ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80029f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a0a:	4622      	mov	r2, r4
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	f04f 0000 	mov.w	r0, #0
 8002a12:	f04f 0100 	mov.w	r1, #0
 8002a16:	0159      	lsls	r1, r3, #5
 8002a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a1c:	0150      	lsls	r0, r2, #5
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4621      	mov	r1, r4
 8002a24:	1a51      	subs	r1, r2, r1
 8002a26:	6439      	str	r1, [r7, #64]	; 0x40
 8002a28:	4629      	mov	r1, r5
 8002a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002a3c:	4649      	mov	r1, r9
 8002a3e:	018b      	lsls	r3, r1, #6
 8002a40:	4641      	mov	r1, r8
 8002a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a46:	4641      	mov	r1, r8
 8002a48:	018a      	lsls	r2, r1, #6
 8002a4a:	4641      	mov	r1, r8
 8002a4c:	1a51      	subs	r1, r2, r1
 8002a4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a50:	4649      	mov	r1, r9
 8002a52:	eb63 0301 	sbc.w	r3, r3, r1
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002a64:	4649      	mov	r1, r9
 8002a66:	00cb      	lsls	r3, r1, #3
 8002a68:	4641      	mov	r1, r8
 8002a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a6e:	4641      	mov	r1, r8
 8002a70:	00ca      	lsls	r2, r1, #3
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	4622      	mov	r2, r4
 8002a7a:	189b      	adds	r3, r3, r2
 8002a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7e:	462b      	mov	r3, r5
 8002a80:	460a      	mov	r2, r1
 8002a82:	eb42 0303 	adc.w	r3, r2, r3
 8002a86:	637b      	str	r3, [r7, #52]	; 0x34
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a94:	4629      	mov	r1, r5
 8002a96:	024b      	lsls	r3, r1, #9
 8002a98:	4621      	mov	r1, r4
 8002a9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	024a      	lsls	r2, r1, #9
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ab0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ab4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ab8:	f7fe f906 	bl	8000cc8 <__aeabi_uldivmod>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ac6:	e067      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac8:	4b75      	ldr	r3, [pc, #468]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ad4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ae6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002aea:	4622      	mov	r2, r4
 8002aec:	462b      	mov	r3, r5
 8002aee:	f04f 0000 	mov.w	r0, #0
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	0159      	lsls	r1, r3, #5
 8002af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002afc:	0150      	lsls	r0, r2, #5
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4621      	mov	r1, r4
 8002b04:	1a51      	subs	r1, r2, r1
 8002b06:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b08:	4629      	mov	r1, r5
 8002b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	018b      	lsls	r3, r1, #6
 8002b20:	4641      	mov	r1, r8
 8002b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b26:	4641      	mov	r1, r8
 8002b28:	018a      	lsls	r2, r1, #6
 8002b2a:	4641      	mov	r1, r8
 8002b2c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b30:	4649      	mov	r1, r9
 8002b32:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b4a:	4692      	mov	sl, r2
 8002b4c:	469b      	mov	fp, r3
 8002b4e:	4623      	mov	r3, r4
 8002b50:	eb1a 0303 	adds.w	r3, sl, r3
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	462b      	mov	r3, r5
 8002b58:	eb4b 0303 	adc.w	r3, fp, r3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	028b      	lsls	r3, r1, #10
 8002b6e:	4621      	mov	r1, r4
 8002b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b74:	4621      	mov	r1, r4
 8002b76:	028a      	lsls	r2, r1, #10
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b80:	2200      	movs	r2, #0
 8002b82:	673b      	str	r3, [r7, #112]	; 0x70
 8002b84:	677a      	str	r2, [r7, #116]	; 0x74
 8002b86:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b8a:	f7fe f89d 	bl	8000cc8 <__aeabi_uldivmod>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4613      	mov	r3, r2
 8002b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b98:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bba:	e0eb      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bbc:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bc8:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d06b      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd4:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	2200      	movs	r2, #0
 8002bdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be6:	663b      	str	r3, [r7, #96]	; 0x60
 8002be8:	2300      	movs	r3, #0
 8002bea:	667b      	str	r3, [r7, #100]	; 0x64
 8002bec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002bf0:	4622      	mov	r2, r4
 8002bf2:	462b      	mov	r3, r5
 8002bf4:	f04f 0000 	mov.w	r0, #0
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	0159      	lsls	r1, r3, #5
 8002bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c02:	0150      	lsls	r0, r2, #5
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4621      	mov	r1, r4
 8002c0a:	1a51      	subs	r1, r2, r1
 8002c0c:	61b9      	str	r1, [r7, #24]
 8002c0e:	4629      	mov	r1, r5
 8002c10:	eb63 0301 	sbc.w	r3, r3, r1
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c22:	4659      	mov	r1, fp
 8002c24:	018b      	lsls	r3, r1, #6
 8002c26:	4651      	mov	r1, sl
 8002c28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c2c:	4651      	mov	r1, sl
 8002c2e:	018a      	lsls	r2, r1, #6
 8002c30:	4651      	mov	r1, sl
 8002c32:	ebb2 0801 	subs.w	r8, r2, r1
 8002c36:	4659      	mov	r1, fp
 8002c38:	eb63 0901 	sbc.w	r9, r3, r1
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c50:	4690      	mov	r8, r2
 8002c52:	4699      	mov	r9, r3
 8002c54:	4623      	mov	r3, r4
 8002c56:	eb18 0303 	adds.w	r3, r8, r3
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	462b      	mov	r3, r5
 8002c5e:	eb49 0303 	adc.w	r3, r9, r3
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c70:	4629      	mov	r1, r5
 8002c72:	024b      	lsls	r3, r1, #9
 8002c74:	4621      	mov	r1, r4
 8002c76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	024a      	lsls	r2, r1, #9
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c86:	2200      	movs	r2, #0
 8002c88:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c8a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002c8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c90:	f7fe f81a 	bl	8000cc8 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4613      	mov	r3, r2
 8002c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c9e:	e065      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x420>
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cac:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cbc:	653b      	str	r3, [r7, #80]	; 0x50
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	657b      	str	r3, [r7, #84]	; 0x54
 8002cc2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002cc6:	4642      	mov	r2, r8
 8002cc8:	464b      	mov	r3, r9
 8002cca:	f04f 0000 	mov.w	r0, #0
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	0159      	lsls	r1, r3, #5
 8002cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd8:	0150      	lsls	r0, r2, #5
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4641      	mov	r1, r8
 8002ce0:	1a51      	subs	r1, r2, r1
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	4649      	mov	r1, r9
 8002ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002cf8:	4659      	mov	r1, fp
 8002cfa:	018b      	lsls	r3, r1, #6
 8002cfc:	4651      	mov	r1, sl
 8002cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d02:	4651      	mov	r1, sl
 8002d04:	018a      	lsls	r2, r1, #6
 8002d06:	4651      	mov	r1, sl
 8002d08:	1a54      	subs	r4, r2, r1
 8002d0a:	4659      	mov	r1, fp
 8002d0c:	eb63 0501 	sbc.w	r5, r3, r1
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	00eb      	lsls	r3, r5, #3
 8002d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d1e:	00e2      	lsls	r2, r4, #3
 8002d20:	4614      	mov	r4, r2
 8002d22:	461d      	mov	r5, r3
 8002d24:	4643      	mov	r3, r8
 8002d26:	18e3      	adds	r3, r4, r3
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	464b      	mov	r3, r9
 8002d2c:	eb45 0303 	adc.w	r3, r5, r3
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d3e:	4629      	mov	r1, r5
 8002d40:	028b      	lsls	r3, r1, #10
 8002d42:	4621      	mov	r1, r4
 8002d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d48:	4621      	mov	r1, r4
 8002d4a:	028a      	lsls	r2, r1, #10
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d54:	2200      	movs	r2, #0
 8002d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d58:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d5e:	f7fd ffb3 	bl	8000cc8 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4613      	mov	r3, r2
 8002d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	0f1b      	lsrs	r3, r3, #28
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d8a:	e003      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	37b8      	adds	r7, #184	; 0xb8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	00f42400 	.word	0x00f42400

08002dac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e28d      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8083 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dcc:	4b94      	ldr	r3, [pc, #592]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d019      	beq.n	8002e0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dd8:	4b91      	ldr	r3, [pc, #580]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002de4:	4b8e      	ldr	r3, [pc, #568]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df0:	d00c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df2:	4b8b      	ldr	r3, [pc, #556]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d112      	bne.n	8002e24 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfe:	4b88      	ldr	r3, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0a:	d10b      	bne.n	8002e24 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	4b84      	ldr	r3, [pc, #528]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d05b      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x124>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d157      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e25a      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2c:	d106      	bne.n	8002e3c <HAL_RCC_OscConfig+0x90>
 8002e2e:	4b7c      	ldr	r3, [pc, #496]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a7b      	ldr	r2, [pc, #492]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e01d      	b.n	8002e78 <HAL_RCC_OscConfig+0xcc>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0xb4>
 8002e46:	4b76      	ldr	r3, [pc, #472]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a75      	ldr	r2, [pc, #468]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b73      	ldr	r3, [pc, #460]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a72      	ldr	r2, [pc, #456]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCC_OscConfig+0xcc>
 8002e60:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a6e      	ldr	r2, [pc, #440]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b6c      	ldr	r3, [pc, #432]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a6b      	ldr	r2, [pc, #428]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe fdea 	bl	8001a58 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fe fde6 	bl	8001a58 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e21f      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	4b61      	ldr	r3, [pc, #388]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0xdc>
 8002ea6:	e014      	b.n	8002ed2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fdd6 	bl	8001a58 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fe fdd2 	bl	8001a58 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	; 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e20b      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec2:	4b57      	ldr	r3, [pc, #348]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x104>
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d06f      	beq.n	8002fbe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ede:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d017      	beq.n	8002f1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002eea:	4b4d      	ldr	r3, [pc, #308]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d11c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0e:	4b44      	ldr	r3, [pc, #272]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d116      	bne.n	8002f48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_RCC_OscConfig+0x186>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e1d3      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f32:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4937      	ldr	r1, [pc, #220]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	e03a      	b.n	8002fbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d020      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f50:	4b34      	ldr	r3, [pc, #208]	; (8003024 <HAL_RCC_OscConfig+0x278>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fe fd7f 	bl	8001a58 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5e:	f7fe fd7b 	bl	8001a58 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e1b4      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b28      	ldr	r3, [pc, #160]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4925      	ldr	r1, [pc, #148]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
 8002f90:	e015      	b.n	8002fbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCC_OscConfig+0x278>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fd5e 	bl	8001a58 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7fe fd5a 	bl	8001a58 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e193      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d036      	beq.n	8003038 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d016      	beq.n	8003000 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_RCC_OscConfig+0x27c>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fd3e 	bl	8001a58 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fe fd3a 	bl	8001a58 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e173      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x234>
 8002ffe:	e01b      	b.n	8003038 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_RCC_OscConfig+0x27c>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7fe fd27 	bl	8001a58 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300c:	e00e      	b.n	800302c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300e:	f7fe fd23 	bl	8001a58 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d907      	bls.n	800302c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e15c      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
 8003020:	40023800 	.word	0x40023800
 8003024:	42470000 	.word	0x42470000
 8003028:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302c:	4b8a      	ldr	r3, [pc, #552]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 800302e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ea      	bne.n	800300e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8097 	beq.w	8003174 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003046:	2300      	movs	r3, #0
 8003048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304a:	4b83      	ldr	r3, [pc, #524]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	4b7f      	ldr	r3, [pc, #508]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a7e      	ldr	r2, [pc, #504]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	4b7c      	ldr	r3, [pc, #496]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003076:	4b79      	ldr	r3, [pc, #484]	; (800325c <HAL_RCC_OscConfig+0x4b0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d118      	bne.n	80030b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003082:	4b76      	ldr	r3, [pc, #472]	; (800325c <HAL_RCC_OscConfig+0x4b0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a75      	ldr	r2, [pc, #468]	; (800325c <HAL_RCC_OscConfig+0x4b0>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308e:	f7fe fce3 	bl	8001a58 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003096:	f7fe fcdf 	bl	8001a58 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e118      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	4b6c      	ldr	r3, [pc, #432]	; (800325c <HAL_RCC_OscConfig+0x4b0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x31e>
 80030bc:	4b66      	ldr	r3, [pc, #408]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4a65      	ldr	r2, [pc, #404]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6713      	str	r3, [r2, #112]	; 0x70
 80030c8:	e01c      	b.n	8003104 <HAL_RCC_OscConfig+0x358>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b05      	cmp	r3, #5
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x340>
 80030d2:	4b61      	ldr	r3, [pc, #388]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	4a60      	ldr	r2, [pc, #384]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6713      	str	r3, [r2, #112]	; 0x70
 80030de:	4b5e      	ldr	r3, [pc, #376]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ea:	e00b      	b.n	8003104 <HAL_RCC_OscConfig+0x358>
 80030ec:	4b5a      	ldr	r3, [pc, #360]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	4a59      	ldr	r2, [pc, #356]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	6713      	str	r3, [r2, #112]	; 0x70
 80030f8:	4b57      	ldr	r3, [pc, #348]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a56      	ldr	r2, [pc, #344]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80030fe:	f023 0304 	bic.w	r3, r3, #4
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d015      	beq.n	8003138 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7fe fca4 	bl	8001a58 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003112:	e00a      	b.n	800312a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003114:	f7fe fca0 	bl	8001a58 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0d7      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	4b4b      	ldr	r3, [pc, #300]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0ee      	beq.n	8003114 <HAL_RCC_OscConfig+0x368>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fe fc8e 	bl	8001a58 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fe fc8a 	bl	8001a58 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e0c1      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003156:	4b40      	ldr	r3, [pc, #256]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1ee      	bne.n	8003140 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d105      	bne.n	8003174 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003168:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	4a3a      	ldr	r2, [pc, #232]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 800316e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003172:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80ad 	beq.w	80032d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800317e:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b08      	cmp	r3, #8
 8003188:	d060      	beq.n	800324c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d145      	bne.n	800321e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	4b33      	ldr	r3, [pc, #204]	; (8003260 <HAL_RCC_OscConfig+0x4b4>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe fc5e 	bl	8001a58 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe fc5a 	bl	8001a58 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e093      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	3b01      	subs	r3, #1
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	061b      	lsls	r3, r3, #24
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	071b      	lsls	r3, r3, #28
 80031ea:	491b      	ldr	r1, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_RCC_OscConfig+0x4b4>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fe fc2f 	bl	8001a58 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fe:	f7fe fc2b 	bl	8001a58 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e064      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x452>
 800321c:	e05c      	b.n	80032d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <HAL_RCC_OscConfig+0x4b4>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe fc18 	bl	8001a58 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322c:	f7fe fc14 	bl	8001a58 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e04d      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCC_OscConfig+0x4ac>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x480>
 800324a:	e045      	b.n	80032d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d107      	bne.n	8003264 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e040      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
 8003258:	40023800 	.word	0x40023800
 800325c:	40007000 	.word	0x40007000
 8003260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003264:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <HAL_RCC_OscConfig+0x538>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d030      	beq.n	80032d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d129      	bne.n	80032d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328a:	429a      	cmp	r2, r3
 800328c:	d122      	bne.n	80032d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003294:	4013      	ands	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800329a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800329c:	4293      	cmp	r3, r2
 800329e:	d119      	bne.n	80032d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	3b01      	subs	r3, #1
 80032ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d10f      	bne.n	80032d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e03f      	b.n	800337a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe f956 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	; 0x24
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800332a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fb9b 	bl	8003a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b08a      	sub	sp, #40	; 0x28
 8003386:	af02      	add	r7, sp, #8
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d17c      	bne.n	800349c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_UART_Transmit+0x2c>
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e075      	b.n	800349e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_UART_Transmit+0x3e>
 80033bc:	2302      	movs	r3, #2
 80033be:	e06e      	b.n	800349e <HAL_UART_Transmit+0x11c>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2221      	movs	r2, #33	; 0x21
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033d6:	f7fe fb3f 	bl	8001a58 <HAL_GetTick>
 80033da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f0:	d108      	bne.n	8003404 <HAL_UART_Transmit+0x82>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d104      	bne.n	8003404 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	e003      	b.n	800340c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003408:	2300      	movs	r3, #0
 800340a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003414:	e02a      	b.n	800346c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2200      	movs	r2, #0
 800341e:	2180      	movs	r1, #128	; 0x80
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f988 	bl	8003736 <UART_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e036      	b.n	800349e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10b      	bne.n	800344e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	3302      	adds	r3, #2
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	e007      	b.n	800345e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	3301      	adds	r3, #1
 800345c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1cf      	bne.n	8003416 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2200      	movs	r2, #0
 800347e:	2140      	movs	r1, #64	; 0x40
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f958 	bl	8003736 <UART_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e006      	b.n	800349e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	e000      	b.n	800349e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	4613      	mov	r3, r2
 80034b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d11d      	bne.n	80034fc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_UART_Receive_DMA+0x26>
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e016      	b.n	80034fe <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_UART_Receive_DMA+0x38>
 80034da:	2302      	movs	r3, #2
 80034dc:	e00f      	b.n	80034fe <HAL_UART_Receive_DMA+0x58>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	461a      	mov	r2, r3
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f98e 	bl	8003814 <UART_Start_Receive_DMA>
 80034f8:	4603      	mov	r3, r0
 80034fa:	e000      	b.n	80034fe <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b09c      	sub	sp, #112	; 0x70
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d172      	bne.n	8003648 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003564:	2200      	movs	r2, #0
 8003566:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003572:	e853 3f00 	ldrex	r3, [r3]
 8003576:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800357e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003588:	65ba      	str	r2, [r7, #88]	; 0x58
 800358a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800358e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003590:	e841 2300 	strex	r3, r2, [r1]
 8003594:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e5      	bne.n	8003568 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3314      	adds	r3, #20
 80035a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	667b      	str	r3, [r7, #100]	; 0x64
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3314      	adds	r3, #20
 80035ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035bc:	647a      	str	r2, [r7, #68]	; 0x44
 80035be:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035c4:	e841 2300 	strex	r3, r2, [r1]
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e5      	bne.n	800359c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3314      	adds	r3, #20
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	e853 3f00 	ldrex	r3, [r3]
 80035de:	623b      	str	r3, [r7, #32]
   return(result);
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e6:	663b      	str	r3, [r7, #96]	; 0x60
 80035e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3314      	adds	r3, #20
 80035ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035f0:	633a      	str	r2, [r7, #48]	; 0x30
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f8:	e841 2300 	strex	r3, r2, [r1]
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e5      	bne.n	80035d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800360c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	2b01      	cmp	r3, #1
 8003612:	d119      	bne.n	8003648 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	330c      	adds	r3, #12
 800361a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	60fb      	str	r3, [r7, #12]
   return(result);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0310 	bic.w	r3, r3, #16
 800362a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800362c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	330c      	adds	r3, #12
 8003632:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003634:	61fa      	str	r2, [r7, #28]
 8003636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	69b9      	ldr	r1, [r7, #24]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	617b      	str	r3, [r7, #20]
   return(result);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e5      	bne.n	8003614 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	2b01      	cmp	r3, #1
 800364e:	d106      	bne.n	800365e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003652:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003654:	4619      	mov	r1, r3
 8003656:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003658:	f7ff ff69 	bl	800352e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800365c:	e002      	b.n	8003664 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800365e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003660:	f7fd fe56 	bl	8001310 <HAL_UART_RxCpltCallback>
}
 8003664:	bf00      	nop
 8003666:	3770      	adds	r7, #112	; 0x70
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	b29b      	uxth	r3, r3
 800368a:	4619      	mov	r1, r3
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff ff4e 	bl	800352e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003692:	e002      	b.n	800369a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff ff36 	bl	8003506 <HAL_UART_RxHalfCpltCallback>
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b21      	cmp	r3, #33	; 0x21
 80036d4:	d108      	bne.n	80036e8 <UART_DMAError+0x46>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2200      	movs	r2, #0
 80036e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80036e2:	68b8      	ldr	r0, [r7, #8]
 80036e4:	f000 f934 	bl	8003950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	bf0c      	ite	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	2300      	movne	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b22      	cmp	r3, #34	; 0x22
 8003708:	d108      	bne.n	800371c <UART_DMAError+0x7a>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003716:	68b8      	ldr	r0, [r7, #8]
 8003718:	f000 f942 	bl	80039a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f043 0210 	orr.w	r2, r3, #16
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003728:	68b8      	ldr	r0, [r7, #8]
 800372a:	f7ff fef6 	bl	800351a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b090      	sub	sp, #64	; 0x40
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	4613      	mov	r3, r2
 8003744:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003746:	e050      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800374a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374e:	d04c      	beq.n	80037ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0x30>
 8003756:	f7fe f97f 	bl	8001a58 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003762:	429a      	cmp	r2, r3
 8003764:	d241      	bcs.n	80037ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800377c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003786:	637a      	str	r2, [r7, #52]	; 0x34
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800378c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e5      	bne.n	8003766 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3314      	adds	r3, #20
 80037a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	613b      	str	r3, [r7, #16]
   return(result);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3314      	adds	r3, #20
 80037b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ba:	623a      	str	r2, [r7, #32]
 80037bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	69f9      	ldr	r1, [r7, #28]
 80037c0:	6a3a      	ldr	r2, [r7, #32]
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e5      	bne.n	800379a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e00f      	b.n	800380a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4013      	ands	r3, r2
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	429a      	cmp	r2, r3
 8003806:	d09f      	beq.n	8003748 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3740      	adds	r7, #64	; 0x40
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b098      	sub	sp, #96	; 0x60
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2222      	movs	r2, #34	; 0x22
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	4a40      	ldr	r2, [pc, #256]	; (8003944 <UART_Start_Receive_DMA+0x130>)
 8003842:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	4a3f      	ldr	r2, [pc, #252]	; (8003948 <UART_Start_Receive_DMA+0x134>)
 800384a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	4a3e      	ldr	r2, [pc, #248]	; (800394c <UART_Start_Receive_DMA+0x138>)
 8003852:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	2200      	movs	r2, #0
 800385a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800385c:	f107 0308 	add.w	r3, r7, #8
 8003860:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3304      	adds	r3, #4
 800386c:	4619      	mov	r1, r3
 800386e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	f7fe fae0 	bl	8001e38 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d019      	beq.n	80038d2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80038c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80038cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e5      	bne.n	800389e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3314      	adds	r3, #20
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	657b      	str	r3, [r7, #84]	; 0x54
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3314      	adds	r3, #20
 80038f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e5      	bne.n	80038d2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3314      	adds	r3, #20
 800390c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	617b      	str	r3, [r7, #20]
   return(result);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800391c:	653b      	str	r3, [r7, #80]	; 0x50
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3314      	adds	r3, #20
 8003924:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003926:	627a      	str	r2, [r7, #36]	; 0x24
 8003928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	6a39      	ldr	r1, [r7, #32]
 800392c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	61fb      	str	r3, [r7, #28]
   return(result);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e5      	bne.n	8003906 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3760      	adds	r7, #96	; 0x60
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	08003547 	.word	0x08003547
 8003948:	0800366d 	.word	0x0800366d
 800394c:	080036a3 	.word	0x080036a3

08003950 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	; 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	60bb      	str	r3, [r7, #8]
   return(result);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	61ba      	str	r2, [r7, #24]
 800397a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6979      	ldr	r1, [r7, #20]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	613b      	str	r3, [r7, #16]
   return(result);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e5      	bne.n	8003958 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003994:	bf00      	nop
 8003996:	3724      	adds	r7, #36	; 0x24
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b095      	sub	sp, #84	; 0x54
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039c8:	643a      	str	r2, [r7, #64]	; 0x40
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e5      	bne.n	80039a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3314      	adds	r3, #20
 80039e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3314      	adds	r3, #20
 80039fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e5      	bne.n	80039dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d119      	bne.n	8003a4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f023 0310 	bic.w	r3, r3, #16
 8003a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a38:	61ba      	str	r2, [r7, #24]
 8003a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6979      	ldr	r1, [r7, #20]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	613b      	str	r3, [r7, #16]
   return(result);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e5      	bne.n	8003a18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a5a:	bf00      	nop
 8003a5c:	3754      	adds	r7, #84	; 0x54
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a6c:	b0c0      	sub	sp, #256	; 0x100
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	68d9      	ldr	r1, [r3, #12]
 8003a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	ea40 0301 	orr.w	r3, r0, r1
 8003a90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ac0:	f021 010c 	bic.w	r1, r1, #12
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae2:	6999      	ldr	r1, [r3, #24]
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	ea40 0301 	orr.w	r3, r0, r1
 8003aee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b8f      	ldr	r3, [pc, #572]	; (8003d34 <UART_SetConfig+0x2cc>)
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d005      	beq.n	8003b08 <UART_SetConfig+0xa0>
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b8d      	ldr	r3, [pc, #564]	; (8003d38 <UART_SetConfig+0x2d0>)
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d104      	bne.n	8003b12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b08:	f7fe ff0c 	bl	8002924 <HAL_RCC_GetPCLK2Freq>
 8003b0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b10:	e003      	b.n	8003b1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b12:	f7fe fef3 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
 8003b16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b24:	f040 810c 	bne.w	8003d40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b3a:	4622      	mov	r2, r4
 8003b3c:	462b      	mov	r3, r5
 8003b3e:	1891      	adds	r1, r2, r2
 8003b40:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b42:	415b      	adcs	r3, r3
 8003b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	eb12 0801 	adds.w	r8, r2, r1
 8003b50:	4629      	mov	r1, r5
 8003b52:	eb43 0901 	adc.w	r9, r3, r1
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b6a:	4690      	mov	r8, r2
 8003b6c:	4699      	mov	r9, r3
 8003b6e:	4623      	mov	r3, r4
 8003b70:	eb18 0303 	adds.w	r3, r8, r3
 8003b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b78:	462b      	mov	r3, r5
 8003b7a:	eb49 0303 	adc.w	r3, r9, r3
 8003b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b96:	460b      	mov	r3, r1
 8003b98:	18db      	adds	r3, r3, r3
 8003b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	eb42 0303 	adc.w	r3, r2, r3
 8003ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ba4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ba8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bac:	f7fd f88c 	bl	8000cc8 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4b61      	ldr	r3, [pc, #388]	; (8003d3c <UART_SetConfig+0x2d4>)
 8003bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	011c      	lsls	r4, r3, #4
 8003bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	1891      	adds	r1, r2, r2
 8003bd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bd8:	415b      	adcs	r3, r3
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003be0:	4641      	mov	r1, r8
 8003be2:	eb12 0a01 	adds.w	sl, r2, r1
 8003be6:	4649      	mov	r1, r9
 8003be8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c00:	4692      	mov	sl, r2
 8003c02:	469b      	mov	fp, r3
 8003c04:	4643      	mov	r3, r8
 8003c06:	eb1a 0303 	adds.w	r3, sl, r3
 8003c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	eb4b 0303 	adc.w	r3, fp, r3
 8003c14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	18db      	adds	r3, r3, r3
 8003c30:	643b      	str	r3, [r7, #64]	; 0x40
 8003c32:	4613      	mov	r3, r2
 8003c34:	eb42 0303 	adc.w	r3, r2, r3
 8003c38:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c42:	f7fd f841 	bl	8000cc8 <__aeabi_uldivmod>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <UART_SetConfig+0x2d4>)
 8003c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	2264      	movs	r2, #100	; 0x64
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	1acb      	subs	r3, r1, r3
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c62:	4b36      	ldr	r3, [pc, #216]	; (8003d3c <UART_SetConfig+0x2d4>)
 8003c64:	fba3 2302 	umull	r2, r3, r3, r2
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c70:	441c      	add	r4, r3
 8003c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c84:	4642      	mov	r2, r8
 8003c86:	464b      	mov	r3, r9
 8003c88:	1891      	adds	r1, r2, r2
 8003c8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c8c:	415b      	adcs	r3, r3
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c94:	4641      	mov	r1, r8
 8003c96:	1851      	adds	r1, r2, r1
 8003c98:	6339      	str	r1, [r7, #48]	; 0x30
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	414b      	adcs	r3, r1
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cac:	4659      	mov	r1, fp
 8003cae:	00cb      	lsls	r3, r1, #3
 8003cb0:	4651      	mov	r1, sl
 8003cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cb6:	4651      	mov	r1, sl
 8003cb8:	00ca      	lsls	r2, r1, #3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	189b      	adds	r3, r3, r2
 8003cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc8:	464b      	mov	r3, r9
 8003cca:	460a      	mov	r2, r1
 8003ccc:	eb42 0303 	adc.w	r3, r2, r3
 8003cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ce0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ce8:	460b      	mov	r3, r1
 8003cea:	18db      	adds	r3, r3, r3
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cee:	4613      	mov	r3, r2
 8003cf0:	eb42 0303 	adc.w	r3, r2, r3
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cfe:	f7fc ffe3 	bl	8000cc8 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <UART_SetConfig+0x2d4>)
 8003d08:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	2164      	movs	r1, #100	; 0x64
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	3332      	adds	r3, #50	; 0x32
 8003d1a:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <UART_SetConfig+0x2d4>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	f003 0207 	and.w	r2, r3, #7
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4422      	add	r2, r4
 8003d2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d30:	e106      	b.n	8003f40 <UART_SetConfig+0x4d8>
 8003d32:	bf00      	nop
 8003d34:	40011000 	.word	0x40011000
 8003d38:	40011400 	.word	0x40011400
 8003d3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d52:	4642      	mov	r2, r8
 8003d54:	464b      	mov	r3, r9
 8003d56:	1891      	adds	r1, r2, r2
 8003d58:	6239      	str	r1, [r7, #32]
 8003d5a:	415b      	adcs	r3, r3
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d62:	4641      	mov	r1, r8
 8003d64:	1854      	adds	r4, r2, r1
 8003d66:	4649      	mov	r1, r9
 8003d68:	eb43 0501 	adc.w	r5, r3, r1
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	00eb      	lsls	r3, r5, #3
 8003d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d7a:	00e2      	lsls	r2, r4, #3
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	461d      	mov	r5, r3
 8003d80:	4643      	mov	r3, r8
 8003d82:	18e3      	adds	r3, r4, r3
 8003d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d88:	464b      	mov	r3, r9
 8003d8a:	eb45 0303 	adc.w	r3, r5, r3
 8003d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dae:	4629      	mov	r1, r5
 8003db0:	008b      	lsls	r3, r1, #2
 8003db2:	4621      	mov	r1, r4
 8003db4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003db8:	4621      	mov	r1, r4
 8003dba:	008a      	lsls	r2, r1, #2
 8003dbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dc0:	f7fc ff82 	bl	8000cc8 <__aeabi_uldivmod>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4b60      	ldr	r3, [pc, #384]	; (8003f4c <UART_SetConfig+0x4e4>)
 8003dca:	fba3 2302 	umull	r2, r3, r3, r2
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	011c      	lsls	r4, r3, #4
 8003dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ddc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003de0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003de4:	4642      	mov	r2, r8
 8003de6:	464b      	mov	r3, r9
 8003de8:	1891      	adds	r1, r2, r2
 8003dea:	61b9      	str	r1, [r7, #24]
 8003dec:	415b      	adcs	r3, r3
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df4:	4641      	mov	r1, r8
 8003df6:	1851      	adds	r1, r2, r1
 8003df8:	6139      	str	r1, [r7, #16]
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	414b      	adcs	r3, r1
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e0c:	4659      	mov	r1, fp
 8003e0e:	00cb      	lsls	r3, r1, #3
 8003e10:	4651      	mov	r1, sl
 8003e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e16:	4651      	mov	r1, sl
 8003e18:	00ca      	lsls	r2, r1, #3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4642      	mov	r2, r8
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e28:	464b      	mov	r3, r9
 8003e2a:	460a      	mov	r2, r1
 8003e2c:	eb42 0303 	adc.w	r3, r2, r3
 8003e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	008b      	lsls	r3, r1, #2
 8003e50:	4641      	mov	r1, r8
 8003e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e56:	4641      	mov	r1, r8
 8003e58:	008a      	lsls	r2, r1, #2
 8003e5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e5e:	f7fc ff33 	bl	8000cc8 <__aeabi_uldivmod>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4611      	mov	r1, r2
 8003e68:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <UART_SetConfig+0x4e4>)
 8003e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	2264      	movs	r2, #100	; 0x64
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	1acb      	subs	r3, r1, r3
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	3332      	adds	r3, #50	; 0x32
 8003e7c:	4a33      	ldr	r2, [pc, #204]	; (8003f4c <UART_SetConfig+0x4e4>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e88:	441c      	add	r4, r3
 8003e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e8e:	2200      	movs	r2, #0
 8003e90:	673b      	str	r3, [r7, #112]	; 0x70
 8003e92:	677a      	str	r2, [r7, #116]	; 0x74
 8003e94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e98:	4642      	mov	r2, r8
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	1891      	adds	r1, r2, r2
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	415b      	adcs	r3, r3
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ea8:	4641      	mov	r1, r8
 8003eaa:	1851      	adds	r1, r2, r1
 8003eac:	6039      	str	r1, [r7, #0]
 8003eae:	4649      	mov	r1, r9
 8003eb0:	414b      	adcs	r3, r1
 8003eb2:	607b      	str	r3, [r7, #4]
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ec0:	4659      	mov	r1, fp
 8003ec2:	00cb      	lsls	r3, r1, #3
 8003ec4:	4651      	mov	r1, sl
 8003ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eca:	4651      	mov	r1, sl
 8003ecc:	00ca      	lsls	r2, r1, #3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	189b      	adds	r3, r3, r2
 8003ed8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eda:	464b      	mov	r3, r9
 8003edc:	460a      	mov	r2, r1
 8003ede:	eb42 0303 	adc.w	r3, r2, r3
 8003ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	663b      	str	r3, [r7, #96]	; 0x60
 8003eee:	667a      	str	r2, [r7, #100]	; 0x64
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003efc:	4649      	mov	r1, r9
 8003efe:	008b      	lsls	r3, r1, #2
 8003f00:	4641      	mov	r1, r8
 8003f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f06:	4641      	mov	r1, r8
 8003f08:	008a      	lsls	r2, r1, #2
 8003f0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f0e:	f7fc fedb 	bl	8000cc8 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <UART_SetConfig+0x4e4>)
 8003f18:	fba3 1302 	umull	r1, r3, r3, r2
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	2164      	movs	r1, #100	; 0x64
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	3332      	adds	r3, #50	; 0x32
 8003f2a:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <UART_SetConfig+0x4e4>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	f003 020f 	and.w	r2, r3, #15
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4422      	add	r2, r4
 8003f3e:	609a      	str	r2, [r3, #8]
}
 8003f40:	bf00      	nop
 8003f42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f46:	46bd      	mov	sp, r7
 8003f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f4c:	51eb851f 	.word	0x51eb851f

08003f50 <__cvt>:
 8003f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	ec55 4b10 	vmov	r4, r5, d0
 8003f58:	2d00      	cmp	r5, #0
 8003f5a:	460e      	mov	r6, r1
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	462b      	mov	r3, r5
 8003f60:	bfbb      	ittet	lt
 8003f62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f66:	461d      	movlt	r5, r3
 8003f68:	2300      	movge	r3, #0
 8003f6a:	232d      	movlt	r3, #45	; 0x2d
 8003f6c:	700b      	strb	r3, [r1, #0]
 8003f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f74:	4691      	mov	r9, r2
 8003f76:	f023 0820 	bic.w	r8, r3, #32
 8003f7a:	bfbc      	itt	lt
 8003f7c:	4622      	movlt	r2, r4
 8003f7e:	4614      	movlt	r4, r2
 8003f80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f84:	d005      	beq.n	8003f92 <__cvt+0x42>
 8003f86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f8a:	d100      	bne.n	8003f8e <__cvt+0x3e>
 8003f8c:	3601      	adds	r6, #1
 8003f8e:	2102      	movs	r1, #2
 8003f90:	e000      	b.n	8003f94 <__cvt+0x44>
 8003f92:	2103      	movs	r1, #3
 8003f94:	ab03      	add	r3, sp, #12
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	ab02      	add	r3, sp, #8
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	ec45 4b10 	vmov	d0, r4, r5
 8003fa0:	4653      	mov	r3, sl
 8003fa2:	4632      	mov	r2, r6
 8003fa4:	f001 f8cc 	bl	8005140 <_dtoa_r>
 8003fa8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003fac:	4607      	mov	r7, r0
 8003fae:	d102      	bne.n	8003fb6 <__cvt+0x66>
 8003fb0:	f019 0f01 	tst.w	r9, #1
 8003fb4:	d022      	beq.n	8003ffc <__cvt+0xac>
 8003fb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fba:	eb07 0906 	add.w	r9, r7, r6
 8003fbe:	d110      	bne.n	8003fe2 <__cvt+0x92>
 8003fc0:	783b      	ldrb	r3, [r7, #0]
 8003fc2:	2b30      	cmp	r3, #48	; 0x30
 8003fc4:	d10a      	bne.n	8003fdc <__cvt+0x8c>
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4620      	mov	r0, r4
 8003fcc:	4629      	mov	r1, r5
 8003fce:	f7fc fd9b 	bl	8000b08 <__aeabi_dcmpeq>
 8003fd2:	b918      	cbnz	r0, 8003fdc <__cvt+0x8c>
 8003fd4:	f1c6 0601 	rsb	r6, r6, #1
 8003fd8:	f8ca 6000 	str.w	r6, [sl]
 8003fdc:	f8da 3000 	ldr.w	r3, [sl]
 8003fe0:	4499      	add	r9, r3
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	4629      	mov	r1, r5
 8003fea:	f7fc fd8d 	bl	8000b08 <__aeabi_dcmpeq>
 8003fee:	b108      	cbz	r0, 8003ff4 <__cvt+0xa4>
 8003ff0:	f8cd 900c 	str.w	r9, [sp, #12]
 8003ff4:	2230      	movs	r2, #48	; 0x30
 8003ff6:	9b03      	ldr	r3, [sp, #12]
 8003ff8:	454b      	cmp	r3, r9
 8003ffa:	d307      	bcc.n	800400c <__cvt+0xbc>
 8003ffc:	9b03      	ldr	r3, [sp, #12]
 8003ffe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004000:	1bdb      	subs	r3, r3, r7
 8004002:	4638      	mov	r0, r7
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	b004      	add	sp, #16
 8004008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400c:	1c59      	adds	r1, r3, #1
 800400e:	9103      	str	r1, [sp, #12]
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e7f0      	b.n	8003ff6 <__cvt+0xa6>

08004014 <__exponent>:
 8004014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004016:	4603      	mov	r3, r0
 8004018:	2900      	cmp	r1, #0
 800401a:	bfb8      	it	lt
 800401c:	4249      	neglt	r1, r1
 800401e:	f803 2b02 	strb.w	r2, [r3], #2
 8004022:	bfb4      	ite	lt
 8004024:	222d      	movlt	r2, #45	; 0x2d
 8004026:	222b      	movge	r2, #43	; 0x2b
 8004028:	2909      	cmp	r1, #9
 800402a:	7042      	strb	r2, [r0, #1]
 800402c:	dd2a      	ble.n	8004084 <__exponent+0x70>
 800402e:	f10d 0207 	add.w	r2, sp, #7
 8004032:	4617      	mov	r7, r2
 8004034:	260a      	movs	r6, #10
 8004036:	4694      	mov	ip, r2
 8004038:	fb91 f5f6 	sdiv	r5, r1, r6
 800403c:	fb06 1415 	mls	r4, r6, r5, r1
 8004040:	3430      	adds	r4, #48	; 0x30
 8004042:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004046:	460c      	mov	r4, r1
 8004048:	2c63      	cmp	r4, #99	; 0x63
 800404a:	f102 32ff 	add.w	r2, r2, #4294967295
 800404e:	4629      	mov	r1, r5
 8004050:	dcf1      	bgt.n	8004036 <__exponent+0x22>
 8004052:	3130      	adds	r1, #48	; 0x30
 8004054:	f1ac 0402 	sub.w	r4, ip, #2
 8004058:	f802 1c01 	strb.w	r1, [r2, #-1]
 800405c:	1c41      	adds	r1, r0, #1
 800405e:	4622      	mov	r2, r4
 8004060:	42ba      	cmp	r2, r7
 8004062:	d30a      	bcc.n	800407a <__exponent+0x66>
 8004064:	f10d 0209 	add.w	r2, sp, #9
 8004068:	eba2 020c 	sub.w	r2, r2, ip
 800406c:	42bc      	cmp	r4, r7
 800406e:	bf88      	it	hi
 8004070:	2200      	movhi	r2, #0
 8004072:	4413      	add	r3, r2
 8004074:	1a18      	subs	r0, r3, r0
 8004076:	b003      	add	sp, #12
 8004078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800407a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800407e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004082:	e7ed      	b.n	8004060 <__exponent+0x4c>
 8004084:	2330      	movs	r3, #48	; 0x30
 8004086:	3130      	adds	r1, #48	; 0x30
 8004088:	7083      	strb	r3, [r0, #2]
 800408a:	70c1      	strb	r1, [r0, #3]
 800408c:	1d03      	adds	r3, r0, #4
 800408e:	e7f1      	b.n	8004074 <__exponent+0x60>

08004090 <_printf_float>:
 8004090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004094:	ed2d 8b02 	vpush	{d8}
 8004098:	b08d      	sub	sp, #52	; 0x34
 800409a:	460c      	mov	r4, r1
 800409c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80040a0:	4616      	mov	r6, r2
 80040a2:	461f      	mov	r7, r3
 80040a4:	4605      	mov	r5, r0
 80040a6:	f000 ff3b 	bl	8004f20 <_localeconv_r>
 80040aa:	f8d0 a000 	ldr.w	sl, [r0]
 80040ae:	4650      	mov	r0, sl
 80040b0:	f7fc f8fe 	bl	80002b0 <strlen>
 80040b4:	2300      	movs	r3, #0
 80040b6:	930a      	str	r3, [sp, #40]	; 0x28
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	9305      	str	r3, [sp, #20]
 80040bc:	f8d8 3000 	ldr.w	r3, [r8]
 80040c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80040c4:	3307      	adds	r3, #7
 80040c6:	f023 0307 	bic.w	r3, r3, #7
 80040ca:	f103 0208 	add.w	r2, r3, #8
 80040ce:	f8c8 2000 	str.w	r2, [r8]
 80040d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040da:	9307      	str	r3, [sp, #28]
 80040dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80040e0:	ee08 0a10 	vmov	s16, r0
 80040e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80040e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040ec:	4b9e      	ldr	r3, [pc, #632]	; (8004368 <_printf_float+0x2d8>)
 80040ee:	f04f 32ff 	mov.w	r2, #4294967295
 80040f2:	f7fc fd3b 	bl	8000b6c <__aeabi_dcmpun>
 80040f6:	bb88      	cbnz	r0, 800415c <_printf_float+0xcc>
 80040f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040fc:	4b9a      	ldr	r3, [pc, #616]	; (8004368 <_printf_float+0x2d8>)
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004102:	f7fc fd15 	bl	8000b30 <__aeabi_dcmple>
 8004106:	bb48      	cbnz	r0, 800415c <_printf_float+0xcc>
 8004108:	2200      	movs	r2, #0
 800410a:	2300      	movs	r3, #0
 800410c:	4640      	mov	r0, r8
 800410e:	4649      	mov	r1, r9
 8004110:	f7fc fd04 	bl	8000b1c <__aeabi_dcmplt>
 8004114:	b110      	cbz	r0, 800411c <_printf_float+0x8c>
 8004116:	232d      	movs	r3, #45	; 0x2d
 8004118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800411c:	4a93      	ldr	r2, [pc, #588]	; (800436c <_printf_float+0x2dc>)
 800411e:	4b94      	ldr	r3, [pc, #592]	; (8004370 <_printf_float+0x2e0>)
 8004120:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004124:	bf94      	ite	ls
 8004126:	4690      	movls	r8, r2
 8004128:	4698      	movhi	r8, r3
 800412a:	2303      	movs	r3, #3
 800412c:	6123      	str	r3, [r4, #16]
 800412e:	9b05      	ldr	r3, [sp, #20]
 8004130:	f023 0304 	bic.w	r3, r3, #4
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	f04f 0900 	mov.w	r9, #0
 800413a:	9700      	str	r7, [sp, #0]
 800413c:	4633      	mov	r3, r6
 800413e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004140:	4621      	mov	r1, r4
 8004142:	4628      	mov	r0, r5
 8004144:	f000 f9da 	bl	80044fc <_printf_common>
 8004148:	3001      	adds	r0, #1
 800414a:	f040 8090 	bne.w	800426e <_printf_float+0x1de>
 800414e:	f04f 30ff 	mov.w	r0, #4294967295
 8004152:	b00d      	add	sp, #52	; 0x34
 8004154:	ecbd 8b02 	vpop	{d8}
 8004158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415c:	4642      	mov	r2, r8
 800415e:	464b      	mov	r3, r9
 8004160:	4640      	mov	r0, r8
 8004162:	4649      	mov	r1, r9
 8004164:	f7fc fd02 	bl	8000b6c <__aeabi_dcmpun>
 8004168:	b140      	cbz	r0, 800417c <_printf_float+0xec>
 800416a:	464b      	mov	r3, r9
 800416c:	2b00      	cmp	r3, #0
 800416e:	bfbc      	itt	lt
 8004170:	232d      	movlt	r3, #45	; 0x2d
 8004172:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004176:	4a7f      	ldr	r2, [pc, #508]	; (8004374 <_printf_float+0x2e4>)
 8004178:	4b7f      	ldr	r3, [pc, #508]	; (8004378 <_printf_float+0x2e8>)
 800417a:	e7d1      	b.n	8004120 <_printf_float+0x90>
 800417c:	6863      	ldr	r3, [r4, #4]
 800417e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004182:	9206      	str	r2, [sp, #24]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	d13f      	bne.n	8004208 <_printf_float+0x178>
 8004188:	2306      	movs	r3, #6
 800418a:	6063      	str	r3, [r4, #4]
 800418c:	9b05      	ldr	r3, [sp, #20]
 800418e:	6861      	ldr	r1, [r4, #4]
 8004190:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004194:	2300      	movs	r3, #0
 8004196:	9303      	str	r3, [sp, #12]
 8004198:	ab0a      	add	r3, sp, #40	; 0x28
 800419a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800419e:	ab09      	add	r3, sp, #36	; 0x24
 80041a0:	ec49 8b10 	vmov	d0, r8, r9
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6022      	str	r2, [r4, #0]
 80041a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80041ac:	4628      	mov	r0, r5
 80041ae:	f7ff fecf 	bl	8003f50 <__cvt>
 80041b2:	9b06      	ldr	r3, [sp, #24]
 80041b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041b6:	2b47      	cmp	r3, #71	; 0x47
 80041b8:	4680      	mov	r8, r0
 80041ba:	d108      	bne.n	80041ce <_printf_float+0x13e>
 80041bc:	1cc8      	adds	r0, r1, #3
 80041be:	db02      	blt.n	80041c6 <_printf_float+0x136>
 80041c0:	6863      	ldr	r3, [r4, #4]
 80041c2:	4299      	cmp	r1, r3
 80041c4:	dd41      	ble.n	800424a <_printf_float+0x1ba>
 80041c6:	f1ab 0302 	sub.w	r3, fp, #2
 80041ca:	fa5f fb83 	uxtb.w	fp, r3
 80041ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041d2:	d820      	bhi.n	8004216 <_printf_float+0x186>
 80041d4:	3901      	subs	r1, #1
 80041d6:	465a      	mov	r2, fp
 80041d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041dc:	9109      	str	r1, [sp, #36]	; 0x24
 80041de:	f7ff ff19 	bl	8004014 <__exponent>
 80041e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041e4:	1813      	adds	r3, r2, r0
 80041e6:	2a01      	cmp	r2, #1
 80041e8:	4681      	mov	r9, r0
 80041ea:	6123      	str	r3, [r4, #16]
 80041ec:	dc02      	bgt.n	80041f4 <_printf_float+0x164>
 80041ee:	6822      	ldr	r2, [r4, #0]
 80041f0:	07d2      	lsls	r2, r2, #31
 80041f2:	d501      	bpl.n	80041f8 <_printf_float+0x168>
 80041f4:	3301      	adds	r3, #1
 80041f6:	6123      	str	r3, [r4, #16]
 80041f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d09c      	beq.n	800413a <_printf_float+0xaa>
 8004200:	232d      	movs	r3, #45	; 0x2d
 8004202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004206:	e798      	b.n	800413a <_printf_float+0xaa>
 8004208:	9a06      	ldr	r2, [sp, #24]
 800420a:	2a47      	cmp	r2, #71	; 0x47
 800420c:	d1be      	bne.n	800418c <_printf_float+0xfc>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1bc      	bne.n	800418c <_printf_float+0xfc>
 8004212:	2301      	movs	r3, #1
 8004214:	e7b9      	b.n	800418a <_printf_float+0xfa>
 8004216:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800421a:	d118      	bne.n	800424e <_printf_float+0x1be>
 800421c:	2900      	cmp	r1, #0
 800421e:	6863      	ldr	r3, [r4, #4]
 8004220:	dd0b      	ble.n	800423a <_printf_float+0x1aa>
 8004222:	6121      	str	r1, [r4, #16]
 8004224:	b913      	cbnz	r3, 800422c <_printf_float+0x19c>
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	07d0      	lsls	r0, r2, #31
 800422a:	d502      	bpl.n	8004232 <_printf_float+0x1a2>
 800422c:	3301      	adds	r3, #1
 800422e:	440b      	add	r3, r1
 8004230:	6123      	str	r3, [r4, #16]
 8004232:	65a1      	str	r1, [r4, #88]	; 0x58
 8004234:	f04f 0900 	mov.w	r9, #0
 8004238:	e7de      	b.n	80041f8 <_printf_float+0x168>
 800423a:	b913      	cbnz	r3, 8004242 <_printf_float+0x1b2>
 800423c:	6822      	ldr	r2, [r4, #0]
 800423e:	07d2      	lsls	r2, r2, #31
 8004240:	d501      	bpl.n	8004246 <_printf_float+0x1b6>
 8004242:	3302      	adds	r3, #2
 8004244:	e7f4      	b.n	8004230 <_printf_float+0x1a0>
 8004246:	2301      	movs	r3, #1
 8004248:	e7f2      	b.n	8004230 <_printf_float+0x1a0>
 800424a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800424e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004250:	4299      	cmp	r1, r3
 8004252:	db05      	blt.n	8004260 <_printf_float+0x1d0>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	6121      	str	r1, [r4, #16]
 8004258:	07d8      	lsls	r0, r3, #31
 800425a:	d5ea      	bpl.n	8004232 <_printf_float+0x1a2>
 800425c:	1c4b      	adds	r3, r1, #1
 800425e:	e7e7      	b.n	8004230 <_printf_float+0x1a0>
 8004260:	2900      	cmp	r1, #0
 8004262:	bfd4      	ite	le
 8004264:	f1c1 0202 	rsble	r2, r1, #2
 8004268:	2201      	movgt	r2, #1
 800426a:	4413      	add	r3, r2
 800426c:	e7e0      	b.n	8004230 <_printf_float+0x1a0>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	055a      	lsls	r2, r3, #21
 8004272:	d407      	bmi.n	8004284 <_printf_float+0x1f4>
 8004274:	6923      	ldr	r3, [r4, #16]
 8004276:	4642      	mov	r2, r8
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	d12c      	bne.n	80042dc <_printf_float+0x24c>
 8004282:	e764      	b.n	800414e <_printf_float+0xbe>
 8004284:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004288:	f240 80e0 	bls.w	800444c <_printf_float+0x3bc>
 800428c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004290:	2200      	movs	r2, #0
 8004292:	2300      	movs	r3, #0
 8004294:	f7fc fc38 	bl	8000b08 <__aeabi_dcmpeq>
 8004298:	2800      	cmp	r0, #0
 800429a:	d034      	beq.n	8004306 <_printf_float+0x276>
 800429c:	4a37      	ldr	r2, [pc, #220]	; (800437c <_printf_float+0x2ec>)
 800429e:	2301      	movs	r3, #1
 80042a0:	4631      	mov	r1, r6
 80042a2:	4628      	mov	r0, r5
 80042a4:	47b8      	blx	r7
 80042a6:	3001      	adds	r0, #1
 80042a8:	f43f af51 	beq.w	800414e <_printf_float+0xbe>
 80042ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042b0:	429a      	cmp	r2, r3
 80042b2:	db02      	blt.n	80042ba <_printf_float+0x22a>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	07d8      	lsls	r0, r3, #31
 80042b8:	d510      	bpl.n	80042dc <_printf_float+0x24c>
 80042ba:	ee18 3a10 	vmov	r3, s16
 80042be:	4652      	mov	r2, sl
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b8      	blx	r7
 80042c6:	3001      	adds	r0, #1
 80042c8:	f43f af41 	beq.w	800414e <_printf_float+0xbe>
 80042cc:	f04f 0800 	mov.w	r8, #0
 80042d0:	f104 091a 	add.w	r9, r4, #26
 80042d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042d6:	3b01      	subs	r3, #1
 80042d8:	4543      	cmp	r3, r8
 80042da:	dc09      	bgt.n	80042f0 <_printf_float+0x260>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	079b      	lsls	r3, r3, #30
 80042e0:	f100 8107 	bmi.w	80044f2 <_printf_float+0x462>
 80042e4:	68e0      	ldr	r0, [r4, #12]
 80042e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042e8:	4298      	cmp	r0, r3
 80042ea:	bfb8      	it	lt
 80042ec:	4618      	movlt	r0, r3
 80042ee:	e730      	b.n	8004152 <_printf_float+0xc2>
 80042f0:	2301      	movs	r3, #1
 80042f2:	464a      	mov	r2, r9
 80042f4:	4631      	mov	r1, r6
 80042f6:	4628      	mov	r0, r5
 80042f8:	47b8      	blx	r7
 80042fa:	3001      	adds	r0, #1
 80042fc:	f43f af27 	beq.w	800414e <_printf_float+0xbe>
 8004300:	f108 0801 	add.w	r8, r8, #1
 8004304:	e7e6      	b.n	80042d4 <_printf_float+0x244>
 8004306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004308:	2b00      	cmp	r3, #0
 800430a:	dc39      	bgt.n	8004380 <_printf_float+0x2f0>
 800430c:	4a1b      	ldr	r2, [pc, #108]	; (800437c <_printf_float+0x2ec>)
 800430e:	2301      	movs	r3, #1
 8004310:	4631      	mov	r1, r6
 8004312:	4628      	mov	r0, r5
 8004314:	47b8      	blx	r7
 8004316:	3001      	adds	r0, #1
 8004318:	f43f af19 	beq.w	800414e <_printf_float+0xbe>
 800431c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004320:	4313      	orrs	r3, r2
 8004322:	d102      	bne.n	800432a <_printf_float+0x29a>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	07d9      	lsls	r1, r3, #31
 8004328:	d5d8      	bpl.n	80042dc <_printf_float+0x24c>
 800432a:	ee18 3a10 	vmov	r3, s16
 800432e:	4652      	mov	r2, sl
 8004330:	4631      	mov	r1, r6
 8004332:	4628      	mov	r0, r5
 8004334:	47b8      	blx	r7
 8004336:	3001      	adds	r0, #1
 8004338:	f43f af09 	beq.w	800414e <_printf_float+0xbe>
 800433c:	f04f 0900 	mov.w	r9, #0
 8004340:	f104 0a1a 	add.w	sl, r4, #26
 8004344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004346:	425b      	negs	r3, r3
 8004348:	454b      	cmp	r3, r9
 800434a:	dc01      	bgt.n	8004350 <_printf_float+0x2c0>
 800434c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800434e:	e792      	b.n	8004276 <_printf_float+0x1e6>
 8004350:	2301      	movs	r3, #1
 8004352:	4652      	mov	r2, sl
 8004354:	4631      	mov	r1, r6
 8004356:	4628      	mov	r0, r5
 8004358:	47b8      	blx	r7
 800435a:	3001      	adds	r0, #1
 800435c:	f43f aef7 	beq.w	800414e <_printf_float+0xbe>
 8004360:	f109 0901 	add.w	r9, r9, #1
 8004364:	e7ee      	b.n	8004344 <_printf_float+0x2b4>
 8004366:	bf00      	nop
 8004368:	7fefffff 	.word	0x7fefffff
 800436c:	08009040 	.word	0x08009040
 8004370:	08009044 	.word	0x08009044
 8004374:	08009048 	.word	0x08009048
 8004378:	0800904c 	.word	0x0800904c
 800437c:	080093d8 	.word	0x080093d8
 8004380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004384:	429a      	cmp	r2, r3
 8004386:	bfa8      	it	ge
 8004388:	461a      	movge	r2, r3
 800438a:	2a00      	cmp	r2, #0
 800438c:	4691      	mov	r9, r2
 800438e:	dc37      	bgt.n	8004400 <_printf_float+0x370>
 8004390:	f04f 0b00 	mov.w	fp, #0
 8004394:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004398:	f104 021a 	add.w	r2, r4, #26
 800439c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800439e:	9305      	str	r3, [sp, #20]
 80043a0:	eba3 0309 	sub.w	r3, r3, r9
 80043a4:	455b      	cmp	r3, fp
 80043a6:	dc33      	bgt.n	8004410 <_printf_float+0x380>
 80043a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043ac:	429a      	cmp	r2, r3
 80043ae:	db3b      	blt.n	8004428 <_printf_float+0x398>
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	07da      	lsls	r2, r3, #31
 80043b4:	d438      	bmi.n	8004428 <_printf_float+0x398>
 80043b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80043ba:	eba2 0903 	sub.w	r9, r2, r3
 80043be:	9b05      	ldr	r3, [sp, #20]
 80043c0:	1ad2      	subs	r2, r2, r3
 80043c2:	4591      	cmp	r9, r2
 80043c4:	bfa8      	it	ge
 80043c6:	4691      	movge	r9, r2
 80043c8:	f1b9 0f00 	cmp.w	r9, #0
 80043cc:	dc35      	bgt.n	800443a <_printf_float+0x3aa>
 80043ce:	f04f 0800 	mov.w	r8, #0
 80043d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043d6:	f104 0a1a 	add.w	sl, r4, #26
 80043da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	eba3 0309 	sub.w	r3, r3, r9
 80043e4:	4543      	cmp	r3, r8
 80043e6:	f77f af79 	ble.w	80042dc <_printf_float+0x24c>
 80043ea:	2301      	movs	r3, #1
 80043ec:	4652      	mov	r2, sl
 80043ee:	4631      	mov	r1, r6
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b8      	blx	r7
 80043f4:	3001      	adds	r0, #1
 80043f6:	f43f aeaa 	beq.w	800414e <_printf_float+0xbe>
 80043fa:	f108 0801 	add.w	r8, r8, #1
 80043fe:	e7ec      	b.n	80043da <_printf_float+0x34a>
 8004400:	4613      	mov	r3, r2
 8004402:	4631      	mov	r1, r6
 8004404:	4642      	mov	r2, r8
 8004406:	4628      	mov	r0, r5
 8004408:	47b8      	blx	r7
 800440a:	3001      	adds	r0, #1
 800440c:	d1c0      	bne.n	8004390 <_printf_float+0x300>
 800440e:	e69e      	b.n	800414e <_printf_float+0xbe>
 8004410:	2301      	movs	r3, #1
 8004412:	4631      	mov	r1, r6
 8004414:	4628      	mov	r0, r5
 8004416:	9205      	str	r2, [sp, #20]
 8004418:	47b8      	blx	r7
 800441a:	3001      	adds	r0, #1
 800441c:	f43f ae97 	beq.w	800414e <_printf_float+0xbe>
 8004420:	9a05      	ldr	r2, [sp, #20]
 8004422:	f10b 0b01 	add.w	fp, fp, #1
 8004426:	e7b9      	b.n	800439c <_printf_float+0x30c>
 8004428:	ee18 3a10 	vmov	r3, s16
 800442c:	4652      	mov	r2, sl
 800442e:	4631      	mov	r1, r6
 8004430:	4628      	mov	r0, r5
 8004432:	47b8      	blx	r7
 8004434:	3001      	adds	r0, #1
 8004436:	d1be      	bne.n	80043b6 <_printf_float+0x326>
 8004438:	e689      	b.n	800414e <_printf_float+0xbe>
 800443a:	9a05      	ldr	r2, [sp, #20]
 800443c:	464b      	mov	r3, r9
 800443e:	4442      	add	r2, r8
 8004440:	4631      	mov	r1, r6
 8004442:	4628      	mov	r0, r5
 8004444:	47b8      	blx	r7
 8004446:	3001      	adds	r0, #1
 8004448:	d1c1      	bne.n	80043ce <_printf_float+0x33e>
 800444a:	e680      	b.n	800414e <_printf_float+0xbe>
 800444c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800444e:	2a01      	cmp	r2, #1
 8004450:	dc01      	bgt.n	8004456 <_printf_float+0x3c6>
 8004452:	07db      	lsls	r3, r3, #31
 8004454:	d53a      	bpl.n	80044cc <_printf_float+0x43c>
 8004456:	2301      	movs	r3, #1
 8004458:	4642      	mov	r2, r8
 800445a:	4631      	mov	r1, r6
 800445c:	4628      	mov	r0, r5
 800445e:	47b8      	blx	r7
 8004460:	3001      	adds	r0, #1
 8004462:	f43f ae74 	beq.w	800414e <_printf_float+0xbe>
 8004466:	ee18 3a10 	vmov	r3, s16
 800446a:	4652      	mov	r2, sl
 800446c:	4631      	mov	r1, r6
 800446e:	4628      	mov	r0, r5
 8004470:	47b8      	blx	r7
 8004472:	3001      	adds	r0, #1
 8004474:	f43f ae6b 	beq.w	800414e <_printf_float+0xbe>
 8004478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800447c:	2200      	movs	r2, #0
 800447e:	2300      	movs	r3, #0
 8004480:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004484:	f7fc fb40 	bl	8000b08 <__aeabi_dcmpeq>
 8004488:	b9d8      	cbnz	r0, 80044c2 <_printf_float+0x432>
 800448a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800448e:	f108 0201 	add.w	r2, r8, #1
 8004492:	4631      	mov	r1, r6
 8004494:	4628      	mov	r0, r5
 8004496:	47b8      	blx	r7
 8004498:	3001      	adds	r0, #1
 800449a:	d10e      	bne.n	80044ba <_printf_float+0x42a>
 800449c:	e657      	b.n	800414e <_printf_float+0xbe>
 800449e:	2301      	movs	r3, #1
 80044a0:	4652      	mov	r2, sl
 80044a2:	4631      	mov	r1, r6
 80044a4:	4628      	mov	r0, r5
 80044a6:	47b8      	blx	r7
 80044a8:	3001      	adds	r0, #1
 80044aa:	f43f ae50 	beq.w	800414e <_printf_float+0xbe>
 80044ae:	f108 0801 	add.w	r8, r8, #1
 80044b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	4543      	cmp	r3, r8
 80044b8:	dcf1      	bgt.n	800449e <_printf_float+0x40e>
 80044ba:	464b      	mov	r3, r9
 80044bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044c0:	e6da      	b.n	8004278 <_printf_float+0x1e8>
 80044c2:	f04f 0800 	mov.w	r8, #0
 80044c6:	f104 0a1a 	add.w	sl, r4, #26
 80044ca:	e7f2      	b.n	80044b2 <_printf_float+0x422>
 80044cc:	2301      	movs	r3, #1
 80044ce:	4642      	mov	r2, r8
 80044d0:	e7df      	b.n	8004492 <_printf_float+0x402>
 80044d2:	2301      	movs	r3, #1
 80044d4:	464a      	mov	r2, r9
 80044d6:	4631      	mov	r1, r6
 80044d8:	4628      	mov	r0, r5
 80044da:	47b8      	blx	r7
 80044dc:	3001      	adds	r0, #1
 80044de:	f43f ae36 	beq.w	800414e <_printf_float+0xbe>
 80044e2:	f108 0801 	add.w	r8, r8, #1
 80044e6:	68e3      	ldr	r3, [r4, #12]
 80044e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044ea:	1a5b      	subs	r3, r3, r1
 80044ec:	4543      	cmp	r3, r8
 80044ee:	dcf0      	bgt.n	80044d2 <_printf_float+0x442>
 80044f0:	e6f8      	b.n	80042e4 <_printf_float+0x254>
 80044f2:	f04f 0800 	mov.w	r8, #0
 80044f6:	f104 0919 	add.w	r9, r4, #25
 80044fa:	e7f4      	b.n	80044e6 <_printf_float+0x456>

080044fc <_printf_common>:
 80044fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004500:	4616      	mov	r6, r2
 8004502:	4699      	mov	r9, r3
 8004504:	688a      	ldr	r2, [r1, #8]
 8004506:	690b      	ldr	r3, [r1, #16]
 8004508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800450c:	4293      	cmp	r3, r2
 800450e:	bfb8      	it	lt
 8004510:	4613      	movlt	r3, r2
 8004512:	6033      	str	r3, [r6, #0]
 8004514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004518:	4607      	mov	r7, r0
 800451a:	460c      	mov	r4, r1
 800451c:	b10a      	cbz	r2, 8004522 <_printf_common+0x26>
 800451e:	3301      	adds	r3, #1
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	0699      	lsls	r1, r3, #26
 8004526:	bf42      	ittt	mi
 8004528:	6833      	ldrmi	r3, [r6, #0]
 800452a:	3302      	addmi	r3, #2
 800452c:	6033      	strmi	r3, [r6, #0]
 800452e:	6825      	ldr	r5, [r4, #0]
 8004530:	f015 0506 	ands.w	r5, r5, #6
 8004534:	d106      	bne.n	8004544 <_printf_common+0x48>
 8004536:	f104 0a19 	add.w	sl, r4, #25
 800453a:	68e3      	ldr	r3, [r4, #12]
 800453c:	6832      	ldr	r2, [r6, #0]
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	42ab      	cmp	r3, r5
 8004542:	dc26      	bgt.n	8004592 <_printf_common+0x96>
 8004544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004548:	1e13      	subs	r3, r2, #0
 800454a:	6822      	ldr	r2, [r4, #0]
 800454c:	bf18      	it	ne
 800454e:	2301      	movne	r3, #1
 8004550:	0692      	lsls	r2, r2, #26
 8004552:	d42b      	bmi.n	80045ac <_printf_common+0xb0>
 8004554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004558:	4649      	mov	r1, r9
 800455a:	4638      	mov	r0, r7
 800455c:	47c0      	blx	r8
 800455e:	3001      	adds	r0, #1
 8004560:	d01e      	beq.n	80045a0 <_printf_common+0xa4>
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	6922      	ldr	r2, [r4, #16]
 8004566:	f003 0306 	and.w	r3, r3, #6
 800456a:	2b04      	cmp	r3, #4
 800456c:	bf02      	ittt	eq
 800456e:	68e5      	ldreq	r5, [r4, #12]
 8004570:	6833      	ldreq	r3, [r6, #0]
 8004572:	1aed      	subeq	r5, r5, r3
 8004574:	68a3      	ldr	r3, [r4, #8]
 8004576:	bf0c      	ite	eq
 8004578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800457c:	2500      	movne	r5, #0
 800457e:	4293      	cmp	r3, r2
 8004580:	bfc4      	itt	gt
 8004582:	1a9b      	subgt	r3, r3, r2
 8004584:	18ed      	addgt	r5, r5, r3
 8004586:	2600      	movs	r6, #0
 8004588:	341a      	adds	r4, #26
 800458a:	42b5      	cmp	r5, r6
 800458c:	d11a      	bne.n	80045c4 <_printf_common+0xc8>
 800458e:	2000      	movs	r0, #0
 8004590:	e008      	b.n	80045a4 <_printf_common+0xa8>
 8004592:	2301      	movs	r3, #1
 8004594:	4652      	mov	r2, sl
 8004596:	4649      	mov	r1, r9
 8004598:	4638      	mov	r0, r7
 800459a:	47c0      	blx	r8
 800459c:	3001      	adds	r0, #1
 800459e:	d103      	bne.n	80045a8 <_printf_common+0xac>
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a8:	3501      	adds	r5, #1
 80045aa:	e7c6      	b.n	800453a <_printf_common+0x3e>
 80045ac:	18e1      	adds	r1, r4, r3
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	2030      	movs	r0, #48	; 0x30
 80045b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045b6:	4422      	add	r2, r4
 80045b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045c0:	3302      	adds	r3, #2
 80045c2:	e7c7      	b.n	8004554 <_printf_common+0x58>
 80045c4:	2301      	movs	r3, #1
 80045c6:	4622      	mov	r2, r4
 80045c8:	4649      	mov	r1, r9
 80045ca:	4638      	mov	r0, r7
 80045cc:	47c0      	blx	r8
 80045ce:	3001      	adds	r0, #1
 80045d0:	d0e6      	beq.n	80045a0 <_printf_common+0xa4>
 80045d2:	3601      	adds	r6, #1
 80045d4:	e7d9      	b.n	800458a <_printf_common+0x8e>
	...

080045d8 <_printf_i>:
 80045d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045dc:	7e0f      	ldrb	r7, [r1, #24]
 80045de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045e0:	2f78      	cmp	r7, #120	; 0x78
 80045e2:	4691      	mov	r9, r2
 80045e4:	4680      	mov	r8, r0
 80045e6:	460c      	mov	r4, r1
 80045e8:	469a      	mov	sl, r3
 80045ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045ee:	d807      	bhi.n	8004600 <_printf_i+0x28>
 80045f0:	2f62      	cmp	r7, #98	; 0x62
 80045f2:	d80a      	bhi.n	800460a <_printf_i+0x32>
 80045f4:	2f00      	cmp	r7, #0
 80045f6:	f000 80d4 	beq.w	80047a2 <_printf_i+0x1ca>
 80045fa:	2f58      	cmp	r7, #88	; 0x58
 80045fc:	f000 80c0 	beq.w	8004780 <_printf_i+0x1a8>
 8004600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004608:	e03a      	b.n	8004680 <_printf_i+0xa8>
 800460a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800460e:	2b15      	cmp	r3, #21
 8004610:	d8f6      	bhi.n	8004600 <_printf_i+0x28>
 8004612:	a101      	add	r1, pc, #4	; (adr r1, 8004618 <_printf_i+0x40>)
 8004614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004618:	08004671 	.word	0x08004671
 800461c:	08004685 	.word	0x08004685
 8004620:	08004601 	.word	0x08004601
 8004624:	08004601 	.word	0x08004601
 8004628:	08004601 	.word	0x08004601
 800462c:	08004601 	.word	0x08004601
 8004630:	08004685 	.word	0x08004685
 8004634:	08004601 	.word	0x08004601
 8004638:	08004601 	.word	0x08004601
 800463c:	08004601 	.word	0x08004601
 8004640:	08004601 	.word	0x08004601
 8004644:	08004789 	.word	0x08004789
 8004648:	080046b1 	.word	0x080046b1
 800464c:	08004743 	.word	0x08004743
 8004650:	08004601 	.word	0x08004601
 8004654:	08004601 	.word	0x08004601
 8004658:	080047ab 	.word	0x080047ab
 800465c:	08004601 	.word	0x08004601
 8004660:	080046b1 	.word	0x080046b1
 8004664:	08004601 	.word	0x08004601
 8004668:	08004601 	.word	0x08004601
 800466c:	0800474b 	.word	0x0800474b
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	1d1a      	adds	r2, r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	602a      	str	r2, [r5, #0]
 8004678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800467c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004680:	2301      	movs	r3, #1
 8004682:	e09f      	b.n	80047c4 <_printf_i+0x1ec>
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	682b      	ldr	r3, [r5, #0]
 8004688:	0607      	lsls	r7, r0, #24
 800468a:	f103 0104 	add.w	r1, r3, #4
 800468e:	6029      	str	r1, [r5, #0]
 8004690:	d501      	bpl.n	8004696 <_printf_i+0xbe>
 8004692:	681e      	ldr	r6, [r3, #0]
 8004694:	e003      	b.n	800469e <_printf_i+0xc6>
 8004696:	0646      	lsls	r6, r0, #25
 8004698:	d5fb      	bpl.n	8004692 <_printf_i+0xba>
 800469a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800469e:	2e00      	cmp	r6, #0
 80046a0:	da03      	bge.n	80046aa <_printf_i+0xd2>
 80046a2:	232d      	movs	r3, #45	; 0x2d
 80046a4:	4276      	negs	r6, r6
 80046a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046aa:	485a      	ldr	r0, [pc, #360]	; (8004814 <_printf_i+0x23c>)
 80046ac:	230a      	movs	r3, #10
 80046ae:	e012      	b.n	80046d6 <_printf_i+0xfe>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	6820      	ldr	r0, [r4, #0]
 80046b4:	1d19      	adds	r1, r3, #4
 80046b6:	6029      	str	r1, [r5, #0]
 80046b8:	0605      	lsls	r5, r0, #24
 80046ba:	d501      	bpl.n	80046c0 <_printf_i+0xe8>
 80046bc:	681e      	ldr	r6, [r3, #0]
 80046be:	e002      	b.n	80046c6 <_printf_i+0xee>
 80046c0:	0641      	lsls	r1, r0, #25
 80046c2:	d5fb      	bpl.n	80046bc <_printf_i+0xe4>
 80046c4:	881e      	ldrh	r6, [r3, #0]
 80046c6:	4853      	ldr	r0, [pc, #332]	; (8004814 <_printf_i+0x23c>)
 80046c8:	2f6f      	cmp	r7, #111	; 0x6f
 80046ca:	bf0c      	ite	eq
 80046cc:	2308      	moveq	r3, #8
 80046ce:	230a      	movne	r3, #10
 80046d0:	2100      	movs	r1, #0
 80046d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046d6:	6865      	ldr	r5, [r4, #4]
 80046d8:	60a5      	str	r5, [r4, #8]
 80046da:	2d00      	cmp	r5, #0
 80046dc:	bfa2      	ittt	ge
 80046de:	6821      	ldrge	r1, [r4, #0]
 80046e0:	f021 0104 	bicge.w	r1, r1, #4
 80046e4:	6021      	strge	r1, [r4, #0]
 80046e6:	b90e      	cbnz	r6, 80046ec <_printf_i+0x114>
 80046e8:	2d00      	cmp	r5, #0
 80046ea:	d04b      	beq.n	8004784 <_printf_i+0x1ac>
 80046ec:	4615      	mov	r5, r2
 80046ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80046f2:	fb03 6711 	mls	r7, r3, r1, r6
 80046f6:	5dc7      	ldrb	r7, [r0, r7]
 80046f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046fc:	4637      	mov	r7, r6
 80046fe:	42bb      	cmp	r3, r7
 8004700:	460e      	mov	r6, r1
 8004702:	d9f4      	bls.n	80046ee <_printf_i+0x116>
 8004704:	2b08      	cmp	r3, #8
 8004706:	d10b      	bne.n	8004720 <_printf_i+0x148>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	07de      	lsls	r6, r3, #31
 800470c:	d508      	bpl.n	8004720 <_printf_i+0x148>
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	6861      	ldr	r1, [r4, #4]
 8004712:	4299      	cmp	r1, r3
 8004714:	bfde      	ittt	le
 8004716:	2330      	movle	r3, #48	; 0x30
 8004718:	f805 3c01 	strble.w	r3, [r5, #-1]
 800471c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004720:	1b52      	subs	r2, r2, r5
 8004722:	6122      	str	r2, [r4, #16]
 8004724:	f8cd a000 	str.w	sl, [sp]
 8004728:	464b      	mov	r3, r9
 800472a:	aa03      	add	r2, sp, #12
 800472c:	4621      	mov	r1, r4
 800472e:	4640      	mov	r0, r8
 8004730:	f7ff fee4 	bl	80044fc <_printf_common>
 8004734:	3001      	adds	r0, #1
 8004736:	d14a      	bne.n	80047ce <_printf_i+0x1f6>
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	b004      	add	sp, #16
 800473e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	f043 0320 	orr.w	r3, r3, #32
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	4833      	ldr	r0, [pc, #204]	; (8004818 <_printf_i+0x240>)
 800474c:	2778      	movs	r7, #120	; 0x78
 800474e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	6829      	ldr	r1, [r5, #0]
 8004756:	061f      	lsls	r7, r3, #24
 8004758:	f851 6b04 	ldr.w	r6, [r1], #4
 800475c:	d402      	bmi.n	8004764 <_printf_i+0x18c>
 800475e:	065f      	lsls	r7, r3, #25
 8004760:	bf48      	it	mi
 8004762:	b2b6      	uxthmi	r6, r6
 8004764:	07df      	lsls	r7, r3, #31
 8004766:	bf48      	it	mi
 8004768:	f043 0320 	orrmi.w	r3, r3, #32
 800476c:	6029      	str	r1, [r5, #0]
 800476e:	bf48      	it	mi
 8004770:	6023      	strmi	r3, [r4, #0]
 8004772:	b91e      	cbnz	r6, 800477c <_printf_i+0x1a4>
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	f023 0320 	bic.w	r3, r3, #32
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	2310      	movs	r3, #16
 800477e:	e7a7      	b.n	80046d0 <_printf_i+0xf8>
 8004780:	4824      	ldr	r0, [pc, #144]	; (8004814 <_printf_i+0x23c>)
 8004782:	e7e4      	b.n	800474e <_printf_i+0x176>
 8004784:	4615      	mov	r5, r2
 8004786:	e7bd      	b.n	8004704 <_printf_i+0x12c>
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	6826      	ldr	r6, [r4, #0]
 800478c:	6961      	ldr	r1, [r4, #20]
 800478e:	1d18      	adds	r0, r3, #4
 8004790:	6028      	str	r0, [r5, #0]
 8004792:	0635      	lsls	r5, r6, #24
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	d501      	bpl.n	800479c <_printf_i+0x1c4>
 8004798:	6019      	str	r1, [r3, #0]
 800479a:	e002      	b.n	80047a2 <_printf_i+0x1ca>
 800479c:	0670      	lsls	r0, r6, #25
 800479e:	d5fb      	bpl.n	8004798 <_printf_i+0x1c0>
 80047a0:	8019      	strh	r1, [r3, #0]
 80047a2:	2300      	movs	r3, #0
 80047a4:	6123      	str	r3, [r4, #16]
 80047a6:	4615      	mov	r5, r2
 80047a8:	e7bc      	b.n	8004724 <_printf_i+0x14c>
 80047aa:	682b      	ldr	r3, [r5, #0]
 80047ac:	1d1a      	adds	r2, r3, #4
 80047ae:	602a      	str	r2, [r5, #0]
 80047b0:	681d      	ldr	r5, [r3, #0]
 80047b2:	6862      	ldr	r2, [r4, #4]
 80047b4:	2100      	movs	r1, #0
 80047b6:	4628      	mov	r0, r5
 80047b8:	f7fb fd2a 	bl	8000210 <memchr>
 80047bc:	b108      	cbz	r0, 80047c2 <_printf_i+0x1ea>
 80047be:	1b40      	subs	r0, r0, r5
 80047c0:	6060      	str	r0, [r4, #4]
 80047c2:	6863      	ldr	r3, [r4, #4]
 80047c4:	6123      	str	r3, [r4, #16]
 80047c6:	2300      	movs	r3, #0
 80047c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047cc:	e7aa      	b.n	8004724 <_printf_i+0x14c>
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	462a      	mov	r2, r5
 80047d2:	4649      	mov	r1, r9
 80047d4:	4640      	mov	r0, r8
 80047d6:	47d0      	blx	sl
 80047d8:	3001      	adds	r0, #1
 80047da:	d0ad      	beq.n	8004738 <_printf_i+0x160>
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	079b      	lsls	r3, r3, #30
 80047e0:	d413      	bmi.n	800480a <_printf_i+0x232>
 80047e2:	68e0      	ldr	r0, [r4, #12]
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	4298      	cmp	r0, r3
 80047e8:	bfb8      	it	lt
 80047ea:	4618      	movlt	r0, r3
 80047ec:	e7a6      	b.n	800473c <_printf_i+0x164>
 80047ee:	2301      	movs	r3, #1
 80047f0:	4632      	mov	r2, r6
 80047f2:	4649      	mov	r1, r9
 80047f4:	4640      	mov	r0, r8
 80047f6:	47d0      	blx	sl
 80047f8:	3001      	adds	r0, #1
 80047fa:	d09d      	beq.n	8004738 <_printf_i+0x160>
 80047fc:	3501      	adds	r5, #1
 80047fe:	68e3      	ldr	r3, [r4, #12]
 8004800:	9903      	ldr	r1, [sp, #12]
 8004802:	1a5b      	subs	r3, r3, r1
 8004804:	42ab      	cmp	r3, r5
 8004806:	dcf2      	bgt.n	80047ee <_printf_i+0x216>
 8004808:	e7eb      	b.n	80047e2 <_printf_i+0x20a>
 800480a:	2500      	movs	r5, #0
 800480c:	f104 0619 	add.w	r6, r4, #25
 8004810:	e7f5      	b.n	80047fe <_printf_i+0x226>
 8004812:	bf00      	nop
 8004814:	08009050 	.word	0x08009050
 8004818:	08009061 	.word	0x08009061

0800481c <_scanf_float>:
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	b087      	sub	sp, #28
 8004822:	4617      	mov	r7, r2
 8004824:	9303      	str	r3, [sp, #12]
 8004826:	688b      	ldr	r3, [r1, #8]
 8004828:	1e5a      	subs	r2, r3, #1
 800482a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800482e:	bf83      	ittte	hi
 8004830:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004834:	195b      	addhi	r3, r3, r5
 8004836:	9302      	strhi	r3, [sp, #8]
 8004838:	2300      	movls	r3, #0
 800483a:	bf86      	itte	hi
 800483c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004840:	608b      	strhi	r3, [r1, #8]
 8004842:	9302      	strls	r3, [sp, #8]
 8004844:	680b      	ldr	r3, [r1, #0]
 8004846:	468b      	mov	fp, r1
 8004848:	2500      	movs	r5, #0
 800484a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800484e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004852:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004856:	4680      	mov	r8, r0
 8004858:	460c      	mov	r4, r1
 800485a:	465e      	mov	r6, fp
 800485c:	46aa      	mov	sl, r5
 800485e:	46a9      	mov	r9, r5
 8004860:	9501      	str	r5, [sp, #4]
 8004862:	68a2      	ldr	r2, [r4, #8]
 8004864:	b152      	cbz	r2, 800487c <_scanf_float+0x60>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b4e      	cmp	r3, #78	; 0x4e
 800486c:	d864      	bhi.n	8004938 <_scanf_float+0x11c>
 800486e:	2b40      	cmp	r3, #64	; 0x40
 8004870:	d83c      	bhi.n	80048ec <_scanf_float+0xd0>
 8004872:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004876:	b2c8      	uxtb	r0, r1
 8004878:	280e      	cmp	r0, #14
 800487a:	d93a      	bls.n	80048f2 <_scanf_float+0xd6>
 800487c:	f1b9 0f00 	cmp.w	r9, #0
 8004880:	d003      	beq.n	800488a <_scanf_float+0x6e>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800488e:	f1ba 0f01 	cmp.w	sl, #1
 8004892:	f200 8113 	bhi.w	8004abc <_scanf_float+0x2a0>
 8004896:	455e      	cmp	r6, fp
 8004898:	f200 8105 	bhi.w	8004aa6 <_scanf_float+0x28a>
 800489c:	2501      	movs	r5, #1
 800489e:	4628      	mov	r0, r5
 80048a0:	b007      	add	sp, #28
 80048a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80048aa:	2a0d      	cmp	r2, #13
 80048ac:	d8e6      	bhi.n	800487c <_scanf_float+0x60>
 80048ae:	a101      	add	r1, pc, #4	; (adr r1, 80048b4 <_scanf_float+0x98>)
 80048b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80048b4:	080049f3 	.word	0x080049f3
 80048b8:	0800487d 	.word	0x0800487d
 80048bc:	0800487d 	.word	0x0800487d
 80048c0:	0800487d 	.word	0x0800487d
 80048c4:	08004a53 	.word	0x08004a53
 80048c8:	08004a2b 	.word	0x08004a2b
 80048cc:	0800487d 	.word	0x0800487d
 80048d0:	0800487d 	.word	0x0800487d
 80048d4:	08004a01 	.word	0x08004a01
 80048d8:	0800487d 	.word	0x0800487d
 80048dc:	0800487d 	.word	0x0800487d
 80048e0:	0800487d 	.word	0x0800487d
 80048e4:	0800487d 	.word	0x0800487d
 80048e8:	080049b9 	.word	0x080049b9
 80048ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80048f0:	e7db      	b.n	80048aa <_scanf_float+0x8e>
 80048f2:	290e      	cmp	r1, #14
 80048f4:	d8c2      	bhi.n	800487c <_scanf_float+0x60>
 80048f6:	a001      	add	r0, pc, #4	; (adr r0, 80048fc <_scanf_float+0xe0>)
 80048f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80048fc:	080049ab 	.word	0x080049ab
 8004900:	0800487d 	.word	0x0800487d
 8004904:	080049ab 	.word	0x080049ab
 8004908:	08004a3f 	.word	0x08004a3f
 800490c:	0800487d 	.word	0x0800487d
 8004910:	08004959 	.word	0x08004959
 8004914:	08004995 	.word	0x08004995
 8004918:	08004995 	.word	0x08004995
 800491c:	08004995 	.word	0x08004995
 8004920:	08004995 	.word	0x08004995
 8004924:	08004995 	.word	0x08004995
 8004928:	08004995 	.word	0x08004995
 800492c:	08004995 	.word	0x08004995
 8004930:	08004995 	.word	0x08004995
 8004934:	08004995 	.word	0x08004995
 8004938:	2b6e      	cmp	r3, #110	; 0x6e
 800493a:	d809      	bhi.n	8004950 <_scanf_float+0x134>
 800493c:	2b60      	cmp	r3, #96	; 0x60
 800493e:	d8b2      	bhi.n	80048a6 <_scanf_float+0x8a>
 8004940:	2b54      	cmp	r3, #84	; 0x54
 8004942:	d077      	beq.n	8004a34 <_scanf_float+0x218>
 8004944:	2b59      	cmp	r3, #89	; 0x59
 8004946:	d199      	bne.n	800487c <_scanf_float+0x60>
 8004948:	2d07      	cmp	r5, #7
 800494a:	d197      	bne.n	800487c <_scanf_float+0x60>
 800494c:	2508      	movs	r5, #8
 800494e:	e029      	b.n	80049a4 <_scanf_float+0x188>
 8004950:	2b74      	cmp	r3, #116	; 0x74
 8004952:	d06f      	beq.n	8004a34 <_scanf_float+0x218>
 8004954:	2b79      	cmp	r3, #121	; 0x79
 8004956:	e7f6      	b.n	8004946 <_scanf_float+0x12a>
 8004958:	6821      	ldr	r1, [r4, #0]
 800495a:	05c8      	lsls	r0, r1, #23
 800495c:	d51a      	bpl.n	8004994 <_scanf_float+0x178>
 800495e:	9b02      	ldr	r3, [sp, #8]
 8004960:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004964:	6021      	str	r1, [r4, #0]
 8004966:	f109 0901 	add.w	r9, r9, #1
 800496a:	b11b      	cbz	r3, 8004974 <_scanf_float+0x158>
 800496c:	3b01      	subs	r3, #1
 800496e:	3201      	adds	r2, #1
 8004970:	9302      	str	r3, [sp, #8]
 8004972:	60a2      	str	r2, [r4, #8]
 8004974:	68a3      	ldr	r3, [r4, #8]
 8004976:	3b01      	subs	r3, #1
 8004978:	60a3      	str	r3, [r4, #8]
 800497a:	6923      	ldr	r3, [r4, #16]
 800497c:	3301      	adds	r3, #1
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3b01      	subs	r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	607b      	str	r3, [r7, #4]
 8004988:	f340 8084 	ble.w	8004a94 <_scanf_float+0x278>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	e766      	b.n	8004862 <_scanf_float+0x46>
 8004994:	eb1a 0f05 	cmn.w	sl, r5
 8004998:	f47f af70 	bne.w	800487c <_scanf_float+0x60>
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80049a2:	6022      	str	r2, [r4, #0]
 80049a4:	f806 3b01 	strb.w	r3, [r6], #1
 80049a8:	e7e4      	b.n	8004974 <_scanf_float+0x158>
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	0610      	lsls	r0, r2, #24
 80049ae:	f57f af65 	bpl.w	800487c <_scanf_float+0x60>
 80049b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049b6:	e7f4      	b.n	80049a2 <_scanf_float+0x186>
 80049b8:	f1ba 0f00 	cmp.w	sl, #0
 80049bc:	d10e      	bne.n	80049dc <_scanf_float+0x1c0>
 80049be:	f1b9 0f00 	cmp.w	r9, #0
 80049c2:	d10e      	bne.n	80049e2 <_scanf_float+0x1c6>
 80049c4:	6822      	ldr	r2, [r4, #0]
 80049c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80049ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80049ce:	d108      	bne.n	80049e2 <_scanf_float+0x1c6>
 80049d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049d4:	6022      	str	r2, [r4, #0]
 80049d6:	f04f 0a01 	mov.w	sl, #1
 80049da:	e7e3      	b.n	80049a4 <_scanf_float+0x188>
 80049dc:	f1ba 0f02 	cmp.w	sl, #2
 80049e0:	d055      	beq.n	8004a8e <_scanf_float+0x272>
 80049e2:	2d01      	cmp	r5, #1
 80049e4:	d002      	beq.n	80049ec <_scanf_float+0x1d0>
 80049e6:	2d04      	cmp	r5, #4
 80049e8:	f47f af48 	bne.w	800487c <_scanf_float+0x60>
 80049ec:	3501      	adds	r5, #1
 80049ee:	b2ed      	uxtb	r5, r5
 80049f0:	e7d8      	b.n	80049a4 <_scanf_float+0x188>
 80049f2:	f1ba 0f01 	cmp.w	sl, #1
 80049f6:	f47f af41 	bne.w	800487c <_scanf_float+0x60>
 80049fa:	f04f 0a02 	mov.w	sl, #2
 80049fe:	e7d1      	b.n	80049a4 <_scanf_float+0x188>
 8004a00:	b97d      	cbnz	r5, 8004a22 <_scanf_float+0x206>
 8004a02:	f1b9 0f00 	cmp.w	r9, #0
 8004a06:	f47f af3c 	bne.w	8004882 <_scanf_float+0x66>
 8004a0a:	6822      	ldr	r2, [r4, #0]
 8004a0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004a10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004a14:	f47f af39 	bne.w	800488a <_scanf_float+0x6e>
 8004a18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a1c:	6022      	str	r2, [r4, #0]
 8004a1e:	2501      	movs	r5, #1
 8004a20:	e7c0      	b.n	80049a4 <_scanf_float+0x188>
 8004a22:	2d03      	cmp	r5, #3
 8004a24:	d0e2      	beq.n	80049ec <_scanf_float+0x1d0>
 8004a26:	2d05      	cmp	r5, #5
 8004a28:	e7de      	b.n	80049e8 <_scanf_float+0x1cc>
 8004a2a:	2d02      	cmp	r5, #2
 8004a2c:	f47f af26 	bne.w	800487c <_scanf_float+0x60>
 8004a30:	2503      	movs	r5, #3
 8004a32:	e7b7      	b.n	80049a4 <_scanf_float+0x188>
 8004a34:	2d06      	cmp	r5, #6
 8004a36:	f47f af21 	bne.w	800487c <_scanf_float+0x60>
 8004a3a:	2507      	movs	r5, #7
 8004a3c:	e7b2      	b.n	80049a4 <_scanf_float+0x188>
 8004a3e:	6822      	ldr	r2, [r4, #0]
 8004a40:	0591      	lsls	r1, r2, #22
 8004a42:	f57f af1b 	bpl.w	800487c <_scanf_float+0x60>
 8004a46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004a4a:	6022      	str	r2, [r4, #0]
 8004a4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a50:	e7a8      	b.n	80049a4 <_scanf_float+0x188>
 8004a52:	6822      	ldr	r2, [r4, #0]
 8004a54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004a58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004a5c:	d006      	beq.n	8004a6c <_scanf_float+0x250>
 8004a5e:	0550      	lsls	r0, r2, #21
 8004a60:	f57f af0c 	bpl.w	800487c <_scanf_float+0x60>
 8004a64:	f1b9 0f00 	cmp.w	r9, #0
 8004a68:	f43f af0f 	beq.w	800488a <_scanf_float+0x6e>
 8004a6c:	0591      	lsls	r1, r2, #22
 8004a6e:	bf58      	it	pl
 8004a70:	9901      	ldrpl	r1, [sp, #4]
 8004a72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a76:	bf58      	it	pl
 8004a78:	eba9 0101 	subpl.w	r1, r9, r1
 8004a7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004a80:	bf58      	it	pl
 8004a82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004a86:	6022      	str	r2, [r4, #0]
 8004a88:	f04f 0900 	mov.w	r9, #0
 8004a8c:	e78a      	b.n	80049a4 <_scanf_float+0x188>
 8004a8e:	f04f 0a03 	mov.w	sl, #3
 8004a92:	e787      	b.n	80049a4 <_scanf_float+0x188>
 8004a94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a98:	4639      	mov	r1, r7
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	4798      	blx	r3
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	f43f aedf 	beq.w	8004862 <_scanf_float+0x46>
 8004aa4:	e6ea      	b.n	800487c <_scanf_float+0x60>
 8004aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004aaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004aae:	463a      	mov	r2, r7
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	4798      	blx	r3
 8004ab4:	6923      	ldr	r3, [r4, #16]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	6123      	str	r3, [r4, #16]
 8004aba:	e6ec      	b.n	8004896 <_scanf_float+0x7a>
 8004abc:	1e6b      	subs	r3, r5, #1
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d825      	bhi.n	8004b0e <_scanf_float+0x2f2>
 8004ac2:	2d02      	cmp	r5, #2
 8004ac4:	d836      	bhi.n	8004b34 <_scanf_float+0x318>
 8004ac6:	455e      	cmp	r6, fp
 8004ac8:	f67f aee8 	bls.w	800489c <_scanf_float+0x80>
 8004acc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ad0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ad4:	463a      	mov	r2, r7
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	4798      	blx	r3
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	e7f1      	b.n	8004ac6 <_scanf_float+0x2aa>
 8004ae2:	9802      	ldr	r0, [sp, #8]
 8004ae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ae8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004aec:	9002      	str	r0, [sp, #8]
 8004aee:	463a      	mov	r2, r7
 8004af0:	4640      	mov	r0, r8
 8004af2:	4798      	blx	r3
 8004af4:	6923      	ldr	r3, [r4, #16]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004afe:	fa5f fa8a 	uxtb.w	sl, sl
 8004b02:	f1ba 0f02 	cmp.w	sl, #2
 8004b06:	d1ec      	bne.n	8004ae2 <_scanf_float+0x2c6>
 8004b08:	3d03      	subs	r5, #3
 8004b0a:	b2ed      	uxtb	r5, r5
 8004b0c:	1b76      	subs	r6, r6, r5
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	05da      	lsls	r2, r3, #23
 8004b12:	d52f      	bpl.n	8004b74 <_scanf_float+0x358>
 8004b14:	055b      	lsls	r3, r3, #21
 8004b16:	d510      	bpl.n	8004b3a <_scanf_float+0x31e>
 8004b18:	455e      	cmp	r6, fp
 8004b1a:	f67f aebf 	bls.w	800489c <_scanf_float+0x80>
 8004b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b26:	463a      	mov	r2, r7
 8004b28:	4640      	mov	r0, r8
 8004b2a:	4798      	blx	r3
 8004b2c:	6923      	ldr	r3, [r4, #16]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	6123      	str	r3, [r4, #16]
 8004b32:	e7f1      	b.n	8004b18 <_scanf_float+0x2fc>
 8004b34:	46aa      	mov	sl, r5
 8004b36:	9602      	str	r6, [sp, #8]
 8004b38:	e7df      	b.n	8004afa <_scanf_float+0x2de>
 8004b3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004b3e:	6923      	ldr	r3, [r4, #16]
 8004b40:	2965      	cmp	r1, #101	; 0x65
 8004b42:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b46:	f106 35ff 	add.w	r5, r6, #4294967295
 8004b4a:	6123      	str	r3, [r4, #16]
 8004b4c:	d00c      	beq.n	8004b68 <_scanf_float+0x34c>
 8004b4e:	2945      	cmp	r1, #69	; 0x45
 8004b50:	d00a      	beq.n	8004b68 <_scanf_float+0x34c>
 8004b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b56:	463a      	mov	r2, r7
 8004b58:	4640      	mov	r0, r8
 8004b5a:	4798      	blx	r3
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	1eb5      	subs	r5, r6, #2
 8004b66:	6123      	str	r3, [r4, #16]
 8004b68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b6c:	463a      	mov	r2, r7
 8004b6e:	4640      	mov	r0, r8
 8004b70:	4798      	blx	r3
 8004b72:	462e      	mov	r6, r5
 8004b74:	6825      	ldr	r5, [r4, #0]
 8004b76:	f015 0510 	ands.w	r5, r5, #16
 8004b7a:	d158      	bne.n	8004c2e <_scanf_float+0x412>
 8004b7c:	7035      	strb	r5, [r6, #0]
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d11c      	bne.n	8004bc4 <_scanf_float+0x3a8>
 8004b8a:	9b01      	ldr	r3, [sp, #4]
 8004b8c:	454b      	cmp	r3, r9
 8004b8e:	eba3 0209 	sub.w	r2, r3, r9
 8004b92:	d124      	bne.n	8004bde <_scanf_float+0x3c2>
 8004b94:	2200      	movs	r2, #0
 8004b96:	4659      	mov	r1, fp
 8004b98:	4640      	mov	r0, r8
 8004b9a:	f002 fc7d 	bl	8007498 <_strtod_r>
 8004b9e:	9b03      	ldr	r3, [sp, #12]
 8004ba0:	6821      	ldr	r1, [r4, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f011 0f02 	tst.w	r1, #2
 8004ba8:	ec57 6b10 	vmov	r6, r7, d0
 8004bac:	f103 0204 	add.w	r2, r3, #4
 8004bb0:	d020      	beq.n	8004bf4 <_scanf_float+0x3d8>
 8004bb2:	9903      	ldr	r1, [sp, #12]
 8004bb4:	600a      	str	r2, [r1, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	e9c3 6700 	strd	r6, r7, [r3]
 8004bbc:	68e3      	ldr	r3, [r4, #12]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60e3      	str	r3, [r4, #12]
 8004bc2:	e66c      	b.n	800489e <_scanf_float+0x82>
 8004bc4:	9b04      	ldr	r3, [sp, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0e4      	beq.n	8004b94 <_scanf_float+0x378>
 8004bca:	9905      	ldr	r1, [sp, #20]
 8004bcc:	230a      	movs	r3, #10
 8004bce:	462a      	mov	r2, r5
 8004bd0:	3101      	adds	r1, #1
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	f002 fce8 	bl	80075a8 <_strtol_r>
 8004bd8:	9b04      	ldr	r3, [sp, #16]
 8004bda:	9e05      	ldr	r6, [sp, #20]
 8004bdc:	1ac2      	subs	r2, r0, r3
 8004bde:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004be2:	429e      	cmp	r6, r3
 8004be4:	bf28      	it	cs
 8004be6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004bea:	4912      	ldr	r1, [pc, #72]	; (8004c34 <_scanf_float+0x418>)
 8004bec:	4630      	mov	r0, r6
 8004bee:	f000 f8e7 	bl	8004dc0 <siprintf>
 8004bf2:	e7cf      	b.n	8004b94 <_scanf_float+0x378>
 8004bf4:	f011 0f04 	tst.w	r1, #4
 8004bf8:	9903      	ldr	r1, [sp, #12]
 8004bfa:	600a      	str	r2, [r1, #0]
 8004bfc:	d1db      	bne.n	8004bb6 <_scanf_float+0x39a>
 8004bfe:	f8d3 8000 	ldr.w	r8, [r3]
 8004c02:	ee10 2a10 	vmov	r2, s0
 8004c06:	ee10 0a10 	vmov	r0, s0
 8004c0a:	463b      	mov	r3, r7
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	f7fb ffad 	bl	8000b6c <__aeabi_dcmpun>
 8004c12:	b128      	cbz	r0, 8004c20 <_scanf_float+0x404>
 8004c14:	4808      	ldr	r0, [pc, #32]	; (8004c38 <_scanf_float+0x41c>)
 8004c16:	f000 fa03 	bl	8005020 <nanf>
 8004c1a:	ed88 0a00 	vstr	s0, [r8]
 8004c1e:	e7cd      	b.n	8004bbc <_scanf_float+0x3a0>
 8004c20:	4630      	mov	r0, r6
 8004c22:	4639      	mov	r1, r7
 8004c24:	f7fc f800 	bl	8000c28 <__aeabi_d2f>
 8004c28:	f8c8 0000 	str.w	r0, [r8]
 8004c2c:	e7c6      	b.n	8004bbc <_scanf_float+0x3a0>
 8004c2e:	2500      	movs	r5, #0
 8004c30:	e635      	b.n	800489e <_scanf_float+0x82>
 8004c32:	bf00      	nop
 8004c34:	08009072 	.word	0x08009072
 8004c38:	08009420 	.word	0x08009420

08004c3c <std>:
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	b510      	push	{r4, lr}
 8004c40:	4604      	mov	r4, r0
 8004c42:	e9c0 3300 	strd	r3, r3, [r0]
 8004c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c4a:	6083      	str	r3, [r0, #8]
 8004c4c:	8181      	strh	r1, [r0, #12]
 8004c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c50:	81c2      	strh	r2, [r0, #14]
 8004c52:	6183      	str	r3, [r0, #24]
 8004c54:	4619      	mov	r1, r3
 8004c56:	2208      	movs	r2, #8
 8004c58:	305c      	adds	r0, #92	; 0x5c
 8004c5a:	f000 f942 	bl	8004ee2 <memset>
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <std+0x58>)
 8004c60:	6263      	str	r3, [r4, #36]	; 0x24
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <std+0x5c>)
 8004c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <std+0x60>)
 8004c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <std+0x64>)
 8004c6c:	6323      	str	r3, [r4, #48]	; 0x30
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <std+0x68>)
 8004c70:	6224      	str	r4, [r4, #32]
 8004c72:	429c      	cmp	r4, r3
 8004c74:	d006      	beq.n	8004c84 <std+0x48>
 8004c76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c7a:	4294      	cmp	r4, r2
 8004c7c:	d002      	beq.n	8004c84 <std+0x48>
 8004c7e:	33d0      	adds	r3, #208	; 0xd0
 8004c80:	429c      	cmp	r4, r3
 8004c82:	d105      	bne.n	8004c90 <std+0x54>
 8004c84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c8c:	f000 b9bc 	b.w	8005008 <__retarget_lock_init_recursive>
 8004c90:	bd10      	pop	{r4, pc}
 8004c92:	bf00      	nop
 8004c94:	08004e59 	.word	0x08004e59
 8004c98:	08004e7f 	.word	0x08004e7f
 8004c9c:	08004eb7 	.word	0x08004eb7
 8004ca0:	08004edb 	.word	0x08004edb
 8004ca4:	20000948 	.word	0x20000948

08004ca8 <stdio_exit_handler>:
 8004ca8:	4a02      	ldr	r2, [pc, #8]	; (8004cb4 <stdio_exit_handler+0xc>)
 8004caa:	4903      	ldr	r1, [pc, #12]	; (8004cb8 <stdio_exit_handler+0x10>)
 8004cac:	4803      	ldr	r0, [pc, #12]	; (8004cbc <stdio_exit_handler+0x14>)
 8004cae:	f000 b869 	b.w	8004d84 <_fwalk_sglue>
 8004cb2:	bf00      	nop
 8004cb4:	2000000c 	.word	0x2000000c
 8004cb8:	08007fa9 	.word	0x08007fa9
 8004cbc:	20000018 	.word	0x20000018

08004cc0 <cleanup_stdio>:
 8004cc0:	6841      	ldr	r1, [r0, #4]
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <cleanup_stdio+0x34>)
 8004cc4:	4299      	cmp	r1, r3
 8004cc6:	b510      	push	{r4, lr}
 8004cc8:	4604      	mov	r4, r0
 8004cca:	d001      	beq.n	8004cd0 <cleanup_stdio+0x10>
 8004ccc:	f003 f96c 	bl	8007fa8 <_fflush_r>
 8004cd0:	68a1      	ldr	r1, [r4, #8]
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <cleanup_stdio+0x38>)
 8004cd4:	4299      	cmp	r1, r3
 8004cd6:	d002      	beq.n	8004cde <cleanup_stdio+0x1e>
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f003 f965 	bl	8007fa8 <_fflush_r>
 8004cde:	68e1      	ldr	r1, [r4, #12]
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <cleanup_stdio+0x3c>)
 8004ce2:	4299      	cmp	r1, r3
 8004ce4:	d004      	beq.n	8004cf0 <cleanup_stdio+0x30>
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cec:	f003 b95c 	b.w	8007fa8 <_fflush_r>
 8004cf0:	bd10      	pop	{r4, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000948 	.word	0x20000948
 8004cf8:	200009b0 	.word	0x200009b0
 8004cfc:	20000a18 	.word	0x20000a18

08004d00 <global_stdio_init.part.0>:
 8004d00:	b510      	push	{r4, lr}
 8004d02:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <global_stdio_init.part.0+0x30>)
 8004d04:	4c0b      	ldr	r4, [pc, #44]	; (8004d34 <global_stdio_init.part.0+0x34>)
 8004d06:	4a0c      	ldr	r2, [pc, #48]	; (8004d38 <global_stdio_init.part.0+0x38>)
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2104      	movs	r1, #4
 8004d10:	f7ff ff94 	bl	8004c3c <std>
 8004d14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d18:	2201      	movs	r2, #1
 8004d1a:	2109      	movs	r1, #9
 8004d1c:	f7ff ff8e 	bl	8004c3c <std>
 8004d20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d24:	2202      	movs	r2, #2
 8004d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d2a:	2112      	movs	r1, #18
 8004d2c:	f7ff bf86 	b.w	8004c3c <std>
 8004d30:	20000a80 	.word	0x20000a80
 8004d34:	20000948 	.word	0x20000948
 8004d38:	08004ca9 	.word	0x08004ca9

08004d3c <__sfp_lock_acquire>:
 8004d3c:	4801      	ldr	r0, [pc, #4]	; (8004d44 <__sfp_lock_acquire+0x8>)
 8004d3e:	f000 b964 	b.w	800500a <__retarget_lock_acquire_recursive>
 8004d42:	bf00      	nop
 8004d44:	20000a89 	.word	0x20000a89

08004d48 <__sfp_lock_release>:
 8004d48:	4801      	ldr	r0, [pc, #4]	; (8004d50 <__sfp_lock_release+0x8>)
 8004d4a:	f000 b95f 	b.w	800500c <__retarget_lock_release_recursive>
 8004d4e:	bf00      	nop
 8004d50:	20000a89 	.word	0x20000a89

08004d54 <__sinit>:
 8004d54:	b510      	push	{r4, lr}
 8004d56:	4604      	mov	r4, r0
 8004d58:	f7ff fff0 	bl	8004d3c <__sfp_lock_acquire>
 8004d5c:	6a23      	ldr	r3, [r4, #32]
 8004d5e:	b11b      	cbz	r3, 8004d68 <__sinit+0x14>
 8004d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d64:	f7ff bff0 	b.w	8004d48 <__sfp_lock_release>
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <__sinit+0x28>)
 8004d6a:	6223      	str	r3, [r4, #32]
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <__sinit+0x2c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f5      	bne.n	8004d60 <__sinit+0xc>
 8004d74:	f7ff ffc4 	bl	8004d00 <global_stdio_init.part.0>
 8004d78:	e7f2      	b.n	8004d60 <__sinit+0xc>
 8004d7a:	bf00      	nop
 8004d7c:	08004cc1 	.word	0x08004cc1
 8004d80:	20000a80 	.word	0x20000a80

08004d84 <_fwalk_sglue>:
 8004d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d88:	4607      	mov	r7, r0
 8004d8a:	4688      	mov	r8, r1
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	2600      	movs	r6, #0
 8004d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d94:	f1b9 0901 	subs.w	r9, r9, #1
 8004d98:	d505      	bpl.n	8004da6 <_fwalk_sglue+0x22>
 8004d9a:	6824      	ldr	r4, [r4, #0]
 8004d9c:	2c00      	cmp	r4, #0
 8004d9e:	d1f7      	bne.n	8004d90 <_fwalk_sglue+0xc>
 8004da0:	4630      	mov	r0, r6
 8004da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004da6:	89ab      	ldrh	r3, [r5, #12]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d907      	bls.n	8004dbc <_fwalk_sglue+0x38>
 8004dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004db0:	3301      	adds	r3, #1
 8004db2:	d003      	beq.n	8004dbc <_fwalk_sglue+0x38>
 8004db4:	4629      	mov	r1, r5
 8004db6:	4638      	mov	r0, r7
 8004db8:	47c0      	blx	r8
 8004dba:	4306      	orrs	r6, r0
 8004dbc:	3568      	adds	r5, #104	; 0x68
 8004dbe:	e7e9      	b.n	8004d94 <_fwalk_sglue+0x10>

08004dc0 <siprintf>:
 8004dc0:	b40e      	push	{r1, r2, r3}
 8004dc2:	b500      	push	{lr}
 8004dc4:	b09c      	sub	sp, #112	; 0x70
 8004dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004dc8:	9002      	str	r0, [sp, #8]
 8004dca:	9006      	str	r0, [sp, #24]
 8004dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dd0:	4809      	ldr	r0, [pc, #36]	; (8004df8 <siprintf+0x38>)
 8004dd2:	9107      	str	r1, [sp, #28]
 8004dd4:	9104      	str	r1, [sp, #16]
 8004dd6:	4909      	ldr	r1, [pc, #36]	; (8004dfc <siprintf+0x3c>)
 8004dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ddc:	9105      	str	r1, [sp, #20]
 8004dde:	6800      	ldr	r0, [r0, #0]
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	a902      	add	r1, sp, #8
 8004de4:	f002 fc3c 	bl	8007660 <_svfiprintf_r>
 8004de8:	9b02      	ldr	r3, [sp, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	b01c      	add	sp, #112	; 0x70
 8004df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004df4:	b003      	add	sp, #12
 8004df6:	4770      	bx	lr
 8004df8:	20000064 	.word	0x20000064
 8004dfc:	ffff0208 	.word	0xffff0208

08004e00 <siscanf>:
 8004e00:	b40e      	push	{r1, r2, r3}
 8004e02:	b510      	push	{r4, lr}
 8004e04:	b09f      	sub	sp, #124	; 0x7c
 8004e06:	ac21      	add	r4, sp, #132	; 0x84
 8004e08:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004e0c:	f854 2b04 	ldr.w	r2, [r4], #4
 8004e10:	9201      	str	r2, [sp, #4]
 8004e12:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004e16:	9004      	str	r0, [sp, #16]
 8004e18:	9008      	str	r0, [sp, #32]
 8004e1a:	f7fb fa49 	bl	80002b0 <strlen>
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <siscanf+0x50>)
 8004e20:	9005      	str	r0, [sp, #20]
 8004e22:	9009      	str	r0, [sp, #36]	; 0x24
 8004e24:	930d      	str	r3, [sp, #52]	; 0x34
 8004e26:	480b      	ldr	r0, [pc, #44]	; (8004e54 <siscanf+0x54>)
 8004e28:	9a01      	ldr	r2, [sp, #4]
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	9403      	str	r4, [sp, #12]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9311      	str	r3, [sp, #68]	; 0x44
 8004e32:	9316      	str	r3, [sp, #88]	; 0x58
 8004e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e38:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004e3c:	a904      	add	r1, sp, #16
 8004e3e:	4623      	mov	r3, r4
 8004e40:	f002 fd66 	bl	8007910 <__ssvfiscanf_r>
 8004e44:	b01f      	add	sp, #124	; 0x7c
 8004e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e4a:	b003      	add	sp, #12
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	08004e7b 	.word	0x08004e7b
 8004e54:	20000064 	.word	0x20000064

08004e58 <__sread>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e60:	f000 f884 	bl	8004f6c <_read_r>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	bfab      	itete	ge
 8004e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e6c:	181b      	addge	r3, r3, r0
 8004e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e72:	bfac      	ite	ge
 8004e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e76:	81a3      	strhlt	r3, [r4, #12]
 8004e78:	bd10      	pop	{r4, pc}

08004e7a <__seofread>:
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	4770      	bx	lr

08004e7e <__swrite>:
 8004e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e82:	461f      	mov	r7, r3
 8004e84:	898b      	ldrh	r3, [r1, #12]
 8004e86:	05db      	lsls	r3, r3, #23
 8004e88:	4605      	mov	r5, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	4616      	mov	r6, r2
 8004e8e:	d505      	bpl.n	8004e9c <__swrite+0x1e>
 8004e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e94:	2302      	movs	r3, #2
 8004e96:	2200      	movs	r2, #0
 8004e98:	f000 f856 	bl	8004f48 <_lseek_r>
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	4632      	mov	r2, r6
 8004eaa:	463b      	mov	r3, r7
 8004eac:	4628      	mov	r0, r5
 8004eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb2:	f000 b86d 	b.w	8004f90 <_write_r>

08004eb6 <__sseek>:
 8004eb6:	b510      	push	{r4, lr}
 8004eb8:	460c      	mov	r4, r1
 8004eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ebe:	f000 f843 	bl	8004f48 <_lseek_r>
 8004ec2:	1c43      	adds	r3, r0, #1
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	bf15      	itete	ne
 8004ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ed2:	81a3      	strheq	r3, [r4, #12]
 8004ed4:	bf18      	it	ne
 8004ed6:	81a3      	strhne	r3, [r4, #12]
 8004ed8:	bd10      	pop	{r4, pc}

08004eda <__sclose>:
 8004eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ede:	f000 b823 	b.w	8004f28 <_close_r>

08004ee2 <memset>:
 8004ee2:	4402      	add	r2, r0
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d100      	bne.n	8004eec <memset+0xa>
 8004eea:	4770      	bx	lr
 8004eec:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef0:	e7f9      	b.n	8004ee6 <memset+0x4>

08004ef2 <strstr>:
 8004ef2:	780a      	ldrb	r2, [r1, #0]
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	b96a      	cbnz	r2, 8004f14 <strstr+0x22>
 8004ef8:	bd70      	pop	{r4, r5, r6, pc}
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d109      	bne.n	8004f12 <strstr+0x20>
 8004efe:	460c      	mov	r4, r1
 8004f00:	4605      	mov	r5, r0
 8004f02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f6      	beq.n	8004ef8 <strstr+0x6>
 8004f0a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004f0e:	429e      	cmp	r6, r3
 8004f10:	d0f7      	beq.n	8004f02 <strstr+0x10>
 8004f12:	3001      	adds	r0, #1
 8004f14:	7803      	ldrb	r3, [r0, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ef      	bne.n	8004efa <strstr+0x8>
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	e7ec      	b.n	8004ef8 <strstr+0x6>
	...

08004f20 <_localeconv_r>:
 8004f20:	4800      	ldr	r0, [pc, #0]	; (8004f24 <_localeconv_r+0x4>)
 8004f22:	4770      	bx	lr
 8004f24:	20000158 	.word	0x20000158

08004f28 <_close_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4d06      	ldr	r5, [pc, #24]	; (8004f44 <_close_r+0x1c>)
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	4604      	mov	r4, r0
 8004f30:	4608      	mov	r0, r1
 8004f32:	602b      	str	r3, [r5, #0]
 8004f34:	f7fc fc83 	bl	800183e <_close>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d102      	bne.n	8004f42 <_close_r+0x1a>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	b103      	cbz	r3, 8004f42 <_close_r+0x1a>
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	20000a84 	.word	0x20000a84

08004f48 <_lseek_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d07      	ldr	r5, [pc, #28]	; (8004f68 <_lseek_r+0x20>)
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	4608      	mov	r0, r1
 8004f50:	4611      	mov	r1, r2
 8004f52:	2200      	movs	r2, #0
 8004f54:	602a      	str	r2, [r5, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f7fc fc98 	bl	800188c <_lseek>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d102      	bne.n	8004f66 <_lseek_r+0x1e>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	b103      	cbz	r3, 8004f66 <_lseek_r+0x1e>
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	20000a84 	.word	0x20000a84

08004f6c <_read_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4d07      	ldr	r5, [pc, #28]	; (8004f8c <_read_r+0x20>)
 8004f70:	4604      	mov	r4, r0
 8004f72:	4608      	mov	r0, r1
 8004f74:	4611      	mov	r1, r2
 8004f76:	2200      	movs	r2, #0
 8004f78:	602a      	str	r2, [r5, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f7fc fc26 	bl	80017cc <_read>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_read_r+0x1e>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_read_r+0x1e>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	20000a84 	.word	0x20000a84

08004f90 <_write_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d07      	ldr	r5, [pc, #28]	; (8004fb0 <_write_r+0x20>)
 8004f94:	4604      	mov	r4, r0
 8004f96:	4608      	mov	r0, r1
 8004f98:	4611      	mov	r1, r2
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f7fc fc31 	bl	8001806 <_write>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_write_r+0x1e>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_write_r+0x1e>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	20000a84 	.word	0x20000a84

08004fb4 <__errno>:
 8004fb4:	4b01      	ldr	r3, [pc, #4]	; (8004fbc <__errno+0x8>)
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000064 	.word	0x20000064

08004fc0 <__libc_init_array>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	4d0d      	ldr	r5, [pc, #52]	; (8004ff8 <__libc_init_array+0x38>)
 8004fc4:	4c0d      	ldr	r4, [pc, #52]	; (8004ffc <__libc_init_array+0x3c>)
 8004fc6:	1b64      	subs	r4, r4, r5
 8004fc8:	10a4      	asrs	r4, r4, #2
 8004fca:	2600      	movs	r6, #0
 8004fcc:	42a6      	cmp	r6, r4
 8004fce:	d109      	bne.n	8004fe4 <__libc_init_array+0x24>
 8004fd0:	4d0b      	ldr	r5, [pc, #44]	; (8005000 <__libc_init_array+0x40>)
 8004fd2:	4c0c      	ldr	r4, [pc, #48]	; (8005004 <__libc_init_array+0x44>)
 8004fd4:	f003 ffe8 	bl	8008fa8 <_init>
 8004fd8:	1b64      	subs	r4, r4, r5
 8004fda:	10a4      	asrs	r4, r4, #2
 8004fdc:	2600      	movs	r6, #0
 8004fde:	42a6      	cmp	r6, r4
 8004fe0:	d105      	bne.n	8004fee <__libc_init_array+0x2e>
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
 8004fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe8:	4798      	blx	r3
 8004fea:	3601      	adds	r6, #1
 8004fec:	e7ee      	b.n	8004fcc <__libc_init_array+0xc>
 8004fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff2:	4798      	blx	r3
 8004ff4:	3601      	adds	r6, #1
 8004ff6:	e7f2      	b.n	8004fde <__libc_init_array+0x1e>
 8004ff8:	0800948c 	.word	0x0800948c
 8004ffc:	0800948c 	.word	0x0800948c
 8005000:	0800948c 	.word	0x0800948c
 8005004:	08009490 	.word	0x08009490

08005008 <__retarget_lock_init_recursive>:
 8005008:	4770      	bx	lr

0800500a <__retarget_lock_acquire_recursive>:
 800500a:	4770      	bx	lr

0800500c <__retarget_lock_release_recursive>:
 800500c:	4770      	bx	lr

0800500e <strcpy>:
 800500e:	4603      	mov	r3, r0
 8005010:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005014:	f803 2b01 	strb.w	r2, [r3], #1
 8005018:	2a00      	cmp	r2, #0
 800501a:	d1f9      	bne.n	8005010 <strcpy+0x2>
 800501c:	4770      	bx	lr
	...

08005020 <nanf>:
 8005020:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005028 <nanf+0x8>
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	7fc00000 	.word	0x7fc00000

0800502c <quorem>:
 800502c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005030:	6903      	ldr	r3, [r0, #16]
 8005032:	690c      	ldr	r4, [r1, #16]
 8005034:	42a3      	cmp	r3, r4
 8005036:	4607      	mov	r7, r0
 8005038:	db7e      	blt.n	8005138 <quorem+0x10c>
 800503a:	3c01      	subs	r4, #1
 800503c:	f101 0814 	add.w	r8, r1, #20
 8005040:	f100 0514 	add.w	r5, r0, #20
 8005044:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800504e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005052:	3301      	adds	r3, #1
 8005054:	429a      	cmp	r2, r3
 8005056:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800505a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800505e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005062:	d331      	bcc.n	80050c8 <quorem+0x9c>
 8005064:	f04f 0e00 	mov.w	lr, #0
 8005068:	4640      	mov	r0, r8
 800506a:	46ac      	mov	ip, r5
 800506c:	46f2      	mov	sl, lr
 800506e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005072:	b293      	uxth	r3, r2
 8005074:	fb06 e303 	mla	r3, r6, r3, lr
 8005078:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800507c:	0c1a      	lsrs	r2, r3, #16
 800507e:	b29b      	uxth	r3, r3
 8005080:	ebaa 0303 	sub.w	r3, sl, r3
 8005084:	f8dc a000 	ldr.w	sl, [ip]
 8005088:	fa13 f38a 	uxtah	r3, r3, sl
 800508c:	fb06 220e 	mla	r2, r6, lr, r2
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	9b00      	ldr	r3, [sp, #0]
 8005094:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005098:	b292      	uxth	r2, r2
 800509a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800509e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050a2:	f8bd 3000 	ldrh.w	r3, [sp]
 80050a6:	4581      	cmp	r9, r0
 80050a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050ac:	f84c 3b04 	str.w	r3, [ip], #4
 80050b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050b4:	d2db      	bcs.n	800506e <quorem+0x42>
 80050b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80050ba:	b92b      	cbnz	r3, 80050c8 <quorem+0x9c>
 80050bc:	9b01      	ldr	r3, [sp, #4]
 80050be:	3b04      	subs	r3, #4
 80050c0:	429d      	cmp	r5, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	d32c      	bcc.n	8005120 <quorem+0xf4>
 80050c6:	613c      	str	r4, [r7, #16]
 80050c8:	4638      	mov	r0, r7
 80050ca:	f001 f9f1 	bl	80064b0 <__mcmp>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	db22      	blt.n	8005118 <quorem+0xec>
 80050d2:	3601      	adds	r6, #1
 80050d4:	4629      	mov	r1, r5
 80050d6:	2000      	movs	r0, #0
 80050d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80050dc:	f8d1 c000 	ldr.w	ip, [r1]
 80050e0:	b293      	uxth	r3, r2
 80050e2:	1ac3      	subs	r3, r0, r3
 80050e4:	0c12      	lsrs	r2, r2, #16
 80050e6:	fa13 f38c 	uxtah	r3, r3, ip
 80050ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80050ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050f8:	45c1      	cmp	r9, r8
 80050fa:	f841 3b04 	str.w	r3, [r1], #4
 80050fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005102:	d2e9      	bcs.n	80050d8 <quorem+0xac>
 8005104:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005108:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800510c:	b922      	cbnz	r2, 8005118 <quorem+0xec>
 800510e:	3b04      	subs	r3, #4
 8005110:	429d      	cmp	r5, r3
 8005112:	461a      	mov	r2, r3
 8005114:	d30a      	bcc.n	800512c <quorem+0x100>
 8005116:	613c      	str	r4, [r7, #16]
 8005118:	4630      	mov	r0, r6
 800511a:	b003      	add	sp, #12
 800511c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	3b04      	subs	r3, #4
 8005124:	2a00      	cmp	r2, #0
 8005126:	d1ce      	bne.n	80050c6 <quorem+0x9a>
 8005128:	3c01      	subs	r4, #1
 800512a:	e7c9      	b.n	80050c0 <quorem+0x94>
 800512c:	6812      	ldr	r2, [r2, #0]
 800512e:	3b04      	subs	r3, #4
 8005130:	2a00      	cmp	r2, #0
 8005132:	d1f0      	bne.n	8005116 <quorem+0xea>
 8005134:	3c01      	subs	r4, #1
 8005136:	e7eb      	b.n	8005110 <quorem+0xe4>
 8005138:	2000      	movs	r0, #0
 800513a:	e7ee      	b.n	800511a <quorem+0xee>
 800513c:	0000      	movs	r0, r0
	...

08005140 <_dtoa_r>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	ed2d 8b04 	vpush	{d8-d9}
 8005148:	69c5      	ldr	r5, [r0, #28]
 800514a:	b093      	sub	sp, #76	; 0x4c
 800514c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005150:	ec57 6b10 	vmov	r6, r7, d0
 8005154:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005158:	9107      	str	r1, [sp, #28]
 800515a:	4604      	mov	r4, r0
 800515c:	920a      	str	r2, [sp, #40]	; 0x28
 800515e:	930d      	str	r3, [sp, #52]	; 0x34
 8005160:	b975      	cbnz	r5, 8005180 <_dtoa_r+0x40>
 8005162:	2010      	movs	r0, #16
 8005164:	f000 fe2a 	bl	8005dbc <malloc>
 8005168:	4602      	mov	r2, r0
 800516a:	61e0      	str	r0, [r4, #28]
 800516c:	b920      	cbnz	r0, 8005178 <_dtoa_r+0x38>
 800516e:	4bae      	ldr	r3, [pc, #696]	; (8005428 <_dtoa_r+0x2e8>)
 8005170:	21ef      	movs	r1, #239	; 0xef
 8005172:	48ae      	ldr	r0, [pc, #696]	; (800542c <_dtoa_r+0x2ec>)
 8005174:	f003 f808 	bl	8008188 <__assert_func>
 8005178:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800517c:	6005      	str	r5, [r0, #0]
 800517e:	60c5      	str	r5, [r0, #12]
 8005180:	69e3      	ldr	r3, [r4, #28]
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	b151      	cbz	r1, 800519c <_dtoa_r+0x5c>
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	604a      	str	r2, [r1, #4]
 800518a:	2301      	movs	r3, #1
 800518c:	4093      	lsls	r3, r2
 800518e:	608b      	str	r3, [r1, #8]
 8005190:	4620      	mov	r0, r4
 8005192:	f000 ff07 	bl	8005fa4 <_Bfree>
 8005196:	69e3      	ldr	r3, [r4, #28]
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	1e3b      	subs	r3, r7, #0
 800519e:	bfbb      	ittet	lt
 80051a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051a4:	9303      	strlt	r3, [sp, #12]
 80051a6:	2300      	movge	r3, #0
 80051a8:	2201      	movlt	r2, #1
 80051aa:	bfac      	ite	ge
 80051ac:	f8c8 3000 	strge.w	r3, [r8]
 80051b0:	f8c8 2000 	strlt.w	r2, [r8]
 80051b4:	4b9e      	ldr	r3, [pc, #632]	; (8005430 <_dtoa_r+0x2f0>)
 80051b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80051ba:	ea33 0308 	bics.w	r3, r3, r8
 80051be:	d11b      	bne.n	80051f8 <_dtoa_r+0xb8>
 80051c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80051cc:	4333      	orrs	r3, r6
 80051ce:	f000 8593 	beq.w	8005cf8 <_dtoa_r+0xbb8>
 80051d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051d4:	b963      	cbnz	r3, 80051f0 <_dtoa_r+0xb0>
 80051d6:	4b97      	ldr	r3, [pc, #604]	; (8005434 <_dtoa_r+0x2f4>)
 80051d8:	e027      	b.n	800522a <_dtoa_r+0xea>
 80051da:	4b97      	ldr	r3, [pc, #604]	; (8005438 <_dtoa_r+0x2f8>)
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	3308      	adds	r3, #8
 80051e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	9800      	ldr	r0, [sp, #0]
 80051e6:	b013      	add	sp, #76	; 0x4c
 80051e8:	ecbd 8b04 	vpop	{d8-d9}
 80051ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f0:	4b90      	ldr	r3, [pc, #576]	; (8005434 <_dtoa_r+0x2f4>)
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	3303      	adds	r3, #3
 80051f6:	e7f3      	b.n	80051e0 <_dtoa_r+0xa0>
 80051f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	ec51 0b17 	vmov	r0, r1, d7
 8005202:	eeb0 8a47 	vmov.f32	s16, s14
 8005206:	eef0 8a67 	vmov.f32	s17, s15
 800520a:	2300      	movs	r3, #0
 800520c:	f7fb fc7c 	bl	8000b08 <__aeabi_dcmpeq>
 8005210:	4681      	mov	r9, r0
 8005212:	b160      	cbz	r0, 800522e <_dtoa_r+0xee>
 8005214:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005216:	2301      	movs	r3, #1
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8568 	beq.w	8005cf2 <_dtoa_r+0xbb2>
 8005222:	4b86      	ldr	r3, [pc, #536]	; (800543c <_dtoa_r+0x2fc>)
 8005224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	3b01      	subs	r3, #1
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	e7da      	b.n	80051e4 <_dtoa_r+0xa4>
 800522e:	aa10      	add	r2, sp, #64	; 0x40
 8005230:	a911      	add	r1, sp, #68	; 0x44
 8005232:	4620      	mov	r0, r4
 8005234:	eeb0 0a48 	vmov.f32	s0, s16
 8005238:	eef0 0a68 	vmov.f32	s1, s17
 800523c:	f001 fa4e 	bl	80066dc <__d2b>
 8005240:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005244:	4682      	mov	sl, r0
 8005246:	2d00      	cmp	r5, #0
 8005248:	d07f      	beq.n	800534a <_dtoa_r+0x20a>
 800524a:	ee18 3a90 	vmov	r3, s17
 800524e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005252:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005256:	ec51 0b18 	vmov	r0, r1, d8
 800525a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800525e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005262:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005266:	4619      	mov	r1, r3
 8005268:	2200      	movs	r2, #0
 800526a:	4b75      	ldr	r3, [pc, #468]	; (8005440 <_dtoa_r+0x300>)
 800526c:	f7fb f82c 	bl	80002c8 <__aeabi_dsub>
 8005270:	a367      	add	r3, pc, #412	; (adr r3, 8005410 <_dtoa_r+0x2d0>)
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	f7fb f9df 	bl	8000638 <__aeabi_dmul>
 800527a:	a367      	add	r3, pc, #412	; (adr r3, 8005418 <_dtoa_r+0x2d8>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f7fb f824 	bl	80002cc <__adddf3>
 8005284:	4606      	mov	r6, r0
 8005286:	4628      	mov	r0, r5
 8005288:	460f      	mov	r7, r1
 800528a:	f7fb f96b 	bl	8000564 <__aeabi_i2d>
 800528e:	a364      	add	r3, pc, #400	; (adr r3, 8005420 <_dtoa_r+0x2e0>)
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f7fb f9d0 	bl	8000638 <__aeabi_dmul>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4630      	mov	r0, r6
 800529e:	4639      	mov	r1, r7
 80052a0:	f7fb f814 	bl	80002cc <__adddf3>
 80052a4:	4606      	mov	r6, r0
 80052a6:	460f      	mov	r7, r1
 80052a8:	f7fb fc76 	bl	8000b98 <__aeabi_d2iz>
 80052ac:	2200      	movs	r2, #0
 80052ae:	4683      	mov	fp, r0
 80052b0:	2300      	movs	r3, #0
 80052b2:	4630      	mov	r0, r6
 80052b4:	4639      	mov	r1, r7
 80052b6:	f7fb fc31 	bl	8000b1c <__aeabi_dcmplt>
 80052ba:	b148      	cbz	r0, 80052d0 <_dtoa_r+0x190>
 80052bc:	4658      	mov	r0, fp
 80052be:	f7fb f951 	bl	8000564 <__aeabi_i2d>
 80052c2:	4632      	mov	r2, r6
 80052c4:	463b      	mov	r3, r7
 80052c6:	f7fb fc1f 	bl	8000b08 <__aeabi_dcmpeq>
 80052ca:	b908      	cbnz	r0, 80052d0 <_dtoa_r+0x190>
 80052cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052d0:	f1bb 0f16 	cmp.w	fp, #22
 80052d4:	d857      	bhi.n	8005386 <_dtoa_r+0x246>
 80052d6:	4b5b      	ldr	r3, [pc, #364]	; (8005444 <_dtoa_r+0x304>)
 80052d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	ec51 0b18 	vmov	r0, r1, d8
 80052e4:	f7fb fc1a 	bl	8000b1c <__aeabi_dcmplt>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d04e      	beq.n	800538a <_dtoa_r+0x24a>
 80052ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052f0:	2300      	movs	r3, #0
 80052f2:	930c      	str	r3, [sp, #48]	; 0x30
 80052f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052f6:	1b5b      	subs	r3, r3, r5
 80052f8:	1e5a      	subs	r2, r3, #1
 80052fa:	bf45      	ittet	mi
 80052fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8005300:	9305      	strmi	r3, [sp, #20]
 8005302:	2300      	movpl	r3, #0
 8005304:	2300      	movmi	r3, #0
 8005306:	9206      	str	r2, [sp, #24]
 8005308:	bf54      	ite	pl
 800530a:	9305      	strpl	r3, [sp, #20]
 800530c:	9306      	strmi	r3, [sp, #24]
 800530e:	f1bb 0f00 	cmp.w	fp, #0
 8005312:	db3c      	blt.n	800538e <_dtoa_r+0x24e>
 8005314:	9b06      	ldr	r3, [sp, #24]
 8005316:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800531a:	445b      	add	r3, fp
 800531c:	9306      	str	r3, [sp, #24]
 800531e:	2300      	movs	r3, #0
 8005320:	9308      	str	r3, [sp, #32]
 8005322:	9b07      	ldr	r3, [sp, #28]
 8005324:	2b09      	cmp	r3, #9
 8005326:	d868      	bhi.n	80053fa <_dtoa_r+0x2ba>
 8005328:	2b05      	cmp	r3, #5
 800532a:	bfc4      	itt	gt
 800532c:	3b04      	subgt	r3, #4
 800532e:	9307      	strgt	r3, [sp, #28]
 8005330:	9b07      	ldr	r3, [sp, #28]
 8005332:	f1a3 0302 	sub.w	r3, r3, #2
 8005336:	bfcc      	ite	gt
 8005338:	2500      	movgt	r5, #0
 800533a:	2501      	movle	r5, #1
 800533c:	2b03      	cmp	r3, #3
 800533e:	f200 8085 	bhi.w	800544c <_dtoa_r+0x30c>
 8005342:	e8df f003 	tbb	[pc, r3]
 8005346:	3b2e      	.short	0x3b2e
 8005348:	5839      	.short	0x5839
 800534a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800534e:	441d      	add	r5, r3
 8005350:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005354:	2b20      	cmp	r3, #32
 8005356:	bfc1      	itttt	gt
 8005358:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800535c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005360:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005364:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005368:	bfd6      	itet	le
 800536a:	f1c3 0320 	rsble	r3, r3, #32
 800536e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005372:	fa06 f003 	lslle.w	r0, r6, r3
 8005376:	f7fb f8e5 	bl	8000544 <__aeabi_ui2d>
 800537a:	2201      	movs	r2, #1
 800537c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005380:	3d01      	subs	r5, #1
 8005382:	920e      	str	r2, [sp, #56]	; 0x38
 8005384:	e76f      	b.n	8005266 <_dtoa_r+0x126>
 8005386:	2301      	movs	r3, #1
 8005388:	e7b3      	b.n	80052f2 <_dtoa_r+0x1b2>
 800538a:	900c      	str	r0, [sp, #48]	; 0x30
 800538c:	e7b2      	b.n	80052f4 <_dtoa_r+0x1b4>
 800538e:	9b05      	ldr	r3, [sp, #20]
 8005390:	eba3 030b 	sub.w	r3, r3, fp
 8005394:	9305      	str	r3, [sp, #20]
 8005396:	f1cb 0300 	rsb	r3, fp, #0
 800539a:	9308      	str	r3, [sp, #32]
 800539c:	2300      	movs	r3, #0
 800539e:	930b      	str	r3, [sp, #44]	; 0x2c
 80053a0:	e7bf      	b.n	8005322 <_dtoa_r+0x1e2>
 80053a2:	2300      	movs	r3, #0
 80053a4:	9309      	str	r3, [sp, #36]	; 0x24
 80053a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dc52      	bgt.n	8005452 <_dtoa_r+0x312>
 80053ac:	2301      	movs	r3, #1
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	9304      	str	r3, [sp, #16]
 80053b2:	461a      	mov	r2, r3
 80053b4:	920a      	str	r2, [sp, #40]	; 0x28
 80053b6:	e00b      	b.n	80053d0 <_dtoa_r+0x290>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e7f3      	b.n	80053a4 <_dtoa_r+0x264>
 80053bc:	2300      	movs	r3, #0
 80053be:	9309      	str	r3, [sp, #36]	; 0x24
 80053c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c2:	445b      	add	r3, fp
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	3301      	adds	r3, #1
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	9304      	str	r3, [sp, #16]
 80053cc:	bfb8      	it	lt
 80053ce:	2301      	movlt	r3, #1
 80053d0:	69e0      	ldr	r0, [r4, #28]
 80053d2:	2100      	movs	r1, #0
 80053d4:	2204      	movs	r2, #4
 80053d6:	f102 0614 	add.w	r6, r2, #20
 80053da:	429e      	cmp	r6, r3
 80053dc:	d93d      	bls.n	800545a <_dtoa_r+0x31a>
 80053de:	6041      	str	r1, [r0, #4]
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 fd9f 	bl	8005f24 <_Balloc>
 80053e6:	9000      	str	r0, [sp, #0]
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d139      	bne.n	8005460 <_dtoa_r+0x320>
 80053ec:	4b16      	ldr	r3, [pc, #88]	; (8005448 <_dtoa_r+0x308>)
 80053ee:	4602      	mov	r2, r0
 80053f0:	f240 11af 	movw	r1, #431	; 0x1af
 80053f4:	e6bd      	b.n	8005172 <_dtoa_r+0x32>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e7e1      	b.n	80053be <_dtoa_r+0x27e>
 80053fa:	2501      	movs	r5, #1
 80053fc:	2300      	movs	r3, #0
 80053fe:	9307      	str	r3, [sp, #28]
 8005400:	9509      	str	r5, [sp, #36]	; 0x24
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	9304      	str	r3, [sp, #16]
 800540a:	2200      	movs	r2, #0
 800540c:	2312      	movs	r3, #18
 800540e:	e7d1      	b.n	80053b4 <_dtoa_r+0x274>
 8005410:	636f4361 	.word	0x636f4361
 8005414:	3fd287a7 	.word	0x3fd287a7
 8005418:	8b60c8b3 	.word	0x8b60c8b3
 800541c:	3fc68a28 	.word	0x3fc68a28
 8005420:	509f79fb 	.word	0x509f79fb
 8005424:	3fd34413 	.word	0x3fd34413
 8005428:	08009084 	.word	0x08009084
 800542c:	0800909b 	.word	0x0800909b
 8005430:	7ff00000 	.word	0x7ff00000
 8005434:	08009080 	.word	0x08009080
 8005438:	08009077 	.word	0x08009077
 800543c:	080093d9 	.word	0x080093d9
 8005440:	3ff80000 	.word	0x3ff80000
 8005444:	08009188 	.word	0x08009188
 8005448:	080090f3 	.word	0x080090f3
 800544c:	2301      	movs	r3, #1
 800544e:	9309      	str	r3, [sp, #36]	; 0x24
 8005450:	e7d7      	b.n	8005402 <_dtoa_r+0x2c2>
 8005452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	9304      	str	r3, [sp, #16]
 8005458:	e7ba      	b.n	80053d0 <_dtoa_r+0x290>
 800545a:	3101      	adds	r1, #1
 800545c:	0052      	lsls	r2, r2, #1
 800545e:	e7ba      	b.n	80053d6 <_dtoa_r+0x296>
 8005460:	69e3      	ldr	r3, [r4, #28]
 8005462:	9a00      	ldr	r2, [sp, #0]
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	9b04      	ldr	r3, [sp, #16]
 8005468:	2b0e      	cmp	r3, #14
 800546a:	f200 80a8 	bhi.w	80055be <_dtoa_r+0x47e>
 800546e:	2d00      	cmp	r5, #0
 8005470:	f000 80a5 	beq.w	80055be <_dtoa_r+0x47e>
 8005474:	f1bb 0f00 	cmp.w	fp, #0
 8005478:	dd38      	ble.n	80054ec <_dtoa_r+0x3ac>
 800547a:	4bc0      	ldr	r3, [pc, #768]	; (800577c <_dtoa_r+0x63c>)
 800547c:	f00b 020f 	and.w	r2, fp, #15
 8005480:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005484:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005488:	e9d3 6700 	ldrd	r6, r7, [r3]
 800548c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005490:	d019      	beq.n	80054c6 <_dtoa_r+0x386>
 8005492:	4bbb      	ldr	r3, [pc, #748]	; (8005780 <_dtoa_r+0x640>)
 8005494:	ec51 0b18 	vmov	r0, r1, d8
 8005498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800549c:	f7fb f9f6 	bl	800088c <__aeabi_ddiv>
 80054a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054a4:	f008 080f 	and.w	r8, r8, #15
 80054a8:	2503      	movs	r5, #3
 80054aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005780 <_dtoa_r+0x640>
 80054ae:	f1b8 0f00 	cmp.w	r8, #0
 80054b2:	d10a      	bne.n	80054ca <_dtoa_r+0x38a>
 80054b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054b8:	4632      	mov	r2, r6
 80054ba:	463b      	mov	r3, r7
 80054bc:	f7fb f9e6 	bl	800088c <__aeabi_ddiv>
 80054c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054c4:	e02b      	b.n	800551e <_dtoa_r+0x3de>
 80054c6:	2502      	movs	r5, #2
 80054c8:	e7ef      	b.n	80054aa <_dtoa_r+0x36a>
 80054ca:	f018 0f01 	tst.w	r8, #1
 80054ce:	d008      	beq.n	80054e2 <_dtoa_r+0x3a2>
 80054d0:	4630      	mov	r0, r6
 80054d2:	4639      	mov	r1, r7
 80054d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80054d8:	f7fb f8ae 	bl	8000638 <__aeabi_dmul>
 80054dc:	3501      	adds	r5, #1
 80054de:	4606      	mov	r6, r0
 80054e0:	460f      	mov	r7, r1
 80054e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80054e6:	f109 0908 	add.w	r9, r9, #8
 80054ea:	e7e0      	b.n	80054ae <_dtoa_r+0x36e>
 80054ec:	f000 809f 	beq.w	800562e <_dtoa_r+0x4ee>
 80054f0:	f1cb 0600 	rsb	r6, fp, #0
 80054f4:	4ba1      	ldr	r3, [pc, #644]	; (800577c <_dtoa_r+0x63c>)
 80054f6:	4fa2      	ldr	r7, [pc, #648]	; (8005780 <_dtoa_r+0x640>)
 80054f8:	f006 020f 	and.w	r2, r6, #15
 80054fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	ec51 0b18 	vmov	r0, r1, d8
 8005508:	f7fb f896 	bl	8000638 <__aeabi_dmul>
 800550c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005510:	1136      	asrs	r6, r6, #4
 8005512:	2300      	movs	r3, #0
 8005514:	2502      	movs	r5, #2
 8005516:	2e00      	cmp	r6, #0
 8005518:	d17e      	bne.n	8005618 <_dtoa_r+0x4d8>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1d0      	bne.n	80054c0 <_dtoa_r+0x380>
 800551e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005520:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8084 	beq.w	8005632 <_dtoa_r+0x4f2>
 800552a:	4b96      	ldr	r3, [pc, #600]	; (8005784 <_dtoa_r+0x644>)
 800552c:	2200      	movs	r2, #0
 800552e:	4640      	mov	r0, r8
 8005530:	4649      	mov	r1, r9
 8005532:	f7fb faf3 	bl	8000b1c <__aeabi_dcmplt>
 8005536:	2800      	cmp	r0, #0
 8005538:	d07b      	beq.n	8005632 <_dtoa_r+0x4f2>
 800553a:	9b04      	ldr	r3, [sp, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d078      	beq.n	8005632 <_dtoa_r+0x4f2>
 8005540:	9b01      	ldr	r3, [sp, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	dd39      	ble.n	80055ba <_dtoa_r+0x47a>
 8005546:	4b90      	ldr	r3, [pc, #576]	; (8005788 <_dtoa_r+0x648>)
 8005548:	2200      	movs	r2, #0
 800554a:	4640      	mov	r0, r8
 800554c:	4649      	mov	r1, r9
 800554e:	f7fb f873 	bl	8000638 <__aeabi_dmul>
 8005552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005556:	9e01      	ldr	r6, [sp, #4]
 8005558:	f10b 37ff 	add.w	r7, fp, #4294967295
 800555c:	3501      	adds	r5, #1
 800555e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005562:	4628      	mov	r0, r5
 8005564:	f7fa fffe 	bl	8000564 <__aeabi_i2d>
 8005568:	4642      	mov	r2, r8
 800556a:	464b      	mov	r3, r9
 800556c:	f7fb f864 	bl	8000638 <__aeabi_dmul>
 8005570:	4b86      	ldr	r3, [pc, #536]	; (800578c <_dtoa_r+0x64c>)
 8005572:	2200      	movs	r2, #0
 8005574:	f7fa feaa 	bl	80002cc <__adddf3>
 8005578:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800557c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005580:	9303      	str	r3, [sp, #12]
 8005582:	2e00      	cmp	r6, #0
 8005584:	d158      	bne.n	8005638 <_dtoa_r+0x4f8>
 8005586:	4b82      	ldr	r3, [pc, #520]	; (8005790 <_dtoa_r+0x650>)
 8005588:	2200      	movs	r2, #0
 800558a:	4640      	mov	r0, r8
 800558c:	4649      	mov	r1, r9
 800558e:	f7fa fe9b 	bl	80002c8 <__aeabi_dsub>
 8005592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005596:	4680      	mov	r8, r0
 8005598:	4689      	mov	r9, r1
 800559a:	f7fb fadd 	bl	8000b58 <__aeabi_dcmpgt>
 800559e:	2800      	cmp	r0, #0
 80055a0:	f040 8296 	bne.w	8005ad0 <_dtoa_r+0x990>
 80055a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80055a8:	4640      	mov	r0, r8
 80055aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055ae:	4649      	mov	r1, r9
 80055b0:	f7fb fab4 	bl	8000b1c <__aeabi_dcmplt>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	f040 8289 	bne.w	8005acc <_dtoa_r+0x98c>
 80055ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80055be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f2c0 814e 	blt.w	8005862 <_dtoa_r+0x722>
 80055c6:	f1bb 0f0e 	cmp.w	fp, #14
 80055ca:	f300 814a 	bgt.w	8005862 <_dtoa_r+0x722>
 80055ce:	4b6b      	ldr	r3, [pc, #428]	; (800577c <_dtoa_r+0x63c>)
 80055d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80055d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f280 80dc 	bge.w	8005798 <_dtoa_r+0x658>
 80055e0:	9b04      	ldr	r3, [sp, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f300 80d8 	bgt.w	8005798 <_dtoa_r+0x658>
 80055e8:	f040 826f 	bne.w	8005aca <_dtoa_r+0x98a>
 80055ec:	4b68      	ldr	r3, [pc, #416]	; (8005790 <_dtoa_r+0x650>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	4640      	mov	r0, r8
 80055f2:	4649      	mov	r1, r9
 80055f4:	f7fb f820 	bl	8000638 <__aeabi_dmul>
 80055f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055fc:	f7fb faa2 	bl	8000b44 <__aeabi_dcmpge>
 8005600:	9e04      	ldr	r6, [sp, #16]
 8005602:	4637      	mov	r7, r6
 8005604:	2800      	cmp	r0, #0
 8005606:	f040 8245 	bne.w	8005a94 <_dtoa_r+0x954>
 800560a:	9d00      	ldr	r5, [sp, #0]
 800560c:	2331      	movs	r3, #49	; 0x31
 800560e:	f805 3b01 	strb.w	r3, [r5], #1
 8005612:	f10b 0b01 	add.w	fp, fp, #1
 8005616:	e241      	b.n	8005a9c <_dtoa_r+0x95c>
 8005618:	07f2      	lsls	r2, r6, #31
 800561a:	d505      	bpl.n	8005628 <_dtoa_r+0x4e8>
 800561c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005620:	f7fb f80a 	bl	8000638 <__aeabi_dmul>
 8005624:	3501      	adds	r5, #1
 8005626:	2301      	movs	r3, #1
 8005628:	1076      	asrs	r6, r6, #1
 800562a:	3708      	adds	r7, #8
 800562c:	e773      	b.n	8005516 <_dtoa_r+0x3d6>
 800562e:	2502      	movs	r5, #2
 8005630:	e775      	b.n	800551e <_dtoa_r+0x3de>
 8005632:	9e04      	ldr	r6, [sp, #16]
 8005634:	465f      	mov	r7, fp
 8005636:	e792      	b.n	800555e <_dtoa_r+0x41e>
 8005638:	9900      	ldr	r1, [sp, #0]
 800563a:	4b50      	ldr	r3, [pc, #320]	; (800577c <_dtoa_r+0x63c>)
 800563c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005640:	4431      	add	r1, r6
 8005642:	9102      	str	r1, [sp, #8]
 8005644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005646:	eeb0 9a47 	vmov.f32	s18, s14
 800564a:	eef0 9a67 	vmov.f32	s19, s15
 800564e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005652:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005656:	2900      	cmp	r1, #0
 8005658:	d044      	beq.n	80056e4 <_dtoa_r+0x5a4>
 800565a:	494e      	ldr	r1, [pc, #312]	; (8005794 <_dtoa_r+0x654>)
 800565c:	2000      	movs	r0, #0
 800565e:	f7fb f915 	bl	800088c <__aeabi_ddiv>
 8005662:	ec53 2b19 	vmov	r2, r3, d9
 8005666:	f7fa fe2f 	bl	80002c8 <__aeabi_dsub>
 800566a:	9d00      	ldr	r5, [sp, #0]
 800566c:	ec41 0b19 	vmov	d9, r0, r1
 8005670:	4649      	mov	r1, r9
 8005672:	4640      	mov	r0, r8
 8005674:	f7fb fa90 	bl	8000b98 <__aeabi_d2iz>
 8005678:	4606      	mov	r6, r0
 800567a:	f7fa ff73 	bl	8000564 <__aeabi_i2d>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4640      	mov	r0, r8
 8005684:	4649      	mov	r1, r9
 8005686:	f7fa fe1f 	bl	80002c8 <__aeabi_dsub>
 800568a:	3630      	adds	r6, #48	; 0x30
 800568c:	f805 6b01 	strb.w	r6, [r5], #1
 8005690:	ec53 2b19 	vmov	r2, r3, d9
 8005694:	4680      	mov	r8, r0
 8005696:	4689      	mov	r9, r1
 8005698:	f7fb fa40 	bl	8000b1c <__aeabi_dcmplt>
 800569c:	2800      	cmp	r0, #0
 800569e:	d164      	bne.n	800576a <_dtoa_r+0x62a>
 80056a0:	4642      	mov	r2, r8
 80056a2:	464b      	mov	r3, r9
 80056a4:	4937      	ldr	r1, [pc, #220]	; (8005784 <_dtoa_r+0x644>)
 80056a6:	2000      	movs	r0, #0
 80056a8:	f7fa fe0e 	bl	80002c8 <__aeabi_dsub>
 80056ac:	ec53 2b19 	vmov	r2, r3, d9
 80056b0:	f7fb fa34 	bl	8000b1c <__aeabi_dcmplt>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	f040 80b6 	bne.w	8005826 <_dtoa_r+0x6e6>
 80056ba:	9b02      	ldr	r3, [sp, #8]
 80056bc:	429d      	cmp	r5, r3
 80056be:	f43f af7c 	beq.w	80055ba <_dtoa_r+0x47a>
 80056c2:	4b31      	ldr	r3, [pc, #196]	; (8005788 <_dtoa_r+0x648>)
 80056c4:	ec51 0b19 	vmov	r0, r1, d9
 80056c8:	2200      	movs	r2, #0
 80056ca:	f7fa ffb5 	bl	8000638 <__aeabi_dmul>
 80056ce:	4b2e      	ldr	r3, [pc, #184]	; (8005788 <_dtoa_r+0x648>)
 80056d0:	ec41 0b19 	vmov	d9, r0, r1
 80056d4:	2200      	movs	r2, #0
 80056d6:	4640      	mov	r0, r8
 80056d8:	4649      	mov	r1, r9
 80056da:	f7fa ffad 	bl	8000638 <__aeabi_dmul>
 80056de:	4680      	mov	r8, r0
 80056e0:	4689      	mov	r9, r1
 80056e2:	e7c5      	b.n	8005670 <_dtoa_r+0x530>
 80056e4:	ec51 0b17 	vmov	r0, r1, d7
 80056e8:	f7fa ffa6 	bl	8000638 <__aeabi_dmul>
 80056ec:	9b02      	ldr	r3, [sp, #8]
 80056ee:	9d00      	ldr	r5, [sp, #0]
 80056f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80056f2:	ec41 0b19 	vmov	d9, r0, r1
 80056f6:	4649      	mov	r1, r9
 80056f8:	4640      	mov	r0, r8
 80056fa:	f7fb fa4d 	bl	8000b98 <__aeabi_d2iz>
 80056fe:	4606      	mov	r6, r0
 8005700:	f7fa ff30 	bl	8000564 <__aeabi_i2d>
 8005704:	3630      	adds	r6, #48	; 0x30
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	f7fa fddb 	bl	80002c8 <__aeabi_dsub>
 8005712:	f805 6b01 	strb.w	r6, [r5], #1
 8005716:	9b02      	ldr	r3, [sp, #8]
 8005718:	429d      	cmp	r5, r3
 800571a:	4680      	mov	r8, r0
 800571c:	4689      	mov	r9, r1
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	d124      	bne.n	800576e <_dtoa_r+0x62e>
 8005724:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <_dtoa_r+0x654>)
 8005726:	ec51 0b19 	vmov	r0, r1, d9
 800572a:	f7fa fdcf 	bl	80002cc <__adddf3>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4640      	mov	r0, r8
 8005734:	4649      	mov	r1, r9
 8005736:	f7fb fa0f 	bl	8000b58 <__aeabi_dcmpgt>
 800573a:	2800      	cmp	r0, #0
 800573c:	d173      	bne.n	8005826 <_dtoa_r+0x6e6>
 800573e:	ec53 2b19 	vmov	r2, r3, d9
 8005742:	4914      	ldr	r1, [pc, #80]	; (8005794 <_dtoa_r+0x654>)
 8005744:	2000      	movs	r0, #0
 8005746:	f7fa fdbf 	bl	80002c8 <__aeabi_dsub>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4640      	mov	r0, r8
 8005750:	4649      	mov	r1, r9
 8005752:	f7fb f9e3 	bl	8000b1c <__aeabi_dcmplt>
 8005756:	2800      	cmp	r0, #0
 8005758:	f43f af2f 	beq.w	80055ba <_dtoa_r+0x47a>
 800575c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800575e:	1e6b      	subs	r3, r5, #1
 8005760:	930f      	str	r3, [sp, #60]	; 0x3c
 8005762:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005766:	2b30      	cmp	r3, #48	; 0x30
 8005768:	d0f8      	beq.n	800575c <_dtoa_r+0x61c>
 800576a:	46bb      	mov	fp, r7
 800576c:	e04a      	b.n	8005804 <_dtoa_r+0x6c4>
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <_dtoa_r+0x648>)
 8005770:	f7fa ff62 	bl	8000638 <__aeabi_dmul>
 8005774:	4680      	mov	r8, r0
 8005776:	4689      	mov	r9, r1
 8005778:	e7bd      	b.n	80056f6 <_dtoa_r+0x5b6>
 800577a:	bf00      	nop
 800577c:	08009188 	.word	0x08009188
 8005780:	08009160 	.word	0x08009160
 8005784:	3ff00000 	.word	0x3ff00000
 8005788:	40240000 	.word	0x40240000
 800578c:	401c0000 	.word	0x401c0000
 8005790:	40140000 	.word	0x40140000
 8005794:	3fe00000 	.word	0x3fe00000
 8005798:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800579c:	9d00      	ldr	r5, [sp, #0]
 800579e:	4642      	mov	r2, r8
 80057a0:	464b      	mov	r3, r9
 80057a2:	4630      	mov	r0, r6
 80057a4:	4639      	mov	r1, r7
 80057a6:	f7fb f871 	bl	800088c <__aeabi_ddiv>
 80057aa:	f7fb f9f5 	bl	8000b98 <__aeabi_d2iz>
 80057ae:	9001      	str	r0, [sp, #4]
 80057b0:	f7fa fed8 	bl	8000564 <__aeabi_i2d>
 80057b4:	4642      	mov	r2, r8
 80057b6:	464b      	mov	r3, r9
 80057b8:	f7fa ff3e 	bl	8000638 <__aeabi_dmul>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4630      	mov	r0, r6
 80057c2:	4639      	mov	r1, r7
 80057c4:	f7fa fd80 	bl	80002c8 <__aeabi_dsub>
 80057c8:	9e01      	ldr	r6, [sp, #4]
 80057ca:	9f04      	ldr	r7, [sp, #16]
 80057cc:	3630      	adds	r6, #48	; 0x30
 80057ce:	f805 6b01 	strb.w	r6, [r5], #1
 80057d2:	9e00      	ldr	r6, [sp, #0]
 80057d4:	1bae      	subs	r6, r5, r6
 80057d6:	42b7      	cmp	r7, r6
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	d134      	bne.n	8005848 <_dtoa_r+0x708>
 80057de:	f7fa fd75 	bl	80002cc <__adddf3>
 80057e2:	4642      	mov	r2, r8
 80057e4:	464b      	mov	r3, r9
 80057e6:	4606      	mov	r6, r0
 80057e8:	460f      	mov	r7, r1
 80057ea:	f7fb f9b5 	bl	8000b58 <__aeabi_dcmpgt>
 80057ee:	b9c8      	cbnz	r0, 8005824 <_dtoa_r+0x6e4>
 80057f0:	4642      	mov	r2, r8
 80057f2:	464b      	mov	r3, r9
 80057f4:	4630      	mov	r0, r6
 80057f6:	4639      	mov	r1, r7
 80057f8:	f7fb f986 	bl	8000b08 <__aeabi_dcmpeq>
 80057fc:	b110      	cbz	r0, 8005804 <_dtoa_r+0x6c4>
 80057fe:	9b01      	ldr	r3, [sp, #4]
 8005800:	07db      	lsls	r3, r3, #31
 8005802:	d40f      	bmi.n	8005824 <_dtoa_r+0x6e4>
 8005804:	4651      	mov	r1, sl
 8005806:	4620      	mov	r0, r4
 8005808:	f000 fbcc 	bl	8005fa4 <_Bfree>
 800580c:	2300      	movs	r3, #0
 800580e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005810:	702b      	strb	r3, [r5, #0]
 8005812:	f10b 0301 	add.w	r3, fp, #1
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800581a:	2b00      	cmp	r3, #0
 800581c:	f43f ace2 	beq.w	80051e4 <_dtoa_r+0xa4>
 8005820:	601d      	str	r5, [r3, #0]
 8005822:	e4df      	b.n	80051e4 <_dtoa_r+0xa4>
 8005824:	465f      	mov	r7, fp
 8005826:	462b      	mov	r3, r5
 8005828:	461d      	mov	r5, r3
 800582a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800582e:	2a39      	cmp	r2, #57	; 0x39
 8005830:	d106      	bne.n	8005840 <_dtoa_r+0x700>
 8005832:	9a00      	ldr	r2, [sp, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d1f7      	bne.n	8005828 <_dtoa_r+0x6e8>
 8005838:	9900      	ldr	r1, [sp, #0]
 800583a:	2230      	movs	r2, #48	; 0x30
 800583c:	3701      	adds	r7, #1
 800583e:	700a      	strb	r2, [r1, #0]
 8005840:	781a      	ldrb	r2, [r3, #0]
 8005842:	3201      	adds	r2, #1
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e790      	b.n	800576a <_dtoa_r+0x62a>
 8005848:	4ba3      	ldr	r3, [pc, #652]	; (8005ad8 <_dtoa_r+0x998>)
 800584a:	2200      	movs	r2, #0
 800584c:	f7fa fef4 	bl	8000638 <__aeabi_dmul>
 8005850:	2200      	movs	r2, #0
 8005852:	2300      	movs	r3, #0
 8005854:	4606      	mov	r6, r0
 8005856:	460f      	mov	r7, r1
 8005858:	f7fb f956 	bl	8000b08 <__aeabi_dcmpeq>
 800585c:	2800      	cmp	r0, #0
 800585e:	d09e      	beq.n	800579e <_dtoa_r+0x65e>
 8005860:	e7d0      	b.n	8005804 <_dtoa_r+0x6c4>
 8005862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005864:	2a00      	cmp	r2, #0
 8005866:	f000 80ca 	beq.w	80059fe <_dtoa_r+0x8be>
 800586a:	9a07      	ldr	r2, [sp, #28]
 800586c:	2a01      	cmp	r2, #1
 800586e:	f300 80ad 	bgt.w	80059cc <_dtoa_r+0x88c>
 8005872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005874:	2a00      	cmp	r2, #0
 8005876:	f000 80a5 	beq.w	80059c4 <_dtoa_r+0x884>
 800587a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800587e:	9e08      	ldr	r6, [sp, #32]
 8005880:	9d05      	ldr	r5, [sp, #20]
 8005882:	9a05      	ldr	r2, [sp, #20]
 8005884:	441a      	add	r2, r3
 8005886:	9205      	str	r2, [sp, #20]
 8005888:	9a06      	ldr	r2, [sp, #24]
 800588a:	2101      	movs	r1, #1
 800588c:	441a      	add	r2, r3
 800588e:	4620      	mov	r0, r4
 8005890:	9206      	str	r2, [sp, #24]
 8005892:	f000 fc87 	bl	80061a4 <__i2b>
 8005896:	4607      	mov	r7, r0
 8005898:	b165      	cbz	r5, 80058b4 <_dtoa_r+0x774>
 800589a:	9b06      	ldr	r3, [sp, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	dd09      	ble.n	80058b4 <_dtoa_r+0x774>
 80058a0:	42ab      	cmp	r3, r5
 80058a2:	9a05      	ldr	r2, [sp, #20]
 80058a4:	bfa8      	it	ge
 80058a6:	462b      	movge	r3, r5
 80058a8:	1ad2      	subs	r2, r2, r3
 80058aa:	9205      	str	r2, [sp, #20]
 80058ac:	9a06      	ldr	r2, [sp, #24]
 80058ae:	1aed      	subs	r5, r5, r3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	9306      	str	r3, [sp, #24]
 80058b4:	9b08      	ldr	r3, [sp, #32]
 80058b6:	b1f3      	cbz	r3, 80058f6 <_dtoa_r+0x7b6>
 80058b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80a3 	beq.w	8005a06 <_dtoa_r+0x8c6>
 80058c0:	2e00      	cmp	r6, #0
 80058c2:	dd10      	ble.n	80058e6 <_dtoa_r+0x7a6>
 80058c4:	4639      	mov	r1, r7
 80058c6:	4632      	mov	r2, r6
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fd2b 	bl	8006324 <__pow5mult>
 80058ce:	4652      	mov	r2, sl
 80058d0:	4601      	mov	r1, r0
 80058d2:	4607      	mov	r7, r0
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 fc7b 	bl	80061d0 <__multiply>
 80058da:	4651      	mov	r1, sl
 80058dc:	4680      	mov	r8, r0
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 fb60 	bl	8005fa4 <_Bfree>
 80058e4:	46c2      	mov	sl, r8
 80058e6:	9b08      	ldr	r3, [sp, #32]
 80058e8:	1b9a      	subs	r2, r3, r6
 80058ea:	d004      	beq.n	80058f6 <_dtoa_r+0x7b6>
 80058ec:	4651      	mov	r1, sl
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fd18 	bl	8006324 <__pow5mult>
 80058f4:	4682      	mov	sl, r0
 80058f6:	2101      	movs	r1, #1
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 fc53 	bl	80061a4 <__i2b>
 80058fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005900:	2b00      	cmp	r3, #0
 8005902:	4606      	mov	r6, r0
 8005904:	f340 8081 	ble.w	8005a0a <_dtoa_r+0x8ca>
 8005908:	461a      	mov	r2, r3
 800590a:	4601      	mov	r1, r0
 800590c:	4620      	mov	r0, r4
 800590e:	f000 fd09 	bl	8006324 <__pow5mult>
 8005912:	9b07      	ldr	r3, [sp, #28]
 8005914:	2b01      	cmp	r3, #1
 8005916:	4606      	mov	r6, r0
 8005918:	dd7a      	ble.n	8005a10 <_dtoa_r+0x8d0>
 800591a:	f04f 0800 	mov.w	r8, #0
 800591e:	6933      	ldr	r3, [r6, #16]
 8005920:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005924:	6918      	ldr	r0, [r3, #16]
 8005926:	f000 fbef 	bl	8006108 <__hi0bits>
 800592a:	f1c0 0020 	rsb	r0, r0, #32
 800592e:	9b06      	ldr	r3, [sp, #24]
 8005930:	4418      	add	r0, r3
 8005932:	f010 001f 	ands.w	r0, r0, #31
 8005936:	f000 8094 	beq.w	8005a62 <_dtoa_r+0x922>
 800593a:	f1c0 0320 	rsb	r3, r0, #32
 800593e:	2b04      	cmp	r3, #4
 8005940:	f340 8085 	ble.w	8005a4e <_dtoa_r+0x90e>
 8005944:	9b05      	ldr	r3, [sp, #20]
 8005946:	f1c0 001c 	rsb	r0, r0, #28
 800594a:	4403      	add	r3, r0
 800594c:	9305      	str	r3, [sp, #20]
 800594e:	9b06      	ldr	r3, [sp, #24]
 8005950:	4403      	add	r3, r0
 8005952:	4405      	add	r5, r0
 8005954:	9306      	str	r3, [sp, #24]
 8005956:	9b05      	ldr	r3, [sp, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	dd05      	ble.n	8005968 <_dtoa_r+0x828>
 800595c:	4651      	mov	r1, sl
 800595e:	461a      	mov	r2, r3
 8005960:	4620      	mov	r0, r4
 8005962:	f000 fd39 	bl	80063d8 <__lshift>
 8005966:	4682      	mov	sl, r0
 8005968:	9b06      	ldr	r3, [sp, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	dd05      	ble.n	800597a <_dtoa_r+0x83a>
 800596e:	4631      	mov	r1, r6
 8005970:	461a      	mov	r2, r3
 8005972:	4620      	mov	r0, r4
 8005974:	f000 fd30 	bl	80063d8 <__lshift>
 8005978:	4606      	mov	r6, r0
 800597a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800597c:	2b00      	cmp	r3, #0
 800597e:	d072      	beq.n	8005a66 <_dtoa_r+0x926>
 8005980:	4631      	mov	r1, r6
 8005982:	4650      	mov	r0, sl
 8005984:	f000 fd94 	bl	80064b0 <__mcmp>
 8005988:	2800      	cmp	r0, #0
 800598a:	da6c      	bge.n	8005a66 <_dtoa_r+0x926>
 800598c:	2300      	movs	r3, #0
 800598e:	4651      	mov	r1, sl
 8005990:	220a      	movs	r2, #10
 8005992:	4620      	mov	r0, r4
 8005994:	f000 fb28 	bl	8005fe8 <__multadd>
 8005998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800599a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800599e:	4682      	mov	sl, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 81b0 	beq.w	8005d06 <_dtoa_r+0xbc6>
 80059a6:	2300      	movs	r3, #0
 80059a8:	4639      	mov	r1, r7
 80059aa:	220a      	movs	r2, #10
 80059ac:	4620      	mov	r0, r4
 80059ae:	f000 fb1b 	bl	8005fe8 <__multadd>
 80059b2:	9b01      	ldr	r3, [sp, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	4607      	mov	r7, r0
 80059b8:	f300 8096 	bgt.w	8005ae8 <_dtoa_r+0x9a8>
 80059bc:	9b07      	ldr	r3, [sp, #28]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	dc59      	bgt.n	8005a76 <_dtoa_r+0x936>
 80059c2:	e091      	b.n	8005ae8 <_dtoa_r+0x9a8>
 80059c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059ca:	e758      	b.n	800587e <_dtoa_r+0x73e>
 80059cc:	9b04      	ldr	r3, [sp, #16]
 80059ce:	1e5e      	subs	r6, r3, #1
 80059d0:	9b08      	ldr	r3, [sp, #32]
 80059d2:	42b3      	cmp	r3, r6
 80059d4:	bfbf      	itttt	lt
 80059d6:	9b08      	ldrlt	r3, [sp, #32]
 80059d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80059da:	9608      	strlt	r6, [sp, #32]
 80059dc:	1af3      	sublt	r3, r6, r3
 80059de:	bfb4      	ite	lt
 80059e0:	18d2      	addlt	r2, r2, r3
 80059e2:	1b9e      	subge	r6, r3, r6
 80059e4:	9b04      	ldr	r3, [sp, #16]
 80059e6:	bfbc      	itt	lt
 80059e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80059ea:	2600      	movlt	r6, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bfb7      	itett	lt
 80059f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80059f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80059f8:	1a9d      	sublt	r5, r3, r2
 80059fa:	2300      	movlt	r3, #0
 80059fc:	e741      	b.n	8005882 <_dtoa_r+0x742>
 80059fe:	9e08      	ldr	r6, [sp, #32]
 8005a00:	9d05      	ldr	r5, [sp, #20]
 8005a02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a04:	e748      	b.n	8005898 <_dtoa_r+0x758>
 8005a06:	9a08      	ldr	r2, [sp, #32]
 8005a08:	e770      	b.n	80058ec <_dtoa_r+0x7ac>
 8005a0a:	9b07      	ldr	r3, [sp, #28]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	dc19      	bgt.n	8005a44 <_dtoa_r+0x904>
 8005a10:	9b02      	ldr	r3, [sp, #8]
 8005a12:	b9bb      	cbnz	r3, 8005a44 <_dtoa_r+0x904>
 8005a14:	9b03      	ldr	r3, [sp, #12]
 8005a16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a1a:	b99b      	cbnz	r3, 8005a44 <_dtoa_r+0x904>
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a22:	0d1b      	lsrs	r3, r3, #20
 8005a24:	051b      	lsls	r3, r3, #20
 8005a26:	b183      	cbz	r3, 8005a4a <_dtoa_r+0x90a>
 8005a28:	9b05      	ldr	r3, [sp, #20]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	9305      	str	r3, [sp, #20]
 8005a2e:	9b06      	ldr	r3, [sp, #24]
 8005a30:	3301      	adds	r3, #1
 8005a32:	9306      	str	r3, [sp, #24]
 8005a34:	f04f 0801 	mov.w	r8, #1
 8005a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f47f af6f 	bne.w	800591e <_dtoa_r+0x7de>
 8005a40:	2001      	movs	r0, #1
 8005a42:	e774      	b.n	800592e <_dtoa_r+0x7ee>
 8005a44:	f04f 0800 	mov.w	r8, #0
 8005a48:	e7f6      	b.n	8005a38 <_dtoa_r+0x8f8>
 8005a4a:	4698      	mov	r8, r3
 8005a4c:	e7f4      	b.n	8005a38 <_dtoa_r+0x8f8>
 8005a4e:	d082      	beq.n	8005956 <_dtoa_r+0x816>
 8005a50:	9a05      	ldr	r2, [sp, #20]
 8005a52:	331c      	adds	r3, #28
 8005a54:	441a      	add	r2, r3
 8005a56:	9205      	str	r2, [sp, #20]
 8005a58:	9a06      	ldr	r2, [sp, #24]
 8005a5a:	441a      	add	r2, r3
 8005a5c:	441d      	add	r5, r3
 8005a5e:	9206      	str	r2, [sp, #24]
 8005a60:	e779      	b.n	8005956 <_dtoa_r+0x816>
 8005a62:	4603      	mov	r3, r0
 8005a64:	e7f4      	b.n	8005a50 <_dtoa_r+0x910>
 8005a66:	9b04      	ldr	r3, [sp, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	dc37      	bgt.n	8005adc <_dtoa_r+0x99c>
 8005a6c:	9b07      	ldr	r3, [sp, #28]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	dd34      	ble.n	8005adc <_dtoa_r+0x99c>
 8005a72:	9b04      	ldr	r3, [sp, #16]
 8005a74:	9301      	str	r3, [sp, #4]
 8005a76:	9b01      	ldr	r3, [sp, #4]
 8005a78:	b963      	cbnz	r3, 8005a94 <_dtoa_r+0x954>
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	2205      	movs	r2, #5
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f000 fab2 	bl	8005fe8 <__multadd>
 8005a84:	4601      	mov	r1, r0
 8005a86:	4606      	mov	r6, r0
 8005a88:	4650      	mov	r0, sl
 8005a8a:	f000 fd11 	bl	80064b0 <__mcmp>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	f73f adbb 	bgt.w	800560a <_dtoa_r+0x4ca>
 8005a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a96:	9d00      	ldr	r5, [sp, #0]
 8005a98:	ea6f 0b03 	mvn.w	fp, r3
 8005a9c:	f04f 0800 	mov.w	r8, #0
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 fa7e 	bl	8005fa4 <_Bfree>
 8005aa8:	2f00      	cmp	r7, #0
 8005aaa:	f43f aeab 	beq.w	8005804 <_dtoa_r+0x6c4>
 8005aae:	f1b8 0f00 	cmp.w	r8, #0
 8005ab2:	d005      	beq.n	8005ac0 <_dtoa_r+0x980>
 8005ab4:	45b8      	cmp	r8, r7
 8005ab6:	d003      	beq.n	8005ac0 <_dtoa_r+0x980>
 8005ab8:	4641      	mov	r1, r8
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 fa72 	bl	8005fa4 <_Bfree>
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fa6e 	bl	8005fa4 <_Bfree>
 8005ac8:	e69c      	b.n	8005804 <_dtoa_r+0x6c4>
 8005aca:	2600      	movs	r6, #0
 8005acc:	4637      	mov	r7, r6
 8005ace:	e7e1      	b.n	8005a94 <_dtoa_r+0x954>
 8005ad0:	46bb      	mov	fp, r7
 8005ad2:	4637      	mov	r7, r6
 8005ad4:	e599      	b.n	800560a <_dtoa_r+0x4ca>
 8005ad6:	bf00      	nop
 8005ad8:	40240000 	.word	0x40240000
 8005adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80c8 	beq.w	8005c74 <_dtoa_r+0xb34>
 8005ae4:	9b04      	ldr	r3, [sp, #16]
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	2d00      	cmp	r5, #0
 8005aea:	dd05      	ble.n	8005af8 <_dtoa_r+0x9b8>
 8005aec:	4639      	mov	r1, r7
 8005aee:	462a      	mov	r2, r5
 8005af0:	4620      	mov	r0, r4
 8005af2:	f000 fc71 	bl	80063d8 <__lshift>
 8005af6:	4607      	mov	r7, r0
 8005af8:	f1b8 0f00 	cmp.w	r8, #0
 8005afc:	d05b      	beq.n	8005bb6 <_dtoa_r+0xa76>
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 fa0f 	bl	8005f24 <_Balloc>
 8005b06:	4605      	mov	r5, r0
 8005b08:	b928      	cbnz	r0, 8005b16 <_dtoa_r+0x9d6>
 8005b0a:	4b83      	ldr	r3, [pc, #524]	; (8005d18 <_dtoa_r+0xbd8>)
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005b12:	f7ff bb2e 	b.w	8005172 <_dtoa_r+0x32>
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	3202      	adds	r2, #2
 8005b1a:	0092      	lsls	r2, r2, #2
 8005b1c:	f107 010c 	add.w	r1, r7, #12
 8005b20:	300c      	adds	r0, #12
 8005b22:	f002 fb19 	bl	8008158 <memcpy>
 8005b26:	2201      	movs	r2, #1
 8005b28:	4629      	mov	r1, r5
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 fc54 	bl	80063d8 <__lshift>
 8005b30:	9b00      	ldr	r3, [sp, #0]
 8005b32:	3301      	adds	r3, #1
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	9308      	str	r3, [sp, #32]
 8005b3e:	9b02      	ldr	r3, [sp, #8]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	46b8      	mov	r8, r7
 8005b46:	9306      	str	r3, [sp, #24]
 8005b48:	4607      	mov	r7, r0
 8005b4a:	9b04      	ldr	r3, [sp, #16]
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	4650      	mov	r0, sl
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	f7ff fa6a 	bl	800502c <quorem>
 8005b58:	4641      	mov	r1, r8
 8005b5a:	9002      	str	r0, [sp, #8]
 8005b5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b60:	4650      	mov	r0, sl
 8005b62:	f000 fca5 	bl	80064b0 <__mcmp>
 8005b66:	463a      	mov	r2, r7
 8005b68:	9005      	str	r0, [sp, #20]
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f000 fcbb 	bl	80064e8 <__mdiff>
 8005b72:	68c2      	ldr	r2, [r0, #12]
 8005b74:	4605      	mov	r5, r0
 8005b76:	bb02      	cbnz	r2, 8005bba <_dtoa_r+0xa7a>
 8005b78:	4601      	mov	r1, r0
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	f000 fc98 	bl	80064b0 <__mcmp>
 8005b80:	4602      	mov	r2, r0
 8005b82:	4629      	mov	r1, r5
 8005b84:	4620      	mov	r0, r4
 8005b86:	9209      	str	r2, [sp, #36]	; 0x24
 8005b88:	f000 fa0c 	bl	8005fa4 <_Bfree>
 8005b8c:	9b07      	ldr	r3, [sp, #28]
 8005b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b90:	9d04      	ldr	r5, [sp, #16]
 8005b92:	ea43 0102 	orr.w	r1, r3, r2
 8005b96:	9b06      	ldr	r3, [sp, #24]
 8005b98:	4319      	orrs	r1, r3
 8005b9a:	d110      	bne.n	8005bbe <_dtoa_r+0xa7e>
 8005b9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ba0:	d029      	beq.n	8005bf6 <_dtoa_r+0xab6>
 8005ba2:	9b05      	ldr	r3, [sp, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	dd02      	ble.n	8005bae <_dtoa_r+0xa6e>
 8005ba8:	9b02      	ldr	r3, [sp, #8]
 8005baa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005bae:	9b01      	ldr	r3, [sp, #4]
 8005bb0:	f883 9000 	strb.w	r9, [r3]
 8005bb4:	e774      	b.n	8005aa0 <_dtoa_r+0x960>
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	e7ba      	b.n	8005b30 <_dtoa_r+0x9f0>
 8005bba:	2201      	movs	r2, #1
 8005bbc:	e7e1      	b.n	8005b82 <_dtoa_r+0xa42>
 8005bbe:	9b05      	ldr	r3, [sp, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	db04      	blt.n	8005bce <_dtoa_r+0xa8e>
 8005bc4:	9907      	ldr	r1, [sp, #28]
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	9906      	ldr	r1, [sp, #24]
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	d120      	bne.n	8005c10 <_dtoa_r+0xad0>
 8005bce:	2a00      	cmp	r2, #0
 8005bd0:	dded      	ble.n	8005bae <_dtoa_r+0xa6e>
 8005bd2:	4651      	mov	r1, sl
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f000 fbfe 	bl	80063d8 <__lshift>
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4682      	mov	sl, r0
 8005be0:	f000 fc66 	bl	80064b0 <__mcmp>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	dc03      	bgt.n	8005bf0 <_dtoa_r+0xab0>
 8005be8:	d1e1      	bne.n	8005bae <_dtoa_r+0xa6e>
 8005bea:	f019 0f01 	tst.w	r9, #1
 8005bee:	d0de      	beq.n	8005bae <_dtoa_r+0xa6e>
 8005bf0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bf4:	d1d8      	bne.n	8005ba8 <_dtoa_r+0xa68>
 8005bf6:	9a01      	ldr	r2, [sp, #4]
 8005bf8:	2339      	movs	r3, #57	; 0x39
 8005bfa:	7013      	strb	r3, [r2, #0]
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	461d      	mov	r5, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c06:	2a39      	cmp	r2, #57	; 0x39
 8005c08:	d06c      	beq.n	8005ce4 <_dtoa_r+0xba4>
 8005c0a:	3201      	adds	r2, #1
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	e747      	b.n	8005aa0 <_dtoa_r+0x960>
 8005c10:	2a00      	cmp	r2, #0
 8005c12:	dd07      	ble.n	8005c24 <_dtoa_r+0xae4>
 8005c14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c18:	d0ed      	beq.n	8005bf6 <_dtoa_r+0xab6>
 8005c1a:	9a01      	ldr	r2, [sp, #4]
 8005c1c:	f109 0301 	add.w	r3, r9, #1
 8005c20:	7013      	strb	r3, [r2, #0]
 8005c22:	e73d      	b.n	8005aa0 <_dtoa_r+0x960>
 8005c24:	9b04      	ldr	r3, [sp, #16]
 8005c26:	9a08      	ldr	r2, [sp, #32]
 8005c28:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d043      	beq.n	8005cb8 <_dtoa_r+0xb78>
 8005c30:	4651      	mov	r1, sl
 8005c32:	2300      	movs	r3, #0
 8005c34:	220a      	movs	r2, #10
 8005c36:	4620      	mov	r0, r4
 8005c38:	f000 f9d6 	bl	8005fe8 <__multadd>
 8005c3c:	45b8      	cmp	r8, r7
 8005c3e:	4682      	mov	sl, r0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	f04f 020a 	mov.w	r2, #10
 8005c48:	4641      	mov	r1, r8
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	d107      	bne.n	8005c5e <_dtoa_r+0xb1e>
 8005c4e:	f000 f9cb 	bl	8005fe8 <__multadd>
 8005c52:	4680      	mov	r8, r0
 8005c54:	4607      	mov	r7, r0
 8005c56:	9b04      	ldr	r3, [sp, #16]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	e775      	b.n	8005b4a <_dtoa_r+0xa0a>
 8005c5e:	f000 f9c3 	bl	8005fe8 <__multadd>
 8005c62:	4639      	mov	r1, r7
 8005c64:	4680      	mov	r8, r0
 8005c66:	2300      	movs	r3, #0
 8005c68:	220a      	movs	r2, #10
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 f9bc 	bl	8005fe8 <__multadd>
 8005c70:	4607      	mov	r7, r0
 8005c72:	e7f0      	b.n	8005c56 <_dtoa_r+0xb16>
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	9d00      	ldr	r5, [sp, #0]
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	f7ff f9d5 	bl	800502c <quorem>
 8005c82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c86:	9b00      	ldr	r3, [sp, #0]
 8005c88:	f805 9b01 	strb.w	r9, [r5], #1
 8005c8c:	1aea      	subs	r2, r5, r3
 8005c8e:	9b01      	ldr	r3, [sp, #4]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	dd07      	ble.n	8005ca4 <_dtoa_r+0xb64>
 8005c94:	4651      	mov	r1, sl
 8005c96:	2300      	movs	r3, #0
 8005c98:	220a      	movs	r2, #10
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f000 f9a4 	bl	8005fe8 <__multadd>
 8005ca0:	4682      	mov	sl, r0
 8005ca2:	e7ea      	b.n	8005c7a <_dtoa_r+0xb3a>
 8005ca4:	9b01      	ldr	r3, [sp, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bfc8      	it	gt
 8005caa:	461d      	movgt	r5, r3
 8005cac:	9b00      	ldr	r3, [sp, #0]
 8005cae:	bfd8      	it	le
 8005cb0:	2501      	movle	r5, #1
 8005cb2:	441d      	add	r5, r3
 8005cb4:	f04f 0800 	mov.w	r8, #0
 8005cb8:	4651      	mov	r1, sl
 8005cba:	2201      	movs	r2, #1
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 fb8b 	bl	80063d8 <__lshift>
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	f000 fbf3 	bl	80064b0 <__mcmp>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	dc96      	bgt.n	8005bfc <_dtoa_r+0xabc>
 8005cce:	d102      	bne.n	8005cd6 <_dtoa_r+0xb96>
 8005cd0:	f019 0f01 	tst.w	r9, #1
 8005cd4:	d192      	bne.n	8005bfc <_dtoa_r+0xabc>
 8005cd6:	462b      	mov	r3, r5
 8005cd8:	461d      	mov	r5, r3
 8005cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cde:	2a30      	cmp	r2, #48	; 0x30
 8005ce0:	d0fa      	beq.n	8005cd8 <_dtoa_r+0xb98>
 8005ce2:	e6dd      	b.n	8005aa0 <_dtoa_r+0x960>
 8005ce4:	9a00      	ldr	r2, [sp, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d189      	bne.n	8005bfe <_dtoa_r+0xabe>
 8005cea:	f10b 0b01 	add.w	fp, fp, #1
 8005cee:	2331      	movs	r3, #49	; 0x31
 8005cf0:	e796      	b.n	8005c20 <_dtoa_r+0xae0>
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <_dtoa_r+0xbdc>)
 8005cf4:	f7ff ba99 	b.w	800522a <_dtoa_r+0xea>
 8005cf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f47f aa6d 	bne.w	80051da <_dtoa_r+0x9a>
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <_dtoa_r+0xbe0>)
 8005d02:	f7ff ba92 	b.w	800522a <_dtoa_r+0xea>
 8005d06:	9b01      	ldr	r3, [sp, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	dcb5      	bgt.n	8005c78 <_dtoa_r+0xb38>
 8005d0c:	9b07      	ldr	r3, [sp, #28]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	f73f aeb1 	bgt.w	8005a76 <_dtoa_r+0x936>
 8005d14:	e7b0      	b.n	8005c78 <_dtoa_r+0xb38>
 8005d16:	bf00      	nop
 8005d18:	080090f3 	.word	0x080090f3
 8005d1c:	080093d8 	.word	0x080093d8
 8005d20:	08009077 	.word	0x08009077

08005d24 <_free_r>:
 8005d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d26:	2900      	cmp	r1, #0
 8005d28:	d044      	beq.n	8005db4 <_free_r+0x90>
 8005d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d2e:	9001      	str	r0, [sp, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f1a1 0404 	sub.w	r4, r1, #4
 8005d36:	bfb8      	it	lt
 8005d38:	18e4      	addlt	r4, r4, r3
 8005d3a:	f000 f8e7 	bl	8005f0c <__malloc_lock>
 8005d3e:	4a1e      	ldr	r2, [pc, #120]	; (8005db8 <_free_r+0x94>)
 8005d40:	9801      	ldr	r0, [sp, #4]
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	b933      	cbnz	r3, 8005d54 <_free_r+0x30>
 8005d46:	6063      	str	r3, [r4, #4]
 8005d48:	6014      	str	r4, [r2, #0]
 8005d4a:	b003      	add	sp, #12
 8005d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d50:	f000 b8e2 	b.w	8005f18 <__malloc_unlock>
 8005d54:	42a3      	cmp	r3, r4
 8005d56:	d908      	bls.n	8005d6a <_free_r+0x46>
 8005d58:	6825      	ldr	r5, [r4, #0]
 8005d5a:	1961      	adds	r1, r4, r5
 8005d5c:	428b      	cmp	r3, r1
 8005d5e:	bf01      	itttt	eq
 8005d60:	6819      	ldreq	r1, [r3, #0]
 8005d62:	685b      	ldreq	r3, [r3, #4]
 8005d64:	1949      	addeq	r1, r1, r5
 8005d66:	6021      	streq	r1, [r4, #0]
 8005d68:	e7ed      	b.n	8005d46 <_free_r+0x22>
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	b10b      	cbz	r3, 8005d74 <_free_r+0x50>
 8005d70:	42a3      	cmp	r3, r4
 8005d72:	d9fa      	bls.n	8005d6a <_free_r+0x46>
 8005d74:	6811      	ldr	r1, [r2, #0]
 8005d76:	1855      	adds	r5, r2, r1
 8005d78:	42a5      	cmp	r5, r4
 8005d7a:	d10b      	bne.n	8005d94 <_free_r+0x70>
 8005d7c:	6824      	ldr	r4, [r4, #0]
 8005d7e:	4421      	add	r1, r4
 8005d80:	1854      	adds	r4, r2, r1
 8005d82:	42a3      	cmp	r3, r4
 8005d84:	6011      	str	r1, [r2, #0]
 8005d86:	d1e0      	bne.n	8005d4a <_free_r+0x26>
 8005d88:	681c      	ldr	r4, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	6053      	str	r3, [r2, #4]
 8005d8e:	440c      	add	r4, r1
 8005d90:	6014      	str	r4, [r2, #0]
 8005d92:	e7da      	b.n	8005d4a <_free_r+0x26>
 8005d94:	d902      	bls.n	8005d9c <_free_r+0x78>
 8005d96:	230c      	movs	r3, #12
 8005d98:	6003      	str	r3, [r0, #0]
 8005d9a:	e7d6      	b.n	8005d4a <_free_r+0x26>
 8005d9c:	6825      	ldr	r5, [r4, #0]
 8005d9e:	1961      	adds	r1, r4, r5
 8005da0:	428b      	cmp	r3, r1
 8005da2:	bf04      	itt	eq
 8005da4:	6819      	ldreq	r1, [r3, #0]
 8005da6:	685b      	ldreq	r3, [r3, #4]
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	bf04      	itt	eq
 8005dac:	1949      	addeq	r1, r1, r5
 8005dae:	6021      	streq	r1, [r4, #0]
 8005db0:	6054      	str	r4, [r2, #4]
 8005db2:	e7ca      	b.n	8005d4a <_free_r+0x26>
 8005db4:	b003      	add	sp, #12
 8005db6:	bd30      	pop	{r4, r5, pc}
 8005db8:	20000a8c 	.word	0x20000a8c

08005dbc <malloc>:
 8005dbc:	4b02      	ldr	r3, [pc, #8]	; (8005dc8 <malloc+0xc>)
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	f000 b823 	b.w	8005e0c <_malloc_r>
 8005dc6:	bf00      	nop
 8005dc8:	20000064 	.word	0x20000064

08005dcc <sbrk_aligned>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	4e0e      	ldr	r6, [pc, #56]	; (8005e08 <sbrk_aligned+0x3c>)
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	6831      	ldr	r1, [r6, #0]
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	b911      	cbnz	r1, 8005dde <sbrk_aligned+0x12>
 8005dd8:	f002 f9ae 	bl	8008138 <_sbrk_r>
 8005ddc:	6030      	str	r0, [r6, #0]
 8005dde:	4621      	mov	r1, r4
 8005de0:	4628      	mov	r0, r5
 8005de2:	f002 f9a9 	bl	8008138 <_sbrk_r>
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	d00a      	beq.n	8005e00 <sbrk_aligned+0x34>
 8005dea:	1cc4      	adds	r4, r0, #3
 8005dec:	f024 0403 	bic.w	r4, r4, #3
 8005df0:	42a0      	cmp	r0, r4
 8005df2:	d007      	beq.n	8005e04 <sbrk_aligned+0x38>
 8005df4:	1a21      	subs	r1, r4, r0
 8005df6:	4628      	mov	r0, r5
 8005df8:	f002 f99e 	bl	8008138 <_sbrk_r>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d101      	bne.n	8005e04 <sbrk_aligned+0x38>
 8005e00:	f04f 34ff 	mov.w	r4, #4294967295
 8005e04:	4620      	mov	r0, r4
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
 8005e08:	20000a90 	.word	0x20000a90

08005e0c <_malloc_r>:
 8005e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e10:	1ccd      	adds	r5, r1, #3
 8005e12:	f025 0503 	bic.w	r5, r5, #3
 8005e16:	3508      	adds	r5, #8
 8005e18:	2d0c      	cmp	r5, #12
 8005e1a:	bf38      	it	cc
 8005e1c:	250c      	movcc	r5, #12
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	4607      	mov	r7, r0
 8005e22:	db01      	blt.n	8005e28 <_malloc_r+0x1c>
 8005e24:	42a9      	cmp	r1, r5
 8005e26:	d905      	bls.n	8005e34 <_malloc_r+0x28>
 8005e28:	230c      	movs	r3, #12
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	2600      	movs	r6, #0
 8005e2e:	4630      	mov	r0, r6
 8005e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f08 <_malloc_r+0xfc>
 8005e38:	f000 f868 	bl	8005f0c <__malloc_lock>
 8005e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e40:	461c      	mov	r4, r3
 8005e42:	bb5c      	cbnz	r4, 8005e9c <_malloc_r+0x90>
 8005e44:	4629      	mov	r1, r5
 8005e46:	4638      	mov	r0, r7
 8005e48:	f7ff ffc0 	bl	8005dcc <sbrk_aligned>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	4604      	mov	r4, r0
 8005e50:	d155      	bne.n	8005efe <_malloc_r+0xf2>
 8005e52:	f8d8 4000 	ldr.w	r4, [r8]
 8005e56:	4626      	mov	r6, r4
 8005e58:	2e00      	cmp	r6, #0
 8005e5a:	d145      	bne.n	8005ee8 <_malloc_r+0xdc>
 8005e5c:	2c00      	cmp	r4, #0
 8005e5e:	d048      	beq.n	8005ef2 <_malloc_r+0xe6>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	4631      	mov	r1, r6
 8005e64:	4638      	mov	r0, r7
 8005e66:	eb04 0903 	add.w	r9, r4, r3
 8005e6a:	f002 f965 	bl	8008138 <_sbrk_r>
 8005e6e:	4581      	cmp	r9, r0
 8005e70:	d13f      	bne.n	8005ef2 <_malloc_r+0xe6>
 8005e72:	6821      	ldr	r1, [r4, #0]
 8005e74:	1a6d      	subs	r5, r5, r1
 8005e76:	4629      	mov	r1, r5
 8005e78:	4638      	mov	r0, r7
 8005e7a:	f7ff ffa7 	bl	8005dcc <sbrk_aligned>
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d037      	beq.n	8005ef2 <_malloc_r+0xe6>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	442b      	add	r3, r5
 8005e86:	6023      	str	r3, [r4, #0]
 8005e88:	f8d8 3000 	ldr.w	r3, [r8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d038      	beq.n	8005f02 <_malloc_r+0xf6>
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	42a2      	cmp	r2, r4
 8005e94:	d12b      	bne.n	8005eee <_malloc_r+0xe2>
 8005e96:	2200      	movs	r2, #0
 8005e98:	605a      	str	r2, [r3, #4]
 8005e9a:	e00f      	b.n	8005ebc <_malloc_r+0xb0>
 8005e9c:	6822      	ldr	r2, [r4, #0]
 8005e9e:	1b52      	subs	r2, r2, r5
 8005ea0:	d41f      	bmi.n	8005ee2 <_malloc_r+0xd6>
 8005ea2:	2a0b      	cmp	r2, #11
 8005ea4:	d917      	bls.n	8005ed6 <_malloc_r+0xca>
 8005ea6:	1961      	adds	r1, r4, r5
 8005ea8:	42a3      	cmp	r3, r4
 8005eaa:	6025      	str	r5, [r4, #0]
 8005eac:	bf18      	it	ne
 8005eae:	6059      	strne	r1, [r3, #4]
 8005eb0:	6863      	ldr	r3, [r4, #4]
 8005eb2:	bf08      	it	eq
 8005eb4:	f8c8 1000 	streq.w	r1, [r8]
 8005eb8:	5162      	str	r2, [r4, r5]
 8005eba:	604b      	str	r3, [r1, #4]
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	f104 060b 	add.w	r6, r4, #11
 8005ec2:	f000 f829 	bl	8005f18 <__malloc_unlock>
 8005ec6:	f026 0607 	bic.w	r6, r6, #7
 8005eca:	1d23      	adds	r3, r4, #4
 8005ecc:	1af2      	subs	r2, r6, r3
 8005ece:	d0ae      	beq.n	8005e2e <_malloc_r+0x22>
 8005ed0:	1b9b      	subs	r3, r3, r6
 8005ed2:	50a3      	str	r3, [r4, r2]
 8005ed4:	e7ab      	b.n	8005e2e <_malloc_r+0x22>
 8005ed6:	42a3      	cmp	r3, r4
 8005ed8:	6862      	ldr	r2, [r4, #4]
 8005eda:	d1dd      	bne.n	8005e98 <_malloc_r+0x8c>
 8005edc:	f8c8 2000 	str.w	r2, [r8]
 8005ee0:	e7ec      	b.n	8005ebc <_malloc_r+0xb0>
 8005ee2:	4623      	mov	r3, r4
 8005ee4:	6864      	ldr	r4, [r4, #4]
 8005ee6:	e7ac      	b.n	8005e42 <_malloc_r+0x36>
 8005ee8:	4634      	mov	r4, r6
 8005eea:	6876      	ldr	r6, [r6, #4]
 8005eec:	e7b4      	b.n	8005e58 <_malloc_r+0x4c>
 8005eee:	4613      	mov	r3, r2
 8005ef0:	e7cc      	b.n	8005e8c <_malloc_r+0x80>
 8005ef2:	230c      	movs	r3, #12
 8005ef4:	603b      	str	r3, [r7, #0]
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	f000 f80e 	bl	8005f18 <__malloc_unlock>
 8005efc:	e797      	b.n	8005e2e <_malloc_r+0x22>
 8005efe:	6025      	str	r5, [r4, #0]
 8005f00:	e7dc      	b.n	8005ebc <_malloc_r+0xb0>
 8005f02:	605b      	str	r3, [r3, #4]
 8005f04:	deff      	udf	#255	; 0xff
 8005f06:	bf00      	nop
 8005f08:	20000a8c 	.word	0x20000a8c

08005f0c <__malloc_lock>:
 8005f0c:	4801      	ldr	r0, [pc, #4]	; (8005f14 <__malloc_lock+0x8>)
 8005f0e:	f7ff b87c 	b.w	800500a <__retarget_lock_acquire_recursive>
 8005f12:	bf00      	nop
 8005f14:	20000a88 	.word	0x20000a88

08005f18 <__malloc_unlock>:
 8005f18:	4801      	ldr	r0, [pc, #4]	; (8005f20 <__malloc_unlock+0x8>)
 8005f1a:	f7ff b877 	b.w	800500c <__retarget_lock_release_recursive>
 8005f1e:	bf00      	nop
 8005f20:	20000a88 	.word	0x20000a88

08005f24 <_Balloc>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	69c6      	ldr	r6, [r0, #28]
 8005f28:	4604      	mov	r4, r0
 8005f2a:	460d      	mov	r5, r1
 8005f2c:	b976      	cbnz	r6, 8005f4c <_Balloc+0x28>
 8005f2e:	2010      	movs	r0, #16
 8005f30:	f7ff ff44 	bl	8005dbc <malloc>
 8005f34:	4602      	mov	r2, r0
 8005f36:	61e0      	str	r0, [r4, #28]
 8005f38:	b920      	cbnz	r0, 8005f44 <_Balloc+0x20>
 8005f3a:	4b18      	ldr	r3, [pc, #96]	; (8005f9c <_Balloc+0x78>)
 8005f3c:	4818      	ldr	r0, [pc, #96]	; (8005fa0 <_Balloc+0x7c>)
 8005f3e:	216b      	movs	r1, #107	; 0x6b
 8005f40:	f002 f922 	bl	8008188 <__assert_func>
 8005f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f48:	6006      	str	r6, [r0, #0]
 8005f4a:	60c6      	str	r6, [r0, #12]
 8005f4c:	69e6      	ldr	r6, [r4, #28]
 8005f4e:	68f3      	ldr	r3, [r6, #12]
 8005f50:	b183      	cbz	r3, 8005f74 <_Balloc+0x50>
 8005f52:	69e3      	ldr	r3, [r4, #28]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f5a:	b9b8      	cbnz	r0, 8005f8c <_Balloc+0x68>
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f62:	1d72      	adds	r2, r6, #5
 8005f64:	0092      	lsls	r2, r2, #2
 8005f66:	4620      	mov	r0, r4
 8005f68:	f002 f92c 	bl	80081c4 <_calloc_r>
 8005f6c:	b160      	cbz	r0, 8005f88 <_Balloc+0x64>
 8005f6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f72:	e00e      	b.n	8005f92 <_Balloc+0x6e>
 8005f74:	2221      	movs	r2, #33	; 0x21
 8005f76:	2104      	movs	r1, #4
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f002 f923 	bl	80081c4 <_calloc_r>
 8005f7e:	69e3      	ldr	r3, [r4, #28]
 8005f80:	60f0      	str	r0, [r6, #12]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e4      	bne.n	8005f52 <_Balloc+0x2e>
 8005f88:	2000      	movs	r0, #0
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	6802      	ldr	r2, [r0, #0]
 8005f8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f92:	2300      	movs	r3, #0
 8005f94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f98:	e7f7      	b.n	8005f8a <_Balloc+0x66>
 8005f9a:	bf00      	nop
 8005f9c:	08009084 	.word	0x08009084
 8005fa0:	08009104 	.word	0x08009104

08005fa4 <_Bfree>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	69c6      	ldr	r6, [r0, #28]
 8005fa8:	4605      	mov	r5, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	b976      	cbnz	r6, 8005fcc <_Bfree+0x28>
 8005fae:	2010      	movs	r0, #16
 8005fb0:	f7ff ff04 	bl	8005dbc <malloc>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	61e8      	str	r0, [r5, #28]
 8005fb8:	b920      	cbnz	r0, 8005fc4 <_Bfree+0x20>
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <_Bfree+0x3c>)
 8005fbc:	4809      	ldr	r0, [pc, #36]	; (8005fe4 <_Bfree+0x40>)
 8005fbe:	218f      	movs	r1, #143	; 0x8f
 8005fc0:	f002 f8e2 	bl	8008188 <__assert_func>
 8005fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fc8:	6006      	str	r6, [r0, #0]
 8005fca:	60c6      	str	r6, [r0, #12]
 8005fcc:	b13c      	cbz	r4, 8005fde <_Bfree+0x3a>
 8005fce:	69eb      	ldr	r3, [r5, #28]
 8005fd0:	6862      	ldr	r2, [r4, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fd8:	6021      	str	r1, [r4, #0]
 8005fda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	08009084 	.word	0x08009084
 8005fe4:	08009104 	.word	0x08009104

08005fe8 <__multadd>:
 8005fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fec:	690d      	ldr	r5, [r1, #16]
 8005fee:	4607      	mov	r7, r0
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	461e      	mov	r6, r3
 8005ff4:	f101 0c14 	add.w	ip, r1, #20
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	f8dc 3000 	ldr.w	r3, [ip]
 8005ffe:	b299      	uxth	r1, r3
 8006000:	fb02 6101 	mla	r1, r2, r1, r6
 8006004:	0c1e      	lsrs	r6, r3, #16
 8006006:	0c0b      	lsrs	r3, r1, #16
 8006008:	fb02 3306 	mla	r3, r2, r6, r3
 800600c:	b289      	uxth	r1, r1
 800600e:	3001      	adds	r0, #1
 8006010:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006014:	4285      	cmp	r5, r0
 8006016:	f84c 1b04 	str.w	r1, [ip], #4
 800601a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800601e:	dcec      	bgt.n	8005ffa <__multadd+0x12>
 8006020:	b30e      	cbz	r6, 8006066 <__multadd+0x7e>
 8006022:	68a3      	ldr	r3, [r4, #8]
 8006024:	42ab      	cmp	r3, r5
 8006026:	dc19      	bgt.n	800605c <__multadd+0x74>
 8006028:	6861      	ldr	r1, [r4, #4]
 800602a:	4638      	mov	r0, r7
 800602c:	3101      	adds	r1, #1
 800602e:	f7ff ff79 	bl	8005f24 <_Balloc>
 8006032:	4680      	mov	r8, r0
 8006034:	b928      	cbnz	r0, 8006042 <__multadd+0x5a>
 8006036:	4602      	mov	r2, r0
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <__multadd+0x84>)
 800603a:	480d      	ldr	r0, [pc, #52]	; (8006070 <__multadd+0x88>)
 800603c:	21ba      	movs	r1, #186	; 0xba
 800603e:	f002 f8a3 	bl	8008188 <__assert_func>
 8006042:	6922      	ldr	r2, [r4, #16]
 8006044:	3202      	adds	r2, #2
 8006046:	f104 010c 	add.w	r1, r4, #12
 800604a:	0092      	lsls	r2, r2, #2
 800604c:	300c      	adds	r0, #12
 800604e:	f002 f883 	bl	8008158 <memcpy>
 8006052:	4621      	mov	r1, r4
 8006054:	4638      	mov	r0, r7
 8006056:	f7ff ffa5 	bl	8005fa4 <_Bfree>
 800605a:	4644      	mov	r4, r8
 800605c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006060:	3501      	adds	r5, #1
 8006062:	615e      	str	r6, [r3, #20]
 8006064:	6125      	str	r5, [r4, #16]
 8006066:	4620      	mov	r0, r4
 8006068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800606c:	080090f3 	.word	0x080090f3
 8006070:	08009104 	.word	0x08009104

08006074 <__s2b>:
 8006074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006078:	460c      	mov	r4, r1
 800607a:	4615      	mov	r5, r2
 800607c:	461f      	mov	r7, r3
 800607e:	2209      	movs	r2, #9
 8006080:	3308      	adds	r3, #8
 8006082:	4606      	mov	r6, r0
 8006084:	fb93 f3f2 	sdiv	r3, r3, r2
 8006088:	2100      	movs	r1, #0
 800608a:	2201      	movs	r2, #1
 800608c:	429a      	cmp	r2, r3
 800608e:	db09      	blt.n	80060a4 <__s2b+0x30>
 8006090:	4630      	mov	r0, r6
 8006092:	f7ff ff47 	bl	8005f24 <_Balloc>
 8006096:	b940      	cbnz	r0, 80060aa <__s2b+0x36>
 8006098:	4602      	mov	r2, r0
 800609a:	4b19      	ldr	r3, [pc, #100]	; (8006100 <__s2b+0x8c>)
 800609c:	4819      	ldr	r0, [pc, #100]	; (8006104 <__s2b+0x90>)
 800609e:	21d3      	movs	r1, #211	; 0xd3
 80060a0:	f002 f872 	bl	8008188 <__assert_func>
 80060a4:	0052      	lsls	r2, r2, #1
 80060a6:	3101      	adds	r1, #1
 80060a8:	e7f0      	b.n	800608c <__s2b+0x18>
 80060aa:	9b08      	ldr	r3, [sp, #32]
 80060ac:	6143      	str	r3, [r0, #20]
 80060ae:	2d09      	cmp	r5, #9
 80060b0:	f04f 0301 	mov.w	r3, #1
 80060b4:	6103      	str	r3, [r0, #16]
 80060b6:	dd16      	ble.n	80060e6 <__s2b+0x72>
 80060b8:	f104 0909 	add.w	r9, r4, #9
 80060bc:	46c8      	mov	r8, r9
 80060be:	442c      	add	r4, r5
 80060c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80060c4:	4601      	mov	r1, r0
 80060c6:	3b30      	subs	r3, #48	; 0x30
 80060c8:	220a      	movs	r2, #10
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff ff8c 	bl	8005fe8 <__multadd>
 80060d0:	45a0      	cmp	r8, r4
 80060d2:	d1f5      	bne.n	80060c0 <__s2b+0x4c>
 80060d4:	f1a5 0408 	sub.w	r4, r5, #8
 80060d8:	444c      	add	r4, r9
 80060da:	1b2d      	subs	r5, r5, r4
 80060dc:	1963      	adds	r3, r4, r5
 80060de:	42bb      	cmp	r3, r7
 80060e0:	db04      	blt.n	80060ec <__s2b+0x78>
 80060e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e6:	340a      	adds	r4, #10
 80060e8:	2509      	movs	r5, #9
 80060ea:	e7f6      	b.n	80060da <__s2b+0x66>
 80060ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060f0:	4601      	mov	r1, r0
 80060f2:	3b30      	subs	r3, #48	; 0x30
 80060f4:	220a      	movs	r2, #10
 80060f6:	4630      	mov	r0, r6
 80060f8:	f7ff ff76 	bl	8005fe8 <__multadd>
 80060fc:	e7ee      	b.n	80060dc <__s2b+0x68>
 80060fe:	bf00      	nop
 8006100:	080090f3 	.word	0x080090f3
 8006104:	08009104 	.word	0x08009104

08006108 <__hi0bits>:
 8006108:	0c03      	lsrs	r3, r0, #16
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	b9d3      	cbnz	r3, 8006144 <__hi0bits+0x3c>
 800610e:	0400      	lsls	r0, r0, #16
 8006110:	2310      	movs	r3, #16
 8006112:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006116:	bf04      	itt	eq
 8006118:	0200      	lsleq	r0, r0, #8
 800611a:	3308      	addeq	r3, #8
 800611c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006120:	bf04      	itt	eq
 8006122:	0100      	lsleq	r0, r0, #4
 8006124:	3304      	addeq	r3, #4
 8006126:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800612a:	bf04      	itt	eq
 800612c:	0080      	lsleq	r0, r0, #2
 800612e:	3302      	addeq	r3, #2
 8006130:	2800      	cmp	r0, #0
 8006132:	db05      	blt.n	8006140 <__hi0bits+0x38>
 8006134:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006138:	f103 0301 	add.w	r3, r3, #1
 800613c:	bf08      	it	eq
 800613e:	2320      	moveq	r3, #32
 8006140:	4618      	mov	r0, r3
 8006142:	4770      	bx	lr
 8006144:	2300      	movs	r3, #0
 8006146:	e7e4      	b.n	8006112 <__hi0bits+0xa>

08006148 <__lo0bits>:
 8006148:	6803      	ldr	r3, [r0, #0]
 800614a:	f013 0207 	ands.w	r2, r3, #7
 800614e:	d00c      	beq.n	800616a <__lo0bits+0x22>
 8006150:	07d9      	lsls	r1, r3, #31
 8006152:	d422      	bmi.n	800619a <__lo0bits+0x52>
 8006154:	079a      	lsls	r2, r3, #30
 8006156:	bf49      	itett	mi
 8006158:	085b      	lsrmi	r3, r3, #1
 800615a:	089b      	lsrpl	r3, r3, #2
 800615c:	6003      	strmi	r3, [r0, #0]
 800615e:	2201      	movmi	r2, #1
 8006160:	bf5c      	itt	pl
 8006162:	6003      	strpl	r3, [r0, #0]
 8006164:	2202      	movpl	r2, #2
 8006166:	4610      	mov	r0, r2
 8006168:	4770      	bx	lr
 800616a:	b299      	uxth	r1, r3
 800616c:	b909      	cbnz	r1, 8006172 <__lo0bits+0x2a>
 800616e:	0c1b      	lsrs	r3, r3, #16
 8006170:	2210      	movs	r2, #16
 8006172:	b2d9      	uxtb	r1, r3
 8006174:	b909      	cbnz	r1, 800617a <__lo0bits+0x32>
 8006176:	3208      	adds	r2, #8
 8006178:	0a1b      	lsrs	r3, r3, #8
 800617a:	0719      	lsls	r1, r3, #28
 800617c:	bf04      	itt	eq
 800617e:	091b      	lsreq	r3, r3, #4
 8006180:	3204      	addeq	r2, #4
 8006182:	0799      	lsls	r1, r3, #30
 8006184:	bf04      	itt	eq
 8006186:	089b      	lsreq	r3, r3, #2
 8006188:	3202      	addeq	r2, #2
 800618a:	07d9      	lsls	r1, r3, #31
 800618c:	d403      	bmi.n	8006196 <__lo0bits+0x4e>
 800618e:	085b      	lsrs	r3, r3, #1
 8006190:	f102 0201 	add.w	r2, r2, #1
 8006194:	d003      	beq.n	800619e <__lo0bits+0x56>
 8006196:	6003      	str	r3, [r0, #0]
 8006198:	e7e5      	b.n	8006166 <__lo0bits+0x1e>
 800619a:	2200      	movs	r2, #0
 800619c:	e7e3      	b.n	8006166 <__lo0bits+0x1e>
 800619e:	2220      	movs	r2, #32
 80061a0:	e7e1      	b.n	8006166 <__lo0bits+0x1e>
	...

080061a4 <__i2b>:
 80061a4:	b510      	push	{r4, lr}
 80061a6:	460c      	mov	r4, r1
 80061a8:	2101      	movs	r1, #1
 80061aa:	f7ff febb 	bl	8005f24 <_Balloc>
 80061ae:	4602      	mov	r2, r0
 80061b0:	b928      	cbnz	r0, 80061be <__i2b+0x1a>
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <__i2b+0x24>)
 80061b4:	4805      	ldr	r0, [pc, #20]	; (80061cc <__i2b+0x28>)
 80061b6:	f240 1145 	movw	r1, #325	; 0x145
 80061ba:	f001 ffe5 	bl	8008188 <__assert_func>
 80061be:	2301      	movs	r3, #1
 80061c0:	6144      	str	r4, [r0, #20]
 80061c2:	6103      	str	r3, [r0, #16]
 80061c4:	bd10      	pop	{r4, pc}
 80061c6:	bf00      	nop
 80061c8:	080090f3 	.word	0x080090f3
 80061cc:	08009104 	.word	0x08009104

080061d0 <__multiply>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	4691      	mov	r9, r2
 80061d6:	690a      	ldr	r2, [r1, #16]
 80061d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061dc:	429a      	cmp	r2, r3
 80061de:	bfb8      	it	lt
 80061e0:	460b      	movlt	r3, r1
 80061e2:	460c      	mov	r4, r1
 80061e4:	bfbc      	itt	lt
 80061e6:	464c      	movlt	r4, r9
 80061e8:	4699      	movlt	r9, r3
 80061ea:	6927      	ldr	r7, [r4, #16]
 80061ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80061f0:	68a3      	ldr	r3, [r4, #8]
 80061f2:	6861      	ldr	r1, [r4, #4]
 80061f4:	eb07 060a 	add.w	r6, r7, sl
 80061f8:	42b3      	cmp	r3, r6
 80061fa:	b085      	sub	sp, #20
 80061fc:	bfb8      	it	lt
 80061fe:	3101      	addlt	r1, #1
 8006200:	f7ff fe90 	bl	8005f24 <_Balloc>
 8006204:	b930      	cbnz	r0, 8006214 <__multiply+0x44>
 8006206:	4602      	mov	r2, r0
 8006208:	4b44      	ldr	r3, [pc, #272]	; (800631c <__multiply+0x14c>)
 800620a:	4845      	ldr	r0, [pc, #276]	; (8006320 <__multiply+0x150>)
 800620c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006210:	f001 ffba 	bl	8008188 <__assert_func>
 8006214:	f100 0514 	add.w	r5, r0, #20
 8006218:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800621c:	462b      	mov	r3, r5
 800621e:	2200      	movs	r2, #0
 8006220:	4543      	cmp	r3, r8
 8006222:	d321      	bcc.n	8006268 <__multiply+0x98>
 8006224:	f104 0314 	add.w	r3, r4, #20
 8006228:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800622c:	f109 0314 	add.w	r3, r9, #20
 8006230:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006234:	9202      	str	r2, [sp, #8]
 8006236:	1b3a      	subs	r2, r7, r4
 8006238:	3a15      	subs	r2, #21
 800623a:	f022 0203 	bic.w	r2, r2, #3
 800623e:	3204      	adds	r2, #4
 8006240:	f104 0115 	add.w	r1, r4, #21
 8006244:	428f      	cmp	r7, r1
 8006246:	bf38      	it	cc
 8006248:	2204      	movcc	r2, #4
 800624a:	9201      	str	r2, [sp, #4]
 800624c:	9a02      	ldr	r2, [sp, #8]
 800624e:	9303      	str	r3, [sp, #12]
 8006250:	429a      	cmp	r2, r3
 8006252:	d80c      	bhi.n	800626e <__multiply+0x9e>
 8006254:	2e00      	cmp	r6, #0
 8006256:	dd03      	ble.n	8006260 <__multiply+0x90>
 8006258:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800625c:	2b00      	cmp	r3, #0
 800625e:	d05b      	beq.n	8006318 <__multiply+0x148>
 8006260:	6106      	str	r6, [r0, #16]
 8006262:	b005      	add	sp, #20
 8006264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006268:	f843 2b04 	str.w	r2, [r3], #4
 800626c:	e7d8      	b.n	8006220 <__multiply+0x50>
 800626e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006272:	f1ba 0f00 	cmp.w	sl, #0
 8006276:	d024      	beq.n	80062c2 <__multiply+0xf2>
 8006278:	f104 0e14 	add.w	lr, r4, #20
 800627c:	46a9      	mov	r9, r5
 800627e:	f04f 0c00 	mov.w	ip, #0
 8006282:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006286:	f8d9 1000 	ldr.w	r1, [r9]
 800628a:	fa1f fb82 	uxth.w	fp, r2
 800628e:	b289      	uxth	r1, r1
 8006290:	fb0a 110b 	mla	r1, sl, fp, r1
 8006294:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006298:	f8d9 2000 	ldr.w	r2, [r9]
 800629c:	4461      	add	r1, ip
 800629e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80062a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062aa:	b289      	uxth	r1, r1
 80062ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062b0:	4577      	cmp	r7, lr
 80062b2:	f849 1b04 	str.w	r1, [r9], #4
 80062b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062ba:	d8e2      	bhi.n	8006282 <__multiply+0xb2>
 80062bc:	9a01      	ldr	r2, [sp, #4]
 80062be:	f845 c002 	str.w	ip, [r5, r2]
 80062c2:	9a03      	ldr	r2, [sp, #12]
 80062c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062c8:	3304      	adds	r3, #4
 80062ca:	f1b9 0f00 	cmp.w	r9, #0
 80062ce:	d021      	beq.n	8006314 <__multiply+0x144>
 80062d0:	6829      	ldr	r1, [r5, #0]
 80062d2:	f104 0c14 	add.w	ip, r4, #20
 80062d6:	46ae      	mov	lr, r5
 80062d8:	f04f 0a00 	mov.w	sl, #0
 80062dc:	f8bc b000 	ldrh.w	fp, [ip]
 80062e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80062e4:	fb09 220b 	mla	r2, r9, fp, r2
 80062e8:	4452      	add	r2, sl
 80062ea:	b289      	uxth	r1, r1
 80062ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062f0:	f84e 1b04 	str.w	r1, [lr], #4
 80062f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80062f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80062fc:	f8be 1000 	ldrh.w	r1, [lr]
 8006300:	fb09 110a 	mla	r1, r9, sl, r1
 8006304:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006308:	4567      	cmp	r7, ip
 800630a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800630e:	d8e5      	bhi.n	80062dc <__multiply+0x10c>
 8006310:	9a01      	ldr	r2, [sp, #4]
 8006312:	50a9      	str	r1, [r5, r2]
 8006314:	3504      	adds	r5, #4
 8006316:	e799      	b.n	800624c <__multiply+0x7c>
 8006318:	3e01      	subs	r6, #1
 800631a:	e79b      	b.n	8006254 <__multiply+0x84>
 800631c:	080090f3 	.word	0x080090f3
 8006320:	08009104 	.word	0x08009104

08006324 <__pow5mult>:
 8006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006328:	4615      	mov	r5, r2
 800632a:	f012 0203 	ands.w	r2, r2, #3
 800632e:	4606      	mov	r6, r0
 8006330:	460f      	mov	r7, r1
 8006332:	d007      	beq.n	8006344 <__pow5mult+0x20>
 8006334:	4c25      	ldr	r4, [pc, #148]	; (80063cc <__pow5mult+0xa8>)
 8006336:	3a01      	subs	r2, #1
 8006338:	2300      	movs	r3, #0
 800633a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800633e:	f7ff fe53 	bl	8005fe8 <__multadd>
 8006342:	4607      	mov	r7, r0
 8006344:	10ad      	asrs	r5, r5, #2
 8006346:	d03d      	beq.n	80063c4 <__pow5mult+0xa0>
 8006348:	69f4      	ldr	r4, [r6, #28]
 800634a:	b97c      	cbnz	r4, 800636c <__pow5mult+0x48>
 800634c:	2010      	movs	r0, #16
 800634e:	f7ff fd35 	bl	8005dbc <malloc>
 8006352:	4602      	mov	r2, r0
 8006354:	61f0      	str	r0, [r6, #28]
 8006356:	b928      	cbnz	r0, 8006364 <__pow5mult+0x40>
 8006358:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <__pow5mult+0xac>)
 800635a:	481e      	ldr	r0, [pc, #120]	; (80063d4 <__pow5mult+0xb0>)
 800635c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006360:	f001 ff12 	bl	8008188 <__assert_func>
 8006364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006368:	6004      	str	r4, [r0, #0]
 800636a:	60c4      	str	r4, [r0, #12]
 800636c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006374:	b94c      	cbnz	r4, 800638a <__pow5mult+0x66>
 8006376:	f240 2171 	movw	r1, #625	; 0x271
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ff12 	bl	80061a4 <__i2b>
 8006380:	2300      	movs	r3, #0
 8006382:	f8c8 0008 	str.w	r0, [r8, #8]
 8006386:	4604      	mov	r4, r0
 8006388:	6003      	str	r3, [r0, #0]
 800638a:	f04f 0900 	mov.w	r9, #0
 800638e:	07eb      	lsls	r3, r5, #31
 8006390:	d50a      	bpl.n	80063a8 <__pow5mult+0x84>
 8006392:	4639      	mov	r1, r7
 8006394:	4622      	mov	r2, r4
 8006396:	4630      	mov	r0, r6
 8006398:	f7ff ff1a 	bl	80061d0 <__multiply>
 800639c:	4639      	mov	r1, r7
 800639e:	4680      	mov	r8, r0
 80063a0:	4630      	mov	r0, r6
 80063a2:	f7ff fdff 	bl	8005fa4 <_Bfree>
 80063a6:	4647      	mov	r7, r8
 80063a8:	106d      	asrs	r5, r5, #1
 80063aa:	d00b      	beq.n	80063c4 <__pow5mult+0xa0>
 80063ac:	6820      	ldr	r0, [r4, #0]
 80063ae:	b938      	cbnz	r0, 80063c0 <__pow5mult+0x9c>
 80063b0:	4622      	mov	r2, r4
 80063b2:	4621      	mov	r1, r4
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7ff ff0b 	bl	80061d0 <__multiply>
 80063ba:	6020      	str	r0, [r4, #0]
 80063bc:	f8c0 9000 	str.w	r9, [r0]
 80063c0:	4604      	mov	r4, r0
 80063c2:	e7e4      	b.n	800638e <__pow5mult+0x6a>
 80063c4:	4638      	mov	r0, r7
 80063c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ca:	bf00      	nop
 80063cc:	08009250 	.word	0x08009250
 80063d0:	08009084 	.word	0x08009084
 80063d4:	08009104 	.word	0x08009104

080063d8 <__lshift>:
 80063d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063dc:	460c      	mov	r4, r1
 80063de:	6849      	ldr	r1, [r1, #4]
 80063e0:	6923      	ldr	r3, [r4, #16]
 80063e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063e6:	68a3      	ldr	r3, [r4, #8]
 80063e8:	4607      	mov	r7, r0
 80063ea:	4691      	mov	r9, r2
 80063ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063f0:	f108 0601 	add.w	r6, r8, #1
 80063f4:	42b3      	cmp	r3, r6
 80063f6:	db0b      	blt.n	8006410 <__lshift+0x38>
 80063f8:	4638      	mov	r0, r7
 80063fa:	f7ff fd93 	bl	8005f24 <_Balloc>
 80063fe:	4605      	mov	r5, r0
 8006400:	b948      	cbnz	r0, 8006416 <__lshift+0x3e>
 8006402:	4602      	mov	r2, r0
 8006404:	4b28      	ldr	r3, [pc, #160]	; (80064a8 <__lshift+0xd0>)
 8006406:	4829      	ldr	r0, [pc, #164]	; (80064ac <__lshift+0xd4>)
 8006408:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800640c:	f001 febc 	bl	8008188 <__assert_func>
 8006410:	3101      	adds	r1, #1
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	e7ee      	b.n	80063f4 <__lshift+0x1c>
 8006416:	2300      	movs	r3, #0
 8006418:	f100 0114 	add.w	r1, r0, #20
 800641c:	f100 0210 	add.w	r2, r0, #16
 8006420:	4618      	mov	r0, r3
 8006422:	4553      	cmp	r3, sl
 8006424:	db33      	blt.n	800648e <__lshift+0xb6>
 8006426:	6920      	ldr	r0, [r4, #16]
 8006428:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800642c:	f104 0314 	add.w	r3, r4, #20
 8006430:	f019 091f 	ands.w	r9, r9, #31
 8006434:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006438:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800643c:	d02b      	beq.n	8006496 <__lshift+0xbe>
 800643e:	f1c9 0e20 	rsb	lr, r9, #32
 8006442:	468a      	mov	sl, r1
 8006444:	2200      	movs	r2, #0
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	fa00 f009 	lsl.w	r0, r0, r9
 800644c:	4310      	orrs	r0, r2
 800644e:	f84a 0b04 	str.w	r0, [sl], #4
 8006452:	f853 2b04 	ldr.w	r2, [r3], #4
 8006456:	459c      	cmp	ip, r3
 8006458:	fa22 f20e 	lsr.w	r2, r2, lr
 800645c:	d8f3      	bhi.n	8006446 <__lshift+0x6e>
 800645e:	ebac 0304 	sub.w	r3, ip, r4
 8006462:	3b15      	subs	r3, #21
 8006464:	f023 0303 	bic.w	r3, r3, #3
 8006468:	3304      	adds	r3, #4
 800646a:	f104 0015 	add.w	r0, r4, #21
 800646e:	4584      	cmp	ip, r0
 8006470:	bf38      	it	cc
 8006472:	2304      	movcc	r3, #4
 8006474:	50ca      	str	r2, [r1, r3]
 8006476:	b10a      	cbz	r2, 800647c <__lshift+0xa4>
 8006478:	f108 0602 	add.w	r6, r8, #2
 800647c:	3e01      	subs	r6, #1
 800647e:	4638      	mov	r0, r7
 8006480:	612e      	str	r6, [r5, #16]
 8006482:	4621      	mov	r1, r4
 8006484:	f7ff fd8e 	bl	8005fa4 <_Bfree>
 8006488:	4628      	mov	r0, r5
 800648a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006492:	3301      	adds	r3, #1
 8006494:	e7c5      	b.n	8006422 <__lshift+0x4a>
 8006496:	3904      	subs	r1, #4
 8006498:	f853 2b04 	ldr.w	r2, [r3], #4
 800649c:	f841 2f04 	str.w	r2, [r1, #4]!
 80064a0:	459c      	cmp	ip, r3
 80064a2:	d8f9      	bhi.n	8006498 <__lshift+0xc0>
 80064a4:	e7ea      	b.n	800647c <__lshift+0xa4>
 80064a6:	bf00      	nop
 80064a8:	080090f3 	.word	0x080090f3
 80064ac:	08009104 	.word	0x08009104

080064b0 <__mcmp>:
 80064b0:	b530      	push	{r4, r5, lr}
 80064b2:	6902      	ldr	r2, [r0, #16]
 80064b4:	690c      	ldr	r4, [r1, #16]
 80064b6:	1b12      	subs	r2, r2, r4
 80064b8:	d10e      	bne.n	80064d8 <__mcmp+0x28>
 80064ba:	f100 0314 	add.w	r3, r0, #20
 80064be:	3114      	adds	r1, #20
 80064c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80064c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80064c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80064cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80064d0:	42a5      	cmp	r5, r4
 80064d2:	d003      	beq.n	80064dc <__mcmp+0x2c>
 80064d4:	d305      	bcc.n	80064e2 <__mcmp+0x32>
 80064d6:	2201      	movs	r2, #1
 80064d8:	4610      	mov	r0, r2
 80064da:	bd30      	pop	{r4, r5, pc}
 80064dc:	4283      	cmp	r3, r0
 80064de:	d3f3      	bcc.n	80064c8 <__mcmp+0x18>
 80064e0:	e7fa      	b.n	80064d8 <__mcmp+0x28>
 80064e2:	f04f 32ff 	mov.w	r2, #4294967295
 80064e6:	e7f7      	b.n	80064d8 <__mcmp+0x28>

080064e8 <__mdiff>:
 80064e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ec:	460c      	mov	r4, r1
 80064ee:	4606      	mov	r6, r0
 80064f0:	4611      	mov	r1, r2
 80064f2:	4620      	mov	r0, r4
 80064f4:	4690      	mov	r8, r2
 80064f6:	f7ff ffdb 	bl	80064b0 <__mcmp>
 80064fa:	1e05      	subs	r5, r0, #0
 80064fc:	d110      	bne.n	8006520 <__mdiff+0x38>
 80064fe:	4629      	mov	r1, r5
 8006500:	4630      	mov	r0, r6
 8006502:	f7ff fd0f 	bl	8005f24 <_Balloc>
 8006506:	b930      	cbnz	r0, 8006516 <__mdiff+0x2e>
 8006508:	4b3a      	ldr	r3, [pc, #232]	; (80065f4 <__mdiff+0x10c>)
 800650a:	4602      	mov	r2, r0
 800650c:	f240 2137 	movw	r1, #567	; 0x237
 8006510:	4839      	ldr	r0, [pc, #228]	; (80065f8 <__mdiff+0x110>)
 8006512:	f001 fe39 	bl	8008188 <__assert_func>
 8006516:	2301      	movs	r3, #1
 8006518:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800651c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006520:	bfa4      	itt	ge
 8006522:	4643      	movge	r3, r8
 8006524:	46a0      	movge	r8, r4
 8006526:	4630      	mov	r0, r6
 8006528:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800652c:	bfa6      	itte	ge
 800652e:	461c      	movge	r4, r3
 8006530:	2500      	movge	r5, #0
 8006532:	2501      	movlt	r5, #1
 8006534:	f7ff fcf6 	bl	8005f24 <_Balloc>
 8006538:	b920      	cbnz	r0, 8006544 <__mdiff+0x5c>
 800653a:	4b2e      	ldr	r3, [pc, #184]	; (80065f4 <__mdiff+0x10c>)
 800653c:	4602      	mov	r2, r0
 800653e:	f240 2145 	movw	r1, #581	; 0x245
 8006542:	e7e5      	b.n	8006510 <__mdiff+0x28>
 8006544:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006548:	6926      	ldr	r6, [r4, #16]
 800654a:	60c5      	str	r5, [r0, #12]
 800654c:	f104 0914 	add.w	r9, r4, #20
 8006550:	f108 0514 	add.w	r5, r8, #20
 8006554:	f100 0e14 	add.w	lr, r0, #20
 8006558:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800655c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006560:	f108 0210 	add.w	r2, r8, #16
 8006564:	46f2      	mov	sl, lr
 8006566:	2100      	movs	r1, #0
 8006568:	f859 3b04 	ldr.w	r3, [r9], #4
 800656c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006570:	fa11 f88b 	uxtah	r8, r1, fp
 8006574:	b299      	uxth	r1, r3
 8006576:	0c1b      	lsrs	r3, r3, #16
 8006578:	eba8 0801 	sub.w	r8, r8, r1
 800657c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006580:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006584:	fa1f f888 	uxth.w	r8, r8
 8006588:	1419      	asrs	r1, r3, #16
 800658a:	454e      	cmp	r6, r9
 800658c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006590:	f84a 3b04 	str.w	r3, [sl], #4
 8006594:	d8e8      	bhi.n	8006568 <__mdiff+0x80>
 8006596:	1b33      	subs	r3, r6, r4
 8006598:	3b15      	subs	r3, #21
 800659a:	f023 0303 	bic.w	r3, r3, #3
 800659e:	3304      	adds	r3, #4
 80065a0:	3415      	adds	r4, #21
 80065a2:	42a6      	cmp	r6, r4
 80065a4:	bf38      	it	cc
 80065a6:	2304      	movcc	r3, #4
 80065a8:	441d      	add	r5, r3
 80065aa:	4473      	add	r3, lr
 80065ac:	469e      	mov	lr, r3
 80065ae:	462e      	mov	r6, r5
 80065b0:	4566      	cmp	r6, ip
 80065b2:	d30e      	bcc.n	80065d2 <__mdiff+0xea>
 80065b4:	f10c 0203 	add.w	r2, ip, #3
 80065b8:	1b52      	subs	r2, r2, r5
 80065ba:	f022 0203 	bic.w	r2, r2, #3
 80065be:	3d03      	subs	r5, #3
 80065c0:	45ac      	cmp	ip, r5
 80065c2:	bf38      	it	cc
 80065c4:	2200      	movcc	r2, #0
 80065c6:	4413      	add	r3, r2
 80065c8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80065cc:	b17a      	cbz	r2, 80065ee <__mdiff+0x106>
 80065ce:	6107      	str	r7, [r0, #16]
 80065d0:	e7a4      	b.n	800651c <__mdiff+0x34>
 80065d2:	f856 8b04 	ldr.w	r8, [r6], #4
 80065d6:	fa11 f288 	uxtah	r2, r1, r8
 80065da:	1414      	asrs	r4, r2, #16
 80065dc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80065e0:	b292      	uxth	r2, r2
 80065e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80065e6:	f84e 2b04 	str.w	r2, [lr], #4
 80065ea:	1421      	asrs	r1, r4, #16
 80065ec:	e7e0      	b.n	80065b0 <__mdiff+0xc8>
 80065ee:	3f01      	subs	r7, #1
 80065f0:	e7ea      	b.n	80065c8 <__mdiff+0xe0>
 80065f2:	bf00      	nop
 80065f4:	080090f3 	.word	0x080090f3
 80065f8:	08009104 	.word	0x08009104

080065fc <__ulp>:
 80065fc:	b082      	sub	sp, #8
 80065fe:	ed8d 0b00 	vstr	d0, [sp]
 8006602:	9a01      	ldr	r2, [sp, #4]
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <__ulp+0x48>)
 8006606:	4013      	ands	r3, r2
 8006608:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800660c:	2b00      	cmp	r3, #0
 800660e:	dc08      	bgt.n	8006622 <__ulp+0x26>
 8006610:	425b      	negs	r3, r3
 8006612:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006616:	ea4f 5223 	mov.w	r2, r3, asr #20
 800661a:	da04      	bge.n	8006626 <__ulp+0x2a>
 800661c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006620:	4113      	asrs	r3, r2
 8006622:	2200      	movs	r2, #0
 8006624:	e008      	b.n	8006638 <__ulp+0x3c>
 8006626:	f1a2 0314 	sub.w	r3, r2, #20
 800662a:	2b1e      	cmp	r3, #30
 800662c:	bfda      	itte	le
 800662e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006632:	40da      	lsrle	r2, r3
 8006634:	2201      	movgt	r2, #1
 8006636:	2300      	movs	r3, #0
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	ec41 0b10 	vmov	d0, r0, r1
 8006640:	b002      	add	sp, #8
 8006642:	4770      	bx	lr
 8006644:	7ff00000 	.word	0x7ff00000

08006648 <__b2d>:
 8006648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664c:	6906      	ldr	r6, [r0, #16]
 800664e:	f100 0814 	add.w	r8, r0, #20
 8006652:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006656:	1f37      	subs	r7, r6, #4
 8006658:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800665c:	4610      	mov	r0, r2
 800665e:	f7ff fd53 	bl	8006108 <__hi0bits>
 8006662:	f1c0 0320 	rsb	r3, r0, #32
 8006666:	280a      	cmp	r0, #10
 8006668:	600b      	str	r3, [r1, #0]
 800666a:	491b      	ldr	r1, [pc, #108]	; (80066d8 <__b2d+0x90>)
 800666c:	dc15      	bgt.n	800669a <__b2d+0x52>
 800666e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006672:	fa22 f30c 	lsr.w	r3, r2, ip
 8006676:	45b8      	cmp	r8, r7
 8006678:	ea43 0501 	orr.w	r5, r3, r1
 800667c:	bf34      	ite	cc
 800667e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006682:	2300      	movcs	r3, #0
 8006684:	3015      	adds	r0, #21
 8006686:	fa02 f000 	lsl.w	r0, r2, r0
 800668a:	fa23 f30c 	lsr.w	r3, r3, ip
 800668e:	4303      	orrs	r3, r0
 8006690:	461c      	mov	r4, r3
 8006692:	ec45 4b10 	vmov	d0, r4, r5
 8006696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800669a:	45b8      	cmp	r8, r7
 800669c:	bf3a      	itte	cc
 800669e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80066a2:	f1a6 0708 	subcc.w	r7, r6, #8
 80066a6:	2300      	movcs	r3, #0
 80066a8:	380b      	subs	r0, #11
 80066aa:	d012      	beq.n	80066d2 <__b2d+0x8a>
 80066ac:	f1c0 0120 	rsb	r1, r0, #32
 80066b0:	fa23 f401 	lsr.w	r4, r3, r1
 80066b4:	4082      	lsls	r2, r0
 80066b6:	4322      	orrs	r2, r4
 80066b8:	4547      	cmp	r7, r8
 80066ba:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80066be:	bf8c      	ite	hi
 80066c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80066c4:	2200      	movls	r2, #0
 80066c6:	4083      	lsls	r3, r0
 80066c8:	40ca      	lsrs	r2, r1
 80066ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80066ce:	4313      	orrs	r3, r2
 80066d0:	e7de      	b.n	8006690 <__b2d+0x48>
 80066d2:	ea42 0501 	orr.w	r5, r2, r1
 80066d6:	e7db      	b.n	8006690 <__b2d+0x48>
 80066d8:	3ff00000 	.word	0x3ff00000

080066dc <__d2b>:
 80066dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066e0:	460f      	mov	r7, r1
 80066e2:	2101      	movs	r1, #1
 80066e4:	ec59 8b10 	vmov	r8, r9, d0
 80066e8:	4616      	mov	r6, r2
 80066ea:	f7ff fc1b 	bl	8005f24 <_Balloc>
 80066ee:	4604      	mov	r4, r0
 80066f0:	b930      	cbnz	r0, 8006700 <__d2b+0x24>
 80066f2:	4602      	mov	r2, r0
 80066f4:	4b24      	ldr	r3, [pc, #144]	; (8006788 <__d2b+0xac>)
 80066f6:	4825      	ldr	r0, [pc, #148]	; (800678c <__d2b+0xb0>)
 80066f8:	f240 310f 	movw	r1, #783	; 0x30f
 80066fc:	f001 fd44 	bl	8008188 <__assert_func>
 8006700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006708:	bb2d      	cbnz	r5, 8006756 <__d2b+0x7a>
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	f1b8 0300 	subs.w	r3, r8, #0
 8006710:	d026      	beq.n	8006760 <__d2b+0x84>
 8006712:	4668      	mov	r0, sp
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	f7ff fd17 	bl	8006148 <__lo0bits>
 800671a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800671e:	b1e8      	cbz	r0, 800675c <__d2b+0x80>
 8006720:	f1c0 0320 	rsb	r3, r0, #32
 8006724:	fa02 f303 	lsl.w	r3, r2, r3
 8006728:	430b      	orrs	r3, r1
 800672a:	40c2      	lsrs	r2, r0
 800672c:	6163      	str	r3, [r4, #20]
 800672e:	9201      	str	r2, [sp, #4]
 8006730:	9b01      	ldr	r3, [sp, #4]
 8006732:	61a3      	str	r3, [r4, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	bf14      	ite	ne
 8006738:	2202      	movne	r2, #2
 800673a:	2201      	moveq	r2, #1
 800673c:	6122      	str	r2, [r4, #16]
 800673e:	b1bd      	cbz	r5, 8006770 <__d2b+0x94>
 8006740:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006744:	4405      	add	r5, r0
 8006746:	603d      	str	r5, [r7, #0]
 8006748:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800674c:	6030      	str	r0, [r6, #0]
 800674e:	4620      	mov	r0, r4
 8006750:	b003      	add	sp, #12
 8006752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800675a:	e7d6      	b.n	800670a <__d2b+0x2e>
 800675c:	6161      	str	r1, [r4, #20]
 800675e:	e7e7      	b.n	8006730 <__d2b+0x54>
 8006760:	a801      	add	r0, sp, #4
 8006762:	f7ff fcf1 	bl	8006148 <__lo0bits>
 8006766:	9b01      	ldr	r3, [sp, #4]
 8006768:	6163      	str	r3, [r4, #20]
 800676a:	3020      	adds	r0, #32
 800676c:	2201      	movs	r2, #1
 800676e:	e7e5      	b.n	800673c <__d2b+0x60>
 8006770:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006774:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006778:	6038      	str	r0, [r7, #0]
 800677a:	6918      	ldr	r0, [r3, #16]
 800677c:	f7ff fcc4 	bl	8006108 <__hi0bits>
 8006780:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006784:	e7e2      	b.n	800674c <__d2b+0x70>
 8006786:	bf00      	nop
 8006788:	080090f3 	.word	0x080090f3
 800678c:	08009104 	.word	0x08009104

08006790 <__ratio>:
 8006790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006794:	4688      	mov	r8, r1
 8006796:	4669      	mov	r1, sp
 8006798:	4681      	mov	r9, r0
 800679a:	f7ff ff55 	bl	8006648 <__b2d>
 800679e:	a901      	add	r1, sp, #4
 80067a0:	4640      	mov	r0, r8
 80067a2:	ec55 4b10 	vmov	r4, r5, d0
 80067a6:	f7ff ff4f 	bl	8006648 <__b2d>
 80067aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80067ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80067b2:	eba3 0c02 	sub.w	ip, r3, r2
 80067b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80067ba:	1a9b      	subs	r3, r3, r2
 80067bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80067c0:	ec51 0b10 	vmov	r0, r1, d0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bfd6      	itet	le
 80067c8:	460a      	movle	r2, r1
 80067ca:	462a      	movgt	r2, r5
 80067cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80067d0:	468b      	mov	fp, r1
 80067d2:	462f      	mov	r7, r5
 80067d4:	bfd4      	ite	le
 80067d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80067da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80067de:	4620      	mov	r0, r4
 80067e0:	ee10 2a10 	vmov	r2, s0
 80067e4:	465b      	mov	r3, fp
 80067e6:	4639      	mov	r1, r7
 80067e8:	f7fa f850 	bl	800088c <__aeabi_ddiv>
 80067ec:	ec41 0b10 	vmov	d0, r0, r1
 80067f0:	b003      	add	sp, #12
 80067f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067f6 <__copybits>:
 80067f6:	3901      	subs	r1, #1
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	1149      	asrs	r1, r1, #5
 80067fc:	6914      	ldr	r4, [r2, #16]
 80067fe:	3101      	adds	r1, #1
 8006800:	f102 0314 	add.w	r3, r2, #20
 8006804:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006808:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800680c:	1f05      	subs	r5, r0, #4
 800680e:	42a3      	cmp	r3, r4
 8006810:	d30c      	bcc.n	800682c <__copybits+0x36>
 8006812:	1aa3      	subs	r3, r4, r2
 8006814:	3b11      	subs	r3, #17
 8006816:	f023 0303 	bic.w	r3, r3, #3
 800681a:	3211      	adds	r2, #17
 800681c:	42a2      	cmp	r2, r4
 800681e:	bf88      	it	hi
 8006820:	2300      	movhi	r3, #0
 8006822:	4418      	add	r0, r3
 8006824:	2300      	movs	r3, #0
 8006826:	4288      	cmp	r0, r1
 8006828:	d305      	bcc.n	8006836 <__copybits+0x40>
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006830:	f845 6f04 	str.w	r6, [r5, #4]!
 8006834:	e7eb      	b.n	800680e <__copybits+0x18>
 8006836:	f840 3b04 	str.w	r3, [r0], #4
 800683a:	e7f4      	b.n	8006826 <__copybits+0x30>

0800683c <__any_on>:
 800683c:	f100 0214 	add.w	r2, r0, #20
 8006840:	6900      	ldr	r0, [r0, #16]
 8006842:	114b      	asrs	r3, r1, #5
 8006844:	4298      	cmp	r0, r3
 8006846:	b510      	push	{r4, lr}
 8006848:	db11      	blt.n	800686e <__any_on+0x32>
 800684a:	dd0a      	ble.n	8006862 <__any_on+0x26>
 800684c:	f011 011f 	ands.w	r1, r1, #31
 8006850:	d007      	beq.n	8006862 <__any_on+0x26>
 8006852:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006856:	fa24 f001 	lsr.w	r0, r4, r1
 800685a:	fa00 f101 	lsl.w	r1, r0, r1
 800685e:	428c      	cmp	r4, r1
 8006860:	d10b      	bne.n	800687a <__any_on+0x3e>
 8006862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006866:	4293      	cmp	r3, r2
 8006868:	d803      	bhi.n	8006872 <__any_on+0x36>
 800686a:	2000      	movs	r0, #0
 800686c:	bd10      	pop	{r4, pc}
 800686e:	4603      	mov	r3, r0
 8006870:	e7f7      	b.n	8006862 <__any_on+0x26>
 8006872:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006876:	2900      	cmp	r1, #0
 8006878:	d0f5      	beq.n	8006866 <__any_on+0x2a>
 800687a:	2001      	movs	r0, #1
 800687c:	e7f6      	b.n	800686c <__any_on+0x30>

0800687e <sulp>:
 800687e:	b570      	push	{r4, r5, r6, lr}
 8006880:	4604      	mov	r4, r0
 8006882:	460d      	mov	r5, r1
 8006884:	ec45 4b10 	vmov	d0, r4, r5
 8006888:	4616      	mov	r6, r2
 800688a:	f7ff feb7 	bl	80065fc <__ulp>
 800688e:	ec51 0b10 	vmov	r0, r1, d0
 8006892:	b17e      	cbz	r6, 80068b4 <sulp+0x36>
 8006894:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006898:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800689c:	2b00      	cmp	r3, #0
 800689e:	dd09      	ble.n	80068b4 <sulp+0x36>
 80068a0:	051b      	lsls	r3, r3, #20
 80068a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80068a6:	2400      	movs	r4, #0
 80068a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80068ac:	4622      	mov	r2, r4
 80068ae:	462b      	mov	r3, r5
 80068b0:	f7f9 fec2 	bl	8000638 <__aeabi_dmul>
 80068b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080068b8 <_strtod_l>:
 80068b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068bc:	ed2d 8b02 	vpush	{d8}
 80068c0:	b09b      	sub	sp, #108	; 0x6c
 80068c2:	4604      	mov	r4, r0
 80068c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80068c6:	2200      	movs	r2, #0
 80068c8:	9216      	str	r2, [sp, #88]	; 0x58
 80068ca:	460d      	mov	r5, r1
 80068cc:	f04f 0800 	mov.w	r8, #0
 80068d0:	f04f 0900 	mov.w	r9, #0
 80068d4:	460a      	mov	r2, r1
 80068d6:	9215      	str	r2, [sp, #84]	; 0x54
 80068d8:	7811      	ldrb	r1, [r2, #0]
 80068da:	292b      	cmp	r1, #43	; 0x2b
 80068dc:	d04c      	beq.n	8006978 <_strtod_l+0xc0>
 80068de:	d83a      	bhi.n	8006956 <_strtod_l+0x9e>
 80068e0:	290d      	cmp	r1, #13
 80068e2:	d834      	bhi.n	800694e <_strtod_l+0x96>
 80068e4:	2908      	cmp	r1, #8
 80068e6:	d834      	bhi.n	8006952 <_strtod_l+0x9a>
 80068e8:	2900      	cmp	r1, #0
 80068ea:	d03d      	beq.n	8006968 <_strtod_l+0xb0>
 80068ec:	2200      	movs	r2, #0
 80068ee:	920a      	str	r2, [sp, #40]	; 0x28
 80068f0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80068f2:	7832      	ldrb	r2, [r6, #0]
 80068f4:	2a30      	cmp	r2, #48	; 0x30
 80068f6:	f040 80b4 	bne.w	8006a62 <_strtod_l+0x1aa>
 80068fa:	7872      	ldrb	r2, [r6, #1]
 80068fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006900:	2a58      	cmp	r2, #88	; 0x58
 8006902:	d170      	bne.n	80069e6 <_strtod_l+0x12e>
 8006904:	9302      	str	r3, [sp, #8]
 8006906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	ab16      	add	r3, sp, #88	; 0x58
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	4a8e      	ldr	r2, [pc, #568]	; (8006b48 <_strtod_l+0x290>)
 8006910:	ab17      	add	r3, sp, #92	; 0x5c
 8006912:	a915      	add	r1, sp, #84	; 0x54
 8006914:	4620      	mov	r0, r4
 8006916:	f001 fcd3 	bl	80082c0 <__gethex>
 800691a:	f010 070f 	ands.w	r7, r0, #15
 800691e:	4605      	mov	r5, r0
 8006920:	d005      	beq.n	800692e <_strtod_l+0x76>
 8006922:	2f06      	cmp	r7, #6
 8006924:	d12a      	bne.n	800697c <_strtod_l+0xc4>
 8006926:	3601      	adds	r6, #1
 8006928:	2300      	movs	r3, #0
 800692a:	9615      	str	r6, [sp, #84]	; 0x54
 800692c:	930a      	str	r3, [sp, #40]	; 0x28
 800692e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006930:	2b00      	cmp	r3, #0
 8006932:	f040 857f 	bne.w	8007434 <_strtod_l+0xb7c>
 8006936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006938:	b1db      	cbz	r3, 8006972 <_strtod_l+0xba>
 800693a:	4642      	mov	r2, r8
 800693c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006940:	ec43 2b10 	vmov	d0, r2, r3
 8006944:	b01b      	add	sp, #108	; 0x6c
 8006946:	ecbd 8b02 	vpop	{d8}
 800694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694e:	2920      	cmp	r1, #32
 8006950:	d1cc      	bne.n	80068ec <_strtod_l+0x34>
 8006952:	3201      	adds	r2, #1
 8006954:	e7bf      	b.n	80068d6 <_strtod_l+0x1e>
 8006956:	292d      	cmp	r1, #45	; 0x2d
 8006958:	d1c8      	bne.n	80068ec <_strtod_l+0x34>
 800695a:	2101      	movs	r1, #1
 800695c:	910a      	str	r1, [sp, #40]	; 0x28
 800695e:	1c51      	adds	r1, r2, #1
 8006960:	9115      	str	r1, [sp, #84]	; 0x54
 8006962:	7852      	ldrb	r2, [r2, #1]
 8006964:	2a00      	cmp	r2, #0
 8006966:	d1c3      	bne.n	80068f0 <_strtod_l+0x38>
 8006968:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800696a:	9515      	str	r5, [sp, #84]	; 0x54
 800696c:	2b00      	cmp	r3, #0
 800696e:	f040 855f 	bne.w	8007430 <_strtod_l+0xb78>
 8006972:	4642      	mov	r2, r8
 8006974:	464b      	mov	r3, r9
 8006976:	e7e3      	b.n	8006940 <_strtod_l+0x88>
 8006978:	2100      	movs	r1, #0
 800697a:	e7ef      	b.n	800695c <_strtod_l+0xa4>
 800697c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800697e:	b13a      	cbz	r2, 8006990 <_strtod_l+0xd8>
 8006980:	2135      	movs	r1, #53	; 0x35
 8006982:	a818      	add	r0, sp, #96	; 0x60
 8006984:	f7ff ff37 	bl	80067f6 <__copybits>
 8006988:	9916      	ldr	r1, [sp, #88]	; 0x58
 800698a:	4620      	mov	r0, r4
 800698c:	f7ff fb0a 	bl	8005fa4 <_Bfree>
 8006990:	3f01      	subs	r7, #1
 8006992:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006994:	2f04      	cmp	r7, #4
 8006996:	d806      	bhi.n	80069a6 <_strtod_l+0xee>
 8006998:	e8df f007 	tbb	[pc, r7]
 800699c:	201d0314 	.word	0x201d0314
 80069a0:	14          	.byte	0x14
 80069a1:	00          	.byte	0x00
 80069a2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80069a6:	05e9      	lsls	r1, r5, #23
 80069a8:	bf48      	it	mi
 80069aa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80069ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069b2:	0d1b      	lsrs	r3, r3, #20
 80069b4:	051b      	lsls	r3, r3, #20
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1b9      	bne.n	800692e <_strtod_l+0x76>
 80069ba:	f7fe fafb 	bl	8004fb4 <__errno>
 80069be:	2322      	movs	r3, #34	; 0x22
 80069c0:	6003      	str	r3, [r0, #0]
 80069c2:	e7b4      	b.n	800692e <_strtod_l+0x76>
 80069c4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80069c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80069cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80069d4:	e7e7      	b.n	80069a6 <_strtod_l+0xee>
 80069d6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006b50 <_strtod_l+0x298>
 80069da:	e7e4      	b.n	80069a6 <_strtod_l+0xee>
 80069dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80069e0:	f04f 38ff 	mov.w	r8, #4294967295
 80069e4:	e7df      	b.n	80069a6 <_strtod_l+0xee>
 80069e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	9215      	str	r2, [sp, #84]	; 0x54
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	2b30      	cmp	r3, #48	; 0x30
 80069f0:	d0f9      	beq.n	80069e6 <_strtod_l+0x12e>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d09b      	beq.n	800692e <_strtod_l+0x76>
 80069f6:	2301      	movs	r3, #1
 80069f8:	f04f 0a00 	mov.w	sl, #0
 80069fc:	9304      	str	r3, [sp, #16]
 80069fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a02:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006a06:	46d3      	mov	fp, sl
 8006a08:	220a      	movs	r2, #10
 8006a0a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006a0c:	7806      	ldrb	r6, [r0, #0]
 8006a0e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006a12:	b2d9      	uxtb	r1, r3
 8006a14:	2909      	cmp	r1, #9
 8006a16:	d926      	bls.n	8006a66 <_strtod_l+0x1ae>
 8006a18:	494c      	ldr	r1, [pc, #304]	; (8006b4c <_strtod_l+0x294>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f001 fb79 	bl	8008112 <strncmp>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d030      	beq.n	8006a86 <_strtod_l+0x1ce>
 8006a24:	2000      	movs	r0, #0
 8006a26:	4632      	mov	r2, r6
 8006a28:	9005      	str	r0, [sp, #20]
 8006a2a:	465e      	mov	r6, fp
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2a65      	cmp	r2, #101	; 0x65
 8006a30:	d001      	beq.n	8006a36 <_strtod_l+0x17e>
 8006a32:	2a45      	cmp	r2, #69	; 0x45
 8006a34:	d113      	bne.n	8006a5e <_strtod_l+0x1a6>
 8006a36:	b91e      	cbnz	r6, 8006a40 <_strtod_l+0x188>
 8006a38:	9a04      	ldr	r2, [sp, #16]
 8006a3a:	4302      	orrs	r2, r0
 8006a3c:	d094      	beq.n	8006968 <_strtod_l+0xb0>
 8006a3e:	2600      	movs	r6, #0
 8006a40:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006a42:	1c6a      	adds	r2, r5, #1
 8006a44:	9215      	str	r2, [sp, #84]	; 0x54
 8006a46:	786a      	ldrb	r2, [r5, #1]
 8006a48:	2a2b      	cmp	r2, #43	; 0x2b
 8006a4a:	d074      	beq.n	8006b36 <_strtod_l+0x27e>
 8006a4c:	2a2d      	cmp	r2, #45	; 0x2d
 8006a4e:	d078      	beq.n	8006b42 <_strtod_l+0x28a>
 8006a50:	f04f 0c00 	mov.w	ip, #0
 8006a54:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006a58:	2909      	cmp	r1, #9
 8006a5a:	d97f      	bls.n	8006b5c <_strtod_l+0x2a4>
 8006a5c:	9515      	str	r5, [sp, #84]	; 0x54
 8006a5e:	2700      	movs	r7, #0
 8006a60:	e09e      	b.n	8006ba0 <_strtod_l+0x2e8>
 8006a62:	2300      	movs	r3, #0
 8006a64:	e7c8      	b.n	80069f8 <_strtod_l+0x140>
 8006a66:	f1bb 0f08 	cmp.w	fp, #8
 8006a6a:	bfd8      	it	le
 8006a6c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006a6e:	f100 0001 	add.w	r0, r0, #1
 8006a72:	bfda      	itte	le
 8006a74:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a78:	9309      	strle	r3, [sp, #36]	; 0x24
 8006a7a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006a7e:	f10b 0b01 	add.w	fp, fp, #1
 8006a82:	9015      	str	r0, [sp, #84]	; 0x54
 8006a84:	e7c1      	b.n	8006a0a <_strtod_l+0x152>
 8006a86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	9215      	str	r2, [sp, #84]	; 0x54
 8006a8c:	785a      	ldrb	r2, [r3, #1]
 8006a8e:	f1bb 0f00 	cmp.w	fp, #0
 8006a92:	d037      	beq.n	8006b04 <_strtod_l+0x24c>
 8006a94:	9005      	str	r0, [sp, #20]
 8006a96:	465e      	mov	r6, fp
 8006a98:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006a9c:	2b09      	cmp	r3, #9
 8006a9e:	d912      	bls.n	8006ac6 <_strtod_l+0x20e>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e7c4      	b.n	8006a2e <_strtod_l+0x176>
 8006aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	9215      	str	r2, [sp, #84]	; 0x54
 8006aaa:	785a      	ldrb	r2, [r3, #1]
 8006aac:	3001      	adds	r0, #1
 8006aae:	2a30      	cmp	r2, #48	; 0x30
 8006ab0:	d0f8      	beq.n	8006aa4 <_strtod_l+0x1ec>
 8006ab2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	f200 84c1 	bhi.w	800743e <_strtod_l+0xb86>
 8006abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006abe:	9005      	str	r0, [sp, #20]
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	3a30      	subs	r2, #48	; 0x30
 8006ac8:	f100 0301 	add.w	r3, r0, #1
 8006acc:	d014      	beq.n	8006af8 <_strtod_l+0x240>
 8006ace:	9905      	ldr	r1, [sp, #20]
 8006ad0:	4419      	add	r1, r3
 8006ad2:	9105      	str	r1, [sp, #20]
 8006ad4:	4633      	mov	r3, r6
 8006ad6:	eb00 0c06 	add.w	ip, r0, r6
 8006ada:	210a      	movs	r1, #10
 8006adc:	4563      	cmp	r3, ip
 8006ade:	d113      	bne.n	8006b08 <_strtod_l+0x250>
 8006ae0:	1833      	adds	r3, r6, r0
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	f106 0601 	add.w	r6, r6, #1
 8006ae8:	4406      	add	r6, r0
 8006aea:	dc1a      	bgt.n	8006b22 <_strtod_l+0x26a>
 8006aec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aee:	230a      	movs	r3, #10
 8006af0:	fb03 2301 	mla	r3, r3, r1, r2
 8006af4:	9309      	str	r3, [sp, #36]	; 0x24
 8006af6:	2300      	movs	r3, #0
 8006af8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006afa:	1c51      	adds	r1, r2, #1
 8006afc:	9115      	str	r1, [sp, #84]	; 0x54
 8006afe:	7852      	ldrb	r2, [r2, #1]
 8006b00:	4618      	mov	r0, r3
 8006b02:	e7c9      	b.n	8006a98 <_strtod_l+0x1e0>
 8006b04:	4658      	mov	r0, fp
 8006b06:	e7d2      	b.n	8006aae <_strtod_l+0x1f6>
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	f103 0301 	add.w	r3, r3, #1
 8006b0e:	dc03      	bgt.n	8006b18 <_strtod_l+0x260>
 8006b10:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b12:	434f      	muls	r7, r1
 8006b14:	9709      	str	r7, [sp, #36]	; 0x24
 8006b16:	e7e1      	b.n	8006adc <_strtod_l+0x224>
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	bfd8      	it	le
 8006b1c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006b20:	e7dc      	b.n	8006adc <_strtod_l+0x224>
 8006b22:	2e10      	cmp	r6, #16
 8006b24:	bfdc      	itt	le
 8006b26:	230a      	movle	r3, #10
 8006b28:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006b2c:	e7e3      	b.n	8006af6 <_strtod_l+0x23e>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	9305      	str	r3, [sp, #20]
 8006b32:	2301      	movs	r3, #1
 8006b34:	e780      	b.n	8006a38 <_strtod_l+0x180>
 8006b36:	f04f 0c00 	mov.w	ip, #0
 8006b3a:	1caa      	adds	r2, r5, #2
 8006b3c:	9215      	str	r2, [sp, #84]	; 0x54
 8006b3e:	78aa      	ldrb	r2, [r5, #2]
 8006b40:	e788      	b.n	8006a54 <_strtod_l+0x19c>
 8006b42:	f04f 0c01 	mov.w	ip, #1
 8006b46:	e7f8      	b.n	8006b3a <_strtod_l+0x282>
 8006b48:	08009260 	.word	0x08009260
 8006b4c:	0800925c 	.word	0x0800925c
 8006b50:	7ff00000 	.word	0x7ff00000
 8006b54:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b56:	1c51      	adds	r1, r2, #1
 8006b58:	9115      	str	r1, [sp, #84]	; 0x54
 8006b5a:	7852      	ldrb	r2, [r2, #1]
 8006b5c:	2a30      	cmp	r2, #48	; 0x30
 8006b5e:	d0f9      	beq.n	8006b54 <_strtod_l+0x29c>
 8006b60:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006b64:	2908      	cmp	r1, #8
 8006b66:	f63f af7a 	bhi.w	8006a5e <_strtod_l+0x1a6>
 8006b6a:	3a30      	subs	r2, #48	; 0x30
 8006b6c:	9208      	str	r2, [sp, #32]
 8006b6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b70:	920c      	str	r2, [sp, #48]	; 0x30
 8006b72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b74:	1c57      	adds	r7, r2, #1
 8006b76:	9715      	str	r7, [sp, #84]	; 0x54
 8006b78:	7852      	ldrb	r2, [r2, #1]
 8006b7a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006b7e:	f1be 0f09 	cmp.w	lr, #9
 8006b82:	d938      	bls.n	8006bf6 <_strtod_l+0x33e>
 8006b84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b86:	1a7f      	subs	r7, r7, r1
 8006b88:	2f08      	cmp	r7, #8
 8006b8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006b8e:	dc03      	bgt.n	8006b98 <_strtod_l+0x2e0>
 8006b90:	9908      	ldr	r1, [sp, #32]
 8006b92:	428f      	cmp	r7, r1
 8006b94:	bfa8      	it	ge
 8006b96:	460f      	movge	r7, r1
 8006b98:	f1bc 0f00 	cmp.w	ip, #0
 8006b9c:	d000      	beq.n	8006ba0 <_strtod_l+0x2e8>
 8006b9e:	427f      	negs	r7, r7
 8006ba0:	2e00      	cmp	r6, #0
 8006ba2:	d14f      	bne.n	8006c44 <_strtod_l+0x38c>
 8006ba4:	9904      	ldr	r1, [sp, #16]
 8006ba6:	4301      	orrs	r1, r0
 8006ba8:	f47f aec1 	bne.w	800692e <_strtod_l+0x76>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f47f aedb 	bne.w	8006968 <_strtod_l+0xb0>
 8006bb2:	2a69      	cmp	r2, #105	; 0x69
 8006bb4:	d029      	beq.n	8006c0a <_strtod_l+0x352>
 8006bb6:	dc26      	bgt.n	8006c06 <_strtod_l+0x34e>
 8006bb8:	2a49      	cmp	r2, #73	; 0x49
 8006bba:	d026      	beq.n	8006c0a <_strtod_l+0x352>
 8006bbc:	2a4e      	cmp	r2, #78	; 0x4e
 8006bbe:	f47f aed3 	bne.w	8006968 <_strtod_l+0xb0>
 8006bc2:	499b      	ldr	r1, [pc, #620]	; (8006e30 <_strtod_l+0x578>)
 8006bc4:	a815      	add	r0, sp, #84	; 0x54
 8006bc6:	f001 fdbb 	bl	8008740 <__match>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	f43f aecc 	beq.w	8006968 <_strtod_l+0xb0>
 8006bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b28      	cmp	r3, #40	; 0x28
 8006bd6:	d12f      	bne.n	8006c38 <_strtod_l+0x380>
 8006bd8:	4996      	ldr	r1, [pc, #600]	; (8006e34 <_strtod_l+0x57c>)
 8006bda:	aa18      	add	r2, sp, #96	; 0x60
 8006bdc:	a815      	add	r0, sp, #84	; 0x54
 8006bde:	f001 fdc3 	bl	8008768 <__hexnan>
 8006be2:	2805      	cmp	r0, #5
 8006be4:	d128      	bne.n	8006c38 <_strtod_l+0x380>
 8006be6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006be8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006bec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006bf0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006bf4:	e69b      	b.n	800692e <_strtod_l+0x76>
 8006bf6:	9f08      	ldr	r7, [sp, #32]
 8006bf8:	210a      	movs	r1, #10
 8006bfa:	fb01 2107 	mla	r1, r1, r7, r2
 8006bfe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006c02:	9208      	str	r2, [sp, #32]
 8006c04:	e7b5      	b.n	8006b72 <_strtod_l+0x2ba>
 8006c06:	2a6e      	cmp	r2, #110	; 0x6e
 8006c08:	e7d9      	b.n	8006bbe <_strtod_l+0x306>
 8006c0a:	498b      	ldr	r1, [pc, #556]	; (8006e38 <_strtod_l+0x580>)
 8006c0c:	a815      	add	r0, sp, #84	; 0x54
 8006c0e:	f001 fd97 	bl	8008740 <__match>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	f43f aea8 	beq.w	8006968 <_strtod_l+0xb0>
 8006c18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c1a:	4988      	ldr	r1, [pc, #544]	; (8006e3c <_strtod_l+0x584>)
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	a815      	add	r0, sp, #84	; 0x54
 8006c20:	9315      	str	r3, [sp, #84]	; 0x54
 8006c22:	f001 fd8d 	bl	8008740 <__match>
 8006c26:	b910      	cbnz	r0, 8006c2e <_strtod_l+0x376>
 8006c28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	9315      	str	r3, [sp, #84]	; 0x54
 8006c2e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006e4c <_strtod_l+0x594>
 8006c32:	f04f 0800 	mov.w	r8, #0
 8006c36:	e67a      	b.n	800692e <_strtod_l+0x76>
 8006c38:	4881      	ldr	r0, [pc, #516]	; (8006e40 <_strtod_l+0x588>)
 8006c3a:	f001 fa9d 	bl	8008178 <nan>
 8006c3e:	ec59 8b10 	vmov	r8, r9, d0
 8006c42:	e674      	b.n	800692e <_strtod_l+0x76>
 8006c44:	9b05      	ldr	r3, [sp, #20]
 8006c46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c48:	1afb      	subs	r3, r7, r3
 8006c4a:	f1bb 0f00 	cmp.w	fp, #0
 8006c4e:	bf08      	it	eq
 8006c50:	46b3      	moveq	fp, r6
 8006c52:	2e10      	cmp	r6, #16
 8006c54:	9308      	str	r3, [sp, #32]
 8006c56:	4635      	mov	r5, r6
 8006c58:	bfa8      	it	ge
 8006c5a:	2510      	movge	r5, #16
 8006c5c:	f7f9 fc72 	bl	8000544 <__aeabi_ui2d>
 8006c60:	2e09      	cmp	r6, #9
 8006c62:	4680      	mov	r8, r0
 8006c64:	4689      	mov	r9, r1
 8006c66:	dd13      	ble.n	8006c90 <_strtod_l+0x3d8>
 8006c68:	4b76      	ldr	r3, [pc, #472]	; (8006e44 <_strtod_l+0x58c>)
 8006c6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006c6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c72:	f7f9 fce1 	bl	8000638 <__aeabi_dmul>
 8006c76:	4680      	mov	r8, r0
 8006c78:	4650      	mov	r0, sl
 8006c7a:	4689      	mov	r9, r1
 8006c7c:	f7f9 fc62 	bl	8000544 <__aeabi_ui2d>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4640      	mov	r0, r8
 8006c86:	4649      	mov	r1, r9
 8006c88:	f7f9 fb20 	bl	80002cc <__adddf3>
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	4689      	mov	r9, r1
 8006c90:	2e0f      	cmp	r6, #15
 8006c92:	dc38      	bgt.n	8006d06 <_strtod_l+0x44e>
 8006c94:	9b08      	ldr	r3, [sp, #32]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f43f ae49 	beq.w	800692e <_strtod_l+0x76>
 8006c9c:	dd24      	ble.n	8006ce8 <_strtod_l+0x430>
 8006c9e:	2b16      	cmp	r3, #22
 8006ca0:	dc0b      	bgt.n	8006cba <_strtod_l+0x402>
 8006ca2:	4968      	ldr	r1, [pc, #416]	; (8006e44 <_strtod_l+0x58c>)
 8006ca4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cac:	4642      	mov	r2, r8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	f7f9 fcc2 	bl	8000638 <__aeabi_dmul>
 8006cb4:	4680      	mov	r8, r0
 8006cb6:	4689      	mov	r9, r1
 8006cb8:	e639      	b.n	800692e <_strtod_l+0x76>
 8006cba:	9a08      	ldr	r2, [sp, #32]
 8006cbc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	db20      	blt.n	8006d06 <_strtod_l+0x44e>
 8006cc4:	4c5f      	ldr	r4, [pc, #380]	; (8006e44 <_strtod_l+0x58c>)
 8006cc6:	f1c6 060f 	rsb	r6, r6, #15
 8006cca:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006cce:	4642      	mov	r2, r8
 8006cd0:	464b      	mov	r3, r9
 8006cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd6:	f7f9 fcaf 	bl	8000638 <__aeabi_dmul>
 8006cda:	9b08      	ldr	r3, [sp, #32]
 8006cdc:	1b9e      	subs	r6, r3, r6
 8006cde:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006ce2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ce6:	e7e3      	b.n	8006cb0 <_strtod_l+0x3f8>
 8006ce8:	9b08      	ldr	r3, [sp, #32]
 8006cea:	3316      	adds	r3, #22
 8006cec:	db0b      	blt.n	8006d06 <_strtod_l+0x44e>
 8006cee:	9b05      	ldr	r3, [sp, #20]
 8006cf0:	1bdf      	subs	r7, r3, r7
 8006cf2:	4b54      	ldr	r3, [pc, #336]	; (8006e44 <_strtod_l+0x58c>)
 8006cf4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	4649      	mov	r1, r9
 8006d00:	f7f9 fdc4 	bl	800088c <__aeabi_ddiv>
 8006d04:	e7d6      	b.n	8006cb4 <_strtod_l+0x3fc>
 8006d06:	9b08      	ldr	r3, [sp, #32]
 8006d08:	1b75      	subs	r5, r6, r5
 8006d0a:	441d      	add	r5, r3
 8006d0c:	2d00      	cmp	r5, #0
 8006d0e:	dd70      	ble.n	8006df2 <_strtod_l+0x53a>
 8006d10:	f015 030f 	ands.w	r3, r5, #15
 8006d14:	d00a      	beq.n	8006d2c <_strtod_l+0x474>
 8006d16:	494b      	ldr	r1, [pc, #300]	; (8006e44 <_strtod_l+0x58c>)
 8006d18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d1c:	4642      	mov	r2, r8
 8006d1e:	464b      	mov	r3, r9
 8006d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d24:	f7f9 fc88 	bl	8000638 <__aeabi_dmul>
 8006d28:	4680      	mov	r8, r0
 8006d2a:	4689      	mov	r9, r1
 8006d2c:	f035 050f 	bics.w	r5, r5, #15
 8006d30:	d04d      	beq.n	8006dce <_strtod_l+0x516>
 8006d32:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006d36:	dd22      	ble.n	8006d7e <_strtod_l+0x4c6>
 8006d38:	2500      	movs	r5, #0
 8006d3a:	46ab      	mov	fp, r5
 8006d3c:	9509      	str	r5, [sp, #36]	; 0x24
 8006d3e:	9505      	str	r5, [sp, #20]
 8006d40:	2322      	movs	r3, #34	; 0x22
 8006d42:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006e4c <_strtod_l+0x594>
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	f04f 0800 	mov.w	r8, #0
 8006d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f43f aded 	beq.w	800692e <_strtod_l+0x76>
 8006d54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006d56:	4620      	mov	r0, r4
 8006d58:	f7ff f924 	bl	8005fa4 <_Bfree>
 8006d5c:	9905      	ldr	r1, [sp, #20]
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f7ff f920 	bl	8005fa4 <_Bfree>
 8006d64:	4659      	mov	r1, fp
 8006d66:	4620      	mov	r0, r4
 8006d68:	f7ff f91c 	bl	8005fa4 <_Bfree>
 8006d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f7ff f918 	bl	8005fa4 <_Bfree>
 8006d74:	4629      	mov	r1, r5
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7ff f914 	bl	8005fa4 <_Bfree>
 8006d7c:	e5d7      	b.n	800692e <_strtod_l+0x76>
 8006d7e:	4b32      	ldr	r3, [pc, #200]	; (8006e48 <_strtod_l+0x590>)
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	2300      	movs	r3, #0
 8006d84:	112d      	asrs	r5, r5, #4
 8006d86:	4640      	mov	r0, r8
 8006d88:	4649      	mov	r1, r9
 8006d8a:	469a      	mov	sl, r3
 8006d8c:	2d01      	cmp	r5, #1
 8006d8e:	dc21      	bgt.n	8006dd4 <_strtod_l+0x51c>
 8006d90:	b10b      	cbz	r3, 8006d96 <_strtod_l+0x4de>
 8006d92:	4680      	mov	r8, r0
 8006d94:	4689      	mov	r9, r1
 8006d96:	492c      	ldr	r1, [pc, #176]	; (8006e48 <_strtod_l+0x590>)
 8006d98:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006d9c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006da0:	4642      	mov	r2, r8
 8006da2:	464b      	mov	r3, r9
 8006da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006da8:	f7f9 fc46 	bl	8000638 <__aeabi_dmul>
 8006dac:	4b27      	ldr	r3, [pc, #156]	; (8006e4c <_strtod_l+0x594>)
 8006dae:	460a      	mov	r2, r1
 8006db0:	400b      	ands	r3, r1
 8006db2:	4927      	ldr	r1, [pc, #156]	; (8006e50 <_strtod_l+0x598>)
 8006db4:	428b      	cmp	r3, r1
 8006db6:	4680      	mov	r8, r0
 8006db8:	d8be      	bhi.n	8006d38 <_strtod_l+0x480>
 8006dba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006dbe:	428b      	cmp	r3, r1
 8006dc0:	bf86      	itte	hi
 8006dc2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006e54 <_strtod_l+0x59c>
 8006dc6:	f04f 38ff 	movhi.w	r8, #4294967295
 8006dca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9304      	str	r3, [sp, #16]
 8006dd2:	e07b      	b.n	8006ecc <_strtod_l+0x614>
 8006dd4:	07ea      	lsls	r2, r5, #31
 8006dd6:	d505      	bpl.n	8006de4 <_strtod_l+0x52c>
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f7f9 fc2b 	bl	8000638 <__aeabi_dmul>
 8006de2:	2301      	movs	r3, #1
 8006de4:	9a04      	ldr	r2, [sp, #16]
 8006de6:	3208      	adds	r2, #8
 8006de8:	f10a 0a01 	add.w	sl, sl, #1
 8006dec:	106d      	asrs	r5, r5, #1
 8006dee:	9204      	str	r2, [sp, #16]
 8006df0:	e7cc      	b.n	8006d8c <_strtod_l+0x4d4>
 8006df2:	d0ec      	beq.n	8006dce <_strtod_l+0x516>
 8006df4:	426d      	negs	r5, r5
 8006df6:	f015 020f 	ands.w	r2, r5, #15
 8006dfa:	d00a      	beq.n	8006e12 <_strtod_l+0x55a>
 8006dfc:	4b11      	ldr	r3, [pc, #68]	; (8006e44 <_strtod_l+0x58c>)
 8006dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e02:	4640      	mov	r0, r8
 8006e04:	4649      	mov	r1, r9
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	f7f9 fd3f 	bl	800088c <__aeabi_ddiv>
 8006e0e:	4680      	mov	r8, r0
 8006e10:	4689      	mov	r9, r1
 8006e12:	112d      	asrs	r5, r5, #4
 8006e14:	d0db      	beq.n	8006dce <_strtod_l+0x516>
 8006e16:	2d1f      	cmp	r5, #31
 8006e18:	dd1e      	ble.n	8006e58 <_strtod_l+0x5a0>
 8006e1a:	2500      	movs	r5, #0
 8006e1c:	46ab      	mov	fp, r5
 8006e1e:	9509      	str	r5, [sp, #36]	; 0x24
 8006e20:	9505      	str	r5, [sp, #20]
 8006e22:	2322      	movs	r3, #34	; 0x22
 8006e24:	f04f 0800 	mov.w	r8, #0
 8006e28:	f04f 0900 	mov.w	r9, #0
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	e78d      	b.n	8006d4c <_strtod_l+0x494>
 8006e30:	0800904d 	.word	0x0800904d
 8006e34:	08009274 	.word	0x08009274
 8006e38:	08009045 	.word	0x08009045
 8006e3c:	0800907a 	.word	0x0800907a
 8006e40:	08009420 	.word	0x08009420
 8006e44:	08009188 	.word	0x08009188
 8006e48:	08009160 	.word	0x08009160
 8006e4c:	7ff00000 	.word	0x7ff00000
 8006e50:	7ca00000 	.word	0x7ca00000
 8006e54:	7fefffff 	.word	0x7fefffff
 8006e58:	f015 0310 	ands.w	r3, r5, #16
 8006e5c:	bf18      	it	ne
 8006e5e:	236a      	movne	r3, #106	; 0x6a
 8006e60:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007204 <_strtod_l+0x94c>
 8006e64:	9304      	str	r3, [sp, #16]
 8006e66:	4640      	mov	r0, r8
 8006e68:	4649      	mov	r1, r9
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	07ea      	lsls	r2, r5, #31
 8006e6e:	d504      	bpl.n	8006e7a <_strtod_l+0x5c2>
 8006e70:	e9da 2300 	ldrd	r2, r3, [sl]
 8006e74:	f7f9 fbe0 	bl	8000638 <__aeabi_dmul>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	106d      	asrs	r5, r5, #1
 8006e7c:	f10a 0a08 	add.w	sl, sl, #8
 8006e80:	d1f4      	bne.n	8006e6c <_strtod_l+0x5b4>
 8006e82:	b10b      	cbz	r3, 8006e88 <_strtod_l+0x5d0>
 8006e84:	4680      	mov	r8, r0
 8006e86:	4689      	mov	r9, r1
 8006e88:	9b04      	ldr	r3, [sp, #16]
 8006e8a:	b1bb      	cbz	r3, 8006ebc <_strtod_l+0x604>
 8006e8c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006e90:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	4649      	mov	r1, r9
 8006e98:	dd10      	ble.n	8006ebc <_strtod_l+0x604>
 8006e9a:	2b1f      	cmp	r3, #31
 8006e9c:	f340 811e 	ble.w	80070dc <_strtod_l+0x824>
 8006ea0:	2b34      	cmp	r3, #52	; 0x34
 8006ea2:	bfde      	ittt	le
 8006ea4:	f04f 33ff 	movle.w	r3, #4294967295
 8006ea8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006eac:	4093      	lslle	r3, r2
 8006eae:	f04f 0800 	mov.w	r8, #0
 8006eb2:	bfcc      	ite	gt
 8006eb4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006eb8:	ea03 0901 	andle.w	r9, r3, r1
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	f7f9 fe20 	bl	8000b08 <__aeabi_dcmpeq>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d1a6      	bne.n	8006e1a <_strtod_l+0x562>
 8006ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ed2:	4633      	mov	r3, r6
 8006ed4:	465a      	mov	r2, fp
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f7ff f8cc 	bl	8006074 <__s2b>
 8006edc:	9009      	str	r0, [sp, #36]	; 0x24
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	f43f af2a 	beq.w	8006d38 <_strtod_l+0x480>
 8006ee4:	9a08      	ldr	r2, [sp, #32]
 8006ee6:	9b05      	ldr	r3, [sp, #20]
 8006ee8:	2a00      	cmp	r2, #0
 8006eea:	eba3 0307 	sub.w	r3, r3, r7
 8006eee:	bfa8      	it	ge
 8006ef0:	2300      	movge	r3, #0
 8006ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ef4:	2500      	movs	r5, #0
 8006ef6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006efa:	9312      	str	r3, [sp, #72]	; 0x48
 8006efc:	46ab      	mov	fp, r5
 8006efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f00:	4620      	mov	r0, r4
 8006f02:	6859      	ldr	r1, [r3, #4]
 8006f04:	f7ff f80e 	bl	8005f24 <_Balloc>
 8006f08:	9005      	str	r0, [sp, #20]
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	f43f af18 	beq.w	8006d40 <_strtod_l+0x488>
 8006f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f12:	691a      	ldr	r2, [r3, #16]
 8006f14:	3202      	adds	r2, #2
 8006f16:	f103 010c 	add.w	r1, r3, #12
 8006f1a:	0092      	lsls	r2, r2, #2
 8006f1c:	300c      	adds	r0, #12
 8006f1e:	f001 f91b 	bl	8008158 <memcpy>
 8006f22:	ec49 8b10 	vmov	d0, r8, r9
 8006f26:	aa18      	add	r2, sp, #96	; 0x60
 8006f28:	a917      	add	r1, sp, #92	; 0x5c
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f7ff fbd6 	bl	80066dc <__d2b>
 8006f30:	ec49 8b18 	vmov	d8, r8, r9
 8006f34:	9016      	str	r0, [sp, #88]	; 0x58
 8006f36:	2800      	cmp	r0, #0
 8006f38:	f43f af02 	beq.w	8006d40 <_strtod_l+0x488>
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f7ff f930 	bl	80061a4 <__i2b>
 8006f44:	4683      	mov	fp, r0
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f43f aefa 	beq.w	8006d40 <_strtod_l+0x488>
 8006f4c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006f4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	bfab      	itete	ge
 8006f54:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006f56:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006f58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006f5a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006f5e:	bfac      	ite	ge
 8006f60:	eb06 0a03 	addge.w	sl, r6, r3
 8006f64:	1b9f      	sublt	r7, r3, r6
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	1af6      	subs	r6, r6, r3
 8006f6a:	4416      	add	r6, r2
 8006f6c:	4ba0      	ldr	r3, [pc, #640]	; (80071f0 <_strtod_l+0x938>)
 8006f6e:	3e01      	subs	r6, #1
 8006f70:	429e      	cmp	r6, r3
 8006f72:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f76:	f280 80c4 	bge.w	8007102 <_strtod_l+0x84a>
 8006f7a:	1b9b      	subs	r3, r3, r6
 8006f7c:	2b1f      	cmp	r3, #31
 8006f7e:	eba2 0203 	sub.w	r2, r2, r3
 8006f82:	f04f 0101 	mov.w	r1, #1
 8006f86:	f300 80b0 	bgt.w	80070ea <_strtod_l+0x832>
 8006f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8e:	930e      	str	r3, [sp, #56]	; 0x38
 8006f90:	2300      	movs	r3, #0
 8006f92:	930d      	str	r3, [sp, #52]	; 0x34
 8006f94:	eb0a 0602 	add.w	r6, sl, r2
 8006f98:	9b04      	ldr	r3, [sp, #16]
 8006f9a:	45b2      	cmp	sl, r6
 8006f9c:	4417      	add	r7, r2
 8006f9e:	441f      	add	r7, r3
 8006fa0:	4653      	mov	r3, sl
 8006fa2:	bfa8      	it	ge
 8006fa4:	4633      	movge	r3, r6
 8006fa6:	42bb      	cmp	r3, r7
 8006fa8:	bfa8      	it	ge
 8006faa:	463b      	movge	r3, r7
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bfc2      	ittt	gt
 8006fb0:	1af6      	subgt	r6, r6, r3
 8006fb2:	1aff      	subgt	r7, r7, r3
 8006fb4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	dd17      	ble.n	8006fee <_strtod_l+0x736>
 8006fbe:	4659      	mov	r1, fp
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f7ff f9ae 	bl	8006324 <__pow5mult>
 8006fc8:	4683      	mov	fp, r0
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	f43f aeb8 	beq.w	8006d40 <_strtod_l+0x488>
 8006fd0:	4601      	mov	r1, r0
 8006fd2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f7ff f8fb 	bl	80061d0 <__multiply>
 8006fda:	900b      	str	r0, [sp, #44]	; 0x2c
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f43f aeaf 	beq.w	8006d40 <_strtod_l+0x488>
 8006fe2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f7fe ffdd 	bl	8005fa4 <_Bfree>
 8006fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fec:	9316      	str	r3, [sp, #88]	; 0x58
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	f300 808c 	bgt.w	800710c <_strtod_l+0x854>
 8006ff4:	9b08      	ldr	r3, [sp, #32]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	dd08      	ble.n	800700c <_strtod_l+0x754>
 8006ffa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ffc:	9905      	ldr	r1, [sp, #20]
 8006ffe:	4620      	mov	r0, r4
 8007000:	f7ff f990 	bl	8006324 <__pow5mult>
 8007004:	9005      	str	r0, [sp, #20]
 8007006:	2800      	cmp	r0, #0
 8007008:	f43f ae9a 	beq.w	8006d40 <_strtod_l+0x488>
 800700c:	2f00      	cmp	r7, #0
 800700e:	dd08      	ble.n	8007022 <_strtod_l+0x76a>
 8007010:	9905      	ldr	r1, [sp, #20]
 8007012:	463a      	mov	r2, r7
 8007014:	4620      	mov	r0, r4
 8007016:	f7ff f9df 	bl	80063d8 <__lshift>
 800701a:	9005      	str	r0, [sp, #20]
 800701c:	2800      	cmp	r0, #0
 800701e:	f43f ae8f 	beq.w	8006d40 <_strtod_l+0x488>
 8007022:	f1ba 0f00 	cmp.w	sl, #0
 8007026:	dd08      	ble.n	800703a <_strtod_l+0x782>
 8007028:	4659      	mov	r1, fp
 800702a:	4652      	mov	r2, sl
 800702c:	4620      	mov	r0, r4
 800702e:	f7ff f9d3 	bl	80063d8 <__lshift>
 8007032:	4683      	mov	fp, r0
 8007034:	2800      	cmp	r0, #0
 8007036:	f43f ae83 	beq.w	8006d40 <_strtod_l+0x488>
 800703a:	9a05      	ldr	r2, [sp, #20]
 800703c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800703e:	4620      	mov	r0, r4
 8007040:	f7ff fa52 	bl	80064e8 <__mdiff>
 8007044:	4605      	mov	r5, r0
 8007046:	2800      	cmp	r0, #0
 8007048:	f43f ae7a 	beq.w	8006d40 <_strtod_l+0x488>
 800704c:	68c3      	ldr	r3, [r0, #12]
 800704e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007050:	2300      	movs	r3, #0
 8007052:	60c3      	str	r3, [r0, #12]
 8007054:	4659      	mov	r1, fp
 8007056:	f7ff fa2b 	bl	80064b0 <__mcmp>
 800705a:	2800      	cmp	r0, #0
 800705c:	da60      	bge.n	8007120 <_strtod_l+0x868>
 800705e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007060:	ea53 0308 	orrs.w	r3, r3, r8
 8007064:	f040 8084 	bne.w	8007170 <_strtod_l+0x8b8>
 8007068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800706c:	2b00      	cmp	r3, #0
 800706e:	d17f      	bne.n	8007170 <_strtod_l+0x8b8>
 8007070:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007074:	0d1b      	lsrs	r3, r3, #20
 8007076:	051b      	lsls	r3, r3, #20
 8007078:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800707c:	d978      	bls.n	8007170 <_strtod_l+0x8b8>
 800707e:	696b      	ldr	r3, [r5, #20]
 8007080:	b913      	cbnz	r3, 8007088 <_strtod_l+0x7d0>
 8007082:	692b      	ldr	r3, [r5, #16]
 8007084:	2b01      	cmp	r3, #1
 8007086:	dd73      	ble.n	8007170 <_strtod_l+0x8b8>
 8007088:	4629      	mov	r1, r5
 800708a:	2201      	movs	r2, #1
 800708c:	4620      	mov	r0, r4
 800708e:	f7ff f9a3 	bl	80063d8 <__lshift>
 8007092:	4659      	mov	r1, fp
 8007094:	4605      	mov	r5, r0
 8007096:	f7ff fa0b 	bl	80064b0 <__mcmp>
 800709a:	2800      	cmp	r0, #0
 800709c:	dd68      	ble.n	8007170 <_strtod_l+0x8b8>
 800709e:	9904      	ldr	r1, [sp, #16]
 80070a0:	4a54      	ldr	r2, [pc, #336]	; (80071f4 <_strtod_l+0x93c>)
 80070a2:	464b      	mov	r3, r9
 80070a4:	2900      	cmp	r1, #0
 80070a6:	f000 8084 	beq.w	80071b2 <_strtod_l+0x8fa>
 80070aa:	ea02 0109 	and.w	r1, r2, r9
 80070ae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070b2:	dc7e      	bgt.n	80071b2 <_strtod_l+0x8fa>
 80070b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070b8:	f77f aeb3 	ble.w	8006e22 <_strtod_l+0x56a>
 80070bc:	4b4e      	ldr	r3, [pc, #312]	; (80071f8 <_strtod_l+0x940>)
 80070be:	4640      	mov	r0, r8
 80070c0:	4649      	mov	r1, r9
 80070c2:	2200      	movs	r2, #0
 80070c4:	f7f9 fab8 	bl	8000638 <__aeabi_dmul>
 80070c8:	4b4a      	ldr	r3, [pc, #296]	; (80071f4 <_strtod_l+0x93c>)
 80070ca:	400b      	ands	r3, r1
 80070cc:	4680      	mov	r8, r0
 80070ce:	4689      	mov	r9, r1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f47f ae3f 	bne.w	8006d54 <_strtod_l+0x49c>
 80070d6:	2322      	movs	r3, #34	; 0x22
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	e63b      	b.n	8006d54 <_strtod_l+0x49c>
 80070dc:	f04f 32ff 	mov.w	r2, #4294967295
 80070e0:	fa02 f303 	lsl.w	r3, r2, r3
 80070e4:	ea03 0808 	and.w	r8, r3, r8
 80070e8:	e6e8      	b.n	8006ebc <_strtod_l+0x604>
 80070ea:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80070ee:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80070f2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80070f6:	36e2      	adds	r6, #226	; 0xe2
 80070f8:	fa01 f306 	lsl.w	r3, r1, r6
 80070fc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007100:	e748      	b.n	8006f94 <_strtod_l+0x6dc>
 8007102:	2100      	movs	r1, #0
 8007104:	2301      	movs	r3, #1
 8007106:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800710a:	e743      	b.n	8006f94 <_strtod_l+0x6dc>
 800710c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800710e:	4632      	mov	r2, r6
 8007110:	4620      	mov	r0, r4
 8007112:	f7ff f961 	bl	80063d8 <__lshift>
 8007116:	9016      	str	r0, [sp, #88]	; 0x58
 8007118:	2800      	cmp	r0, #0
 800711a:	f47f af6b 	bne.w	8006ff4 <_strtod_l+0x73c>
 800711e:	e60f      	b.n	8006d40 <_strtod_l+0x488>
 8007120:	46ca      	mov	sl, r9
 8007122:	d171      	bne.n	8007208 <_strtod_l+0x950>
 8007124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007126:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800712a:	b352      	cbz	r2, 8007182 <_strtod_l+0x8ca>
 800712c:	4a33      	ldr	r2, [pc, #204]	; (80071fc <_strtod_l+0x944>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d12a      	bne.n	8007188 <_strtod_l+0x8d0>
 8007132:	9b04      	ldr	r3, [sp, #16]
 8007134:	4641      	mov	r1, r8
 8007136:	b1fb      	cbz	r3, 8007178 <_strtod_l+0x8c0>
 8007138:	4b2e      	ldr	r3, [pc, #184]	; (80071f4 <_strtod_l+0x93c>)
 800713a:	ea09 0303 	and.w	r3, r9, r3
 800713e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007142:	f04f 32ff 	mov.w	r2, #4294967295
 8007146:	d81a      	bhi.n	800717e <_strtod_l+0x8c6>
 8007148:	0d1b      	lsrs	r3, r3, #20
 800714a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	4299      	cmp	r1, r3
 8007154:	d118      	bne.n	8007188 <_strtod_l+0x8d0>
 8007156:	4b2a      	ldr	r3, [pc, #168]	; (8007200 <_strtod_l+0x948>)
 8007158:	459a      	cmp	sl, r3
 800715a:	d102      	bne.n	8007162 <_strtod_l+0x8aa>
 800715c:	3101      	adds	r1, #1
 800715e:	f43f adef 	beq.w	8006d40 <_strtod_l+0x488>
 8007162:	4b24      	ldr	r3, [pc, #144]	; (80071f4 <_strtod_l+0x93c>)
 8007164:	ea0a 0303 	and.w	r3, sl, r3
 8007168:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800716c:	f04f 0800 	mov.w	r8, #0
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1a2      	bne.n	80070bc <_strtod_l+0x804>
 8007176:	e5ed      	b.n	8006d54 <_strtod_l+0x49c>
 8007178:	f04f 33ff 	mov.w	r3, #4294967295
 800717c:	e7e9      	b.n	8007152 <_strtod_l+0x89a>
 800717e:	4613      	mov	r3, r2
 8007180:	e7e7      	b.n	8007152 <_strtod_l+0x89a>
 8007182:	ea53 0308 	orrs.w	r3, r3, r8
 8007186:	d08a      	beq.n	800709e <_strtod_l+0x7e6>
 8007188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800718a:	b1e3      	cbz	r3, 80071c6 <_strtod_l+0x90e>
 800718c:	ea13 0f0a 	tst.w	r3, sl
 8007190:	d0ee      	beq.n	8007170 <_strtod_l+0x8b8>
 8007192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007194:	9a04      	ldr	r2, [sp, #16]
 8007196:	4640      	mov	r0, r8
 8007198:	4649      	mov	r1, r9
 800719a:	b1c3      	cbz	r3, 80071ce <_strtod_l+0x916>
 800719c:	f7ff fb6f 	bl	800687e <sulp>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	ec51 0b18 	vmov	r0, r1, d8
 80071a8:	f7f9 f890 	bl	80002cc <__adddf3>
 80071ac:	4680      	mov	r8, r0
 80071ae:	4689      	mov	r9, r1
 80071b0:	e7de      	b.n	8007170 <_strtod_l+0x8b8>
 80071b2:	4013      	ands	r3, r2
 80071b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80071b8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80071bc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80071c0:	f04f 38ff 	mov.w	r8, #4294967295
 80071c4:	e7d4      	b.n	8007170 <_strtod_l+0x8b8>
 80071c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071c8:	ea13 0f08 	tst.w	r3, r8
 80071cc:	e7e0      	b.n	8007190 <_strtod_l+0x8d8>
 80071ce:	f7ff fb56 	bl	800687e <sulp>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	ec51 0b18 	vmov	r0, r1, d8
 80071da:	f7f9 f875 	bl	80002c8 <__aeabi_dsub>
 80071de:	2200      	movs	r2, #0
 80071e0:	2300      	movs	r3, #0
 80071e2:	4680      	mov	r8, r0
 80071e4:	4689      	mov	r9, r1
 80071e6:	f7f9 fc8f 	bl	8000b08 <__aeabi_dcmpeq>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d0c0      	beq.n	8007170 <_strtod_l+0x8b8>
 80071ee:	e618      	b.n	8006e22 <_strtod_l+0x56a>
 80071f0:	fffffc02 	.word	0xfffffc02
 80071f4:	7ff00000 	.word	0x7ff00000
 80071f8:	39500000 	.word	0x39500000
 80071fc:	000fffff 	.word	0x000fffff
 8007200:	7fefffff 	.word	0x7fefffff
 8007204:	08009288 	.word	0x08009288
 8007208:	4659      	mov	r1, fp
 800720a:	4628      	mov	r0, r5
 800720c:	f7ff fac0 	bl	8006790 <__ratio>
 8007210:	ec57 6b10 	vmov	r6, r7, d0
 8007214:	ee10 0a10 	vmov	r0, s0
 8007218:	2200      	movs	r2, #0
 800721a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800721e:	4639      	mov	r1, r7
 8007220:	f7f9 fc86 	bl	8000b30 <__aeabi_dcmple>
 8007224:	2800      	cmp	r0, #0
 8007226:	d071      	beq.n	800730c <_strtod_l+0xa54>
 8007228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800722a:	2b00      	cmp	r3, #0
 800722c:	d17c      	bne.n	8007328 <_strtod_l+0xa70>
 800722e:	f1b8 0f00 	cmp.w	r8, #0
 8007232:	d15a      	bne.n	80072ea <_strtod_l+0xa32>
 8007234:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007238:	2b00      	cmp	r3, #0
 800723a:	d15d      	bne.n	80072f8 <_strtod_l+0xa40>
 800723c:	4b90      	ldr	r3, [pc, #576]	; (8007480 <_strtod_l+0xbc8>)
 800723e:	2200      	movs	r2, #0
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 fc6a 	bl	8000b1c <__aeabi_dcmplt>
 8007248:	2800      	cmp	r0, #0
 800724a:	d15c      	bne.n	8007306 <_strtod_l+0xa4e>
 800724c:	4630      	mov	r0, r6
 800724e:	4639      	mov	r1, r7
 8007250:	4b8c      	ldr	r3, [pc, #560]	; (8007484 <_strtod_l+0xbcc>)
 8007252:	2200      	movs	r2, #0
 8007254:	f7f9 f9f0 	bl	8000638 <__aeabi_dmul>
 8007258:	4606      	mov	r6, r0
 800725a:	460f      	mov	r7, r1
 800725c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007260:	9606      	str	r6, [sp, #24]
 8007262:	9307      	str	r3, [sp, #28]
 8007264:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007268:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800726c:	4b86      	ldr	r3, [pc, #536]	; (8007488 <_strtod_l+0xbd0>)
 800726e:	ea0a 0303 	and.w	r3, sl, r3
 8007272:	930d      	str	r3, [sp, #52]	; 0x34
 8007274:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007276:	4b85      	ldr	r3, [pc, #532]	; (800748c <_strtod_l+0xbd4>)
 8007278:	429a      	cmp	r2, r3
 800727a:	f040 8090 	bne.w	800739e <_strtod_l+0xae6>
 800727e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007282:	ec49 8b10 	vmov	d0, r8, r9
 8007286:	f7ff f9b9 	bl	80065fc <__ulp>
 800728a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800728e:	ec51 0b10 	vmov	r0, r1, d0
 8007292:	f7f9 f9d1 	bl	8000638 <__aeabi_dmul>
 8007296:	4642      	mov	r2, r8
 8007298:	464b      	mov	r3, r9
 800729a:	f7f9 f817 	bl	80002cc <__adddf3>
 800729e:	460b      	mov	r3, r1
 80072a0:	4979      	ldr	r1, [pc, #484]	; (8007488 <_strtod_l+0xbd0>)
 80072a2:	4a7b      	ldr	r2, [pc, #492]	; (8007490 <_strtod_l+0xbd8>)
 80072a4:	4019      	ands	r1, r3
 80072a6:	4291      	cmp	r1, r2
 80072a8:	4680      	mov	r8, r0
 80072aa:	d944      	bls.n	8007336 <_strtod_l+0xa7e>
 80072ac:	ee18 2a90 	vmov	r2, s17
 80072b0:	4b78      	ldr	r3, [pc, #480]	; (8007494 <_strtod_l+0xbdc>)
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d104      	bne.n	80072c0 <_strtod_l+0xa08>
 80072b6:	ee18 3a10 	vmov	r3, s16
 80072ba:	3301      	adds	r3, #1
 80072bc:	f43f ad40 	beq.w	8006d40 <_strtod_l+0x488>
 80072c0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007494 <_strtod_l+0xbdc>
 80072c4:	f04f 38ff 	mov.w	r8, #4294967295
 80072c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80072ca:	4620      	mov	r0, r4
 80072cc:	f7fe fe6a 	bl	8005fa4 <_Bfree>
 80072d0:	9905      	ldr	r1, [sp, #20]
 80072d2:	4620      	mov	r0, r4
 80072d4:	f7fe fe66 	bl	8005fa4 <_Bfree>
 80072d8:	4659      	mov	r1, fp
 80072da:	4620      	mov	r0, r4
 80072dc:	f7fe fe62 	bl	8005fa4 <_Bfree>
 80072e0:	4629      	mov	r1, r5
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7fe fe5e 	bl	8005fa4 <_Bfree>
 80072e8:	e609      	b.n	8006efe <_strtod_l+0x646>
 80072ea:	f1b8 0f01 	cmp.w	r8, #1
 80072ee:	d103      	bne.n	80072f8 <_strtod_l+0xa40>
 80072f0:	f1b9 0f00 	cmp.w	r9, #0
 80072f4:	f43f ad95 	beq.w	8006e22 <_strtod_l+0x56a>
 80072f8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007450 <_strtod_l+0xb98>
 80072fc:	4f60      	ldr	r7, [pc, #384]	; (8007480 <_strtod_l+0xbc8>)
 80072fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007302:	2600      	movs	r6, #0
 8007304:	e7ae      	b.n	8007264 <_strtod_l+0x9ac>
 8007306:	4f5f      	ldr	r7, [pc, #380]	; (8007484 <_strtod_l+0xbcc>)
 8007308:	2600      	movs	r6, #0
 800730a:	e7a7      	b.n	800725c <_strtod_l+0x9a4>
 800730c:	4b5d      	ldr	r3, [pc, #372]	; (8007484 <_strtod_l+0xbcc>)
 800730e:	4630      	mov	r0, r6
 8007310:	4639      	mov	r1, r7
 8007312:	2200      	movs	r2, #0
 8007314:	f7f9 f990 	bl	8000638 <__aeabi_dmul>
 8007318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800731a:	4606      	mov	r6, r0
 800731c:	460f      	mov	r7, r1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d09c      	beq.n	800725c <_strtod_l+0x9a4>
 8007322:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007326:	e79d      	b.n	8007264 <_strtod_l+0x9ac>
 8007328:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007458 <_strtod_l+0xba0>
 800732c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007330:	ec57 6b17 	vmov	r6, r7, d7
 8007334:	e796      	b.n	8007264 <_strtod_l+0x9ac>
 8007336:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800733a:	9b04      	ldr	r3, [sp, #16]
 800733c:	46ca      	mov	sl, r9
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1c2      	bne.n	80072c8 <_strtod_l+0xa10>
 8007342:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007348:	0d1b      	lsrs	r3, r3, #20
 800734a:	051b      	lsls	r3, r3, #20
 800734c:	429a      	cmp	r2, r3
 800734e:	d1bb      	bne.n	80072c8 <_strtod_l+0xa10>
 8007350:	4630      	mov	r0, r6
 8007352:	4639      	mov	r1, r7
 8007354:	f7f9 fcd0 	bl	8000cf8 <__aeabi_d2lz>
 8007358:	f7f9 f940 	bl	80005dc <__aeabi_l2d>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4630      	mov	r0, r6
 8007362:	4639      	mov	r1, r7
 8007364:	f7f8 ffb0 	bl	80002c8 <__aeabi_dsub>
 8007368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800736a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800736e:	ea43 0308 	orr.w	r3, r3, r8
 8007372:	4313      	orrs	r3, r2
 8007374:	4606      	mov	r6, r0
 8007376:	460f      	mov	r7, r1
 8007378:	d054      	beq.n	8007424 <_strtod_l+0xb6c>
 800737a:	a339      	add	r3, pc, #228	; (adr r3, 8007460 <_strtod_l+0xba8>)
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f7f9 fbcc 	bl	8000b1c <__aeabi_dcmplt>
 8007384:	2800      	cmp	r0, #0
 8007386:	f47f ace5 	bne.w	8006d54 <_strtod_l+0x49c>
 800738a:	a337      	add	r3, pc, #220	; (adr r3, 8007468 <_strtod_l+0xbb0>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	4630      	mov	r0, r6
 8007392:	4639      	mov	r1, r7
 8007394:	f7f9 fbe0 	bl	8000b58 <__aeabi_dcmpgt>
 8007398:	2800      	cmp	r0, #0
 800739a:	d095      	beq.n	80072c8 <_strtod_l+0xa10>
 800739c:	e4da      	b.n	8006d54 <_strtod_l+0x49c>
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	b333      	cbz	r3, 80073f0 <_strtod_l+0xb38>
 80073a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073a8:	d822      	bhi.n	80073f0 <_strtod_l+0xb38>
 80073aa:	a331      	add	r3, pc, #196	; (adr r3, 8007470 <_strtod_l+0xbb8>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	4630      	mov	r0, r6
 80073b2:	4639      	mov	r1, r7
 80073b4:	f7f9 fbbc 	bl	8000b30 <__aeabi_dcmple>
 80073b8:	b1a0      	cbz	r0, 80073e4 <_strtod_l+0xb2c>
 80073ba:	4639      	mov	r1, r7
 80073bc:	4630      	mov	r0, r6
 80073be:	f7f9 fc13 	bl	8000be8 <__aeabi_d2uiz>
 80073c2:	2801      	cmp	r0, #1
 80073c4:	bf38      	it	cc
 80073c6:	2001      	movcc	r0, #1
 80073c8:	f7f9 f8bc 	bl	8000544 <__aeabi_ui2d>
 80073cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ce:	4606      	mov	r6, r0
 80073d0:	460f      	mov	r7, r1
 80073d2:	bb23      	cbnz	r3, 800741e <_strtod_l+0xb66>
 80073d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073d8:	9010      	str	r0, [sp, #64]	; 0x40
 80073da:	9311      	str	r3, [sp, #68]	; 0x44
 80073dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80073e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80073f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80073f4:	eeb0 0a48 	vmov.f32	s0, s16
 80073f8:	eef0 0a68 	vmov.f32	s1, s17
 80073fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007400:	f7ff f8fc 	bl	80065fc <__ulp>
 8007404:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007408:	ec53 2b10 	vmov	r2, r3, d0
 800740c:	f7f9 f914 	bl	8000638 <__aeabi_dmul>
 8007410:	ec53 2b18 	vmov	r2, r3, d8
 8007414:	f7f8 ff5a 	bl	80002cc <__adddf3>
 8007418:	4680      	mov	r8, r0
 800741a:	4689      	mov	r9, r1
 800741c:	e78d      	b.n	800733a <_strtod_l+0xa82>
 800741e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007422:	e7db      	b.n	80073dc <_strtod_l+0xb24>
 8007424:	a314      	add	r3, pc, #80	; (adr r3, 8007478 <_strtod_l+0xbc0>)
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	f7f9 fb77 	bl	8000b1c <__aeabi_dcmplt>
 800742e:	e7b3      	b.n	8007398 <_strtod_l+0xae0>
 8007430:	2300      	movs	r3, #0
 8007432:	930a      	str	r3, [sp, #40]	; 0x28
 8007434:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007436:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	f7ff ba7c 	b.w	8006936 <_strtod_l+0x7e>
 800743e:	2a65      	cmp	r2, #101	; 0x65
 8007440:	f43f ab75 	beq.w	8006b2e <_strtod_l+0x276>
 8007444:	2a45      	cmp	r2, #69	; 0x45
 8007446:	f43f ab72 	beq.w	8006b2e <_strtod_l+0x276>
 800744a:	2301      	movs	r3, #1
 800744c:	f7ff bbaa 	b.w	8006ba4 <_strtod_l+0x2ec>
 8007450:	00000000 	.word	0x00000000
 8007454:	bff00000 	.word	0xbff00000
 8007458:	00000000 	.word	0x00000000
 800745c:	3ff00000 	.word	0x3ff00000
 8007460:	94a03595 	.word	0x94a03595
 8007464:	3fdfffff 	.word	0x3fdfffff
 8007468:	35afe535 	.word	0x35afe535
 800746c:	3fe00000 	.word	0x3fe00000
 8007470:	ffc00000 	.word	0xffc00000
 8007474:	41dfffff 	.word	0x41dfffff
 8007478:	94a03595 	.word	0x94a03595
 800747c:	3fcfffff 	.word	0x3fcfffff
 8007480:	3ff00000 	.word	0x3ff00000
 8007484:	3fe00000 	.word	0x3fe00000
 8007488:	7ff00000 	.word	0x7ff00000
 800748c:	7fe00000 	.word	0x7fe00000
 8007490:	7c9fffff 	.word	0x7c9fffff
 8007494:	7fefffff 	.word	0x7fefffff

08007498 <_strtod_r>:
 8007498:	4b01      	ldr	r3, [pc, #4]	; (80074a0 <_strtod_r+0x8>)
 800749a:	f7ff ba0d 	b.w	80068b8 <_strtod_l>
 800749e:	bf00      	nop
 80074a0:	20000068 	.word	0x20000068

080074a4 <_strtol_l.constprop.0>:
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074aa:	d001      	beq.n	80074b0 <_strtol_l.constprop.0+0xc>
 80074ac:	2b24      	cmp	r3, #36	; 0x24
 80074ae:	d906      	bls.n	80074be <_strtol_l.constprop.0+0x1a>
 80074b0:	f7fd fd80 	bl	8004fb4 <__errno>
 80074b4:	2316      	movs	r3, #22
 80074b6:	6003      	str	r3, [r0, #0]
 80074b8:	2000      	movs	r0, #0
 80074ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80075a4 <_strtol_l.constprop.0+0x100>
 80074c2:	460d      	mov	r5, r1
 80074c4:	462e      	mov	r6, r5
 80074c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80074ce:	f017 0708 	ands.w	r7, r7, #8
 80074d2:	d1f7      	bne.n	80074c4 <_strtol_l.constprop.0+0x20>
 80074d4:	2c2d      	cmp	r4, #45	; 0x2d
 80074d6:	d132      	bne.n	800753e <_strtol_l.constprop.0+0x9a>
 80074d8:	782c      	ldrb	r4, [r5, #0]
 80074da:	2701      	movs	r7, #1
 80074dc:	1cb5      	adds	r5, r6, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d05b      	beq.n	800759a <_strtol_l.constprop.0+0xf6>
 80074e2:	2b10      	cmp	r3, #16
 80074e4:	d109      	bne.n	80074fa <_strtol_l.constprop.0+0x56>
 80074e6:	2c30      	cmp	r4, #48	; 0x30
 80074e8:	d107      	bne.n	80074fa <_strtol_l.constprop.0+0x56>
 80074ea:	782c      	ldrb	r4, [r5, #0]
 80074ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80074f0:	2c58      	cmp	r4, #88	; 0x58
 80074f2:	d14d      	bne.n	8007590 <_strtol_l.constprop.0+0xec>
 80074f4:	786c      	ldrb	r4, [r5, #1]
 80074f6:	2310      	movs	r3, #16
 80074f8:	3502      	adds	r5, #2
 80074fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80074fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8007502:	f04f 0e00 	mov.w	lr, #0
 8007506:	fbb8 f9f3 	udiv	r9, r8, r3
 800750a:	4676      	mov	r6, lr
 800750c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007510:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007514:	f1bc 0f09 	cmp.w	ip, #9
 8007518:	d816      	bhi.n	8007548 <_strtol_l.constprop.0+0xa4>
 800751a:	4664      	mov	r4, ip
 800751c:	42a3      	cmp	r3, r4
 800751e:	dd24      	ble.n	800756a <_strtol_l.constprop.0+0xc6>
 8007520:	f1be 3fff 	cmp.w	lr, #4294967295
 8007524:	d008      	beq.n	8007538 <_strtol_l.constprop.0+0x94>
 8007526:	45b1      	cmp	r9, r6
 8007528:	d31c      	bcc.n	8007564 <_strtol_l.constprop.0+0xc0>
 800752a:	d101      	bne.n	8007530 <_strtol_l.constprop.0+0x8c>
 800752c:	45a2      	cmp	sl, r4
 800752e:	db19      	blt.n	8007564 <_strtol_l.constprop.0+0xc0>
 8007530:	fb06 4603 	mla	r6, r6, r3, r4
 8007534:	f04f 0e01 	mov.w	lr, #1
 8007538:	f815 4b01 	ldrb.w	r4, [r5], #1
 800753c:	e7e8      	b.n	8007510 <_strtol_l.constprop.0+0x6c>
 800753e:	2c2b      	cmp	r4, #43	; 0x2b
 8007540:	bf04      	itt	eq
 8007542:	782c      	ldrbeq	r4, [r5, #0]
 8007544:	1cb5      	addeq	r5, r6, #2
 8007546:	e7ca      	b.n	80074de <_strtol_l.constprop.0+0x3a>
 8007548:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800754c:	f1bc 0f19 	cmp.w	ip, #25
 8007550:	d801      	bhi.n	8007556 <_strtol_l.constprop.0+0xb2>
 8007552:	3c37      	subs	r4, #55	; 0x37
 8007554:	e7e2      	b.n	800751c <_strtol_l.constprop.0+0x78>
 8007556:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800755a:	f1bc 0f19 	cmp.w	ip, #25
 800755e:	d804      	bhi.n	800756a <_strtol_l.constprop.0+0xc6>
 8007560:	3c57      	subs	r4, #87	; 0x57
 8007562:	e7db      	b.n	800751c <_strtol_l.constprop.0+0x78>
 8007564:	f04f 3eff 	mov.w	lr, #4294967295
 8007568:	e7e6      	b.n	8007538 <_strtol_l.constprop.0+0x94>
 800756a:	f1be 3fff 	cmp.w	lr, #4294967295
 800756e:	d105      	bne.n	800757c <_strtol_l.constprop.0+0xd8>
 8007570:	2322      	movs	r3, #34	; 0x22
 8007572:	6003      	str	r3, [r0, #0]
 8007574:	4646      	mov	r6, r8
 8007576:	b942      	cbnz	r2, 800758a <_strtol_l.constprop.0+0xe6>
 8007578:	4630      	mov	r0, r6
 800757a:	e79e      	b.n	80074ba <_strtol_l.constprop.0+0x16>
 800757c:	b107      	cbz	r7, 8007580 <_strtol_l.constprop.0+0xdc>
 800757e:	4276      	negs	r6, r6
 8007580:	2a00      	cmp	r2, #0
 8007582:	d0f9      	beq.n	8007578 <_strtol_l.constprop.0+0xd4>
 8007584:	f1be 0f00 	cmp.w	lr, #0
 8007588:	d000      	beq.n	800758c <_strtol_l.constprop.0+0xe8>
 800758a:	1e69      	subs	r1, r5, #1
 800758c:	6011      	str	r1, [r2, #0]
 800758e:	e7f3      	b.n	8007578 <_strtol_l.constprop.0+0xd4>
 8007590:	2430      	movs	r4, #48	; 0x30
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1b1      	bne.n	80074fa <_strtol_l.constprop.0+0x56>
 8007596:	2308      	movs	r3, #8
 8007598:	e7af      	b.n	80074fa <_strtol_l.constprop.0+0x56>
 800759a:	2c30      	cmp	r4, #48	; 0x30
 800759c:	d0a5      	beq.n	80074ea <_strtol_l.constprop.0+0x46>
 800759e:	230a      	movs	r3, #10
 80075a0:	e7ab      	b.n	80074fa <_strtol_l.constprop.0+0x56>
 80075a2:	bf00      	nop
 80075a4:	080092b1 	.word	0x080092b1

080075a8 <_strtol_r>:
 80075a8:	f7ff bf7c 	b.w	80074a4 <_strtol_l.constprop.0>

080075ac <__ssputs_r>:
 80075ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b0:	688e      	ldr	r6, [r1, #8]
 80075b2:	461f      	mov	r7, r3
 80075b4:	42be      	cmp	r6, r7
 80075b6:	680b      	ldr	r3, [r1, #0]
 80075b8:	4682      	mov	sl, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	4690      	mov	r8, r2
 80075be:	d82c      	bhi.n	800761a <__ssputs_r+0x6e>
 80075c0:	898a      	ldrh	r2, [r1, #12]
 80075c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075c6:	d026      	beq.n	8007616 <__ssputs_r+0x6a>
 80075c8:	6965      	ldr	r5, [r4, #20]
 80075ca:	6909      	ldr	r1, [r1, #16]
 80075cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075d0:	eba3 0901 	sub.w	r9, r3, r1
 80075d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075d8:	1c7b      	adds	r3, r7, #1
 80075da:	444b      	add	r3, r9
 80075dc:	106d      	asrs	r5, r5, #1
 80075de:	429d      	cmp	r5, r3
 80075e0:	bf38      	it	cc
 80075e2:	461d      	movcc	r5, r3
 80075e4:	0553      	lsls	r3, r2, #21
 80075e6:	d527      	bpl.n	8007638 <__ssputs_r+0x8c>
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7fe fc0f 	bl	8005e0c <_malloc_r>
 80075ee:	4606      	mov	r6, r0
 80075f0:	b360      	cbz	r0, 800764c <__ssputs_r+0xa0>
 80075f2:	6921      	ldr	r1, [r4, #16]
 80075f4:	464a      	mov	r2, r9
 80075f6:	f000 fdaf 	bl	8008158 <memcpy>
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007604:	81a3      	strh	r3, [r4, #12]
 8007606:	6126      	str	r6, [r4, #16]
 8007608:	6165      	str	r5, [r4, #20]
 800760a:	444e      	add	r6, r9
 800760c:	eba5 0509 	sub.w	r5, r5, r9
 8007610:	6026      	str	r6, [r4, #0]
 8007612:	60a5      	str	r5, [r4, #8]
 8007614:	463e      	mov	r6, r7
 8007616:	42be      	cmp	r6, r7
 8007618:	d900      	bls.n	800761c <__ssputs_r+0x70>
 800761a:	463e      	mov	r6, r7
 800761c:	6820      	ldr	r0, [r4, #0]
 800761e:	4632      	mov	r2, r6
 8007620:	4641      	mov	r1, r8
 8007622:	f000 fd5c 	bl	80080de <memmove>
 8007626:	68a3      	ldr	r3, [r4, #8]
 8007628:	1b9b      	subs	r3, r3, r6
 800762a:	60a3      	str	r3, [r4, #8]
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	4433      	add	r3, r6
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	2000      	movs	r0, #0
 8007634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007638:	462a      	mov	r2, r5
 800763a:	f001 f942 	bl	80088c2 <_realloc_r>
 800763e:	4606      	mov	r6, r0
 8007640:	2800      	cmp	r0, #0
 8007642:	d1e0      	bne.n	8007606 <__ssputs_r+0x5a>
 8007644:	6921      	ldr	r1, [r4, #16]
 8007646:	4650      	mov	r0, sl
 8007648:	f7fe fb6c 	bl	8005d24 <_free_r>
 800764c:	230c      	movs	r3, #12
 800764e:	f8ca 3000 	str.w	r3, [sl]
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007658:	81a3      	strh	r3, [r4, #12]
 800765a:	f04f 30ff 	mov.w	r0, #4294967295
 800765e:	e7e9      	b.n	8007634 <__ssputs_r+0x88>

08007660 <_svfiprintf_r>:
 8007660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	4698      	mov	r8, r3
 8007666:	898b      	ldrh	r3, [r1, #12]
 8007668:	061b      	lsls	r3, r3, #24
 800766a:	b09d      	sub	sp, #116	; 0x74
 800766c:	4607      	mov	r7, r0
 800766e:	460d      	mov	r5, r1
 8007670:	4614      	mov	r4, r2
 8007672:	d50e      	bpl.n	8007692 <_svfiprintf_r+0x32>
 8007674:	690b      	ldr	r3, [r1, #16]
 8007676:	b963      	cbnz	r3, 8007692 <_svfiprintf_r+0x32>
 8007678:	2140      	movs	r1, #64	; 0x40
 800767a:	f7fe fbc7 	bl	8005e0c <_malloc_r>
 800767e:	6028      	str	r0, [r5, #0]
 8007680:	6128      	str	r0, [r5, #16]
 8007682:	b920      	cbnz	r0, 800768e <_svfiprintf_r+0x2e>
 8007684:	230c      	movs	r3, #12
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	e0d0      	b.n	8007830 <_svfiprintf_r+0x1d0>
 800768e:	2340      	movs	r3, #64	; 0x40
 8007690:	616b      	str	r3, [r5, #20]
 8007692:	2300      	movs	r3, #0
 8007694:	9309      	str	r3, [sp, #36]	; 0x24
 8007696:	2320      	movs	r3, #32
 8007698:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800769c:	f8cd 800c 	str.w	r8, [sp, #12]
 80076a0:	2330      	movs	r3, #48	; 0x30
 80076a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007848 <_svfiprintf_r+0x1e8>
 80076a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076aa:	f04f 0901 	mov.w	r9, #1
 80076ae:	4623      	mov	r3, r4
 80076b0:	469a      	mov	sl, r3
 80076b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076b6:	b10a      	cbz	r2, 80076bc <_svfiprintf_r+0x5c>
 80076b8:	2a25      	cmp	r2, #37	; 0x25
 80076ba:	d1f9      	bne.n	80076b0 <_svfiprintf_r+0x50>
 80076bc:	ebba 0b04 	subs.w	fp, sl, r4
 80076c0:	d00b      	beq.n	80076da <_svfiprintf_r+0x7a>
 80076c2:	465b      	mov	r3, fp
 80076c4:	4622      	mov	r2, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	4638      	mov	r0, r7
 80076ca:	f7ff ff6f 	bl	80075ac <__ssputs_r>
 80076ce:	3001      	adds	r0, #1
 80076d0:	f000 80a9 	beq.w	8007826 <_svfiprintf_r+0x1c6>
 80076d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d6:	445a      	add	r2, fp
 80076d8:	9209      	str	r2, [sp, #36]	; 0x24
 80076da:	f89a 3000 	ldrb.w	r3, [sl]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 80a1 	beq.w	8007826 <_svfiprintf_r+0x1c6>
 80076e4:	2300      	movs	r3, #0
 80076e6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076ee:	f10a 0a01 	add.w	sl, sl, #1
 80076f2:	9304      	str	r3, [sp, #16]
 80076f4:	9307      	str	r3, [sp, #28]
 80076f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076fa:	931a      	str	r3, [sp, #104]	; 0x68
 80076fc:	4654      	mov	r4, sl
 80076fe:	2205      	movs	r2, #5
 8007700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007704:	4850      	ldr	r0, [pc, #320]	; (8007848 <_svfiprintf_r+0x1e8>)
 8007706:	f7f8 fd83 	bl	8000210 <memchr>
 800770a:	9a04      	ldr	r2, [sp, #16]
 800770c:	b9d8      	cbnz	r0, 8007746 <_svfiprintf_r+0xe6>
 800770e:	06d0      	lsls	r0, r2, #27
 8007710:	bf44      	itt	mi
 8007712:	2320      	movmi	r3, #32
 8007714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007718:	0711      	lsls	r1, r2, #28
 800771a:	bf44      	itt	mi
 800771c:	232b      	movmi	r3, #43	; 0x2b
 800771e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007722:	f89a 3000 	ldrb.w	r3, [sl]
 8007726:	2b2a      	cmp	r3, #42	; 0x2a
 8007728:	d015      	beq.n	8007756 <_svfiprintf_r+0xf6>
 800772a:	9a07      	ldr	r2, [sp, #28]
 800772c:	4654      	mov	r4, sl
 800772e:	2000      	movs	r0, #0
 8007730:	f04f 0c0a 	mov.w	ip, #10
 8007734:	4621      	mov	r1, r4
 8007736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800773a:	3b30      	subs	r3, #48	; 0x30
 800773c:	2b09      	cmp	r3, #9
 800773e:	d94d      	bls.n	80077dc <_svfiprintf_r+0x17c>
 8007740:	b1b0      	cbz	r0, 8007770 <_svfiprintf_r+0x110>
 8007742:	9207      	str	r2, [sp, #28]
 8007744:	e014      	b.n	8007770 <_svfiprintf_r+0x110>
 8007746:	eba0 0308 	sub.w	r3, r0, r8
 800774a:	fa09 f303 	lsl.w	r3, r9, r3
 800774e:	4313      	orrs	r3, r2
 8007750:	9304      	str	r3, [sp, #16]
 8007752:	46a2      	mov	sl, r4
 8007754:	e7d2      	b.n	80076fc <_svfiprintf_r+0x9c>
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	1d19      	adds	r1, r3, #4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	9103      	str	r1, [sp, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	bfbb      	ittet	lt
 8007762:	425b      	neglt	r3, r3
 8007764:	f042 0202 	orrlt.w	r2, r2, #2
 8007768:	9307      	strge	r3, [sp, #28]
 800776a:	9307      	strlt	r3, [sp, #28]
 800776c:	bfb8      	it	lt
 800776e:	9204      	strlt	r2, [sp, #16]
 8007770:	7823      	ldrb	r3, [r4, #0]
 8007772:	2b2e      	cmp	r3, #46	; 0x2e
 8007774:	d10c      	bne.n	8007790 <_svfiprintf_r+0x130>
 8007776:	7863      	ldrb	r3, [r4, #1]
 8007778:	2b2a      	cmp	r3, #42	; 0x2a
 800777a:	d134      	bne.n	80077e6 <_svfiprintf_r+0x186>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	1d1a      	adds	r2, r3, #4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	9203      	str	r2, [sp, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	bfb8      	it	lt
 8007788:	f04f 33ff 	movlt.w	r3, #4294967295
 800778c:	3402      	adds	r4, #2
 800778e:	9305      	str	r3, [sp, #20]
 8007790:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007858 <_svfiprintf_r+0x1f8>
 8007794:	7821      	ldrb	r1, [r4, #0]
 8007796:	2203      	movs	r2, #3
 8007798:	4650      	mov	r0, sl
 800779a:	f7f8 fd39 	bl	8000210 <memchr>
 800779e:	b138      	cbz	r0, 80077b0 <_svfiprintf_r+0x150>
 80077a0:	9b04      	ldr	r3, [sp, #16]
 80077a2:	eba0 000a 	sub.w	r0, r0, sl
 80077a6:	2240      	movs	r2, #64	; 0x40
 80077a8:	4082      	lsls	r2, r0
 80077aa:	4313      	orrs	r3, r2
 80077ac:	3401      	adds	r4, #1
 80077ae:	9304      	str	r3, [sp, #16]
 80077b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b4:	4825      	ldr	r0, [pc, #148]	; (800784c <_svfiprintf_r+0x1ec>)
 80077b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077ba:	2206      	movs	r2, #6
 80077bc:	f7f8 fd28 	bl	8000210 <memchr>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d038      	beq.n	8007836 <_svfiprintf_r+0x1d6>
 80077c4:	4b22      	ldr	r3, [pc, #136]	; (8007850 <_svfiprintf_r+0x1f0>)
 80077c6:	bb1b      	cbnz	r3, 8007810 <_svfiprintf_r+0x1b0>
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	3307      	adds	r3, #7
 80077cc:	f023 0307 	bic.w	r3, r3, #7
 80077d0:	3308      	adds	r3, #8
 80077d2:	9303      	str	r3, [sp, #12]
 80077d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d6:	4433      	add	r3, r6
 80077d8:	9309      	str	r3, [sp, #36]	; 0x24
 80077da:	e768      	b.n	80076ae <_svfiprintf_r+0x4e>
 80077dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80077e0:	460c      	mov	r4, r1
 80077e2:	2001      	movs	r0, #1
 80077e4:	e7a6      	b.n	8007734 <_svfiprintf_r+0xd4>
 80077e6:	2300      	movs	r3, #0
 80077e8:	3401      	adds	r4, #1
 80077ea:	9305      	str	r3, [sp, #20]
 80077ec:	4619      	mov	r1, r3
 80077ee:	f04f 0c0a 	mov.w	ip, #10
 80077f2:	4620      	mov	r0, r4
 80077f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077f8:	3a30      	subs	r2, #48	; 0x30
 80077fa:	2a09      	cmp	r2, #9
 80077fc:	d903      	bls.n	8007806 <_svfiprintf_r+0x1a6>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0c6      	beq.n	8007790 <_svfiprintf_r+0x130>
 8007802:	9105      	str	r1, [sp, #20]
 8007804:	e7c4      	b.n	8007790 <_svfiprintf_r+0x130>
 8007806:	fb0c 2101 	mla	r1, ip, r1, r2
 800780a:	4604      	mov	r4, r0
 800780c:	2301      	movs	r3, #1
 800780e:	e7f0      	b.n	80077f2 <_svfiprintf_r+0x192>
 8007810:	ab03      	add	r3, sp, #12
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	462a      	mov	r2, r5
 8007816:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <_svfiprintf_r+0x1f4>)
 8007818:	a904      	add	r1, sp, #16
 800781a:	4638      	mov	r0, r7
 800781c:	f7fc fc38 	bl	8004090 <_printf_float>
 8007820:	1c42      	adds	r2, r0, #1
 8007822:	4606      	mov	r6, r0
 8007824:	d1d6      	bne.n	80077d4 <_svfiprintf_r+0x174>
 8007826:	89ab      	ldrh	r3, [r5, #12]
 8007828:	065b      	lsls	r3, r3, #25
 800782a:	f53f af2d 	bmi.w	8007688 <_svfiprintf_r+0x28>
 800782e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007830:	b01d      	add	sp, #116	; 0x74
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	ab03      	add	r3, sp, #12
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	462a      	mov	r2, r5
 800783c:	4b05      	ldr	r3, [pc, #20]	; (8007854 <_svfiprintf_r+0x1f4>)
 800783e:	a904      	add	r1, sp, #16
 8007840:	4638      	mov	r0, r7
 8007842:	f7fc fec9 	bl	80045d8 <_printf_i>
 8007846:	e7eb      	b.n	8007820 <_svfiprintf_r+0x1c0>
 8007848:	080093b1 	.word	0x080093b1
 800784c:	080093bb 	.word	0x080093bb
 8007850:	08004091 	.word	0x08004091
 8007854:	080075ad 	.word	0x080075ad
 8007858:	080093b7 	.word	0x080093b7

0800785c <_sungetc_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	1c4b      	adds	r3, r1, #1
 8007860:	4614      	mov	r4, r2
 8007862:	d103      	bne.n	800786c <_sungetc_r+0x10>
 8007864:	f04f 35ff 	mov.w	r5, #4294967295
 8007868:	4628      	mov	r0, r5
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	8993      	ldrh	r3, [r2, #12]
 800786e:	f023 0320 	bic.w	r3, r3, #32
 8007872:	8193      	strh	r3, [r2, #12]
 8007874:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007876:	6852      	ldr	r2, [r2, #4]
 8007878:	b2cd      	uxtb	r5, r1
 800787a:	b18b      	cbz	r3, 80078a0 <_sungetc_r+0x44>
 800787c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800787e:	4293      	cmp	r3, r2
 8007880:	dd08      	ble.n	8007894 <_sungetc_r+0x38>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	1e5a      	subs	r2, r3, #1
 8007886:	6022      	str	r2, [r4, #0]
 8007888:	f803 5c01 	strb.w	r5, [r3, #-1]
 800788c:	6863      	ldr	r3, [r4, #4]
 800788e:	3301      	adds	r3, #1
 8007890:	6063      	str	r3, [r4, #4]
 8007892:	e7e9      	b.n	8007868 <_sungetc_r+0xc>
 8007894:	4621      	mov	r1, r4
 8007896:	f000 fbe8 	bl	800806a <__submore>
 800789a:	2800      	cmp	r0, #0
 800789c:	d0f1      	beq.n	8007882 <_sungetc_r+0x26>
 800789e:	e7e1      	b.n	8007864 <_sungetc_r+0x8>
 80078a0:	6921      	ldr	r1, [r4, #16]
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	b151      	cbz	r1, 80078bc <_sungetc_r+0x60>
 80078a6:	4299      	cmp	r1, r3
 80078a8:	d208      	bcs.n	80078bc <_sungetc_r+0x60>
 80078aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80078ae:	42a9      	cmp	r1, r5
 80078b0:	d104      	bne.n	80078bc <_sungetc_r+0x60>
 80078b2:	3b01      	subs	r3, #1
 80078b4:	3201      	adds	r2, #1
 80078b6:	6023      	str	r3, [r4, #0]
 80078b8:	6062      	str	r2, [r4, #4]
 80078ba:	e7d5      	b.n	8007868 <_sungetc_r+0xc>
 80078bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80078c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078c4:	6363      	str	r3, [r4, #52]	; 0x34
 80078c6:	2303      	movs	r3, #3
 80078c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80078ca:	4623      	mov	r3, r4
 80078cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	2301      	movs	r3, #1
 80078d4:	e7dc      	b.n	8007890 <_sungetc_r+0x34>

080078d6 <__ssrefill_r>:
 80078d6:	b510      	push	{r4, lr}
 80078d8:	460c      	mov	r4, r1
 80078da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80078dc:	b169      	cbz	r1, 80078fa <__ssrefill_r+0x24>
 80078de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078e2:	4299      	cmp	r1, r3
 80078e4:	d001      	beq.n	80078ea <__ssrefill_r+0x14>
 80078e6:	f7fe fa1d 	bl	8005d24 <_free_r>
 80078ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078ec:	6063      	str	r3, [r4, #4]
 80078ee:	2000      	movs	r0, #0
 80078f0:	6360      	str	r0, [r4, #52]	; 0x34
 80078f2:	b113      	cbz	r3, 80078fa <__ssrefill_r+0x24>
 80078f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	bd10      	pop	{r4, pc}
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	2300      	movs	r3, #0
 8007900:	6063      	str	r3, [r4, #4]
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	f043 0320 	orr.w	r3, r3, #32
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	f04f 30ff 	mov.w	r0, #4294967295
 800790e:	e7f3      	b.n	80078f8 <__ssrefill_r+0x22>

08007910 <__ssvfiscanf_r>:
 8007910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007914:	460c      	mov	r4, r1
 8007916:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800791a:	2100      	movs	r1, #0
 800791c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007920:	49a6      	ldr	r1, [pc, #664]	; (8007bbc <__ssvfiscanf_r+0x2ac>)
 8007922:	91a0      	str	r1, [sp, #640]	; 0x280
 8007924:	f10d 0804 	add.w	r8, sp, #4
 8007928:	49a5      	ldr	r1, [pc, #660]	; (8007bc0 <__ssvfiscanf_r+0x2b0>)
 800792a:	4fa6      	ldr	r7, [pc, #664]	; (8007bc4 <__ssvfiscanf_r+0x2b4>)
 800792c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007bc8 <__ssvfiscanf_r+0x2b8>
 8007930:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007934:	4606      	mov	r6, r0
 8007936:	91a1      	str	r1, [sp, #644]	; 0x284
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	7813      	ldrb	r3, [r2, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 815a 	beq.w	8007bf6 <__ssvfiscanf_r+0x2e6>
 8007942:	5cf9      	ldrb	r1, [r7, r3]
 8007944:	f011 0108 	ands.w	r1, r1, #8
 8007948:	f102 0501 	add.w	r5, r2, #1
 800794c:	d019      	beq.n	8007982 <__ssvfiscanf_r+0x72>
 800794e:	6863      	ldr	r3, [r4, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	dd0f      	ble.n	8007974 <__ssvfiscanf_r+0x64>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	781a      	ldrb	r2, [r3, #0]
 8007958:	5cba      	ldrb	r2, [r7, r2]
 800795a:	0712      	lsls	r2, r2, #28
 800795c:	d401      	bmi.n	8007962 <__ssvfiscanf_r+0x52>
 800795e:	462a      	mov	r2, r5
 8007960:	e7eb      	b.n	800793a <__ssvfiscanf_r+0x2a>
 8007962:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007964:	3201      	adds	r2, #1
 8007966:	9245      	str	r2, [sp, #276]	; 0x114
 8007968:	6862      	ldr	r2, [r4, #4]
 800796a:	3301      	adds	r3, #1
 800796c:	3a01      	subs	r2, #1
 800796e:	6062      	str	r2, [r4, #4]
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	e7ec      	b.n	800794e <__ssvfiscanf_r+0x3e>
 8007974:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007976:	4621      	mov	r1, r4
 8007978:	4630      	mov	r0, r6
 800797a:	4798      	blx	r3
 800797c:	2800      	cmp	r0, #0
 800797e:	d0e9      	beq.n	8007954 <__ssvfiscanf_r+0x44>
 8007980:	e7ed      	b.n	800795e <__ssvfiscanf_r+0x4e>
 8007982:	2b25      	cmp	r3, #37	; 0x25
 8007984:	d012      	beq.n	80079ac <__ssvfiscanf_r+0x9c>
 8007986:	469a      	mov	sl, r3
 8007988:	6863      	ldr	r3, [r4, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f340 8091 	ble.w	8007ab2 <__ssvfiscanf_r+0x1a2>
 8007990:	6822      	ldr	r2, [r4, #0]
 8007992:	7813      	ldrb	r3, [r2, #0]
 8007994:	4553      	cmp	r3, sl
 8007996:	f040 812e 	bne.w	8007bf6 <__ssvfiscanf_r+0x2e6>
 800799a:	6863      	ldr	r3, [r4, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	6063      	str	r3, [r4, #4]
 80079a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80079a2:	3201      	adds	r2, #1
 80079a4:	3301      	adds	r3, #1
 80079a6:	6022      	str	r2, [r4, #0]
 80079a8:	9345      	str	r3, [sp, #276]	; 0x114
 80079aa:	e7d8      	b.n	800795e <__ssvfiscanf_r+0x4e>
 80079ac:	9141      	str	r1, [sp, #260]	; 0x104
 80079ae:	9143      	str	r1, [sp, #268]	; 0x10c
 80079b0:	7853      	ldrb	r3, [r2, #1]
 80079b2:	2b2a      	cmp	r3, #42	; 0x2a
 80079b4:	bf02      	ittt	eq
 80079b6:	2310      	moveq	r3, #16
 80079b8:	1c95      	addeq	r5, r2, #2
 80079ba:	9341      	streq	r3, [sp, #260]	; 0x104
 80079bc:	220a      	movs	r2, #10
 80079be:	46aa      	mov	sl, r5
 80079c0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80079c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80079c8:	2b09      	cmp	r3, #9
 80079ca:	d91c      	bls.n	8007a06 <__ssvfiscanf_r+0xf6>
 80079cc:	487e      	ldr	r0, [pc, #504]	; (8007bc8 <__ssvfiscanf_r+0x2b8>)
 80079ce:	2203      	movs	r2, #3
 80079d0:	f7f8 fc1e 	bl	8000210 <memchr>
 80079d4:	b138      	cbz	r0, 80079e6 <__ssvfiscanf_r+0xd6>
 80079d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80079d8:	eba0 0009 	sub.w	r0, r0, r9
 80079dc:	2301      	movs	r3, #1
 80079de:	4083      	lsls	r3, r0
 80079e0:	4313      	orrs	r3, r2
 80079e2:	9341      	str	r3, [sp, #260]	; 0x104
 80079e4:	4655      	mov	r5, sl
 80079e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079ea:	2b78      	cmp	r3, #120	; 0x78
 80079ec:	d806      	bhi.n	80079fc <__ssvfiscanf_r+0xec>
 80079ee:	2b57      	cmp	r3, #87	; 0x57
 80079f0:	d810      	bhi.n	8007a14 <__ssvfiscanf_r+0x104>
 80079f2:	2b25      	cmp	r3, #37	; 0x25
 80079f4:	d0c7      	beq.n	8007986 <__ssvfiscanf_r+0x76>
 80079f6:	d857      	bhi.n	8007aa8 <__ssvfiscanf_r+0x198>
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d065      	beq.n	8007ac8 <__ssvfiscanf_r+0x1b8>
 80079fc:	2303      	movs	r3, #3
 80079fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8007a00:	230a      	movs	r3, #10
 8007a02:	9342      	str	r3, [sp, #264]	; 0x108
 8007a04:	e076      	b.n	8007af4 <__ssvfiscanf_r+0x1e4>
 8007a06:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007a08:	fb02 1103 	mla	r1, r2, r3, r1
 8007a0c:	3930      	subs	r1, #48	; 0x30
 8007a0e:	9143      	str	r1, [sp, #268]	; 0x10c
 8007a10:	4655      	mov	r5, sl
 8007a12:	e7d4      	b.n	80079be <__ssvfiscanf_r+0xae>
 8007a14:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007a18:	2a20      	cmp	r2, #32
 8007a1a:	d8ef      	bhi.n	80079fc <__ssvfiscanf_r+0xec>
 8007a1c:	a101      	add	r1, pc, #4	; (adr r1, 8007a24 <__ssvfiscanf_r+0x114>)
 8007a1e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007ad7 	.word	0x08007ad7
 8007a28:	080079fd 	.word	0x080079fd
 8007a2c:	080079fd 	.word	0x080079fd
 8007a30:	08007b35 	.word	0x08007b35
 8007a34:	080079fd 	.word	0x080079fd
 8007a38:	080079fd 	.word	0x080079fd
 8007a3c:	080079fd 	.word	0x080079fd
 8007a40:	080079fd 	.word	0x080079fd
 8007a44:	080079fd 	.word	0x080079fd
 8007a48:	080079fd 	.word	0x080079fd
 8007a4c:	080079fd 	.word	0x080079fd
 8007a50:	08007b4b 	.word	0x08007b4b
 8007a54:	08007b31 	.word	0x08007b31
 8007a58:	08007aaf 	.word	0x08007aaf
 8007a5c:	08007aaf 	.word	0x08007aaf
 8007a60:	08007aaf 	.word	0x08007aaf
 8007a64:	080079fd 	.word	0x080079fd
 8007a68:	08007aed 	.word	0x08007aed
 8007a6c:	080079fd 	.word	0x080079fd
 8007a70:	080079fd 	.word	0x080079fd
 8007a74:	080079fd 	.word	0x080079fd
 8007a78:	080079fd 	.word	0x080079fd
 8007a7c:	08007b5b 	.word	0x08007b5b
 8007a80:	08007b29 	.word	0x08007b29
 8007a84:	08007acf 	.word	0x08007acf
 8007a88:	080079fd 	.word	0x080079fd
 8007a8c:	080079fd 	.word	0x080079fd
 8007a90:	08007b57 	.word	0x08007b57
 8007a94:	080079fd 	.word	0x080079fd
 8007a98:	08007b31 	.word	0x08007b31
 8007a9c:	080079fd 	.word	0x080079fd
 8007aa0:	080079fd 	.word	0x080079fd
 8007aa4:	08007ad7 	.word	0x08007ad7
 8007aa8:	3b45      	subs	r3, #69	; 0x45
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d8a6      	bhi.n	80079fc <__ssvfiscanf_r+0xec>
 8007aae:	2305      	movs	r3, #5
 8007ab0:	e01f      	b.n	8007af2 <__ssvfiscanf_r+0x1e2>
 8007ab2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4798      	blx	r3
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f43f af68 	beq.w	8007990 <__ssvfiscanf_r+0x80>
 8007ac0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	f040 808d 	bne.w	8007be2 <__ssvfiscanf_r+0x2d2>
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	e08f      	b.n	8007bee <__ssvfiscanf_r+0x2de>
 8007ace:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007ad0:	f042 0220 	orr.w	r2, r2, #32
 8007ad4:	9241      	str	r2, [sp, #260]	; 0x104
 8007ad6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007adc:	9241      	str	r2, [sp, #260]	; 0x104
 8007ade:	2210      	movs	r2, #16
 8007ae0:	2b6f      	cmp	r3, #111	; 0x6f
 8007ae2:	9242      	str	r2, [sp, #264]	; 0x108
 8007ae4:	bf34      	ite	cc
 8007ae6:	2303      	movcc	r3, #3
 8007ae8:	2304      	movcs	r3, #4
 8007aea:	e002      	b.n	8007af2 <__ssvfiscanf_r+0x1e2>
 8007aec:	2300      	movs	r3, #0
 8007aee:	9342      	str	r3, [sp, #264]	; 0x108
 8007af0:	2303      	movs	r3, #3
 8007af2:	9347      	str	r3, [sp, #284]	; 0x11c
 8007af4:	6863      	ldr	r3, [r4, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	dd3d      	ble.n	8007b76 <__ssvfiscanf_r+0x266>
 8007afa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007afc:	0659      	lsls	r1, r3, #25
 8007afe:	d404      	bmi.n	8007b0a <__ssvfiscanf_r+0x1fa>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	781a      	ldrb	r2, [r3, #0]
 8007b04:	5cba      	ldrb	r2, [r7, r2]
 8007b06:	0712      	lsls	r2, r2, #28
 8007b08:	d43c      	bmi.n	8007b84 <__ssvfiscanf_r+0x274>
 8007b0a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	dc4b      	bgt.n	8007ba8 <__ssvfiscanf_r+0x298>
 8007b10:	466b      	mov	r3, sp
 8007b12:	4622      	mov	r2, r4
 8007b14:	a941      	add	r1, sp, #260	; 0x104
 8007b16:	4630      	mov	r0, r6
 8007b18:	f000 f872 	bl	8007c00 <_scanf_chars>
 8007b1c:	2801      	cmp	r0, #1
 8007b1e:	d06a      	beq.n	8007bf6 <__ssvfiscanf_r+0x2e6>
 8007b20:	2802      	cmp	r0, #2
 8007b22:	f47f af1c 	bne.w	800795e <__ssvfiscanf_r+0x4e>
 8007b26:	e7cb      	b.n	8007ac0 <__ssvfiscanf_r+0x1b0>
 8007b28:	2308      	movs	r3, #8
 8007b2a:	9342      	str	r3, [sp, #264]	; 0x108
 8007b2c:	2304      	movs	r3, #4
 8007b2e:	e7e0      	b.n	8007af2 <__ssvfiscanf_r+0x1e2>
 8007b30:	220a      	movs	r2, #10
 8007b32:	e7d5      	b.n	8007ae0 <__ssvfiscanf_r+0x1d0>
 8007b34:	4629      	mov	r1, r5
 8007b36:	4640      	mov	r0, r8
 8007b38:	f000 fa5e 	bl	8007ff8 <__sccl>
 8007b3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b42:	9341      	str	r3, [sp, #260]	; 0x104
 8007b44:	4605      	mov	r5, r0
 8007b46:	2301      	movs	r3, #1
 8007b48:	e7d3      	b.n	8007af2 <__ssvfiscanf_r+0x1e2>
 8007b4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b50:	9341      	str	r3, [sp, #260]	; 0x104
 8007b52:	2300      	movs	r3, #0
 8007b54:	e7cd      	b.n	8007af2 <__ssvfiscanf_r+0x1e2>
 8007b56:	2302      	movs	r3, #2
 8007b58:	e7cb      	b.n	8007af2 <__ssvfiscanf_r+0x1e2>
 8007b5a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007b5c:	06c3      	lsls	r3, r0, #27
 8007b5e:	f53f aefe 	bmi.w	800795e <__ssvfiscanf_r+0x4e>
 8007b62:	9b00      	ldr	r3, [sp, #0]
 8007b64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b66:	1d19      	adds	r1, r3, #4
 8007b68:	9100      	str	r1, [sp, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	07c0      	lsls	r0, r0, #31
 8007b6e:	bf4c      	ite	mi
 8007b70:	801a      	strhmi	r2, [r3, #0]
 8007b72:	601a      	strpl	r2, [r3, #0]
 8007b74:	e6f3      	b.n	800795e <__ssvfiscanf_r+0x4e>
 8007b76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	4798      	blx	r3
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d0bb      	beq.n	8007afa <__ssvfiscanf_r+0x1ea>
 8007b82:	e79d      	b.n	8007ac0 <__ssvfiscanf_r+0x1b0>
 8007b84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b86:	3201      	adds	r2, #1
 8007b88:	9245      	str	r2, [sp, #276]	; 0x114
 8007b8a:	6862      	ldr	r2, [r4, #4]
 8007b8c:	3a01      	subs	r2, #1
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	6062      	str	r2, [r4, #4]
 8007b92:	dd02      	ble.n	8007b9a <__ssvfiscanf_r+0x28a>
 8007b94:	3301      	adds	r3, #1
 8007b96:	6023      	str	r3, [r4, #0]
 8007b98:	e7b2      	b.n	8007b00 <__ssvfiscanf_r+0x1f0>
 8007b9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	4798      	blx	r3
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d0ac      	beq.n	8007b00 <__ssvfiscanf_r+0x1f0>
 8007ba6:	e78b      	b.n	8007ac0 <__ssvfiscanf_r+0x1b0>
 8007ba8:	2b04      	cmp	r3, #4
 8007baa:	dc0f      	bgt.n	8007bcc <__ssvfiscanf_r+0x2bc>
 8007bac:	466b      	mov	r3, sp
 8007bae:	4622      	mov	r2, r4
 8007bb0:	a941      	add	r1, sp, #260	; 0x104
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f000 f87e 	bl	8007cb4 <_scanf_i>
 8007bb8:	e7b0      	b.n	8007b1c <__ssvfiscanf_r+0x20c>
 8007bba:	bf00      	nop
 8007bbc:	0800785d 	.word	0x0800785d
 8007bc0:	080078d7 	.word	0x080078d7
 8007bc4:	080092b1 	.word	0x080092b1
 8007bc8:	080093b7 	.word	0x080093b7
 8007bcc:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <__ssvfiscanf_r+0x2ec>)
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f43f aec5 	beq.w	800795e <__ssvfiscanf_r+0x4e>
 8007bd4:	466b      	mov	r3, sp
 8007bd6:	4622      	mov	r2, r4
 8007bd8:	a941      	add	r1, sp, #260	; 0x104
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7fc fe1e 	bl	800481c <_scanf_float>
 8007be0:	e79c      	b.n	8007b1c <__ssvfiscanf_r+0x20c>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007be8:	bf18      	it	ne
 8007bea:	f04f 30ff 	movne.w	r0, #4294967295
 8007bee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007bf8:	e7f9      	b.n	8007bee <__ssvfiscanf_r+0x2de>
 8007bfa:	bf00      	nop
 8007bfc:	0800481d 	.word	0x0800481d

08007c00 <_scanf_chars>:
 8007c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c04:	4615      	mov	r5, r2
 8007c06:	688a      	ldr	r2, [r1, #8]
 8007c08:	4680      	mov	r8, r0
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	b932      	cbnz	r2, 8007c1c <_scanf_chars+0x1c>
 8007c0e:	698a      	ldr	r2, [r1, #24]
 8007c10:	2a00      	cmp	r2, #0
 8007c12:	bf0c      	ite	eq
 8007c14:	2201      	moveq	r2, #1
 8007c16:	f04f 32ff 	movne.w	r2, #4294967295
 8007c1a:	608a      	str	r2, [r1, #8]
 8007c1c:	6822      	ldr	r2, [r4, #0]
 8007c1e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007cb0 <_scanf_chars+0xb0>
 8007c22:	06d1      	lsls	r1, r2, #27
 8007c24:	bf5f      	itttt	pl
 8007c26:	681a      	ldrpl	r2, [r3, #0]
 8007c28:	1d11      	addpl	r1, r2, #4
 8007c2a:	6019      	strpl	r1, [r3, #0]
 8007c2c:	6816      	ldrpl	r6, [r2, #0]
 8007c2e:	2700      	movs	r7, #0
 8007c30:	69a0      	ldr	r0, [r4, #24]
 8007c32:	b188      	cbz	r0, 8007c58 <_scanf_chars+0x58>
 8007c34:	2801      	cmp	r0, #1
 8007c36:	d107      	bne.n	8007c48 <_scanf_chars+0x48>
 8007c38:	682a      	ldr	r2, [r5, #0]
 8007c3a:	7811      	ldrb	r1, [r2, #0]
 8007c3c:	6962      	ldr	r2, [r4, #20]
 8007c3e:	5c52      	ldrb	r2, [r2, r1]
 8007c40:	b952      	cbnz	r2, 8007c58 <_scanf_chars+0x58>
 8007c42:	2f00      	cmp	r7, #0
 8007c44:	d031      	beq.n	8007caa <_scanf_chars+0xaa>
 8007c46:	e022      	b.n	8007c8e <_scanf_chars+0x8e>
 8007c48:	2802      	cmp	r0, #2
 8007c4a:	d120      	bne.n	8007c8e <_scanf_chars+0x8e>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007c54:	071b      	lsls	r3, r3, #28
 8007c56:	d41a      	bmi.n	8007c8e <_scanf_chars+0x8e>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	06da      	lsls	r2, r3, #27
 8007c5c:	bf5e      	ittt	pl
 8007c5e:	682b      	ldrpl	r3, [r5, #0]
 8007c60:	781b      	ldrbpl	r3, [r3, #0]
 8007c62:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007c66:	682a      	ldr	r2, [r5, #0]
 8007c68:	686b      	ldr	r3, [r5, #4]
 8007c6a:	3201      	adds	r2, #1
 8007c6c:	602a      	str	r2, [r5, #0]
 8007c6e:	68a2      	ldr	r2, [r4, #8]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	3a01      	subs	r2, #1
 8007c74:	606b      	str	r3, [r5, #4]
 8007c76:	3701      	adds	r7, #1
 8007c78:	60a2      	str	r2, [r4, #8]
 8007c7a:	b142      	cbz	r2, 8007c8e <_scanf_chars+0x8e>
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	dcd7      	bgt.n	8007c30 <_scanf_chars+0x30>
 8007c80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c84:	4629      	mov	r1, r5
 8007c86:	4640      	mov	r0, r8
 8007c88:	4798      	blx	r3
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d0d0      	beq.n	8007c30 <_scanf_chars+0x30>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	f013 0310 	ands.w	r3, r3, #16
 8007c94:	d105      	bne.n	8007ca2 <_scanf_chars+0xa2>
 8007c96:	68e2      	ldr	r2, [r4, #12]
 8007c98:	3201      	adds	r2, #1
 8007c9a:	60e2      	str	r2, [r4, #12]
 8007c9c:	69a2      	ldr	r2, [r4, #24]
 8007c9e:	b102      	cbz	r2, 8007ca2 <_scanf_chars+0xa2>
 8007ca0:	7033      	strb	r3, [r6, #0]
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	443b      	add	r3, r7
 8007ca6:	6123      	str	r3, [r4, #16]
 8007ca8:	2000      	movs	r0, #0
 8007caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cae:	bf00      	nop
 8007cb0:	080092b1 	.word	0x080092b1

08007cb4 <_scanf_i>:
 8007cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	4698      	mov	r8, r3
 8007cba:	4b74      	ldr	r3, [pc, #464]	; (8007e8c <_scanf_i+0x1d8>)
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	4682      	mov	sl, r0
 8007cc0:	4616      	mov	r6, r2
 8007cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	ab03      	add	r3, sp, #12
 8007cca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007cce:	4b70      	ldr	r3, [pc, #448]	; (8007e90 <_scanf_i+0x1dc>)
 8007cd0:	69a1      	ldr	r1, [r4, #24]
 8007cd2:	4a70      	ldr	r2, [pc, #448]	; (8007e94 <_scanf_i+0x1e0>)
 8007cd4:	2903      	cmp	r1, #3
 8007cd6:	bf18      	it	ne
 8007cd8:	461a      	movne	r2, r3
 8007cda:	68a3      	ldr	r3, [r4, #8]
 8007cdc:	9201      	str	r2, [sp, #4]
 8007cde:	1e5a      	subs	r2, r3, #1
 8007ce0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007ce4:	bf88      	it	hi
 8007ce6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007cea:	4627      	mov	r7, r4
 8007cec:	bf82      	ittt	hi
 8007cee:	eb03 0905 	addhi.w	r9, r3, r5
 8007cf2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007cf6:	60a3      	strhi	r3, [r4, #8]
 8007cf8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007cfc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007d00:	bf98      	it	ls
 8007d02:	f04f 0900 	movls.w	r9, #0
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	463d      	mov	r5, r7
 8007d0a:	f04f 0b00 	mov.w	fp, #0
 8007d0e:	6831      	ldr	r1, [r6, #0]
 8007d10:	ab03      	add	r3, sp, #12
 8007d12:	7809      	ldrb	r1, [r1, #0]
 8007d14:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	f7f8 fa79 	bl	8000210 <memchr>
 8007d1e:	b328      	cbz	r0, 8007d6c <_scanf_i+0xb8>
 8007d20:	f1bb 0f01 	cmp.w	fp, #1
 8007d24:	d159      	bne.n	8007dda <_scanf_i+0x126>
 8007d26:	6862      	ldr	r2, [r4, #4]
 8007d28:	b92a      	cbnz	r2, 8007d36 <_scanf_i+0x82>
 8007d2a:	6822      	ldr	r2, [r4, #0]
 8007d2c:	2308      	movs	r3, #8
 8007d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d32:	6063      	str	r3, [r4, #4]
 8007d34:	6022      	str	r2, [r4, #0]
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007d3c:	6022      	str	r2, [r4, #0]
 8007d3e:	68a2      	ldr	r2, [r4, #8]
 8007d40:	1e51      	subs	r1, r2, #1
 8007d42:	60a1      	str	r1, [r4, #8]
 8007d44:	b192      	cbz	r2, 8007d6c <_scanf_i+0xb8>
 8007d46:	6832      	ldr	r2, [r6, #0]
 8007d48:	1c51      	adds	r1, r2, #1
 8007d4a:	6031      	str	r1, [r6, #0]
 8007d4c:	7812      	ldrb	r2, [r2, #0]
 8007d4e:	f805 2b01 	strb.w	r2, [r5], #1
 8007d52:	6872      	ldr	r2, [r6, #4]
 8007d54:	3a01      	subs	r2, #1
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	6072      	str	r2, [r6, #4]
 8007d5a:	dc07      	bgt.n	8007d6c <_scanf_i+0xb8>
 8007d5c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007d60:	4631      	mov	r1, r6
 8007d62:	4650      	mov	r0, sl
 8007d64:	4790      	blx	r2
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f040 8085 	bne.w	8007e76 <_scanf_i+0x1c2>
 8007d6c:	f10b 0b01 	add.w	fp, fp, #1
 8007d70:	f1bb 0f03 	cmp.w	fp, #3
 8007d74:	d1cb      	bne.n	8007d0e <_scanf_i+0x5a>
 8007d76:	6863      	ldr	r3, [r4, #4]
 8007d78:	b90b      	cbnz	r3, 8007d7e <_scanf_i+0xca>
 8007d7a:	230a      	movs	r3, #10
 8007d7c:	6063      	str	r3, [r4, #4]
 8007d7e:	6863      	ldr	r3, [r4, #4]
 8007d80:	4945      	ldr	r1, [pc, #276]	; (8007e98 <_scanf_i+0x1e4>)
 8007d82:	6960      	ldr	r0, [r4, #20]
 8007d84:	1ac9      	subs	r1, r1, r3
 8007d86:	f000 f937 	bl	8007ff8 <__sccl>
 8007d8a:	f04f 0b00 	mov.w	fp, #0
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d03d      	beq.n	8007e12 <_scanf_i+0x15e>
 8007d96:	6831      	ldr	r1, [r6, #0]
 8007d98:	6960      	ldr	r0, [r4, #20]
 8007d9a:	f891 c000 	ldrb.w	ip, [r1]
 8007d9e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d035      	beq.n	8007e12 <_scanf_i+0x15e>
 8007da6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007daa:	d124      	bne.n	8007df6 <_scanf_i+0x142>
 8007dac:	0510      	lsls	r0, r2, #20
 8007dae:	d522      	bpl.n	8007df6 <_scanf_i+0x142>
 8007db0:	f10b 0b01 	add.w	fp, fp, #1
 8007db4:	f1b9 0f00 	cmp.w	r9, #0
 8007db8:	d003      	beq.n	8007dc2 <_scanf_i+0x10e>
 8007dba:	3301      	adds	r3, #1
 8007dbc:	f109 39ff 	add.w	r9, r9, #4294967295
 8007dc0:	60a3      	str	r3, [r4, #8]
 8007dc2:	6873      	ldr	r3, [r6, #4]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	6073      	str	r3, [r6, #4]
 8007dca:	dd1b      	ble.n	8007e04 <_scanf_i+0x150>
 8007dcc:	6833      	ldr	r3, [r6, #0]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	6033      	str	r3, [r6, #0]
 8007dd2:	68a3      	ldr	r3, [r4, #8]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	60a3      	str	r3, [r4, #8]
 8007dd8:	e7d9      	b.n	8007d8e <_scanf_i+0xda>
 8007dda:	f1bb 0f02 	cmp.w	fp, #2
 8007dde:	d1ae      	bne.n	8007d3e <_scanf_i+0x8a>
 8007de0:	6822      	ldr	r2, [r4, #0]
 8007de2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007de6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007dea:	d1bf      	bne.n	8007d6c <_scanf_i+0xb8>
 8007dec:	2310      	movs	r3, #16
 8007dee:	6063      	str	r3, [r4, #4]
 8007df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007df4:	e7a2      	b.n	8007d3c <_scanf_i+0x88>
 8007df6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007dfa:	6022      	str	r2, [r4, #0]
 8007dfc:	780b      	ldrb	r3, [r1, #0]
 8007dfe:	f805 3b01 	strb.w	r3, [r5], #1
 8007e02:	e7de      	b.n	8007dc2 <_scanf_i+0x10e>
 8007e04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4650      	mov	r0, sl
 8007e0c:	4798      	blx	r3
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d0df      	beq.n	8007dd2 <_scanf_i+0x11e>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	05d9      	lsls	r1, r3, #23
 8007e16:	d50d      	bpl.n	8007e34 <_scanf_i+0x180>
 8007e18:	42bd      	cmp	r5, r7
 8007e1a:	d909      	bls.n	8007e30 <_scanf_i+0x17c>
 8007e1c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007e20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e24:	4632      	mov	r2, r6
 8007e26:	4650      	mov	r0, sl
 8007e28:	4798      	blx	r3
 8007e2a:	f105 39ff 	add.w	r9, r5, #4294967295
 8007e2e:	464d      	mov	r5, r9
 8007e30:	42bd      	cmp	r5, r7
 8007e32:	d028      	beq.n	8007e86 <_scanf_i+0x1d2>
 8007e34:	6822      	ldr	r2, [r4, #0]
 8007e36:	f012 0210 	ands.w	r2, r2, #16
 8007e3a:	d113      	bne.n	8007e64 <_scanf_i+0x1b0>
 8007e3c:	702a      	strb	r2, [r5, #0]
 8007e3e:	6863      	ldr	r3, [r4, #4]
 8007e40:	9e01      	ldr	r6, [sp, #4]
 8007e42:	4639      	mov	r1, r7
 8007e44:	4650      	mov	r0, sl
 8007e46:	47b0      	blx	r6
 8007e48:	f8d8 3000 	ldr.w	r3, [r8]
 8007e4c:	6821      	ldr	r1, [r4, #0]
 8007e4e:	1d1a      	adds	r2, r3, #4
 8007e50:	f8c8 2000 	str.w	r2, [r8]
 8007e54:	f011 0f20 	tst.w	r1, #32
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	d00f      	beq.n	8007e7c <_scanf_i+0x1c8>
 8007e5c:	6018      	str	r0, [r3, #0]
 8007e5e:	68e3      	ldr	r3, [r4, #12]
 8007e60:	3301      	adds	r3, #1
 8007e62:	60e3      	str	r3, [r4, #12]
 8007e64:	6923      	ldr	r3, [r4, #16]
 8007e66:	1bed      	subs	r5, r5, r7
 8007e68:	445d      	add	r5, fp
 8007e6a:	442b      	add	r3, r5
 8007e6c:	6123      	str	r3, [r4, #16]
 8007e6e:	2000      	movs	r0, #0
 8007e70:	b007      	add	sp, #28
 8007e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e76:	f04f 0b00 	mov.w	fp, #0
 8007e7a:	e7ca      	b.n	8007e12 <_scanf_i+0x15e>
 8007e7c:	07ca      	lsls	r2, r1, #31
 8007e7e:	bf4c      	ite	mi
 8007e80:	8018      	strhmi	r0, [r3, #0]
 8007e82:	6018      	strpl	r0, [r3, #0]
 8007e84:	e7eb      	b.n	8007e5e <_scanf_i+0x1aa>
 8007e86:	2001      	movs	r0, #1
 8007e88:	e7f2      	b.n	8007e70 <_scanf_i+0x1bc>
 8007e8a:	bf00      	nop
 8007e8c:	08009014 	.word	0x08009014
 8007e90:	08008a05 	.word	0x08008a05
 8007e94:	080075a9 	.word	0x080075a9
 8007e98:	080093d2 	.word	0x080093d2

08007e9c <__sflush_r>:
 8007e9c:	898a      	ldrh	r2, [r1, #12]
 8007e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	0710      	lsls	r0, r2, #28
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	d458      	bmi.n	8007f5c <__sflush_r+0xc0>
 8007eaa:	684b      	ldr	r3, [r1, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dc05      	bgt.n	8007ebc <__sflush_r+0x20>
 8007eb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	dc02      	bgt.n	8007ebc <__sflush_r+0x20>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ebe:	2e00      	cmp	r6, #0
 8007ec0:	d0f9      	beq.n	8007eb6 <__sflush_r+0x1a>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ec8:	682f      	ldr	r7, [r5, #0]
 8007eca:	6a21      	ldr	r1, [r4, #32]
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	d032      	beq.n	8007f36 <__sflush_r+0x9a>
 8007ed0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	075a      	lsls	r2, r3, #29
 8007ed6:	d505      	bpl.n	8007ee4 <__sflush_r+0x48>
 8007ed8:	6863      	ldr	r3, [r4, #4]
 8007eda:	1ac0      	subs	r0, r0, r3
 8007edc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ede:	b10b      	cbz	r3, 8007ee4 <__sflush_r+0x48>
 8007ee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ee2:	1ac0      	subs	r0, r0, r3
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eea:	6a21      	ldr	r1, [r4, #32]
 8007eec:	4628      	mov	r0, r5
 8007eee:	47b0      	blx	r6
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	d106      	bne.n	8007f04 <__sflush_r+0x68>
 8007ef6:	6829      	ldr	r1, [r5, #0]
 8007ef8:	291d      	cmp	r1, #29
 8007efa:	d82b      	bhi.n	8007f54 <__sflush_r+0xb8>
 8007efc:	4a29      	ldr	r2, [pc, #164]	; (8007fa4 <__sflush_r+0x108>)
 8007efe:	410a      	asrs	r2, r1
 8007f00:	07d6      	lsls	r6, r2, #31
 8007f02:	d427      	bmi.n	8007f54 <__sflush_r+0xb8>
 8007f04:	2200      	movs	r2, #0
 8007f06:	6062      	str	r2, [r4, #4]
 8007f08:	04d9      	lsls	r1, r3, #19
 8007f0a:	6922      	ldr	r2, [r4, #16]
 8007f0c:	6022      	str	r2, [r4, #0]
 8007f0e:	d504      	bpl.n	8007f1a <__sflush_r+0x7e>
 8007f10:	1c42      	adds	r2, r0, #1
 8007f12:	d101      	bne.n	8007f18 <__sflush_r+0x7c>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b903      	cbnz	r3, 8007f1a <__sflush_r+0x7e>
 8007f18:	6560      	str	r0, [r4, #84]	; 0x54
 8007f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f1c:	602f      	str	r7, [r5, #0]
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	d0c9      	beq.n	8007eb6 <__sflush_r+0x1a>
 8007f22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f26:	4299      	cmp	r1, r3
 8007f28:	d002      	beq.n	8007f30 <__sflush_r+0x94>
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f7fd fefa 	bl	8005d24 <_free_r>
 8007f30:	2000      	movs	r0, #0
 8007f32:	6360      	str	r0, [r4, #52]	; 0x34
 8007f34:	e7c0      	b.n	8007eb8 <__sflush_r+0x1c>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4628      	mov	r0, r5
 8007f3a:	47b0      	blx	r6
 8007f3c:	1c41      	adds	r1, r0, #1
 8007f3e:	d1c8      	bne.n	8007ed2 <__sflush_r+0x36>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0c5      	beq.n	8007ed2 <__sflush_r+0x36>
 8007f46:	2b1d      	cmp	r3, #29
 8007f48:	d001      	beq.n	8007f4e <__sflush_r+0xb2>
 8007f4a:	2b16      	cmp	r3, #22
 8007f4c:	d101      	bne.n	8007f52 <__sflush_r+0xb6>
 8007f4e:	602f      	str	r7, [r5, #0]
 8007f50:	e7b1      	b.n	8007eb6 <__sflush_r+0x1a>
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f58:	81a3      	strh	r3, [r4, #12]
 8007f5a:	e7ad      	b.n	8007eb8 <__sflush_r+0x1c>
 8007f5c:	690f      	ldr	r7, [r1, #16]
 8007f5e:	2f00      	cmp	r7, #0
 8007f60:	d0a9      	beq.n	8007eb6 <__sflush_r+0x1a>
 8007f62:	0793      	lsls	r3, r2, #30
 8007f64:	680e      	ldr	r6, [r1, #0]
 8007f66:	bf08      	it	eq
 8007f68:	694b      	ldreq	r3, [r1, #20]
 8007f6a:	600f      	str	r7, [r1, #0]
 8007f6c:	bf18      	it	ne
 8007f6e:	2300      	movne	r3, #0
 8007f70:	eba6 0807 	sub.w	r8, r6, r7
 8007f74:	608b      	str	r3, [r1, #8]
 8007f76:	f1b8 0f00 	cmp.w	r8, #0
 8007f7a:	dd9c      	ble.n	8007eb6 <__sflush_r+0x1a>
 8007f7c:	6a21      	ldr	r1, [r4, #32]
 8007f7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f80:	4643      	mov	r3, r8
 8007f82:	463a      	mov	r2, r7
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b0      	blx	r6
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	dc06      	bgt.n	8007f9a <__sflush_r+0xfe>
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295
 8007f98:	e78e      	b.n	8007eb8 <__sflush_r+0x1c>
 8007f9a:	4407      	add	r7, r0
 8007f9c:	eba8 0800 	sub.w	r8, r8, r0
 8007fa0:	e7e9      	b.n	8007f76 <__sflush_r+0xda>
 8007fa2:	bf00      	nop
 8007fa4:	dfbffffe 	.word	0xdfbffffe

08007fa8 <_fflush_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	690b      	ldr	r3, [r1, #16]
 8007fac:	4605      	mov	r5, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	b913      	cbnz	r3, 8007fb8 <_fflush_r+0x10>
 8007fb2:	2500      	movs	r5, #0
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	bd38      	pop	{r3, r4, r5, pc}
 8007fb8:	b118      	cbz	r0, 8007fc2 <_fflush_r+0x1a>
 8007fba:	6a03      	ldr	r3, [r0, #32]
 8007fbc:	b90b      	cbnz	r3, 8007fc2 <_fflush_r+0x1a>
 8007fbe:	f7fc fec9 	bl	8004d54 <__sinit>
 8007fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0f3      	beq.n	8007fb2 <_fflush_r+0xa>
 8007fca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fcc:	07d0      	lsls	r0, r2, #31
 8007fce:	d404      	bmi.n	8007fda <_fflush_r+0x32>
 8007fd0:	0599      	lsls	r1, r3, #22
 8007fd2:	d402      	bmi.n	8007fda <_fflush_r+0x32>
 8007fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fd6:	f7fd f818 	bl	800500a <__retarget_lock_acquire_recursive>
 8007fda:	4628      	mov	r0, r5
 8007fdc:	4621      	mov	r1, r4
 8007fde:	f7ff ff5d 	bl	8007e9c <__sflush_r>
 8007fe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fe4:	07da      	lsls	r2, r3, #31
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	d4e4      	bmi.n	8007fb4 <_fflush_r+0xc>
 8007fea:	89a3      	ldrh	r3, [r4, #12]
 8007fec:	059b      	lsls	r3, r3, #22
 8007fee:	d4e1      	bmi.n	8007fb4 <_fflush_r+0xc>
 8007ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ff2:	f7fd f80b 	bl	800500c <__retarget_lock_release_recursive>
 8007ff6:	e7dd      	b.n	8007fb4 <_fflush_r+0xc>

08007ff8 <__sccl>:
 8007ff8:	b570      	push	{r4, r5, r6, lr}
 8007ffa:	780b      	ldrb	r3, [r1, #0]
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	2b5e      	cmp	r3, #94	; 0x5e
 8008000:	bf0b      	itete	eq
 8008002:	784b      	ldrbeq	r3, [r1, #1]
 8008004:	1c4a      	addne	r2, r1, #1
 8008006:	1c8a      	addeq	r2, r1, #2
 8008008:	2100      	movne	r1, #0
 800800a:	bf08      	it	eq
 800800c:	2101      	moveq	r1, #1
 800800e:	3801      	subs	r0, #1
 8008010:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008014:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008018:	42a8      	cmp	r0, r5
 800801a:	d1fb      	bne.n	8008014 <__sccl+0x1c>
 800801c:	b90b      	cbnz	r3, 8008022 <__sccl+0x2a>
 800801e:	1e50      	subs	r0, r2, #1
 8008020:	bd70      	pop	{r4, r5, r6, pc}
 8008022:	f081 0101 	eor.w	r1, r1, #1
 8008026:	54e1      	strb	r1, [r4, r3]
 8008028:	4610      	mov	r0, r2
 800802a:	4602      	mov	r2, r0
 800802c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008030:	2d2d      	cmp	r5, #45	; 0x2d
 8008032:	d005      	beq.n	8008040 <__sccl+0x48>
 8008034:	2d5d      	cmp	r5, #93	; 0x5d
 8008036:	d016      	beq.n	8008066 <__sccl+0x6e>
 8008038:	2d00      	cmp	r5, #0
 800803a:	d0f1      	beq.n	8008020 <__sccl+0x28>
 800803c:	462b      	mov	r3, r5
 800803e:	e7f2      	b.n	8008026 <__sccl+0x2e>
 8008040:	7846      	ldrb	r6, [r0, #1]
 8008042:	2e5d      	cmp	r6, #93	; 0x5d
 8008044:	d0fa      	beq.n	800803c <__sccl+0x44>
 8008046:	42b3      	cmp	r3, r6
 8008048:	dcf8      	bgt.n	800803c <__sccl+0x44>
 800804a:	3002      	adds	r0, #2
 800804c:	461a      	mov	r2, r3
 800804e:	3201      	adds	r2, #1
 8008050:	4296      	cmp	r6, r2
 8008052:	54a1      	strb	r1, [r4, r2]
 8008054:	dcfb      	bgt.n	800804e <__sccl+0x56>
 8008056:	1af2      	subs	r2, r6, r3
 8008058:	3a01      	subs	r2, #1
 800805a:	1c5d      	adds	r5, r3, #1
 800805c:	42b3      	cmp	r3, r6
 800805e:	bfa8      	it	ge
 8008060:	2200      	movge	r2, #0
 8008062:	18ab      	adds	r3, r5, r2
 8008064:	e7e1      	b.n	800802a <__sccl+0x32>
 8008066:	4610      	mov	r0, r2
 8008068:	e7da      	b.n	8008020 <__sccl+0x28>

0800806a <__submore>:
 800806a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806e:	460c      	mov	r4, r1
 8008070:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008072:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008076:	4299      	cmp	r1, r3
 8008078:	d11d      	bne.n	80080b6 <__submore+0x4c>
 800807a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800807e:	f7fd fec5 	bl	8005e0c <_malloc_r>
 8008082:	b918      	cbnz	r0, 800808c <__submore+0x22>
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800808c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008090:	63a3      	str	r3, [r4, #56]	; 0x38
 8008092:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008096:	6360      	str	r0, [r4, #52]	; 0x34
 8008098:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800809c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80080a0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80080a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80080a8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80080ac:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80080b0:	6020      	str	r0, [r4, #0]
 80080b2:	2000      	movs	r0, #0
 80080b4:	e7e8      	b.n	8008088 <__submore+0x1e>
 80080b6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80080b8:	0077      	lsls	r7, r6, #1
 80080ba:	463a      	mov	r2, r7
 80080bc:	f000 fc01 	bl	80088c2 <_realloc_r>
 80080c0:	4605      	mov	r5, r0
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d0de      	beq.n	8008084 <__submore+0x1a>
 80080c6:	eb00 0806 	add.w	r8, r0, r6
 80080ca:	4601      	mov	r1, r0
 80080cc:	4632      	mov	r2, r6
 80080ce:	4640      	mov	r0, r8
 80080d0:	f000 f842 	bl	8008158 <memcpy>
 80080d4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80080d8:	f8c4 8000 	str.w	r8, [r4]
 80080dc:	e7e9      	b.n	80080b2 <__submore+0x48>

080080de <memmove>:
 80080de:	4288      	cmp	r0, r1
 80080e0:	b510      	push	{r4, lr}
 80080e2:	eb01 0402 	add.w	r4, r1, r2
 80080e6:	d902      	bls.n	80080ee <memmove+0x10>
 80080e8:	4284      	cmp	r4, r0
 80080ea:	4623      	mov	r3, r4
 80080ec:	d807      	bhi.n	80080fe <memmove+0x20>
 80080ee:	1e43      	subs	r3, r0, #1
 80080f0:	42a1      	cmp	r1, r4
 80080f2:	d008      	beq.n	8008106 <memmove+0x28>
 80080f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080fc:	e7f8      	b.n	80080f0 <memmove+0x12>
 80080fe:	4402      	add	r2, r0
 8008100:	4601      	mov	r1, r0
 8008102:	428a      	cmp	r2, r1
 8008104:	d100      	bne.n	8008108 <memmove+0x2a>
 8008106:	bd10      	pop	{r4, pc}
 8008108:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800810c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008110:	e7f7      	b.n	8008102 <memmove+0x24>

08008112 <strncmp>:
 8008112:	b510      	push	{r4, lr}
 8008114:	b16a      	cbz	r2, 8008132 <strncmp+0x20>
 8008116:	3901      	subs	r1, #1
 8008118:	1884      	adds	r4, r0, r2
 800811a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800811e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008122:	429a      	cmp	r2, r3
 8008124:	d103      	bne.n	800812e <strncmp+0x1c>
 8008126:	42a0      	cmp	r0, r4
 8008128:	d001      	beq.n	800812e <strncmp+0x1c>
 800812a:	2a00      	cmp	r2, #0
 800812c:	d1f5      	bne.n	800811a <strncmp+0x8>
 800812e:	1ad0      	subs	r0, r2, r3
 8008130:	bd10      	pop	{r4, pc}
 8008132:	4610      	mov	r0, r2
 8008134:	e7fc      	b.n	8008130 <strncmp+0x1e>
	...

08008138 <_sbrk_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d06      	ldr	r5, [pc, #24]	; (8008154 <_sbrk_r+0x1c>)
 800813c:	2300      	movs	r3, #0
 800813e:	4604      	mov	r4, r0
 8008140:	4608      	mov	r0, r1
 8008142:	602b      	str	r3, [r5, #0]
 8008144:	f7f9 fbb0 	bl	80018a8 <_sbrk>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d102      	bne.n	8008152 <_sbrk_r+0x1a>
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	b103      	cbz	r3, 8008152 <_sbrk_r+0x1a>
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	bd38      	pop	{r3, r4, r5, pc}
 8008154:	20000a84 	.word	0x20000a84

08008158 <memcpy>:
 8008158:	440a      	add	r2, r1
 800815a:	4291      	cmp	r1, r2
 800815c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008160:	d100      	bne.n	8008164 <memcpy+0xc>
 8008162:	4770      	bx	lr
 8008164:	b510      	push	{r4, lr}
 8008166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800816a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800816e:	4291      	cmp	r1, r2
 8008170:	d1f9      	bne.n	8008166 <memcpy+0xe>
 8008172:	bd10      	pop	{r4, pc}
 8008174:	0000      	movs	r0, r0
	...

08008178 <nan>:
 8008178:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008180 <nan+0x8>
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	00000000 	.word	0x00000000
 8008184:	7ff80000 	.word	0x7ff80000

08008188 <__assert_func>:
 8008188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800818a:	4614      	mov	r4, r2
 800818c:	461a      	mov	r2, r3
 800818e:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <__assert_func+0x2c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4605      	mov	r5, r0
 8008194:	68d8      	ldr	r0, [r3, #12]
 8008196:	b14c      	cbz	r4, 80081ac <__assert_func+0x24>
 8008198:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <__assert_func+0x30>)
 800819a:	9100      	str	r1, [sp, #0]
 800819c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081a0:	4906      	ldr	r1, [pc, #24]	; (80081bc <__assert_func+0x34>)
 80081a2:	462b      	mov	r3, r5
 80081a4:	f000 fc3e 	bl	8008a24 <fiprintf>
 80081a8:	f000 fc4e 	bl	8008a48 <abort>
 80081ac:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <__assert_func+0x38>)
 80081ae:	461c      	mov	r4, r3
 80081b0:	e7f3      	b.n	800819a <__assert_func+0x12>
 80081b2:	bf00      	nop
 80081b4:	20000064 	.word	0x20000064
 80081b8:	080093e5 	.word	0x080093e5
 80081bc:	080093f2 	.word	0x080093f2
 80081c0:	08009420 	.word	0x08009420

080081c4 <_calloc_r>:
 80081c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081c6:	fba1 2402 	umull	r2, r4, r1, r2
 80081ca:	b94c      	cbnz	r4, 80081e0 <_calloc_r+0x1c>
 80081cc:	4611      	mov	r1, r2
 80081ce:	9201      	str	r2, [sp, #4]
 80081d0:	f7fd fe1c 	bl	8005e0c <_malloc_r>
 80081d4:	9a01      	ldr	r2, [sp, #4]
 80081d6:	4605      	mov	r5, r0
 80081d8:	b930      	cbnz	r0, 80081e8 <_calloc_r+0x24>
 80081da:	4628      	mov	r0, r5
 80081dc:	b003      	add	sp, #12
 80081de:	bd30      	pop	{r4, r5, pc}
 80081e0:	220c      	movs	r2, #12
 80081e2:	6002      	str	r2, [r0, #0]
 80081e4:	2500      	movs	r5, #0
 80081e6:	e7f8      	b.n	80081da <_calloc_r+0x16>
 80081e8:	4621      	mov	r1, r4
 80081ea:	f7fc fe7a 	bl	8004ee2 <memset>
 80081ee:	e7f4      	b.n	80081da <_calloc_r+0x16>

080081f0 <rshift>:
 80081f0:	6903      	ldr	r3, [r0, #16]
 80081f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80081f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80081fe:	f100 0414 	add.w	r4, r0, #20
 8008202:	dd45      	ble.n	8008290 <rshift+0xa0>
 8008204:	f011 011f 	ands.w	r1, r1, #31
 8008208:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800820c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008210:	d10c      	bne.n	800822c <rshift+0x3c>
 8008212:	f100 0710 	add.w	r7, r0, #16
 8008216:	4629      	mov	r1, r5
 8008218:	42b1      	cmp	r1, r6
 800821a:	d334      	bcc.n	8008286 <rshift+0x96>
 800821c:	1a9b      	subs	r3, r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	1eea      	subs	r2, r5, #3
 8008222:	4296      	cmp	r6, r2
 8008224:	bf38      	it	cc
 8008226:	2300      	movcc	r3, #0
 8008228:	4423      	add	r3, r4
 800822a:	e015      	b.n	8008258 <rshift+0x68>
 800822c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008230:	f1c1 0820 	rsb	r8, r1, #32
 8008234:	40cf      	lsrs	r7, r1
 8008236:	f105 0e04 	add.w	lr, r5, #4
 800823a:	46a1      	mov	r9, r4
 800823c:	4576      	cmp	r6, lr
 800823e:	46f4      	mov	ip, lr
 8008240:	d815      	bhi.n	800826e <rshift+0x7e>
 8008242:	1a9a      	subs	r2, r3, r2
 8008244:	0092      	lsls	r2, r2, #2
 8008246:	3a04      	subs	r2, #4
 8008248:	3501      	adds	r5, #1
 800824a:	42ae      	cmp	r6, r5
 800824c:	bf38      	it	cc
 800824e:	2200      	movcc	r2, #0
 8008250:	18a3      	adds	r3, r4, r2
 8008252:	50a7      	str	r7, [r4, r2]
 8008254:	b107      	cbz	r7, 8008258 <rshift+0x68>
 8008256:	3304      	adds	r3, #4
 8008258:	1b1a      	subs	r2, r3, r4
 800825a:	42a3      	cmp	r3, r4
 800825c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008260:	bf08      	it	eq
 8008262:	2300      	moveq	r3, #0
 8008264:	6102      	str	r2, [r0, #16]
 8008266:	bf08      	it	eq
 8008268:	6143      	streq	r3, [r0, #20]
 800826a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800826e:	f8dc c000 	ldr.w	ip, [ip]
 8008272:	fa0c fc08 	lsl.w	ip, ip, r8
 8008276:	ea4c 0707 	orr.w	r7, ip, r7
 800827a:	f849 7b04 	str.w	r7, [r9], #4
 800827e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008282:	40cf      	lsrs	r7, r1
 8008284:	e7da      	b.n	800823c <rshift+0x4c>
 8008286:	f851 cb04 	ldr.w	ip, [r1], #4
 800828a:	f847 cf04 	str.w	ip, [r7, #4]!
 800828e:	e7c3      	b.n	8008218 <rshift+0x28>
 8008290:	4623      	mov	r3, r4
 8008292:	e7e1      	b.n	8008258 <rshift+0x68>

08008294 <__hexdig_fun>:
 8008294:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008298:	2b09      	cmp	r3, #9
 800829a:	d802      	bhi.n	80082a2 <__hexdig_fun+0xe>
 800829c:	3820      	subs	r0, #32
 800829e:	b2c0      	uxtb	r0, r0
 80082a0:	4770      	bx	lr
 80082a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d801      	bhi.n	80082ae <__hexdig_fun+0x1a>
 80082aa:	3847      	subs	r0, #71	; 0x47
 80082ac:	e7f7      	b.n	800829e <__hexdig_fun+0xa>
 80082ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	d801      	bhi.n	80082ba <__hexdig_fun+0x26>
 80082b6:	3827      	subs	r0, #39	; 0x27
 80082b8:	e7f1      	b.n	800829e <__hexdig_fun+0xa>
 80082ba:	2000      	movs	r0, #0
 80082bc:	4770      	bx	lr
	...

080082c0 <__gethex>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	4617      	mov	r7, r2
 80082c6:	680a      	ldr	r2, [r1, #0]
 80082c8:	b085      	sub	sp, #20
 80082ca:	f102 0b02 	add.w	fp, r2, #2
 80082ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80082d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80082d6:	4681      	mov	r9, r0
 80082d8:	468a      	mov	sl, r1
 80082da:	9302      	str	r3, [sp, #8]
 80082dc:	32fe      	adds	r2, #254	; 0xfe
 80082de:	eb02 030b 	add.w	r3, r2, fp
 80082e2:	46d8      	mov	r8, fp
 80082e4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	2830      	cmp	r0, #48	; 0x30
 80082ec:	d0f7      	beq.n	80082de <__gethex+0x1e>
 80082ee:	f7ff ffd1 	bl	8008294 <__hexdig_fun>
 80082f2:	4604      	mov	r4, r0
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d138      	bne.n	800836a <__gethex+0xaa>
 80082f8:	49a7      	ldr	r1, [pc, #668]	; (8008598 <__gethex+0x2d8>)
 80082fa:	2201      	movs	r2, #1
 80082fc:	4640      	mov	r0, r8
 80082fe:	f7ff ff08 	bl	8008112 <strncmp>
 8008302:	4606      	mov	r6, r0
 8008304:	2800      	cmp	r0, #0
 8008306:	d169      	bne.n	80083dc <__gethex+0x11c>
 8008308:	f898 0001 	ldrb.w	r0, [r8, #1]
 800830c:	465d      	mov	r5, fp
 800830e:	f7ff ffc1 	bl	8008294 <__hexdig_fun>
 8008312:	2800      	cmp	r0, #0
 8008314:	d064      	beq.n	80083e0 <__gethex+0x120>
 8008316:	465a      	mov	r2, fp
 8008318:	7810      	ldrb	r0, [r2, #0]
 800831a:	2830      	cmp	r0, #48	; 0x30
 800831c:	4690      	mov	r8, r2
 800831e:	f102 0201 	add.w	r2, r2, #1
 8008322:	d0f9      	beq.n	8008318 <__gethex+0x58>
 8008324:	f7ff ffb6 	bl	8008294 <__hexdig_fun>
 8008328:	2301      	movs	r3, #1
 800832a:	fab0 f480 	clz	r4, r0
 800832e:	0964      	lsrs	r4, r4, #5
 8008330:	465e      	mov	r6, fp
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	4642      	mov	r2, r8
 8008336:	4615      	mov	r5, r2
 8008338:	3201      	adds	r2, #1
 800833a:	7828      	ldrb	r0, [r5, #0]
 800833c:	f7ff ffaa 	bl	8008294 <__hexdig_fun>
 8008340:	2800      	cmp	r0, #0
 8008342:	d1f8      	bne.n	8008336 <__gethex+0x76>
 8008344:	4994      	ldr	r1, [pc, #592]	; (8008598 <__gethex+0x2d8>)
 8008346:	2201      	movs	r2, #1
 8008348:	4628      	mov	r0, r5
 800834a:	f7ff fee2 	bl	8008112 <strncmp>
 800834e:	b978      	cbnz	r0, 8008370 <__gethex+0xb0>
 8008350:	b946      	cbnz	r6, 8008364 <__gethex+0xa4>
 8008352:	1c6e      	adds	r6, r5, #1
 8008354:	4632      	mov	r2, r6
 8008356:	4615      	mov	r5, r2
 8008358:	3201      	adds	r2, #1
 800835a:	7828      	ldrb	r0, [r5, #0]
 800835c:	f7ff ff9a 	bl	8008294 <__hexdig_fun>
 8008360:	2800      	cmp	r0, #0
 8008362:	d1f8      	bne.n	8008356 <__gethex+0x96>
 8008364:	1b73      	subs	r3, r6, r5
 8008366:	009e      	lsls	r6, r3, #2
 8008368:	e004      	b.n	8008374 <__gethex+0xb4>
 800836a:	2400      	movs	r4, #0
 800836c:	4626      	mov	r6, r4
 800836e:	e7e1      	b.n	8008334 <__gethex+0x74>
 8008370:	2e00      	cmp	r6, #0
 8008372:	d1f7      	bne.n	8008364 <__gethex+0xa4>
 8008374:	782b      	ldrb	r3, [r5, #0]
 8008376:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800837a:	2b50      	cmp	r3, #80	; 0x50
 800837c:	d13d      	bne.n	80083fa <__gethex+0x13a>
 800837e:	786b      	ldrb	r3, [r5, #1]
 8008380:	2b2b      	cmp	r3, #43	; 0x2b
 8008382:	d02f      	beq.n	80083e4 <__gethex+0x124>
 8008384:	2b2d      	cmp	r3, #45	; 0x2d
 8008386:	d031      	beq.n	80083ec <__gethex+0x12c>
 8008388:	1c69      	adds	r1, r5, #1
 800838a:	f04f 0b00 	mov.w	fp, #0
 800838e:	7808      	ldrb	r0, [r1, #0]
 8008390:	f7ff ff80 	bl	8008294 <__hexdig_fun>
 8008394:	1e42      	subs	r2, r0, #1
 8008396:	b2d2      	uxtb	r2, r2
 8008398:	2a18      	cmp	r2, #24
 800839a:	d82e      	bhi.n	80083fa <__gethex+0x13a>
 800839c:	f1a0 0210 	sub.w	r2, r0, #16
 80083a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80083a4:	f7ff ff76 	bl	8008294 <__hexdig_fun>
 80083a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80083ac:	fa5f fc8c 	uxtb.w	ip, ip
 80083b0:	f1bc 0f18 	cmp.w	ip, #24
 80083b4:	d91d      	bls.n	80083f2 <__gethex+0x132>
 80083b6:	f1bb 0f00 	cmp.w	fp, #0
 80083ba:	d000      	beq.n	80083be <__gethex+0xfe>
 80083bc:	4252      	negs	r2, r2
 80083be:	4416      	add	r6, r2
 80083c0:	f8ca 1000 	str.w	r1, [sl]
 80083c4:	b1dc      	cbz	r4, 80083fe <__gethex+0x13e>
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	bf14      	ite	ne
 80083cc:	f04f 0800 	movne.w	r8, #0
 80083d0:	f04f 0806 	moveq.w	r8, #6
 80083d4:	4640      	mov	r0, r8
 80083d6:	b005      	add	sp, #20
 80083d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083dc:	4645      	mov	r5, r8
 80083de:	4626      	mov	r6, r4
 80083e0:	2401      	movs	r4, #1
 80083e2:	e7c7      	b.n	8008374 <__gethex+0xb4>
 80083e4:	f04f 0b00 	mov.w	fp, #0
 80083e8:	1ca9      	adds	r1, r5, #2
 80083ea:	e7d0      	b.n	800838e <__gethex+0xce>
 80083ec:	f04f 0b01 	mov.w	fp, #1
 80083f0:	e7fa      	b.n	80083e8 <__gethex+0x128>
 80083f2:	230a      	movs	r3, #10
 80083f4:	fb03 0002 	mla	r0, r3, r2, r0
 80083f8:	e7d0      	b.n	800839c <__gethex+0xdc>
 80083fa:	4629      	mov	r1, r5
 80083fc:	e7e0      	b.n	80083c0 <__gethex+0x100>
 80083fe:	eba5 0308 	sub.w	r3, r5, r8
 8008402:	3b01      	subs	r3, #1
 8008404:	4621      	mov	r1, r4
 8008406:	2b07      	cmp	r3, #7
 8008408:	dc0a      	bgt.n	8008420 <__gethex+0x160>
 800840a:	4648      	mov	r0, r9
 800840c:	f7fd fd8a 	bl	8005f24 <_Balloc>
 8008410:	4604      	mov	r4, r0
 8008412:	b940      	cbnz	r0, 8008426 <__gethex+0x166>
 8008414:	4b61      	ldr	r3, [pc, #388]	; (800859c <__gethex+0x2dc>)
 8008416:	4602      	mov	r2, r0
 8008418:	21e4      	movs	r1, #228	; 0xe4
 800841a:	4861      	ldr	r0, [pc, #388]	; (80085a0 <__gethex+0x2e0>)
 800841c:	f7ff feb4 	bl	8008188 <__assert_func>
 8008420:	3101      	adds	r1, #1
 8008422:	105b      	asrs	r3, r3, #1
 8008424:	e7ef      	b.n	8008406 <__gethex+0x146>
 8008426:	f100 0a14 	add.w	sl, r0, #20
 800842a:	2300      	movs	r3, #0
 800842c:	495a      	ldr	r1, [pc, #360]	; (8008598 <__gethex+0x2d8>)
 800842e:	f8cd a004 	str.w	sl, [sp, #4]
 8008432:	469b      	mov	fp, r3
 8008434:	45a8      	cmp	r8, r5
 8008436:	d342      	bcc.n	80084be <__gethex+0x1fe>
 8008438:	9801      	ldr	r0, [sp, #4]
 800843a:	f840 bb04 	str.w	fp, [r0], #4
 800843e:	eba0 000a 	sub.w	r0, r0, sl
 8008442:	1080      	asrs	r0, r0, #2
 8008444:	6120      	str	r0, [r4, #16]
 8008446:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800844a:	4658      	mov	r0, fp
 800844c:	f7fd fe5c 	bl	8006108 <__hi0bits>
 8008450:	683d      	ldr	r5, [r7, #0]
 8008452:	eba8 0000 	sub.w	r0, r8, r0
 8008456:	42a8      	cmp	r0, r5
 8008458:	dd59      	ble.n	800850e <__gethex+0x24e>
 800845a:	eba0 0805 	sub.w	r8, r0, r5
 800845e:	4641      	mov	r1, r8
 8008460:	4620      	mov	r0, r4
 8008462:	f7fe f9eb 	bl	800683c <__any_on>
 8008466:	4683      	mov	fp, r0
 8008468:	b1b8      	cbz	r0, 800849a <__gethex+0x1da>
 800846a:	f108 33ff 	add.w	r3, r8, #4294967295
 800846e:	1159      	asrs	r1, r3, #5
 8008470:	f003 021f 	and.w	r2, r3, #31
 8008474:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008478:	f04f 0b01 	mov.w	fp, #1
 800847c:	fa0b f202 	lsl.w	r2, fp, r2
 8008480:	420a      	tst	r2, r1
 8008482:	d00a      	beq.n	800849a <__gethex+0x1da>
 8008484:	455b      	cmp	r3, fp
 8008486:	dd06      	ble.n	8008496 <__gethex+0x1d6>
 8008488:	f1a8 0102 	sub.w	r1, r8, #2
 800848c:	4620      	mov	r0, r4
 800848e:	f7fe f9d5 	bl	800683c <__any_on>
 8008492:	2800      	cmp	r0, #0
 8008494:	d138      	bne.n	8008508 <__gethex+0x248>
 8008496:	f04f 0b02 	mov.w	fp, #2
 800849a:	4641      	mov	r1, r8
 800849c:	4620      	mov	r0, r4
 800849e:	f7ff fea7 	bl	80081f0 <rshift>
 80084a2:	4446      	add	r6, r8
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	42b3      	cmp	r3, r6
 80084a8:	da41      	bge.n	800852e <__gethex+0x26e>
 80084aa:	4621      	mov	r1, r4
 80084ac:	4648      	mov	r0, r9
 80084ae:	f7fd fd79 	bl	8005fa4 <_Bfree>
 80084b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084b4:	2300      	movs	r3, #0
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80084bc:	e78a      	b.n	80083d4 <__gethex+0x114>
 80084be:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80084c2:	2a2e      	cmp	r2, #46	; 0x2e
 80084c4:	d014      	beq.n	80084f0 <__gethex+0x230>
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d106      	bne.n	80084d8 <__gethex+0x218>
 80084ca:	9b01      	ldr	r3, [sp, #4]
 80084cc:	f843 bb04 	str.w	fp, [r3], #4
 80084d0:	f04f 0b00 	mov.w	fp, #0
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	465b      	mov	r3, fp
 80084d8:	7828      	ldrb	r0, [r5, #0]
 80084da:	9303      	str	r3, [sp, #12]
 80084dc:	f7ff feda 	bl	8008294 <__hexdig_fun>
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	f000 000f 	and.w	r0, r0, #15
 80084e6:	4098      	lsls	r0, r3
 80084e8:	ea4b 0b00 	orr.w	fp, fp, r0
 80084ec:	3304      	adds	r3, #4
 80084ee:	e7a1      	b.n	8008434 <__gethex+0x174>
 80084f0:	45a8      	cmp	r8, r5
 80084f2:	d8e8      	bhi.n	80084c6 <__gethex+0x206>
 80084f4:	2201      	movs	r2, #1
 80084f6:	4628      	mov	r0, r5
 80084f8:	9303      	str	r3, [sp, #12]
 80084fa:	f7ff fe0a 	bl	8008112 <strncmp>
 80084fe:	4926      	ldr	r1, [pc, #152]	; (8008598 <__gethex+0x2d8>)
 8008500:	9b03      	ldr	r3, [sp, #12]
 8008502:	2800      	cmp	r0, #0
 8008504:	d1df      	bne.n	80084c6 <__gethex+0x206>
 8008506:	e795      	b.n	8008434 <__gethex+0x174>
 8008508:	f04f 0b03 	mov.w	fp, #3
 800850c:	e7c5      	b.n	800849a <__gethex+0x1da>
 800850e:	da0b      	bge.n	8008528 <__gethex+0x268>
 8008510:	eba5 0800 	sub.w	r8, r5, r0
 8008514:	4621      	mov	r1, r4
 8008516:	4642      	mov	r2, r8
 8008518:	4648      	mov	r0, r9
 800851a:	f7fd ff5d 	bl	80063d8 <__lshift>
 800851e:	eba6 0608 	sub.w	r6, r6, r8
 8008522:	4604      	mov	r4, r0
 8008524:	f100 0a14 	add.w	sl, r0, #20
 8008528:	f04f 0b00 	mov.w	fp, #0
 800852c:	e7ba      	b.n	80084a4 <__gethex+0x1e4>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	42b3      	cmp	r3, r6
 8008532:	dd73      	ble.n	800861c <__gethex+0x35c>
 8008534:	1b9e      	subs	r6, r3, r6
 8008536:	42b5      	cmp	r5, r6
 8008538:	dc34      	bgt.n	80085a4 <__gethex+0x2e4>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b02      	cmp	r3, #2
 800853e:	d023      	beq.n	8008588 <__gethex+0x2c8>
 8008540:	2b03      	cmp	r3, #3
 8008542:	d025      	beq.n	8008590 <__gethex+0x2d0>
 8008544:	2b01      	cmp	r3, #1
 8008546:	d115      	bne.n	8008574 <__gethex+0x2b4>
 8008548:	42b5      	cmp	r5, r6
 800854a:	d113      	bne.n	8008574 <__gethex+0x2b4>
 800854c:	2d01      	cmp	r5, #1
 800854e:	d10b      	bne.n	8008568 <__gethex+0x2a8>
 8008550:	9a02      	ldr	r2, [sp, #8]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	2301      	movs	r3, #1
 8008558:	6123      	str	r3, [r4, #16]
 800855a:	f8ca 3000 	str.w	r3, [sl]
 800855e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008560:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008564:	601c      	str	r4, [r3, #0]
 8008566:	e735      	b.n	80083d4 <__gethex+0x114>
 8008568:	1e69      	subs	r1, r5, #1
 800856a:	4620      	mov	r0, r4
 800856c:	f7fe f966 	bl	800683c <__any_on>
 8008570:	2800      	cmp	r0, #0
 8008572:	d1ed      	bne.n	8008550 <__gethex+0x290>
 8008574:	4621      	mov	r1, r4
 8008576:	4648      	mov	r0, r9
 8008578:	f7fd fd14 	bl	8005fa4 <_Bfree>
 800857c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800857e:	2300      	movs	r3, #0
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008586:	e725      	b.n	80083d4 <__gethex+0x114>
 8008588:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1f2      	bne.n	8008574 <__gethex+0x2b4>
 800858e:	e7df      	b.n	8008550 <__gethex+0x290>
 8008590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1dc      	bne.n	8008550 <__gethex+0x290>
 8008596:	e7ed      	b.n	8008574 <__gethex+0x2b4>
 8008598:	0800925c 	.word	0x0800925c
 800859c:	080090f3 	.word	0x080090f3
 80085a0:	08009421 	.word	0x08009421
 80085a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80085a8:	f1bb 0f00 	cmp.w	fp, #0
 80085ac:	d133      	bne.n	8008616 <__gethex+0x356>
 80085ae:	f1b8 0f00 	cmp.w	r8, #0
 80085b2:	d004      	beq.n	80085be <__gethex+0x2fe>
 80085b4:	4641      	mov	r1, r8
 80085b6:	4620      	mov	r0, r4
 80085b8:	f7fe f940 	bl	800683c <__any_on>
 80085bc:	4683      	mov	fp, r0
 80085be:	ea4f 1268 	mov.w	r2, r8, asr #5
 80085c2:	2301      	movs	r3, #1
 80085c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80085c8:	f008 081f 	and.w	r8, r8, #31
 80085cc:	fa03 f308 	lsl.w	r3, r3, r8
 80085d0:	4213      	tst	r3, r2
 80085d2:	4631      	mov	r1, r6
 80085d4:	4620      	mov	r0, r4
 80085d6:	bf18      	it	ne
 80085d8:	f04b 0b02 	orrne.w	fp, fp, #2
 80085dc:	1bad      	subs	r5, r5, r6
 80085de:	f7ff fe07 	bl	80081f0 <rshift>
 80085e2:	687e      	ldr	r6, [r7, #4]
 80085e4:	f04f 0802 	mov.w	r8, #2
 80085e8:	f1bb 0f00 	cmp.w	fp, #0
 80085ec:	d04a      	beq.n	8008684 <__gethex+0x3c4>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d016      	beq.n	8008622 <__gethex+0x362>
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d018      	beq.n	800862a <__gethex+0x36a>
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d109      	bne.n	8008610 <__gethex+0x350>
 80085fc:	f01b 0f02 	tst.w	fp, #2
 8008600:	d006      	beq.n	8008610 <__gethex+0x350>
 8008602:	f8da 3000 	ldr.w	r3, [sl]
 8008606:	ea4b 0b03 	orr.w	fp, fp, r3
 800860a:	f01b 0f01 	tst.w	fp, #1
 800860e:	d10f      	bne.n	8008630 <__gethex+0x370>
 8008610:	f048 0810 	orr.w	r8, r8, #16
 8008614:	e036      	b.n	8008684 <__gethex+0x3c4>
 8008616:	f04f 0b01 	mov.w	fp, #1
 800861a:	e7d0      	b.n	80085be <__gethex+0x2fe>
 800861c:	f04f 0801 	mov.w	r8, #1
 8008620:	e7e2      	b.n	80085e8 <__gethex+0x328>
 8008622:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008624:	f1c3 0301 	rsb	r3, r3, #1
 8008628:	930f      	str	r3, [sp, #60]	; 0x3c
 800862a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d0ef      	beq.n	8008610 <__gethex+0x350>
 8008630:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008634:	f104 0214 	add.w	r2, r4, #20
 8008638:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008642:	2300      	movs	r3, #0
 8008644:	4694      	mov	ip, r2
 8008646:	f852 1b04 	ldr.w	r1, [r2], #4
 800864a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800864e:	d01e      	beq.n	800868e <__gethex+0x3ce>
 8008650:	3101      	adds	r1, #1
 8008652:	f8cc 1000 	str.w	r1, [ip]
 8008656:	f1b8 0f02 	cmp.w	r8, #2
 800865a:	f104 0214 	add.w	r2, r4, #20
 800865e:	d13d      	bne.n	80086dc <__gethex+0x41c>
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	3b01      	subs	r3, #1
 8008664:	42ab      	cmp	r3, r5
 8008666:	d10b      	bne.n	8008680 <__gethex+0x3c0>
 8008668:	1169      	asrs	r1, r5, #5
 800866a:	2301      	movs	r3, #1
 800866c:	f005 051f 	and.w	r5, r5, #31
 8008670:	fa03 f505 	lsl.w	r5, r3, r5
 8008674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008678:	421d      	tst	r5, r3
 800867a:	bf18      	it	ne
 800867c:	f04f 0801 	movne.w	r8, #1
 8008680:	f048 0820 	orr.w	r8, r8, #32
 8008684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008686:	601c      	str	r4, [r3, #0]
 8008688:	9b02      	ldr	r3, [sp, #8]
 800868a:	601e      	str	r6, [r3, #0]
 800868c:	e6a2      	b.n	80083d4 <__gethex+0x114>
 800868e:	4290      	cmp	r0, r2
 8008690:	f842 3c04 	str.w	r3, [r2, #-4]
 8008694:	d8d6      	bhi.n	8008644 <__gethex+0x384>
 8008696:	68a2      	ldr	r2, [r4, #8]
 8008698:	4593      	cmp	fp, r2
 800869a:	db17      	blt.n	80086cc <__gethex+0x40c>
 800869c:	6861      	ldr	r1, [r4, #4]
 800869e:	4648      	mov	r0, r9
 80086a0:	3101      	adds	r1, #1
 80086a2:	f7fd fc3f 	bl	8005f24 <_Balloc>
 80086a6:	4682      	mov	sl, r0
 80086a8:	b918      	cbnz	r0, 80086b2 <__gethex+0x3f2>
 80086aa:	4b1b      	ldr	r3, [pc, #108]	; (8008718 <__gethex+0x458>)
 80086ac:	4602      	mov	r2, r0
 80086ae:	2184      	movs	r1, #132	; 0x84
 80086b0:	e6b3      	b.n	800841a <__gethex+0x15a>
 80086b2:	6922      	ldr	r2, [r4, #16]
 80086b4:	3202      	adds	r2, #2
 80086b6:	f104 010c 	add.w	r1, r4, #12
 80086ba:	0092      	lsls	r2, r2, #2
 80086bc:	300c      	adds	r0, #12
 80086be:	f7ff fd4b 	bl	8008158 <memcpy>
 80086c2:	4621      	mov	r1, r4
 80086c4:	4648      	mov	r0, r9
 80086c6:	f7fd fc6d 	bl	8005fa4 <_Bfree>
 80086ca:	4654      	mov	r4, sl
 80086cc:	6922      	ldr	r2, [r4, #16]
 80086ce:	1c51      	adds	r1, r2, #1
 80086d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80086d4:	6121      	str	r1, [r4, #16]
 80086d6:	2101      	movs	r1, #1
 80086d8:	6151      	str	r1, [r2, #20]
 80086da:	e7bc      	b.n	8008656 <__gethex+0x396>
 80086dc:	6921      	ldr	r1, [r4, #16]
 80086de:	4559      	cmp	r1, fp
 80086e0:	dd0b      	ble.n	80086fa <__gethex+0x43a>
 80086e2:	2101      	movs	r1, #1
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7ff fd83 	bl	80081f0 <rshift>
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	3601      	adds	r6, #1
 80086ee:	42b3      	cmp	r3, r6
 80086f0:	f6ff aedb 	blt.w	80084aa <__gethex+0x1ea>
 80086f4:	f04f 0801 	mov.w	r8, #1
 80086f8:	e7c2      	b.n	8008680 <__gethex+0x3c0>
 80086fa:	f015 051f 	ands.w	r5, r5, #31
 80086fe:	d0f9      	beq.n	80086f4 <__gethex+0x434>
 8008700:	9b01      	ldr	r3, [sp, #4]
 8008702:	441a      	add	r2, r3
 8008704:	f1c5 0520 	rsb	r5, r5, #32
 8008708:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800870c:	f7fd fcfc 	bl	8006108 <__hi0bits>
 8008710:	42a8      	cmp	r0, r5
 8008712:	dbe6      	blt.n	80086e2 <__gethex+0x422>
 8008714:	e7ee      	b.n	80086f4 <__gethex+0x434>
 8008716:	bf00      	nop
 8008718:	080090f3 	.word	0x080090f3

0800871c <L_shift>:
 800871c:	f1c2 0208 	rsb	r2, r2, #8
 8008720:	0092      	lsls	r2, r2, #2
 8008722:	b570      	push	{r4, r5, r6, lr}
 8008724:	f1c2 0620 	rsb	r6, r2, #32
 8008728:	6843      	ldr	r3, [r0, #4]
 800872a:	6804      	ldr	r4, [r0, #0]
 800872c:	fa03 f506 	lsl.w	r5, r3, r6
 8008730:	432c      	orrs	r4, r5
 8008732:	40d3      	lsrs	r3, r2
 8008734:	6004      	str	r4, [r0, #0]
 8008736:	f840 3f04 	str.w	r3, [r0, #4]!
 800873a:	4288      	cmp	r0, r1
 800873c:	d3f4      	bcc.n	8008728 <L_shift+0xc>
 800873e:	bd70      	pop	{r4, r5, r6, pc}

08008740 <__match>:
 8008740:	b530      	push	{r4, r5, lr}
 8008742:	6803      	ldr	r3, [r0, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800874a:	b914      	cbnz	r4, 8008752 <__match+0x12>
 800874c:	6003      	str	r3, [r0, #0]
 800874e:	2001      	movs	r0, #1
 8008750:	bd30      	pop	{r4, r5, pc}
 8008752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008756:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800875a:	2d19      	cmp	r5, #25
 800875c:	bf98      	it	ls
 800875e:	3220      	addls	r2, #32
 8008760:	42a2      	cmp	r2, r4
 8008762:	d0f0      	beq.n	8008746 <__match+0x6>
 8008764:	2000      	movs	r0, #0
 8008766:	e7f3      	b.n	8008750 <__match+0x10>

08008768 <__hexnan>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	680b      	ldr	r3, [r1, #0]
 800876e:	6801      	ldr	r1, [r0, #0]
 8008770:	115e      	asrs	r6, r3, #5
 8008772:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008776:	f013 031f 	ands.w	r3, r3, #31
 800877a:	b087      	sub	sp, #28
 800877c:	bf18      	it	ne
 800877e:	3604      	addne	r6, #4
 8008780:	2500      	movs	r5, #0
 8008782:	1f37      	subs	r7, r6, #4
 8008784:	4682      	mov	sl, r0
 8008786:	4690      	mov	r8, r2
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	f846 5c04 	str.w	r5, [r6, #-4]
 800878e:	46b9      	mov	r9, r7
 8008790:	463c      	mov	r4, r7
 8008792:	9502      	str	r5, [sp, #8]
 8008794:	46ab      	mov	fp, r5
 8008796:	784a      	ldrb	r2, [r1, #1]
 8008798:	1c4b      	adds	r3, r1, #1
 800879a:	9303      	str	r3, [sp, #12]
 800879c:	b342      	cbz	r2, 80087f0 <__hexnan+0x88>
 800879e:	4610      	mov	r0, r2
 80087a0:	9105      	str	r1, [sp, #20]
 80087a2:	9204      	str	r2, [sp, #16]
 80087a4:	f7ff fd76 	bl	8008294 <__hexdig_fun>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d14f      	bne.n	800884c <__hexnan+0xe4>
 80087ac:	9a04      	ldr	r2, [sp, #16]
 80087ae:	9905      	ldr	r1, [sp, #20]
 80087b0:	2a20      	cmp	r2, #32
 80087b2:	d818      	bhi.n	80087e6 <__hexnan+0x7e>
 80087b4:	9b02      	ldr	r3, [sp, #8]
 80087b6:	459b      	cmp	fp, r3
 80087b8:	dd13      	ble.n	80087e2 <__hexnan+0x7a>
 80087ba:	454c      	cmp	r4, r9
 80087bc:	d206      	bcs.n	80087cc <__hexnan+0x64>
 80087be:	2d07      	cmp	r5, #7
 80087c0:	dc04      	bgt.n	80087cc <__hexnan+0x64>
 80087c2:	462a      	mov	r2, r5
 80087c4:	4649      	mov	r1, r9
 80087c6:	4620      	mov	r0, r4
 80087c8:	f7ff ffa8 	bl	800871c <L_shift>
 80087cc:	4544      	cmp	r4, r8
 80087ce:	d950      	bls.n	8008872 <__hexnan+0x10a>
 80087d0:	2300      	movs	r3, #0
 80087d2:	f1a4 0904 	sub.w	r9, r4, #4
 80087d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80087da:	f8cd b008 	str.w	fp, [sp, #8]
 80087de:	464c      	mov	r4, r9
 80087e0:	461d      	mov	r5, r3
 80087e2:	9903      	ldr	r1, [sp, #12]
 80087e4:	e7d7      	b.n	8008796 <__hexnan+0x2e>
 80087e6:	2a29      	cmp	r2, #41	; 0x29
 80087e8:	d155      	bne.n	8008896 <__hexnan+0x12e>
 80087ea:	3102      	adds	r1, #2
 80087ec:	f8ca 1000 	str.w	r1, [sl]
 80087f0:	f1bb 0f00 	cmp.w	fp, #0
 80087f4:	d04f      	beq.n	8008896 <__hexnan+0x12e>
 80087f6:	454c      	cmp	r4, r9
 80087f8:	d206      	bcs.n	8008808 <__hexnan+0xa0>
 80087fa:	2d07      	cmp	r5, #7
 80087fc:	dc04      	bgt.n	8008808 <__hexnan+0xa0>
 80087fe:	462a      	mov	r2, r5
 8008800:	4649      	mov	r1, r9
 8008802:	4620      	mov	r0, r4
 8008804:	f7ff ff8a 	bl	800871c <L_shift>
 8008808:	4544      	cmp	r4, r8
 800880a:	d934      	bls.n	8008876 <__hexnan+0x10e>
 800880c:	f1a8 0204 	sub.w	r2, r8, #4
 8008810:	4623      	mov	r3, r4
 8008812:	f853 1b04 	ldr.w	r1, [r3], #4
 8008816:	f842 1f04 	str.w	r1, [r2, #4]!
 800881a:	429f      	cmp	r7, r3
 800881c:	d2f9      	bcs.n	8008812 <__hexnan+0xaa>
 800881e:	1b3b      	subs	r3, r7, r4
 8008820:	f023 0303 	bic.w	r3, r3, #3
 8008824:	3304      	adds	r3, #4
 8008826:	3e03      	subs	r6, #3
 8008828:	3401      	adds	r4, #1
 800882a:	42a6      	cmp	r6, r4
 800882c:	bf38      	it	cc
 800882e:	2304      	movcc	r3, #4
 8008830:	4443      	add	r3, r8
 8008832:	2200      	movs	r2, #0
 8008834:	f843 2b04 	str.w	r2, [r3], #4
 8008838:	429f      	cmp	r7, r3
 800883a:	d2fb      	bcs.n	8008834 <__hexnan+0xcc>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	b91b      	cbnz	r3, 8008848 <__hexnan+0xe0>
 8008840:	4547      	cmp	r7, r8
 8008842:	d126      	bne.n	8008892 <__hexnan+0x12a>
 8008844:	2301      	movs	r3, #1
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	2005      	movs	r0, #5
 800884a:	e025      	b.n	8008898 <__hexnan+0x130>
 800884c:	3501      	adds	r5, #1
 800884e:	2d08      	cmp	r5, #8
 8008850:	f10b 0b01 	add.w	fp, fp, #1
 8008854:	dd06      	ble.n	8008864 <__hexnan+0xfc>
 8008856:	4544      	cmp	r4, r8
 8008858:	d9c3      	bls.n	80087e2 <__hexnan+0x7a>
 800885a:	2300      	movs	r3, #0
 800885c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008860:	2501      	movs	r5, #1
 8008862:	3c04      	subs	r4, #4
 8008864:	6822      	ldr	r2, [r4, #0]
 8008866:	f000 000f 	and.w	r0, r0, #15
 800886a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800886e:	6020      	str	r0, [r4, #0]
 8008870:	e7b7      	b.n	80087e2 <__hexnan+0x7a>
 8008872:	2508      	movs	r5, #8
 8008874:	e7b5      	b.n	80087e2 <__hexnan+0x7a>
 8008876:	9b01      	ldr	r3, [sp, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0df      	beq.n	800883c <__hexnan+0xd4>
 800887c:	f1c3 0320 	rsb	r3, r3, #32
 8008880:	f04f 32ff 	mov.w	r2, #4294967295
 8008884:	40da      	lsrs	r2, r3
 8008886:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800888a:	4013      	ands	r3, r2
 800888c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008890:	e7d4      	b.n	800883c <__hexnan+0xd4>
 8008892:	3f04      	subs	r7, #4
 8008894:	e7d2      	b.n	800883c <__hexnan+0xd4>
 8008896:	2004      	movs	r0, #4
 8008898:	b007      	add	sp, #28
 800889a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800889e <__ascii_mbtowc>:
 800889e:	b082      	sub	sp, #8
 80088a0:	b901      	cbnz	r1, 80088a4 <__ascii_mbtowc+0x6>
 80088a2:	a901      	add	r1, sp, #4
 80088a4:	b142      	cbz	r2, 80088b8 <__ascii_mbtowc+0x1a>
 80088a6:	b14b      	cbz	r3, 80088bc <__ascii_mbtowc+0x1e>
 80088a8:	7813      	ldrb	r3, [r2, #0]
 80088aa:	600b      	str	r3, [r1, #0]
 80088ac:	7812      	ldrb	r2, [r2, #0]
 80088ae:	1e10      	subs	r0, r2, #0
 80088b0:	bf18      	it	ne
 80088b2:	2001      	movne	r0, #1
 80088b4:	b002      	add	sp, #8
 80088b6:	4770      	bx	lr
 80088b8:	4610      	mov	r0, r2
 80088ba:	e7fb      	b.n	80088b4 <__ascii_mbtowc+0x16>
 80088bc:	f06f 0001 	mvn.w	r0, #1
 80088c0:	e7f8      	b.n	80088b4 <__ascii_mbtowc+0x16>

080088c2 <_realloc_r>:
 80088c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c6:	4680      	mov	r8, r0
 80088c8:	4614      	mov	r4, r2
 80088ca:	460e      	mov	r6, r1
 80088cc:	b921      	cbnz	r1, 80088d8 <_realloc_r+0x16>
 80088ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088d2:	4611      	mov	r1, r2
 80088d4:	f7fd ba9a 	b.w	8005e0c <_malloc_r>
 80088d8:	b92a      	cbnz	r2, 80088e6 <_realloc_r+0x24>
 80088da:	f7fd fa23 	bl	8005d24 <_free_r>
 80088de:	4625      	mov	r5, r4
 80088e0:	4628      	mov	r0, r5
 80088e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e6:	f000 f8b6 	bl	8008a56 <_malloc_usable_size_r>
 80088ea:	4284      	cmp	r4, r0
 80088ec:	4607      	mov	r7, r0
 80088ee:	d802      	bhi.n	80088f6 <_realloc_r+0x34>
 80088f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088f4:	d812      	bhi.n	800891c <_realloc_r+0x5a>
 80088f6:	4621      	mov	r1, r4
 80088f8:	4640      	mov	r0, r8
 80088fa:	f7fd fa87 	bl	8005e0c <_malloc_r>
 80088fe:	4605      	mov	r5, r0
 8008900:	2800      	cmp	r0, #0
 8008902:	d0ed      	beq.n	80088e0 <_realloc_r+0x1e>
 8008904:	42bc      	cmp	r4, r7
 8008906:	4622      	mov	r2, r4
 8008908:	4631      	mov	r1, r6
 800890a:	bf28      	it	cs
 800890c:	463a      	movcs	r2, r7
 800890e:	f7ff fc23 	bl	8008158 <memcpy>
 8008912:	4631      	mov	r1, r6
 8008914:	4640      	mov	r0, r8
 8008916:	f7fd fa05 	bl	8005d24 <_free_r>
 800891a:	e7e1      	b.n	80088e0 <_realloc_r+0x1e>
 800891c:	4635      	mov	r5, r6
 800891e:	e7df      	b.n	80088e0 <_realloc_r+0x1e>

08008920 <_strtoul_l.constprop.0>:
 8008920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008924:	4f36      	ldr	r7, [pc, #216]	; (8008a00 <_strtoul_l.constprop.0+0xe0>)
 8008926:	4686      	mov	lr, r0
 8008928:	460d      	mov	r5, r1
 800892a:	4628      	mov	r0, r5
 800892c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008930:	5d3e      	ldrb	r6, [r7, r4]
 8008932:	f016 0608 	ands.w	r6, r6, #8
 8008936:	d1f8      	bne.n	800892a <_strtoul_l.constprop.0+0xa>
 8008938:	2c2d      	cmp	r4, #45	; 0x2d
 800893a:	d130      	bne.n	800899e <_strtoul_l.constprop.0+0x7e>
 800893c:	782c      	ldrb	r4, [r5, #0]
 800893e:	2601      	movs	r6, #1
 8008940:	1c85      	adds	r5, r0, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d057      	beq.n	80089f6 <_strtoul_l.constprop.0+0xd6>
 8008946:	2b10      	cmp	r3, #16
 8008948:	d109      	bne.n	800895e <_strtoul_l.constprop.0+0x3e>
 800894a:	2c30      	cmp	r4, #48	; 0x30
 800894c:	d107      	bne.n	800895e <_strtoul_l.constprop.0+0x3e>
 800894e:	7828      	ldrb	r0, [r5, #0]
 8008950:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008954:	2858      	cmp	r0, #88	; 0x58
 8008956:	d149      	bne.n	80089ec <_strtoul_l.constprop.0+0xcc>
 8008958:	786c      	ldrb	r4, [r5, #1]
 800895a:	2310      	movs	r3, #16
 800895c:	3502      	adds	r5, #2
 800895e:	f04f 38ff 	mov.w	r8, #4294967295
 8008962:	2700      	movs	r7, #0
 8008964:	fbb8 f8f3 	udiv	r8, r8, r3
 8008968:	fb03 f908 	mul.w	r9, r3, r8
 800896c:	ea6f 0909 	mvn.w	r9, r9
 8008970:	4638      	mov	r0, r7
 8008972:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008976:	f1bc 0f09 	cmp.w	ip, #9
 800897a:	d815      	bhi.n	80089a8 <_strtoul_l.constprop.0+0x88>
 800897c:	4664      	mov	r4, ip
 800897e:	42a3      	cmp	r3, r4
 8008980:	dd23      	ble.n	80089ca <_strtoul_l.constprop.0+0xaa>
 8008982:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008986:	d007      	beq.n	8008998 <_strtoul_l.constprop.0+0x78>
 8008988:	4580      	cmp	r8, r0
 800898a:	d31b      	bcc.n	80089c4 <_strtoul_l.constprop.0+0xa4>
 800898c:	d101      	bne.n	8008992 <_strtoul_l.constprop.0+0x72>
 800898e:	45a1      	cmp	r9, r4
 8008990:	db18      	blt.n	80089c4 <_strtoul_l.constprop.0+0xa4>
 8008992:	fb00 4003 	mla	r0, r0, r3, r4
 8008996:	2701      	movs	r7, #1
 8008998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800899c:	e7e9      	b.n	8008972 <_strtoul_l.constprop.0+0x52>
 800899e:	2c2b      	cmp	r4, #43	; 0x2b
 80089a0:	bf04      	itt	eq
 80089a2:	782c      	ldrbeq	r4, [r5, #0]
 80089a4:	1c85      	addeq	r5, r0, #2
 80089a6:	e7cc      	b.n	8008942 <_strtoul_l.constprop.0+0x22>
 80089a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80089ac:	f1bc 0f19 	cmp.w	ip, #25
 80089b0:	d801      	bhi.n	80089b6 <_strtoul_l.constprop.0+0x96>
 80089b2:	3c37      	subs	r4, #55	; 0x37
 80089b4:	e7e3      	b.n	800897e <_strtoul_l.constprop.0+0x5e>
 80089b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80089ba:	f1bc 0f19 	cmp.w	ip, #25
 80089be:	d804      	bhi.n	80089ca <_strtoul_l.constprop.0+0xaa>
 80089c0:	3c57      	subs	r4, #87	; 0x57
 80089c2:	e7dc      	b.n	800897e <_strtoul_l.constprop.0+0x5e>
 80089c4:	f04f 37ff 	mov.w	r7, #4294967295
 80089c8:	e7e6      	b.n	8008998 <_strtoul_l.constprop.0+0x78>
 80089ca:	1c7b      	adds	r3, r7, #1
 80089cc:	d106      	bne.n	80089dc <_strtoul_l.constprop.0+0xbc>
 80089ce:	2322      	movs	r3, #34	; 0x22
 80089d0:	f8ce 3000 	str.w	r3, [lr]
 80089d4:	4638      	mov	r0, r7
 80089d6:	b932      	cbnz	r2, 80089e6 <_strtoul_l.constprop.0+0xc6>
 80089d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089dc:	b106      	cbz	r6, 80089e0 <_strtoul_l.constprop.0+0xc0>
 80089de:	4240      	negs	r0, r0
 80089e0:	2a00      	cmp	r2, #0
 80089e2:	d0f9      	beq.n	80089d8 <_strtoul_l.constprop.0+0xb8>
 80089e4:	b107      	cbz	r7, 80089e8 <_strtoul_l.constprop.0+0xc8>
 80089e6:	1e69      	subs	r1, r5, #1
 80089e8:	6011      	str	r1, [r2, #0]
 80089ea:	e7f5      	b.n	80089d8 <_strtoul_l.constprop.0+0xb8>
 80089ec:	2430      	movs	r4, #48	; 0x30
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1b5      	bne.n	800895e <_strtoul_l.constprop.0+0x3e>
 80089f2:	2308      	movs	r3, #8
 80089f4:	e7b3      	b.n	800895e <_strtoul_l.constprop.0+0x3e>
 80089f6:	2c30      	cmp	r4, #48	; 0x30
 80089f8:	d0a9      	beq.n	800894e <_strtoul_l.constprop.0+0x2e>
 80089fa:	230a      	movs	r3, #10
 80089fc:	e7af      	b.n	800895e <_strtoul_l.constprop.0+0x3e>
 80089fe:	bf00      	nop
 8008a00:	080092b1 	.word	0x080092b1

08008a04 <_strtoul_r>:
 8008a04:	f7ff bf8c 	b.w	8008920 <_strtoul_l.constprop.0>

08008a08 <__ascii_wctomb>:
 8008a08:	b149      	cbz	r1, 8008a1e <__ascii_wctomb+0x16>
 8008a0a:	2aff      	cmp	r2, #255	; 0xff
 8008a0c:	bf85      	ittet	hi
 8008a0e:	238a      	movhi	r3, #138	; 0x8a
 8008a10:	6003      	strhi	r3, [r0, #0]
 8008a12:	700a      	strbls	r2, [r1, #0]
 8008a14:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a18:	bf98      	it	ls
 8008a1a:	2001      	movls	r0, #1
 8008a1c:	4770      	bx	lr
 8008a1e:	4608      	mov	r0, r1
 8008a20:	4770      	bx	lr
	...

08008a24 <fiprintf>:
 8008a24:	b40e      	push	{r1, r2, r3}
 8008a26:	b503      	push	{r0, r1, lr}
 8008a28:	4601      	mov	r1, r0
 8008a2a:	ab03      	add	r3, sp, #12
 8008a2c:	4805      	ldr	r0, [pc, #20]	; (8008a44 <fiprintf+0x20>)
 8008a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a32:	6800      	ldr	r0, [r0, #0]
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	f000 f83f 	bl	8008ab8 <_vfiprintf_r>
 8008a3a:	b002      	add	sp, #8
 8008a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a40:	b003      	add	sp, #12
 8008a42:	4770      	bx	lr
 8008a44:	20000064 	.word	0x20000064

08008a48 <abort>:
 8008a48:	b508      	push	{r3, lr}
 8008a4a:	2006      	movs	r0, #6
 8008a4c:	f000 fa0c 	bl	8008e68 <raise>
 8008a50:	2001      	movs	r0, #1
 8008a52:	f7f8 feb1 	bl	80017b8 <_exit>

08008a56 <_malloc_usable_size_r>:
 8008a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a5a:	1f18      	subs	r0, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bfbc      	itt	lt
 8008a60:	580b      	ldrlt	r3, [r1, r0]
 8008a62:	18c0      	addlt	r0, r0, r3
 8008a64:	4770      	bx	lr

08008a66 <__sfputc_r>:
 8008a66:	6893      	ldr	r3, [r2, #8]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	b410      	push	{r4}
 8008a6e:	6093      	str	r3, [r2, #8]
 8008a70:	da08      	bge.n	8008a84 <__sfputc_r+0x1e>
 8008a72:	6994      	ldr	r4, [r2, #24]
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	db01      	blt.n	8008a7c <__sfputc_r+0x16>
 8008a78:	290a      	cmp	r1, #10
 8008a7a:	d103      	bne.n	8008a84 <__sfputc_r+0x1e>
 8008a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a80:	f000 b934 	b.w	8008cec <__swbuf_r>
 8008a84:	6813      	ldr	r3, [r2, #0]
 8008a86:	1c58      	adds	r0, r3, #1
 8008a88:	6010      	str	r0, [r2, #0]
 8008a8a:	7019      	strb	r1, [r3, #0]
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <__sfputs_r>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	4606      	mov	r6, r0
 8008a98:	460f      	mov	r7, r1
 8008a9a:	4614      	mov	r4, r2
 8008a9c:	18d5      	adds	r5, r2, r3
 8008a9e:	42ac      	cmp	r4, r5
 8008aa0:	d101      	bne.n	8008aa6 <__sfputs_r+0x12>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	e007      	b.n	8008ab6 <__sfputs_r+0x22>
 8008aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aaa:	463a      	mov	r2, r7
 8008aac:	4630      	mov	r0, r6
 8008aae:	f7ff ffda 	bl	8008a66 <__sfputc_r>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	d1f3      	bne.n	8008a9e <__sfputs_r+0xa>
 8008ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ab8 <_vfiprintf_r>:
 8008ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	460d      	mov	r5, r1
 8008abe:	b09d      	sub	sp, #116	; 0x74
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	4698      	mov	r8, r3
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	b118      	cbz	r0, 8008ad0 <_vfiprintf_r+0x18>
 8008ac8:	6a03      	ldr	r3, [r0, #32]
 8008aca:	b90b      	cbnz	r3, 8008ad0 <_vfiprintf_r+0x18>
 8008acc:	f7fc f942 	bl	8004d54 <__sinit>
 8008ad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ad2:	07d9      	lsls	r1, r3, #31
 8008ad4:	d405      	bmi.n	8008ae2 <_vfiprintf_r+0x2a>
 8008ad6:	89ab      	ldrh	r3, [r5, #12]
 8008ad8:	059a      	lsls	r2, r3, #22
 8008ada:	d402      	bmi.n	8008ae2 <_vfiprintf_r+0x2a>
 8008adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ade:	f7fc fa94 	bl	800500a <__retarget_lock_acquire_recursive>
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	071b      	lsls	r3, r3, #28
 8008ae6:	d501      	bpl.n	8008aec <_vfiprintf_r+0x34>
 8008ae8:	692b      	ldr	r3, [r5, #16]
 8008aea:	b99b      	cbnz	r3, 8008b14 <_vfiprintf_r+0x5c>
 8008aec:	4629      	mov	r1, r5
 8008aee:	4630      	mov	r0, r6
 8008af0:	f000 f93a 	bl	8008d68 <__swsetup_r>
 8008af4:	b170      	cbz	r0, 8008b14 <_vfiprintf_r+0x5c>
 8008af6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008af8:	07dc      	lsls	r4, r3, #31
 8008afa:	d504      	bpl.n	8008b06 <_vfiprintf_r+0x4e>
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295
 8008b00:	b01d      	add	sp, #116	; 0x74
 8008b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b06:	89ab      	ldrh	r3, [r5, #12]
 8008b08:	0598      	lsls	r0, r3, #22
 8008b0a:	d4f7      	bmi.n	8008afc <_vfiprintf_r+0x44>
 8008b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b0e:	f7fc fa7d 	bl	800500c <__retarget_lock_release_recursive>
 8008b12:	e7f3      	b.n	8008afc <_vfiprintf_r+0x44>
 8008b14:	2300      	movs	r3, #0
 8008b16:	9309      	str	r3, [sp, #36]	; 0x24
 8008b18:	2320      	movs	r3, #32
 8008b1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b22:	2330      	movs	r3, #48	; 0x30
 8008b24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008cd8 <_vfiprintf_r+0x220>
 8008b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b2c:	f04f 0901 	mov.w	r9, #1
 8008b30:	4623      	mov	r3, r4
 8008b32:	469a      	mov	sl, r3
 8008b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b38:	b10a      	cbz	r2, 8008b3e <_vfiprintf_r+0x86>
 8008b3a:	2a25      	cmp	r2, #37	; 0x25
 8008b3c:	d1f9      	bne.n	8008b32 <_vfiprintf_r+0x7a>
 8008b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b42:	d00b      	beq.n	8008b5c <_vfiprintf_r+0xa4>
 8008b44:	465b      	mov	r3, fp
 8008b46:	4622      	mov	r2, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7ff ffa2 	bl	8008a94 <__sfputs_r>
 8008b50:	3001      	adds	r0, #1
 8008b52:	f000 80a9 	beq.w	8008ca8 <_vfiprintf_r+0x1f0>
 8008b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b58:	445a      	add	r2, fp
 8008b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 80a1 	beq.w	8008ca8 <_vfiprintf_r+0x1f0>
 8008b66:	2300      	movs	r3, #0
 8008b68:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b70:	f10a 0a01 	add.w	sl, sl, #1
 8008b74:	9304      	str	r3, [sp, #16]
 8008b76:	9307      	str	r3, [sp, #28]
 8008b78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b7c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b7e:	4654      	mov	r4, sl
 8008b80:	2205      	movs	r2, #5
 8008b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b86:	4854      	ldr	r0, [pc, #336]	; (8008cd8 <_vfiprintf_r+0x220>)
 8008b88:	f7f7 fb42 	bl	8000210 <memchr>
 8008b8c:	9a04      	ldr	r2, [sp, #16]
 8008b8e:	b9d8      	cbnz	r0, 8008bc8 <_vfiprintf_r+0x110>
 8008b90:	06d1      	lsls	r1, r2, #27
 8008b92:	bf44      	itt	mi
 8008b94:	2320      	movmi	r3, #32
 8008b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b9a:	0713      	lsls	r3, r2, #28
 8008b9c:	bf44      	itt	mi
 8008b9e:	232b      	movmi	r3, #43	; 0x2b
 8008ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8008baa:	d015      	beq.n	8008bd8 <_vfiprintf_r+0x120>
 8008bac:	9a07      	ldr	r2, [sp, #28]
 8008bae:	4654      	mov	r4, sl
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	f04f 0c0a 	mov.w	ip, #10
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bbc:	3b30      	subs	r3, #48	; 0x30
 8008bbe:	2b09      	cmp	r3, #9
 8008bc0:	d94d      	bls.n	8008c5e <_vfiprintf_r+0x1a6>
 8008bc2:	b1b0      	cbz	r0, 8008bf2 <_vfiprintf_r+0x13a>
 8008bc4:	9207      	str	r2, [sp, #28]
 8008bc6:	e014      	b.n	8008bf2 <_vfiprintf_r+0x13a>
 8008bc8:	eba0 0308 	sub.w	r3, r0, r8
 8008bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	46a2      	mov	sl, r4
 8008bd6:	e7d2      	b.n	8008b7e <_vfiprintf_r+0xc6>
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	1d19      	adds	r1, r3, #4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	9103      	str	r1, [sp, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	bfbb      	ittet	lt
 8008be4:	425b      	neglt	r3, r3
 8008be6:	f042 0202 	orrlt.w	r2, r2, #2
 8008bea:	9307      	strge	r3, [sp, #28]
 8008bec:	9307      	strlt	r3, [sp, #28]
 8008bee:	bfb8      	it	lt
 8008bf0:	9204      	strlt	r2, [sp, #16]
 8008bf2:	7823      	ldrb	r3, [r4, #0]
 8008bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8008bf6:	d10c      	bne.n	8008c12 <_vfiprintf_r+0x15a>
 8008bf8:	7863      	ldrb	r3, [r4, #1]
 8008bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8008bfc:	d134      	bne.n	8008c68 <_vfiprintf_r+0x1b0>
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	1d1a      	adds	r2, r3, #4
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	9203      	str	r2, [sp, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	bfb8      	it	lt
 8008c0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c0e:	3402      	adds	r4, #2
 8008c10:	9305      	str	r3, [sp, #20]
 8008c12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008ce8 <_vfiprintf_r+0x230>
 8008c16:	7821      	ldrb	r1, [r4, #0]
 8008c18:	2203      	movs	r2, #3
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	f7f7 faf8 	bl	8000210 <memchr>
 8008c20:	b138      	cbz	r0, 8008c32 <_vfiprintf_r+0x17a>
 8008c22:	9b04      	ldr	r3, [sp, #16]
 8008c24:	eba0 000a 	sub.w	r0, r0, sl
 8008c28:	2240      	movs	r2, #64	; 0x40
 8008c2a:	4082      	lsls	r2, r0
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	3401      	adds	r4, #1
 8008c30:	9304      	str	r3, [sp, #16]
 8008c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c36:	4829      	ldr	r0, [pc, #164]	; (8008cdc <_vfiprintf_r+0x224>)
 8008c38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c3c:	2206      	movs	r2, #6
 8008c3e:	f7f7 fae7 	bl	8000210 <memchr>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d03f      	beq.n	8008cc6 <_vfiprintf_r+0x20e>
 8008c46:	4b26      	ldr	r3, [pc, #152]	; (8008ce0 <_vfiprintf_r+0x228>)
 8008c48:	bb1b      	cbnz	r3, 8008c92 <_vfiprintf_r+0x1da>
 8008c4a:	9b03      	ldr	r3, [sp, #12]
 8008c4c:	3307      	adds	r3, #7
 8008c4e:	f023 0307 	bic.w	r3, r3, #7
 8008c52:	3308      	adds	r3, #8
 8008c54:	9303      	str	r3, [sp, #12]
 8008c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c58:	443b      	add	r3, r7
 8008c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c5c:	e768      	b.n	8008b30 <_vfiprintf_r+0x78>
 8008c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c62:	460c      	mov	r4, r1
 8008c64:	2001      	movs	r0, #1
 8008c66:	e7a6      	b.n	8008bb6 <_vfiprintf_r+0xfe>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	3401      	adds	r4, #1
 8008c6c:	9305      	str	r3, [sp, #20]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	f04f 0c0a 	mov.w	ip, #10
 8008c74:	4620      	mov	r0, r4
 8008c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c7a:	3a30      	subs	r2, #48	; 0x30
 8008c7c:	2a09      	cmp	r2, #9
 8008c7e:	d903      	bls.n	8008c88 <_vfiprintf_r+0x1d0>
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0c6      	beq.n	8008c12 <_vfiprintf_r+0x15a>
 8008c84:	9105      	str	r1, [sp, #20]
 8008c86:	e7c4      	b.n	8008c12 <_vfiprintf_r+0x15a>
 8008c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e7f0      	b.n	8008c74 <_vfiprintf_r+0x1bc>
 8008c92:	ab03      	add	r3, sp, #12
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	462a      	mov	r2, r5
 8008c98:	4b12      	ldr	r3, [pc, #72]	; (8008ce4 <_vfiprintf_r+0x22c>)
 8008c9a:	a904      	add	r1, sp, #16
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f7fb f9f7 	bl	8004090 <_printf_float>
 8008ca2:	4607      	mov	r7, r0
 8008ca4:	1c78      	adds	r0, r7, #1
 8008ca6:	d1d6      	bne.n	8008c56 <_vfiprintf_r+0x19e>
 8008ca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008caa:	07d9      	lsls	r1, r3, #31
 8008cac:	d405      	bmi.n	8008cba <_vfiprintf_r+0x202>
 8008cae:	89ab      	ldrh	r3, [r5, #12]
 8008cb0:	059a      	lsls	r2, r3, #22
 8008cb2:	d402      	bmi.n	8008cba <_vfiprintf_r+0x202>
 8008cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cb6:	f7fc f9a9 	bl	800500c <__retarget_lock_release_recursive>
 8008cba:	89ab      	ldrh	r3, [r5, #12]
 8008cbc:	065b      	lsls	r3, r3, #25
 8008cbe:	f53f af1d 	bmi.w	8008afc <_vfiprintf_r+0x44>
 8008cc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cc4:	e71c      	b.n	8008b00 <_vfiprintf_r+0x48>
 8008cc6:	ab03      	add	r3, sp, #12
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	462a      	mov	r2, r5
 8008ccc:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <_vfiprintf_r+0x22c>)
 8008cce:	a904      	add	r1, sp, #16
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f7fb fc81 	bl	80045d8 <_printf_i>
 8008cd6:	e7e4      	b.n	8008ca2 <_vfiprintf_r+0x1ea>
 8008cd8:	080093b1 	.word	0x080093b1
 8008cdc:	080093bb 	.word	0x080093bb
 8008ce0:	08004091 	.word	0x08004091
 8008ce4:	08008a95 	.word	0x08008a95
 8008ce8:	080093b7 	.word	0x080093b7

08008cec <__swbuf_r>:
 8008cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cee:	460e      	mov	r6, r1
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	b118      	cbz	r0, 8008cfe <__swbuf_r+0x12>
 8008cf6:	6a03      	ldr	r3, [r0, #32]
 8008cf8:	b90b      	cbnz	r3, 8008cfe <__swbuf_r+0x12>
 8008cfa:	f7fc f82b 	bl	8004d54 <__sinit>
 8008cfe:	69a3      	ldr	r3, [r4, #24]
 8008d00:	60a3      	str	r3, [r4, #8]
 8008d02:	89a3      	ldrh	r3, [r4, #12]
 8008d04:	071a      	lsls	r2, r3, #28
 8008d06:	d525      	bpl.n	8008d54 <__swbuf_r+0x68>
 8008d08:	6923      	ldr	r3, [r4, #16]
 8008d0a:	b31b      	cbz	r3, 8008d54 <__swbuf_r+0x68>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	6922      	ldr	r2, [r4, #16]
 8008d10:	1a98      	subs	r0, r3, r2
 8008d12:	6963      	ldr	r3, [r4, #20]
 8008d14:	b2f6      	uxtb	r6, r6
 8008d16:	4283      	cmp	r3, r0
 8008d18:	4637      	mov	r7, r6
 8008d1a:	dc04      	bgt.n	8008d26 <__swbuf_r+0x3a>
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f7ff f942 	bl	8007fa8 <_fflush_r>
 8008d24:	b9e0      	cbnz	r0, 8008d60 <__swbuf_r+0x74>
 8008d26:	68a3      	ldr	r3, [r4, #8]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	60a3      	str	r3, [r4, #8]
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	6022      	str	r2, [r4, #0]
 8008d32:	701e      	strb	r6, [r3, #0]
 8008d34:	6962      	ldr	r2, [r4, #20]
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d004      	beq.n	8008d46 <__swbuf_r+0x5a>
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	07db      	lsls	r3, r3, #31
 8008d40:	d506      	bpl.n	8008d50 <__swbuf_r+0x64>
 8008d42:	2e0a      	cmp	r6, #10
 8008d44:	d104      	bne.n	8008d50 <__swbuf_r+0x64>
 8008d46:	4621      	mov	r1, r4
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f7ff f92d 	bl	8007fa8 <_fflush_r>
 8008d4e:	b938      	cbnz	r0, 8008d60 <__swbuf_r+0x74>
 8008d50:	4638      	mov	r0, r7
 8008d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d54:	4621      	mov	r1, r4
 8008d56:	4628      	mov	r0, r5
 8008d58:	f000 f806 	bl	8008d68 <__swsetup_r>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d0d5      	beq.n	8008d0c <__swbuf_r+0x20>
 8008d60:	f04f 37ff 	mov.w	r7, #4294967295
 8008d64:	e7f4      	b.n	8008d50 <__swbuf_r+0x64>
	...

08008d68 <__swsetup_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4b2a      	ldr	r3, [pc, #168]	; (8008e14 <__swsetup_r+0xac>)
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	6818      	ldr	r0, [r3, #0]
 8008d70:	460c      	mov	r4, r1
 8008d72:	b118      	cbz	r0, 8008d7c <__swsetup_r+0x14>
 8008d74:	6a03      	ldr	r3, [r0, #32]
 8008d76:	b90b      	cbnz	r3, 8008d7c <__swsetup_r+0x14>
 8008d78:	f7fb ffec 	bl	8004d54 <__sinit>
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d82:	0718      	lsls	r0, r3, #28
 8008d84:	d422      	bmi.n	8008dcc <__swsetup_r+0x64>
 8008d86:	06d9      	lsls	r1, r3, #27
 8008d88:	d407      	bmi.n	8008d9a <__swsetup_r+0x32>
 8008d8a:	2309      	movs	r3, #9
 8008d8c:	602b      	str	r3, [r5, #0]
 8008d8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d92:	81a3      	strh	r3, [r4, #12]
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	e034      	b.n	8008e04 <__swsetup_r+0x9c>
 8008d9a:	0758      	lsls	r0, r3, #29
 8008d9c:	d512      	bpl.n	8008dc4 <__swsetup_r+0x5c>
 8008d9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008da0:	b141      	cbz	r1, 8008db4 <__swsetup_r+0x4c>
 8008da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008da6:	4299      	cmp	r1, r3
 8008da8:	d002      	beq.n	8008db0 <__swsetup_r+0x48>
 8008daa:	4628      	mov	r0, r5
 8008dac:	f7fc ffba 	bl	8005d24 <_free_r>
 8008db0:	2300      	movs	r3, #0
 8008db2:	6363      	str	r3, [r4, #52]	; 0x34
 8008db4:	89a3      	ldrh	r3, [r4, #12]
 8008db6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dba:	81a3      	strh	r3, [r4, #12]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	6063      	str	r3, [r4, #4]
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	6023      	str	r3, [r4, #0]
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	f043 0308 	orr.w	r3, r3, #8
 8008dca:	81a3      	strh	r3, [r4, #12]
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	b94b      	cbnz	r3, 8008de4 <__swsetup_r+0x7c>
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dda:	d003      	beq.n	8008de4 <__swsetup_r+0x7c>
 8008ddc:	4621      	mov	r1, r4
 8008dde:	4628      	mov	r0, r5
 8008de0:	f000 f884 	bl	8008eec <__smakebuf_r>
 8008de4:	89a0      	ldrh	r0, [r4, #12]
 8008de6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dea:	f010 0301 	ands.w	r3, r0, #1
 8008dee:	d00a      	beq.n	8008e06 <__swsetup_r+0x9e>
 8008df0:	2300      	movs	r3, #0
 8008df2:	60a3      	str	r3, [r4, #8]
 8008df4:	6963      	ldr	r3, [r4, #20]
 8008df6:	425b      	negs	r3, r3
 8008df8:	61a3      	str	r3, [r4, #24]
 8008dfa:	6923      	ldr	r3, [r4, #16]
 8008dfc:	b943      	cbnz	r3, 8008e10 <__swsetup_r+0xa8>
 8008dfe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e02:	d1c4      	bne.n	8008d8e <__swsetup_r+0x26>
 8008e04:	bd38      	pop	{r3, r4, r5, pc}
 8008e06:	0781      	lsls	r1, r0, #30
 8008e08:	bf58      	it	pl
 8008e0a:	6963      	ldrpl	r3, [r4, #20]
 8008e0c:	60a3      	str	r3, [r4, #8]
 8008e0e:	e7f4      	b.n	8008dfa <__swsetup_r+0x92>
 8008e10:	2000      	movs	r0, #0
 8008e12:	e7f7      	b.n	8008e04 <__swsetup_r+0x9c>
 8008e14:	20000064 	.word	0x20000064

08008e18 <_raise_r>:
 8008e18:	291f      	cmp	r1, #31
 8008e1a:	b538      	push	{r3, r4, r5, lr}
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	460d      	mov	r5, r1
 8008e20:	d904      	bls.n	8008e2c <_raise_r+0x14>
 8008e22:	2316      	movs	r3, #22
 8008e24:	6003      	str	r3, [r0, #0]
 8008e26:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008e2e:	b112      	cbz	r2, 8008e36 <_raise_r+0x1e>
 8008e30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e34:	b94b      	cbnz	r3, 8008e4a <_raise_r+0x32>
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 f830 	bl	8008e9c <_getpid_r>
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	4601      	mov	r1, r0
 8008e40:	4620      	mov	r0, r4
 8008e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e46:	f000 b817 	b.w	8008e78 <_kill_r>
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d00a      	beq.n	8008e64 <_raise_r+0x4c>
 8008e4e:	1c59      	adds	r1, r3, #1
 8008e50:	d103      	bne.n	8008e5a <_raise_r+0x42>
 8008e52:	2316      	movs	r3, #22
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	2001      	movs	r0, #1
 8008e58:	e7e7      	b.n	8008e2a <_raise_r+0x12>
 8008e5a:	2400      	movs	r4, #0
 8008e5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e60:	4628      	mov	r0, r5
 8008e62:	4798      	blx	r3
 8008e64:	2000      	movs	r0, #0
 8008e66:	e7e0      	b.n	8008e2a <_raise_r+0x12>

08008e68 <raise>:
 8008e68:	4b02      	ldr	r3, [pc, #8]	; (8008e74 <raise+0xc>)
 8008e6a:	4601      	mov	r1, r0
 8008e6c:	6818      	ldr	r0, [r3, #0]
 8008e6e:	f7ff bfd3 	b.w	8008e18 <_raise_r>
 8008e72:	bf00      	nop
 8008e74:	20000064 	.word	0x20000064

08008e78 <_kill_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d07      	ldr	r5, [pc, #28]	; (8008e98 <_kill_r+0x20>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	4611      	mov	r1, r2
 8008e84:	602b      	str	r3, [r5, #0]
 8008e86:	f7f8 fc87 	bl	8001798 <_kill>
 8008e8a:	1c43      	adds	r3, r0, #1
 8008e8c:	d102      	bne.n	8008e94 <_kill_r+0x1c>
 8008e8e:	682b      	ldr	r3, [r5, #0]
 8008e90:	b103      	cbz	r3, 8008e94 <_kill_r+0x1c>
 8008e92:	6023      	str	r3, [r4, #0]
 8008e94:	bd38      	pop	{r3, r4, r5, pc}
 8008e96:	bf00      	nop
 8008e98:	20000a84 	.word	0x20000a84

08008e9c <_getpid_r>:
 8008e9c:	f7f8 bc74 	b.w	8001788 <_getpid>

08008ea0 <__swhatbuf_r>:
 8008ea0:	b570      	push	{r4, r5, r6, lr}
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea8:	2900      	cmp	r1, #0
 8008eaa:	b096      	sub	sp, #88	; 0x58
 8008eac:	4615      	mov	r5, r2
 8008eae:	461e      	mov	r6, r3
 8008eb0:	da0d      	bge.n	8008ece <__swhatbuf_r+0x2e>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008eb8:	f04f 0100 	mov.w	r1, #0
 8008ebc:	bf0c      	ite	eq
 8008ebe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008ec2:	2340      	movne	r3, #64	; 0x40
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	6031      	str	r1, [r6, #0]
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	b016      	add	sp, #88	; 0x58
 8008ecc:	bd70      	pop	{r4, r5, r6, pc}
 8008ece:	466a      	mov	r2, sp
 8008ed0:	f000 f848 	bl	8008f64 <_fstat_r>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	dbec      	blt.n	8008eb2 <__swhatbuf_r+0x12>
 8008ed8:	9901      	ldr	r1, [sp, #4]
 8008eda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008ede:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008ee2:	4259      	negs	r1, r3
 8008ee4:	4159      	adcs	r1, r3
 8008ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eea:	e7eb      	b.n	8008ec4 <__swhatbuf_r+0x24>

08008eec <__smakebuf_r>:
 8008eec:	898b      	ldrh	r3, [r1, #12]
 8008eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ef0:	079d      	lsls	r5, r3, #30
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	d507      	bpl.n	8008f08 <__smakebuf_r+0x1c>
 8008ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	2301      	movs	r3, #1
 8008f02:	6163      	str	r3, [r4, #20]
 8008f04:	b002      	add	sp, #8
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	ab01      	add	r3, sp, #4
 8008f0a:	466a      	mov	r2, sp
 8008f0c:	f7ff ffc8 	bl	8008ea0 <__swhatbuf_r>
 8008f10:	9900      	ldr	r1, [sp, #0]
 8008f12:	4605      	mov	r5, r0
 8008f14:	4630      	mov	r0, r6
 8008f16:	f7fc ff79 	bl	8005e0c <_malloc_r>
 8008f1a:	b948      	cbnz	r0, 8008f30 <__smakebuf_r+0x44>
 8008f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f20:	059a      	lsls	r2, r3, #22
 8008f22:	d4ef      	bmi.n	8008f04 <__smakebuf_r+0x18>
 8008f24:	f023 0303 	bic.w	r3, r3, #3
 8008f28:	f043 0302 	orr.w	r3, r3, #2
 8008f2c:	81a3      	strh	r3, [r4, #12]
 8008f2e:	e7e3      	b.n	8008ef8 <__smakebuf_r+0xc>
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	6020      	str	r0, [r4, #0]
 8008f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f38:	81a3      	strh	r3, [r4, #12]
 8008f3a:	9b00      	ldr	r3, [sp, #0]
 8008f3c:	6163      	str	r3, [r4, #20]
 8008f3e:	9b01      	ldr	r3, [sp, #4]
 8008f40:	6120      	str	r0, [r4, #16]
 8008f42:	b15b      	cbz	r3, 8008f5c <__smakebuf_r+0x70>
 8008f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f000 f81d 	bl	8008f88 <_isatty_r>
 8008f4e:	b128      	cbz	r0, 8008f5c <__smakebuf_r+0x70>
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	f023 0303 	bic.w	r3, r3, #3
 8008f56:	f043 0301 	orr.w	r3, r3, #1
 8008f5a:	81a3      	strh	r3, [r4, #12]
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	431d      	orrs	r5, r3
 8008f60:	81a5      	strh	r5, [r4, #12]
 8008f62:	e7cf      	b.n	8008f04 <__smakebuf_r+0x18>

08008f64 <_fstat_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4d07      	ldr	r5, [pc, #28]	; (8008f84 <_fstat_r+0x20>)
 8008f68:	2300      	movs	r3, #0
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	4611      	mov	r1, r2
 8008f70:	602b      	str	r3, [r5, #0]
 8008f72:	f7f8 fc70 	bl	8001856 <_fstat>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	d102      	bne.n	8008f80 <_fstat_r+0x1c>
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	b103      	cbz	r3, 8008f80 <_fstat_r+0x1c>
 8008f7e:	6023      	str	r3, [r4, #0]
 8008f80:	bd38      	pop	{r3, r4, r5, pc}
 8008f82:	bf00      	nop
 8008f84:	20000a84 	.word	0x20000a84

08008f88 <_isatty_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	4d06      	ldr	r5, [pc, #24]	; (8008fa4 <_isatty_r+0x1c>)
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4604      	mov	r4, r0
 8008f90:	4608      	mov	r0, r1
 8008f92:	602b      	str	r3, [r5, #0]
 8008f94:	f7f8 fc6f 	bl	8001876 <_isatty>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d102      	bne.n	8008fa2 <_isatty_r+0x1a>
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	b103      	cbz	r3, 8008fa2 <_isatty_r+0x1a>
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	20000a84 	.word	0x20000a84

08008fa8 <_init>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	bf00      	nop
 8008fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fae:	bc08      	pop	{r3}
 8008fb0:	469e      	mov	lr, r3
 8008fb2:	4770      	bx	lr

08008fb4 <_fini>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr
