
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08010fd0  08010fd0  00020fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011464  08011464  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08011464  08011464  00021464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801146c  0801146c  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801146c  0801146c  0002146c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011470  08011470  00021470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011474  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030208  2**0
                  CONTENTS
 10 .bss          00000cac  20000208  20000208  00030208  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000eb4  20000eb4  00030208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c444  00000000  00000000  0003027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f9e  00000000  00000000  0004c6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001868  00000000  00000000  00050660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001305  00000000  00000000  00051ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002584d  00000000  00000000  000531cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001eb6e  00000000  00000000  00078a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6e84  00000000  00000000  00097588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007e08  00000000  00000000  0016e40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00176214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010fb4 	.word	0x08010fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08010fb4 	.word	0x08010fb4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a2c      	ldr	r2, [pc, #176]	; (80010cc <HAL_UART_RxCpltCallback+0xbc>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d12b      	bne.n	8001078 <HAL_UART_RxCpltCallback+0x68>
		uint8_t c = UART3_Rx_buf[UART3_Rx_count++];
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_UART_RxCpltCallback+0xc0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	492a      	ldr	r1, [pc, #168]	; (80010d0 <HAL_UART_RxCpltCallback+0xc0>)
 8001028:	600a      	str	r2, [r1, #0]
 800102a:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <HAL_UART_RxCpltCallback+0xc4>)
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	73bb      	strb	r3, [r7, #14]

		if(c == '\r' || UART3_Rx_count >= 100) {
 8001030:	7bbb      	ldrb	r3, [r7, #14]
 8001032:	2b0d      	cmp	r3, #13
 8001034:	d003      	beq.n	800103e <HAL_UART_RxCpltCallback+0x2e>
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <HAL_UART_RxCpltCallback+0xc0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b63      	cmp	r3, #99	; 0x63
 800103c:	dd11      	ble.n	8001062 <HAL_UART_RxCpltCallback+0x52>
			HAL_UART_Transmit(&huart2, UART3_Rx_buf, UART3_Rx_count, HAL_MAX_DELAY);
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <HAL_UART_RxCpltCallback+0xc0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b29a      	uxth	r2, r3
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	4922      	ldr	r1, [pc, #136]	; (80010d4 <HAL_UART_RxCpltCallback+0xc4>)
 800104a:	4823      	ldr	r0, [pc, #140]	; (80010d8 <HAL_UART_RxCpltCallback+0xc8>)
 800104c:	f006 feb0 	bl	8007db0 <HAL_UART_Transmit>
			parse_GPS(UART3_Rx_buf, UART3_Rx_count);
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <HAL_UART_RxCpltCallback+0xc0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	481f      	ldr	r0, [pc, #124]	; (80010d4 <HAL_UART_RxCpltCallback+0xc4>)
 8001058:	f000 f85a 	bl	8001110 <parse_GPS>
			UART3_Rx_count = 0;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_UART_RxCpltCallback+0xc0>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, UART3_Rx_buf + UART3_Rx_count, 1);
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_UART_RxCpltCallback+0xc0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_UART_RxCpltCallback+0xc4>)
 800106a:	4413      	add	r3, r2
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	4816      	ldr	r0, [pc, #88]	; (80010cc <HAL_UART_RxCpltCallback+0xbc>)
 8001072:	f006 ff28 	bl	8007ec6 <HAL_UART_Receive_IT>
			UART5_Rx_count = 0;
		}

		HAL_UART_Receive_IT(&huart5, UART5_Rx_buf + UART5_Rx_count, 1);
	}
}
 8001076:	e025      	b.n	80010c4 <HAL_UART_RxCpltCallback+0xb4>
	} else if (huart == &huart5) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <HAL_UART_RxCpltCallback+0xcc>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d121      	bne.n	80010c4 <HAL_UART_RxCpltCallback+0xb4>
		uint8_t c = UART5_Rx_buf[UART5_Rx_count++];
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	4916      	ldr	r1, [pc, #88]	; (80010e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001088:	600a      	str	r2, [r1, #0]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_UART_RxCpltCallback+0xd4>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	73fb      	strb	r3, [r7, #15]
		if(c == '\r' || UART5_Rx_count >= 1) {
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	2b0d      	cmp	r3, #13
 8001094:	d003      	beq.n	800109e <HAL_UART_RxCpltCallback+0x8e>
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	dd08      	ble.n	80010b0 <HAL_UART_RxCpltCallback+0xa0>
			parse_lora(UART5_Rx_buf, UART5_Rx_count);
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_UART_RxCpltCallback+0xd0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <HAL_UART_RxCpltCallback+0xd4>)
 80010a6:	f000 f81f 	bl	80010e8 <parse_lora>
			UART5_Rx_count = 0;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_UART_RxCpltCallback+0xd0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, UART5_Rx_buf + UART5_Rx_count, 1);
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_UART_RxCpltCallback+0xd0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_UART_RxCpltCallback+0xd4>)
 80010b8:	4413      	add	r3, r2
 80010ba:	2201      	movs	r2, #1
 80010bc:	4619      	mov	r1, r3
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <HAL_UART_RxCpltCallback+0xcc>)
 80010c0:	f006 ff01 	bl	8007ec6 <HAL_UART_Receive_IT>
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200003a8 	.word	0x200003a8
 80010d0:	20000538 	.word	0x20000538
 80010d4:	200004d4 	.word	0x200004d4
 80010d8:	20000360 	.word	0x20000360
 80010dc:	20000318 	.word	0x20000318
 80010e0:	200005a0 	.word	0x200005a0
 80010e4:	2000053c 	.word	0x2000053c

080010e8 <parse_lora>:

void parse_lora(uint8_t* buf, int count) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, buf, count, HAL_MAX_DELAY);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <parse_lora+0x24>)
 80010fe:	f006 fe57 	bl	8007db0 <HAL_UART_Transmit>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000360 	.word	0x20000360

08001110 <parse_GPS>:

void parse_GPS(uint8_t* buf, int count) {
 8001110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001114:	b090      	sub	sp, #64	; 0x40
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
	// $GPRMC,011725.00,A,4739.21106,N,12218.32692,W,0.019,,190224,,,D*6A
	// 0      1         2 3          4 5           6

	if (count <= 6 || strcmp((char*) buf, "$GPRMC")) return;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2b06      	cmp	r3, #6
 8001120:	f340 8096 	ble.w	8001250 <parse_GPS+0x140>
 8001124:	494d      	ldr	r1, [pc, #308]	; (800125c <parse_GPS+0x14c>)
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff f852 	bl	80001d0 <strcmp>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 808e 	bne.w	8001250 <parse_GPS+0x140>

	int i = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t* items[11];
	uint8_t* ptr = buf;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
	items[i++] = ptr;
 800113c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	3340      	adds	r3, #64	; 0x40
 8001146:	443b      	add	r3, r7
 8001148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800114a:	f843 2c34 	str.w	r2, [r3, #-52]

	while (ptr < buf+count) {
 800114e:	e016      	b.n	800117e <parse_GPS+0x6e>
		if (*ptr == ',') {
 8001150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b2c      	cmp	r3, #44	; 0x2c
 8001156:	d10f      	bne.n	8001178 <parse_GPS+0x68>
			*ptr = '\0';
 8001158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
			if (i < 11) items[i++] = ptr+1;
 800115e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001160:	2b0a      	cmp	r3, #10
 8001162:	dc13      	bgt.n	800118c <parse_GPS+0x7c>
 8001164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	63fa      	str	r2, [r7, #60]	; 0x3c
 800116a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800116c:	3201      	adds	r2, #1
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	3340      	adds	r3, #64	; 0x40
 8001172:	443b      	add	r3, r7
 8001174:	f843 2c34 	str.w	r2, [r3, #-52]
			else break;
		}
		ptr++;
 8001178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117a:	3301      	adds	r3, #1
 800117c:	63bb      	str	r3, [r7, #56]	; 0x38
	while (ptr < buf+count) {
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001186:	429a      	cmp	r2, r3
 8001188:	d3e2      	bcc.n	8001150 <parse_GPS+0x40>
 800118a:	e000      	b.n	800118e <parse_GPS+0x7e>
			else break;
 800118c:	bf00      	nop
	}

	if (*items[2] == 'A') time = atof(items[1]);
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b41      	cmp	r3, #65	; 0x41
 8001194:	d10a      	bne.n	80011ac <parse_GPS+0x9c>
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4618      	mov	r0, r3
 800119a:	f00b fb17 	bl	800c7cc <atof>
 800119e:	eeb0 7a40 	vmov.f32	s14, s0
 80011a2:	eef0 7a60 	vmov.f32	s15, s1
 80011a6:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <parse_GPS+0x150>)
 80011a8:	ed83 7b00 	vstr	d7, [r3]
	if (*items[4] == 'N') latitude = format_NMEA(items[3]);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b4e      	cmp	r3, #78	; 0x4e
 80011b2:	d10b      	bne.n	80011cc <parse_GPS+0xbc>
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f85a 	bl	8001270 <format_NMEA>
 80011bc:	eeb0 7a40 	vmov.f32	s14, s0
 80011c0:	eef0 7a60 	vmov.f32	s15, s1
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <parse_GPS+0x154>)
 80011c6:	ed83 7b00 	vstr	d7, [r3]
 80011ca:	e00f      	b.n	80011ec <parse_GPS+0xdc>
	else if (*items[4] == 'S') latitude = -format_NMEA(items[3]);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b53      	cmp	r3, #83	; 0x53
 80011d2:	d10b      	bne.n	80011ec <parse_GPS+0xdc>
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f84a 	bl	8001270 <format_NMEA>
 80011dc:	ec53 2b10 	vmov	r2, r3, d0
 80011e0:	4690      	mov	r8, r2
 80011e2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <parse_GPS+0x154>)
 80011e8:	e9c3 8900 	strd	r8, r9, [r3]
	if (*items[6] == 'E') longitude = format_NMEA(items[5]);
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b45      	cmp	r3, #69	; 0x45
 80011f2:	d10b      	bne.n	800120c <parse_GPS+0xfc>
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f83a 	bl	8001270 <format_NMEA>
 80011fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001200:	eef0 7a60 	vmov.f32	s15, s1
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <parse_GPS+0x158>)
 8001206:	ed83 7b00 	vstr	d7, [r3]
 800120a:	e00f      	b.n	800122c <parse_GPS+0x11c>
	else if (*items[6] == 'W') longitude = -format_NMEA(items[5]);
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b57      	cmp	r3, #87	; 0x57
 8001212:	d10b      	bne.n	800122c <parse_GPS+0x11c>
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f82a 	bl	8001270 <format_NMEA>
 800121c:	ec53 2b10 	vmov	r2, r3, d0
 8001220:	4614      	mov	r4, r2
 8001222:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <parse_GPS+0x158>)
 8001228:	e9c3 4500 	strd	r4, r5, [r3]
	if (*items[8] != '\0') abs_heading = atof(items[8]);
 800122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00e      	beq.n	8001252 <parse_GPS+0x142>
 8001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001236:	4618      	mov	r0, r3
 8001238:	f00b fac8 	bl	800c7cc <atof>
 800123c:	ec53 2b10 	vmov	r2, r3, d0
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fce0 	bl	8000c08 <__aeabi_d2f>
 8001248:	4603      	mov	r3, r0
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <parse_GPS+0x15c>)
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e000      	b.n	8001252 <parse_GPS+0x142>
	if (count <= 6 || strcmp((char*) buf, "$GPRMC")) return;
 8001250:	bf00      	nop
}
 8001252:	3740      	adds	r7, #64	; 0x40
 8001254:	46bd      	mov	sp, r7
 8001256:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800125a:	bf00      	nop
 800125c:	08010fd0 	.word	0x08010fd0
 8001260:	20000450 	.word	0x20000450
 8001264:	20000458 	.word	0x20000458
 8001268:	20000460 	.word	0x20000460
 800126c:	20000468 	.word	0x20000468

08001270 <format_NMEA>:

double format_NMEA(uint8_t* buf) {
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	double val = atof(buf);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f00b faa7 	bl	800c7cc <atof>
 800127e:	ed87 0b04 	vstr	d0, [r7, #16]
	int deg = val/100;
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <format_NMEA+0x8c>)
 8001288:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800128c:	f7ff faee 	bl	800086c <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fc6e 	bl	8000b78 <__aeabi_d2iz>
 800129c:	4603      	mov	r3, r0
 800129e:	60fb      	str	r3, [r7, #12]
	return (val - deg*100)/60 + deg;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2264      	movs	r2, #100	; 0x64
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f94b 	bl	8000544 <__aeabi_i2d>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012b6:	f7fe fff7 	bl	80002a8 <__aeabi_dsub>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <format_NMEA+0x90>)
 80012c8:	f7ff fad0 	bl	800086c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4614      	mov	r4, r2
 80012d2:	461d      	mov	r5, r3
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff f935 	bl	8000544 <__aeabi_i2d>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4620      	mov	r0, r4
 80012e0:	4629      	mov	r1, r5
 80012e2:	f7fe ffe3 	bl	80002ac <__adddf3>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80012ee:	eeb0 0a47 	vmov.f32	s0, s14
 80012f2:	eef0 0a67 	vmov.f32	s1, s15
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bdb0      	pop	{r4, r5, r7, pc}
 80012fc:	40590000 	.word	0x40590000
 8001300:	404e0000 	.word	0x404e0000

08001304 <read_rel_heading>:
	sprintf((char*) UART2_Tx_buf, "Time=%d:%d:%d Latitude=%f, Longitude=%f\r\n",
			Hours, Min, Sec, Lat, Long);
	printd();
}

float read_rel_heading() {
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_HEADING, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2302      	movs	r3, #2
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	221a      	movs	r2, #26
 800131c:	2150      	movs	r1, #80	; 0x50
 800131e:	480c      	ldr	r0, [pc, #48]	; (8001350 <read_rel_heading+0x4c>)
 8001320:	f004 fb0a 	bl	8005938 <HAL_I2C_Mem_Read>
	return (float)((int16_t)(data[1] << 8 | data[0])) / 16.0;
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21a      	sxth	r2, r3
 800132a:	793b      	ldrb	r3, [r7, #4]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21b      	sxth	r3, r3
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800133e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001342:	eef0 7a66 	vmov.f32	s15, s13
}
 8001346:	eeb0 0a67 	vmov.f32	s0, s15
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000224 	.word	0x20000224

08001354 <set_steering>:
//	double siny_cosp = 2 * (qw * qz + qx * qy);
//	double cosy_cosp = 1 - 2 * (qy * qy + qz * qz);
//	return atan2(siny_cosp, cosy_cosp)*180/3.14159265;
//}

void set_steering(float direction) {
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = direction*500+1500;
 800135e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001362:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013ac <set_steering+0x58>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80013b0 <set_steering+0x5c>
 800136e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001376:	ee17 3a90 	vmov	r3, s15
 800137a:	60fb      	str	r3, [r7, #12]
	if (pulse > 2000) pulse = 2000;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001382:	dd02      	ble.n	800138a <set_steering+0x36>
 8001384:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001388:	60fb      	str	r3, [r7, #12]
	if (pulse < 1000) pulse = 1000;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001390:	da02      	bge.n	8001398 <set_steering+0x44>
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <set_steering+0x60>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	43fa0000 	.word	0x43fa0000
 80013b0:	44bb8000 	.word	0x44bb8000
 80013b4:	200002d0 	.word	0x200002d0

080013b8 <set_speed>:

void set_speed(float speed) {
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = speed*200+1500;
 80013c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001414 <set_speed+0x5c>
 80013ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ce:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001418 <set_speed+0x60>
 80013d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013da:	ee17 3a90 	vmov	r3, s15
 80013de:	60fb      	str	r3, [r7, #12]
	if (pulse > 1700) pulse = 1700;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80013e6:	4293      	cmp	r3, r2
 80013e8:	dd02      	ble.n	80013f0 <set_speed+0x38>
 80013ea:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80013ee:	60fb      	str	r3, [r7, #12]
	if (pulse < 1500) pulse = 1500;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f240 52db 	movw	r2, #1499	; 0x5db
 80013f6:	4293      	cmp	r3, r2
 80013f8:	dc02      	bgt.n	8001400 <set_speed+0x48>
 80013fa:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80013fe:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse);
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <set_speed+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	43480000 	.word	0x43480000
 8001418:	44bb8000 	.word	0x44bb8000
 800141c:	200002d0 	.word	0x200002d0

08001420 <printd>:

void printd() {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, UART2_Tx_buf, strlen((char*) UART2_Tx_buf), HAL_MAX_DELAY);
 8001424:	4806      	ldr	r0, [pc, #24]	; (8001440 <printd+0x20>)
 8001426:	f7fe ff33 	bl	8000290 <strlen>
 800142a:	4603      	mov	r3, r0
 800142c:	b29a      	uxth	r2, r3
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	4903      	ldr	r1, [pc, #12]	; (8001440 <printd+0x20>)
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <printd+0x24>)
 8001436:	f006 fcbb 	bl	8007db0 <HAL_UART_Transmit>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000470 	.word	0x20000470
 8001444:	20000360 	.word	0x20000360

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b090      	sub	sp, #64	; 0x40
 800144c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144e:	f001 f841 	bl	80024d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001452:	f000 f95f 	bl	8001714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001456:	f000 fb79 	bl	8001b4c <MX_GPIO_Init>
  MX_DMA_Init();
 800145a:	f000 fb57 	bl	8001b0c <MX_DMA_Init>
  MX_I2C1_Init();
 800145e:	f000 f9c3 	bl	80017e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001462:	f000 f9ef 	bl	8001844 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001466:	f00a fea7 	bl	800c1b8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800146a:	f000 fafb 	bl	8001a64 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800146e:	f000 fa1f 	bl	80018b0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001472:	f000 fb21 	bl	8001ab8 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001476:	f000 facb 	bl	8001a10 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  int i = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
  char ready = 0; // wait for GPS fix
 800147e:	2300      	movs	r3, #0
 8001480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001484:	2100      	movs	r1, #0
 8001486:	488e      	ldr	r0, [pc, #568]	; (80016c0 <main+0x278>)
 8001488:	f005 fe06 	bl	8007098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800148c:	2104      	movs	r1, #4
 800148e:	488c      	ldr	r0, [pc, #560]	; (80016c0 <main+0x278>)
 8001490:	f005 fe02 	bl	8007098 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, UART3_Rx_buf, 1);
 8001494:	2201      	movs	r2, #1
 8001496:	498b      	ldr	r1, [pc, #556]	; (80016c4 <main+0x27c>)
 8001498:	488b      	ldr	r0, [pc, #556]	; (80016c8 <main+0x280>)
 800149a:	f006 fd14 	bl	8007ec6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, UART5_Rx_buf, 1);
 800149e:	2201      	movs	r2, #1
 80014a0:	498a      	ldr	r1, [pc, #552]	; (80016cc <main+0x284>)
 80014a2:	488b      	ldr	r0, [pc, #556]	; (80016d0 <main+0x288>)
 80014a4:	f006 fd0f 	bl	8007ec6 <HAL_UART_Receive_IT>
  uint8_t mode = BNO055_MODE_IMU;
 80014a8:	2308      	movs	r3, #8
 80014aa:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_OPRMODE, I2C_MEMADD_SIZE_8BIT, &mode, 1, HAL_MAX_DELAY);
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2301      	movs	r3, #1
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	223d      	movs	r2, #61	; 0x3d
 80014be:	2150      	movs	r1, #80	; 0x50
 80014c0:	4884      	ldr	r0, [pc, #528]	; (80016d4 <main+0x28c>)
 80014c2:	f004 f93f 	bl	8005744 <HAL_I2C_Mem_Write>
  HAL_UART_Transmit(&huart2, (uint8_t*) "Hello!\r\n", 8, HAL_MAX_DELAY);
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	2208      	movs	r2, #8
 80014cc:	4982      	ldr	r1, [pc, #520]	; (80016d8 <main+0x290>)
 80014ce:	4883      	ldr	r0, [pc, #524]	; (80016dc <main+0x294>)
 80014d0:	f006 fc6e 	bl	8007db0 <HAL_UART_Transmit>
  set_steering(0);
 80014d4:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80016e0 <main+0x298>
 80014d8:	f7ff ff3c 	bl	8001354 <set_steering>
  set_speed(0);
 80014dc:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80016e0 <main+0x298>
 80014e0:	f7ff ff6a 	bl	80013b8 <set_speed>
  HAL_Delay(2000);
 80014e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014e8:	f001 f866 	bl	80025b8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80014ec:	f00a fe8a 	bl	800c204 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    rel_heading = read_rel_heading();
 80014f0:	f7ff ff08 	bl	8001304 <read_rel_heading>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <main+0x29c>)
 80014fa:	edc3 7a00 	vstr	s15, [r3]
    // sprintf((char*) UART2_Tx_buf, "%f %f %f\r\n", latitude, longitude, rel_heading);
    // printd();

    if (latitude && longitude) ready = 1;
 80014fe:	4b7a      	ldr	r3, [pc, #488]	; (80016e8 <main+0x2a0>)
 8001500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	f7ff faec 	bl	8000ae8 <__aeabi_dcmpeq>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10e      	bne.n	8001534 <main+0xec>
 8001516:	4b75      	ldr	r3, [pc, #468]	; (80016ec <main+0x2a4>)
 8001518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	f7ff fae0 	bl	8000ae8 <__aeabi_dcmpeq>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <main+0xec>
 800152e:	2301      	movs	r3, #1
 8001530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (ready) {
 8001534:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80af 	beq.w	800169c <main+0x254>
    	double lat_err = target_latitude - latitude;
 800153e:	4b6c      	ldr	r3, [pc, #432]	; (80016f0 <main+0x2a8>)
 8001540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <main+0x2a0>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7fe fead 	bl	80002a8 <__aeabi_dsub>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	e9c7 2306 	strd	r2, r3, [r7, #24]
    	double lon_err = target_longitude - longitude;
 8001556:	4b67      	ldr	r3, [pc, #412]	; (80016f4 <main+0x2ac>)
 8001558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800155c:	4b63      	ldr	r3, [pc, #396]	; (80016ec <main+0x2a4>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7fe fea1 	bl	80002a8 <__aeabi_dsub>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    	// check that we're at least ~5m away from the target
    	if (lat_err*lat_err+lon_err*lon_err > 5e-5*5e-5) {
 800156e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001572:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001576:	f7ff f84f 	bl	8000618 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4614      	mov	r4, r2
 8001580:	461d      	mov	r5, r3
 8001582:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001586:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800158a:	f7ff f845 	bl	8000618 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7fe fe89 	bl	80002ac <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	a345      	add	r3, pc, #276	; (adr r3, 80016b8 <main+0x270>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff fac6 	bl	8000b38 <__aeabi_dcmpgt>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d078      	beq.n	80016a4 <main+0x25c>
    		// float target_abs_heading = atan2(lon_err, lat_err)*180/3.14159265;
    		int time_ms = i*LOOP_DELAY;
 80015b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b4:	2264      	movs	r2, #100	; 0x64
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	60fb      	str	r3, [r7, #12]
    		float target_abs_heading = ((time_ms/3000)%4)*90;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4a4e      	ldr	r2, [pc, #312]	; (80016f8 <main+0x2b0>)
 80015c0:	fb82 1203 	smull	r1, r2, r2, r3
 80015c4:	1192      	asrs	r2, r2, #6
 80015c6:	17db      	asrs	r3, r3, #31
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	425a      	negs	r2, r3
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	bf58      	it	pl
 80015d6:	4253      	negpl	r3, r2
 80015d8:	225a      	movs	r2, #90	; 0x5a
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e6:	edc7 7a02 	vstr	s15, [r7, #8]
    		if (time_ms > 12000) ready = 0;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80015f0:	4293      	cmp	r3, r2
 80015f2:	dd02      	ble.n	80015fa <main+0x1b2>
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


    		int heading_err = target_abs_heading - rel_heading;
 80015fa:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <main+0x29c>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ed97 7a02 	vldr	s14, [r7, #8]
 8001604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160c:	ee17 3a90 	vmov	r3, s15
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    		if (heading_err < 0) heading_err += 360;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	2b00      	cmp	r3, #0
 8001616:	da03      	bge.n	8001620 <main+0x1d8>
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800161e:	627b      	str	r3, [r7, #36]	; 0x24

    		set_steering(-((heading_err + 180)%360 - 180)/180.0*steer_Pk);
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	33b4      	adds	r3, #180	; 0xb4
 8001624:	4a35      	ldr	r2, [pc, #212]	; (80016fc <main+0x2b4>)
 8001626:	fb82 1203 	smull	r1, r2, r2, r3
 800162a:	441a      	add	r2, r3
 800162c:	1211      	asrs	r1, r2, #8
 800162e:	17da      	asrs	r2, r3, #31
 8001630:	1a8a      	subs	r2, r1, r2
 8001632:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001636:	fb01 f202 	mul.w	r2, r1, r2
 800163a:	1a9a      	subs	r2, r3, r2
 800163c:	f1c2 03b4 	rsb	r3, r2, #180	; 0xb4
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff7f 	bl	8000544 <__aeabi_i2d>
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <main+0x2b8>)
 800164c:	f7ff f90e 	bl	800086c <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4614      	mov	r4, r2
 8001656:	461d      	mov	r5, r3
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <main+0x2bc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff83 	bl	8000568 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe ffd5 	bl	8000618 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fac7 	bl	8000c08 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	ee00 3a10 	vmov	s0, r3
 8001680:	f7ff fe68 	bl	8001354 <set_steering>

    		sprintf((char*) UART2_Tx_buf, "%d\r\n", heading_err);
 8001684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001686:	4920      	ldr	r1, [pc, #128]	; (8001708 <main+0x2c0>)
 8001688:	4820      	ldr	r0, [pc, #128]	; (800170c <main+0x2c4>)
 800168a:	f00c feb7 	bl	800e3fc <siprintf>
    		printd();
 800168e:	f7ff fec7 	bl	8001420 <printd>

    		set_speed(.6); // fast
 8001692:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001710 <main+0x2c8>
 8001696:	f7ff fe8f 	bl	80013b8 <set_speed>
 800169a:	e003      	b.n	80016a4 <main+0x25c>
    		//set_speed(.55); // slow
    		//set_speed(0); // off
    	}
    } else {
    	set_speed(0);
 800169c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80016e0 <main+0x298>
 80016a0:	f7ff fe8a 	bl	80013b8 <set_speed>
    }

    HAL_Delay(LOOP_DELAY);
 80016a4:	2064      	movs	r0, #100	; 0x64
 80016a6:	f000 ff87 	bl	80025b8 <HAL_Delay>
    i++;
 80016aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ac:	3301      	adds	r3, #1
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    MX_USB_HOST_Process();
 80016b0:	e71c      	b.n	80014ec <main+0xa4>
 80016b2:	bf00      	nop
 80016b4:	f3af 8000 	nop.w
 80016b8:	e2308c3a 	.word	0xe2308c3a
 80016bc:	3e25798e 	.word	0x3e25798e
 80016c0:	200002d0 	.word	0x200002d0
 80016c4:	200004d4 	.word	0x200004d4
 80016c8:	200003a8 	.word	0x200003a8
 80016cc:	2000053c 	.word	0x2000053c
 80016d0:	20000318 	.word	0x20000318
 80016d4:	20000224 	.word	0x20000224
 80016d8:	08011004 	.word	0x08011004
 80016dc:	20000360 	.word	0x20000360
 80016e0:	00000000 	.word	0x00000000
 80016e4:	2000046c 	.word	0x2000046c
 80016e8:	20000458 	.word	0x20000458
 80016ec:	20000460 	.word	0x20000460
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000008 	.word	0x20000008
 80016f8:	057619f1 	.word	0x057619f1
 80016fc:	b60b60b7 	.word	0xb60b60b7
 8001700:	40668000 	.word	0x40668000
 8001704:	20000010 	.word	0x20000010
 8001708:	08011010 	.word	0x08011010
 800170c:	20000470 	.word	0x20000470
 8001710:	3f19999a 	.word	0x3f19999a

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b094      	sub	sp, #80	; 0x50
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0320 	add.w	r3, r7, #32
 800171e:	2230      	movs	r2, #48	; 0x30
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f00c fecd 	bl	800e4c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <SystemClock_Config+0xcc>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	4a27      	ldr	r2, [pc, #156]	; (80017e0 <SystemClock_Config+0xcc>)
 8001742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001746:	6413      	str	r3, [r2, #64]	; 0x40
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <SystemClock_Config+0xcc>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <SystemClock_Config+0xd0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <SystemClock_Config+0xd0>)
 800175e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <SystemClock_Config+0xd0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001770:	2301      	movs	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001784:	2308      	movs	r3, #8
 8001786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001788:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800178c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178e:	2302      	movs	r3, #2
 8001790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001792:	2307      	movs	r3, #7
 8001794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	4618      	mov	r0, r3
 800179c:	f004 feb2 	bl	8006504 <HAL_RCC_OscConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017a6:	f000 faef 	bl	8001d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017aa:	230f      	movs	r3, #15
 80017ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ae:	2302      	movs	r3, #2
 80017b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2105      	movs	r1, #5
 80017c8:	4618      	mov	r0, r3
 80017ca:	f005 f913 	bl	80069f4 <HAL_RCC_ClockConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017d4:	f000 fad8 	bl	8001d88 <Error_Handler>
  }
}
 80017d8:	bf00      	nop
 80017da:	3750      	adds	r7, #80	; 0x50
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40007000 	.word	0x40007000

080017e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_I2C1_Init+0x50>)
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <MX_I2C1_Init+0x54>)
 80017f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_I2C1_Init+0x50>)
 80017f4:	4a12      	ldr	r2, [pc, #72]	; (8001840 <MX_I2C1_Init+0x58>)
 80017f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_I2C1_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_I2C1_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_I2C1_Init+0x50>)
 8001806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <MX_I2C1_Init+0x50>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_I2C1_Init+0x50>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <MX_I2C1_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_I2C1_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_I2C1_Init+0x50>)
 8001826:	f003 fe49 	bl	80054bc <HAL_I2C_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001830:	f000 faaa 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000224 	.word	0x20000224
 800183c:	40005400 	.word	0x40005400
 8001840:	000186a0 	.word	0x000186a0

08001844 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_SPI1_Init+0x64>)
 800184a:	4a18      	ldr	r2, [pc, #96]	; (80018ac <MX_SPI1_Init+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_SPI1_Init+0x64>)
 8001850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001854:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_SPI1_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_SPI1_Init+0x64>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_SPI1_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_SPI1_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_SPI1_Init+0x64>)
 8001870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001874:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_SPI1_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <MX_SPI1_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_SPI1_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <MX_SPI1_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_SPI1_Init+0x64>)
 8001890:	220a      	movs	r2, #10
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_SPI1_Init+0x64>)
 8001896:	f005 facd 	bl	8006e34 <HAL_SPI_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018a0:	f000 fa72 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000278 	.word	0x20000278
 80018ac:	40013000 	.word	0x40013000

080018b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b096      	sub	sp, #88	; 0x58
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
 80018de:	615a      	str	r2, [r3, #20]
 80018e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2220      	movs	r2, #32
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f00c fdea 	bl	800e4c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ee:	4b46      	ldr	r3, [pc, #280]	; (8001a08 <MX_TIM1_Init+0x158>)
 80018f0:	4a46      	ldr	r2, [pc, #280]	; (8001a0c <MX_TIM1_Init+0x15c>)
 80018f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 80018f4:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <MX_TIM1_Init+0x158>)
 80018f6:	22a8      	movs	r2, #168	; 0xa8
 80018f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fa:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <MX_TIM1_Init+0x158>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001900:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <MX_TIM1_Init+0x158>)
 8001902:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001906:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <MX_TIM1_Init+0x158>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800190e:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <MX_TIM1_Init+0x158>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	4b3c      	ldr	r3, [pc, #240]	; (8001a08 <MX_TIM1_Init+0x158>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800191a:	483b      	ldr	r0, [pc, #236]	; (8001a08 <MX_TIM1_Init+0x158>)
 800191c:	f005 fb13 	bl	8006f46 <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001926:	f000 fa2f 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001930:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001934:	4619      	mov	r1, r3
 8001936:	4834      	ldr	r0, [pc, #208]	; (8001a08 <MX_TIM1_Init+0x158>)
 8001938:	f005 fd38 	bl	80073ac <HAL_TIM_ConfigClockSource>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001942:	f000 fa21 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001946:	4830      	ldr	r0, [pc, #192]	; (8001a08 <MX_TIM1_Init+0x158>)
 8001948:	f005 fb4c 	bl	8006fe4 <HAL_TIM_PWM_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001952:	f000 fa19 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800195e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001962:	4619      	mov	r1, r3
 8001964:	4828      	ldr	r0, [pc, #160]	; (8001a08 <MX_TIM1_Init+0x158>)
 8001966:	f006 f905 	bl	8007b74 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001970:	f000 fa0a 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001974:	2360      	movs	r3, #96	; 0x60
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	2200      	movs	r2, #0
 8001998:	4619      	mov	r1, r3
 800199a:	481b      	ldr	r0, [pc, #108]	; (8001a08 <MX_TIM1_Init+0x158>)
 800199c:	f005 fc44 	bl	8007228 <HAL_TIM_PWM_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80019a6:	f000 f9ef 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	2204      	movs	r2, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	4814      	ldr	r0, [pc, #80]	; (8001a08 <MX_TIM1_Init+0x158>)
 80019b8:	f005 fc36 	bl	8007228 <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80019c2:	f000 f9e1 	bl	8001d88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM1_Init+0x158>)
 80019ea:	f006 f93f 	bl	8007c6c <HAL_TIMEx_ConfigBreakDeadTime>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80019f4:	f000 f9c8 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM1_Init+0x158>)
 80019fa:	f000 faa5 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 80019fe:	bf00      	nop
 8001a00:	3758      	adds	r7, #88	; 0x58
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200002d0 	.word	0x200002d0
 8001a0c:	40010000 	.word	0x40010000

08001a10 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <MX_UART5_Init+0x50>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a1c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001a20:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a48:	f006 f962 	bl	8007d10 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a52:	f000 f999 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000318 	.word	0x20000318
 8001a60:	40005000 	.word	0x40005000

08001a64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <MX_USART2_UART_Init+0x50>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_USART2_UART_Init+0x4c>)
 8001a9c:	f006 f938 	bl	8007d10 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aa6:	f000 f96f 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000360 	.word	0x20000360
 8001ab4:	40004400 	.word	0x40004400

08001ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_USART3_UART_Init+0x4c>)
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <MX_USART3_UART_Init+0x50>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <MX_USART3_UART_Init+0x4c>)
 8001ac4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <MX_USART3_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <MX_USART3_UART_Init+0x4c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <MX_USART3_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MX_USART3_UART_Init+0x4c>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <MX_USART3_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_USART3_UART_Init+0x4c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_USART3_UART_Init+0x4c>)
 8001af0:	f006 f90e 	bl	8007d10 <HAL_UART_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001afa:	f000 f945 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200003a8 	.word	0x200003a8
 8001b08:	40004800 	.word	0x40004800

08001b0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_DMA_Init+0x3c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <MX_DMA_Init+0x3c>)
 8001b1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_DMA_Init+0x3c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	200c      	movs	r0, #12
 8001b34:	f000 fe3f 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b38:	200c      	movs	r0, #12
 8001b3a:	f000 fe58 	bl	80027ee <HAL_NVIC_EnableIRQ>

}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	; 0x30
 8001b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	4b82      	ldr	r3, [pc, #520]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a81      	ldr	r2, [pc, #516]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001b6c:	f043 0310 	orr.w	r3, r3, #16
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b7f      	ldr	r3, [pc, #508]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a7a      	ldr	r2, [pc, #488]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b74      	ldr	r3, [pc, #464]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a73      	ldr	r2, [pc, #460]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b71      	ldr	r3, [pc, #452]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a6c      	ldr	r2, [pc, #432]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a65      	ldr	r2, [pc, #404]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	4b5f      	ldr	r3, [pc, #380]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a5e      	ldr	r2, [pc, #376]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b5c      	ldr	r3, [pc, #368]	; (8001d70 <MX_GPIO_Init+0x224>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	4859      	ldr	r0, [pc, #356]	; (8001d74 <MX_GPIO_Init+0x228>)
 8001c10:	f001 fb20 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	2101      	movs	r1, #1
 8001c18:	4857      	ldr	r0, [pc, #348]	; (8001d78 <MX_GPIO_Init+0x22c>)
 8001c1a:	f001 fb1b 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001c24:	4855      	ldr	r0, [pc, #340]	; (8001d7c <MX_GPIO_Init+0x230>)
 8001c26:	f001 fb15 	bl	8003254 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	484c      	ldr	r0, [pc, #304]	; (8001d74 <MX_GPIO_Init+0x228>)
 8001c42:	f001 f96b 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4846      	ldr	r0, [pc, #280]	; (8001d78 <MX_GPIO_Init+0x22c>)
 8001c5e:	f001 f95d 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001c62:	2308      	movs	r3, #8
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c72:	2305      	movs	r3, #5
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	483e      	ldr	r0, [pc, #248]	; (8001d78 <MX_GPIO_Init+0x22c>)
 8001c7e:	f001 f94d 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	483a      	ldr	r0, [pc, #232]	; (8001d80 <MX_GPIO_Init+0x234>)
 8001c98:	f001 f940 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cac:	2306      	movs	r3, #6
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4832      	ldr	r0, [pc, #200]	; (8001d80 <MX_GPIO_Init+0x234>)
 8001cb8:	f001 f930 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	482d      	ldr	r0, [pc, #180]	; (8001d84 <MX_GPIO_Init+0x238>)
 8001cd0:	f001 f924 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4824      	ldr	r0, [pc, #144]	; (8001d84 <MX_GPIO_Init+0x238>)
 8001cf2:	f001 f913 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001cf6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001cfa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	481b      	ldr	r0, [pc, #108]	; (8001d7c <MX_GPIO_Init+0x230>)
 8001d10:	f001 f904 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8001d14:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d26:	2306      	movs	r3, #6
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4811      	ldr	r0, [pc, #68]	; (8001d78 <MX_GPIO_Init+0x22c>)
 8001d32:	f001 f8f3 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d36:	2320      	movs	r3, #32
 8001d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <MX_GPIO_Init+0x230>)
 8001d4a:	f001 f8e7 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d52:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	4804      	ldr	r0, [pc, #16]	; (8001d74 <MX_GPIO_Init+0x228>)
 8001d64:	f001 f8da 	bl	8002f1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d68:	bf00      	nop
 8001d6a:	3730      	adds	r7, #48	; 0x30
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020400 	.word	0x40020400

08001d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8c:	b672      	cpsid	i
}
 8001d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <Error_Handler+0x8>
	...

08001d94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_MspInit+0x4c>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <HAL_MspInit+0x4c>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_MspInit+0x4c>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_MspInit+0x4c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <HAL_MspInit+0x4c>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_MspInit+0x4c>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dd2:	2007      	movs	r0, #7
 8001dd4:	f000 fce4 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800

08001de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_I2C_MspInit+0x84>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12c      	bne.n	8001e60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e28:	2312      	movs	r3, #18
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e34:	2304      	movs	r3, #4
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480c      	ldr	r0, [pc, #48]	; (8001e70 <HAL_I2C_MspInit+0x8c>)
 8001e40:	f001 f86c 	bl	8002f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e52:	6413      	str	r3, [r2, #64]	; 0x40
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	; 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40005400 	.word	0x40005400
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020400 	.word	0x40020400

08001e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_SPI_MspInit+0x84>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d12b      	bne.n	8001eee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a17      	ldr	r2, [pc, #92]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001ece:	23e0      	movs	r3, #224	; 0xe0
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ede:	2305      	movs	r3, #5
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <HAL_SPI_MspInit+0x8c>)
 8001eea:	f001 f817 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40013000 	.word	0x40013000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000

08001f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <HAL_TIM_Base_MspInit+0x3c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10d      	bne.n	8001f32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_TIM_Base_MspInit+0x40>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <HAL_TIM_Base_MspInit+0x40>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_TIM_Base_MspInit+0x40>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40010000 	.word	0x40010000
 8001f44:	40023800 	.word	0x40023800

08001f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <HAL_TIM_MspPostInit+0x68>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d11e      	bne.n	8001fa8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a10      	ldr	r2, [pc, #64]	; (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001f86:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001f8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <HAL_TIM_MspPostInit+0x70>)
 8001fa4:	f000 ffba 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40021000 	.word	0x40021000

08001fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b090      	sub	sp, #64	; 0x40
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a8a      	ldr	r2, [pc, #552]	; (8002204 <HAL_UART_MspInit+0x248>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d153      	bne.n	8002086 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe2:	4b89      	ldr	r3, [pc, #548]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a88      	ldr	r2, [pc, #544]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8001fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b86      	ldr	r3, [pc, #536]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffe:	4b82      	ldr	r3, [pc, #520]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a81      	ldr	r2, [pc, #516]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b7f      	ldr	r3, [pc, #508]	; (8002208 <HAL_UART_MspInit+0x24c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
 800201a:	4b7b      	ldr	r3, [pc, #492]	; (8002208 <HAL_UART_MspInit+0x24c>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a7a      	ldr	r2, [pc, #488]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b78      	ldr	r3, [pc, #480]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	623b      	str	r3, [r7, #32]
 8002030:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002044:	2308      	movs	r3, #8
 8002046:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800204c:	4619      	mov	r1, r3
 800204e:	486f      	ldr	r0, [pc, #444]	; (800220c <HAL_UART_MspInit+0x250>)
 8002050:	f000 ff64 	bl	8002f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002054:	2304      	movs	r3, #4
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002064:	2308      	movs	r3, #8
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800206c:	4619      	mov	r1, r3
 800206e:	4868      	ldr	r0, [pc, #416]	; (8002210 <HAL_UART_MspInit+0x254>)
 8002070:	f000 ff54 	bl	8002f1c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	2035      	movs	r0, #53	; 0x35
 800207a:	f000 fb9c 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800207e:	2035      	movs	r0, #53	; 0x35
 8002080:	f000 fbb5 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002084:	e0ba      	b.n	80021fc <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a62      	ldr	r2, [pc, #392]	; (8002214 <HAL_UART_MspInit+0x258>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d12c      	bne.n	80020ea <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	4a5b      	ldr	r2, [pc, #364]	; (8002208 <HAL_UART_MspInit+0x24c>)
 800209a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209e:	6413      	str	r3, [r2, #64]	; 0x40
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_UART_MspInit+0x24c>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	4b55      	ldr	r3, [pc, #340]	; (8002208 <HAL_UART_MspInit+0x24c>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	4a54      	ldr	r2, [pc, #336]	; (8002208 <HAL_UART_MspInit+0x24c>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6313      	str	r3, [r2, #48]	; 0x30
 80020bc:	4b52      	ldr	r3, [pc, #328]	; (8002208 <HAL_UART_MspInit+0x24c>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020c8:	230c      	movs	r3, #12
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d8:	2307      	movs	r3, #7
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e0:	4619      	mov	r1, r3
 80020e2:	484d      	ldr	r0, [pc, #308]	; (8002218 <HAL_UART_MspInit+0x25c>)
 80020e4:	f000 ff1a 	bl	8002f1c <HAL_GPIO_Init>
}
 80020e8:	e088      	b.n	80021fc <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a4b      	ldr	r2, [pc, #300]	; (800221c <HAL_UART_MspInit+0x260>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	f040 8083 	bne.w	80021fc <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	4b43      	ldr	r3, [pc, #268]	; (8002208 <HAL_UART_MspInit+0x24c>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a42      	ldr	r2, [pc, #264]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a3b      	ldr	r2, [pc, #236]	; (8002208 <HAL_UART_MspInit+0x24c>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b35      	ldr	r3, [pc, #212]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a34      	ldr	r2, [pc, #208]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002138:	f043 0308 	orr.w	r3, r3, #8
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b32      	ldr	r3, [pc, #200]	; (8002208 <HAL_UART_MspInit+0x24c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800214a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800215c:	2307      	movs	r3, #7
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002164:	4619      	mov	r1, r3
 8002166:	482e      	ldr	r0, [pc, #184]	; (8002220 <HAL_UART_MspInit+0x264>)
 8002168:	f000 fed8 	bl	8002f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800216c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800217e:	2307      	movs	r3, #7
 8002180:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002186:	4619      	mov	r1, r3
 8002188:	4821      	ldr	r0, [pc, #132]	; (8002210 <HAL_UART_MspInit+0x254>)
 800218a:	f000 fec7 	bl	8002f1c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_UART_MspInit+0x268>)
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <HAL_UART_MspInit+0x26c>)
 8002192:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002194:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_UART_MspInit+0x268>)
 8002196:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800219a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800219c:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_UART_MspInit+0x268>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_UART_MspInit+0x268>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_UART_MspInit+0x268>)
 80021aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_UART_MspInit+0x268>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_UART_MspInit+0x268>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_UART_MspInit+0x268>)
 80021be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_UART_MspInit+0x268>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_UART_MspInit+0x268>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80021d0:	4814      	ldr	r0, [pc, #80]	; (8002224 <HAL_UART_MspInit+0x268>)
 80021d2:	f000 fb27 	bl	8002824 <HAL_DMA_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_UART_MspInit+0x224>
      Error_Handler();
 80021dc:	f7ff fdd4 	bl	8001d88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a10      	ldr	r2, [pc, #64]	; (8002224 <HAL_UART_MspInit+0x268>)
 80021e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80021e6:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <HAL_UART_MspInit+0x268>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2100      	movs	r1, #0
 80021f0:	2027      	movs	r0, #39	; 0x27
 80021f2:	f000 fae0 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021f6:	2027      	movs	r0, #39	; 0x27
 80021f8:	f000 faf9 	bl	80027ee <HAL_NVIC_EnableIRQ>
}
 80021fc:	bf00      	nop
 80021fe:	3740      	adds	r7, #64	; 0x40
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40005000 	.word	0x40005000
 8002208:	40023800 	.word	0x40023800
 800220c:	40020800 	.word	0x40020800
 8002210:	40020c00 	.word	0x40020c00
 8002214:	40004400 	.word	0x40004400
 8002218:	40020000 	.word	0x40020000
 800221c:	40004800 	.word	0x40004800
 8002220:	40020400 	.word	0x40020400
 8002224:	200003f0 	.word	0x200003f0
 8002228:	40026028 	.word	0x40026028

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002230:	e7fe      	b.n	8002230 <NMI_Handler+0x4>

08002232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <HardFault_Handler+0x4>

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler+0x4>

0800223e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <UsageFault_Handler+0x4>

0800224a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002278:	f000 f97e 	bl	8002578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}

08002280 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <DMA1_Stream1_IRQHandler+0x10>)
 8002286:	f000 fc0d 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200003f0 	.word	0x200003f0

08002294 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <USART3_IRQHandler+0x10>)
 800229a:	f005 fe39 	bl	8007f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200003a8 	.word	0x200003a8

080022a8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <UART5_IRQHandler+0x10>)
 80022ae:	f005 fe2f 	bl	8007f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000318 	.word	0x20000318

080022bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <OTG_FS_IRQHandler+0x10>)
 80022c2:	f001 fac1 	bl	8003848 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000988 	.word	0x20000988

080022d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return 1;
 80022d4:	2301      	movs	r3, #1
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_kill>:

int _kill(int pid, int sig)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ea:	f00c f95f 	bl	800e5ac <__errno>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2216      	movs	r2, #22
 80022f2:	601a      	str	r2, [r3, #0]
  return -1;
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <_exit>:

void _exit (int status)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ffe7 	bl	80022e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002312:	e7fe      	b.n	8002312 <_exit+0x12>

08002314 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e00a      	b.n	800233c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002326:	f3af 8000 	nop.w
 800232a:	4601      	mov	r1, r0
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	60ba      	str	r2, [r7, #8]
 8002332:	b2ca      	uxtb	r2, r1
 8002334:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	dbf0      	blt.n	8002326 <_read+0x12>
  }

  return len;
 8002344:	687b      	ldr	r3, [r7, #4]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e009      	b.n	8002374 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	60ba      	str	r2, [r7, #8]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	dbf1      	blt.n	8002360 <_write+0x12>
  }
  return len;
 800237c:	687b      	ldr	r3, [r7, #4]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_close>:

int _close(int file)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ae:	605a      	str	r2, [r3, #4]
  return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <_isatty>:

int _isatty(int file)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023c6:	2301      	movs	r3, #1
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f8:	4a14      	ldr	r2, [pc, #80]	; (800244c <_sbrk+0x5c>)
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <_sbrk+0x60>)
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <_sbrk+0x64>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d102      	bne.n	8002412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <_sbrk+0x64>)
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <_sbrk+0x68>)
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <_sbrk+0x64>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	429a      	cmp	r2, r3
 800241e:	d207      	bcs.n	8002430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002420:	f00c f8c4 	bl	800e5ac <__errno>
 8002424:	4603      	mov	r3, r0
 8002426:	220c      	movs	r2, #12
 8002428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
 800242e:	e009      	b.n	8002444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002436:	4b07      	ldr	r3, [pc, #28]	; (8002454 <_sbrk+0x64>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <_sbrk+0x64>)
 8002440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002442:	68fb      	ldr	r3, [r7, #12]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20020000 	.word	0x20020000
 8002450:	00000400 	.word	0x00000400
 8002454:	200005a4 	.word	0x200005a4
 8002458:	20000eb8 	.word	0x20000eb8

0800245c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <SystemInit+0x20>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <SystemInit+0x20>)
 8002468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800246c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002484:	f7ff ffea 	bl	800245c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800248a:	490d      	ldr	r1, [pc, #52]	; (80024c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002490:	e002      	b.n	8002498 <LoopCopyDataInit>

08002492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002496:	3304      	adds	r3, #4

08002498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800249c:	d3f9      	bcc.n	8002492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024a0:	4c0a      	ldr	r4, [pc, #40]	; (80024cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a4:	e001      	b.n	80024aa <LoopFillZerobss>

080024a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a8:	3204      	adds	r2, #4

080024aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ac:	d3fb      	bcc.n	80024a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ae:	f00c f883 	bl	800e5b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024b2:	f7fe ffc9 	bl	8001448 <main>
  bx  lr    
 80024b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80024c4:	08011474 	.word	0x08011474
  ldr r2, =_sbss
 80024c8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80024cc:	20000eb4 	.word	0x20000eb4

080024d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024d0:	e7fe      	b.n	80024d0 <ADC_IRQHandler>
	...

080024d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <HAL_Init+0x40>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <HAL_Init+0x40>)
 80024de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_Init+0x40>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <HAL_Init+0x40>)
 80024ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_Init+0x40>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a07      	ldr	r2, [pc, #28]	; (8002514 <HAL_Init+0x40>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024fc:	2003      	movs	r0, #3
 80024fe:	f000 f94f 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002502:	2000      	movs	r0, #0
 8002504:	f000 f808 	bl	8002518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002508:	f7ff fc44 	bl	8001d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023c00 	.word	0x40023c00

08002518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_InitTick+0x54>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_InitTick+0x58>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f967 	bl	800280a <HAL_SYSTICK_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00e      	b.n	8002564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b0f      	cmp	r3, #15
 800254a:	d80a      	bhi.n	8002562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800254c:	2200      	movs	r2, #0
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f000 f92f 	bl	80027b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002558:	4a06      	ldr	r2, [pc, #24]	; (8002574 <HAL_InitTick+0x5c>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000014 	.word	0x20000014
 8002570:	2000001c 	.word	0x2000001c
 8002574:	20000018 	.word	0x20000018

08002578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_IncTick+0x20>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_IncTick+0x24>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_IncTick+0x24>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	2000001c 	.word	0x2000001c
 800259c:	200005a8 	.word	0x200005a8

080025a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_GetTick+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	200005a8 	.word	0x200005a8

080025b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff ffee 	bl	80025a0 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d005      	beq.n	80025de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_Delay+0x44>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025de:	bf00      	nop
 80025e0:	f7ff ffde 	bl	80025a0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d8f7      	bhi.n	80025e0 <HAL_Delay+0x28>
  {
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2000001c 	.word	0x2000001c

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <__NVIC_EnableIRQ+0x38>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100

080026a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db0a      	blt.n	80026ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	; (80026ec <__NVIC_SetPriority+0x4c>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	440b      	add	r3, r1
 80026c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c8:	e00a      	b.n	80026e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4908      	ldr	r1, [pc, #32]	; (80026f0 <__NVIC_SetPriority+0x50>)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3b04      	subs	r3, #4
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	440b      	add	r3, r1
 80026de:	761a      	strb	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f1c3 0307 	rsb	r3, r3, #7
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf28      	it	cs
 8002712:	2304      	movcs	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3304      	adds	r3, #4
 800271a:	2b06      	cmp	r3, #6
 800271c:	d902      	bls.n	8002724 <NVIC_EncodePriority+0x30>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3b03      	subs	r3, #3
 8002722:	e000      	b.n	8002726 <NVIC_EncodePriority+0x32>
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800273c:	f04f 31ff 	mov.w	r1, #4294967295
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43d9      	mvns	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	4313      	orrs	r3, r2
         );
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276c:	d301      	bcc.n	8002772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <SysTick_Config+0x40>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277a:	210f      	movs	r1, #15
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f7ff ff8e 	bl	80026a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SysTick_Config+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <SysTick_Config+0x40>)
 800278c:	2207      	movs	r2, #7
 800278e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff29 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff3e 	bl	8002648 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff8e 	bl	80026f4 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5d 	bl	80026a0 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff31 	bl	8002664 <__NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffa2 	bl	800275c <SysTick_Config>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002830:	f7ff feb6 	bl	80025a0 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e099      	b.n	8002974 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002860:	e00f      	b.n	8002882 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002862:	f7ff fe9d 	bl	80025a0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b05      	cmp	r3, #5
 800286e:	d908      	bls.n	8002882 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2203      	movs	r2, #3
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e078      	b.n	8002974 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e8      	bne.n	8002862 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4b38      	ldr	r3, [pc, #224]	; (800297c <HAL_DMA_Init+0x158>)
 800289c:	4013      	ands	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d107      	bne.n	80028ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	4313      	orrs	r3, r2
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f023 0307 	bic.w	r3, r3, #7
 8002902:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2b04      	cmp	r3, #4
 8002914:	d117      	bne.n	8002946 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00e      	beq.n	8002946 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fa7b 	bl	8002e24 <DMA_CheckFifoParam>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2240      	movs	r2, #64	; 0x40
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002942:	2301      	movs	r3, #1
 8002944:	e016      	b.n	8002974 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa32 	bl	8002db8 <DMA_CalcBaseAndBitshift>
 8002954:	4603      	mov	r3, r0
 8002956:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	223f      	movs	r2, #63	; 0x3f
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	f010803f 	.word	0xf010803f

08002980 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800298e:	f7ff fe07 	bl	80025a0 <HAL_GetTick>
 8002992:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d008      	beq.n	80029b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e052      	b.n	8002a58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0216 	bic.w	r2, r2, #22
 80029c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <HAL_DMA_Abort+0x62>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0208 	bic.w	r2, r2, #8
 80029f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a02:	e013      	b.n	8002a2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a04:	f7ff fdcc 	bl	80025a0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d90c      	bls.n	8002a2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e015      	b.n	8002a58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e4      	bne.n	8002a04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	223f      	movs	r2, #63	; 0x3f
 8002a40:	409a      	lsls	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d004      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00c      	b.n	8002a98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2205      	movs	r2, #5
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ab0:	4b8e      	ldr	r3, [pc, #568]	; (8002cec <HAL_DMA_IRQHandler+0x248>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a8e      	ldr	r2, [pc, #568]	; (8002cf0 <HAL_DMA_IRQHandler+0x24c>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	2208      	movs	r2, #8
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01a      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0204 	bic.w	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	2208      	movs	r2, #8
 8002afe:	409a      	lsls	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	2201      	movs	r2, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d012      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	2201      	movs	r2, #1
 8002b34:	409a      	lsls	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d012      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2204      	movs	r2, #4
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	2210      	movs	r2, #16
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d043      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d03c      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d018      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d024      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
 8002bd2:	e01f      	b.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
 8002be4:	e016      	b.n	8002c14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0208 	bic.w	r2, r2, #8
 8002c02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	2220      	movs	r2, #32
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 808f 	beq.w	8002d44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8087 	beq.w	8002d44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d136      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0216 	bic.w	r2, r2, #22
 8002c5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x1da>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0208 	bic.w	r2, r2, #8
 8002c8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	223f      	movs	r2, #63	; 0x3f
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d07e      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
        }
        return;
 8002cba:	e079      	b.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01d      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d031      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e02c      	b.n	8002d44 <HAL_DMA_IRQHandler+0x2a0>
 8002cea:	bf00      	nop
 8002cec:	20000014 	.word	0x20000014
 8002cf0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d023      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
 8002d04:	e01e      	b.n	8002d44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10f      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0210 	bic.w	r2, r2, #16
 8002d22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d032      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d022      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	3301      	adds	r3, #1
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d307      	bcc.n	8002d8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f2      	bne.n	8002d70 <HAL_DMA_IRQHandler+0x2cc>
 8002d8a:	e000      	b.n	8002d8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
 8002dae:	e000      	b.n	8002db2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002db0:	bf00      	nop
    }
  }
}
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	3b10      	subs	r3, #16
 8002dc8:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <DMA_CalcBaseAndBitshift+0x64>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dd2:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <DMA_CalcBaseAndBitshift+0x68>)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d909      	bls.n	8002dfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dee:	f023 0303 	bic.w	r3, r3, #3
 8002df2:	1d1a      	adds	r2, r3, #4
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	659a      	str	r2, [r3, #88]	; 0x58
 8002df8:	e007      	b.n	8002e0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e02:	f023 0303 	bic.w	r3, r3, #3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	aaaaaaab 	.word	0xaaaaaaab
 8002e20:	08011034 	.word	0x08011034

08002e24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d11f      	bne.n	8002e7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d856      	bhi.n	8002ef2 <DMA_CheckFifoParam+0xce>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <DMA_CheckFifoParam+0x28>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e5d 	.word	0x08002e5d
 8002e50:	08002e6f 	.word	0x08002e6f
 8002e54:	08002e5d 	.word	0x08002e5d
 8002e58:	08002ef3 	.word	0x08002ef3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d046      	beq.n	8002ef6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6c:	e043      	b.n	8002ef6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e76:	d140      	bne.n	8002efa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7c:	e03d      	b.n	8002efa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e86:	d121      	bne.n	8002ecc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d837      	bhi.n	8002efe <DMA_CheckFifoParam+0xda>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <DMA_CheckFifoParam+0x70>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eab 	.word	0x08002eab
 8002e9c:	08002ea5 	.word	0x08002ea5
 8002ea0:	08002ebd 	.word	0x08002ebd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea8:	e030      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d025      	beq.n	8002f02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eba:	e022      	b.n	8002f02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ec4:	d11f      	bne.n	8002f06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eca:	e01c      	b.n	8002f06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d903      	bls.n	8002eda <DMA_CheckFifoParam+0xb6>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d003      	beq.n	8002ee0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ed8:	e018      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      break;
 8002ede:	e015      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef0:	e00b      	b.n	8002f0a <DMA_CheckFifoParam+0xe6>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e00a      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e008      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002efa:	bf00      	nop
 8002efc:	e006      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002efe:	bf00      	nop
 8002f00:	e004      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002f0a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e16b      	b.n	8003210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f040 815a 	bne.w	800320a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d005      	beq.n	8002f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d130      	bne.n	8002fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2203      	movs	r2, #3
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 0201 	and.w	r2, r3, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d017      	beq.n	800300c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d123      	bne.n	8003060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	08da      	lsrs	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3208      	adds	r2, #8
 8003020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3208      	adds	r2, #8
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80b4 	beq.w	800320a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b60      	ldr	r3, [pc, #384]	; (8003228 <HAL_GPIO_Init+0x30c>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	4a5f      	ldr	r2, [pc, #380]	; (8003228 <HAL_GPIO_Init+0x30c>)
 80030ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b0:	6453      	str	r3, [r2, #68]	; 0x44
 80030b2:	4b5d      	ldr	r3, [pc, #372]	; (8003228 <HAL_GPIO_Init+0x30c>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030be:	4a5b      	ldr	r2, [pc, #364]	; (800322c <HAL_GPIO_Init+0x310>)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3302      	adds	r3, #2
 80030c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	220f      	movs	r2, #15
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_GPIO_Init+0x314>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d02b      	beq.n	8003142 <HAL_GPIO_Init+0x226>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a51      	ldr	r2, [pc, #324]	; (8003234 <HAL_GPIO_Init+0x318>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d025      	beq.n	800313e <HAL_GPIO_Init+0x222>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a50      	ldr	r2, [pc, #320]	; (8003238 <HAL_GPIO_Init+0x31c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01f      	beq.n	800313a <HAL_GPIO_Init+0x21e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4f      	ldr	r2, [pc, #316]	; (800323c <HAL_GPIO_Init+0x320>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d019      	beq.n	8003136 <HAL_GPIO_Init+0x21a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4e      	ldr	r2, [pc, #312]	; (8003240 <HAL_GPIO_Init+0x324>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_GPIO_Init+0x216>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4d      	ldr	r2, [pc, #308]	; (8003244 <HAL_GPIO_Init+0x328>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00d      	beq.n	800312e <HAL_GPIO_Init+0x212>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4c      	ldr	r2, [pc, #304]	; (8003248 <HAL_GPIO_Init+0x32c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d007      	beq.n	800312a <HAL_GPIO_Init+0x20e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4b      	ldr	r2, [pc, #300]	; (800324c <HAL_GPIO_Init+0x330>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d101      	bne.n	8003126 <HAL_GPIO_Init+0x20a>
 8003122:	2307      	movs	r3, #7
 8003124:	e00e      	b.n	8003144 <HAL_GPIO_Init+0x228>
 8003126:	2308      	movs	r3, #8
 8003128:	e00c      	b.n	8003144 <HAL_GPIO_Init+0x228>
 800312a:	2306      	movs	r3, #6
 800312c:	e00a      	b.n	8003144 <HAL_GPIO_Init+0x228>
 800312e:	2305      	movs	r3, #5
 8003130:	e008      	b.n	8003144 <HAL_GPIO_Init+0x228>
 8003132:	2304      	movs	r3, #4
 8003134:	e006      	b.n	8003144 <HAL_GPIO_Init+0x228>
 8003136:	2303      	movs	r3, #3
 8003138:	e004      	b.n	8003144 <HAL_GPIO_Init+0x228>
 800313a:	2302      	movs	r3, #2
 800313c:	e002      	b.n	8003144 <HAL_GPIO_Init+0x228>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_GPIO_Init+0x228>
 8003142:	2300      	movs	r3, #0
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	f002 0203 	and.w	r2, r2, #3
 800314a:	0092      	lsls	r2, r2, #2
 800314c:	4093      	lsls	r3, r2
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003154:	4935      	ldr	r1, [pc, #212]	; (800322c <HAL_GPIO_Init+0x310>)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	3302      	adds	r3, #2
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003162:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <HAL_GPIO_Init+0x334>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003186:	4a32      	ldr	r2, [pc, #200]	; (8003250 <HAL_GPIO_Init+0x334>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800318c:	4b30      	ldr	r3, [pc, #192]	; (8003250 <HAL_GPIO_Init+0x334>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b0:	4a27      	ldr	r2, [pc, #156]	; (8003250 <HAL_GPIO_Init+0x334>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <HAL_GPIO_Init+0x334>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031da:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <HAL_GPIO_Init+0x334>)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_GPIO_Init+0x334>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003204:	4a12      	ldr	r2, [pc, #72]	; (8003250 <HAL_GPIO_Init+0x334>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3301      	adds	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b0f      	cmp	r3, #15
 8003214:	f67f ae90 	bls.w	8002f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3724      	adds	r7, #36	; 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	40013800 	.word	0x40013800
 8003230:	40020000 	.word	0x40020000
 8003234:	40020400 	.word	0x40020400
 8003238:	40020800 	.word	0x40020800
 800323c:	40020c00 	.word	0x40020c00
 8003240:	40021000 	.word	0x40021000
 8003244:	40021400 	.word	0x40021400
 8003248:	40021800 	.word	0x40021800
 800324c:	40021c00 	.word	0x40021c00
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003264:	787b      	ldrb	r3, [r7, #1]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003270:	e003      	b.n	800327a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	041a      	lsls	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	619a      	str	r2, [r3, #24]
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af02      	add	r7, sp, #8
 800328c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e059      	b.n	800334c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f008 ffde 	bl	800c274 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2203      	movs	r2, #3
 80032bc:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c6:	d102      	bne.n	80032ce <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f005 fde7 	bl	8008ea6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7c1a      	ldrb	r2, [r3, #16]
 80032e0:	f88d 2000 	strb.w	r2, [sp]
 80032e4:	3304      	adds	r3, #4
 80032e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032e8:	f005 fd68 	bl	8008dbc <USB_CoreInit>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e026      	b.n	800334c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f005 fddf 	bl	8008ec8 <USB_SetCurrentMode>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e017      	b.n	800334c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7c1a      	ldrb	r2, [r3, #16]
 8003324:	f88d 2000 	strb.w	r2, [sp]
 8003328:	3304      	adds	r3, #4
 800332a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800332c:	f005 ff82 	bl	8009234 <USB_HostInit>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e004      	b.n	800334c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b08b      	sub	sp, #44	; 0x2c
 8003358:	af04      	add	r7, sp, #16
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	461a      	mov	r2, r3
 8003362:	4603      	mov	r3, r0
 8003364:	70fb      	strb	r3, [r7, #3]
 8003366:	460b      	mov	r3, r1
 8003368:	70bb      	strb	r3, [r7, #2]
 800336a:	4613      	mov	r3, r2
 800336c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800336e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003370:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_HCD_HC_Init+0x2c>
 800337c:	2302      	movs	r3, #2
 800337e:	e09d      	b.n	80034bc <HAL_HCD_HC_Init+0x168>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3319      	adds	r3, #25
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3314      	adds	r3, #20
 80033ac:	787a      	ldrb	r2, [r7, #1]
 80033ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	3315      	adds	r3, #21
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3326      	adds	r3, #38	; 0x26
 80033d4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80033d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	78bb      	ldrb	r3, [r7, #2]
 80033de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033e2:	b2d8      	uxtb	r0, r3
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	3316      	adds	r3, #22
 80033f2:	4602      	mov	r2, r0
 80033f4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fbc8 	bl	8003b90 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003400:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003404:	2b00      	cmp	r3, #0
 8003406:	da0a      	bge.n	800341e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	3317      	adds	r3, #23
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e009      	b.n	8003432 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	3317      	adds	r3, #23
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f006 f860 	bl	80094fc <USB_GetHostSpeed>
 800343c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800343e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003442:	2b01      	cmp	r3, #1
 8003444:	d10b      	bne.n	800345e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003446:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <HAL_HCD_HC_Init+0x10a>
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d104      	bne.n	800345e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2bbc      	cmp	r3, #188	; 0xbc
 8003458:	d901      	bls.n	800345e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800345a:	23bc      	movs	r3, #188	; 0xbc
 800345c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	3318      	adds	r3, #24
 800346e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003472:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	b298      	uxth	r0, r3
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	3328      	adds	r3, #40	; 0x28
 8003488:	4602      	mov	r2, r0
 800348a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	b29b      	uxth	r3, r3
 8003494:	787c      	ldrb	r4, [r7, #1]
 8003496:	78ba      	ldrb	r2, [r7, #2]
 8003498:	78f9      	ldrb	r1, [r7, #3]
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	4623      	mov	r3, r4
 80034aa:	f006 f84f 	bl	800954c <USB_HC_Init>
 80034ae:	4603      	mov	r3, r0
 80034b0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd90      	pop	{r4, r7, pc}

080034c4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_HCD_HC_Halt+0x1e>
 80034de:	2302      	movs	r3, #2
 80034e0:	e00f      	b.n	8003502 <HAL_HCD_HC_Halt+0x3e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f006 fbe1 	bl	8009cba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	4608      	mov	r0, r1
 8003516:	4611      	mov	r1, r2
 8003518:	461a      	mov	r2, r3
 800351a:	4603      	mov	r3, r0
 800351c:	70fb      	strb	r3, [r7, #3]
 800351e:	460b      	mov	r3, r1
 8003520:	70bb      	strb	r3, [r7, #2]
 8003522:	4613      	mov	r3, r2
 8003524:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	3317      	adds	r3, #23
 8003536:	78ba      	ldrb	r2, [r7, #2]
 8003538:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3326      	adds	r3, #38	; 0x26
 800354a:	787a      	ldrb	r2, [r7, #1]
 800354c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800354e:	7c3b      	ldrb	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d114      	bne.n	800357e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	332a      	adds	r3, #42	; 0x2a
 8003564:	2203      	movs	r2, #3
 8003566:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3319      	adds	r3, #25
 8003578:	7f3a      	ldrb	r2, [r7, #28]
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e009      	b.n	8003592 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	332a      	adds	r3, #42	; 0x2a
 800358e:	2202      	movs	r2, #2
 8003590:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003592:	787b      	ldrb	r3, [r7, #1]
 8003594:	2b03      	cmp	r3, #3
 8003596:	f200 8102 	bhi.w	800379e <HAL_HCD_HC_SubmitRequest+0x292>
 800359a:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <HAL_HCD_HC_SubmitRequest+0x94>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	08003789 	.word	0x08003789
 80035a8:	08003675 	.word	0x08003675
 80035ac:	080036ff 	.word	0x080036ff
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80035b0:	7c3b      	ldrb	r3, [r7, #16]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	f040 80f5 	bne.w	80037a2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80035b8:	78bb      	ldrb	r3, [r7, #2]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d12d      	bne.n	800361a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80035be:	8b3b      	ldrh	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	333d      	adds	r3, #61	; 0x3d
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	333d      	adds	r3, #61	; 0x3d
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	332a      	adds	r3, #42	; 0x2a
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003602:	e0ce      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	332a      	adds	r3, #42	; 0x2a
 8003614:	2202      	movs	r2, #2
 8003616:	701a      	strb	r2, [r3, #0]
      break;
 8003618:	e0c3      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	331a      	adds	r3, #26
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	f040 80b8 	bne.w	80037a2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	333c      	adds	r3, #60	; 0x3c
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	332a      	adds	r3, #42	; 0x2a
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
      break;
 800365c:	e0a1      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	332a      	adds	r3, #42	; 0x2a
 800366e:	2202      	movs	r2, #2
 8003670:	701a      	strb	r2, [r3, #0]
      break;
 8003672:	e096      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003674:	78bb      	ldrb	r3, [r7, #2]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d120      	bne.n	80036bc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	333d      	adds	r3, #61	; 0x3d
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	332a      	adds	r3, #42	; 0x2a
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80036a4:	e07e      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	332a      	adds	r3, #42	; 0x2a
 80036b6:	2202      	movs	r2, #2
 80036b8:	701a      	strb	r2, [r3, #0]
      break;
 80036ba:	e073      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	333c      	adds	r3, #60	; 0x3c
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	332a      	adds	r3, #42	; 0x2a
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
      break;
 80036e6:	e05d      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	332a      	adds	r3, #42	; 0x2a
 80036f8:	2202      	movs	r2, #2
 80036fa:	701a      	strb	r2, [r3, #0]
      break;
 80036fc:	e052      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80036fe:	78bb      	ldrb	r3, [r7, #2]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d120      	bne.n	8003746 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	333d      	adds	r3, #61	; 0x3d
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	332a      	adds	r3, #42	; 0x2a
 800372a:	2200      	movs	r2, #0
 800372c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800372e:	e039      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	332a      	adds	r3, #42	; 0x2a
 8003740:	2202      	movs	r2, #2
 8003742:	701a      	strb	r2, [r3, #0]
      break;
 8003744:	e02e      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	333c      	adds	r3, #60	; 0x3c
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	332a      	adds	r3, #42	; 0x2a
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
      break;
 8003770:	e018      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	332a      	adds	r3, #42	; 0x2a
 8003782:	2202      	movs	r2, #2
 8003784:	701a      	strb	r2, [r3, #0]
      break;
 8003786:	e00d      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	332a      	adds	r3, #42	; 0x2a
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
      break;
 800379c:	e002      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800379e:	bf00      	nop
 80037a0:	e000      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80037a2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	332c      	adds	r3, #44	; 0x2c
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	8b39      	ldrh	r1, [r7, #24]
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4403      	add	r3, r0
 80037c8:	3334      	adds	r3, #52	; 0x34
 80037ca:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	334c      	adds	r3, #76	; 0x4c
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3338      	adds	r3, #56	; 0x38
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	3315      	adds	r3, #21
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	334d      	adds	r3, #77	; 0x4d
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	4613      	mov	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	3310      	adds	r3, #16
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	1d19      	adds	r1, r3, #4
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	799b      	ldrb	r3, [r3, #6]
 8003836:	461a      	mov	r2, r3
 8003838:	f005 ffb4 	bl	80097a4 <USB_HC_StartXfer>
 800383c:	4603      	mov	r3, r0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop

08003848 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f005 fca8 	bl	80091b4 <USB_GetMode>
 8003864:	4603      	mov	r3, r0
 8003866:	2b01      	cmp	r3, #1
 8003868:	f040 80fb 	bne.w	8003a62 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f005 fc6b 	bl	800914c <USB_ReadInterrupts>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80f1 	beq.w	8003a60 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f005 fc62 	bl	800914c <USB_ReadInterrupts>
 8003888:	4603      	mov	r3, r0
 800388a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003892:	d104      	bne.n	800389e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800389c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f005 fc52 	bl	800914c <USB_ReadInterrupts>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b2:	d104      	bne.n	80038be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f005 fc42 	bl	800914c <USB_ReadInterrupts>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038d2:	d104      	bne.n	80038de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f005 fc32 	bl	800914c <USB_ReadInterrupts>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d103      	bne.n	80038fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2202      	movs	r2, #2
 80038f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f005 fc24 	bl	800914c <USB_ReadInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800390a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800390e:	d120      	bne.n	8003952 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003918:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d113      	bne.n	8003952 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800392a:	2110      	movs	r1, #16
 800392c:	6938      	ldr	r0, [r7, #16]
 800392e:	f005 fb17 	bl	8008f60 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003932:	6938      	ldr	r0, [r7, #16]
 8003934:	f005 fb46 	bl	8008fc4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7a5b      	ldrb	r3, [r3, #9]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d105      	bne.n	800394c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f005 fd38 	bl	80093bc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f008 fd0f 	bl	800c370 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f005 fbf8 	bl	800914c <USB_ReadInterrupts>
 800395c:	4603      	mov	r3, r0
 800395e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003966:	d102      	bne.n	800396e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f001 fd33 	bl	80053d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f005 fbea 	bl	800914c <USB_ReadInterrupts>
 8003978:	4603      	mov	r3, r0
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b08      	cmp	r3, #8
 8003980:	d106      	bne.n	8003990 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f008 fcd8 	bl	800c338 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2208      	movs	r2, #8
 800398e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f005 fbd9 	bl	800914c <USB_ReadInterrupts>
 800399a:	4603      	mov	r3, r0
 800399c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039a4:	d139      	bne.n	8003a1a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f006 f974 	bl	8009c98 <USB_HC_ReadInterrupt>
 80039b0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e025      	b.n	8003a04 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d018      	beq.n	80039fe <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e2:	d106      	bne.n	80039f2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f905 	bl	8003bfa <HCD_HC_IN_IRQHandler>
 80039f0:	e005      	b.n	80039fe <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	4619      	mov	r1, r3
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 ff67 	bl	80048cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	3301      	adds	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	795b      	ldrb	r3, [r3, #5]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d3d3      	bcc.n	80039b8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f005 fb94 	bl	800914c <USB_ReadInterrupts>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d101      	bne.n	8003a32 <HAL_HCD_IRQHandler+0x1ea>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_HCD_IRQHandler+0x1ec>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d014      	beq.n	8003a62 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0210 	bic.w	r2, r2, #16
 8003a46:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f001 fbe4 	bl	8005216 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699a      	ldr	r2, [r3, #24]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0210 	orr.w	r2, r2, #16
 8003a5c:	619a      	str	r2, [r3, #24]
 8003a5e:	e000      	b.n	8003a62 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003a60:	bf00      	nop
    }
  }
}
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_HCD_Start+0x16>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e013      	b.n	8003aa6 <HAL_HCD_Start+0x3e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f005 fcfc 	bl	800948a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f005 f9f4 	bl	8008e84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_HCD_Stop+0x16>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e00d      	b.n	8003ae0 <HAL_HCD_Stop+0x32>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f006 fa4f 	bl	8009f74 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f005 fc9e 	bl	8009436 <USB_ResetPort>
 8003afa:	4603      	mov	r3, r0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	334c      	adds	r3, #76	; 0x4c
 8003b20:	781b      	ldrb	r3, [r3, #0]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	3338      	adds	r3, #56	; 0x38
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f005 fce0 	bl	800952a <USB_GetCurrentFrame>
 8003b6a:	4603      	mov	r3, r0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f005 fcbb 	bl	80094fc <USB_GetHostSpeed>
 8003b86:	4603      	mov	r3, r0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	331a      	adds	r3, #26
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	331b      	adds	r3, #27
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	3325      	adds	r3, #37	; 0x25
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	3324      	adds	r3, #36	; 0x24
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f005 faaa 	bl	8009172 <USB_ReadChInterrupts>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d11a      	bne.n	8003c5e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c34:	461a      	mov	r2, r3
 8003c36:	2304      	movs	r3, #4
 8003c38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	334d      	adds	r3, #77	; 0x4d
 8003c4a:	2207      	movs	r2, #7
 8003c4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	4611      	mov	r1, r2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f006 f82f 	bl	8009cba <USB_HC_Halt>
 8003c5c:	e09e      	b.n	8003d9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	4611      	mov	r1, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f005 fa83 	bl	8009172 <USB_ReadChInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c76:	d11b      	bne.n	8003cb0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	461a      	mov	r2, r3
 8003c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	334d      	adds	r3, #77	; 0x4d
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f006 f806 	bl	8009cba <USB_HC_Halt>
 8003cae:	e075      	b.n	8003d9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f005 fa5a 	bl	8009172 <USB_ReadChInterrupts>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d11a      	bne.n	8003cfe <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	2308      	movs	r3, #8
 8003cd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	334d      	adds	r3, #77	; 0x4d
 8003cea:	2206      	movs	r2, #6
 8003cec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f005 ffdf 	bl	8009cba <USB_HC_Halt>
 8003cfc:	e04e      	b.n	8003d9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	4611      	mov	r1, r2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f005 fa33 	bl	8009172 <USB_ReadChInterrupts>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d16:	d11b      	bne.n	8003d50 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d24:	461a      	mov	r2, r3
 8003d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	334d      	adds	r3, #77	; 0x4d
 8003d3c:	2209      	movs	r2, #9
 8003d3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f005 ffb6 	bl	8009cba <USB_HC_Halt>
 8003d4e:	e025      	b.n	8003d9c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f005 fa0a 	bl	8009172 <USB_ReadChInterrupts>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d119      	bne.n	8003d9c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d74:	461a      	mov	r2, r3
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	334d      	adds	r3, #77	; 0x4d
 8003d8a:	2207      	movs	r2, #7
 8003d8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f005 ff8f 	bl	8009cba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f005 f9e4 	bl	8009172 <USB_ReadChInterrupts>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db4:	d112      	bne.n	8003ddc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f005 ff7b 	bl	8009cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dd6:	6093      	str	r3, [r2, #8]
 8003dd8:	f000 bd75 	b.w	80048c6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f005 f9c4 	bl	8009172 <USB_ReadChInterrupts>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 8128 	bne.w	8004046 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e02:	461a      	mov	r2, r3
 8003e04:	2320      	movs	r3, #32
 8003e06:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	331b      	adds	r3, #27
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d119      	bne.n	8003e52 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	331b      	adds	r3, #27
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e50:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	799b      	ldrb	r3, [r3, #6]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01b      	beq.n	8003e92 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	3330      	adds	r3, #48	; 0x30
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	1ac9      	subs	r1, r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4403      	add	r3, r0
 8003e8e:	3338      	adds	r3, #56	; 0x38
 8003e90:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	334d      	adds	r3, #77	; 0x4d
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3344      	adds	r3, #68	; 0x44
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2301      	movs	r3, #1
 8003eca:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	3326      	adds	r3, #38	; 0x26
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	3326      	adds	r3, #38	; 0x26
 8003ef2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d110      	bne.n	8003f1a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	78fa      	ldrb	r2, [r7, #3]
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f005 feda 	bl	8009cba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f12:	461a      	mov	r2, r3
 8003f14:	2310      	movs	r3, #16
 8003f16:	6093      	str	r3, [r2, #8]
 8003f18:	e03d      	b.n	8003f96 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	3326      	adds	r3, #38	; 0x26
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d00a      	beq.n	8003f46 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	3326      	adds	r3, #38	; 0x26
 8003f40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d127      	bne.n	8003f96 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	0151      	lsls	r1, r2, #5
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	440a      	add	r2, r1
 8003f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f64:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	334c      	adds	r3, #76	; 0x4c
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	334c      	adds	r3, #76	; 0x4c
 8003f8a:	781a      	ldrb	r2, [r3, #0]
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f008 f9fb 	bl	800c38c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	799b      	ldrb	r3, [r3, #6]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d13b      	bne.n	8004016 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	3338      	adds	r3, #56	; 0x38
 8003fae:	6819      	ldr	r1, [r3, #0]
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4403      	add	r3, r0
 8003fbe:	3328      	adds	r3, #40	; 0x28
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	440b      	add	r3, r1
 8003fc4:	1e59      	subs	r1, r3, #1
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4403      	add	r3, r0
 8003fd4:	3328      	adds	r3, #40	; 0x28
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8470 	beq.w	80048c6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	333c      	adds	r3, #60	; 0x3c
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	f083 0301 	eor.w	r3, r3, #1
 8003ffe:	b2d8      	uxtb	r0, r3
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	333c      	adds	r3, #60	; 0x3c
 800400e:	4602      	mov	r2, r0
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	f000 bc58 	b.w	80048c6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	333c      	adds	r3, #60	; 0x3c
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	f083 0301 	eor.w	r3, r3, #1
 800402e:	b2d8      	uxtb	r0, r3
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	333c      	adds	r3, #60	; 0x3c
 800403e:	4602      	mov	r2, r0
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	f000 bc40 	b.w	80048c6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f005 f88f 	bl	8009172 <USB_ReadChInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b20      	cmp	r3, #32
 800405c:	d131      	bne.n	80040c2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406a:	461a      	mov	r2, r3
 800406c:	2320      	movs	r3, #32
 800406e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	331a      	adds	r3, #26
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b01      	cmp	r3, #1
 8004084:	f040 841f 	bne.w	80048c6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	331b      	adds	r3, #27
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	334d      	adds	r3, #77	; 0x4d
 80040ac:	2203      	movs	r2, #3
 80040ae:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f005 fdfe 	bl	8009cba <USB_HC_Halt>
 80040be:	f000 bc02 	b.w	80048c6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f005 f851 	bl	8009172 <USB_ReadChInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	f040 8305 	bne.w	80046e6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	461a      	mov	r2, r3
 80040ea:	2302      	movs	r3, #2
 80040ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	334d      	adds	r3, #77	; 0x4d
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d114      	bne.n	800412e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	334d      	adds	r3, #77	; 0x4d
 8004114:	2202      	movs	r2, #2
 8004116:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	334c      	adds	r3, #76	; 0x4c
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	e2cc      	b.n	80046c8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	334d      	adds	r3, #77	; 0x4d
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b06      	cmp	r3, #6
 8004142:	d114      	bne.n	800416e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	334d      	adds	r3, #77	; 0x4d
 8004154:	2202      	movs	r2, #2
 8004156:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	334c      	adds	r3, #76	; 0x4c
 8004168:	2205      	movs	r2, #5
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	e2ac      	b.n	80046c8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	334d      	adds	r3, #77	; 0x4d
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b07      	cmp	r3, #7
 8004182:	d00b      	beq.n	800419c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	334d      	adds	r3, #77	; 0x4d
 8004194:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004196:	2b09      	cmp	r3, #9
 8004198:	f040 80a6 	bne.w	80042e8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	334d      	adds	r3, #77	; 0x4d
 80041ac:	2202      	movs	r2, #2
 80041ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	3344      	adds	r3, #68	; 0x44
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	1c59      	adds	r1, r3, #1
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4403      	add	r3, r0
 80041d0:	3344      	adds	r3, #68	; 0x44
 80041d2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	3344      	adds	r3, #68	; 0x44
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d943      	bls.n	8004272 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	3344      	adds	r3, #68	; 0x44
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	331a      	adds	r3, #26
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d123      	bne.n	800425c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	331b      	adds	r3, #27
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	331c      	adds	r3, #28
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	440a      	add	r2, r1
 8004252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	334c      	adds	r3, #76	; 0x4c
 800426c:	2204      	movs	r2, #4
 800426e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004270:	e229      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	334c      	adds	r3, #76	; 0x4c
 8004282:	2202      	movs	r2, #2
 8004284:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	3326      	adds	r3, #38	; 0x26
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00b      	beq.n	80042b4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	3326      	adds	r3, #38	; 0x26
 80042ac:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	f040 8209 	bne.w	80046c6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042ca:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042d2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e0:	461a      	mov	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042e6:	e1ee      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	334d      	adds	r3, #77	; 0x4d
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	f040 80c8 	bne.w	8004490 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	334d      	adds	r3, #77	; 0x4d
 8004310:	2202      	movs	r2, #2
 8004312:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	331b      	adds	r3, #27
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	f040 81ce 	bne.w	80046c8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	3326      	adds	r3, #38	; 0x26
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d16b      	bne.n	800441a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	3348      	adds	r3, #72	; 0x48
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1c59      	adds	r1, r3, #1
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4403      	add	r3, r0
 8004362:	3348      	adds	r3, #72	; 0x48
 8004364:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004366:	78fa      	ldrb	r2, [r7, #3]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	3348      	adds	r3, #72	; 0x48
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d943      	bls.n	8004404 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	3348      	adds	r3, #72	; 0x48
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	331b      	adds	r3, #27
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	3344      	adds	r3, #68	; 0x44
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d809      	bhi.n	80043ce <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	331c      	adds	r3, #28
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	0151      	lsls	r1, r2, #5
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	440a      	add	r2, r1
 80043e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ec:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	334c      	adds	r3, #76	; 0x4c
 80043fe:	2204      	movs	r2, #4
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	e014      	b.n	800442e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	334c      	adds	r3, #76	; 0x4c
 8004414:	2202      	movs	r2, #2
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	e009      	b.n	800442e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	334c      	adds	r3, #76	; 0x4c
 800442a:	2202      	movs	r2, #2
 800442c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	3326      	adds	r3, #38	; 0x26
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3326      	adds	r3, #38	; 0x26
 8004454:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004456:	2b02      	cmp	r3, #2
 8004458:	f040 8136 	bne.w	80046c8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004472:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800447a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004488:	461a      	mov	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e11b      	b.n	80046c8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	334d      	adds	r3, #77	; 0x4d
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	f040 8081 	bne.w	80045aa <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	334d      	adds	r3, #77	; 0x4d
 80044b8:	2202      	movs	r2, #2
 80044ba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	331b      	adds	r3, #27
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	f040 80fa 	bne.w	80046c8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	334c      	adds	r3, #76	; 0x4c
 80044e4:	2202      	movs	r2, #2
 80044e6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	0151      	lsls	r1, r2, #5
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	440a      	add	r2, r1
 80044fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	440a      	add	r2, r1
 800451e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004526:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	440a      	add	r2, r1
 800453e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004542:	f023 0320 	bic.w	r3, r3, #32
 8004546:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	3326      	adds	r3, #38	; 0x26
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	3326      	adds	r3, #38	; 0x26
 800456e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004570:	2b02      	cmp	r3, #2
 8004572:	f040 80a9 	bne.w	80046c8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4413      	add	r3, r2
 800457e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800458c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004594:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4413      	add	r3, r2
 800459e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	e08e      	b.n	80046c8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	334d      	adds	r3, #77	; 0x4d
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d143      	bne.n	8004648 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	334d      	adds	r3, #77	; 0x4d
 80045d0:	2202      	movs	r2, #2
 80045d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	334c      	adds	r3, #76	; 0x4c
 80045e4:	2202      	movs	r2, #2
 80045e6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3326      	adds	r3, #38	; 0x26
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	3326      	adds	r3, #38	; 0x26
 800460e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004610:	2b02      	cmp	r3, #2
 8004612:	d159      	bne.n	80046c8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800462a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004632:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4413      	add	r3, r2
 800463c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004640:	461a      	mov	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e03f      	b.n	80046c8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004648:	78fa      	ldrb	r2, [r7, #3]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	334d      	adds	r3, #77	; 0x4d
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b08      	cmp	r3, #8
 800465c:	d126      	bne.n	80046ac <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800465e:	78fa      	ldrb	r2, [r7, #3]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	334d      	adds	r3, #77	; 0x4d
 800466e:	2202      	movs	r2, #2
 8004670:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	3344      	adds	r3, #68	; 0x44
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	1c59      	adds	r1, r3, #1
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4403      	add	r3, r0
 8004692:	3344      	adds	r3, #68	; 0x44
 8004694:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	334c      	adds	r3, #76	; 0x4c
 80046a6:	2204      	movs	r2, #4
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e00d      	b.n	80046c8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	334d      	adds	r3, #77	; 0x4d
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	f000 8100 	beq.w	80048c4 <HCD_HC_IN_IRQHandler+0xcca>
 80046c4:	e000      	b.n	80046c8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046c6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	334c      	adds	r3, #76	; 0x4c
 80046d8:	781a      	ldrb	r2, [r3, #0]
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f007 fe54 	bl	800c38c <HAL_HCD_HC_NotifyURBChange_Callback>
 80046e4:	e0ef      	b.n	80048c6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f004 fd3f 	bl	8009172 <USB_ReadChInterrupts>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d12f      	bne.n	800475e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	461a      	mov	r2, r3
 800470c:	2340      	movs	r3, #64	; 0x40
 800470e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004710:	78fa      	ldrb	r2, [r7, #3]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	334d      	adds	r3, #77	; 0x4d
 8004720:	2205      	movs	r2, #5
 8004722:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	331a      	adds	r3, #26
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	3344      	adds	r3, #68	; 0x44
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f005 faaf 	bl	8009cba <USB_HC_Halt>
 800475c:	e0b3      	b.n	80048c6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	4611      	mov	r1, r2
 8004766:	4618      	mov	r0, r3
 8004768:	f004 fd03 	bl	8009172 <USB_ReadChInterrupts>
 800476c:	4603      	mov	r3, r0
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b10      	cmp	r3, #16
 8004774:	f040 80a7 	bne.w	80048c6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	3326      	adds	r3, #38	; 0x26
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b03      	cmp	r3, #3
 800478c:	d11b      	bne.n	80047c6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	3344      	adds	r3, #68	; 0x44
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	334d      	adds	r3, #77	; 0x4d
 80047b2:	2204      	movs	r2, #4
 80047b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	4611      	mov	r1, r2
 80047be:	4618      	mov	r0, r3
 80047c0:	f005 fa7b 	bl	8009cba <USB_HC_Halt>
 80047c4:	e03f      	b.n	8004846 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047c6:	78fa      	ldrb	r2, [r7, #3]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3326      	adds	r3, #38	; 0x26
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	3326      	adds	r3, #38	; 0x26
 80047ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d129      	bne.n	8004846 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	3344      	adds	r3, #68	; 0x44
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	799b      	ldrb	r3, [r3, #6]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HCD_HC_IN_IRQHandler+0xc2a>
 800480e:	78fa      	ldrb	r2, [r7, #3]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	331b      	adds	r3, #27
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d110      	bne.n	8004846 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	334d      	adds	r3, #77	; 0x4d
 8004834:	2204      	movs	r2, #4
 8004836:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f005 fa3a 	bl	8009cba <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	331b      	adds	r3, #27
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d129      	bne.n	80048b0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	331b      	adds	r3, #27
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	78fa      	ldrb	r2, [r7, #3]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	440a      	add	r2, r1
 8004886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800488a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048aa:	f043 0320 	orr.w	r3, r3, #32
 80048ae:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048bc:	461a      	mov	r2, r3
 80048be:	2310      	movs	r3, #16
 80048c0:	6093      	str	r3, [r2, #8]
 80048c2:	e000      	b.n	80048c6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80048c4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	4611      	mov	r1, r2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f004 fc41 	bl	8009172 <USB_ReadChInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d11b      	bne.n	8004932 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4413      	add	r3, r2
 8004902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004906:	461a      	mov	r2, r3
 8004908:	2304      	movs	r3, #4
 800490a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	334d      	adds	r3, #77	; 0x4d
 800491c:	2207      	movs	r2, #7
 800491e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	78fa      	ldrb	r2, [r7, #3]
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f005 f9c6 	bl	8009cba <USB_HC_Halt>
 800492e:	f000 bc6f 	b.w	8005210 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f004 fc19 	bl	8009172 <USB_ReadChInterrupts>
 8004940:	4603      	mov	r3, r0
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b20      	cmp	r3, #32
 8004948:	f040 8082 	bne.w	8004a50 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4413      	add	r3, r2
 8004954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004958:	461a      	mov	r2, r3
 800495a:	2320      	movs	r3, #32
 800495c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	3319      	adds	r3, #25
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d124      	bne.n	80049be <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	3319      	adds	r3, #25
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	334c      	adds	r3, #76	; 0x4c
 8004998:	2202      	movs	r2, #2
 800499a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	334d      	adds	r3, #77	; 0x4d
 80049ac:	2203      	movs	r2, #3
 80049ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	78fa      	ldrb	r2, [r7, #3]
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f005 f97e 	bl	8009cba <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80049be:	78fa      	ldrb	r2, [r7, #3]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	331a      	adds	r3, #26
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	f040 841d 	bne.w	8005210 <HCD_HC_OUT_IRQHandler+0x944>
 80049d6:	78fa      	ldrb	r2, [r7, #3]
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	331b      	adds	r3, #27
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f040 8411 	bne.w	8005210 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	3326      	adds	r3, #38	; 0x26
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d009      	beq.n	8004a18 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004a04:	78fa      	ldrb	r2, [r7, #3]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	331b      	adds	r3, #27
 8004a14:	2201      	movs	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334d      	adds	r3, #77	; 0x4d
 8004a28:	2203      	movs	r2, #3
 8004a2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	78fa      	ldrb	r2, [r7, #3]
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f005 f940 	bl	8009cba <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	3344      	adds	r3, #68	; 0x44
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e3df      	b.n	8005210 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	4611      	mov	r1, r2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f004 fb8a 	bl	8009172 <USB_ReadChInterrupts>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a68:	d111      	bne.n	8004a8e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a76:	461a      	mov	r2, r3
 8004a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a7c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	4611      	mov	r1, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f005 f917 	bl	8009cba <USB_HC_Halt>
 8004a8c:	e3c0      	b.n	8005210 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f004 fb6b 	bl	8009172 <USB_ReadChInterrupts>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d168      	bne.n	8004b78 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	3344      	adds	r3, #68	; 0x44
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f004 fb55 	bl	8009172 <USB_ReadChInterrupts>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ace:	2b40      	cmp	r3, #64	; 0x40
 8004ad0:	d112      	bne.n	8004af8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004ad2:	78fa      	ldrb	r2, [r7, #3]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	3319      	adds	r3, #25
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af2:	461a      	mov	r2, r3
 8004af4:	2340      	movs	r3, #64	; 0x40
 8004af6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	331b      	adds	r3, #27
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d019      	beq.n	8004b42 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004b0e:	78fa      	ldrb	r2, [r7, #3]
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	1a9b      	subs	r3, r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	331b      	adds	r3, #27
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	0151      	lsls	r1, r2, #5
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	440a      	add	r2, r1
 8004b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b40:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2301      	movs	r3, #1
 8004b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	334d      	adds	r3, #77	; 0x4d
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f005 f8a2 	bl	8009cba <USB_HC_Halt>
 8004b76:	e34b      	b.n	8005210 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f004 faf6 	bl	8009172 <USB_ReadChInterrupts>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d139      	bne.n	8004c04 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004b90:	78fa      	ldrb	r2, [r7, #3]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	334d      	adds	r3, #77	; 0x4d
 8004ba0:	2205      	movs	r2, #5
 8004ba2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004ba4:	78fa      	ldrb	r2, [r7, #3]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	331a      	adds	r3, #26
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3319      	adds	r3, #25
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3344      	adds	r3, #68	; 0x44
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f005 f865 	bl	8009cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	2340      	movs	r3, #64	; 0x40
 8004c00:	6093      	str	r3, [r2, #8]
 8004c02:	e305      	b.n	8005210 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	78fa      	ldrb	r2, [r7, #3]
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f004 fab0 	bl	8009172 <USB_ReadChInterrupts>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d11a      	bne.n	8004c52 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	334d      	adds	r3, #77	; 0x4d
 8004c3e:	2206      	movs	r2, #6
 8004c40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f005 f835 	bl	8009cba <USB_HC_Halt>
 8004c50:	e2de      	b.n	8005210 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f004 fa89 	bl	8009172 <USB_ReadChInterrupts>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d144      	bne.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	3344      	adds	r3, #68	; 0x44
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	334d      	adds	r3, #77	; 0x4d
 8004c8e:	2204      	movs	r2, #4
 8004c90:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3319      	adds	r3, #25
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d114      	bne.n	8004cd2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3318      	adds	r3, #24
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3319      	adds	r3, #25
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	4611      	mov	r1, r2
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f004 ffed 	bl	8009cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cec:	461a      	mov	r2, r3
 8004cee:	2310      	movs	r3, #16
 8004cf0:	6093      	str	r3, [r2, #8]
 8004cf2:	e28d      	b.n	8005210 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f004 fa38 	bl	8009172 <USB_ReadChInterrupts>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d169      	bne.n	8004de0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	799b      	ldrb	r3, [r3, #6]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d111      	bne.n	8004d38 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	334d      	adds	r3, #77	; 0x4d
 8004d24:	2207      	movs	r2, #7
 8004d26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f004 ffc2 	bl	8009cba <USB_HC_Halt>
 8004d36:	e049      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3344      	adds	r3, #68	; 0x44
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4403      	add	r3, r0
 8004d58:	3344      	adds	r3, #68	; 0x44
 8004d5a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	3344      	adds	r3, #68	; 0x44
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d922      	bls.n	8004db8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004d72:	78fa      	ldrb	r2, [r7, #3]
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	3344      	adds	r3, #68	; 0x44
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	334c      	adds	r3, #76	; 0x4c
 8004d96:	2204      	movs	r2, #4
 8004d98:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	334c      	adds	r3, #76	; 0x4c
 8004daa:	781a      	ldrb	r2, [r3, #0]
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f007 faeb 	bl	800c38c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004db6:	e009      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	334c      	adds	r3, #76	; 0x4c
 8004dc8:	2202      	movs	r2, #2
 8004dca:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	461a      	mov	r2, r3
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	6093      	str	r3, [r2, #8]
 8004dde:	e217      	b.n	8005210 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f004 f9c2 	bl	8009172 <USB_ReadChInterrupts>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df8:	d11b      	bne.n	8004e32 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	334d      	adds	r3, #77	; 0x4d
 8004e0a:	2209      	movs	r2, #9
 8004e0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	78fa      	ldrb	r2, [r7, #3]
 8004e14:	4611      	mov	r1, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f004 ff4f 	bl	8009cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e2e:	6093      	str	r3, [r2, #8]
 8004e30:	e1ee      	b.n	8005210 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f004 f999 	bl	8009172 <USB_ReadChInterrupts>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	f040 81df 	bne.w	800520a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	334d      	adds	r3, #77	; 0x4d
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	f040 8093 	bne.w	8004f9c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	334d      	adds	r3, #77	; 0x4d
 8004e86:	2202      	movs	r2, #2
 8004e88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	334c      	adds	r3, #76	; 0x4c
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	3326      	adds	r3, #38	; 0x26
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d00b      	beq.n	8004ecc <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3326      	adds	r3, #38	; 0x26
 8004ec4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	f040 8190 	bne.w	80051ec <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	799b      	ldrb	r3, [r3, #6]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d115      	bne.n	8004f00 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	333d      	adds	r3, #61	; 0x3d
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	f083 0301 	eor.w	r3, r3, #1
 8004eec:	b2d8      	uxtb	r0, r3
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	333d      	adds	r3, #61	; 0x3d
 8004efc:	4602      	mov	r2, r0
 8004efe:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	799b      	ldrb	r3, [r3, #6]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	f040 8171 	bne.w	80051ec <HCD_HC_OUT_IRQHandler+0x920>
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3334      	adds	r3, #52	; 0x34
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8165 	beq.w	80051ec <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004f22:	78fa      	ldrb	r2, [r7, #3]
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	3334      	adds	r3, #52	; 0x34
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4403      	add	r3, r0
 8004f42:	3328      	adds	r3, #40	; 0x28
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	440b      	add	r3, r1
 8004f48:	1e59      	subs	r1, r3, #1
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4403      	add	r3, r0
 8004f58:	3328      	adds	r3, #40	; 0x28
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f60:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 813f 	beq.w	80051ec <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	333d      	adds	r3, #61	; 0x3d
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	f083 0301 	eor.w	r3, r3, #1
 8004f86:	b2d8      	uxtb	r0, r3
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	333d      	adds	r3, #61	; 0x3d
 8004f96:	4602      	mov	r2, r0
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e127      	b.n	80051ec <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004f9c:	78fa      	ldrb	r2, [r7, #3]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	334d      	adds	r3, #77	; 0x4d
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d120      	bne.n	8004ff4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fb2:	78fa      	ldrb	r2, [r7, #3]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	334d      	adds	r3, #77	; 0x4d
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	331b      	adds	r3, #27
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f040 8107 	bne.w	80051ec <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fde:	78fa      	ldrb	r2, [r7, #3]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	334c      	adds	r3, #76	; 0x4c
 8004fee:	2202      	movs	r2, #2
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	e0fb      	b.n	80051ec <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	334d      	adds	r3, #77	; 0x4d
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b04      	cmp	r3, #4
 8005008:	d13a      	bne.n	8005080 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	334d      	adds	r3, #77	; 0x4d
 800501a:	2202      	movs	r2, #2
 800501c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	334c      	adds	r3, #76	; 0x4c
 800502e:	2202      	movs	r2, #2
 8005030:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	331b      	adds	r3, #27
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b01      	cmp	r3, #1
 8005046:	f040 80d1 	bne.w	80051ec <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800504a:	78fa      	ldrb	r2, [r7, #3]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	331b      	adds	r3, #27
 800505a:	2200      	movs	r2, #0
 800505c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	78fa      	ldrb	r2, [r7, #3]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	440a      	add	r2, r1
 8005074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800507c:	6053      	str	r3, [r2, #4]
 800507e:	e0b5      	b.n	80051ec <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	334d      	adds	r3, #77	; 0x4d
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b05      	cmp	r3, #5
 8005094:	d114      	bne.n	80050c0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	334d      	adds	r3, #77	; 0x4d
 80050a6:	2202      	movs	r2, #2
 80050a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	334c      	adds	r3, #76	; 0x4c
 80050ba:	2202      	movs	r2, #2
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e095      	b.n	80051ec <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	334d      	adds	r3, #77	; 0x4d
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d114      	bne.n	8005100 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	334d      	adds	r3, #77	; 0x4d
 80050e6:	2202      	movs	r2, #2
 80050e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	334c      	adds	r3, #76	; 0x4c
 80050fa:	2205      	movs	r2, #5
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e075      	b.n	80051ec <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	334d      	adds	r3, #77	; 0x4d
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b07      	cmp	r3, #7
 8005114:	d00a      	beq.n	800512c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	334d      	adds	r3, #77	; 0x4d
 8005126:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005128:	2b09      	cmp	r3, #9
 800512a:	d170      	bne.n	800520e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800512c:	78fa      	ldrb	r2, [r7, #3]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	334d      	adds	r3, #77	; 0x4d
 800513c:	2202      	movs	r2, #2
 800513e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	3344      	adds	r3, #68	; 0x44
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	1c59      	adds	r1, r3, #1
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4403      	add	r3, r0
 8005160:	3344      	adds	r3, #68	; 0x44
 8005162:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	3344      	adds	r3, #68	; 0x44
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d914      	bls.n	80051a4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800517a:	78fa      	ldrb	r2, [r7, #3]
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	1a9b      	subs	r3, r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	3344      	adds	r3, #68	; 0x44
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	334c      	adds	r3, #76	; 0x4c
 800519e:	2204      	movs	r2, #4
 80051a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051a2:	e022      	b.n	80051ea <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051a4:	78fa      	ldrb	r2, [r7, #3]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	1a9b      	subs	r3, r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	334c      	adds	r3, #76	; 0x4c
 80051b4:	2202      	movs	r2, #2
 80051b6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051ce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051d6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e4:	461a      	mov	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051ea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80051ec:	78fa      	ldrb	r2, [r7, #3]
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	334c      	adds	r3, #76	; 0x4c
 80051fc:	781a      	ldrb	r2, [r3, #0]
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f007 f8c2 	bl	800c38c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005208:	e002      	b.n	8005210 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800520a:	bf00      	nop
 800520c:	e000      	b.n	8005210 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800520e:	bf00      	nop
  }
}
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b08a      	sub	sp, #40	; 0x28
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	0c5b      	lsrs	r3, r3, #17
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800524a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d004      	beq.n	800525c <HCD_RXQLVL_IRQHandler+0x46>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b05      	cmp	r3, #5
 8005256:	f000 80b6 	beq.w	80053c6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800525a:	e0b7      	b.n	80053cc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 80b3 	beq.w	80053ca <HCD_RXQLVL_IRQHandler+0x1b4>
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4613      	mov	r3, r2
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	332c      	adds	r3, #44	; 0x2c
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80a7 	beq.w	80053ca <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4613      	mov	r3, r2
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3338      	adds	r3, #56	; 0x38
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	18d1      	adds	r1, r2, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4613      	mov	r3, r2
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4403      	add	r3, r0
 80052a0:	3334      	adds	r3, #52	; 0x34
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4299      	cmp	r1, r3
 80052a6:	f200 8083 	bhi.w	80053b0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4613      	mov	r3, r2
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	332c      	adds	r3, #44	; 0x2c
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	b292      	uxth	r2, r2
 80052c4:	4619      	mov	r1, r3
 80052c6:	f003 fee9 	bl	800909c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4613      	mov	r3, r2
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	332c      	adds	r3, #44	; 0x2c
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	18d1      	adds	r1, r2, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4613      	mov	r3, r2
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4403      	add	r3, r0
 80052ee:	332c      	adds	r3, #44	; 0x2c
 80052f0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4613      	mov	r3, r2
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	3338      	adds	r3, #56	; 0x38
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	18d1      	adds	r1, r2, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4613      	mov	r3, r2
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4403      	add	r3, r0
 8005316:	3338      	adds	r3, #56	; 0x38
 8005318:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	0cdb      	lsrs	r3, r3, #19
 800532a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800532e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4613      	mov	r3, r2
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	3328      	adds	r3, #40	; 0x28
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4293      	cmp	r3, r2
 8005348:	d13f      	bne.n	80053ca <HCD_RXQLVL_IRQHandler+0x1b4>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d03c      	beq.n	80053ca <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	4413      	add	r3, r2
 8005358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005366:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800536e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	461a      	mov	r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4613      	mov	r3, r2
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	333c      	adds	r3, #60	; 0x3c
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f083 0301 	eor.w	r3, r3, #1
 8005398:	b2d8      	uxtb	r0, r3
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	333c      	adds	r3, #60	; 0x3c
 80053aa:	4602      	mov	r2, r0
 80053ac:	701a      	strb	r2, [r3, #0]
      break;
 80053ae:	e00c      	b.n	80053ca <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4613      	mov	r3, r2
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	334c      	adds	r3, #76	; 0x4c
 80053c0:	2204      	movs	r2, #4
 80053c2:	701a      	strb	r2, [r3, #0]
      break;
 80053c4:	e001      	b.n	80053ca <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80053c6:	bf00      	nop
 80053c8:	e000      	b.n	80053cc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80053ca:	bf00      	nop
  }
}
 80053cc:	bf00      	nop
 80053ce:	3728      	adds	r7, #40	; 0x28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005400:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b02      	cmp	r3, #2
 800540a:	d10b      	bne.n	8005424 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b01      	cmp	r3, #1
 8005414:	d102      	bne.n	800541c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f006 ff9c 	bl	800c354 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f043 0302 	orr.w	r3, r3, #2
 8005422:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b08      	cmp	r3, #8
 800542c:	d132      	bne.n	8005494 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f043 0308 	orr.w	r3, r3, #8
 8005434:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b04      	cmp	r3, #4
 800543e:	d126      	bne.n	800548e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	7a5b      	ldrb	r3, [r3, #9]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d113      	bne.n	8005470 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800544e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005452:	d106      	bne.n	8005462 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f003 ffae 	bl	80093bc <USB_InitFSLSPClkSel>
 8005460:	e011      	b.n	8005486 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2101      	movs	r1, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f003 ffa7 	bl	80093bc <USB_InitFSLSPClkSel>
 800546e:	e00a      	b.n	8005486 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	79db      	ldrb	r3, [r3, #7]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d106      	bne.n	8005486 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800547e:	461a      	mov	r2, r3
 8005480:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005484:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f006 ff8e 	bl	800c3a8 <HAL_HCD_PortEnabled_Callback>
 800548c:	e002      	b.n	8005494 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f006 ff98 	bl	800c3c4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b20      	cmp	r3, #32
 800549c:	d103      	bne.n	80054a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f043 0320 	orr.w	r3, r3, #32
 80054a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054ac:	461a      	mov	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	6013      	str	r3, [r2, #0]
}
 80054b2:	bf00      	nop
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e12b      	b.n	8005726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fc fc7e 	bl	8001de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2224      	movs	r2, #36	; 0x24
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800550e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800551e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005520:	f001 fc60 	bl	8006de4 <HAL_RCC_GetPCLK1Freq>
 8005524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	4a81      	ldr	r2, [pc, #516]	; (8005730 <HAL_I2C_Init+0x274>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d807      	bhi.n	8005540 <HAL_I2C_Init+0x84>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4a80      	ldr	r2, [pc, #512]	; (8005734 <HAL_I2C_Init+0x278>)
 8005534:	4293      	cmp	r3, r2
 8005536:	bf94      	ite	ls
 8005538:	2301      	movls	r3, #1
 800553a:	2300      	movhi	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e006      	b.n	800554e <HAL_I2C_Init+0x92>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a7d      	ldr	r2, [pc, #500]	; (8005738 <HAL_I2C_Init+0x27c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	bf94      	ite	ls
 8005548:	2301      	movls	r3, #1
 800554a:	2300      	movhi	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e0e7      	b.n	8005726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a78      	ldr	r2, [pc, #480]	; (800573c <HAL_I2C_Init+0x280>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	0c9b      	lsrs	r3, r3, #18
 8005560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	430a      	orrs	r2, r1
 8005574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	4a6a      	ldr	r2, [pc, #424]	; (8005730 <HAL_I2C_Init+0x274>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d802      	bhi.n	8005590 <HAL_I2C_Init+0xd4>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	3301      	adds	r3, #1
 800558e:	e009      	b.n	80055a4 <HAL_I2C_Init+0xe8>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005596:	fb02 f303 	mul.w	r3, r2, r3
 800559a:	4a69      	ldr	r2, [pc, #420]	; (8005740 <HAL_I2C_Init+0x284>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	099b      	lsrs	r3, r3, #6
 80055a2:	3301      	adds	r3, #1
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	495c      	ldr	r1, [pc, #368]	; (8005730 <HAL_I2C_Init+0x274>)
 80055c0:	428b      	cmp	r3, r1
 80055c2:	d819      	bhi.n	80055f8 <HAL_I2C_Init+0x13c>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1e59      	subs	r1, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80055d2:	1c59      	adds	r1, r3, #1
 80055d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055d8:	400b      	ands	r3, r1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_I2C_Init+0x138>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1e59      	subs	r1, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ec:	3301      	adds	r3, #1
 80055ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f2:	e051      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 80055f4:	2304      	movs	r3, #4
 80055f6:	e04f      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d111      	bne.n	8005624 <HAL_I2C_Init+0x168>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1e58      	subs	r0, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6859      	ldr	r1, [r3, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	440b      	add	r3, r1
 800560e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005612:	3301      	adds	r3, #1
 8005614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005618:	2b00      	cmp	r3, #0
 800561a:	bf0c      	ite	eq
 800561c:	2301      	moveq	r3, #1
 800561e:	2300      	movne	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	e012      	b.n	800564a <HAL_I2C_Init+0x18e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1e58      	subs	r0, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6859      	ldr	r1, [r3, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	0099      	lsls	r1, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	fbb0 f3f3 	udiv	r3, r0, r3
 800563a:	3301      	adds	r3, #1
 800563c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_I2C_Init+0x196>
 800564e:	2301      	movs	r3, #1
 8005650:	e022      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10e      	bne.n	8005678 <HAL_I2C_Init+0x1bc>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1e58      	subs	r0, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6859      	ldr	r1, [r3, #4]
 8005662:	460b      	mov	r3, r1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	440b      	add	r3, r1
 8005668:	fbb0 f3f3 	udiv	r3, r0, r3
 800566c:	3301      	adds	r3, #1
 800566e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005676:	e00f      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	1e58      	subs	r0, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6859      	ldr	r1, [r3, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	0099      	lsls	r1, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	fbb0 f3f3 	udiv	r3, r0, r3
 800568e:	3301      	adds	r3, #1
 8005690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	6809      	ldr	r1, [r1, #0]
 800569c:	4313      	orrs	r3, r2
 800569e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69da      	ldr	r2, [r3, #28]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6911      	ldr	r1, [r2, #16]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68d2      	ldr	r2, [r2, #12]
 80056d2:	4311      	orrs	r1, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	430b      	orrs	r3, r1
 80056da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	000186a0 	.word	0x000186a0
 8005734:	001e847f 	.word	0x001e847f
 8005738:	003d08ff 	.word	0x003d08ff
 800573c:	431bde83 	.word	0x431bde83
 8005740:	10624dd3 	.word	0x10624dd3

08005744 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	4608      	mov	r0, r1
 800574e:	4611      	mov	r1, r2
 8005750:	461a      	mov	r2, r3
 8005752:	4603      	mov	r3, r0
 8005754:	817b      	strh	r3, [r7, #10]
 8005756:	460b      	mov	r3, r1
 8005758:	813b      	strh	r3, [r7, #8]
 800575a:	4613      	mov	r3, r2
 800575c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800575e:	f7fc ff1f 	bl	80025a0 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b20      	cmp	r3, #32
 800576e:	f040 80d9 	bne.w	8005924 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	2319      	movs	r3, #25
 8005778:	2201      	movs	r2, #1
 800577a:	496d      	ldr	r1, [pc, #436]	; (8005930 <HAL_I2C_Mem_Write+0x1ec>)
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fc8b 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005788:	2302      	movs	r3, #2
 800578a:	e0cc      	b.n	8005926 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_I2C_Mem_Write+0x56>
 8005796:	2302      	movs	r3, #2
 8005798:	e0c5      	b.n	8005926 <HAL_I2C_Mem_Write+0x1e2>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d007      	beq.n	80057c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2221      	movs	r2, #33	; 0x21
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2240      	movs	r2, #64	; 0x40
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4a4d      	ldr	r2, [pc, #308]	; (8005934 <HAL_I2C_Mem_Write+0x1f0>)
 8005800:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005802:	88f8      	ldrh	r0, [r7, #6]
 8005804:	893a      	ldrh	r2, [r7, #8]
 8005806:	8979      	ldrh	r1, [r7, #10]
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	4603      	mov	r3, r0
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fac2 	bl	8005d9c <I2C_RequestMemoryWrite>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d052      	beq.n	80058c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e081      	b.n	8005926 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fd50 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00d      	beq.n	800584e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	2b04      	cmp	r3, #4
 8005838:	d107      	bne.n	800584a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005848:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e06b      	b.n	8005926 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	781a      	ldrb	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b04      	cmp	r3, #4
 800588a:	d11b      	bne.n	80058c4 <HAL_I2C_Mem_Write+0x180>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005890:	2b00      	cmp	r3, #0
 8005892:	d017      	beq.n	80058c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	781a      	ldrb	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1aa      	bne.n	8005822 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fd43 	bl	800635c <I2C_WaitOnBTFFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00d      	beq.n	80058f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d107      	bne.n	80058f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e016      	b.n	8005926 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	e000      	b.n	8005926 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005924:	2302      	movs	r3, #2
  }
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	00100002 	.word	0x00100002
 8005934:	ffff0000 	.word	0xffff0000

08005938 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08c      	sub	sp, #48	; 0x30
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	4608      	mov	r0, r1
 8005942:	4611      	mov	r1, r2
 8005944:	461a      	mov	r2, r3
 8005946:	4603      	mov	r3, r0
 8005948:	817b      	strh	r3, [r7, #10]
 800594a:	460b      	mov	r3, r1
 800594c:	813b      	strh	r3, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005952:	f7fc fe25 	bl	80025a0 <HAL_GetTick>
 8005956:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b20      	cmp	r3, #32
 8005962:	f040 8214 	bne.w	8005d8e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	2319      	movs	r3, #25
 800596c:	2201      	movs	r2, #1
 800596e:	497b      	ldr	r1, [pc, #492]	; (8005b5c <HAL_I2C_Mem_Read+0x224>)
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fb91 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800597c:	2302      	movs	r3, #2
 800597e:	e207      	b.n	8005d90 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_I2C_Mem_Read+0x56>
 800598a:	2302      	movs	r3, #2
 800598c:	e200      	b.n	8005d90 <HAL_I2C_Mem_Read+0x458>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d007      	beq.n	80059b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2222      	movs	r2, #34	; 0x22
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2240      	movs	r2, #64	; 0x40
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80059e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a5b      	ldr	r2, [pc, #364]	; (8005b60 <HAL_I2C_Mem_Read+0x228>)
 80059f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059f6:	88f8      	ldrh	r0, [r7, #6]
 80059f8:	893a      	ldrh	r2, [r7, #8]
 80059fa:	8979      	ldrh	r1, [r7, #10]
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	9301      	str	r3, [sp, #4]
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	4603      	mov	r3, r0
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fa5e 	bl	8005ec8 <I2C_RequestMemoryRead>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e1bc      	b.n	8005d90 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d113      	bne.n	8005a46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	623b      	str	r3, [r7, #32]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	623b      	str	r3, [r7, #32]
 8005a32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	e190      	b.n	8005d68 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d11b      	bne.n	8005a86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	61fb      	str	r3, [r7, #28]
 8005a72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	e170      	b.n	8005d68 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d11b      	bne.n	8005ac6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	61bb      	str	r3, [r7, #24]
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	e150      	b.n	8005d68 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005adc:	e144      	b.n	8005d68 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	f200 80f1 	bhi.w	8005cca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d123      	bne.n	8005b38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 fc79 	bl	80063ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e145      	b.n	8005d90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b36:	e117      	b.n	8005d68 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d14e      	bne.n	8005bde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	2200      	movs	r2, #0
 8005b48:	4906      	ldr	r1, [pc, #24]	; (8005b64 <HAL_I2C_Mem_Read+0x22c>)
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 faa4 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d008      	beq.n	8005b68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e11a      	b.n	8005d90 <HAL_I2C_Mem_Read+0x458>
 8005b5a:	bf00      	nop
 8005b5c:	00100002 	.word	0x00100002
 8005b60:	ffff0000 	.word	0xffff0000
 8005b64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bdc:	e0c4      	b.n	8005d68 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	2200      	movs	r2, #0
 8005be6:	496c      	ldr	r1, [pc, #432]	; (8005d98 <HAL_I2C_Mem_Read+0x460>)
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fa55 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0cb      	b.n	8005d90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	2200      	movs	r2, #0
 8005c42:	4955      	ldr	r1, [pc, #340]	; (8005d98 <HAL_I2C_Mem_Read+0x460>)
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fa27 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e09d      	b.n	8005d90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691a      	ldr	r2, [r3, #16]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cc8:	e04e      	b.n	8005d68 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ccc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 fb8c 	bl	80063ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e058      	b.n	8005d90 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d124      	bne.n	8005d68 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d107      	bne.n	8005d36 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d34:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f47f aeb6 	bne.w	8005ade <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e000      	b.n	8005d90 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005d8e:	2302      	movs	r3, #2
  }
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3728      	adds	r7, #40	; 0x28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	00010004 	.word	0x00010004

08005d9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	4608      	mov	r0, r1
 8005da6:	4611      	mov	r1, r2
 8005da8:	461a      	mov	r2, r3
 8005daa:	4603      	mov	r3, r0
 8005dac:	817b      	strh	r3, [r7, #10]
 8005dae:	460b      	mov	r3, r1
 8005db0:	813b      	strh	r3, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 f960 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00d      	beq.n	8005dfa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dec:	d103      	bne.n	8005df6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e05f      	b.n	8005eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dfa:	897b      	ldrh	r3, [r7, #10]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	6a3a      	ldr	r2, [r7, #32]
 8005e0e:	492d      	ldr	r1, [pc, #180]	; (8005ec4 <I2C_RequestMemoryWrite+0x128>)
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f9bb 	bl	800618c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e04c      	b.n	8005eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e38:	6a39      	ldr	r1, [r7, #32]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 fa46 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00d      	beq.n	8005e62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d107      	bne.n	8005e5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e02b      	b.n	8005eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d105      	bne.n	8005e74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e68:	893b      	ldrh	r3, [r7, #8]
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	611a      	str	r2, [r3, #16]
 8005e72:	e021      	b.n	8005eb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e74:	893b      	ldrh	r3, [r7, #8]
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e84:	6a39      	ldr	r1, [r7, #32]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fa20 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00d      	beq.n	8005eae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d107      	bne.n	8005eaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e005      	b.n	8005eba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eae:	893b      	ldrh	r3, [r7, #8]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	00010002 	.word	0x00010002

08005ec8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	817b      	strh	r3, [r7, #10]
 8005eda:	460b      	mov	r3, r1
 8005edc:	813b      	strh	r3, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 f8c2 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00d      	beq.n	8005f36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f28:	d103      	bne.n	8005f32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e0aa      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f36:	897b      	ldrh	r3, [r7, #10]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	6a3a      	ldr	r2, [r7, #32]
 8005f4a:	4952      	ldr	r1, [pc, #328]	; (8006094 <I2C_RequestMemoryRead+0x1cc>)
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 f91d 	bl	800618c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e097      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f74:	6a39      	ldr	r1, [r7, #32]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 f9a8 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d107      	bne.n	8005f9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e076      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d105      	bne.n	8005fb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fa4:	893b      	ldrh	r3, [r7, #8]
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	611a      	str	r2, [r3, #16]
 8005fae:	e021      	b.n	8005ff4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fb0:	893b      	ldrh	r3, [r7, #8]
 8005fb2:	0a1b      	lsrs	r3, r3, #8
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc0:	6a39      	ldr	r1, [r7, #32]
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f982 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00d      	beq.n	8005fea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d107      	bne.n	8005fe6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e050      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fea:	893b      	ldrh	r3, [r7, #8]
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff6:	6a39      	ldr	r1, [r7, #32]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f967 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00d      	beq.n	8006020 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	2b04      	cmp	r3, #4
 800600a:	d107      	bne.n	800601c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e035      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800602e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	2200      	movs	r2, #0
 8006038:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f82b 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00d      	beq.n	8006064 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006056:	d103      	bne.n	8006060 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800605e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e013      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006064:	897b      	ldrh	r3, [r7, #10]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f043 0301 	orr.w	r3, r3, #1
 800606c:	b2da      	uxtb	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	6a3a      	ldr	r2, [r7, #32]
 8006078:	4906      	ldr	r1, [pc, #24]	; (8006094 <I2C_RequestMemoryRead+0x1cc>)
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f886 	bl	800618c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	00010002 	.word	0x00010002

08006098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	4613      	mov	r3, r2
 80060a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060a8:	e048      	b.n	800613c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b0:	d044      	beq.n	800613c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b2:	f7fc fa75 	bl	80025a0 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d302      	bcc.n	80060c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d139      	bne.n	800613c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	0c1b      	lsrs	r3, r3, #16
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d10d      	bne.n	80060ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	43da      	mvns	r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	4013      	ands	r3, r2
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bf0c      	ite	eq
 80060e4:	2301      	moveq	r3, #1
 80060e6:	2300      	movne	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	461a      	mov	r2, r3
 80060ec:	e00c      	b.n	8006108 <I2C_WaitOnFlagUntilTimeout+0x70>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	43da      	mvns	r2, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4013      	ands	r3, r2
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bf0c      	ite	eq
 8006100:	2301      	moveq	r3, #1
 8006102:	2300      	movne	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	429a      	cmp	r2, r3
 800610c:	d116      	bne.n	800613c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	f043 0220 	orr.w	r2, r3, #32
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e023      	b.n	8006184 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	0c1b      	lsrs	r3, r3, #16
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b01      	cmp	r3, #1
 8006144:	d10d      	bne.n	8006162 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	43da      	mvns	r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	4013      	ands	r3, r2
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	bf0c      	ite	eq
 8006158:	2301      	moveq	r3, #1
 800615a:	2300      	movne	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	e00c      	b.n	800617c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	43da      	mvns	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	429a      	cmp	r2, r3
 8006180:	d093      	beq.n	80060aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800619a:	e071      	b.n	8006280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061aa:	d123      	bne.n	80061f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	f043 0204 	orr.w	r2, r3, #4
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e067      	b.n	80062c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fa:	d041      	beq.n	8006280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fc:	f7fc f9d0 	bl	80025a0 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	429a      	cmp	r2, r3
 800620a:	d302      	bcc.n	8006212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d136      	bne.n	8006280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	0c1b      	lsrs	r3, r3, #16
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	d10c      	bne.n	8006236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	43da      	mvns	r2, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4013      	ands	r3, r2
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	bf14      	ite	ne
 800622e:	2301      	movne	r3, #1
 8006230:	2300      	moveq	r3, #0
 8006232:	b2db      	uxtb	r3, r3
 8006234:	e00b      	b.n	800624e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	43da      	mvns	r2, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4013      	ands	r3, r2
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	bf14      	ite	ne
 8006248:	2301      	movne	r3, #1
 800624a:	2300      	moveq	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d016      	beq.n	8006280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	f043 0220 	orr.w	r2, r3, #32
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e021      	b.n	80062c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	0c1b      	lsrs	r3, r3, #16
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b01      	cmp	r3, #1
 8006288:	d10c      	bne.n	80062a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	43da      	mvns	r2, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4013      	ands	r3, r2
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	bf14      	ite	ne
 800629c:	2301      	movne	r3, #1
 800629e:	2300      	moveq	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	e00b      	b.n	80062bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	43da      	mvns	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4013      	ands	r3, r2
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f47f af6d 	bne.w	800619c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062d8:	e034      	b.n	8006344 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 f8e3 	bl	80064a6 <I2C_IsAcknowledgeFailed>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e034      	b.n	8006354 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f0:	d028      	beq.n	8006344 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f2:	f7fc f955 	bl	80025a0 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d302      	bcc.n	8006308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d11d      	bne.n	8006344 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006312:	2b80      	cmp	r3, #128	; 0x80
 8006314:	d016      	beq.n	8006344 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	f043 0220 	orr.w	r2, r3, #32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e007      	b.n	8006354 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634e:	2b80      	cmp	r3, #128	; 0x80
 8006350:	d1c3      	bne.n	80062da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006368:	e034      	b.n	80063d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f89b 	bl	80064a6 <I2C_IsAcknowledgeFailed>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e034      	b.n	80063e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d028      	beq.n	80063d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006382:	f7fc f90d 	bl	80025a0 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	429a      	cmp	r2, r3
 8006390:	d302      	bcc.n	8006398 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11d      	bne.n	80063d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d016      	beq.n	80063d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	f043 0220 	orr.w	r2, r3, #32
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e007      	b.n	80063e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d1c3      	bne.n	800636a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063f8:	e049      	b.n	800648e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b10      	cmp	r3, #16
 8006406:	d119      	bne.n	800643c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0210 	mvn.w	r2, #16
 8006410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e030      	b.n	800649e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643c:	f7fc f8b0 	bl	80025a0 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	d302      	bcc.n	8006452 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d11d      	bne.n	800648e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d016      	beq.n	800648e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f043 0220 	orr.w	r2, r3, #32
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e007      	b.n	800649e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d1ae      	bne.n	80063fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064bc:	d11b      	bne.n	80064f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f043 0204 	orr.w	r2, r3, #4
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e267      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d075      	beq.n	800660e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006522:	4b88      	ldr	r3, [pc, #544]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 030c 	and.w	r3, r3, #12
 800652a:	2b04      	cmp	r3, #4
 800652c:	d00c      	beq.n	8006548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800652e:	4b85      	ldr	r3, [pc, #532]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006536:	2b08      	cmp	r3, #8
 8006538:	d112      	bne.n	8006560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800653a:	4b82      	ldr	r3, [pc, #520]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006546:	d10b      	bne.n	8006560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006548:	4b7e      	ldr	r3, [pc, #504]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d05b      	beq.n	800660c <HAL_RCC_OscConfig+0x108>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d157      	bne.n	800660c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e242      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006568:	d106      	bne.n	8006578 <HAL_RCC_OscConfig+0x74>
 800656a:	4b76      	ldr	r3, [pc, #472]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a75      	ldr	r2, [pc, #468]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	e01d      	b.n	80065b4 <HAL_RCC_OscConfig+0xb0>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006580:	d10c      	bne.n	800659c <HAL_RCC_OscConfig+0x98>
 8006582:	4b70      	ldr	r3, [pc, #448]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a6f      	ldr	r2, [pc, #444]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	4b6d      	ldr	r3, [pc, #436]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a6c      	ldr	r2, [pc, #432]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e00b      	b.n	80065b4 <HAL_RCC_OscConfig+0xb0>
 800659c:	4b69      	ldr	r3, [pc, #420]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a68      	ldr	r2, [pc, #416]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80065a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	4b66      	ldr	r3, [pc, #408]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a65      	ldr	r2, [pc, #404]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80065ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d013      	beq.n	80065e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065bc:	f7fb fff0 	bl	80025a0 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065c4:	f7fb ffec 	bl	80025a0 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b64      	cmp	r3, #100	; 0x64
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e207      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065d6:	4b5b      	ldr	r3, [pc, #364]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <HAL_RCC_OscConfig+0xc0>
 80065e2:	e014      	b.n	800660e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e4:	f7fb ffdc 	bl	80025a0 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065ec:	f7fb ffd8 	bl	80025a0 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b64      	cmp	r3, #100	; 0x64
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e1f3      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065fe:	4b51      	ldr	r3, [pc, #324]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f0      	bne.n	80065ec <HAL_RCC_OscConfig+0xe8>
 800660a:	e000      	b.n	800660e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800660c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d063      	beq.n	80066e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800661a:	4b4a      	ldr	r3, [pc, #296]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 030c 	and.w	r3, r3, #12
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006626:	4b47      	ldr	r3, [pc, #284]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800662e:	2b08      	cmp	r3, #8
 8006630:	d11c      	bne.n	800666c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006632:	4b44      	ldr	r3, [pc, #272]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d116      	bne.n	800666c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800663e:	4b41      	ldr	r3, [pc, #260]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <HAL_RCC_OscConfig+0x152>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d001      	beq.n	8006656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e1c7      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006656:	4b3b      	ldr	r3, [pc, #236]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	4937      	ldr	r1, [pc, #220]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006666:	4313      	orrs	r3, r2
 8006668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800666a:	e03a      	b.n	80066e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d020      	beq.n	80066b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006674:	4b34      	ldr	r3, [pc, #208]	; (8006748 <HAL_RCC_OscConfig+0x244>)
 8006676:	2201      	movs	r2, #1
 8006678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667a:	f7fb ff91 	bl	80025a0 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006682:	f7fb ff8d 	bl	80025a0 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e1a8      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006694:	4b2b      	ldr	r3, [pc, #172]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0f0      	beq.n	8006682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a0:	4b28      	ldr	r3, [pc, #160]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	4925      	ldr	r1, [pc, #148]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	600b      	str	r3, [r1, #0]
 80066b4:	e015      	b.n	80066e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066b6:	4b24      	ldr	r3, [pc, #144]	; (8006748 <HAL_RCC_OscConfig+0x244>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066bc:	f7fb ff70 	bl	80025a0 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066c4:	f7fb ff6c 	bl	80025a0 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e187      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066d6:	4b1b      	ldr	r3, [pc, #108]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f0      	bne.n	80066c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d036      	beq.n	800675c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d016      	beq.n	8006724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f6:	4b15      	ldr	r3, [pc, #84]	; (800674c <HAL_RCC_OscConfig+0x248>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fc:	f7fb ff50 	bl	80025a0 <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006704:	f7fb ff4c 	bl	80025a0 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e167      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0f0      	beq.n	8006704 <HAL_RCC_OscConfig+0x200>
 8006722:	e01b      	b.n	800675c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006724:	4b09      	ldr	r3, [pc, #36]	; (800674c <HAL_RCC_OscConfig+0x248>)
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800672a:	f7fb ff39 	bl	80025a0 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006730:	e00e      	b.n	8006750 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006732:	f7fb ff35 	bl	80025a0 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d907      	bls.n	8006750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e150      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
 8006744:	40023800 	.word	0x40023800
 8006748:	42470000 	.word	0x42470000
 800674c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006750:	4b88      	ldr	r3, [pc, #544]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ea      	bne.n	8006732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8097 	beq.w	8006898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800676a:	2300      	movs	r3, #0
 800676c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800676e:	4b81      	ldr	r3, [pc, #516]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10f      	bne.n	800679a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800677a:	2300      	movs	r3, #0
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	4b7d      	ldr	r3, [pc, #500]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	4a7c      	ldr	r2, [pc, #496]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006788:	6413      	str	r3, [r2, #64]	; 0x40
 800678a:	4b7a      	ldr	r3, [pc, #488]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006792:	60bb      	str	r3, [r7, #8]
 8006794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006796:	2301      	movs	r3, #1
 8006798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679a:	4b77      	ldr	r3, [pc, #476]	; (8006978 <HAL_RCC_OscConfig+0x474>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d118      	bne.n	80067d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a6:	4b74      	ldr	r3, [pc, #464]	; (8006978 <HAL_RCC_OscConfig+0x474>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a73      	ldr	r2, [pc, #460]	; (8006978 <HAL_RCC_OscConfig+0x474>)
 80067ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067b2:	f7fb fef5 	bl	80025a0 <HAL_GetTick>
 80067b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ba:	f7fb fef1 	bl	80025a0 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e10c      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067cc:	4b6a      	ldr	r3, [pc, #424]	; (8006978 <HAL_RCC_OscConfig+0x474>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0f0      	beq.n	80067ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d106      	bne.n	80067ee <HAL_RCC_OscConfig+0x2ea>
 80067e0:	4b64      	ldr	r3, [pc, #400]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	4a63      	ldr	r2, [pc, #396]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80067e6:	f043 0301 	orr.w	r3, r3, #1
 80067ea:	6713      	str	r3, [r2, #112]	; 0x70
 80067ec:	e01c      	b.n	8006828 <HAL_RCC_OscConfig+0x324>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2b05      	cmp	r3, #5
 80067f4:	d10c      	bne.n	8006810 <HAL_RCC_OscConfig+0x30c>
 80067f6:	4b5f      	ldr	r3, [pc, #380]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	4a5e      	ldr	r2, [pc, #376]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80067fc:	f043 0304 	orr.w	r3, r3, #4
 8006800:	6713      	str	r3, [r2, #112]	; 0x70
 8006802:	4b5c      	ldr	r3, [pc, #368]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006806:	4a5b      	ldr	r2, [pc, #364]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	6713      	str	r3, [r2, #112]	; 0x70
 800680e:	e00b      	b.n	8006828 <HAL_RCC_OscConfig+0x324>
 8006810:	4b58      	ldr	r3, [pc, #352]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	4a57      	ldr	r2, [pc, #348]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	6713      	str	r3, [r2, #112]	; 0x70
 800681c:	4b55      	ldr	r3, [pc, #340]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	4a54      	ldr	r2, [pc, #336]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006822:	f023 0304 	bic.w	r3, r3, #4
 8006826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d015      	beq.n	800685c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006830:	f7fb feb6 	bl	80025a0 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006836:	e00a      	b.n	800684e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006838:	f7fb feb2 	bl	80025a0 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	f241 3288 	movw	r2, #5000	; 0x1388
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e0cb      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800684e:	4b49      	ldr	r3, [pc, #292]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0ee      	beq.n	8006838 <HAL_RCC_OscConfig+0x334>
 800685a:	e014      	b.n	8006886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800685c:	f7fb fea0 	bl	80025a0 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006862:	e00a      	b.n	800687a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006864:	f7fb fe9c 	bl	80025a0 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006872:	4293      	cmp	r3, r2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e0b5      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800687a:	4b3e      	ldr	r3, [pc, #248]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1ee      	bne.n	8006864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d105      	bne.n	8006898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800688c:	4b39      	ldr	r3, [pc, #228]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	4a38      	ldr	r2, [pc, #224]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006896:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 80a1 	beq.w	80069e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068a2:	4b34      	ldr	r3, [pc, #208]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 030c 	and.w	r3, r3, #12
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	d05c      	beq.n	8006968 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d141      	bne.n	800693a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b6:	4b31      	ldr	r3, [pc, #196]	; (800697c <HAL_RCC_OscConfig+0x478>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068bc:	f7fb fe70 	bl	80025a0 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068c4:	f7fb fe6c 	bl	80025a0 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e087      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068d6:	4b27      	ldr	r3, [pc, #156]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f0      	bne.n	80068c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69da      	ldr	r2, [r3, #28]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	019b      	lsls	r3, r3, #6
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	3b01      	subs	r3, #1
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	061b      	lsls	r3, r3, #24
 8006906:	491b      	ldr	r1, [pc, #108]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006908:	4313      	orrs	r3, r2
 800690a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800690c:	4b1b      	ldr	r3, [pc, #108]	; (800697c <HAL_RCC_OscConfig+0x478>)
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006912:	f7fb fe45 	bl	80025a0 <HAL_GetTick>
 8006916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006918:	e008      	b.n	800692c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800691a:	f7fb fe41 	bl	80025a0 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e05c      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800692c:	4b11      	ldr	r3, [pc, #68]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f0      	beq.n	800691a <HAL_RCC_OscConfig+0x416>
 8006938:	e054      	b.n	80069e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800693a:	4b10      	ldr	r3, [pc, #64]	; (800697c <HAL_RCC_OscConfig+0x478>)
 800693c:	2200      	movs	r2, #0
 800693e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006940:	f7fb fe2e 	bl	80025a0 <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006948:	f7fb fe2a 	bl	80025a0 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e045      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695a:	4b06      	ldr	r3, [pc, #24]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f0      	bne.n	8006948 <HAL_RCC_OscConfig+0x444>
 8006966:	e03d      	b.n	80069e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d107      	bne.n	8006980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e038      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
 8006974:	40023800 	.word	0x40023800
 8006978:	40007000 	.word	0x40007000
 800697c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006980:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <HAL_RCC_OscConfig+0x4ec>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d028      	beq.n	80069e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006998:	429a      	cmp	r2, r3
 800699a:	d121      	bne.n	80069e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d11a      	bne.n	80069e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069b0:	4013      	ands	r3, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d111      	bne.n	80069e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	3b01      	subs	r3, #1
 80069ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d107      	bne.n	80069e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069dc:	429a      	cmp	r2, r3
 80069de:	d001      	beq.n	80069e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e000      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40023800 	.word	0x40023800

080069f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0cc      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a08:	4b68      	ldr	r3, [pc, #416]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d90c      	bls.n	8006a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a16:	4b65      	ldr	r3, [pc, #404]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1e:	4b63      	ldr	r3, [pc, #396]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d001      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e0b8      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d020      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a48:	4b59      	ldr	r3, [pc, #356]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4a58      	ldr	r2, [pc, #352]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a60:	4b53      	ldr	r3, [pc, #332]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	4a52      	ldr	r2, [pc, #328]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a6c:	4b50      	ldr	r3, [pc, #320]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	494d      	ldr	r1, [pc, #308]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d044      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d107      	bne.n	8006aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a92:	4b47      	ldr	r3, [pc, #284]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d119      	bne.n	8006ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e07f      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d003      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d107      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab2:	4b3f      	ldr	r3, [pc, #252]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e06f      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac2:	4b3b      	ldr	r3, [pc, #236]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e067      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ad2:	4b37      	ldr	r3, [pc, #220]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f023 0203 	bic.w	r2, r3, #3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4934      	ldr	r1, [pc, #208]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ae4:	f7fb fd5c 	bl	80025a0 <HAL_GetTick>
 8006ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aea:	e00a      	b.n	8006b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aec:	f7fb fd58 	bl	80025a0 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e04f      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b02:	4b2b      	ldr	r3, [pc, #172]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 020c 	and.w	r2, r3, #12
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d1eb      	bne.n	8006aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b14:	4b25      	ldr	r3, [pc, #148]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d20c      	bcs.n	8006b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b22:	4b22      	ldr	r3, [pc, #136]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2a:	4b20      	ldr	r3, [pc, #128]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e032      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b48:	4b19      	ldr	r3, [pc, #100]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	4916      	ldr	r1, [pc, #88]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b66:	4b12      	ldr	r3, [pc, #72]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	490e      	ldr	r1, [pc, #56]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b7a:	f000 f821 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	091b      	lsrs	r3, r3, #4
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	490a      	ldr	r1, [pc, #40]	; (8006bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b8c:	5ccb      	ldrb	r3, [r1, r3]
 8006b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b92:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b96:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <HAL_RCC_ClockConfig+0x1c8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fb fcbc 	bl	8002518 <HAL_InitTick>

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40023c00 	.word	0x40023c00
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	0801101c 	.word	0x0801101c
 8006bb8:	20000014 	.word	0x20000014
 8006bbc:	20000018 	.word	0x20000018

08006bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bc4:	b094      	sub	sp, #80	; 0x50
 8006bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	647b      	str	r3, [r7, #68]	; 0x44
 8006bcc:	2300      	movs	r3, #0
 8006bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bd8:	4b79      	ldr	r3, [pc, #484]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 030c 	and.w	r3, r3, #12
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d00d      	beq.n	8006c00 <HAL_RCC_GetSysClockFreq+0x40>
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	f200 80e1 	bhi.w	8006dac <HAL_RCC_GetSysClockFreq+0x1ec>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d003      	beq.n	8006bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8006bf2:	e0db      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bf4:	4b73      	ldr	r3, [pc, #460]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bf6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006bf8:	e0db      	b.n	8006db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bfa:	4b73      	ldr	r3, [pc, #460]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bfe:	e0d8      	b.n	8006db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c00:	4b6f      	ldr	r3, [pc, #444]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c0a:	4b6d      	ldr	r3, [pc, #436]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d063      	beq.n	8006cde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c16:	4b6a      	ldr	r3, [pc, #424]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	099b      	lsrs	r3, r3, #6
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c28:	633b      	str	r3, [r7, #48]	; 0x30
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c32:	4622      	mov	r2, r4
 8006c34:	462b      	mov	r3, r5
 8006c36:	f04f 0000 	mov.w	r0, #0
 8006c3a:	f04f 0100 	mov.w	r1, #0
 8006c3e:	0159      	lsls	r1, r3, #5
 8006c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c44:	0150      	lsls	r0, r2, #5
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	1a51      	subs	r1, r2, r1
 8006c4e:	6139      	str	r1, [r7, #16]
 8006c50:	4629      	mov	r1, r5
 8006c52:	eb63 0301 	sbc.w	r3, r3, r1
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c64:	4659      	mov	r1, fp
 8006c66:	018b      	lsls	r3, r1, #6
 8006c68:	4651      	mov	r1, sl
 8006c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c6e:	4651      	mov	r1, sl
 8006c70:	018a      	lsls	r2, r1, #6
 8006c72:	4651      	mov	r1, sl
 8006c74:	ebb2 0801 	subs.w	r8, r2, r1
 8006c78:	4659      	mov	r1, fp
 8006c7a:	eb63 0901 	sbc.w	r9, r3, r1
 8006c7e:	f04f 0200 	mov.w	r2, #0
 8006c82:	f04f 0300 	mov.w	r3, #0
 8006c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c92:	4690      	mov	r8, r2
 8006c94:	4699      	mov	r9, r3
 8006c96:	4623      	mov	r3, r4
 8006c98:	eb18 0303 	adds.w	r3, r8, r3
 8006c9c:	60bb      	str	r3, [r7, #8]
 8006c9e:	462b      	mov	r3, r5
 8006ca0:	eb49 0303 	adc.w	r3, r9, r3
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	024b      	lsls	r3, r1, #9
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	024a      	lsls	r2, r1, #9
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ccc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cd0:	f7f9 ffea 	bl	8000ca8 <__aeabi_uldivmod>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4613      	mov	r3, r2
 8006cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cdc:	e058      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cde:	4b38      	ldr	r3, [pc, #224]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	099b      	lsrs	r3, r3, #6
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	4611      	mov	r1, r2
 8006cea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cee:	623b      	str	r3, [r7, #32]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	f04f 0000 	mov.w	r0, #0
 8006d00:	f04f 0100 	mov.w	r1, #0
 8006d04:	0159      	lsls	r1, r3, #5
 8006d06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d0a:	0150      	lsls	r0, r2, #5
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4641      	mov	r1, r8
 8006d12:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d16:	4649      	mov	r1, r9
 8006d18:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d1c:	f04f 0200 	mov.w	r2, #0
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d30:	ebb2 040a 	subs.w	r4, r2, sl
 8006d34:	eb63 050b 	sbc.w	r5, r3, fp
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	f04f 0300 	mov.w	r3, #0
 8006d40:	00eb      	lsls	r3, r5, #3
 8006d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d46:	00e2      	lsls	r2, r4, #3
 8006d48:	4614      	mov	r4, r2
 8006d4a:	461d      	mov	r5, r3
 8006d4c:	4643      	mov	r3, r8
 8006d4e:	18e3      	adds	r3, r4, r3
 8006d50:	603b      	str	r3, [r7, #0]
 8006d52:	464b      	mov	r3, r9
 8006d54:	eb45 0303 	adc.w	r3, r5, r3
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d66:	4629      	mov	r1, r5
 8006d68:	028b      	lsls	r3, r1, #10
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d70:	4621      	mov	r1, r4
 8006d72:	028a      	lsls	r2, r1, #10
 8006d74:	4610      	mov	r0, r2
 8006d76:	4619      	mov	r1, r3
 8006d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	61fa      	str	r2, [r7, #28]
 8006d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d84:	f7f9 ff90 	bl	8000ca8 <__aeabi_uldivmod>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d90:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006da0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006daa:	e002      	b.n	8006db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3750      	adds	r7, #80	; 0x50
 8006db8:	46bd      	mov	sp, r7
 8006dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dbe:	bf00      	nop
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	00f42400 	.word	0x00f42400
 8006dc8:	007a1200 	.word	0x007a1200

08006dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dd0:	4b03      	ldr	r3, [pc, #12]	; (8006de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20000014 	.word	0x20000014

08006de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006de8:	f7ff fff0 	bl	8006dcc <HAL_RCC_GetHCLKFreq>
 8006dec:	4602      	mov	r2, r0
 8006dee:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	0a9b      	lsrs	r3, r3, #10
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	4903      	ldr	r1, [pc, #12]	; (8006e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dfa:	5ccb      	ldrb	r3, [r1, r3]
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40023800 	.word	0x40023800
 8006e08:	0801102c 	.word	0x0801102c

08006e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e10:	f7ff ffdc 	bl	8006dcc <HAL_RCC_GetHCLKFreq>
 8006e14:	4602      	mov	r2, r0
 8006e16:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	0b5b      	lsrs	r3, r3, #13
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	4903      	ldr	r1, [pc, #12]	; (8006e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e22:	5ccb      	ldrb	r3, [r1, r3]
 8006e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	0801102c 	.word	0x0801102c

08006e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e07b      	b.n	8006f3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d108      	bne.n	8006e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e56:	d009      	beq.n	8006e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	61da      	str	r2, [r3, #28]
 8006e5e:	e005      	b.n	8006e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fa fff4 	bl	8001e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006edc:	431a      	orrs	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef0:	ea42 0103 	orr.w	r1, r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	0c1b      	lsrs	r3, r3, #16
 8006f0a:	f003 0104 	and.w	r1, r3, #4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	f003 0210 	and.w	r2, r3, #16
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69da      	ldr	r2, [r3, #28]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e041      	b.n	8006fdc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7fa ffc9 	bl	8001f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3304      	adds	r3, #4
 8006f82:	4619      	mov	r1, r3
 8006f84:	4610      	mov	r0, r2
 8006f86:	f000 fad9 	bl	800753c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e041      	b.n	800707a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d106      	bne.n	8007010 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f839 	bl	8007082 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3304      	adds	r3, #4
 8007020:	4619      	mov	r1, r3
 8007022:	4610      	mov	r0, r2
 8007024:	f000 fa8a 	bl	800753c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007082:	b480      	push	{r7}
 8007084:	b083      	sub	sp, #12
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
	...

08007098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d109      	bne.n	80070bc <HAL_TIM_PWM_Start+0x24>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	bf14      	ite	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	2300      	moveq	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	e022      	b.n	8007102 <HAL_TIM_PWM_Start+0x6a>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d109      	bne.n	80070d6 <HAL_TIM_PWM_Start+0x3e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	bf14      	ite	ne
 80070ce:	2301      	movne	r3, #1
 80070d0:	2300      	moveq	r3, #0
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	e015      	b.n	8007102 <HAL_TIM_PWM_Start+0x6a>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d109      	bne.n	80070f0 <HAL_TIM_PWM_Start+0x58>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	bf14      	ite	ne
 80070e8:	2301      	movne	r3, #1
 80070ea:	2300      	moveq	r3, #0
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	e008      	b.n	8007102 <HAL_TIM_PWM_Start+0x6a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	bf14      	ite	ne
 80070fc:	2301      	movne	r3, #1
 80070fe:	2300      	moveq	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e07c      	b.n	8007204 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <HAL_TIM_PWM_Start+0x82>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007118:	e013      	b.n	8007142 <HAL_TIM_PWM_Start+0xaa>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b04      	cmp	r3, #4
 800711e:	d104      	bne.n	800712a <HAL_TIM_PWM_Start+0x92>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007128:	e00b      	b.n	8007142 <HAL_TIM_PWM_Start+0xaa>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b08      	cmp	r3, #8
 800712e:	d104      	bne.n	800713a <HAL_TIM_PWM_Start+0xa2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007138:	e003      	b.n	8007142 <HAL_TIM_PWM_Start+0xaa>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2202      	movs	r2, #2
 800713e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2201      	movs	r2, #1
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fcec 	bl	8007b28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a2d      	ldr	r2, [pc, #180]	; (800720c <HAL_TIM_PWM_Start+0x174>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_TIM_PWM_Start+0xcc>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2c      	ldr	r2, [pc, #176]	; (8007210 <HAL_TIM_PWM_Start+0x178>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d101      	bne.n	8007168 <HAL_TIM_PWM_Start+0xd0>
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <HAL_TIM_PWM_Start+0xd2>
 8007168:	2300      	movs	r3, #0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d007      	beq.n	800717e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800717c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a22      	ldr	r2, [pc, #136]	; (800720c <HAL_TIM_PWM_Start+0x174>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d022      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007190:	d01d      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a1f      	ldr	r2, [pc, #124]	; (8007214 <HAL_TIM_PWM_Start+0x17c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d018      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a1d      	ldr	r2, [pc, #116]	; (8007218 <HAL_TIM_PWM_Start+0x180>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a1c      	ldr	r2, [pc, #112]	; (800721c <HAL_TIM_PWM_Start+0x184>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00e      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a16      	ldr	r2, [pc, #88]	; (8007210 <HAL_TIM_PWM_Start+0x178>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d009      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a18      	ldr	r2, [pc, #96]	; (8007220 <HAL_TIM_PWM_Start+0x188>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d004      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a16      	ldr	r2, [pc, #88]	; (8007224 <HAL_TIM_PWM_Start+0x18c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d111      	bne.n	80071f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b06      	cmp	r3, #6
 80071de:	d010      	beq.n	8007202 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f0:	e007      	b.n	8007202 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0201 	orr.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40010000 	.word	0x40010000
 8007210:	40010400 	.word	0x40010400
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40000c00 	.word	0x40000c00
 8007220:	40014000 	.word	0x40014000
 8007224:	40001800 	.word	0x40001800

08007228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007242:	2302      	movs	r3, #2
 8007244:	e0ae      	b.n	80073a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b0c      	cmp	r3, #12
 8007252:	f200 809f 	bhi.w	8007394 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007256:	a201      	add	r2, pc, #4	; (adr r2, 800725c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	08007291 	.word	0x08007291
 8007260:	08007395 	.word	0x08007395
 8007264:	08007395 	.word	0x08007395
 8007268:	08007395 	.word	0x08007395
 800726c:	080072d1 	.word	0x080072d1
 8007270:	08007395 	.word	0x08007395
 8007274:	08007395 	.word	0x08007395
 8007278:	08007395 	.word	0x08007395
 800727c:	08007313 	.word	0x08007313
 8007280:	08007395 	.word	0x08007395
 8007284:	08007395 	.word	0x08007395
 8007288:	08007395 	.word	0x08007395
 800728c:	08007353 	.word	0x08007353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 f9fc 	bl	8007694 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0208 	orr.w	r2, r2, #8
 80072aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0204 	bic.w	r2, r2, #4
 80072ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6999      	ldr	r1, [r3, #24]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	619a      	str	r2, [r3, #24]
      break;
 80072ce:	e064      	b.n	800739a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fa4c 	bl	8007774 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6999      	ldr	r1, [r3, #24]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	021a      	lsls	r2, r3, #8
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	619a      	str	r2, [r3, #24]
      break;
 8007310:	e043      	b.n	800739a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	4618      	mov	r0, r3
 800731a:	f000 faa1 	bl	8007860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0208 	orr.w	r2, r2, #8
 800732c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0204 	bic.w	r2, r2, #4
 800733c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69d9      	ldr	r1, [r3, #28]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	61da      	str	r2, [r3, #28]
      break;
 8007350:	e023      	b.n	800739a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	4618      	mov	r0, r3
 800735a:	f000 faf5 	bl	8007948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69da      	ldr	r2, [r3, #28]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69d9      	ldr	r1, [r3, #28]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	021a      	lsls	r2, r3, #8
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	61da      	str	r2, [r3, #28]
      break;
 8007392:	e002      	b.n	800739a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	75fb      	strb	r3, [r7, #23]
      break;
 8007398:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d101      	bne.n	80073c8 <HAL_TIM_ConfigClockSource+0x1c>
 80073c4:	2302      	movs	r3, #2
 80073c6:	e0b4      	b.n	8007532 <HAL_TIM_ConfigClockSource+0x186>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007400:	d03e      	beq.n	8007480 <HAL_TIM_ConfigClockSource+0xd4>
 8007402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007406:	f200 8087 	bhi.w	8007518 <HAL_TIM_ConfigClockSource+0x16c>
 800740a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800740e:	f000 8086 	beq.w	800751e <HAL_TIM_ConfigClockSource+0x172>
 8007412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007416:	d87f      	bhi.n	8007518 <HAL_TIM_ConfigClockSource+0x16c>
 8007418:	2b70      	cmp	r3, #112	; 0x70
 800741a:	d01a      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0xa6>
 800741c:	2b70      	cmp	r3, #112	; 0x70
 800741e:	d87b      	bhi.n	8007518 <HAL_TIM_ConfigClockSource+0x16c>
 8007420:	2b60      	cmp	r3, #96	; 0x60
 8007422:	d050      	beq.n	80074c6 <HAL_TIM_ConfigClockSource+0x11a>
 8007424:	2b60      	cmp	r3, #96	; 0x60
 8007426:	d877      	bhi.n	8007518 <HAL_TIM_ConfigClockSource+0x16c>
 8007428:	2b50      	cmp	r3, #80	; 0x50
 800742a:	d03c      	beq.n	80074a6 <HAL_TIM_ConfigClockSource+0xfa>
 800742c:	2b50      	cmp	r3, #80	; 0x50
 800742e:	d873      	bhi.n	8007518 <HAL_TIM_ConfigClockSource+0x16c>
 8007430:	2b40      	cmp	r3, #64	; 0x40
 8007432:	d058      	beq.n	80074e6 <HAL_TIM_ConfigClockSource+0x13a>
 8007434:	2b40      	cmp	r3, #64	; 0x40
 8007436:	d86f      	bhi.n	8007518 <HAL_TIM_ConfigClockSource+0x16c>
 8007438:	2b30      	cmp	r3, #48	; 0x30
 800743a:	d064      	beq.n	8007506 <HAL_TIM_ConfigClockSource+0x15a>
 800743c:	2b30      	cmp	r3, #48	; 0x30
 800743e:	d86b      	bhi.n	8007518 <HAL_TIM_ConfigClockSource+0x16c>
 8007440:	2b20      	cmp	r3, #32
 8007442:	d060      	beq.n	8007506 <HAL_TIM_ConfigClockSource+0x15a>
 8007444:	2b20      	cmp	r3, #32
 8007446:	d867      	bhi.n	8007518 <HAL_TIM_ConfigClockSource+0x16c>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d05c      	beq.n	8007506 <HAL_TIM_ConfigClockSource+0x15a>
 800744c:	2b10      	cmp	r3, #16
 800744e:	d05a      	beq.n	8007506 <HAL_TIM_ConfigClockSource+0x15a>
 8007450:	e062      	b.n	8007518 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007462:	f000 fb41 	bl	8007ae8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	609a      	str	r2, [r3, #8]
      break;
 800747e:	e04f      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007490:	f000 fb2a 	bl	8007ae8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074a2:	609a      	str	r2, [r3, #8]
      break;
 80074a4:	e03c      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b2:	461a      	mov	r2, r3
 80074b4:	f000 fa9e 	bl	80079f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2150      	movs	r1, #80	; 0x50
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 faf7 	bl	8007ab2 <TIM_ITRx_SetConfig>
      break;
 80074c4:	e02c      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074d2:	461a      	mov	r2, r3
 80074d4:	f000 fabd 	bl	8007a52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2160      	movs	r1, #96	; 0x60
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fae7 	bl	8007ab2 <TIM_ITRx_SetConfig>
      break;
 80074e4:	e01c      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074f2:	461a      	mov	r2, r3
 80074f4:	f000 fa7e 	bl	80079f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2140      	movs	r1, #64	; 0x40
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fad7 	bl	8007ab2 <TIM_ITRx_SetConfig>
      break;
 8007504:	e00c      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4619      	mov	r1, r3
 8007510:	4610      	mov	r0, r2
 8007512:	f000 face 	bl	8007ab2 <TIM_ITRx_SetConfig>
      break;
 8007516:	e003      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	73fb      	strb	r3, [r7, #15]
      break;
 800751c:	e000      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800751e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007530:	7bfb      	ldrb	r3, [r7, #15]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a46      	ldr	r2, [pc, #280]	; (8007668 <TIM_Base_SetConfig+0x12c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d013      	beq.n	800757c <TIM_Base_SetConfig+0x40>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755a:	d00f      	beq.n	800757c <TIM_Base_SetConfig+0x40>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a43      	ldr	r2, [pc, #268]	; (800766c <TIM_Base_SetConfig+0x130>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00b      	beq.n	800757c <TIM_Base_SetConfig+0x40>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a42      	ldr	r2, [pc, #264]	; (8007670 <TIM_Base_SetConfig+0x134>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d007      	beq.n	800757c <TIM_Base_SetConfig+0x40>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a41      	ldr	r2, [pc, #260]	; (8007674 <TIM_Base_SetConfig+0x138>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d003      	beq.n	800757c <TIM_Base_SetConfig+0x40>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a40      	ldr	r2, [pc, #256]	; (8007678 <TIM_Base_SetConfig+0x13c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d108      	bne.n	800758e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a35      	ldr	r2, [pc, #212]	; (8007668 <TIM_Base_SetConfig+0x12c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d02b      	beq.n	80075ee <TIM_Base_SetConfig+0xb2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759c:	d027      	beq.n	80075ee <TIM_Base_SetConfig+0xb2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a32      	ldr	r2, [pc, #200]	; (800766c <TIM_Base_SetConfig+0x130>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d023      	beq.n	80075ee <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a31      	ldr	r2, [pc, #196]	; (8007670 <TIM_Base_SetConfig+0x134>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d01f      	beq.n	80075ee <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a30      	ldr	r2, [pc, #192]	; (8007674 <TIM_Base_SetConfig+0x138>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d01b      	beq.n	80075ee <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a2f      	ldr	r2, [pc, #188]	; (8007678 <TIM_Base_SetConfig+0x13c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d017      	beq.n	80075ee <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a2e      	ldr	r2, [pc, #184]	; (800767c <TIM_Base_SetConfig+0x140>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d013      	beq.n	80075ee <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a2d      	ldr	r2, [pc, #180]	; (8007680 <TIM_Base_SetConfig+0x144>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d00f      	beq.n	80075ee <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a2c      	ldr	r2, [pc, #176]	; (8007684 <TIM_Base_SetConfig+0x148>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00b      	beq.n	80075ee <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a2b      	ldr	r2, [pc, #172]	; (8007688 <TIM_Base_SetConfig+0x14c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d007      	beq.n	80075ee <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a2a      	ldr	r2, [pc, #168]	; (800768c <TIM_Base_SetConfig+0x150>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d003      	beq.n	80075ee <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a29      	ldr	r2, [pc, #164]	; (8007690 <TIM_Base_SetConfig+0x154>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d108      	bne.n	8007600 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a10      	ldr	r2, [pc, #64]	; (8007668 <TIM_Base_SetConfig+0x12c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_Base_SetConfig+0xf8>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a12      	ldr	r2, [pc, #72]	; (8007678 <TIM_Base_SetConfig+0x13c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d103      	bne.n	800763c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b01      	cmp	r3, #1
 800764c:	d105      	bne.n	800765a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f023 0201 	bic.w	r2, r3, #1
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	611a      	str	r2, [r3, #16]
  }
}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40010000 	.word	0x40010000
 800766c:	40000400 	.word	0x40000400
 8007670:	40000800 	.word	0x40000800
 8007674:	40000c00 	.word	0x40000c00
 8007678:	40010400 	.word	0x40010400
 800767c:	40014000 	.word	0x40014000
 8007680:	40014400 	.word	0x40014400
 8007684:	40014800 	.word	0x40014800
 8007688:	40001800 	.word	0x40001800
 800768c:	40001c00 	.word	0x40001c00
 8007690:	40002000 	.word	0x40002000

08007694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	f023 0201 	bic.w	r2, r3, #1
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0303 	bic.w	r3, r3, #3
 80076ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f023 0302 	bic.w	r3, r3, #2
 80076dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a20      	ldr	r2, [pc, #128]	; (800776c <TIM_OC1_SetConfig+0xd8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d003      	beq.n	80076f8 <TIM_OC1_SetConfig+0x64>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a1f      	ldr	r2, [pc, #124]	; (8007770 <TIM_OC1_SetConfig+0xdc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d10c      	bne.n	8007712 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f023 0308 	bic.w	r3, r3, #8
 80076fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f023 0304 	bic.w	r3, r3, #4
 8007710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a15      	ldr	r2, [pc, #84]	; (800776c <TIM_OC1_SetConfig+0xd8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d003      	beq.n	8007722 <TIM_OC1_SetConfig+0x8e>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a14      	ldr	r2, [pc, #80]	; (8007770 <TIM_OC1_SetConfig+0xdc>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d111      	bne.n	8007746 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	4313      	orrs	r3, r2
 800773a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	621a      	str	r2, [r3, #32]
}
 8007760:	bf00      	nop
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	40010000 	.word	0x40010000
 8007770:	40010400 	.word	0x40010400

08007774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	f023 0210 	bic.w	r2, r3, #16
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f023 0320 	bic.w	r3, r3, #32
 80077be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a22      	ldr	r2, [pc, #136]	; (8007858 <TIM_OC2_SetConfig+0xe4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <TIM_OC2_SetConfig+0x68>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a21      	ldr	r2, [pc, #132]	; (800785c <TIM_OC2_SetConfig+0xe8>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d10d      	bne.n	80077f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a17      	ldr	r2, [pc, #92]	; (8007858 <TIM_OC2_SetConfig+0xe4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d003      	beq.n	8007808 <TIM_OC2_SetConfig+0x94>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a16      	ldr	r2, [pc, #88]	; (800785c <TIM_OC2_SetConfig+0xe8>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d113      	bne.n	8007830 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800780e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	4313      	orrs	r3, r2
 800782e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	621a      	str	r2, [r3, #32]
}
 800784a:	bf00      	nop
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	40010000 	.word	0x40010000
 800785c:	40010400 	.word	0x40010400

08007860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0303 	bic.w	r3, r3, #3
 8007896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a21      	ldr	r2, [pc, #132]	; (8007940 <TIM_OC3_SetConfig+0xe0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d003      	beq.n	80078c6 <TIM_OC3_SetConfig+0x66>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a20      	ldr	r2, [pc, #128]	; (8007944 <TIM_OC3_SetConfig+0xe4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d10d      	bne.n	80078e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	021b      	lsls	r3, r3, #8
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a16      	ldr	r2, [pc, #88]	; (8007940 <TIM_OC3_SetConfig+0xe0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d003      	beq.n	80078f2 <TIM_OC3_SetConfig+0x92>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a15      	ldr	r2, [pc, #84]	; (8007944 <TIM_OC3_SetConfig+0xe4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d113      	bne.n	800791a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	621a      	str	r2, [r3, #32]
}
 8007934:	bf00      	nop
 8007936:	371c      	adds	r7, #28
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	40010000 	.word	0x40010000
 8007944:	40010400 	.word	0x40010400

08007948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	4313      	orrs	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	031b      	lsls	r3, r3, #12
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a12      	ldr	r2, [pc, #72]	; (80079ec <TIM_OC4_SetConfig+0xa4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d003      	beq.n	80079b0 <TIM_OC4_SetConfig+0x68>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a11      	ldr	r2, [pc, #68]	; (80079f0 <TIM_OC4_SetConfig+0xa8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d109      	bne.n	80079c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	019b      	lsls	r3, r3, #6
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	621a      	str	r2, [r3, #32]
}
 80079de:	bf00      	nop
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40010000 	.word	0x40010000
 80079f0:	40010400 	.word	0x40010400

080079f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	f023 0201 	bic.w	r2, r3, #1
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f023 030a 	bic.w	r3, r3, #10
 8007a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	621a      	str	r2, [r3, #32]
}
 8007a46:	bf00      	nop
 8007a48:	371c      	adds	r7, #28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b087      	sub	sp, #28
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	f023 0210 	bic.w	r2, r3, #16
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	031b      	lsls	r3, r3, #12
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	621a      	str	r2, [r3, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b085      	sub	sp, #20
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f043 0307 	orr.w	r3, r3, #7
 8007ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	609a      	str	r2, [r3, #8]
}
 8007adc:	bf00      	nop
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	021a      	lsls	r2, r3, #8
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	609a      	str	r2, [r3, #8]
}
 8007b1c:	bf00      	nop
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 031f 	and.w	r3, r3, #31
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a1a      	ldr	r2, [r3, #32]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	43db      	mvns	r3, r3
 8007b4a:	401a      	ands	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1a      	ldr	r2, [r3, #32]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b60:	431a      	orrs	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	621a      	str	r2, [r3, #32]
}
 8007b66:	bf00      	nop
 8007b68:	371c      	adds	r7, #28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d101      	bne.n	8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e05a      	b.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a21      	ldr	r2, [pc, #132]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d022      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd8:	d01d      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a1d      	ldr	r2, [pc, #116]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d018      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1b      	ldr	r2, [pc, #108]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d013      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a1a      	ldr	r2, [pc, #104]	; (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00e      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a18      	ldr	r2, [pc, #96]	; (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d009      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a17      	ldr	r2, [pc, #92]	; (8007c64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d004      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a15      	ldr	r2, [pc, #84]	; (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d10c      	bne.n	8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40000400 	.word	0x40000400
 8007c58:	40000800 	.word	0x40000800
 8007c5c:	40000c00 	.word	0x40000c00
 8007c60:	40010400 	.word	0x40010400
 8007c64:	40014000 	.word	0x40014000
 8007c68:	40001800 	.word	0x40001800

08007c6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d101      	bne.n	8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c84:	2302      	movs	r3, #2
 8007c86:	e03d      	b.n	8007d04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e042      	b.n	8007da8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d106      	bne.n	8007d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7fa f940 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2224      	movs	r2, #36	; 0x24
 8007d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68da      	ldr	r2, [r3, #12]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fdbd 	bl	80088d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	691a      	ldr	r2, [r3, #16]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	695a      	ldr	r2, [r3, #20]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08a      	sub	sp, #40	; 0x28
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d175      	bne.n	8007ebc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <HAL_UART_Transmit+0x2c>
 8007dd6:	88fb      	ldrh	r3, [r7, #6]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e06e      	b.n	8007ebe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2221      	movs	r2, #33	; 0x21
 8007dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dee:	f7fa fbd7 	bl	80025a0 <HAL_GetTick>
 8007df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	88fa      	ldrh	r2, [r7, #6]
 8007df8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	88fa      	ldrh	r2, [r7, #6]
 8007dfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e08:	d108      	bne.n	8007e1c <HAL_UART_Transmit+0x6c>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d104      	bne.n	8007e1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	61bb      	str	r3, [r7, #24]
 8007e1a:	e003      	b.n	8007e24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e24:	e02e      	b.n	8007e84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2180      	movs	r1, #128	; 0x80
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 fb1f 	bl	8008474 <UART_WaitOnFlagUntilTimeout>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e03a      	b.n	8007ebe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10b      	bne.n	8007e66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	3302      	adds	r3, #2
 8007e62:	61bb      	str	r3, [r7, #24]
 8007e64:	e007      	b.n	8007e76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	781a      	ldrb	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	3301      	adds	r3, #1
 8007e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1cb      	bne.n	8007e26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2200      	movs	r2, #0
 8007e96:	2140      	movs	r1, #64	; 0x40
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 faeb 	bl	8008474 <UART_WaitOnFlagUntilTimeout>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d005      	beq.n	8007eb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e006      	b.n	8007ebe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e000      	b.n	8007ebe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007ebc:	2302      	movs	r3, #2
  }
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3720      	adds	r7, #32
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d112      	bne.n	8007f06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <HAL_UART_Receive_IT+0x26>
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e00b      	b.n	8007f08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fb12 	bl	8008526 <UART_Start_Receive_IT>
 8007f02:	4603      	mov	r3, r0
 8007f04:	e000      	b.n	8007f08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007f06:	2302      	movs	r3, #2
  }
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b0ba      	sub	sp, #232	; 0xe8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10f      	bne.n	8007f76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d009      	beq.n	8007f76 <HAL_UART_IRQHandler+0x66>
 8007f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f66:	f003 0320 	and.w	r3, r3, #32
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fbf2 	bl	8008758 <UART_Receive_IT>
      return;
 8007f74:	e25b      	b.n	800842e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 80de 	beq.w	800813c <HAL_UART_IRQHandler+0x22c>
 8007f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d106      	bne.n	8007f9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 80d1 	beq.w	800813c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00b      	beq.n	8007fbe <HAL_UART_IRQHandler+0xae>
 8007fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d005      	beq.n	8007fbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb6:	f043 0201 	orr.w	r2, r3, #1
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc2:	f003 0304 	and.w	r3, r3, #4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00b      	beq.n	8007fe2 <HAL_UART_IRQHandler+0xd2>
 8007fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d005      	beq.n	8007fe2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fda:	f043 0202 	orr.w	r2, r3, #2
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <HAL_UART_IRQHandler+0xf6>
 8007fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffe:	f043 0204 	orr.w	r2, r3, #4
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800a:	f003 0308 	and.w	r3, r3, #8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d011      	beq.n	8008036 <HAL_UART_IRQHandler+0x126>
 8008012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b00      	cmp	r3, #0
 800801c:	d105      	bne.n	800802a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800801e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802e:	f043 0208 	orr.w	r2, r3, #8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 81f2 	beq.w	8008424 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008044:	f003 0320 	and.w	r3, r3, #32
 8008048:	2b00      	cmp	r3, #0
 800804a:	d008      	beq.n	800805e <HAL_UART_IRQHandler+0x14e>
 800804c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fb7d 	bl	8008758 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008068:	2b40      	cmp	r3, #64	; 0x40
 800806a:	bf0c      	ite	eq
 800806c:	2301      	moveq	r3, #1
 800806e:	2300      	movne	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d103      	bne.n	800808a <HAL_UART_IRQHandler+0x17a>
 8008082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008086:	2b00      	cmp	r3, #0
 8008088:	d04f      	beq.n	800812a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa85 	bl	800859a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	d141      	bne.n	8008122 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3314      	adds	r3, #20
 80080a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3314      	adds	r3, #20
 80080c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1d9      	bne.n	800809e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d013      	beq.n	800811a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f6:	4a7e      	ldr	r2, [pc, #504]	; (80082f0 <HAL_UART_IRQHandler+0x3e0>)
 80080f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fa fcae 	bl	8002a60 <HAL_DMA_Abort_IT>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d016      	beq.n	8008138 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008114:	4610      	mov	r0, r2
 8008116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008118:	e00e      	b.n	8008138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f994 	bl	8008448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008120:	e00a      	b.n	8008138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f990 	bl	8008448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008128:	e006      	b.n	8008138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f98c 	bl	8008448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008136:	e175      	b.n	8008424 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008138:	bf00      	nop
    return;
 800813a:	e173      	b.n	8008424 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008140:	2b01      	cmp	r3, #1
 8008142:	f040 814f 	bne.w	80083e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814a:	f003 0310 	and.w	r3, r3, #16
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 8148 	beq.w	80083e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 8141 	beq.w	80083e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008162:	2300      	movs	r3, #0
 8008164:	60bb      	str	r3, [r7, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60bb      	str	r3, [r7, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	f040 80b6 	bne.w	80082f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 8145 	beq.w	8008428 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081a6:	429a      	cmp	r2, r3
 80081a8:	f080 813e 	bcs.w	8008428 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081be:	f000 8088 	beq.w	80082d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	330c      	adds	r3, #12
 80081ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80081ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80081fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1d9      	bne.n	80081c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3314      	adds	r3, #20
 8008214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800821e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008220:	f023 0301 	bic.w	r3, r3, #1
 8008224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3314      	adds	r3, #20
 800822e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008232:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008236:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800823a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e1      	bne.n	800820e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3314      	adds	r3, #20
 8008250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800825a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800825c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3314      	adds	r3, #20
 800826a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800826e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008270:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800827c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e3      	bne.n	800824a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2220      	movs	r2, #32
 8008286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	330c      	adds	r3, #12
 8008296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082a2:	f023 0310 	bic.w	r3, r3, #16
 80082a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	330c      	adds	r3, #12
 80082b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80082b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80082b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e3      	bne.n	8008290 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fa fb57 	bl	8002980 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2202      	movs	r2, #2
 80082d6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f8b7 	bl	800845c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082ee:	e09b      	b.n	8008428 <HAL_UART_IRQHandler+0x518>
 80082f0:	08008661 	.word	0x08008661
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 808e 	beq.w	800842c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 8089 	beq.w	800842c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	330c      	adds	r3, #12
 8008320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	330c      	adds	r3, #12
 800833a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800833e:	647a      	str	r2, [r7, #68]	; 0x44
 8008340:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e3      	bne.n	800831a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3314      	adds	r3, #20
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	623b      	str	r3, [r7, #32]
   return(result);
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	f023 0301 	bic.w	r3, r3, #1
 8008368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3314      	adds	r3, #20
 8008372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008376:	633a      	str	r2, [r7, #48]	; 0x30
 8008378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800837c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e3      	bne.n	8008352 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	330c      	adds	r3, #12
 800839e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	e853 3f00 	ldrex	r3, [r3]
 80083a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 0310 	bic.w	r3, r3, #16
 80083ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	330c      	adds	r3, #12
 80083b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80083bc:	61fa      	str	r2, [r7, #28]
 80083be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	69b9      	ldr	r1, [r7, #24]
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	617b      	str	r3, [r7, #20]
   return(result);
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e3      	bne.n	8008398 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f83d 	bl	800845c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083e2:	e023      	b.n	800842c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80083e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d009      	beq.n	8008404 <HAL_UART_IRQHandler+0x4f4>
 80083f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f943 	bl	8008688 <UART_Transmit_IT>
    return;
 8008402:	e014      	b.n	800842e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <HAL_UART_IRQHandler+0x51e>
 8008410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d008      	beq.n	800842e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f983 	bl	8008728 <UART_EndTransmit_IT>
    return;
 8008422:	e004      	b.n	800842e <HAL_UART_IRQHandler+0x51e>
    return;
 8008424:	bf00      	nop
 8008426:	e002      	b.n	800842e <HAL_UART_IRQHandler+0x51e>
      return;
 8008428:	bf00      	nop
 800842a:	e000      	b.n	800842e <HAL_UART_IRQHandler+0x51e>
      return;
 800842c:	bf00      	nop
  }
}
 800842e:	37e8      	adds	r7, #232	; 0xe8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	460b      	mov	r3, r1
 8008466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	603b      	str	r3, [r7, #0]
 8008480:	4613      	mov	r3, r2
 8008482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008484:	e03b      	b.n	80084fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848c:	d037      	beq.n	80084fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800848e:	f7fa f887 	bl	80025a0 <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	6a3a      	ldr	r2, [r7, #32]
 800849a:	429a      	cmp	r2, r3
 800849c:	d302      	bcc.n	80084a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e03a      	b.n	800851e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d023      	beq.n	80084fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b80      	cmp	r3, #128	; 0x80
 80084ba:	d020      	beq.n	80084fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2b40      	cmp	r3, #64	; 0x40
 80084c0:	d01d      	beq.n	80084fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0308 	and.w	r3, r3, #8
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d116      	bne.n	80084fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80084d0:	2300      	movs	r3, #0
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 f857 	bl	800859a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2208      	movs	r2, #8
 80084f0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e00f      	b.n	800851e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	4013      	ands	r3, r2
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	429a      	cmp	r2, r3
 800850c:	bf0c      	ite	eq
 800850e:	2301      	moveq	r3, #1
 8008510:	2300      	movne	r3, #0
 8008512:	b2db      	uxtb	r3, r3
 8008514:	461a      	mov	r2, r3
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	429a      	cmp	r2, r3
 800851a:	d0b4      	beq.n	8008486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008526:	b480      	push	{r7}
 8008528:	b085      	sub	sp, #20
 800852a:	af00      	add	r7, sp, #0
 800852c:	60f8      	str	r0, [r7, #12]
 800852e:	60b9      	str	r1, [r7, #8]
 8008530:	4613      	mov	r3, r2
 8008532:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	88fa      	ldrh	r2, [r7, #6]
 800853e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	88fa      	ldrh	r2, [r7, #6]
 8008544:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2222      	movs	r2, #34	; 0x22
 8008550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d007      	beq.n	800856c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800856a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695a      	ldr	r2, [r3, #20]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0201 	orr.w	r2, r2, #1
 800857a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0220 	orr.w	r2, r2, #32
 800858a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800859a:	b480      	push	{r7}
 800859c:	b095      	sub	sp, #84	; 0x54
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	330c      	adds	r3, #12
 80085a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	330c      	adds	r3, #12
 80085c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085c2:	643a      	str	r2, [r7, #64]	; 0x40
 80085c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e5      	bne.n	80085a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3314      	adds	r3, #20
 80085dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f023 0301 	bic.w	r3, r3, #1
 80085ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3314      	adds	r3, #20
 80085f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e5      	bne.n	80085d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860e:	2b01      	cmp	r3, #1
 8008610:	d119      	bne.n	8008646 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	330c      	adds	r3, #12
 8008618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	60bb      	str	r3, [r7, #8]
   return(result);
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	f023 0310 	bic.w	r3, r3, #16
 8008628:	647b      	str	r3, [r7, #68]	; 0x44
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	330c      	adds	r3, #12
 8008630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008632:	61ba      	str	r2, [r7, #24]
 8008634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6979      	ldr	r1, [r7, #20]
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	613b      	str	r3, [r7, #16]
   return(result);
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e5      	bne.n	8008612 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008654:	bf00      	nop
 8008656:	3754      	adds	r7, #84	; 0x54
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f7ff fee4 	bl	8008448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008680:	bf00      	nop
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b21      	cmp	r3, #33	; 0x21
 800869a:	d13e      	bne.n	800871a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a4:	d114      	bne.n	80086d0 <UART_Transmit_IT+0x48>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d110      	bne.n	80086d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	461a      	mov	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	1c9a      	adds	r2, r3, #2
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	621a      	str	r2, [r3, #32]
 80086ce:	e008      	b.n	80086e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	1c59      	adds	r1, r3, #1
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6211      	str	r1, [r2, #32]
 80086da:	781a      	ldrb	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	4619      	mov	r1, r3
 80086f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10f      	bne.n	8008716 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008704:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008714:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	e000      	b.n	800871c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800871a:	2302      	movs	r3, #2
  }
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800873e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fe73 	bl	8008434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08c      	sub	sp, #48	; 0x30
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b22      	cmp	r3, #34	; 0x22
 800876a:	f040 80ae 	bne.w	80088ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008776:	d117      	bne.n	80087a8 <UART_Receive_IT+0x50>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d113      	bne.n	80087a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008780:	2300      	movs	r3, #0
 8008782:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	b29b      	uxth	r3, r3
 8008792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008796:	b29a      	uxth	r2, r3
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a0:	1c9a      	adds	r2, r3, #2
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	629a      	str	r2, [r3, #40]	; 0x28
 80087a6:	e026      	b.n	80087f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80087ae:	2300      	movs	r3, #0
 80087b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ba:	d007      	beq.n	80087cc <UART_Receive_IT+0x74>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <UART_Receive_IT+0x82>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d106      	bne.n	80087da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	701a      	strb	r2, [r3, #0]
 80087d8:	e008      	b.n	80087ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	3b01      	subs	r3, #1
 80087fe:	b29b      	uxth	r3, r3
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	4619      	mov	r1, r3
 8008804:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008806:	2b00      	cmp	r3, #0
 8008808:	d15d      	bne.n	80088c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0220 	bic.w	r2, r2, #32
 8008818:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008828:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	695a      	ldr	r2, [r3, #20]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0201 	bic.w	r2, r2, #1
 8008838:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884c:	2b01      	cmp	r3, #1
 800884e:	d135      	bne.n	80088bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	330c      	adds	r3, #12
 800885c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	613b      	str	r3, [r7, #16]
   return(result);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f023 0310 	bic.w	r3, r3, #16
 800886c:	627b      	str	r3, [r7, #36]	; 0x24
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	330c      	adds	r3, #12
 8008874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008876:	623a      	str	r2, [r7, #32]
 8008878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887a:	69f9      	ldr	r1, [r7, #28]
 800887c:	6a3a      	ldr	r2, [r7, #32]
 800887e:	e841 2300 	strex	r3, r2, [r1]
 8008882:	61bb      	str	r3, [r7, #24]
   return(result);
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1e5      	bne.n	8008856 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	2b10      	cmp	r3, #16
 8008896:	d10a      	bne.n	80088ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008898:	2300      	movs	r3, #0
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff fdd1 	bl	800845c <HAL_UARTEx_RxEventCallback>
 80088ba:	e002      	b.n	80088c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7f8 fba7 	bl	8001010 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	e002      	b.n	80088cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	e000      	b.n	80088cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80088ca:	2302      	movs	r3, #2
  }
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3730      	adds	r7, #48	; 0x30
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088d8:	b0c0      	sub	sp, #256	; 0x100
 80088da:	af00      	add	r7, sp, #0
 80088dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80088ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f0:	68d9      	ldr	r1, [r3, #12]
 80088f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	ea40 0301 	orr.w	r3, r0, r1
 80088fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	431a      	orrs	r2, r3
 800890c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	431a      	orrs	r2, r3
 8008914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	4313      	orrs	r3, r2
 800891c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800892c:	f021 010c 	bic.w	r1, r1, #12
 8008930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800893a:	430b      	orrs	r3, r1
 800893c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800893e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800894a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800894e:	6999      	ldr	r1, [r3, #24]
 8008950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	ea40 0301 	orr.w	r3, r0, r1
 800895a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800895c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4b8f      	ldr	r3, [pc, #572]	; (8008ba0 <UART_SetConfig+0x2cc>)
 8008964:	429a      	cmp	r2, r3
 8008966:	d005      	beq.n	8008974 <UART_SetConfig+0xa0>
 8008968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	4b8d      	ldr	r3, [pc, #564]	; (8008ba4 <UART_SetConfig+0x2d0>)
 8008970:	429a      	cmp	r2, r3
 8008972:	d104      	bne.n	800897e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008974:	f7fe fa4a 	bl	8006e0c <HAL_RCC_GetPCLK2Freq>
 8008978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800897c:	e003      	b.n	8008986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800897e:	f7fe fa31 	bl	8006de4 <HAL_RCC_GetPCLK1Freq>
 8008982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008990:	f040 810c 	bne.w	8008bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008998:	2200      	movs	r2, #0
 800899a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800899e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80089a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80089a6:	4622      	mov	r2, r4
 80089a8:	462b      	mov	r3, r5
 80089aa:	1891      	adds	r1, r2, r2
 80089ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80089ae:	415b      	adcs	r3, r3
 80089b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80089b6:	4621      	mov	r1, r4
 80089b8:	eb12 0801 	adds.w	r8, r2, r1
 80089bc:	4629      	mov	r1, r5
 80089be:	eb43 0901 	adc.w	r9, r3, r1
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	f04f 0300 	mov.w	r3, #0
 80089ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089d6:	4690      	mov	r8, r2
 80089d8:	4699      	mov	r9, r3
 80089da:	4623      	mov	r3, r4
 80089dc:	eb18 0303 	adds.w	r3, r8, r3
 80089e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80089e4:	462b      	mov	r3, r5
 80089e6:	eb49 0303 	adc.w	r3, r9, r3
 80089ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80089fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a02:	460b      	mov	r3, r1
 8008a04:	18db      	adds	r3, r3, r3
 8008a06:	653b      	str	r3, [r7, #80]	; 0x50
 8008a08:	4613      	mov	r3, r2
 8008a0a:	eb42 0303 	adc.w	r3, r2, r3
 8008a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8008a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a18:	f7f8 f946 	bl	8000ca8 <__aeabi_uldivmod>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4b61      	ldr	r3, [pc, #388]	; (8008ba8 <UART_SetConfig+0x2d4>)
 8008a22:	fba3 2302 	umull	r2, r3, r3, r2
 8008a26:	095b      	lsrs	r3, r3, #5
 8008a28:	011c      	lsls	r4, r3, #4
 8008a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008a3c:	4642      	mov	r2, r8
 8008a3e:	464b      	mov	r3, r9
 8008a40:	1891      	adds	r1, r2, r2
 8008a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8008a44:	415b      	adcs	r3, r3
 8008a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a4c:	4641      	mov	r1, r8
 8008a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8008a52:	4649      	mov	r1, r9
 8008a54:	eb43 0b01 	adc.w	fp, r3, r1
 8008a58:	f04f 0200 	mov.w	r2, #0
 8008a5c:	f04f 0300 	mov.w	r3, #0
 8008a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a6c:	4692      	mov	sl, r2
 8008a6e:	469b      	mov	fp, r3
 8008a70:	4643      	mov	r3, r8
 8008a72:	eb1a 0303 	adds.w	r3, sl, r3
 8008a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a7a:	464b      	mov	r3, r9
 8008a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8008a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	18db      	adds	r3, r3, r3
 8008a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	eb42 0303 	adc.w	r3, r2, r3
 8008aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8008aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008aae:	f7f8 f8fb 	bl	8000ca8 <__aeabi_uldivmod>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	4b3b      	ldr	r3, [pc, #236]	; (8008ba8 <UART_SetConfig+0x2d4>)
 8008aba:	fba3 2301 	umull	r2, r3, r3, r1
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	2264      	movs	r2, #100	; 0x64
 8008ac2:	fb02 f303 	mul.w	r3, r2, r3
 8008ac6:	1acb      	subs	r3, r1, r3
 8008ac8:	00db      	lsls	r3, r3, #3
 8008aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008ace:	4b36      	ldr	r3, [pc, #216]	; (8008ba8 <UART_SetConfig+0x2d4>)
 8008ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8008ad4:	095b      	lsrs	r3, r3, #5
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008adc:	441c      	add	r4, r3
 8008ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008af0:	4642      	mov	r2, r8
 8008af2:	464b      	mov	r3, r9
 8008af4:	1891      	adds	r1, r2, r2
 8008af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008af8:	415b      	adcs	r3, r3
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b00:	4641      	mov	r1, r8
 8008b02:	1851      	adds	r1, r2, r1
 8008b04:	6339      	str	r1, [r7, #48]	; 0x30
 8008b06:	4649      	mov	r1, r9
 8008b08:	414b      	adcs	r3, r1
 8008b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b0c:	f04f 0200 	mov.w	r2, #0
 8008b10:	f04f 0300 	mov.w	r3, #0
 8008b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008b18:	4659      	mov	r1, fp
 8008b1a:	00cb      	lsls	r3, r1, #3
 8008b1c:	4651      	mov	r1, sl
 8008b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b22:	4651      	mov	r1, sl
 8008b24:	00ca      	lsls	r2, r1, #3
 8008b26:	4610      	mov	r0, r2
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	4642      	mov	r2, r8
 8008b2e:	189b      	adds	r3, r3, r2
 8008b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b34:	464b      	mov	r3, r9
 8008b36:	460a      	mov	r2, r1
 8008b38:	eb42 0303 	adc.w	r3, r2, r3
 8008b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008b54:	460b      	mov	r3, r1
 8008b56:	18db      	adds	r3, r3, r3
 8008b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	eb42 0303 	adc.w	r3, r2, r3
 8008b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008b6a:	f7f8 f89d 	bl	8000ca8 <__aeabi_uldivmod>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4b0d      	ldr	r3, [pc, #52]	; (8008ba8 <UART_SetConfig+0x2d4>)
 8008b74:	fba3 1302 	umull	r1, r3, r3, r2
 8008b78:	095b      	lsrs	r3, r3, #5
 8008b7a:	2164      	movs	r1, #100	; 0x64
 8008b7c:	fb01 f303 	mul.w	r3, r1, r3
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	00db      	lsls	r3, r3, #3
 8008b84:	3332      	adds	r3, #50	; 0x32
 8008b86:	4a08      	ldr	r2, [pc, #32]	; (8008ba8 <UART_SetConfig+0x2d4>)
 8008b88:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8c:	095b      	lsrs	r3, r3, #5
 8008b8e:	f003 0207 	and.w	r2, r3, #7
 8008b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4422      	add	r2, r4
 8008b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b9c:	e106      	b.n	8008dac <UART_SetConfig+0x4d8>
 8008b9e:	bf00      	nop
 8008ba0:	40011000 	.word	0x40011000
 8008ba4:	40011400 	.word	0x40011400
 8008ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008bbe:	4642      	mov	r2, r8
 8008bc0:	464b      	mov	r3, r9
 8008bc2:	1891      	adds	r1, r2, r2
 8008bc4:	6239      	str	r1, [r7, #32]
 8008bc6:	415b      	adcs	r3, r3
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8008bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008bce:	4641      	mov	r1, r8
 8008bd0:	1854      	adds	r4, r2, r1
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	eb43 0501 	adc.w	r5, r3, r1
 8008bd8:	f04f 0200 	mov.w	r2, #0
 8008bdc:	f04f 0300 	mov.w	r3, #0
 8008be0:	00eb      	lsls	r3, r5, #3
 8008be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008be6:	00e2      	lsls	r2, r4, #3
 8008be8:	4614      	mov	r4, r2
 8008bea:	461d      	mov	r5, r3
 8008bec:	4643      	mov	r3, r8
 8008bee:	18e3      	adds	r3, r4, r3
 8008bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008bf4:	464b      	mov	r3, r9
 8008bf6:	eb45 0303 	adc.w	r3, r5, r3
 8008bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c0e:	f04f 0200 	mov.w	r2, #0
 8008c12:	f04f 0300 	mov.w	r3, #0
 8008c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	008b      	lsls	r3, r1, #2
 8008c1e:	4621      	mov	r1, r4
 8008c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c24:	4621      	mov	r1, r4
 8008c26:	008a      	lsls	r2, r1, #2
 8008c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008c2c:	f7f8 f83c 	bl	8000ca8 <__aeabi_uldivmod>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4b60      	ldr	r3, [pc, #384]	; (8008db8 <UART_SetConfig+0x4e4>)
 8008c36:	fba3 2302 	umull	r2, r3, r3, r2
 8008c3a:	095b      	lsrs	r3, r3, #5
 8008c3c:	011c      	lsls	r4, r3, #4
 8008c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008c50:	4642      	mov	r2, r8
 8008c52:	464b      	mov	r3, r9
 8008c54:	1891      	adds	r1, r2, r2
 8008c56:	61b9      	str	r1, [r7, #24]
 8008c58:	415b      	adcs	r3, r3
 8008c5a:	61fb      	str	r3, [r7, #28]
 8008c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c60:	4641      	mov	r1, r8
 8008c62:	1851      	adds	r1, r2, r1
 8008c64:	6139      	str	r1, [r7, #16]
 8008c66:	4649      	mov	r1, r9
 8008c68:	414b      	adcs	r3, r1
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	f04f 0200 	mov.w	r2, #0
 8008c70:	f04f 0300 	mov.w	r3, #0
 8008c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c78:	4659      	mov	r1, fp
 8008c7a:	00cb      	lsls	r3, r1, #3
 8008c7c:	4651      	mov	r1, sl
 8008c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c82:	4651      	mov	r1, sl
 8008c84:	00ca      	lsls	r2, r1, #3
 8008c86:	4610      	mov	r0, r2
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	4642      	mov	r2, r8
 8008c8e:	189b      	adds	r3, r3, r2
 8008c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c94:	464b      	mov	r3, r9
 8008c96:	460a      	mov	r2, r1
 8008c98:	eb42 0303 	adc.w	r3, r2, r3
 8008c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	f04f 0300 	mov.w	r3, #0
 8008cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008cb8:	4649      	mov	r1, r9
 8008cba:	008b      	lsls	r3, r1, #2
 8008cbc:	4641      	mov	r1, r8
 8008cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cc2:	4641      	mov	r1, r8
 8008cc4:	008a      	lsls	r2, r1, #2
 8008cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008cca:	f7f7 ffed 	bl	8000ca8 <__aeabi_uldivmod>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4b38      	ldr	r3, [pc, #224]	; (8008db8 <UART_SetConfig+0x4e4>)
 8008cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8008cda:	095b      	lsrs	r3, r3, #5
 8008cdc:	2264      	movs	r2, #100	; 0x64
 8008cde:	fb02 f303 	mul.w	r3, r2, r3
 8008ce2:	1acb      	subs	r3, r1, r3
 8008ce4:	011b      	lsls	r3, r3, #4
 8008ce6:	3332      	adds	r3, #50	; 0x32
 8008ce8:	4a33      	ldr	r2, [pc, #204]	; (8008db8 <UART_SetConfig+0x4e4>)
 8008cea:	fba2 2303 	umull	r2, r3, r2, r3
 8008cee:	095b      	lsrs	r3, r3, #5
 8008cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cf4:	441c      	add	r4, r3
 8008cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	673b      	str	r3, [r7, #112]	; 0x70
 8008cfe:	677a      	str	r2, [r7, #116]	; 0x74
 8008d00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008d04:	4642      	mov	r2, r8
 8008d06:	464b      	mov	r3, r9
 8008d08:	1891      	adds	r1, r2, r2
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	415b      	adcs	r3, r3
 8008d0e:	60fb      	str	r3, [r7, #12]
 8008d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d14:	4641      	mov	r1, r8
 8008d16:	1851      	adds	r1, r2, r1
 8008d18:	6039      	str	r1, [r7, #0]
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	414b      	adcs	r3, r1
 8008d1e:	607b      	str	r3, [r7, #4]
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	f04f 0300 	mov.w	r3, #0
 8008d28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d2c:	4659      	mov	r1, fp
 8008d2e:	00cb      	lsls	r3, r1, #3
 8008d30:	4651      	mov	r1, sl
 8008d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d36:	4651      	mov	r1, sl
 8008d38:	00ca      	lsls	r2, r1, #3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	4642      	mov	r2, r8
 8008d42:	189b      	adds	r3, r3, r2
 8008d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d46:	464b      	mov	r3, r9
 8008d48:	460a      	mov	r2, r1
 8008d4a:	eb42 0303 	adc.w	r3, r2, r3
 8008d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	663b      	str	r3, [r7, #96]	; 0x60
 8008d5a:	667a      	str	r2, [r7, #100]	; 0x64
 8008d5c:	f04f 0200 	mov.w	r2, #0
 8008d60:	f04f 0300 	mov.w	r3, #0
 8008d64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008d68:	4649      	mov	r1, r9
 8008d6a:	008b      	lsls	r3, r1, #2
 8008d6c:	4641      	mov	r1, r8
 8008d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d72:	4641      	mov	r1, r8
 8008d74:	008a      	lsls	r2, r1, #2
 8008d76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008d7a:	f7f7 ff95 	bl	8000ca8 <__aeabi_uldivmod>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4b0d      	ldr	r3, [pc, #52]	; (8008db8 <UART_SetConfig+0x4e4>)
 8008d84:	fba3 1302 	umull	r1, r3, r3, r2
 8008d88:	095b      	lsrs	r3, r3, #5
 8008d8a:	2164      	movs	r1, #100	; 0x64
 8008d8c:	fb01 f303 	mul.w	r3, r1, r3
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	011b      	lsls	r3, r3, #4
 8008d94:	3332      	adds	r3, #50	; 0x32
 8008d96:	4a08      	ldr	r2, [pc, #32]	; (8008db8 <UART_SetConfig+0x4e4>)
 8008d98:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	f003 020f 	and.w	r2, r3, #15
 8008da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4422      	add	r2, r4
 8008daa:	609a      	str	r2, [r3, #8]
}
 8008dac:	bf00      	nop
 8008dae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008db2:	46bd      	mov	sp, r7
 8008db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008db8:	51eb851f 	.word	0x51eb851f

08008dbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	f107 001c 	add.w	r0, r7, #28
 8008dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d123      	bne.n	8008e1e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008dfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d105      	bne.n	8008e12 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f9dc 	bl	80091d0 <USB_CoreReset>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73fb      	strb	r3, [r7, #15]
 8008e1c:	e01b      	b.n	8008e56 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f9d0 	bl	80091d0 <USB_CoreReset>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d106      	bne.n	8008e4a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
 8008e48:	e005      	b.n	8008e56 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e56:	7fbb      	ldrb	r3, [r7, #30]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d10b      	bne.n	8008e74 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f043 0206 	orr.w	r2, r3, #6
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f043 0220 	orr.w	r2, r3, #32
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e80:	b004      	add	sp, #16
 8008e82:	4770      	bx	lr

08008e84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f043 0201 	orr.w	r2, r3, #1
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f023 0201 	bic.w	r2, r3, #1
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d115      	bne.n	8008f16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ef6:	200a      	movs	r0, #10
 8008ef8:	f7f9 fb5e 	bl	80025b8 <HAL_Delay>
      ms += 10U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	330a      	adds	r3, #10
 8008f00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f956 	bl	80091b4 <USB_GetMode>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d01e      	beq.n	8008f4c <USB_SetCurrentMode+0x84>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2bc7      	cmp	r3, #199	; 0xc7
 8008f12:	d9f0      	bls.n	8008ef6 <USB_SetCurrentMode+0x2e>
 8008f14:	e01a      	b.n	8008f4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f16:	78fb      	ldrb	r3, [r7, #3]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d115      	bne.n	8008f48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f28:	200a      	movs	r0, #10
 8008f2a:	f7f9 fb45 	bl	80025b8 <HAL_Delay>
      ms += 10U;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	330a      	adds	r3, #10
 8008f32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f93d 	bl	80091b4 <USB_GetMode>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <USB_SetCurrentMode+0x84>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2bc7      	cmp	r3, #199	; 0xc7
 8008f44:	d9f0      	bls.n	8008f28 <USB_SetCurrentMode+0x60>
 8008f46:	e001      	b.n	8008f4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e005      	b.n	8008f58 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2bc8      	cmp	r3, #200	; 0xc8
 8008f50:	d101      	bne.n	8008f56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e000      	b.n	8008f58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3301      	adds	r3, #1
 8008f72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f7a:	d901      	bls.n	8008f80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e01b      	b.n	8008fb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	daf2      	bge.n	8008f6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	019b      	lsls	r3, r3, #6
 8008f90:	f043 0220 	orr.w	r2, r3, #32
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008fa4:	d901      	bls.n	8008faa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e006      	b.n	8008fb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	f003 0320 	and.w	r3, r3, #32
 8008fb2:	2b20      	cmp	r3, #32
 8008fb4:	d0f0      	beq.n	8008f98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008fdc:	d901      	bls.n	8008fe2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e018      	b.n	8009014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	daf2      	bge.n	8008fd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2210      	movs	r2, #16
 8008ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009000:	d901      	bls.n	8009006 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e006      	b.n	8009014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f003 0310 	and.w	r3, r3, #16
 800900e:	2b10      	cmp	r3, #16
 8009010:	d0f0      	beq.n	8008ff4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009020:	b480      	push	{r7}
 8009022:	b089      	sub	sp, #36	; 0x24
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4611      	mov	r1, r2
 800902c:	461a      	mov	r2, r3
 800902e:	460b      	mov	r3, r1
 8009030:	71fb      	strb	r3, [r7, #7]
 8009032:	4613      	mov	r3, r2
 8009034:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800903e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009042:	2b00      	cmp	r3, #0
 8009044:	d123      	bne.n	800908e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009046:	88bb      	ldrh	r3, [r7, #4]
 8009048:	3303      	adds	r3, #3
 800904a:	089b      	lsrs	r3, r3, #2
 800904c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800904e:	2300      	movs	r3, #0
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	e018      	b.n	8009086 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	031a      	lsls	r2, r3, #12
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	4413      	add	r3, r2
 800905c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009060:	461a      	mov	r2, r3
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	3301      	adds	r3, #1
 800906c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	3301      	adds	r3, #1
 8009072:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	3301      	adds	r3, #1
 8009078:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	3301      	adds	r3, #1
 800907e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	3301      	adds	r3, #1
 8009084:	61bb      	str	r3, [r7, #24]
 8009086:	69ba      	ldr	r2, [r7, #24]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	429a      	cmp	r2, r3
 800908c:	d3e2      	bcc.n	8009054 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3724      	adds	r7, #36	; 0x24
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800909c:	b480      	push	{r7}
 800909e:	b08b      	sub	sp, #44	; 0x2c
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4613      	mov	r3, r2
 80090a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80090b2:	88fb      	ldrh	r3, [r7, #6]
 80090b4:	089b      	lsrs	r3, r3, #2
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090ba:	88fb      	ldrh	r3, [r7, #6]
 80090bc:	f003 0303 	and.w	r3, r3, #3
 80090c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090c2:	2300      	movs	r3, #0
 80090c4:	623b      	str	r3, [r7, #32]
 80090c6:	e014      	b.n	80090f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	3301      	adds	r3, #1
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	3301      	adds	r3, #1
 80090de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	3301      	adds	r3, #1
 80090e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	3301      	adds	r3, #1
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	3301      	adds	r3, #1
 80090f0:	623b      	str	r3, [r7, #32]
 80090f2:	6a3a      	ldr	r2, [r7, #32]
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d3e6      	bcc.n	80090c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090fa:	8bfb      	ldrh	r3, [r7, #30]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d01e      	beq.n	800913e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800910a:	461a      	mov	r2, r3
 800910c:	f107 0310 	add.w	r3, r7, #16
 8009110:	6812      	ldr	r2, [r2, #0]
 8009112:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	b2db      	uxtb	r3, r3
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	fa22 f303 	lsr.w	r3, r2, r3
 8009120:	b2da      	uxtb	r2, r3
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	701a      	strb	r2, [r3, #0]
      i++;
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	3301      	adds	r3, #1
 800912a:	623b      	str	r3, [r7, #32]
      pDest++;
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	3301      	adds	r3, #1
 8009130:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009132:	8bfb      	ldrh	r3, [r7, #30]
 8009134:	3b01      	subs	r3, #1
 8009136:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009138:	8bfb      	ldrh	r3, [r7, #30]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1ea      	bne.n	8009114 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009140:	4618      	mov	r0, r3
 8009142:	372c      	adds	r7, #44	; 0x2c
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	4013      	ands	r3, r2
 8009162:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009164:	68fb      	ldr	r3, [r7, #12]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009172:	b480      	push	{r7}
 8009174:	b085      	sub	sp, #20
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009182:	78fb      	ldrb	r3, [r7, #3]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4413      	add	r3, r2
 800918a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009192:	78fb      	ldrb	r3, [r7, #3]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	4413      	add	r3, r2
 800919a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	4013      	ands	r3, r2
 80091a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091a6:	68bb      	ldr	r3, [r7, #8]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	695b      	ldr	r3, [r3, #20]
 80091c0:	f003 0301 	and.w	r3, r3, #1
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3301      	adds	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80091e8:	d901      	bls.n	80091ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e01b      	b.n	8009226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	daf2      	bge.n	80091dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	f043 0201 	orr.w	r2, r3, #1
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3301      	adds	r3, #1
 800920a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009212:	d901      	bls.n	8009218 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e006      	b.n	8009226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b01      	cmp	r3, #1
 8009222:	d0f0      	beq.n	8009206 <USB_CoreReset+0x36>

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
	...

08009234 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009234:	b084      	sub	sp, #16
 8009236:	b580      	push	{r7, lr}
 8009238:	b086      	sub	sp, #24
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009254:	461a      	mov	r2, r3
 8009256:	2300      	movs	r3, #0
 8009258:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009276:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	d119      	bne.n	80092be <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800928a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800928e:	2b01      	cmp	r3, #1
 8009290:	d10a      	bne.n	80092a8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092a0:	f043 0304 	orr.w	r3, r3, #4
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	e014      	b.n	80092d2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092b6:	f023 0304 	bic.w	r3, r3, #4
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	e009      	b.n	80092d2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092cc:	f023 0304 	bic.w	r3, r3, #4
 80092d0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80092d2:	2110      	movs	r1, #16
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff fe43 	bl	8008f60 <USB_FlushTxFifo>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff fe6d 	bl	8008fc4 <USB_FlushRxFifo>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80092f4:	2300      	movs	r3, #0
 80092f6:	613b      	str	r3, [r7, #16]
 80092f8:	e015      	b.n	8009326 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	015a      	lsls	r2, r3, #5
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	4413      	add	r3, r2
 8009302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009306:	461a      	mov	r2, r3
 8009308:	f04f 33ff 	mov.w	r3, #4294967295
 800930c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	4413      	add	r3, r2
 8009316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800931a:	461a      	mov	r2, r3
 800931c:	2300      	movs	r3, #0
 800931e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	3301      	adds	r3, #1
 8009324:	613b      	str	r3, [r7, #16]
 8009326:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800932a:	461a      	mov	r2, r3
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	4293      	cmp	r3, r2
 8009330:	d3e3      	bcc.n	80092fa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f04f 32ff 	mov.w	r2, #4294967295
 800933e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a18      	ldr	r2, [pc, #96]	; (80093a4 <USB_HostInit+0x170>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d10b      	bne.n	8009360 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800934e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a15      	ldr	r2, [pc, #84]	; (80093a8 <USB_HostInit+0x174>)
 8009354:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a14      	ldr	r2, [pc, #80]	; (80093ac <USB_HostInit+0x178>)
 800935a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800935e:	e009      	b.n	8009374 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2280      	movs	r2, #128	; 0x80
 8009364:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a11      	ldr	r2, [pc, #68]	; (80093b0 <USB_HostInit+0x17c>)
 800936a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a11      	ldr	r2, [pc, #68]	; (80093b4 <USB_HostInit+0x180>)
 8009370:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009374:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009378:	2b00      	cmp	r3, #0
 800937a:	d105      	bne.n	8009388 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	f043 0210 	orr.w	r2, r3, #16
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	699a      	ldr	r2, [r3, #24]
 800938c:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <USB_HostInit+0x184>)
 800938e:	4313      	orrs	r3, r2
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009394:	7dfb      	ldrb	r3, [r7, #23]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093a0:	b004      	add	sp, #16
 80093a2:	4770      	bx	lr
 80093a4:	40040000 	.word	0x40040000
 80093a8:	01000200 	.word	0x01000200
 80093ac:	00e00300 	.word	0x00e00300
 80093b0:	00600080 	.word	0x00600080
 80093b4:	004000e0 	.word	0x004000e0
 80093b8:	a3200008 	.word	0xa3200008

080093bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093da:	f023 0303 	bic.w	r3, r3, #3
 80093de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80093f4:	4313      	orrs	r3, r2
 80093f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d107      	bne.n	800940e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009404:	461a      	mov	r2, r3
 8009406:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800940a:	6053      	str	r3, [r2, #4]
 800940c:	e00c      	b.n	8009428 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	2b02      	cmp	r3, #2
 8009412:	d107      	bne.n	8009424 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800941a:	461a      	mov	r2, r3
 800941c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009420:	6053      	str	r3, [r2, #4]
 8009422:	e001      	b.n	8009428 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e000      	b.n	800942a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009456:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009464:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009466:	2064      	movs	r0, #100	; 0x64
 8009468:	f7f9 f8a6 	bl	80025b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009478:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800947a:	200a      	movs	r0, #10
 800947c:	f7f9 f89c 	bl	80025b8 <HAL_Delay>

  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800948a:	b480      	push	{r7}
 800948c:	b085      	sub	sp, #20
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80094ae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d109      	bne.n	80094ce <USB_DriveVbus+0x44>
 80094ba:	78fb      	ldrb	r3, [r7, #3]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d106      	bne.n	80094ce <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80094c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094cc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d8:	d109      	bne.n	80094ee <USB_DriveVbus+0x64>
 80094da:	78fb      	ldrb	r3, [r7, #3]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d106      	bne.n	80094ee <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80094e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094ec:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	0c5b      	lsrs	r3, r3, #17
 800951a:	f003 0303 	and.w	r3, r3, #3
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800952a:	b480      	push	{r7}
 800952c:	b085      	sub	sp, #20
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	b29b      	uxth	r3, r3
}
 8009540:	4618      	mov	r0, r3
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	4608      	mov	r0, r1
 8009556:	4611      	mov	r1, r2
 8009558:	461a      	mov	r2, r3
 800955a:	4603      	mov	r3, r0
 800955c:	70fb      	strb	r3, [r7, #3]
 800955e:	460b      	mov	r3, r1
 8009560:	70bb      	strb	r3, [r7, #2]
 8009562:	4613      	mov	r3, r2
 8009564:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	4413      	add	r3, r2
 8009576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800957a:	461a      	mov	r2, r3
 800957c:	f04f 33ff 	mov.w	r3, #4294967295
 8009580:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009582:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009586:	2b03      	cmp	r3, #3
 8009588:	d87c      	bhi.n	8009684 <USB_HC_Init+0x138>
 800958a:	a201      	add	r2, pc, #4	; (adr r2, 8009590 <USB_HC_Init+0x44>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095a1 	.word	0x080095a1
 8009594:	08009647 	.word	0x08009647
 8009598:	080095a1 	.word	0x080095a1
 800959c:	08009609 	.word	0x08009609
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ac:	461a      	mov	r2, r3
 80095ae:	f240 439d 	movw	r3, #1181	; 0x49d
 80095b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80095b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	da10      	bge.n	80095de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80095bc:	78fb      	ldrb	r3, [r7, #3]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	78fa      	ldrb	r2, [r7, #3]
 80095cc:	0151      	lsls	r1, r2, #5
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	440a      	add	r2, r1
 80095d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095da:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80095dc:	e055      	b.n	800968a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a6f      	ldr	r2, [pc, #444]	; (80097a0 <USB_HC_Init+0x254>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d151      	bne.n	800968a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	78fa      	ldrb	r2, [r7, #3]
 80095f6:	0151      	lsls	r1, r2, #5
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	440a      	add	r2, r1
 80095fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009600:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009604:	60d3      	str	r3, [r2, #12]
      break;
 8009606:	e040      	b.n	800968a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	015a      	lsls	r2, r3, #5
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	4413      	add	r3, r2
 8009610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009614:	461a      	mov	r2, r3
 8009616:	f240 639d 	movw	r3, #1693	; 0x69d
 800961a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800961c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009620:	2b00      	cmp	r3, #0
 8009622:	da34      	bge.n	800968e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	4413      	add	r3, r2
 800962c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	0151      	lsls	r1, r2, #5
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	440a      	add	r2, r1
 800963a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800963e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009642:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009644:	e023      	b.n	800968e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009646:	78fb      	ldrb	r3, [r7, #3]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	4413      	add	r3, r2
 800964e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009652:	461a      	mov	r2, r3
 8009654:	f240 2325 	movw	r3, #549	; 0x225
 8009658:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800965a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800965e:	2b00      	cmp	r3, #0
 8009660:	da17      	bge.n	8009692 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009662:	78fb      	ldrb	r3, [r7, #3]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	4413      	add	r3, r2
 800966a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	78fa      	ldrb	r2, [r7, #3]
 8009672:	0151      	lsls	r1, r2, #5
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	440a      	add	r2, r1
 8009678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800967c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009680:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009682:	e006      	b.n	8009692 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	77fb      	strb	r3, [r7, #31]
      break;
 8009688:	e004      	b.n	8009694 <USB_HC_Init+0x148>
      break;
 800968a:	bf00      	nop
 800968c:	e002      	b.n	8009694 <USB_HC_Init+0x148>
      break;
 800968e:	bf00      	nop
 8009690:	e000      	b.n	8009694 <USB_HC_Init+0x148>
      break;
 8009692:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	4413      	add	r3, r2
 800969c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a0:	461a      	mov	r2, r3
 80096a2:	2300      	movs	r3, #0
 80096a4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	78fa      	ldrb	r2, [r7, #3]
 80096b6:	0151      	lsls	r1, r2, #5
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	440a      	add	r2, r1
 80096bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096c0:	f043 0302 	orr.w	r3, r3, #2
 80096c4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096cc:	699a      	ldr	r2, [r3, #24]
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	f003 030f 	and.w	r3, r3, #15
 80096d4:	2101      	movs	r1, #1
 80096d6:	fa01 f303 	lsl.w	r3, r1, r3
 80096da:	6939      	ldr	r1, [r7, #16]
 80096dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80096e0:	4313      	orrs	r3, r2
 80096e2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80096f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	da03      	bge.n	8009700 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80096f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096fc:	61bb      	str	r3, [r7, #24]
 80096fe:	e001      	b.n	8009704 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff fef9 	bl	80094fc <USB_GetHostSpeed>
 800970a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800970c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009710:	2b02      	cmp	r3, #2
 8009712:	d106      	bne.n	8009722 <USB_HC_Init+0x1d6>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2b02      	cmp	r3, #2
 8009718:	d003      	beq.n	8009722 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800971a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800971e:	617b      	str	r3, [r7, #20]
 8009720:	e001      	b.n	8009726 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009726:	787b      	ldrb	r3, [r7, #1]
 8009728:	059b      	lsls	r3, r3, #22
 800972a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800972e:	78bb      	ldrb	r3, [r7, #2]
 8009730:	02db      	lsls	r3, r3, #11
 8009732:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009736:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009738:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800973c:	049b      	lsls	r3, r3, #18
 800973e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009742:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009744:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009746:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800974a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	431a      	orrs	r2, r3
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009754:	78fa      	ldrb	r2, [r7, #3]
 8009756:	0151      	lsls	r1, r2, #5
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	440a      	add	r2, r1
 800975c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009764:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009766:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800976a:	2b03      	cmp	r3, #3
 800976c:	d003      	beq.n	8009776 <USB_HC_Init+0x22a>
 800976e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009772:	2b01      	cmp	r3, #1
 8009774:	d10f      	bne.n	8009796 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009776:	78fb      	ldrb	r3, [r7, #3]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	4413      	add	r3, r2
 800977e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	78fa      	ldrb	r2, [r7, #3]
 8009786:	0151      	lsls	r1, r2, #5
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	440a      	add	r2, r1
 800978c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009794:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009796:	7ffb      	ldrb	r3, [r7, #31]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3720      	adds	r7, #32
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	40040000 	.word	0x40040000

080097a4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08c      	sub	sp, #48	; 0x30
 80097a8:	af02      	add	r7, sp, #8
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	4613      	mov	r3, r2
 80097b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	785b      	ldrb	r3, [r3, #1]
 80097ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80097bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097c0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	4a5d      	ldr	r2, [pc, #372]	; (800993c <USB_HC_StartXfer+0x198>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d12f      	bne.n	800982a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d11c      	bne.n	800980a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	7c9b      	ldrb	r3, [r3, #18]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <USB_HC_StartXfer+0x3c>
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	7c9b      	ldrb	r3, [r3, #18]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d124      	bne.n	800982a <USB_HC_StartXfer+0x86>
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	799b      	ldrb	r3, [r3, #6]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d120      	bne.n	800982a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	0151      	lsls	r1, r2, #5
 80097fa:	6a3a      	ldr	r2, [r7, #32]
 80097fc:	440a      	add	r2, r1
 80097fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009806:	60d3      	str	r3, [r2, #12]
 8009808:	e00f      	b.n	800982a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	791b      	ldrb	r3, [r3, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <USB_HC_StartXfer+0x86>
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	795b      	ldrb	r3, [r3, #5]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d107      	bne.n	800982a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	785b      	ldrb	r3, [r3, #1]
 800981e:	4619      	mov	r1, r3
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 fb6b 	bl	8009efc <USB_DoPing>
        return HAL_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	e232      	b.n	8009c90 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	799b      	ldrb	r3, [r3, #6]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d158      	bne.n	80098e4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009832:	2301      	movs	r3, #1
 8009834:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	78db      	ldrb	r3, [r3, #3]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d007      	beq.n	800984e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800983e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	8a92      	ldrh	r2, [r2, #20]
 8009844:	fb03 f202 	mul.w	r2, r3, r2
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	61da      	str	r2, [r3, #28]
 800984c:	e07c      	b.n	8009948 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	7c9b      	ldrb	r3, [r3, #18]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d130      	bne.n	80098b8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	2bbc      	cmp	r3, #188	; 0xbc
 800985c:	d918      	bls.n	8009890 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	8a9b      	ldrh	r3, [r3, #20]
 8009862:	461a      	mov	r2, r3
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	69da      	ldr	r2, [r3, #28]
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d003      	beq.n	8009880 <USB_HC_StartXfer+0xdc>
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	2b02      	cmp	r3, #2
 800987e:	d103      	bne.n	8009888 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2202      	movs	r2, #2
 8009884:	60da      	str	r2, [r3, #12]
 8009886:	e05f      	b.n	8009948 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2201      	movs	r2, #1
 800988c:	60da      	str	r2, [r3, #12]
 800988e:	e05b      	b.n	8009948 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	6a1a      	ldr	r2, [r3, #32]
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d007      	beq.n	80098b0 <USB_HC_StartXfer+0x10c>
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d003      	beq.n	80098b0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	2204      	movs	r2, #4
 80098ac:	60da      	str	r2, [r3, #12]
 80098ae:	e04b      	b.n	8009948 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2203      	movs	r2, #3
 80098b4:	60da      	str	r2, [r3, #12]
 80098b6:	e047      	b.n	8009948 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d10d      	bne.n	80098da <USB_HC_StartXfer+0x136>
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	8a92      	ldrh	r2, [r2, #20]
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d907      	bls.n	80098da <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80098ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	8a92      	ldrh	r2, [r2, #20]
 80098d0:	fb03 f202 	mul.w	r2, r3, r2
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	61da      	str	r2, [r3, #28]
 80098d8:	e036      	b.n	8009948 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	6a1a      	ldr	r2, [r3, #32]
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	61da      	str	r2, [r3, #28]
 80098e2:	e031      	b.n	8009948 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	6a1b      	ldr	r3, [r3, #32]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d018      	beq.n	800991e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	8a92      	ldrh	r2, [r2, #20]
 80098f4:	4413      	add	r3, r2
 80098f6:	3b01      	subs	r3, #1
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	8a92      	ldrh	r2, [r2, #20]
 80098fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009900:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8009902:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009904:	8b7b      	ldrh	r3, [r7, #26]
 8009906:	429a      	cmp	r2, r3
 8009908:	d90b      	bls.n	8009922 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800990a:	8b7b      	ldrh	r3, [r7, #26]
 800990c:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800990e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	8a92      	ldrh	r2, [r2, #20]
 8009914:	fb03 f202 	mul.w	r2, r3, r2
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	61da      	str	r2, [r3, #28]
 800991c:	e001      	b.n	8009922 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800991e:	2301      	movs	r3, #1
 8009920:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	78db      	ldrb	r3, [r3, #3]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800992a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	8a92      	ldrh	r2, [r2, #20]
 8009930:	fb03 f202 	mul.w	r2, r3, r2
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	61da      	str	r2, [r3, #28]
 8009938:	e006      	b.n	8009948 <USB_HC_StartXfer+0x1a4>
 800993a:	bf00      	nop
 800993c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	6a1a      	ldr	r2, [r3, #32]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009950:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009952:	04d9      	lsls	r1, r3, #19
 8009954:	4ba3      	ldr	r3, [pc, #652]	; (8009be4 <USB_HC_StartXfer+0x440>)
 8009956:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009958:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	7d9b      	ldrb	r3, [r3, #22]
 800995e:	075b      	lsls	r3, r3, #29
 8009960:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009964:	69f9      	ldr	r1, [r7, #28]
 8009966:	0148      	lsls	r0, r1, #5
 8009968:	6a39      	ldr	r1, [r7, #32]
 800996a:	4401      	add	r1, r0
 800996c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009970:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009972:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d009      	beq.n	800998e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	6999      	ldr	r1, [r3, #24]
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	4413      	add	r3, r2
 8009986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800998a:	460a      	mov	r2, r1
 800998c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	2b00      	cmp	r3, #0
 800999c:	bf0c      	ite	eq
 800999e:	2301      	moveq	r3, #1
 80099a0:	2300      	movne	r3, #0
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	69fa      	ldr	r2, [r7, #28]
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	6a3a      	ldr	r2, [r7, #32]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	7e7b      	ldrb	r3, [r7, #25]
 80099d6:	075b      	lsls	r3, r3, #29
 80099d8:	69f9      	ldr	r1, [r7, #28]
 80099da:	0148      	lsls	r0, r1, #5
 80099dc:	6a39      	ldr	r1, [r7, #32]
 80099de:	4401      	add	r1, r0
 80099e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80099e4:	4313      	orrs	r3, r2
 80099e6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	799b      	ldrb	r3, [r3, #6]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	f040 80c3 	bne.w	8009b78 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	7c5b      	ldrb	r3, [r3, #17]
 80099f6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80099fc:	4313      	orrs	r3, r2
 80099fe:	69fa      	ldr	r2, [r7, #28]
 8009a00:	0151      	lsls	r1, r2, #5
 8009a02:	6a3a      	ldr	r2, [r7, #32]
 8009a04:	440a      	add	r2, r1
 8009a06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009a0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009a0e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	69fa      	ldr	r2, [r7, #28]
 8009a20:	0151      	lsls	r1, r2, #5
 8009a22:	6a3a      	ldr	r2, [r7, #32]
 8009a24:	440a      	add	r2, r1
 8009a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009a2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	79db      	ldrb	r3, [r3, #7]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d123      	bne.n	8009a80 <USB_HC_StartXfer+0x2dc>
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	78db      	ldrb	r3, [r3, #3]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d11f      	bne.n	8009a80 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	6a3a      	ldr	r2, [r7, #32]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a5e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	69fa      	ldr	r2, [r7, #28]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	6a3a      	ldr	r2, [r7, #32]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a7e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	7c9b      	ldrb	r3, [r3, #18]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d003      	beq.n	8009a90 <USB_HC_StartXfer+0x2ec>
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	7c9b      	ldrb	r3, [r3, #18]
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d117      	bne.n	8009ac0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d113      	bne.n	8009ac0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	78db      	ldrb	r3, [r3, #3]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d10f      	bne.n	8009ac0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	69fa      	ldr	r2, [r7, #28]
 8009ab0:	0151      	lsls	r1, r2, #5
 8009ab2:	6a3a      	ldr	r2, [r7, #32]
 8009ab4:	440a      	add	r2, r1
 8009ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009abe:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	7c9b      	ldrb	r3, [r3, #18]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d162      	bne.n	8009b8e <USB_HC_StartXfer+0x3ea>
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	78db      	ldrb	r3, [r3, #3]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d15e      	bne.n	8009b8e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	d858      	bhi.n	8009b8c <USB_HC_StartXfer+0x3e8>
 8009ada:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <USB_HC_StartXfer+0x33c>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009b13 	.word	0x08009b13
 8009ae8:	08009b35 	.word	0x08009b35
 8009aec:	08009b57 	.word	0x08009b57
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	0151      	lsls	r1, r2, #5
 8009b02:	6a3a      	ldr	r2, [r7, #32]
 8009b04:	440a      	add	r2, r1
 8009b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b0e:	6053      	str	r3, [r2, #4]
          break;
 8009b10:	e03d      	b.n	8009b8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	0151      	lsls	r1, r2, #5
 8009b24:	6a3a      	ldr	r2, [r7, #32]
 8009b26:	440a      	add	r2, r1
 8009b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b2c:	f043 030e 	orr.w	r3, r3, #14
 8009b30:	6053      	str	r3, [r2, #4]
          break;
 8009b32:	e02c      	b.n	8009b8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	69fa      	ldr	r2, [r7, #28]
 8009b44:	0151      	lsls	r1, r2, #5
 8009b46:	6a3a      	ldr	r2, [r7, #32]
 8009b48:	440a      	add	r2, r1
 8009b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b52:	6053      	str	r3, [r2, #4]
          break;
 8009b54:	e01b      	b.n	8009b8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	69fa      	ldr	r2, [r7, #28]
 8009b66:	0151      	lsls	r1, r2, #5
 8009b68:	6a3a      	ldr	r2, [r7, #32]
 8009b6a:	440a      	add	r2, r1
 8009b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b74:	6053      	str	r3, [r2, #4]
          break;
 8009b76:	e00a      	b.n	8009b8e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b84:	461a      	mov	r2, r3
 8009b86:	2300      	movs	r3, #0
 8009b88:	6053      	str	r3, [r2, #4]
 8009b8a:	e000      	b.n	8009b8e <USB_HC_StartXfer+0x3ea>
          break;
 8009b8c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ba4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	78db      	ldrb	r3, [r3, #3]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d004      	beq.n	8009bb8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb4:	613b      	str	r3, [r7, #16]
 8009bb6:	e003      	b.n	8009bc0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bbe:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bc6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	015a      	lsls	r2, r3, #5
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009bda:	79fb      	ldrb	r3, [r7, #7]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	e055      	b.n	8009c90 <USB_HC_StartXfer+0x4ec>
 8009be4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	78db      	ldrb	r3, [r3, #3]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d14e      	bne.n	8009c8e <USB_HC_StartXfer+0x4ea>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d04a      	beq.n	8009c8e <USB_HC_StartXfer+0x4ea>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	79db      	ldrb	r3, [r3, #7]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d146      	bne.n	8009c8e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	7c9b      	ldrb	r3, [r3, #18]
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d831      	bhi.n	8009c6c <USB_HC_StartXfer+0x4c8>
 8009c08:	a201      	add	r2, pc, #4	; (adr r2, 8009c10 <USB_HC_StartXfer+0x46c>)
 8009c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0e:	bf00      	nop
 8009c10:	08009c21 	.word	0x08009c21
 8009c14:	08009c45 	.word	0x08009c45
 8009c18:	08009c21 	.word	0x08009c21
 8009c1c:	08009c45 	.word	0x08009c45
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	3303      	adds	r3, #3
 8009c26:	089b      	lsrs	r3, r3, #2
 8009c28:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009c2a:	8afa      	ldrh	r2, [r7, #22]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d91c      	bls.n	8009c70 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	f043 0220 	orr.w	r2, r3, #32
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c42:	e015      	b.n	8009c70 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	3303      	adds	r3, #3
 8009c4a:	089b      	lsrs	r3, r3, #2
 8009c4c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009c4e:	8afa      	ldrh	r2, [r7, #22]
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d90a      	bls.n	8009c74 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c6a:	e003      	b.n	8009c74 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009c6c:	bf00      	nop
 8009c6e:	e002      	b.n	8009c76 <USB_HC_StartXfer+0x4d2>
        break;
 8009c70:	bf00      	nop
 8009c72:	e000      	b.n	8009c76 <USB_HC_StartXfer+0x4d2>
        break;
 8009c74:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	6999      	ldr	r1, [r3, #24]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	785a      	ldrb	r2, [r3, #1]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	2000      	movs	r0, #0
 8009c86:	9000      	str	r0, [sp, #0]
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f7ff f9c9 	bl	8009020 <USB_WritePacket>
  }

  return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3728      	adds	r7, #40	; 0x28
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	b29b      	uxth	r3, r3
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b089      	sub	sp, #36	; 0x24
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009cca:	78fb      	ldrb	r3, [r7, #3]
 8009ccc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	0c9b      	lsrs	r3, r3, #18
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	0fdb      	lsrs	r3, r3, #31
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	015a      	lsls	r2, r3, #5
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	0fdb      	lsrs	r3, r3, #31
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f003 0320 	and.w	r3, r3, #32
 8009d1c:	2b20      	cmp	r3, #32
 8009d1e:	d10d      	bne.n	8009d3c <USB_HC_Halt+0x82>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10a      	bne.n	8009d3c <USB_HC_Halt+0x82>
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d005      	beq.n	8009d38 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d002      	beq.n	8009d38 <USB_HC_Halt+0x7e>
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d101      	bne.n	8009d3c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	e0d8      	b.n	8009eee <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d002      	beq.n	8009d48 <USB_HC_Halt+0x8e>
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d173      	bne.n	8009e30 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	0151      	lsls	r1, r2, #5
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	440a      	add	r2, r1
 8009d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d66:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f003 0320 	and.w	r3, r3, #32
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d14a      	bne.n	8009e0a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d133      	bne.n	8009de8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	69ba      	ldr	r2, [r7, #24]
 8009d90:	0151      	lsls	r1, r2, #5
 8009d92:	69fa      	ldr	r2, [r7, #28]
 8009d94:	440a      	add	r2, r1
 8009d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d9e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	69ba      	ldr	r2, [r7, #24]
 8009db0:	0151      	lsls	r1, r2, #5
 8009db2:	69fa      	ldr	r2, [r7, #28]
 8009db4:	440a      	add	r2, r1
 8009db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dbe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dcc:	d82e      	bhi.n	8009e2c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009de4:	d0ec      	beq.n	8009dc0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009de6:	e081      	b.n	8009eec <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	69ba      	ldr	r2, [r7, #24]
 8009df8:	0151      	lsls	r1, r2, #5
 8009dfa:	69fa      	ldr	r2, [r7, #28]
 8009dfc:	440a      	add	r2, r1
 8009dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e06:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009e08:	e070      	b.n	8009eec <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	0151      	lsls	r1, r2, #5
 8009e1c:	69fa      	ldr	r2, [r7, #28]
 8009e1e:	440a      	add	r2, r1
 8009e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e28:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009e2a:	e05f      	b.n	8009eec <USB_HC_Halt+0x232>
            break;
 8009e2c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009e2e:	e05d      	b.n	8009eec <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	0151      	lsls	r1, r2, #5
 8009e42:	69fa      	ldr	r2, [r7, #28]
 8009e44:	440a      	add	r2, r1
 8009e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e4e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d133      	bne.n	8009ec8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	69ba      	ldr	r2, [r7, #24]
 8009e70:	0151      	lsls	r1, r2, #5
 8009e72:	69fa      	ldr	r2, [r7, #28]
 8009e74:	440a      	add	r2, r1
 8009e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e7e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	015a      	lsls	r2, r3, #5
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	0151      	lsls	r1, r2, #5
 8009e92:	69fa      	ldr	r2, [r7, #28]
 8009e94:	440a      	add	r2, r1
 8009e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e9e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009eac:	d81d      	bhi.n	8009eea <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	015a      	lsls	r2, r3, #5
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ec4:	d0ec      	beq.n	8009ea0 <USB_HC_Halt+0x1e6>
 8009ec6:	e011      	b.n	8009eec <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	015a      	lsls	r2, r3, #5
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	4413      	add	r3, r2
 8009ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	0151      	lsls	r1, r2, #5
 8009eda:	69fa      	ldr	r2, [r7, #28]
 8009edc:	440a      	add	r2, r1
 8009ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ee6:	6013      	str	r3, [r2, #0]
 8009ee8:	e000      	b.n	8009eec <USB_HC_Halt+0x232>
          break;
 8009eea:	bf00      	nop
    }
  }

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3724      	adds	r7, #36	; 0x24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
	...

08009efc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	460b      	mov	r3, r1
 8009f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009f0c:	78fb      	ldrb	r3, [r7, #3]
 8009f0e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009f10:	2301      	movs	r3, #1
 8009f12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	04da      	lsls	r2, r3, #19
 8009f18:	4b15      	ldr	r3, [pc, #84]	; (8009f70 <USB_DoPing+0x74>)
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	0151      	lsls	r1, r2, #5
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	440a      	add	r2, r1
 8009f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f2c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f44:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f4c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	015a      	lsls	r2, r3, #5
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	4413      	add	r3, r2
 8009f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	371c      	adds	r7, #28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	1ff80000 	.word	0x1ff80000

08009f74 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7fe ff8c 	bl	8008ea6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f8e:	2110      	movs	r1, #16
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7fe ffe5 	bl	8008f60 <USB_FlushTxFifo>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff f80f 	bl	8008fc4 <USB_FlushRxFifo>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	61bb      	str	r3, [r7, #24]
 8009fb4:	e01f      	b.n	8009ff6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fcc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fd4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fdc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fea:	461a      	mov	r2, r3
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	61bb      	str	r3, [r7, #24]
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	2b0f      	cmp	r3, #15
 8009ffa:	d9dc      	bls.n	8009fb6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	61bb      	str	r3, [r7, #24]
 800a000:	e034      	b.n	800a06c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a018:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a020:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a028:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	4413      	add	r3, r2
 800a032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a036:	461a      	mov	r2, r3
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a048:	d80c      	bhi.n	800a064 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	4413      	add	r3, r2
 800a052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a05c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a060:	d0ec      	beq.n	800a03c <USB_StopHost+0xc8>
 800a062:	e000      	b.n	800a066 <USB_StopHost+0xf2>
        break;
 800a064:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	3301      	adds	r3, #1
 800a06a:	61bb      	str	r3, [r7, #24]
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	2b0f      	cmp	r3, #15
 800a070:	d9c7      	bls.n	800a002 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a078:	461a      	mov	r2, r3
 800a07a:	f04f 33ff 	mov.w	r3, #4294967295
 800a07e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f04f 32ff 	mov.w	r2, #4294967295
 800a086:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7fe fefb 	bl	8008e84 <USB_EnableGlobalInt>

  return ret;
 800a08e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3720      	adds	r7, #32
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a098:	b590      	push	{r4, r7, lr}
 800a09a:	b089      	sub	sp, #36	; 0x24
 800a09c:	af04      	add	r7, sp, #16
 800a09e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	2102      	movs	r1, #2
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fc85 	bl	800a9b6 <USBH_FindInterface>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	2bff      	cmp	r3, #255	; 0xff
 800a0b4:	d002      	beq.n	800a0bc <USBH_CDC_InterfaceInit+0x24>
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d901      	bls.n	800a0c0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a0bc:	2302      	movs	r3, #2
 800a0be:	e13d      	b.n	800a33c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fc5a 	bl	800a97e <USBH_SelectInterface>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e131      	b.n	800a33c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a0de:	2050      	movs	r0, #80	; 0x50
 800a0e0:	f002 fb78 	bl	800c7d4 <malloc>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	e11f      	b.n	800a33c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a0fc:	2250      	movs	r2, #80	; 0x50
 800a0fe:	2100      	movs	r1, #0
 800a100:	68b8      	ldr	r0, [r7, #8]
 800a102:	f004 f9de 	bl	800e4c2 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a106:	7bfb      	ldrb	r3, [r7, #15]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	211a      	movs	r1, #26
 800a10c:	fb01 f303 	mul.w	r3, r1, r3
 800a110:	4413      	add	r3, r2
 800a112:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	b25b      	sxtb	r3, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	da15      	bge.n	800a14a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	211a      	movs	r1, #26
 800a124:	fb01 f303 	mul.w	r3, r1, r3
 800a128:	4413      	add	r3, r2
 800a12a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a12e:	781a      	ldrb	r2, [r3, #0]
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	211a      	movs	r1, #26
 800a13a:	fb01 f303 	mul.w	r3, r1, r3
 800a13e:	4413      	add	r3, r2
 800a140:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a144:	881a      	ldrh	r2, [r3, #0]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	785b      	ldrb	r3, [r3, #1]
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f001 ffce 	bl	800c0f2 <USBH_AllocPipe>
 800a156:	4603      	mov	r3, r0
 800a158:	461a      	mov	r2, r3
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	7819      	ldrb	r1, [r3, #0]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	7858      	ldrb	r0, [r3, #1]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	8952      	ldrh	r2, [r2, #10]
 800a176:	9202      	str	r2, [sp, #8]
 800a178:	2203      	movs	r2, #3
 800a17a:	9201      	str	r2, [sp, #4]
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	4623      	mov	r3, r4
 800a180:	4602      	mov	r2, r0
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f001 ff86 	bl	800c094 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	2200      	movs	r2, #0
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f002 fa95 	bl	800c6c0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a196:	2300      	movs	r3, #0
 800a198:	2200      	movs	r2, #0
 800a19a:	210a      	movs	r1, #10
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fc0a 	bl	800a9b6 <USBH_FindInterface>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
 800a1a8:	2bff      	cmp	r3, #255	; 0xff
 800a1aa:	d002      	beq.n	800a1b2 <USBH_CDC_InterfaceInit+0x11a>
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d901      	bls.n	800a1b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	e0c2      	b.n	800a33c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	211a      	movs	r1, #26
 800a1bc:	fb01 f303 	mul.w	r3, r1, r3
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	b25b      	sxtb	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	da16      	bge.n	800a1fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	211a      	movs	r1, #26
 800a1d4:	fb01 f303 	mul.w	r3, r1, r3
 800a1d8:	4413      	add	r3, r2
 800a1da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a1de:	781a      	ldrb	r2, [r3, #0]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	211a      	movs	r1, #26
 800a1ea:	fb01 f303 	mul.w	r3, r1, r3
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a1f4:	881a      	ldrh	r2, [r3, #0]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	835a      	strh	r2, [r3, #26]
 800a1fa:	e015      	b.n	800a228 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	211a      	movs	r1, #26
 800a202:	fb01 f303 	mul.w	r3, r1, r3
 800a206:	4413      	add	r3, r2
 800a208:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a20c:	781a      	ldrb	r2, [r3, #0]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	211a      	movs	r1, #26
 800a218:	fb01 f303 	mul.w	r3, r1, r3
 800a21c:	4413      	add	r3, r2
 800a21e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a222:	881a      	ldrh	r2, [r3, #0]
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	211a      	movs	r1, #26
 800a22e:	fb01 f303 	mul.w	r3, r1, r3
 800a232:	4413      	add	r3, r2
 800a234:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	b25b      	sxtb	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	da16      	bge.n	800a26e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	211a      	movs	r1, #26
 800a246:	fb01 f303 	mul.w	r3, r1, r3
 800a24a:	4413      	add	r3, r2
 800a24c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a250:	781a      	ldrb	r2, [r3, #0]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	211a      	movs	r1, #26
 800a25c:	fb01 f303 	mul.w	r3, r1, r3
 800a260:	4413      	add	r3, r2
 800a262:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a266:	881a      	ldrh	r2, [r3, #0]
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	835a      	strh	r2, [r3, #26]
 800a26c:	e015      	b.n	800a29a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	211a      	movs	r1, #26
 800a274:	fb01 f303 	mul.w	r3, r1, r3
 800a278:	4413      	add	r3, r2
 800a27a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a27e:	781a      	ldrb	r2, [r3, #0]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	211a      	movs	r1, #26
 800a28a:	fb01 f303 	mul.w	r3, r1, r3
 800a28e:	4413      	add	r3, r2
 800a290:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a294:	881a      	ldrh	r2, [r3, #0]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	7b9b      	ldrb	r3, [r3, #14]
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f001 ff26 	bl	800c0f2 <USBH_AllocPipe>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	7bdb      	ldrb	r3, [r3, #15]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 ff1c 	bl	800c0f2 <USBH_AllocPipe>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	461a      	mov	r2, r3
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	7b59      	ldrb	r1, [r3, #13]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	7b98      	ldrb	r0, [r3, #14]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	8b12      	ldrh	r2, [r2, #24]
 800a2da:	9202      	str	r2, [sp, #8]
 800a2dc:	2202      	movs	r2, #2
 800a2de:	9201      	str	r2, [sp, #4]
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	4623      	mov	r3, r4
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f001 fed4 	bl	800c094 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	7b19      	ldrb	r1, [r3, #12]
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	7bd8      	ldrb	r0, [r3, #15]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	8b52      	ldrh	r2, [r2, #26]
 800a304:	9202      	str	r2, [sp, #8]
 800a306:	2202      	movs	r2, #2
 800a308:	9201      	str	r2, [sp, #4]
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	4623      	mov	r3, r4
 800a30e:	4602      	mov	r2, r0
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 febf 	bl	800c094 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	7b5b      	ldrb	r3, [r3, #13]
 800a322:	2200      	movs	r2, #0
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f002 f9ca 	bl	800c6c0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	7b1b      	ldrb	r3, [r3, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f002 f9c3 	bl	800c6c0 <USBH_LL_SetToggle>

  return USBH_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	bd90      	pop	{r4, r7, pc}

0800a344 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00e      	beq.n	800a37c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f001 feb4 	bl	800c0d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f001 fedf 	bl	800c134 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	7b1b      	ldrb	r3, [r3, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00e      	beq.n	800a3a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	7b1b      	ldrb	r3, [r3, #12]
 800a388:	4619      	mov	r1, r3
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f001 fea1 	bl	800c0d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	7b1b      	ldrb	r3, [r3, #12]
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f001 fecc 	bl	800c134 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	7b5b      	ldrb	r3, [r3, #13]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00e      	beq.n	800a3c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	7b5b      	ldrb	r3, [r3, #13]
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f001 fe8e 	bl	800c0d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	7b5b      	ldrb	r3, [r3, #13]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 feb9 	bl	800c134 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3ce:	69db      	ldr	r3, [r3, #28]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00b      	beq.n	800a3ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3da:	69db      	ldr	r3, [r3, #28]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f002 fa01 	bl	800c7e4 <free>
    phost->pActiveClass->pData = 0U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b084      	sub	sp, #16
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a404:	69db      	ldr	r3, [r3, #28]
 800a406:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3340      	adds	r3, #64	; 0x40
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f8b1 	bl	800a576 <GetLineCoding>
 800a414:	4603      	mov	r3, r0
 800a416:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a418:	7afb      	ldrb	r3, [r7, #11]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d105      	bne.n	800a42a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a424:	2102      	movs	r1, #2
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a42a:	7afb      	ldrb	r3, [r7, #11]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a43c:	2301      	movs	r3, #1
 800a43e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a454:	2b04      	cmp	r3, #4
 800a456:	d877      	bhi.n	800a548 <USBH_CDC_Process+0x114>
 800a458:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <USBH_CDC_Process+0x2c>)
 800a45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45e:	bf00      	nop
 800a460:	0800a475 	.word	0x0800a475
 800a464:	0800a47b 	.word	0x0800a47b
 800a468:	0800a4ab 	.word	0x0800a4ab
 800a46c:	0800a51f 	.word	0x0800a51f
 800a470:	0800a52d 	.word	0x0800a52d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	73fb      	strb	r3, [r7, #15]
      break;
 800a478:	e06d      	b.n	800a556 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f897 	bl	800a5b4 <SetLineCoding>
 800a486:	4603      	mov	r3, r0
 800a488:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d104      	bne.n	800a49a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2202      	movs	r2, #2
 800a494:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a498:	e058      	b.n	800a54c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d055      	beq.n	800a54c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2204      	movs	r2, #4
 800a4a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a4a8:	e050      	b.n	800a54c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	3340      	adds	r3, #64	; 0x40
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f860 	bl	800a576 <GetLineCoding>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a4ba:	7bbb      	ldrb	r3, [r7, #14]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d126      	bne.n	800a50e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4d2:	791b      	ldrb	r3, [r3, #4]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d13b      	bne.n	800a550 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d133      	bne.n	800a550 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d12b      	bne.n	800a550 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a500:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a502:	429a      	cmp	r2, r3
 800a504:	d124      	bne.n	800a550 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f958 	bl	800a7bc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a50c:	e020      	b.n	800a550 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d01d      	beq.n	800a550 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2204      	movs	r2, #4
 800a518:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a51c:	e018      	b.n	800a550 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f867 	bl	800a5f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f8da 	bl	800a6de <CDC_ProcessReception>
      break;
 800a52a:	e014      	b.n	800a556 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a52c:	2100      	movs	r1, #0
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f001 f822 	bl	800b578 <USBH_ClrFeature>
 800a534:	4603      	mov	r3, r0
 800a536:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a538:	7bbb      	ldrb	r3, [r7, #14]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10a      	bne.n	800a554 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a546:	e005      	b.n	800a554 <USBH_CDC_Process+0x120>

    default:
      break;
 800a548:	bf00      	nop
 800a54a:	e004      	b.n	800a556 <USBH_CDC_Process+0x122>
      break;
 800a54c:	bf00      	nop
 800a54e:	e002      	b.n	800a556 <USBH_CDC_Process+0x122>
      break;
 800a550:	bf00      	nop
 800a552:	e000      	b.n	800a556 <USBH_CDC_Process+0x122>
      break;
 800a554:	bf00      	nop

  }

  return status;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b082      	sub	sp, #8
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	22a1      	movs	r2, #161	; 0xa1
 800a584:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2221      	movs	r2, #33	; 0x21
 800a58a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2207      	movs	r2, #7
 800a59c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2207      	movs	r2, #7
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 fb23 	bl	800bbf0 <USBH_CtlReq>
 800a5aa:	4603      	mov	r3, r0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2221      	movs	r2, #33	; 0x21
 800a5c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2220      	movs	r2, #32
 800a5c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2207      	movs	r2, #7
 800a5da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	2207      	movs	r2, #7
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f001 fb04 	bl	800bbf0 <USBH_CtlReq>
 800a5e8:	4603      	mov	r3, r0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b086      	sub	sp, #24
 800a5f6:	af02      	add	r7, sp, #8
 800a5f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a604:	2300      	movs	r3, #0
 800a606:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d002      	beq.n	800a618 <CDC_ProcessTransmission+0x26>
 800a612:	2b02      	cmp	r3, #2
 800a614:	d023      	beq.n	800a65e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a616:	e05e      	b.n	800a6d6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	8b12      	ldrh	r2, [r2, #24]
 800a620:	4293      	cmp	r3, r2
 800a622:	d90b      	bls.n	800a63c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	69d9      	ldr	r1, [r3, #28]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8b1a      	ldrh	r2, [r3, #24]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	7b5b      	ldrb	r3, [r3, #13]
 800a630:	2001      	movs	r0, #1
 800a632:	9000      	str	r0, [sp, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f001 fcea 	bl	800c00e <USBH_BulkSendData>
 800a63a:	e00b      	b.n	800a654 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a644:	b29a      	uxth	r2, r3
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	7b5b      	ldrb	r3, [r3, #13]
 800a64a:	2001      	movs	r0, #1
 800a64c:	9000      	str	r0, [sp, #0]
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 fcdd 	bl	800c00e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2202      	movs	r2, #2
 800a658:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a65c:	e03b      	b.n	800a6d6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	7b5b      	ldrb	r3, [r3, #13]
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f002 f801 	bl	800c66c <USBH_LL_GetURBState>
 800a66a:	4603      	mov	r3, r0
 800a66c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a66e:	7afb      	ldrb	r3, [r7, #11]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d128      	bne.n	800a6c6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	8b12      	ldrh	r2, [r2, #24]
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d90e      	bls.n	800a69e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	8b12      	ldrh	r2, [r2, #24]
 800a688:	1a9a      	subs	r2, r3, r2
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	8b12      	ldrh	r2, [r2, #24]
 800a696:	441a      	add	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	61da      	str	r2, [r3, #28]
 800a69c:	e002      	b.n	800a6a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d004      	beq.n	800a6b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a6b4:	e00e      	b.n	800a6d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f868 	bl	800a794 <USBH_CDC_TransmitCallback>
      break;
 800a6c4:	e006      	b.n	800a6d4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a6c6:	7afb      	ldrb	r3, [r7, #11]
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d103      	bne.n	800a6d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a6d4:	bf00      	nop
  }
}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b086      	sub	sp, #24
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d002      	beq.n	800a704 <CDC_ProcessReception+0x26>
 800a6fe:	2b04      	cmp	r3, #4
 800a700:	d00e      	beq.n	800a720 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a702:	e043      	b.n	800a78c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	6a19      	ldr	r1, [r3, #32]
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	8b5a      	ldrh	r2, [r3, #26]
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	7b1b      	ldrb	r3, [r3, #12]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f001 fca1 	bl	800c058 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2204      	movs	r2, #4
 800a71a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a71e:	e035      	b.n	800a78c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	7b1b      	ldrb	r3, [r3, #12]
 800a724:	4619      	mov	r1, r3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f001 ffa0 	bl	800c66c <USBH_LL_GetURBState>
 800a72c:	4603      	mov	r3, r0
 800a72e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a730:	7cfb      	ldrb	r3, [r7, #19]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d129      	bne.n	800a78a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	7b1b      	ldrb	r3, [r3, #12]
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f001 ff03 	bl	800c548 <USBH_LL_GetLastXferSize>
 800a742:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d016      	beq.n	800a77c <CDC_ProcessReception+0x9e>
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	8b5b      	ldrh	r3, [r3, #26]
 800a752:	461a      	mov	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4293      	cmp	r3, r2
 800a758:	d910      	bls.n	800a77c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1ad2      	subs	r2, r2, r3
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	6a1a      	ldr	r2, [r3, #32]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	441a      	add	r2, r3
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	2203      	movs	r2, #3
 800a776:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a77a:	e006      	b.n	800a78a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f80f 	bl	800a7a8 <USBH_CDC_ReceiveCallback>
      break;
 800a78a:	bf00      	nop
  }
}
 800a78c:	bf00      	nop
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e029      	b.n	800a83c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	79fa      	ldrb	r2, [r7, #7]
 800a7ec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 f81f 	bl	800a844 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f001 fdd3 	bl	800c3e0 <USBH_LL_Init>

  return USBH_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	e009      	b.n	800a86a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	33e0      	adds	r3, #224	; 0xe0
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	2200      	movs	r2, #0
 800a862:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	3301      	adds	r3, #1
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b0f      	cmp	r3, #15
 800a86e:	d9f2      	bls.n	800a856 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	e009      	b.n	800a88a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a880:	2200      	movs	r2, #0
 800a882:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	3301      	adds	r3, #1
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a890:	d3f1      	bcc.n	800a876 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2240      	movs	r2, #64	; 0x40
 800a8b6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	331c      	adds	r3, #28
 800a8e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f003 fdea 	bl	800e4c2 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a8f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f003 fde1 	bl	800e4c2 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f203 3326 	addw	r3, r3, #806	; 0x326
 800a906:	2212      	movs	r2, #18
 800a908:	2100      	movs	r1, #0
 800a90a:	4618      	mov	r0, r3
 800a90c:	f003 fdd9 	bl	800e4c2 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a916:	223e      	movs	r2, #62	; 0x3e
 800a918:	2100      	movs	r1, #0
 800a91a:	4618      	mov	r0, r3
 800a91c:	f003 fdd1 	bl	800e4c2 <memset>

  return USBH_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b085      	sub	sp, #20
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d016      	beq.n	800a96c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10e      	bne.n	800a966 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a94e:	1c59      	adds	r1, r3, #1
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	33de      	adds	r3, #222	; 0xde
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	73fb      	strb	r3, [r7, #15]
 800a964:	e004      	b.n	800a970 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a966:	2302      	movs	r3, #2
 800a968:	73fb      	strb	r3, [r7, #15]
 800a96a:	e001      	b.n	800a970 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a96c:	2302      	movs	r3, #2
 800a96e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	460b      	mov	r3, r1
 800a988:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a994:	78fa      	ldrb	r2, [r7, #3]
 800a996:	429a      	cmp	r2, r3
 800a998:	d204      	bcs.n	800a9a4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	78fa      	ldrb	r2, [r7, #3]
 800a99e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a9a2:	e001      	b.n	800a9a8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b087      	sub	sp, #28
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	4608      	mov	r0, r1
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	70fb      	strb	r3, [r7, #3]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	70bb      	strb	r3, [r7, #2]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a9de:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a9e0:	e025      	b.n	800aa2e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a9e2:	7dfb      	ldrb	r3, [r7, #23]
 800a9e4:	221a      	movs	r2, #26
 800a9e6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ea:	3308      	adds	r3, #8
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	3302      	adds	r3, #2
 800a9f2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	795b      	ldrb	r3, [r3, #5]
 800a9f8:	78fa      	ldrb	r2, [r7, #3]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d002      	beq.n	800aa04 <USBH_FindInterface+0x4e>
 800a9fe:	78fb      	ldrb	r3, [r7, #3]
 800aa00:	2bff      	cmp	r3, #255	; 0xff
 800aa02:	d111      	bne.n	800aa28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aa08:	78ba      	ldrb	r2, [r7, #2]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d002      	beq.n	800aa14 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aa0e:	78bb      	ldrb	r3, [r7, #2]
 800aa10:	2bff      	cmp	r3, #255	; 0xff
 800aa12:	d109      	bne.n	800aa28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aa18:	787a      	ldrb	r2, [r7, #1]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d002      	beq.n	800aa24 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aa1e:	787b      	ldrb	r3, [r7, #1]
 800aa20:	2bff      	cmp	r3, #255	; 0xff
 800aa22:	d101      	bne.n	800aa28 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	e006      	b.n	800aa36 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d9d6      	bls.n	800a9e2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800aa34:	23ff      	movs	r3, #255	; 0xff
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	371c      	adds	r7, #28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f001 fd04 	bl	800c458 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800aa50:	2101      	movs	r1, #1
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f001 fe1d 	bl	800c692 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b088      	sub	sp, #32
 800aa68:	af04      	add	r7, sp, #16
 800aa6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800aa70:	2300      	movs	r3, #0
 800aa72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d102      	bne.n	800aa86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2203      	movs	r2, #3
 800aa84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b0b      	cmp	r3, #11
 800aa8e:	f200 81be 	bhi.w	800ae0e <USBH_Process+0x3aa>
 800aa92:	a201      	add	r2, pc, #4	; (adr r2, 800aa98 <USBH_Process+0x34>)
 800aa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa98:	0800aac9 	.word	0x0800aac9
 800aa9c:	0800aafb 	.word	0x0800aafb
 800aaa0:	0800ab63 	.word	0x0800ab63
 800aaa4:	0800ada9 	.word	0x0800ada9
 800aaa8:	0800ae0f 	.word	0x0800ae0f
 800aaac:	0800ac07 	.word	0x0800ac07
 800aab0:	0800ad4f 	.word	0x0800ad4f
 800aab4:	0800ac3d 	.word	0x0800ac3d
 800aab8:	0800ac5d 	.word	0x0800ac5d
 800aabc:	0800ac7d 	.word	0x0800ac7d
 800aac0:	0800acc1 	.word	0x0800acc1
 800aac4:	0800ad91 	.word	0x0800ad91
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 819e 	beq.w	800ae12 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aadc:	20c8      	movs	r0, #200	; 0xc8
 800aade:	f001 fe22 	bl	800c726 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f001 fd15 	bl	800c512 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aaf8:	e18b      	b.n	800ae12 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d107      	bne.n	800ab14 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab12:	e18d      	b.n	800ae30 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab1e:	d914      	bls.n	800ab4a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ab26:	3301      	adds	r3, #1
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d903      	bls.n	800ab42 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	220d      	movs	r2, #13
 800ab3e:	701a      	strb	r2, [r3, #0]
      break;
 800ab40:	e176      	b.n	800ae30 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	701a      	strb	r2, [r3, #0]
      break;
 800ab48:	e172      	b.n	800ae30 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab50:	f103 020a 	add.w	r2, r3, #10
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ab5a:	200a      	movs	r0, #10
 800ab5c:	f001 fde3 	bl	800c726 <USBH_Delay>
      break;
 800ab60:	e166      	b.n	800ae30 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d005      	beq.n	800ab78 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab72:	2104      	movs	r1, #4
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ab78:	2064      	movs	r0, #100	; 0x64
 800ab7a:	f001 fdd4 	bl	800c726 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f001 fca0 	bl	800c4c4 <USBH_LL_GetSpeed>
 800ab84:	4603      	mov	r3, r0
 800ab86:	461a      	mov	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2205      	movs	r2, #5
 800ab92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ab94:	2100      	movs	r1, #0
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f001 faab 	bl	800c0f2 <USBH_AllocPipe>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	461a      	mov	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800aba4:	2180      	movs	r1, #128	; 0x80
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f001 faa3 	bl	800c0f2 <USBH_AllocPipe>
 800abac:	4603      	mov	r3, r0
 800abae:	461a      	mov	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	7919      	ldrb	r1, [r3, #4]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800abc8:	b292      	uxth	r2, r2
 800abca:	9202      	str	r2, [sp, #8]
 800abcc:	2200      	movs	r2, #0
 800abce:	9201      	str	r2, [sp, #4]
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	4603      	mov	r3, r0
 800abd4:	2280      	movs	r2, #128	; 0x80
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f001 fa5c 	bl	800c094 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	7959      	ldrb	r1, [r3, #5]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800abf0:	b292      	uxth	r2, r2
 800abf2:	9202      	str	r2, [sp, #8]
 800abf4:	2200      	movs	r2, #0
 800abf6:	9201      	str	r2, [sp, #4]
 800abf8:	9300      	str	r3, [sp, #0]
 800abfa:	4603      	mov	r3, r0
 800abfc:	2200      	movs	r2, #0
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f001 fa48 	bl	800c094 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac04:	e114      	b.n	800ae30 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f918 	bl	800ae3c <USBH_HandleEnum>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f040 80fe 	bne.w	800ae16 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d103      	bne.n	800ac34 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2208      	movs	r2, #8
 800ac30:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ac32:	e0f0      	b.n	800ae16 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2207      	movs	r2, #7
 800ac38:	701a      	strb	r2, [r3, #0]
      break;
 800ac3a:	e0ec      	b.n	800ae16 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 80e9 	beq.w	800ae1a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac4e:	2101      	movs	r1, #1
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2208      	movs	r2, #8
 800ac58:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ac5a:	e0de      	b.n	800ae1a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fc3f 	bl	800b4ea <USBH_SetCfg>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f040 80d5 	bne.w	800ae1e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2209      	movs	r2, #9
 800ac78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac7a:	e0d0      	b.n	800ae1e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ac82:	f003 0320 	and.w	r3, r3, #32
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d016      	beq.n	800acb8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fc4f 	bl	800b530 <USBH_SetFeature>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ac96:	7bbb      	ldrb	r3, [r7, #14]
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d103      	bne.n	800aca6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	220a      	movs	r2, #10
 800aca2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aca4:	e0bd      	b.n	800ae22 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800aca6:	7bbb      	ldrb	r3, [r7, #14]
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b03      	cmp	r3, #3
 800acac:	f040 80b9 	bne.w	800ae22 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	220a      	movs	r2, #10
 800acb4:	701a      	strb	r2, [r3, #0]
      break;
 800acb6:	e0b4      	b.n	800ae22 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	220a      	movs	r2, #10
 800acbc:	701a      	strb	r2, [r3, #0]
      break;
 800acbe:	e0b0      	b.n	800ae22 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f000 80ad 	beq.w	800ae26 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800acd4:	2300      	movs	r3, #0
 800acd6:	73fb      	strb	r3, [r7, #15]
 800acd8:	e016      	b.n	800ad08 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800acda:	7bfa      	ldrb	r2, [r7, #15]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	32de      	adds	r2, #222	; 0xde
 800ace0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace4:	791a      	ldrb	r2, [r3, #4]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800acec:	429a      	cmp	r2, r3
 800acee:	d108      	bne.n	800ad02 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800acf0:	7bfa      	ldrb	r2, [r7, #15]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	32de      	adds	r2, #222	; 0xde
 800acf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ad00:	e005      	b.n	800ad0e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ad02:	7bfb      	ldrb	r3, [r7, #15]
 800ad04:	3301      	adds	r3, #1
 800ad06:	73fb      	strb	r3, [r7, #15]
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d0e5      	beq.n	800acda <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d016      	beq.n	800ad46 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	4798      	blx	r3
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d109      	bne.n	800ad3e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2206      	movs	r2, #6
 800ad2e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad36:	2103      	movs	r1, #3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad3c:	e073      	b.n	800ae26 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	220d      	movs	r2, #13
 800ad42:	701a      	strb	r2, [r3, #0]
      break;
 800ad44:	e06f      	b.n	800ae26 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	220d      	movs	r2, #13
 800ad4a:	701a      	strb	r2, [r3, #0]
      break;
 800ad4c:	e06b      	b.n	800ae26 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d017      	beq.n	800ad88 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	4798      	blx	r3
 800ad64:	4603      	mov	r3, r0
 800ad66:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d103      	bne.n	800ad78 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	220b      	movs	r2, #11
 800ad74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad76:	e058      	b.n	800ae2a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d154      	bne.n	800ae2a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	220d      	movs	r2, #13
 800ad84:	701a      	strb	r2, [r3, #0]
      break;
 800ad86:	e050      	b.n	800ae2a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	220d      	movs	r2, #13
 800ad8c:	701a      	strb	r2, [r3, #0]
      break;
 800ad8e:	e04c      	b.n	800ae2a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d049      	beq.n	800ae2e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ada0:	695b      	ldr	r3, [r3, #20]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	4798      	blx	r3
      }
      break;
 800ada6:	e042      	b.n	800ae2e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7ff fd47 	bl	800a844 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d009      	beq.n	800add4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adda:	2b00      	cmp	r3, #0
 800addc:	d005      	beq.n	800adea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ade4:	2105      	movs	r1, #5
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d107      	bne.n	800ae06 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7ff fe1f 	bl	800aa42 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae04:	e014      	b.n	800ae30 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f001 fb26 	bl	800c458 <USBH_LL_Start>
      break;
 800ae0c:	e010      	b.n	800ae30 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800ae0e:	bf00      	nop
 800ae10:	e00e      	b.n	800ae30 <USBH_Process+0x3cc>
      break;
 800ae12:	bf00      	nop
 800ae14:	e00c      	b.n	800ae30 <USBH_Process+0x3cc>
      break;
 800ae16:	bf00      	nop
 800ae18:	e00a      	b.n	800ae30 <USBH_Process+0x3cc>
    break;
 800ae1a:	bf00      	nop
 800ae1c:	e008      	b.n	800ae30 <USBH_Process+0x3cc>
      break;
 800ae1e:	bf00      	nop
 800ae20:	e006      	b.n	800ae30 <USBH_Process+0x3cc>
      break;
 800ae22:	bf00      	nop
 800ae24:	e004      	b.n	800ae30 <USBH_Process+0x3cc>
      break;
 800ae26:	bf00      	nop
 800ae28:	e002      	b.n	800ae30 <USBH_Process+0x3cc>
      break;
 800ae2a:	bf00      	nop
 800ae2c:	e000      	b.n	800ae30 <USBH_Process+0x3cc>
      break;
 800ae2e:	bf00      	nop
  }
  return USBH_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop

0800ae3c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af04      	add	r7, sp, #16
 800ae42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ae44:	2301      	movs	r3, #1
 800ae46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	785b      	ldrb	r3, [r3, #1]
 800ae50:	2b07      	cmp	r3, #7
 800ae52:	f200 81c1 	bhi.w	800b1d8 <USBH_HandleEnum+0x39c>
 800ae56:	a201      	add	r2, pc, #4	; (adr r2, 800ae5c <USBH_HandleEnum+0x20>)
 800ae58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5c:	0800ae7d 	.word	0x0800ae7d
 800ae60:	0800af3b 	.word	0x0800af3b
 800ae64:	0800afa5 	.word	0x0800afa5
 800ae68:	0800b033 	.word	0x0800b033
 800ae6c:	0800b09d 	.word	0x0800b09d
 800ae70:	0800b10d 	.word	0x0800b10d
 800ae74:	0800b153 	.word	0x0800b153
 800ae78:	0800b199 	.word	0x0800b199
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ae7c:	2108      	movs	r1, #8
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fa50 	bl	800b324 <USBH_Get_DevDesc>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d130      	bne.n	800aef0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	7919      	ldrb	r1, [r3, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aeb2:	b292      	uxth	r2, r2
 800aeb4:	9202      	str	r2, [sp, #8]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	9201      	str	r2, [sp, #4]
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	4603      	mov	r3, r0
 800aebe:	2280      	movs	r2, #128	; 0x80
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f001 f8e7 	bl	800c094 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	7959      	ldrb	r1, [r3, #5]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aeda:	b292      	uxth	r2, r2
 800aedc:	9202      	str	r2, [sp, #8]
 800aede:	2200      	movs	r2, #0
 800aee0:	9201      	str	r2, [sp, #4]
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	4603      	mov	r3, r0
 800aee6:	2200      	movs	r2, #0
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f001 f8d3 	bl	800c094 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aeee:	e175      	b.n	800b1dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	2b03      	cmp	r3, #3
 800aef4:	f040 8172 	bne.w	800b1dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aefe:	3301      	adds	r3, #1
 800af00:	b2da      	uxtb	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af0e:	2b03      	cmp	r3, #3
 800af10:	d903      	bls.n	800af1a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	220d      	movs	r2, #13
 800af16:	701a      	strb	r2, [r3, #0]
      break;
 800af18:	e160      	b.n	800b1dc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	795b      	ldrb	r3, [r3, #5]
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f001 f907 	bl	800c134 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	791b      	ldrb	r3, [r3, #4]
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f001 f901 	bl	800c134 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	701a      	strb	r2, [r3, #0]
      break;
 800af38:	e150      	b.n	800b1dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800af3a:	2112      	movs	r1, #18
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f9f1 	bl	800b324 <USBH_Get_DevDesc>
 800af42:	4603      	mov	r3, r0
 800af44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af46:	7bbb      	ldrb	r3, [r7, #14]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d103      	bne.n	800af54 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2202      	movs	r2, #2
 800af50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800af52:	e145      	b.n	800b1e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	2b03      	cmp	r3, #3
 800af58:	f040 8142 	bne.w	800b1e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af62:	3301      	adds	r3, #1
 800af64:	b2da      	uxtb	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af72:	2b03      	cmp	r3, #3
 800af74:	d903      	bls.n	800af7e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	220d      	movs	r2, #13
 800af7a:	701a      	strb	r2, [r3, #0]
      break;
 800af7c:	e130      	b.n	800b1e0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	795b      	ldrb	r3, [r3, #5]
 800af82:	4619      	mov	r1, r3
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f001 f8d5 	bl	800c134 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	791b      	ldrb	r3, [r3, #4]
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f001 f8cf 	bl	800c134 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	701a      	strb	r2, [r3, #0]
      break;
 800afa2:	e11d      	b.n	800b1e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800afa4:	2101      	movs	r1, #1
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fa7b 	bl	800b4a2 <USBH_SetAddress>
 800afac:	4603      	mov	r3, r0
 800afae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800afb0:	7bbb      	ldrb	r3, [r7, #14]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d132      	bne.n	800b01c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800afb6:	2002      	movs	r0, #2
 800afb8:	f001 fbb5 	bl	800c726 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2203      	movs	r2, #3
 800afc8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	7919      	ldrb	r1, [r3, #4]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800afde:	b292      	uxth	r2, r2
 800afe0:	9202      	str	r2, [sp, #8]
 800afe2:	2200      	movs	r2, #0
 800afe4:	9201      	str	r2, [sp, #4]
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	4603      	mov	r3, r0
 800afea:	2280      	movs	r2, #128	; 0x80
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f001 f851 	bl	800c094 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	7959      	ldrb	r1, [r3, #5]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b006:	b292      	uxth	r2, r2
 800b008:	9202      	str	r2, [sp, #8]
 800b00a:	2200      	movs	r2, #0
 800b00c:	9201      	str	r2, [sp, #4]
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	4603      	mov	r3, r0
 800b012:	2200      	movs	r2, #0
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f001 f83d 	bl	800c094 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b01a:	e0e3      	b.n	800b1e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b01c:	7bbb      	ldrb	r3, [r7, #14]
 800b01e:	2b03      	cmp	r3, #3
 800b020:	f040 80e0 	bne.w	800b1e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	220d      	movs	r2, #13
 800b028:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	705a      	strb	r2, [r3, #1]
      break;
 800b030:	e0d8      	b.n	800b1e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b032:	2109      	movs	r1, #9
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f9a1 	bl	800b37c <USBH_Get_CfgDesc>
 800b03a:	4603      	mov	r3, r0
 800b03c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d103      	bne.n	800b04c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2204      	movs	r2, #4
 800b048:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b04a:	e0cd      	b.n	800b1e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
 800b04e:	2b03      	cmp	r3, #3
 800b050:	f040 80ca 	bne.w	800b1e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b05a:	3301      	adds	r3, #1
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d903      	bls.n	800b076 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	220d      	movs	r2, #13
 800b072:	701a      	strb	r2, [r3, #0]
      break;
 800b074:	e0b8      	b.n	800b1e8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	795b      	ldrb	r3, [r3, #5]
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 f859 	bl	800c134 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	791b      	ldrb	r3, [r3, #4]
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f001 f853 	bl	800c134 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	701a      	strb	r2, [r3, #0]
      break;
 800b09a:	e0a5      	b.n	800b1e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f969 	bl	800b37c <USBH_Get_CfgDesc>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d103      	bne.n	800b0bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2205      	movs	r2, #5
 800b0b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b0ba:	e097      	b.n	800b1ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	f040 8094 	bne.w	800b1ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0da:	2b03      	cmp	r3, #3
 800b0dc:	d903      	bls.n	800b0e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	220d      	movs	r2, #13
 800b0e2:	701a      	strb	r2, [r3, #0]
      break;
 800b0e4:	e082      	b.n	800b1ec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	795b      	ldrb	r3, [r3, #5]
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f001 f821 	bl	800c134 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	791b      	ldrb	r3, [r3, #4]
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f001 f81b 	bl	800c134 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	701a      	strb	r2, [r3, #0]
      break;
 800b10a:	e06f      	b.n	800b1ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b112:	2b00      	cmp	r3, #0
 800b114:	d019      	beq.n	800b14a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b122:	23ff      	movs	r3, #255	; 0xff
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f953 	bl	800b3d0 <USBH_Get_StringDesc>
 800b12a:	4603      	mov	r3, r0
 800b12c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d103      	bne.n	800b13c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2206      	movs	r2, #6
 800b138:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b13a:	e059      	b.n	800b1f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b13c:	7bbb      	ldrb	r3, [r7, #14]
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d156      	bne.n	800b1f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2206      	movs	r2, #6
 800b146:	705a      	strb	r2, [r3, #1]
      break;
 800b148:	e052      	b.n	800b1f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2206      	movs	r2, #6
 800b14e:	705a      	strb	r2, [r3, #1]
      break;
 800b150:	e04e      	b.n	800b1f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d019      	beq.n	800b190 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b168:	23ff      	movs	r3, #255	; 0xff
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f930 	bl	800b3d0 <USBH_Get_StringDesc>
 800b170:	4603      	mov	r3, r0
 800b172:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b174:	7bbb      	ldrb	r3, [r7, #14]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d103      	bne.n	800b182 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2207      	movs	r2, #7
 800b17e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b180:	e038      	b.n	800b1f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b182:	7bbb      	ldrb	r3, [r7, #14]
 800b184:	2b03      	cmp	r3, #3
 800b186:	d135      	bne.n	800b1f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2207      	movs	r2, #7
 800b18c:	705a      	strb	r2, [r3, #1]
      break;
 800b18e:	e031      	b.n	800b1f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2207      	movs	r2, #7
 800b194:	705a      	strb	r2, [r3, #1]
      break;
 800b196:	e02d      	b.n	800b1f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d017      	beq.n	800b1d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b1ae:	23ff      	movs	r3, #255	; 0xff
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f90d 	bl	800b3d0 <USBH_Get_StringDesc>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d102      	bne.n	800b1c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b1c4:	e018      	b.n	800b1f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1c6:	7bbb      	ldrb	r3, [r7, #14]
 800b1c8:	2b03      	cmp	r3, #3
 800b1ca:	d115      	bne.n	800b1f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d0:	e012      	b.n	800b1f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d6:	e00f      	b.n	800b1f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b1d8:	bf00      	nop
 800b1da:	e00e      	b.n	800b1fa <USBH_HandleEnum+0x3be>
      break;
 800b1dc:	bf00      	nop
 800b1de:	e00c      	b.n	800b1fa <USBH_HandleEnum+0x3be>
      break;
 800b1e0:	bf00      	nop
 800b1e2:	e00a      	b.n	800b1fa <USBH_HandleEnum+0x3be>
      break;
 800b1e4:	bf00      	nop
 800b1e6:	e008      	b.n	800b1fa <USBH_HandleEnum+0x3be>
      break;
 800b1e8:	bf00      	nop
 800b1ea:	e006      	b.n	800b1fa <USBH_HandleEnum+0x3be>
      break;
 800b1ec:	bf00      	nop
 800b1ee:	e004      	b.n	800b1fa <USBH_HandleEnum+0x3be>
      break;
 800b1f0:	bf00      	nop
 800b1f2:	e002      	b.n	800b1fa <USBH_HandleEnum+0x3be>
      break;
 800b1f4:	bf00      	nop
 800b1f6:	e000      	b.n	800b1fa <USBH_HandleEnum+0x3be>
      break;
 800b1f8:	bf00      	nop
  }
  return Status;
 800b1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b216:	bf00      	nop
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f804 	bl	800b246 <USBH_HandleSof>
}
 800b23e:	bf00      	nop
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b082      	sub	sp, #8
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	b2db      	uxtb	r3, r3
 800b254:	2b0b      	cmp	r3, #11
 800b256:	d10a      	bne.n	800b26e <USBH_HandleSof+0x28>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d005      	beq.n	800b26e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	4798      	blx	r3
  }
}
 800b26e:	bf00      	nop
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b276:	b480      	push	{r7}
 800b278:	b083      	sub	sp, #12
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b286:	bf00      	nop
}
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b292:	b480      	push	{r7}
 800b294:	b083      	sub	sp, #12
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b2a2:	bf00      	nop
}
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b083      	sub	sp, #12
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f001 f8c6 	bl	800c48e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	791b      	ldrb	r3, [r3, #4]
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 ff13 	bl	800c134 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	795b      	ldrb	r3, [r3, #5]
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 ff0d 	bl	800c134 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b086      	sub	sp, #24
 800b328:	af02      	add	r7, sp, #8
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b330:	887b      	ldrh	r3, [r7, #2]
 800b332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b336:	d901      	bls.n	800b33c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b338:	2303      	movs	r3, #3
 800b33a:	e01b      	b.n	800b374 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b342:	887b      	ldrh	r3, [r7, #2]
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	4613      	mov	r3, r2
 800b348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b34c:	2100      	movs	r1, #0
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f872 	bl	800b438 <USBH_GetDescriptor>
 800b354:	4603      	mov	r3, r0
 800b356:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b358:	7bfb      	ldrb	r3, [r7, #15]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d109      	bne.n	800b372 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b364:	887a      	ldrh	r2, [r7, #2]
 800b366:	4619      	mov	r1, r3
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f929 	bl	800b5c0 <USBH_ParseDevDesc>
 800b36e:	4603      	mov	r3, r0
 800b370:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af02      	add	r7, sp, #8
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	331c      	adds	r3, #28
 800b38c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b38e:	887b      	ldrh	r3, [r7, #2]
 800b390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b394:	d901      	bls.n	800b39a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b396:	2303      	movs	r3, #3
 800b398:	e016      	b.n	800b3c8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b39a:	887b      	ldrh	r3, [r7, #2]
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f846 	bl	800b438 <USBH_GetDescriptor>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d107      	bne.n	800b3c6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b3b6:	887b      	ldrh	r3, [r7, #2]
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	68b9      	ldr	r1, [r7, #8]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 f9b3 	bl	800b728 <USBH_ParseCfgDesc>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af02      	add	r7, sp, #8
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	607a      	str	r2, [r7, #4]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	460b      	mov	r3, r1
 800b3de:	72fb      	strb	r3, [r7, #11]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b3e4:	893b      	ldrh	r3, [r7, #8]
 800b3e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ea:	d802      	bhi.n	800b3f2 <USBH_Get_StringDesc+0x22>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	e01c      	b.n	800b430 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b3f6:	7afb      	ldrb	r3, [r7, #11]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b3fe:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b406:	893b      	ldrh	r3, [r7, #8]
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	460b      	mov	r3, r1
 800b40c:	2100      	movs	r1, #0
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f000 f812 	bl	800b438 <USBH_GetDescriptor>
 800b414:	4603      	mov	r3, r0
 800b416:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d107      	bne.n	800b42e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b424:	893a      	ldrh	r2, [r7, #8]
 800b426:	6879      	ldr	r1, [r7, #4]
 800b428:	4618      	mov	r0, r3
 800b42a:	f000 fb93 	bl	800bb54 <USBH_ParseStringDesc>
  }

  return status;
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3718      	adds	r7, #24
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	607b      	str	r3, [r7, #4]
 800b442:	460b      	mov	r3, r1
 800b444:	72fb      	strb	r3, [r7, #11]
 800b446:	4613      	mov	r3, r2
 800b448:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	789b      	ldrb	r3, [r3, #2]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d11c      	bne.n	800b48c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b452:	7afb      	ldrb	r3, [r7, #11]
 800b454:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2206      	movs	r2, #6
 800b462:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	893a      	ldrh	r2, [r7, #8]
 800b468:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b46a:	893b      	ldrh	r3, [r7, #8]
 800b46c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b474:	d104      	bne.n	800b480 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f240 4209 	movw	r2, #1033	; 0x409
 800b47c:	829a      	strh	r2, [r3, #20]
 800b47e:	e002      	b.n	800b486 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	8b3a      	ldrh	r2, [r7, #24]
 800b48a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b48c:	8b3b      	ldrh	r3, [r7, #24]
 800b48e:	461a      	mov	r2, r3
 800b490:	6879      	ldr	r1, [r7, #4]
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f000 fbac 	bl	800bbf0 <USBH_CtlReq>
 800b498:	4603      	mov	r3, r0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b082      	sub	sp, #8
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	789b      	ldrb	r3, [r3, #2]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d10f      	bne.n	800b4d6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2205      	movs	r2, #5
 800b4c0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b4c2:	78fb      	ldrb	r3, [r7, #3]
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2100      	movs	r1, #0
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 fb88 	bl	800bbf0 <USBH_CtlReq>
 800b4e0:	4603      	mov	r3, r0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	789b      	ldrb	r3, [r3, #2]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d10e      	bne.n	800b51c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2209      	movs	r2, #9
 800b508:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	887a      	ldrh	r2, [r7, #2]
 800b50e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b51c:	2200      	movs	r2, #0
 800b51e:	2100      	movs	r1, #0
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fb65 	bl	800bbf0 <USBH_CtlReq>
 800b526:	4603      	mov	r3, r0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3708      	adds	r7, #8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	789b      	ldrb	r3, [r3, #2]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d10f      	bne.n	800b564 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2203      	movs	r2, #3
 800b54e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	b29a      	uxth	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b564:	2200      	movs	r2, #0
 800b566:	2100      	movs	r1, #0
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fb41 	bl	800bbf0 <USBH_CtlReq>
 800b56e:	4603      	mov	r3, r0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	460b      	mov	r3, r1
 800b582:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	789b      	ldrb	r3, [r3, #2]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d10f      	bne.n	800b5ac <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2202      	movs	r2, #2
 800b590:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b59e:	78fb      	ldrb	r3, [r7, #3]
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fb1d 	bl	800bbf0 <USBH_CtlReq>
 800b5b6:	4603      	mov	r3, r0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b087      	sub	sp, #28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b5d4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	e098      	b.n	800b716 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	781a      	ldrb	r2, [r3, #0]
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	785a      	ldrb	r2, [r3, #1]
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	3302      	adds	r3, #2
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	3303      	adds	r3, #3
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	b29b      	uxth	r3, r3
 800b604:	021b      	lsls	r3, r3, #8
 800b606:	b29b      	uxth	r3, r3
 800b608:	4313      	orrs	r3, r2
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	791a      	ldrb	r2, [r3, #4]
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	795a      	ldrb	r2, [r3, #5]
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	799a      	ldrb	r2, [r3, #6]
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	79da      	ldrb	r2, [r3, #7]
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b636:	2b00      	cmp	r3, #0
 800b638:	d004      	beq.n	800b644 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b640:	2b01      	cmp	r3, #1
 800b642:	d11b      	bne.n	800b67c <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	79db      	ldrb	r3, [r3, #7]
 800b648:	2b20      	cmp	r3, #32
 800b64a:	dc0f      	bgt.n	800b66c <USBH_ParseDevDesc+0xac>
 800b64c:	2b08      	cmp	r3, #8
 800b64e:	db0f      	blt.n	800b670 <USBH_ParseDevDesc+0xb0>
 800b650:	3b08      	subs	r3, #8
 800b652:	4a34      	ldr	r2, [pc, #208]	; (800b724 <USBH_ParseDevDesc+0x164>)
 800b654:	fa22 f303 	lsr.w	r3, r2, r3
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bf14      	ite	ne
 800b660:	2301      	movne	r3, #1
 800b662:	2300      	moveq	r3, #0
 800b664:	b2db      	uxtb	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	d106      	bne.n	800b678 <USBH_ParseDevDesc+0xb8>
 800b66a:	e001      	b.n	800b670 <USBH_ParseDevDesc+0xb0>
 800b66c:	2b40      	cmp	r3, #64	; 0x40
 800b66e:	d003      	beq.n	800b678 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2208      	movs	r2, #8
 800b674:	71da      	strb	r2, [r3, #7]
        break;
 800b676:	e000      	b.n	800b67a <USBH_ParseDevDesc+0xba>
        break;
 800b678:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b67a:	e00e      	b.n	800b69a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b682:	2b02      	cmp	r3, #2
 800b684:	d107      	bne.n	800b696 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	79db      	ldrb	r3, [r3, #7]
 800b68a:	2b08      	cmp	r3, #8
 800b68c:	d005      	beq.n	800b69a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	2208      	movs	r2, #8
 800b692:	71da      	strb	r2, [r3, #7]
 800b694:	e001      	b.n	800b69a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b696:	2303      	movs	r3, #3
 800b698:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b69a:	88fb      	ldrh	r3, [r7, #6]
 800b69c:	2b08      	cmp	r3, #8
 800b69e:	d939      	bls.n	800b714 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	3308      	adds	r3, #8
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	3309      	adds	r3, #9
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	021b      	lsls	r3, r3, #8
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	330a      	adds	r3, #10
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	330b      	adds	r3, #11
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	021b      	lsls	r3, r3, #8
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	330c      	adds	r3, #12
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	330d      	adds	r3, #13
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	7b9a      	ldrb	r2, [r3, #14]
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	7bda      	ldrb	r2, [r3, #15]
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	7c1a      	ldrb	r2, [r3, #16]
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	7c5a      	ldrb	r2, [r3, #17]
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b714:	7dfb      	ldrb	r3, [r7, #23]
}
 800b716:	4618      	mov	r0, r3
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	01000101 	.word	0x01000101

0800b728 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b08c      	sub	sp, #48	; 0x30
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	4613      	mov	r3, r2
 800b734:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b73c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b744:	2300      	movs	r3, #0
 800b746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b74a:	2300      	movs	r3, #0
 800b74c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b756:	2302      	movs	r3, #2
 800b758:	e0db      	b.n	800b912 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	781a      	ldrb	r2, [r3, #0]
 800b762:	6a3b      	ldr	r3, [r7, #32]
 800b764:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	785a      	ldrb	r2, [r3, #1]
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	3302      	adds	r3, #2
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	b29a      	uxth	r2, r3
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	3303      	adds	r3, #3
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	021b      	lsls	r3, r3, #8
 800b780:	b29b      	uxth	r3, r3
 800b782:	4313      	orrs	r3, r2
 800b784:	b29b      	uxth	r3, r3
 800b786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b78a:	bf28      	it	cs
 800b78c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b790:	b29a      	uxth	r2, r3
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	791a      	ldrb	r2, [r3, #4]
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	795a      	ldrb	r2, [r3, #5]
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	799a      	ldrb	r2, [r3, #6]
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	79da      	ldrb	r2, [r3, #7]
 800b7b2:	6a3b      	ldr	r3, [r7, #32]
 800b7b4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	7a1a      	ldrb	r2, [r3, #8]
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b7be:	6a3b      	ldr	r3, [r7, #32]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	2b09      	cmp	r3, #9
 800b7c4:	d002      	beq.n	800b7cc <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b7c6:	6a3b      	ldr	r3, [r7, #32]
 800b7c8:	2209      	movs	r2, #9
 800b7ca:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b7cc:	88fb      	ldrh	r3, [r7, #6]
 800b7ce:	2b09      	cmp	r3, #9
 800b7d0:	f240 809d 	bls.w	800b90e <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800b7d4:	2309      	movs	r3, #9
 800b7d6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b7dc:	e081      	b.n	800b8e2 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b7de:	f107 0316 	add.w	r3, r7, #22
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7e6:	f000 f9e8 	bl	800bbba <USBH_GetNextDesc>
 800b7ea:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ee:	785b      	ldrb	r3, [r3, #1]
 800b7f0:	2b04      	cmp	r3, #4
 800b7f2:	d176      	bne.n	800b8e2 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b09      	cmp	r3, #9
 800b7fa:	d002      	beq.n	800b802 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	2209      	movs	r2, #9
 800b800:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b806:	221a      	movs	r2, #26
 800b808:	fb02 f303 	mul.w	r3, r2, r3
 800b80c:	3308      	adds	r3, #8
 800b80e:	6a3a      	ldr	r2, [r7, #32]
 800b810:	4413      	add	r3, r2
 800b812:	3302      	adds	r3, #2
 800b814:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b818:	69f8      	ldr	r0, [r7, #28]
 800b81a:	f000 f87e 	bl	800b91a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b81e:	2300      	movs	r3, #0
 800b820:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b824:	2300      	movs	r3, #0
 800b826:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b828:	e043      	b.n	800b8b2 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b82a:	f107 0316 	add.w	r3, r7, #22
 800b82e:	4619      	mov	r1, r3
 800b830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b832:	f000 f9c2 	bl	800bbba <USBH_GetNextDesc>
 800b836:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83a:	785b      	ldrb	r3, [r3, #1]
 800b83c:	2b05      	cmp	r3, #5
 800b83e:	d138      	bne.n	800b8b2 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	795b      	ldrb	r3, [r3, #5]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d113      	bne.n	800b870 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d003      	beq.n	800b858 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	799b      	ldrb	r3, [r3, #6]
 800b854:	2b03      	cmp	r3, #3
 800b856:	d10b      	bne.n	800b870 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	79db      	ldrb	r3, [r3, #7]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10b      	bne.n	800b878 <USBH_ParseCfgDesc+0x150>
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	2b09      	cmp	r3, #9
 800b866:	d007      	beq.n	800b878 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	2209      	movs	r2, #9
 800b86c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b86e:	e003      	b.n	800b878 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b872:	2207      	movs	r2, #7
 800b874:	701a      	strb	r2, [r3, #0]
 800b876:	e000      	b.n	800b87a <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b878:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b87a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b87e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b882:	3201      	adds	r2, #1
 800b884:	00d2      	lsls	r2, r2, #3
 800b886:	211a      	movs	r1, #26
 800b888:	fb01 f303 	mul.w	r3, r1, r3
 800b88c:	4413      	add	r3, r2
 800b88e:	3308      	adds	r3, #8
 800b890:	6a3a      	ldr	r2, [r7, #32]
 800b892:	4413      	add	r3, r2
 800b894:	3304      	adds	r3, #4
 800b896:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b89a:	69b9      	ldr	r1, [r7, #24]
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 f870 	bl	800b982 <USBH_ParseEPDesc>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b8a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	791b      	ldrb	r3, [r3, #4]
 800b8b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d204      	bcs.n	800b8c8 <USBH_ParseCfgDesc+0x1a0>
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	885a      	ldrh	r2, [r3, #2]
 800b8c2:	8afb      	ldrh	r3, [r7, #22]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d8b0      	bhi.n	800b82a <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	791b      	ldrb	r3, [r3, #4]
 800b8cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d201      	bcs.n	800b8d8 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	e01c      	b.n	800b912 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800b8d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8dc:	3301      	adds	r3, #1
 800b8de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b8e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d805      	bhi.n	800b8f6 <USBH_ParseCfgDesc+0x1ce>
 800b8ea:	6a3b      	ldr	r3, [r7, #32]
 800b8ec:	885a      	ldrh	r2, [r3, #2]
 800b8ee:	8afb      	ldrh	r3, [r7, #22]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	f63f af74 	bhi.w	800b7de <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b8f6:	6a3b      	ldr	r3, [r7, #32]
 800b8f8:	791b      	ldrb	r3, [r3, #4]
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	bf28      	it	cs
 800b8fe:	2302      	movcs	r3, #2
 800b900:	b2db      	uxtb	r3, r3
 800b902:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b906:	429a      	cmp	r2, r3
 800b908:	d201      	bcs.n	800b90e <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800b90a:	2303      	movs	r3, #3
 800b90c:	e001      	b.n	800b912 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800b90e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b912:	4618      	mov	r0, r3
 800b914:	3730      	adds	r7, #48	; 0x30
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b083      	sub	sp, #12
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	781a      	ldrb	r2, [r3, #0]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	785a      	ldrb	r2, [r3, #1]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	789a      	ldrb	r2, [r3, #2]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	78da      	ldrb	r2, [r3, #3]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	3304      	adds	r3, #4
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	bf28      	it	cs
 800b94e:	2302      	movcs	r3, #2
 800b950:	b2da      	uxtb	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	795a      	ldrb	r2, [r3, #5]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	799a      	ldrb	r2, [r3, #6]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	79da      	ldrb	r2, [r3, #7]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	7a1a      	ldrb	r2, [r3, #8]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	721a      	strb	r2, [r3, #8]
}
 800b976:	bf00      	nop
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b982:	b480      	push	{r7}
 800b984:	b087      	sub	sp, #28
 800b986:	af00      	add	r7, sp, #0
 800b988:	60f8      	str	r0, [r7, #12]
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	781a      	ldrb	r2, [r3, #0]
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	785a      	ldrb	r2, [r3, #1]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	789a      	ldrb	r2, [r3, #2]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	78da      	ldrb	r2, [r3, #3]
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	3305      	adds	r3, #5
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	799a      	ldrb	r2, [r3, #6]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	889b      	ldrh	r3, [r3, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d009      	beq.n	800b9f2 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b9e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9e6:	d804      	bhi.n	800b9f2 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b9ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f0:	d901      	bls.n	800b9f6 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d136      	bne.n	800ba6e <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	78db      	ldrb	r3, [r3, #3]
 800ba04:	f003 0303 	and.w	r3, r3, #3
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d108      	bne.n	800ba1e <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	889b      	ldrh	r3, [r3, #4]
 800ba10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba14:	f240 8097 	bls.w	800bb46 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	75fb      	strb	r3, [r7, #23]
 800ba1c:	e093      	b.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	78db      	ldrb	r3, [r3, #3]
 800ba22:	f003 0303 	and.w	r3, r3, #3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d107      	bne.n	800ba3a <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	889b      	ldrh	r3, [r3, #4]
 800ba2e:	2b40      	cmp	r3, #64	; 0x40
 800ba30:	f240 8089 	bls.w	800bb46 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800ba34:	2303      	movs	r3, #3
 800ba36:	75fb      	strb	r3, [r7, #23]
 800ba38:	e085      	b.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	78db      	ldrb	r3, [r3, #3]
 800ba3e:	f003 0303 	and.w	r3, r3, #3
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d005      	beq.n	800ba52 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	78db      	ldrb	r3, [r3, #3]
 800ba4a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ba4e:	2b03      	cmp	r3, #3
 800ba50:	d10a      	bne.n	800ba68 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	799b      	ldrb	r3, [r3, #6]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <USBH_ParseEPDesc+0xe0>
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	799b      	ldrb	r3, [r3, #6]
 800ba5e:	2b10      	cmp	r3, #16
 800ba60:	d970      	bls.n	800bb44 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ba62:	2303      	movs	r3, #3
 800ba64:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ba66:	e06d      	b.n	800bb44 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ba68:	2303      	movs	r3, #3
 800ba6a:	75fb      	strb	r3, [r7, #23]
 800ba6c:	e06b      	b.n	800bb46 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d13c      	bne.n	800baf2 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	78db      	ldrb	r3, [r3, #3]
 800ba7c:	f003 0303 	and.w	r3, r3, #3
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d005      	beq.n	800ba90 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	78db      	ldrb	r3, [r3, #3]
 800ba88:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d106      	bne.n	800ba9e <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	889b      	ldrh	r3, [r3, #4]
 800ba94:	2b40      	cmp	r3, #64	; 0x40
 800ba96:	d956      	bls.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800ba98:	2303      	movs	r3, #3
 800ba9a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ba9c:	e053      	b.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	78db      	ldrb	r3, [r3, #3]
 800baa2:	f003 0303 	and.w	r3, r3, #3
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d10e      	bne.n	800bac8 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	799b      	ldrb	r3, [r3, #6]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d007      	beq.n	800bac2 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800bab6:	2b10      	cmp	r3, #16
 800bab8:	d803      	bhi.n	800bac2 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800babe:	2b40      	cmp	r3, #64	; 0x40
 800bac0:	d941      	bls.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bac2:	2303      	movs	r3, #3
 800bac4:	75fb      	strb	r3, [r7, #23]
 800bac6:	e03e      	b.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	78db      	ldrb	r3, [r3, #3]
 800bacc:	f003 0303 	and.w	r3, r3, #3
 800bad0:	2b03      	cmp	r3, #3
 800bad2:	d10b      	bne.n	800baec <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	799b      	ldrb	r3, [r3, #6]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d004      	beq.n	800bae6 <USBH_ParseEPDesc+0x164>
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	889b      	ldrh	r3, [r3, #4]
 800bae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bae4:	d32f      	bcc.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bae6:	2303      	movs	r3, #3
 800bae8:	75fb      	strb	r3, [r7, #23]
 800baea:	e02c      	b.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800baec:	2303      	movs	r3, #3
 800baee:	75fb      	strb	r3, [r7, #23]
 800baf0:	e029      	b.n	800bb46 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d120      	bne.n	800bb3e <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	78db      	ldrb	r3, [r3, #3]
 800bb00:	f003 0303 	and.w	r3, r3, #3
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d106      	bne.n	800bb16 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	889b      	ldrh	r3, [r3, #4]
 800bb0c:	2b08      	cmp	r3, #8
 800bb0e:	d01a      	beq.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bb10:	2303      	movs	r3, #3
 800bb12:	75fb      	strb	r3, [r7, #23]
 800bb14:	e017      	b.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	78db      	ldrb	r3, [r3, #3]
 800bb1a:	f003 0303 	and.w	r3, r3, #3
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d10a      	bne.n	800bb38 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	799b      	ldrb	r3, [r3, #6]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <USBH_ParseEPDesc+0x1b0>
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	889b      	ldrh	r3, [r3, #4]
 800bb2e:	2b08      	cmp	r3, #8
 800bb30:	d909      	bls.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bb32:	2303      	movs	r3, #3
 800bb34:	75fb      	strb	r3, [r7, #23]
 800bb36:	e006      	b.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	75fb      	strb	r3, [r7, #23]
 800bb3c:	e003      	b.n	800bb46 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	75fb      	strb	r3, [r7, #23]
 800bb42:	e000      	b.n	800bb46 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bb44:	bf00      	nop
  }

  return status;
 800bb46:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	371c      	adds	r7, #28
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3301      	adds	r3, #1
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	d120      	bne.n	800bbae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	1e9a      	subs	r2, r3, #2
 800bb72:	88fb      	ldrh	r3, [r7, #6]
 800bb74:	4293      	cmp	r3, r2
 800bb76:	bf28      	it	cs
 800bb78:	4613      	movcs	r3, r2
 800bb7a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	3302      	adds	r3, #2
 800bb80:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bb82:	2300      	movs	r3, #0
 800bb84:	82fb      	strh	r3, [r7, #22]
 800bb86:	e00b      	b.n	800bba0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bb88:	8afb      	ldrh	r3, [r7, #22]
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	781a      	ldrb	r2, [r3, #0]
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	3301      	adds	r3, #1
 800bb98:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bb9a:	8afb      	ldrh	r3, [r7, #22]
 800bb9c:	3302      	adds	r3, #2
 800bb9e:	82fb      	strh	r3, [r7, #22]
 800bba0:	8afa      	ldrh	r2, [r7, #22]
 800bba2:	8abb      	ldrh	r3, [r7, #20]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d3ef      	bcc.n	800bb88 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	701a      	strb	r2, [r3, #0]
  }
}
 800bbae:	bf00      	nop
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b085      	sub	sp, #20
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	881a      	ldrh	r2, [r3, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	4413      	add	r3, r2
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4413      	add	r3, r2
 800bbe0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	789b      	ldrb	r3, [r3, #2]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d002      	beq.n	800bc10 <USBH_CtlReq+0x20>
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d00f      	beq.n	800bc2e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bc0e:	e027      	b.n	800bc60 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	88fa      	ldrh	r2, [r7, #6]
 800bc1a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2202      	movs	r2, #2
 800bc26:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	75fb      	strb	r3, [r7, #23]
      break;
 800bc2c:	e018      	b.n	800bc60 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f000 f81c 	bl	800bc6c <USBH_HandleControl>
 800bc34:	4603      	mov	r3, r0
 800bc36:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d002      	beq.n	800bc44 <USBH_CtlReq+0x54>
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d106      	bne.n	800bc52 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2201      	movs	r2, #1
 800bc48:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	761a      	strb	r2, [r3, #24]
      break;
 800bc50:	e005      	b.n	800bc5e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d102      	bne.n	800bc5e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	709a      	strb	r2, [r3, #2]
      break;
 800bc5e:	bf00      	nop
  }
  return status;
 800bc60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af02      	add	r7, sp, #8
 800bc72:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bc74:	2301      	movs	r3, #1
 800bc76:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	7e1b      	ldrb	r3, [r3, #24]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	2b0a      	cmp	r3, #10
 800bc84:	f200 8156 	bhi.w	800bf34 <USBH_HandleControl+0x2c8>
 800bc88:	a201      	add	r2, pc, #4	; (adr r2, 800bc90 <USBH_HandleControl+0x24>)
 800bc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8e:	bf00      	nop
 800bc90:	0800bcbd 	.word	0x0800bcbd
 800bc94:	0800bcd7 	.word	0x0800bcd7
 800bc98:	0800bd41 	.word	0x0800bd41
 800bc9c:	0800bd67 	.word	0x0800bd67
 800bca0:	0800bd9f 	.word	0x0800bd9f
 800bca4:	0800bdc9 	.word	0x0800bdc9
 800bca8:	0800be1b 	.word	0x0800be1b
 800bcac:	0800be3d 	.word	0x0800be3d
 800bcb0:	0800be79 	.word	0x0800be79
 800bcb4:	0800be9f 	.word	0x0800be9f
 800bcb8:	0800bedd 	.word	0x0800bedd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f103 0110 	add.w	r1, r3, #16
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	795b      	ldrb	r3, [r3, #5]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 f943 	bl	800bf54 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	761a      	strb	r2, [r3, #24]
      break;
 800bcd4:	e139      	b.n	800bf4a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	795b      	ldrb	r3, [r3, #5]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fcc5 	bl	800c66c <USBH_LL_GetURBState>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d11e      	bne.n	800bd2a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	7c1b      	ldrb	r3, [r3, #16]
 800bcf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bcf4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	8adb      	ldrh	r3, [r3, #22]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00a      	beq.n	800bd14 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bcfe:	7b7b      	ldrb	r3, [r7, #13]
 800bd00:	2b80      	cmp	r3, #128	; 0x80
 800bd02:	d103      	bne.n	800bd0c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2203      	movs	r2, #3
 800bd08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd0a:	e115      	b.n	800bf38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2205      	movs	r2, #5
 800bd10:	761a      	strb	r2, [r3, #24]
      break;
 800bd12:	e111      	b.n	800bf38 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bd14:	7b7b      	ldrb	r3, [r7, #13]
 800bd16:	2b80      	cmp	r3, #128	; 0x80
 800bd18:	d103      	bne.n	800bd22 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2209      	movs	r2, #9
 800bd1e:	761a      	strb	r2, [r3, #24]
      break;
 800bd20:	e10a      	b.n	800bf38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2207      	movs	r2, #7
 800bd26:	761a      	strb	r2, [r3, #24]
      break;
 800bd28:	e106      	b.n	800bf38 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bd2a:	7bbb      	ldrb	r3, [r7, #14]
 800bd2c:	2b04      	cmp	r3, #4
 800bd2e:	d003      	beq.n	800bd38 <USBH_HandleControl+0xcc>
 800bd30:	7bbb      	ldrb	r3, [r7, #14]
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	f040 8100 	bne.w	800bf38 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	220b      	movs	r2, #11
 800bd3c:	761a      	strb	r2, [r3, #24]
      break;
 800bd3e:	e0fb      	b.n	800bf38 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6899      	ldr	r1, [r3, #8]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	899a      	ldrh	r2, [r3, #12]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	791b      	ldrb	r3, [r3, #4]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f93a 	bl	800bfd2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2204      	movs	r2, #4
 800bd62:	761a      	strb	r2, [r3, #24]
      break;
 800bd64:	e0f1      	b.n	800bf4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	791b      	ldrb	r3, [r3, #4]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fc7d 	bl	800c66c <USBH_LL_GetURBState>
 800bd72:	4603      	mov	r3, r0
 800bd74:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bd76:	7bbb      	ldrb	r3, [r7, #14]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d102      	bne.n	800bd82 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2209      	movs	r2, #9
 800bd80:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	2b05      	cmp	r3, #5
 800bd86:	d102      	bne.n	800bd8e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd8c:	e0d6      	b.n	800bf3c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bd8e:	7bbb      	ldrb	r3, [r7, #14]
 800bd90:	2b04      	cmp	r3, #4
 800bd92:	f040 80d3 	bne.w	800bf3c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	220b      	movs	r2, #11
 800bd9a:	761a      	strb	r2, [r3, #24]
      break;
 800bd9c:	e0ce      	b.n	800bf3c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6899      	ldr	r1, [r3, #8]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	899a      	ldrh	r2, [r3, #12]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	795b      	ldrb	r3, [r3, #5]
 800bdaa:	2001      	movs	r0, #1
 800bdac:	9000      	str	r0, [sp, #0]
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 f8ea 	bl	800bf88 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2206      	movs	r2, #6
 800bdc4:	761a      	strb	r2, [r3, #24]
      break;
 800bdc6:	e0c0      	b.n	800bf4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	795b      	ldrb	r3, [r3, #5]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fc4c 	bl	800c66c <USBH_LL_GetURBState>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bdd8:	7bbb      	ldrb	r3, [r7, #14]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d103      	bne.n	800bde6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2207      	movs	r2, #7
 800bde2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bde4:	e0ac      	b.n	800bf40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bde6:	7bbb      	ldrb	r3, [r7, #14]
 800bde8:	2b05      	cmp	r3, #5
 800bdea:	d105      	bne.n	800bdf8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	220c      	movs	r2, #12
 800bdf0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	73fb      	strb	r3, [r7, #15]
      break;
 800bdf6:	e0a3      	b.n	800bf40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bdf8:	7bbb      	ldrb	r3, [r7, #14]
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d103      	bne.n	800be06 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2205      	movs	r2, #5
 800be02:	761a      	strb	r2, [r3, #24]
      break;
 800be04:	e09c      	b.n	800bf40 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800be06:	7bbb      	ldrb	r3, [r7, #14]
 800be08:	2b04      	cmp	r3, #4
 800be0a:	f040 8099 	bne.w	800bf40 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	220b      	movs	r2, #11
 800be12:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800be14:	2302      	movs	r3, #2
 800be16:	73fb      	strb	r3, [r7, #15]
      break;
 800be18:	e092      	b.n	800bf40 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	791b      	ldrb	r3, [r3, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	2100      	movs	r1, #0
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f8d5 	bl	800bfd2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be2e:	b29a      	uxth	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2208      	movs	r2, #8
 800be38:	761a      	strb	r2, [r3, #24]

      break;
 800be3a:	e086      	b.n	800bf4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	791b      	ldrb	r3, [r3, #4]
 800be40:	4619      	mov	r1, r3
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fc12 	bl	800c66c <USBH_LL_GetURBState>
 800be48:	4603      	mov	r3, r0
 800be4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d105      	bne.n	800be5e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	220d      	movs	r2, #13
 800be56:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be5c:	e072      	b.n	800bf44 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800be5e:	7bbb      	ldrb	r3, [r7, #14]
 800be60:	2b04      	cmp	r3, #4
 800be62:	d103      	bne.n	800be6c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	220b      	movs	r2, #11
 800be68:	761a      	strb	r2, [r3, #24]
      break;
 800be6a:	e06b      	b.n	800bf44 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800be6c:	7bbb      	ldrb	r3, [r7, #14]
 800be6e:	2b05      	cmp	r3, #5
 800be70:	d168      	bne.n	800bf44 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800be72:	2303      	movs	r3, #3
 800be74:	73fb      	strb	r3, [r7, #15]
      break;
 800be76:	e065      	b.n	800bf44 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	795b      	ldrb	r3, [r3, #5]
 800be7c:	2201      	movs	r2, #1
 800be7e:	9200      	str	r2, [sp, #0]
 800be80:	2200      	movs	r2, #0
 800be82:	2100      	movs	r1, #0
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 f87f 	bl	800bf88 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be90:	b29a      	uxth	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	220a      	movs	r2, #10
 800be9a:	761a      	strb	r2, [r3, #24]
      break;
 800be9c:	e055      	b.n	800bf4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	795b      	ldrb	r3, [r3, #5]
 800bea2:	4619      	mov	r1, r3
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 fbe1 	bl	800c66c <USBH_LL_GetURBState>
 800beaa:	4603      	mov	r3, r0
 800beac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800beae:	7bbb      	ldrb	r3, [r7, #14]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d105      	bne.n	800bec0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	220d      	movs	r2, #13
 800bebc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bebe:	e043      	b.n	800bf48 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bec0:	7bbb      	ldrb	r3, [r7, #14]
 800bec2:	2b02      	cmp	r3, #2
 800bec4:	d103      	bne.n	800bece <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2209      	movs	r2, #9
 800beca:	761a      	strb	r2, [r3, #24]
      break;
 800becc:	e03c      	b.n	800bf48 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bece:	7bbb      	ldrb	r3, [r7, #14]
 800bed0:	2b04      	cmp	r3, #4
 800bed2:	d139      	bne.n	800bf48 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	220b      	movs	r2, #11
 800bed8:	761a      	strb	r2, [r3, #24]
      break;
 800beda:	e035      	b.n	800bf48 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	7e5b      	ldrb	r3, [r3, #25]
 800bee0:	3301      	adds	r3, #1
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	765a      	strb	r2, [r3, #25]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	7e5b      	ldrb	r3, [r3, #25]
 800beec:	2b02      	cmp	r3, #2
 800beee:	d806      	bhi.n	800befe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800befc:	e025      	b.n	800bf4a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf04:	2106      	movs	r1, #6
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	795b      	ldrb	r3, [r3, #5]
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f90c 	bl	800c134 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	791b      	ldrb	r3, [r3, #4]
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f906 	bl	800c134 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bf2e:	2302      	movs	r3, #2
 800bf30:	73fb      	strb	r3, [r7, #15]
      break;
 800bf32:	e00a      	b.n	800bf4a <USBH_HandleControl+0x2de>

    default:
      break;
 800bf34:	bf00      	nop
 800bf36:	e008      	b.n	800bf4a <USBH_HandleControl+0x2de>
      break;
 800bf38:	bf00      	nop
 800bf3a:	e006      	b.n	800bf4a <USBH_HandleControl+0x2de>
      break;
 800bf3c:	bf00      	nop
 800bf3e:	e004      	b.n	800bf4a <USBH_HandleControl+0x2de>
      break;
 800bf40:	bf00      	nop
 800bf42:	e002      	b.n	800bf4a <USBH_HandleControl+0x2de>
      break;
 800bf44:	bf00      	nop
 800bf46:	e000      	b.n	800bf4a <USBH_HandleControl+0x2de>
      break;
 800bf48:	bf00      	nop
  }

  return status;
 800bf4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3710      	adds	r7, #16
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b088      	sub	sp, #32
 800bf58:	af04      	add	r7, sp, #16
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf62:	79f9      	ldrb	r1, [r7, #7]
 800bf64:	2300      	movs	r3, #0
 800bf66:	9303      	str	r3, [sp, #12]
 800bf68:	2308      	movs	r3, #8
 800bf6a:	9302      	str	r3, [sp, #8]
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	2300      	movs	r3, #0
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	2300      	movs	r3, #0
 800bf76:	2200      	movs	r2, #0
 800bf78:	68f8      	ldr	r0, [r7, #12]
 800bf7a:	f000 fb46 	bl	800c60a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b088      	sub	sp, #32
 800bf8c:	af04      	add	r7, sp, #16
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	4611      	mov	r1, r2
 800bf94:	461a      	mov	r2, r3
 800bf96:	460b      	mov	r3, r1
 800bf98:	80fb      	strh	r3, [r7, #6]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d001      	beq.n	800bfac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bfac:	7979      	ldrb	r1, [r7, #5]
 800bfae:	7e3b      	ldrb	r3, [r7, #24]
 800bfb0:	9303      	str	r3, [sp, #12]
 800bfb2:	88fb      	ldrh	r3, [r7, #6]
 800bfb4:	9302      	str	r3, [sp, #8]
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	9301      	str	r3, [sp, #4]
 800bfba:	2301      	movs	r3, #1
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f000 fb21 	bl	800c60a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b088      	sub	sp, #32
 800bfd6:	af04      	add	r7, sp, #16
 800bfd8:	60f8      	str	r0, [r7, #12]
 800bfda:	60b9      	str	r1, [r7, #8]
 800bfdc:	4611      	mov	r1, r2
 800bfde:	461a      	mov	r2, r3
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	80fb      	strh	r3, [r7, #6]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bfe8:	7979      	ldrb	r1, [r7, #5]
 800bfea:	2300      	movs	r3, #0
 800bfec:	9303      	str	r3, [sp, #12]
 800bfee:	88fb      	ldrh	r3, [r7, #6]
 800bff0:	9302      	str	r3, [sp, #8]
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	2301      	movs	r3, #1
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	2300      	movs	r3, #0
 800bffc:	2201      	movs	r2, #1
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f000 fb03 	bl	800c60a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c004:	2300      	movs	r3, #0

}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b088      	sub	sp, #32
 800c012:	af04      	add	r7, sp, #16
 800c014:	60f8      	str	r0, [r7, #12]
 800c016:	60b9      	str	r1, [r7, #8]
 800c018:	4611      	mov	r1, r2
 800c01a:	461a      	mov	r2, r3
 800c01c:	460b      	mov	r3, r1
 800c01e:	80fb      	strh	r3, [r7, #6]
 800c020:	4613      	mov	r3, r2
 800c022:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c02e:	2300      	movs	r3, #0
 800c030:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c032:	7979      	ldrb	r1, [r7, #5]
 800c034:	7e3b      	ldrb	r3, [r7, #24]
 800c036:	9303      	str	r3, [sp, #12]
 800c038:	88fb      	ldrh	r3, [r7, #6]
 800c03a:	9302      	str	r3, [sp, #8]
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	9301      	str	r3, [sp, #4]
 800c040:	2301      	movs	r3, #1
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	2302      	movs	r3, #2
 800c046:	2200      	movs	r2, #0
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f000 fade 	bl	800c60a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b088      	sub	sp, #32
 800c05c:	af04      	add	r7, sp, #16
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	4611      	mov	r1, r2
 800c064:	461a      	mov	r2, r3
 800c066:	460b      	mov	r3, r1
 800c068:	80fb      	strh	r3, [r7, #6]
 800c06a:	4613      	mov	r3, r2
 800c06c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c06e:	7979      	ldrb	r1, [r7, #5]
 800c070:	2300      	movs	r3, #0
 800c072:	9303      	str	r3, [sp, #12]
 800c074:	88fb      	ldrh	r3, [r7, #6]
 800c076:	9302      	str	r3, [sp, #8]
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	9301      	str	r3, [sp, #4]
 800c07c:	2301      	movs	r3, #1
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	2302      	movs	r3, #2
 800c082:	2201      	movs	r2, #1
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f000 fac0 	bl	800c60a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af04      	add	r7, sp, #16
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	4608      	mov	r0, r1
 800c09e:	4611      	mov	r1, r2
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	70fb      	strb	r3, [r7, #3]
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	70bb      	strb	r3, [r7, #2]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c0ae:	7878      	ldrb	r0, [r7, #1]
 800c0b0:	78ba      	ldrb	r2, [r7, #2]
 800c0b2:	78f9      	ldrb	r1, [r7, #3]
 800c0b4:	8b3b      	ldrh	r3, [r7, #24]
 800c0b6:	9302      	str	r3, [sp, #8]
 800c0b8:	7d3b      	ldrb	r3, [r7, #20]
 800c0ba:	9301      	str	r3, [sp, #4]
 800c0bc:	7c3b      	ldrb	r3, [r7, #16]
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 fa53 	bl	800c56e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
 800c0da:	460b      	mov	r3, r1
 800c0dc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c0de:	78fb      	ldrb	r3, [r7, #3]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fa72 	bl	800c5cc <USBH_LL_ClosePipe>

  return USBH_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b084      	sub	sp, #16
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f836 	bl	800c170 <USBH_GetFreePipe>
 800c104:	4603      	mov	r3, r0
 800c106:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c108:	89fb      	ldrh	r3, [r7, #14]
 800c10a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c10e:	4293      	cmp	r3, r2
 800c110:	d00a      	beq.n	800c128 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c112:	78fa      	ldrb	r2, [r7, #3]
 800c114:	89fb      	ldrh	r3, [r7, #14]
 800c116:	f003 030f 	and.w	r3, r3, #15
 800c11a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c11e:	6879      	ldr	r1, [r7, #4]
 800c120:	33e0      	adds	r3, #224	; 0xe0
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	440b      	add	r3, r1
 800c126:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c128:	89fb      	ldrh	r3, [r7, #14]
 800c12a:	b2db      	uxtb	r3, r3
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	460b      	mov	r3, r1
 800c13e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c140:	78fb      	ldrb	r3, [r7, #3]
 800c142:	2b0f      	cmp	r3, #15
 800c144:	d80d      	bhi.n	800c162 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c146:	78fb      	ldrb	r3, [r7, #3]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	33e0      	adds	r3, #224	; 0xe0
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	78fb      	ldrb	r3, [r7, #3]
 800c154:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c158:	6879      	ldr	r1, [r7, #4]
 800c15a:	33e0      	adds	r3, #224	; 0xe0
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	440b      	add	r3, r1
 800c160:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c178:	2300      	movs	r3, #0
 800c17a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c17c:	2300      	movs	r3, #0
 800c17e:	73fb      	strb	r3, [r7, #15]
 800c180:	e00f      	b.n	800c1a2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c182:	7bfb      	ldrb	r3, [r7, #15]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	33e0      	adds	r3, #224	; 0xe0
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d102      	bne.n	800c19c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c196:	7bfb      	ldrb	r3, [r7, #15]
 800c198:	b29b      	uxth	r3, r3
 800c19a:	e007      	b.n	800c1ac <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	73fb      	strb	r3, [r7, #15]
 800c1a2:	7bfb      	ldrb	r3, [r7, #15]
 800c1a4:	2b0f      	cmp	r3, #15
 800c1a6:	d9ec      	bls.n	800c182 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c1a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3714      	adds	r7, #20
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c1bc:	2201      	movs	r2, #1
 800c1be:	490e      	ldr	r1, [pc, #56]	; (800c1f8 <MX_USB_HOST_Init+0x40>)
 800c1c0:	480e      	ldr	r0, [pc, #56]	; (800c1fc <MX_USB_HOST_Init+0x44>)
 800c1c2:	f7fe fb05 	bl	800a7d0 <USBH_Init>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d001      	beq.n	800c1d0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c1cc:	f7f5 fddc 	bl	8001d88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c1d0:	490b      	ldr	r1, [pc, #44]	; (800c200 <MX_USB_HOST_Init+0x48>)
 800c1d2:	480a      	ldr	r0, [pc, #40]	; (800c1fc <MX_USB_HOST_Init+0x44>)
 800c1d4:	f7fe fba9 	bl	800a92a <USBH_RegisterClass>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c1de:	f7f5 fdd3 	bl	8001d88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c1e2:	4806      	ldr	r0, [pc, #24]	; (800c1fc <MX_USB_HOST_Init+0x44>)
 800c1e4:	f7fe fc2d 	bl	800aa42 <USBH_Start>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d001      	beq.n	800c1f2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c1ee:	f7f5 fdcb 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c1f2:	bf00      	nop
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	0800c219 	.word	0x0800c219
 800c1fc:	200005ac 	.word	0x200005ac
 800c200:	20000020 	.word	0x20000020

0800c204 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c208:	4802      	ldr	r0, [pc, #8]	; (800c214 <MX_USB_HOST_Process+0x10>)
 800c20a:	f7fe fc2b 	bl	800aa64 <USBH_Process>
}
 800c20e:	bf00      	nop
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	200005ac 	.word	0x200005ac

0800c218 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	460b      	mov	r3, r1
 800c222:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c224:	78fb      	ldrb	r3, [r7, #3]
 800c226:	3b01      	subs	r3, #1
 800c228:	2b04      	cmp	r3, #4
 800c22a:	d819      	bhi.n	800c260 <USBH_UserProcess+0x48>
 800c22c:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <USBH_UserProcess+0x1c>)
 800c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c232:	bf00      	nop
 800c234:	0800c261 	.word	0x0800c261
 800c238:	0800c251 	.word	0x0800c251
 800c23c:	0800c261 	.word	0x0800c261
 800c240:	0800c259 	.word	0x0800c259
 800c244:	0800c249 	.word	0x0800c249
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c248:	4b09      	ldr	r3, [pc, #36]	; (800c270 <USBH_UserProcess+0x58>)
 800c24a:	2203      	movs	r2, #3
 800c24c:	701a      	strb	r2, [r3, #0]
  break;
 800c24e:	e008      	b.n	800c262 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c250:	4b07      	ldr	r3, [pc, #28]	; (800c270 <USBH_UserProcess+0x58>)
 800c252:	2202      	movs	r2, #2
 800c254:	701a      	strb	r2, [r3, #0]
  break;
 800c256:	e004      	b.n	800c262 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c258:	4b05      	ldr	r3, [pc, #20]	; (800c270 <USBH_UserProcess+0x58>)
 800c25a:	2201      	movs	r2, #1
 800c25c:	701a      	strb	r2, [r3, #0]
  break;
 800c25e:	e000      	b.n	800c262 <USBH_UserProcess+0x4a>

  default:
  break;
 800c260:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c262:	bf00      	nop
 800c264:	370c      	adds	r7, #12
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	20000984 	.word	0x20000984

0800c274 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b08a      	sub	sp, #40	; 0x28
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c27c:	f107 0314 	add.w	r3, r7, #20
 800c280:	2200      	movs	r2, #0
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	605a      	str	r2, [r3, #4]
 800c286:	609a      	str	r2, [r3, #8]
 800c288:	60da      	str	r2, [r3, #12]
 800c28a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c294:	d147      	bne.n	800c326 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c296:	2300      	movs	r3, #0
 800c298:	613b      	str	r3, [r7, #16]
 800c29a:	4b25      	ldr	r3, [pc, #148]	; (800c330 <HAL_HCD_MspInit+0xbc>)
 800c29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29e:	4a24      	ldr	r2, [pc, #144]	; (800c330 <HAL_HCD_MspInit+0xbc>)
 800c2a0:	f043 0301 	orr.w	r3, r3, #1
 800c2a4:	6313      	str	r3, [r2, #48]	; 0x30
 800c2a6:	4b22      	ldr	r3, [pc, #136]	; (800c330 <HAL_HCD_MspInit+0xbc>)
 800c2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2aa:	f003 0301 	and.w	r3, r3, #1
 800c2ae:	613b      	str	r3, [r7, #16]
 800c2b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c2b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c2c0:	f107 0314 	add.w	r3, r7, #20
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	481b      	ldr	r0, [pc, #108]	; (800c334 <HAL_HCD_MspInit+0xc0>)
 800c2c8:	f7f6 fe28 	bl	8002f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c2cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c2d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c2de:	230a      	movs	r3, #10
 800c2e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2e2:	f107 0314 	add.w	r3, r7, #20
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4812      	ldr	r0, [pc, #72]	; (800c334 <HAL_HCD_MspInit+0xc0>)
 800c2ea:	f7f6 fe17 	bl	8002f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c2ee:	4b10      	ldr	r3, [pc, #64]	; (800c330 <HAL_HCD_MspInit+0xbc>)
 800c2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f2:	4a0f      	ldr	r2, [pc, #60]	; (800c330 <HAL_HCD_MspInit+0xbc>)
 800c2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2f8:	6353      	str	r3, [r2, #52]	; 0x34
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	60fb      	str	r3, [r7, #12]
 800c2fe:	4b0c      	ldr	r3, [pc, #48]	; (800c330 <HAL_HCD_MspInit+0xbc>)
 800c300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c302:	4a0b      	ldr	r2, [pc, #44]	; (800c330 <HAL_HCD_MspInit+0xbc>)
 800c304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c308:	6453      	str	r3, [r2, #68]	; 0x44
 800c30a:	4b09      	ldr	r3, [pc, #36]	; (800c330 <HAL_HCD_MspInit+0xbc>)
 800c30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c30e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c312:	60fb      	str	r3, [r7, #12]
 800c314:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c316:	2200      	movs	r2, #0
 800c318:	2100      	movs	r1, #0
 800c31a:	2043      	movs	r0, #67	; 0x43
 800c31c:	f7f6 fa4b 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c320:	2043      	movs	r0, #67	; 0x43
 800c322:	f7f6 fa64 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c326:	bf00      	nop
 800c328:	3728      	adds	r7, #40	; 0x28
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	40023800 	.word	0x40023800
 800c334:	40020000 	.word	0x40020000

0800c338 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c346:	4618      	mov	r0, r3
 800c348:	f7fe ff6b 	bl	800b222 <USBH_LL_IncTimer>
}
 800c34c:	bf00      	nop
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c362:	4618      	mov	r0, r3
 800c364:	f7fe ffa3 	bl	800b2ae <USBH_LL_Connect>
}
 800c368:	bf00      	nop
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fe ffac 	bl	800b2dc <USBH_LL_Disconnect>
}
 800c384:	bf00      	nop
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	460b      	mov	r3, r1
 800c396:	70fb      	strb	r3, [r7, #3]
 800c398:	4613      	mov	r3, r2
 800c39a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fe ff5d 	bl	800b276 <USBH_LL_PortEnabled>
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fe ff5d 	bl	800b292 <USBH_LL_PortDisabled>
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d12a      	bne.n	800c448 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c3f2:	4a18      	ldr	r2, [pc, #96]	; (800c454 <USBH_LL_Init+0x74>)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4a15      	ldr	r2, [pc, #84]	; (800c454 <USBH_LL_Init+0x74>)
 800c3fe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c402:	4b14      	ldr	r3, [pc, #80]	; (800c454 <USBH_LL_Init+0x74>)
 800c404:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c408:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c40a:	4b12      	ldr	r3, [pc, #72]	; (800c454 <USBH_LL_Init+0x74>)
 800c40c:	2208      	movs	r2, #8
 800c40e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c410:	4b10      	ldr	r3, [pc, #64]	; (800c454 <USBH_LL_Init+0x74>)
 800c412:	2201      	movs	r2, #1
 800c414:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c416:	4b0f      	ldr	r3, [pc, #60]	; (800c454 <USBH_LL_Init+0x74>)
 800c418:	2200      	movs	r2, #0
 800c41a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c41c:	4b0d      	ldr	r3, [pc, #52]	; (800c454 <USBH_LL_Init+0x74>)
 800c41e:	2202      	movs	r2, #2
 800c420:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c422:	4b0c      	ldr	r3, [pc, #48]	; (800c454 <USBH_LL_Init+0x74>)
 800c424:	2200      	movs	r2, #0
 800c426:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c428:	480a      	ldr	r0, [pc, #40]	; (800c454 <USBH_LL_Init+0x74>)
 800c42a:	f7f6 ff2c 	bl	8003286 <HAL_HCD_Init>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c434:	f7f5 fca8 	bl	8001d88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c438:	4806      	ldr	r0, [pc, #24]	; (800c454 <USBH_LL_Init+0x74>)
 800c43a:	f7f7 fb8d 	bl	8003b58 <HAL_HCD_GetCurrentFrame>
 800c43e:	4603      	mov	r3, r0
 800c440:	4619      	mov	r1, r3
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7fe fede 	bl	800b204 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	20000988 	.word	0x20000988

0800c458 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c464:	2300      	movs	r3, #0
 800c466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c46e:	4618      	mov	r0, r3
 800c470:	f7f7 fafa 	bl	8003a68 <HAL_HCD_Start>
 800c474:	4603      	mov	r3, r0
 800c476:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 f95e 	bl	800c73c <USBH_Get_USB_Status>
 800c480:	4603      	mov	r3, r0
 800c482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c484:	7bbb      	ldrb	r3, [r7, #14]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b084      	sub	sp, #16
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c496:	2300      	movs	r3, #0
 800c498:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7f7 fb02 	bl	8003aae <HAL_HCD_Stop>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 f943 	bl	800c73c <USBH_Get_USB_Status>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7f7 fb4c 	bl	8003b74 <HAL_HCD_GetCurrentSpeed>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d00c      	beq.n	800c4fc <USBH_LL_GetSpeed+0x38>
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	d80d      	bhi.n	800c502 <USBH_LL_GetSpeed+0x3e>
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d002      	beq.n	800c4f0 <USBH_LL_GetSpeed+0x2c>
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d003      	beq.n	800c4f6 <USBH_LL_GetSpeed+0x32>
 800c4ee:	e008      	b.n	800c502 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4f4:	e008      	b.n	800c508 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4fa:	e005      	b.n	800c508 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c500:	e002      	b.n	800c508 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c502:	2301      	movs	r3, #1
 800c504:	73fb      	strb	r3, [r7, #15]
    break;
 800c506:	bf00      	nop
  }
  return  speed;
 800c508:	7bfb      	ldrb	r3, [r7, #15]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c512:	b580      	push	{r7, lr}
 800c514:	b084      	sub	sp, #16
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c528:	4618      	mov	r0, r3
 800c52a:	f7f7 fadd 	bl	8003ae8 <HAL_HCD_ResetPort>
 800c52e:	4603      	mov	r3, r0
 800c530:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c532:	7bfb      	ldrb	r3, [r7, #15]
 800c534:	4618      	mov	r0, r3
 800c536:	f000 f901 	bl	800c73c <USBH_Get_USB_Status>
 800c53a:	4603      	mov	r3, r0
 800c53c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c53e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c55a:	78fa      	ldrb	r2, [r7, #3]
 800c55c:	4611      	mov	r1, r2
 800c55e:	4618      	mov	r0, r3
 800c560:	f7f7 fae5 	bl	8003b2e <HAL_HCD_HC_GetXferCount>
 800c564:	4603      	mov	r3, r0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c56e:	b590      	push	{r4, r7, lr}
 800c570:	b089      	sub	sp, #36	; 0x24
 800c572:	af04      	add	r7, sp, #16
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	4608      	mov	r0, r1
 800c578:	4611      	mov	r1, r2
 800c57a:	461a      	mov	r2, r3
 800c57c:	4603      	mov	r3, r0
 800c57e:	70fb      	strb	r3, [r7, #3]
 800c580:	460b      	mov	r3, r1
 800c582:	70bb      	strb	r3, [r7, #2]
 800c584:	4613      	mov	r3, r2
 800c586:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c588:	2300      	movs	r3, #0
 800c58a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c596:	787c      	ldrb	r4, [r7, #1]
 800c598:	78ba      	ldrb	r2, [r7, #2]
 800c59a:	78f9      	ldrb	r1, [r7, #3]
 800c59c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c59e:	9302      	str	r3, [sp, #8]
 800c5a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c5a4:	9301      	str	r3, [sp, #4]
 800c5a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	4623      	mov	r3, r4
 800c5ae:	f7f6 fed1 	bl	8003354 <HAL_HCD_HC_Init>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f000 f8bf 	bl	800c73c <USBH_Get_USB_Status>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd90      	pop	{r4, r7, pc}

0800c5cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5e6:	78fa      	ldrb	r2, [r7, #3]
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7f6 ff6a 	bl	80034c4 <HAL_HCD_HC_Halt>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5f4:	7bfb      	ldrb	r3, [r7, #15]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 f8a0 	bl	800c73c <USBH_Get_USB_Status>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c600:	7bbb      	ldrb	r3, [r7, #14]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c60a:	b590      	push	{r4, r7, lr}
 800c60c:	b089      	sub	sp, #36	; 0x24
 800c60e:	af04      	add	r7, sp, #16
 800c610:	6078      	str	r0, [r7, #4]
 800c612:	4608      	mov	r0, r1
 800c614:	4611      	mov	r1, r2
 800c616:	461a      	mov	r2, r3
 800c618:	4603      	mov	r3, r0
 800c61a:	70fb      	strb	r3, [r7, #3]
 800c61c:	460b      	mov	r3, r1
 800c61e:	70bb      	strb	r3, [r7, #2]
 800c620:	4613      	mov	r3, r2
 800c622:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c628:	2300      	movs	r3, #0
 800c62a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c632:	787c      	ldrb	r4, [r7, #1]
 800c634:	78ba      	ldrb	r2, [r7, #2]
 800c636:	78f9      	ldrb	r1, [r7, #3]
 800c638:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c63c:	9303      	str	r3, [sp, #12]
 800c63e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c640:	9302      	str	r3, [sp, #8]
 800c642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c644:	9301      	str	r3, [sp, #4]
 800c646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	4623      	mov	r3, r4
 800c64e:	f7f6 ff5d 	bl	800350c <HAL_HCD_HC_SubmitRequest>
 800c652:	4603      	mov	r3, r0
 800c654:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c656:	7bfb      	ldrb	r3, [r7, #15]
 800c658:	4618      	mov	r0, r3
 800c65a:	f000 f86f 	bl	800c73c <USBH_Get_USB_Status>
 800c65e:	4603      	mov	r3, r0
 800c660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c662:	7bbb      	ldrb	r3, [r7, #14]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd90      	pop	{r4, r7, pc}

0800c66c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	460b      	mov	r3, r1
 800c676:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c67e:	78fa      	ldrb	r2, [r7, #3]
 800c680:	4611      	mov	r1, r2
 800c682:	4618      	mov	r0, r3
 800c684:	f7f7 fa3e 	bl	8003b04 <HAL_HCD_HC_GetURBState>
 800c688:	4603      	mov	r3, r0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c692:	b580      	push	{r7, lr}
 800c694:	b082      	sub	sp, #8
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	460b      	mov	r3, r1
 800c69c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d103      	bne.n	800c6b0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c6a8:	78fb      	ldrb	r3, [r7, #3]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 f872 	bl	800c794 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c6b0:	20c8      	movs	r0, #200	; 0xc8
 800c6b2:	f7f5 ff81 	bl	80025b8 <HAL_Delay>
  return USBH_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3708      	adds	r7, #8
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b085      	sub	sp, #20
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	70fb      	strb	r3, [r7, #3]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6d6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c6d8:	78fa      	ldrb	r2, [r7, #3]
 800c6da:	68f9      	ldr	r1, [r7, #12]
 800c6dc:	4613      	mov	r3, r2
 800c6de:	011b      	lsls	r3, r3, #4
 800c6e0:	1a9b      	subs	r3, r3, r2
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	440b      	add	r3, r1
 800c6e6:	3317      	adds	r3, #23
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00a      	beq.n	800c704 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c6ee:	78fa      	ldrb	r2, [r7, #3]
 800c6f0:	68f9      	ldr	r1, [r7, #12]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	011b      	lsls	r3, r3, #4
 800c6f6:	1a9b      	subs	r3, r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	440b      	add	r3, r1
 800c6fc:	333c      	adds	r3, #60	; 0x3c
 800c6fe:	78ba      	ldrb	r2, [r7, #2]
 800c700:	701a      	strb	r2, [r3, #0]
 800c702:	e009      	b.n	800c718 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c704:	78fa      	ldrb	r2, [r7, #3]
 800c706:	68f9      	ldr	r1, [r7, #12]
 800c708:	4613      	mov	r3, r2
 800c70a:	011b      	lsls	r3, r3, #4
 800c70c:	1a9b      	subs	r3, r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	440b      	add	r3, r1
 800c712:	333d      	adds	r3, #61	; 0x3d
 800c714:	78ba      	ldrb	r2, [r7, #2]
 800c716:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7f5 ff42 	bl	80025b8 <HAL_Delay>
}
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	4603      	mov	r3, r0
 800c744:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c746:	2300      	movs	r3, #0
 800c748:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c74a:	79fb      	ldrb	r3, [r7, #7]
 800c74c:	2b03      	cmp	r3, #3
 800c74e:	d817      	bhi.n	800c780 <USBH_Get_USB_Status+0x44>
 800c750:	a201      	add	r2, pc, #4	; (adr r2, 800c758 <USBH_Get_USB_Status+0x1c>)
 800c752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c756:	bf00      	nop
 800c758:	0800c769 	.word	0x0800c769
 800c75c:	0800c76f 	.word	0x0800c76f
 800c760:	0800c775 	.word	0x0800c775
 800c764:	0800c77b 	.word	0x0800c77b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	73fb      	strb	r3, [r7, #15]
    break;
 800c76c:	e00b      	b.n	800c786 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c76e:	2302      	movs	r3, #2
 800c770:	73fb      	strb	r3, [r7, #15]
    break;
 800c772:	e008      	b.n	800c786 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c774:	2301      	movs	r3, #1
 800c776:	73fb      	strb	r3, [r7, #15]
    break;
 800c778:	e005      	b.n	800c786 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c77a:	2302      	movs	r3, #2
 800c77c:	73fb      	strb	r3, [r7, #15]
    break;
 800c77e:	e002      	b.n	800c786 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c780:	2302      	movs	r3, #2
 800c782:	73fb      	strb	r3, [r7, #15]
    break;
 800c784:	bf00      	nop
  }
  return usb_status;
 800c786:	7bfb      	ldrb	r3, [r7, #15]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c79e:	79fb      	ldrb	r3, [r7, #7]
 800c7a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c7a2:	79fb      	ldrb	r3, [r7, #7]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d102      	bne.n	800c7ae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	73fb      	strb	r3, [r7, #15]
 800c7ac:	e001      	b.n	800c7b2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	2101      	movs	r1, #1
 800c7b8:	4803      	ldr	r0, [pc, #12]	; (800c7c8 <MX_DriverVbusFS+0x34>)
 800c7ba:	f7f6 fd4b 	bl	8003254 <HAL_GPIO_WritePin>
}
 800c7be:	bf00      	nop
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	40020800 	.word	0x40020800

0800c7cc <atof>:
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	f000 bed1 	b.w	800d574 <strtod>
	...

0800c7d4 <malloc>:
 800c7d4:	4b02      	ldr	r3, [pc, #8]	; (800c7e0 <malloc+0xc>)
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	6818      	ldr	r0, [r3, #0]
 800c7da:	f000 b82b 	b.w	800c834 <_malloc_r>
 800c7de:	bf00      	nop
 800c7e0:	20000204 	.word	0x20000204

0800c7e4 <free>:
 800c7e4:	4b02      	ldr	r3, [pc, #8]	; (800c7f0 <free+0xc>)
 800c7e6:	4601      	mov	r1, r0
 800c7e8:	6818      	ldr	r0, [r3, #0]
 800c7ea:	f002 bda7 	b.w	800f33c <_free_r>
 800c7ee:	bf00      	nop
 800c7f0:	20000204 	.word	0x20000204

0800c7f4 <sbrk_aligned>:
 800c7f4:	b570      	push	{r4, r5, r6, lr}
 800c7f6:	4e0e      	ldr	r6, [pc, #56]	; (800c830 <sbrk_aligned+0x3c>)
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	6831      	ldr	r1, [r6, #0]
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	b911      	cbnz	r1, 800c806 <sbrk_aligned+0x12>
 800c800:	f001 feb2 	bl	800e568 <_sbrk_r>
 800c804:	6030      	str	r0, [r6, #0]
 800c806:	4621      	mov	r1, r4
 800c808:	4628      	mov	r0, r5
 800c80a:	f001 fead 	bl	800e568 <_sbrk_r>
 800c80e:	1c43      	adds	r3, r0, #1
 800c810:	d00a      	beq.n	800c828 <sbrk_aligned+0x34>
 800c812:	1cc4      	adds	r4, r0, #3
 800c814:	f024 0403 	bic.w	r4, r4, #3
 800c818:	42a0      	cmp	r0, r4
 800c81a:	d007      	beq.n	800c82c <sbrk_aligned+0x38>
 800c81c:	1a21      	subs	r1, r4, r0
 800c81e:	4628      	mov	r0, r5
 800c820:	f001 fea2 	bl	800e568 <_sbrk_r>
 800c824:	3001      	adds	r0, #1
 800c826:	d101      	bne.n	800c82c <sbrk_aligned+0x38>
 800c828:	f04f 34ff 	mov.w	r4, #4294967295
 800c82c:	4620      	mov	r0, r4
 800c82e:	bd70      	pop	{r4, r5, r6, pc}
 800c830:	20000d6c 	.word	0x20000d6c

0800c834 <_malloc_r>:
 800c834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c838:	1ccd      	adds	r5, r1, #3
 800c83a:	f025 0503 	bic.w	r5, r5, #3
 800c83e:	3508      	adds	r5, #8
 800c840:	2d0c      	cmp	r5, #12
 800c842:	bf38      	it	cc
 800c844:	250c      	movcc	r5, #12
 800c846:	2d00      	cmp	r5, #0
 800c848:	4607      	mov	r7, r0
 800c84a:	db01      	blt.n	800c850 <_malloc_r+0x1c>
 800c84c:	42a9      	cmp	r1, r5
 800c84e:	d905      	bls.n	800c85c <_malloc_r+0x28>
 800c850:	230c      	movs	r3, #12
 800c852:	603b      	str	r3, [r7, #0]
 800c854:	2600      	movs	r6, #0
 800c856:	4630      	mov	r0, r6
 800c858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c85c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c930 <_malloc_r+0xfc>
 800c860:	f000 f868 	bl	800c934 <__malloc_lock>
 800c864:	f8d8 3000 	ldr.w	r3, [r8]
 800c868:	461c      	mov	r4, r3
 800c86a:	bb5c      	cbnz	r4, 800c8c4 <_malloc_r+0x90>
 800c86c:	4629      	mov	r1, r5
 800c86e:	4638      	mov	r0, r7
 800c870:	f7ff ffc0 	bl	800c7f4 <sbrk_aligned>
 800c874:	1c43      	adds	r3, r0, #1
 800c876:	4604      	mov	r4, r0
 800c878:	d155      	bne.n	800c926 <_malloc_r+0xf2>
 800c87a:	f8d8 4000 	ldr.w	r4, [r8]
 800c87e:	4626      	mov	r6, r4
 800c880:	2e00      	cmp	r6, #0
 800c882:	d145      	bne.n	800c910 <_malloc_r+0xdc>
 800c884:	2c00      	cmp	r4, #0
 800c886:	d048      	beq.n	800c91a <_malloc_r+0xe6>
 800c888:	6823      	ldr	r3, [r4, #0]
 800c88a:	4631      	mov	r1, r6
 800c88c:	4638      	mov	r0, r7
 800c88e:	eb04 0903 	add.w	r9, r4, r3
 800c892:	f001 fe69 	bl	800e568 <_sbrk_r>
 800c896:	4581      	cmp	r9, r0
 800c898:	d13f      	bne.n	800c91a <_malloc_r+0xe6>
 800c89a:	6821      	ldr	r1, [r4, #0]
 800c89c:	1a6d      	subs	r5, r5, r1
 800c89e:	4629      	mov	r1, r5
 800c8a0:	4638      	mov	r0, r7
 800c8a2:	f7ff ffa7 	bl	800c7f4 <sbrk_aligned>
 800c8a6:	3001      	adds	r0, #1
 800c8a8:	d037      	beq.n	800c91a <_malloc_r+0xe6>
 800c8aa:	6823      	ldr	r3, [r4, #0]
 800c8ac:	442b      	add	r3, r5
 800c8ae:	6023      	str	r3, [r4, #0]
 800c8b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d038      	beq.n	800c92a <_malloc_r+0xf6>
 800c8b8:	685a      	ldr	r2, [r3, #4]
 800c8ba:	42a2      	cmp	r2, r4
 800c8bc:	d12b      	bne.n	800c916 <_malloc_r+0xe2>
 800c8be:	2200      	movs	r2, #0
 800c8c0:	605a      	str	r2, [r3, #4]
 800c8c2:	e00f      	b.n	800c8e4 <_malloc_r+0xb0>
 800c8c4:	6822      	ldr	r2, [r4, #0]
 800c8c6:	1b52      	subs	r2, r2, r5
 800c8c8:	d41f      	bmi.n	800c90a <_malloc_r+0xd6>
 800c8ca:	2a0b      	cmp	r2, #11
 800c8cc:	d917      	bls.n	800c8fe <_malloc_r+0xca>
 800c8ce:	1961      	adds	r1, r4, r5
 800c8d0:	42a3      	cmp	r3, r4
 800c8d2:	6025      	str	r5, [r4, #0]
 800c8d4:	bf18      	it	ne
 800c8d6:	6059      	strne	r1, [r3, #4]
 800c8d8:	6863      	ldr	r3, [r4, #4]
 800c8da:	bf08      	it	eq
 800c8dc:	f8c8 1000 	streq.w	r1, [r8]
 800c8e0:	5162      	str	r2, [r4, r5]
 800c8e2:	604b      	str	r3, [r1, #4]
 800c8e4:	4638      	mov	r0, r7
 800c8e6:	f104 060b 	add.w	r6, r4, #11
 800c8ea:	f000 f829 	bl	800c940 <__malloc_unlock>
 800c8ee:	f026 0607 	bic.w	r6, r6, #7
 800c8f2:	1d23      	adds	r3, r4, #4
 800c8f4:	1af2      	subs	r2, r6, r3
 800c8f6:	d0ae      	beq.n	800c856 <_malloc_r+0x22>
 800c8f8:	1b9b      	subs	r3, r3, r6
 800c8fa:	50a3      	str	r3, [r4, r2]
 800c8fc:	e7ab      	b.n	800c856 <_malloc_r+0x22>
 800c8fe:	42a3      	cmp	r3, r4
 800c900:	6862      	ldr	r2, [r4, #4]
 800c902:	d1dd      	bne.n	800c8c0 <_malloc_r+0x8c>
 800c904:	f8c8 2000 	str.w	r2, [r8]
 800c908:	e7ec      	b.n	800c8e4 <_malloc_r+0xb0>
 800c90a:	4623      	mov	r3, r4
 800c90c:	6864      	ldr	r4, [r4, #4]
 800c90e:	e7ac      	b.n	800c86a <_malloc_r+0x36>
 800c910:	4634      	mov	r4, r6
 800c912:	6876      	ldr	r6, [r6, #4]
 800c914:	e7b4      	b.n	800c880 <_malloc_r+0x4c>
 800c916:	4613      	mov	r3, r2
 800c918:	e7cc      	b.n	800c8b4 <_malloc_r+0x80>
 800c91a:	230c      	movs	r3, #12
 800c91c:	603b      	str	r3, [r7, #0]
 800c91e:	4638      	mov	r0, r7
 800c920:	f000 f80e 	bl	800c940 <__malloc_unlock>
 800c924:	e797      	b.n	800c856 <_malloc_r+0x22>
 800c926:	6025      	str	r5, [r4, #0]
 800c928:	e7dc      	b.n	800c8e4 <_malloc_r+0xb0>
 800c92a:	605b      	str	r3, [r3, #4]
 800c92c:	deff      	udf	#255	; 0xff
 800c92e:	bf00      	nop
 800c930:	20000d68 	.word	0x20000d68

0800c934 <__malloc_lock>:
 800c934:	4801      	ldr	r0, [pc, #4]	; (800c93c <__malloc_lock+0x8>)
 800c936:	f001 be64 	b.w	800e602 <__retarget_lock_acquire_recursive>
 800c93a:	bf00      	nop
 800c93c:	20000eb0 	.word	0x20000eb0

0800c940 <__malloc_unlock>:
 800c940:	4801      	ldr	r0, [pc, #4]	; (800c948 <__malloc_unlock+0x8>)
 800c942:	f001 be5f 	b.w	800e604 <__retarget_lock_release_recursive>
 800c946:	bf00      	nop
 800c948:	20000eb0 	.word	0x20000eb0

0800c94c <sulp>:
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	4604      	mov	r4, r0
 800c950:	460d      	mov	r5, r1
 800c952:	ec45 4b10 	vmov	d0, r4, r5
 800c956:	4616      	mov	r6, r2
 800c958:	f003 fc12 	bl	8010180 <__ulp>
 800c95c:	ec51 0b10 	vmov	r0, r1, d0
 800c960:	b17e      	cbz	r6, 800c982 <sulp+0x36>
 800c962:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c966:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dd09      	ble.n	800c982 <sulp+0x36>
 800c96e:	051b      	lsls	r3, r3, #20
 800c970:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c974:	2400      	movs	r4, #0
 800c976:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c97a:	4622      	mov	r2, r4
 800c97c:	462b      	mov	r3, r5
 800c97e:	f7f3 fe4b 	bl	8000618 <__aeabi_dmul>
 800c982:	bd70      	pop	{r4, r5, r6, pc}
 800c984:	0000      	movs	r0, r0
	...

0800c988 <_strtod_l>:
 800c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	ed2d 8b02 	vpush	{d8}
 800c990:	b09b      	sub	sp, #108	; 0x6c
 800c992:	4604      	mov	r4, r0
 800c994:	9213      	str	r2, [sp, #76]	; 0x4c
 800c996:	2200      	movs	r2, #0
 800c998:	9216      	str	r2, [sp, #88]	; 0x58
 800c99a:	460d      	mov	r5, r1
 800c99c:	f04f 0800 	mov.w	r8, #0
 800c9a0:	f04f 0900 	mov.w	r9, #0
 800c9a4:	460a      	mov	r2, r1
 800c9a6:	9215      	str	r2, [sp, #84]	; 0x54
 800c9a8:	7811      	ldrb	r1, [r2, #0]
 800c9aa:	292b      	cmp	r1, #43	; 0x2b
 800c9ac:	d04c      	beq.n	800ca48 <_strtod_l+0xc0>
 800c9ae:	d83a      	bhi.n	800ca26 <_strtod_l+0x9e>
 800c9b0:	290d      	cmp	r1, #13
 800c9b2:	d834      	bhi.n	800ca1e <_strtod_l+0x96>
 800c9b4:	2908      	cmp	r1, #8
 800c9b6:	d834      	bhi.n	800ca22 <_strtod_l+0x9a>
 800c9b8:	2900      	cmp	r1, #0
 800c9ba:	d03d      	beq.n	800ca38 <_strtod_l+0xb0>
 800c9bc:	2200      	movs	r2, #0
 800c9be:	920a      	str	r2, [sp, #40]	; 0x28
 800c9c0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c9c2:	7832      	ldrb	r2, [r6, #0]
 800c9c4:	2a30      	cmp	r2, #48	; 0x30
 800c9c6:	f040 80b4 	bne.w	800cb32 <_strtod_l+0x1aa>
 800c9ca:	7872      	ldrb	r2, [r6, #1]
 800c9cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c9d0:	2a58      	cmp	r2, #88	; 0x58
 800c9d2:	d170      	bne.n	800cab6 <_strtod_l+0x12e>
 800c9d4:	9302      	str	r3, [sp, #8]
 800c9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9d8:	9301      	str	r3, [sp, #4]
 800c9da:	ab16      	add	r3, sp, #88	; 0x58
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	4a8e      	ldr	r2, [pc, #568]	; (800cc18 <_strtod_l+0x290>)
 800c9e0:	ab17      	add	r3, sp, #92	; 0x5c
 800c9e2:	a915      	add	r1, sp, #84	; 0x54
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f002 fd5d 	bl	800f4a4 <__gethex>
 800c9ea:	f010 070f 	ands.w	r7, r0, #15
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	d005      	beq.n	800c9fe <_strtod_l+0x76>
 800c9f2:	2f06      	cmp	r7, #6
 800c9f4:	d12a      	bne.n	800ca4c <_strtod_l+0xc4>
 800c9f6:	3601      	adds	r6, #1
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	9615      	str	r6, [sp, #84]	; 0x54
 800c9fc:	930a      	str	r3, [sp, #40]	; 0x28
 800c9fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f040 857f 	bne.w	800d504 <_strtod_l+0xb7c>
 800ca06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca08:	b1db      	cbz	r3, 800ca42 <_strtod_l+0xba>
 800ca0a:	4642      	mov	r2, r8
 800ca0c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ca10:	ec43 2b10 	vmov	d0, r2, r3
 800ca14:	b01b      	add	sp, #108	; 0x6c
 800ca16:	ecbd 8b02 	vpop	{d8}
 800ca1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1e:	2920      	cmp	r1, #32
 800ca20:	d1cc      	bne.n	800c9bc <_strtod_l+0x34>
 800ca22:	3201      	adds	r2, #1
 800ca24:	e7bf      	b.n	800c9a6 <_strtod_l+0x1e>
 800ca26:	292d      	cmp	r1, #45	; 0x2d
 800ca28:	d1c8      	bne.n	800c9bc <_strtod_l+0x34>
 800ca2a:	2101      	movs	r1, #1
 800ca2c:	910a      	str	r1, [sp, #40]	; 0x28
 800ca2e:	1c51      	adds	r1, r2, #1
 800ca30:	9115      	str	r1, [sp, #84]	; 0x54
 800ca32:	7852      	ldrb	r2, [r2, #1]
 800ca34:	2a00      	cmp	r2, #0
 800ca36:	d1c3      	bne.n	800c9c0 <_strtod_l+0x38>
 800ca38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca3a:	9515      	str	r5, [sp, #84]	; 0x54
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f040 855f 	bne.w	800d500 <_strtod_l+0xb78>
 800ca42:	4642      	mov	r2, r8
 800ca44:	464b      	mov	r3, r9
 800ca46:	e7e3      	b.n	800ca10 <_strtod_l+0x88>
 800ca48:	2100      	movs	r1, #0
 800ca4a:	e7ef      	b.n	800ca2c <_strtod_l+0xa4>
 800ca4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ca4e:	b13a      	cbz	r2, 800ca60 <_strtod_l+0xd8>
 800ca50:	2135      	movs	r1, #53	; 0x35
 800ca52:	a818      	add	r0, sp, #96	; 0x60
 800ca54:	f003 fc91 	bl	801037a <__copybits>
 800ca58:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f003 f864 	bl	800fb28 <_Bfree>
 800ca60:	3f01      	subs	r7, #1
 800ca62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca64:	2f04      	cmp	r7, #4
 800ca66:	d806      	bhi.n	800ca76 <_strtod_l+0xee>
 800ca68:	e8df f007 	tbb	[pc, r7]
 800ca6c:	201d0314 	.word	0x201d0314
 800ca70:	14          	.byte	0x14
 800ca71:	00          	.byte	0x00
 800ca72:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ca76:	05e9      	lsls	r1, r5, #23
 800ca78:	bf48      	it	mi
 800ca7a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ca7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca82:	0d1b      	lsrs	r3, r3, #20
 800ca84:	051b      	lsls	r3, r3, #20
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1b9      	bne.n	800c9fe <_strtod_l+0x76>
 800ca8a:	f001 fd8f 	bl	800e5ac <__errno>
 800ca8e:	2322      	movs	r3, #34	; 0x22
 800ca90:	6003      	str	r3, [r0, #0]
 800ca92:	e7b4      	b.n	800c9fe <_strtod_l+0x76>
 800ca94:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ca98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ca9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800caa0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800caa4:	e7e7      	b.n	800ca76 <_strtod_l+0xee>
 800caa6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800cc20 <_strtod_l+0x298>
 800caaa:	e7e4      	b.n	800ca76 <_strtod_l+0xee>
 800caac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800cab0:	f04f 38ff 	mov.w	r8, #4294967295
 800cab4:	e7df      	b.n	800ca76 <_strtod_l+0xee>
 800cab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cab8:	1c5a      	adds	r2, r3, #1
 800caba:	9215      	str	r2, [sp, #84]	; 0x54
 800cabc:	785b      	ldrb	r3, [r3, #1]
 800cabe:	2b30      	cmp	r3, #48	; 0x30
 800cac0:	d0f9      	beq.n	800cab6 <_strtod_l+0x12e>
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d09b      	beq.n	800c9fe <_strtod_l+0x76>
 800cac6:	2301      	movs	r3, #1
 800cac8:	f04f 0a00 	mov.w	sl, #0
 800cacc:	9304      	str	r3, [sp, #16]
 800cace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cad0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cad2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cad6:	46d3      	mov	fp, sl
 800cad8:	220a      	movs	r2, #10
 800cada:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cadc:	7806      	ldrb	r6, [r0, #0]
 800cade:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cae2:	b2d9      	uxtb	r1, r3
 800cae4:	2909      	cmp	r1, #9
 800cae6:	d926      	bls.n	800cb36 <_strtod_l+0x1ae>
 800cae8:	494c      	ldr	r1, [pc, #304]	; (800cc1c <_strtod_l+0x294>)
 800caea:	2201      	movs	r2, #1
 800caec:	f001 fcf1 	bl	800e4d2 <strncmp>
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d030      	beq.n	800cb56 <_strtod_l+0x1ce>
 800caf4:	2000      	movs	r0, #0
 800caf6:	4632      	mov	r2, r6
 800caf8:	9005      	str	r0, [sp, #20]
 800cafa:	465e      	mov	r6, fp
 800cafc:	4603      	mov	r3, r0
 800cafe:	2a65      	cmp	r2, #101	; 0x65
 800cb00:	d001      	beq.n	800cb06 <_strtod_l+0x17e>
 800cb02:	2a45      	cmp	r2, #69	; 0x45
 800cb04:	d113      	bne.n	800cb2e <_strtod_l+0x1a6>
 800cb06:	b91e      	cbnz	r6, 800cb10 <_strtod_l+0x188>
 800cb08:	9a04      	ldr	r2, [sp, #16]
 800cb0a:	4302      	orrs	r2, r0
 800cb0c:	d094      	beq.n	800ca38 <_strtod_l+0xb0>
 800cb0e:	2600      	movs	r6, #0
 800cb10:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cb12:	1c6a      	adds	r2, r5, #1
 800cb14:	9215      	str	r2, [sp, #84]	; 0x54
 800cb16:	786a      	ldrb	r2, [r5, #1]
 800cb18:	2a2b      	cmp	r2, #43	; 0x2b
 800cb1a:	d074      	beq.n	800cc06 <_strtod_l+0x27e>
 800cb1c:	2a2d      	cmp	r2, #45	; 0x2d
 800cb1e:	d078      	beq.n	800cc12 <_strtod_l+0x28a>
 800cb20:	f04f 0c00 	mov.w	ip, #0
 800cb24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cb28:	2909      	cmp	r1, #9
 800cb2a:	d97f      	bls.n	800cc2c <_strtod_l+0x2a4>
 800cb2c:	9515      	str	r5, [sp, #84]	; 0x54
 800cb2e:	2700      	movs	r7, #0
 800cb30:	e09e      	b.n	800cc70 <_strtod_l+0x2e8>
 800cb32:	2300      	movs	r3, #0
 800cb34:	e7c8      	b.n	800cac8 <_strtod_l+0x140>
 800cb36:	f1bb 0f08 	cmp.w	fp, #8
 800cb3a:	bfd8      	it	le
 800cb3c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cb3e:	f100 0001 	add.w	r0, r0, #1
 800cb42:	bfda      	itte	le
 800cb44:	fb02 3301 	mlale	r3, r2, r1, r3
 800cb48:	9309      	strle	r3, [sp, #36]	; 0x24
 800cb4a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800cb4e:	f10b 0b01 	add.w	fp, fp, #1
 800cb52:	9015      	str	r0, [sp, #84]	; 0x54
 800cb54:	e7c1      	b.n	800cada <_strtod_l+0x152>
 800cb56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb58:	1c5a      	adds	r2, r3, #1
 800cb5a:	9215      	str	r2, [sp, #84]	; 0x54
 800cb5c:	785a      	ldrb	r2, [r3, #1]
 800cb5e:	f1bb 0f00 	cmp.w	fp, #0
 800cb62:	d037      	beq.n	800cbd4 <_strtod_l+0x24c>
 800cb64:	9005      	str	r0, [sp, #20]
 800cb66:	465e      	mov	r6, fp
 800cb68:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cb6c:	2b09      	cmp	r3, #9
 800cb6e:	d912      	bls.n	800cb96 <_strtod_l+0x20e>
 800cb70:	2301      	movs	r3, #1
 800cb72:	e7c4      	b.n	800cafe <_strtod_l+0x176>
 800cb74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	9215      	str	r2, [sp, #84]	; 0x54
 800cb7a:	785a      	ldrb	r2, [r3, #1]
 800cb7c:	3001      	adds	r0, #1
 800cb7e:	2a30      	cmp	r2, #48	; 0x30
 800cb80:	d0f8      	beq.n	800cb74 <_strtod_l+0x1ec>
 800cb82:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cb86:	2b08      	cmp	r3, #8
 800cb88:	f200 84c1 	bhi.w	800d50e <_strtod_l+0xb86>
 800cb8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb8e:	9005      	str	r0, [sp, #20]
 800cb90:	2000      	movs	r0, #0
 800cb92:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb94:	4606      	mov	r6, r0
 800cb96:	3a30      	subs	r2, #48	; 0x30
 800cb98:	f100 0301 	add.w	r3, r0, #1
 800cb9c:	d014      	beq.n	800cbc8 <_strtod_l+0x240>
 800cb9e:	9905      	ldr	r1, [sp, #20]
 800cba0:	4419      	add	r1, r3
 800cba2:	9105      	str	r1, [sp, #20]
 800cba4:	4633      	mov	r3, r6
 800cba6:	eb00 0c06 	add.w	ip, r0, r6
 800cbaa:	210a      	movs	r1, #10
 800cbac:	4563      	cmp	r3, ip
 800cbae:	d113      	bne.n	800cbd8 <_strtod_l+0x250>
 800cbb0:	1833      	adds	r3, r6, r0
 800cbb2:	2b08      	cmp	r3, #8
 800cbb4:	f106 0601 	add.w	r6, r6, #1
 800cbb8:	4406      	add	r6, r0
 800cbba:	dc1a      	bgt.n	800cbf2 <_strtod_l+0x26a>
 800cbbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbbe:	230a      	movs	r3, #10
 800cbc0:	fb03 2301 	mla	r3, r3, r1, r2
 800cbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cbca:	1c51      	adds	r1, r2, #1
 800cbcc:	9115      	str	r1, [sp, #84]	; 0x54
 800cbce:	7852      	ldrb	r2, [r2, #1]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	e7c9      	b.n	800cb68 <_strtod_l+0x1e0>
 800cbd4:	4658      	mov	r0, fp
 800cbd6:	e7d2      	b.n	800cb7e <_strtod_l+0x1f6>
 800cbd8:	2b08      	cmp	r3, #8
 800cbda:	f103 0301 	add.w	r3, r3, #1
 800cbde:	dc03      	bgt.n	800cbe8 <_strtod_l+0x260>
 800cbe0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cbe2:	434f      	muls	r7, r1
 800cbe4:	9709      	str	r7, [sp, #36]	; 0x24
 800cbe6:	e7e1      	b.n	800cbac <_strtod_l+0x224>
 800cbe8:	2b10      	cmp	r3, #16
 800cbea:	bfd8      	it	le
 800cbec:	fb01 fa0a 	mulle.w	sl, r1, sl
 800cbf0:	e7dc      	b.n	800cbac <_strtod_l+0x224>
 800cbf2:	2e10      	cmp	r6, #16
 800cbf4:	bfdc      	itt	le
 800cbf6:	230a      	movle	r3, #10
 800cbf8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800cbfc:	e7e3      	b.n	800cbc6 <_strtod_l+0x23e>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	9305      	str	r3, [sp, #20]
 800cc02:	2301      	movs	r3, #1
 800cc04:	e780      	b.n	800cb08 <_strtod_l+0x180>
 800cc06:	f04f 0c00 	mov.w	ip, #0
 800cc0a:	1caa      	adds	r2, r5, #2
 800cc0c:	9215      	str	r2, [sp, #84]	; 0x54
 800cc0e:	78aa      	ldrb	r2, [r5, #2]
 800cc10:	e788      	b.n	800cb24 <_strtod_l+0x19c>
 800cc12:	f04f 0c01 	mov.w	ip, #1
 800cc16:	e7f8      	b.n	800cc0a <_strtod_l+0x282>
 800cc18:	08011040 	.word	0x08011040
 800cc1c:	0801103c 	.word	0x0801103c
 800cc20:	7ff00000 	.word	0x7ff00000
 800cc24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cc26:	1c51      	adds	r1, r2, #1
 800cc28:	9115      	str	r1, [sp, #84]	; 0x54
 800cc2a:	7852      	ldrb	r2, [r2, #1]
 800cc2c:	2a30      	cmp	r2, #48	; 0x30
 800cc2e:	d0f9      	beq.n	800cc24 <_strtod_l+0x29c>
 800cc30:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cc34:	2908      	cmp	r1, #8
 800cc36:	f63f af7a 	bhi.w	800cb2e <_strtod_l+0x1a6>
 800cc3a:	3a30      	subs	r2, #48	; 0x30
 800cc3c:	9208      	str	r2, [sp, #32]
 800cc3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cc40:	920c      	str	r2, [sp, #48]	; 0x30
 800cc42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cc44:	1c57      	adds	r7, r2, #1
 800cc46:	9715      	str	r7, [sp, #84]	; 0x54
 800cc48:	7852      	ldrb	r2, [r2, #1]
 800cc4a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cc4e:	f1be 0f09 	cmp.w	lr, #9
 800cc52:	d938      	bls.n	800ccc6 <_strtod_l+0x33e>
 800cc54:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cc56:	1a7f      	subs	r7, r7, r1
 800cc58:	2f08      	cmp	r7, #8
 800cc5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800cc5e:	dc03      	bgt.n	800cc68 <_strtod_l+0x2e0>
 800cc60:	9908      	ldr	r1, [sp, #32]
 800cc62:	428f      	cmp	r7, r1
 800cc64:	bfa8      	it	ge
 800cc66:	460f      	movge	r7, r1
 800cc68:	f1bc 0f00 	cmp.w	ip, #0
 800cc6c:	d000      	beq.n	800cc70 <_strtod_l+0x2e8>
 800cc6e:	427f      	negs	r7, r7
 800cc70:	2e00      	cmp	r6, #0
 800cc72:	d14f      	bne.n	800cd14 <_strtod_l+0x38c>
 800cc74:	9904      	ldr	r1, [sp, #16]
 800cc76:	4301      	orrs	r1, r0
 800cc78:	f47f aec1 	bne.w	800c9fe <_strtod_l+0x76>
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f47f aedb 	bne.w	800ca38 <_strtod_l+0xb0>
 800cc82:	2a69      	cmp	r2, #105	; 0x69
 800cc84:	d029      	beq.n	800ccda <_strtod_l+0x352>
 800cc86:	dc26      	bgt.n	800ccd6 <_strtod_l+0x34e>
 800cc88:	2a49      	cmp	r2, #73	; 0x49
 800cc8a:	d026      	beq.n	800ccda <_strtod_l+0x352>
 800cc8c:	2a4e      	cmp	r2, #78	; 0x4e
 800cc8e:	f47f aed3 	bne.w	800ca38 <_strtod_l+0xb0>
 800cc92:	499b      	ldr	r1, [pc, #620]	; (800cf00 <_strtod_l+0x578>)
 800cc94:	a815      	add	r0, sp, #84	; 0x54
 800cc96:	f002 fe45 	bl	800f924 <__match>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	f43f aecc 	beq.w	800ca38 <_strtod_l+0xb0>
 800cca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b28      	cmp	r3, #40	; 0x28
 800cca6:	d12f      	bne.n	800cd08 <_strtod_l+0x380>
 800cca8:	4996      	ldr	r1, [pc, #600]	; (800cf04 <_strtod_l+0x57c>)
 800ccaa:	aa18      	add	r2, sp, #96	; 0x60
 800ccac:	a815      	add	r0, sp, #84	; 0x54
 800ccae:	f002 fe4d 	bl	800f94c <__hexnan>
 800ccb2:	2805      	cmp	r0, #5
 800ccb4:	d128      	bne.n	800cd08 <_strtod_l+0x380>
 800ccb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ccb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ccbc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ccc0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ccc4:	e69b      	b.n	800c9fe <_strtod_l+0x76>
 800ccc6:	9f08      	ldr	r7, [sp, #32]
 800ccc8:	210a      	movs	r1, #10
 800ccca:	fb01 2107 	mla	r1, r1, r7, r2
 800ccce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ccd2:	9208      	str	r2, [sp, #32]
 800ccd4:	e7b5      	b.n	800cc42 <_strtod_l+0x2ba>
 800ccd6:	2a6e      	cmp	r2, #110	; 0x6e
 800ccd8:	e7d9      	b.n	800cc8e <_strtod_l+0x306>
 800ccda:	498b      	ldr	r1, [pc, #556]	; (800cf08 <_strtod_l+0x580>)
 800ccdc:	a815      	add	r0, sp, #84	; 0x54
 800ccde:	f002 fe21 	bl	800f924 <__match>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	f43f aea8 	beq.w	800ca38 <_strtod_l+0xb0>
 800cce8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccea:	4988      	ldr	r1, [pc, #544]	; (800cf0c <_strtod_l+0x584>)
 800ccec:	3b01      	subs	r3, #1
 800ccee:	a815      	add	r0, sp, #84	; 0x54
 800ccf0:	9315      	str	r3, [sp, #84]	; 0x54
 800ccf2:	f002 fe17 	bl	800f924 <__match>
 800ccf6:	b910      	cbnz	r0, 800ccfe <_strtod_l+0x376>
 800ccf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	9315      	str	r3, [sp, #84]	; 0x54
 800ccfe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800cf1c <_strtod_l+0x594>
 800cd02:	f04f 0800 	mov.w	r8, #0
 800cd06:	e67a      	b.n	800c9fe <_strtod_l+0x76>
 800cd08:	4881      	ldr	r0, [pc, #516]	; (800cf10 <_strtod_l+0x588>)
 800cd0a:	f001 fc8d 	bl	800e628 <nan>
 800cd0e:	ec59 8b10 	vmov	r8, r9, d0
 800cd12:	e674      	b.n	800c9fe <_strtod_l+0x76>
 800cd14:	9b05      	ldr	r3, [sp, #20]
 800cd16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd18:	1afb      	subs	r3, r7, r3
 800cd1a:	f1bb 0f00 	cmp.w	fp, #0
 800cd1e:	bf08      	it	eq
 800cd20:	46b3      	moveq	fp, r6
 800cd22:	2e10      	cmp	r6, #16
 800cd24:	9308      	str	r3, [sp, #32]
 800cd26:	4635      	mov	r5, r6
 800cd28:	bfa8      	it	ge
 800cd2a:	2510      	movge	r5, #16
 800cd2c:	f7f3 fbfa 	bl	8000524 <__aeabi_ui2d>
 800cd30:	2e09      	cmp	r6, #9
 800cd32:	4680      	mov	r8, r0
 800cd34:	4689      	mov	r9, r1
 800cd36:	dd13      	ble.n	800cd60 <_strtod_l+0x3d8>
 800cd38:	4b76      	ldr	r3, [pc, #472]	; (800cf14 <_strtod_l+0x58c>)
 800cd3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cd3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cd42:	f7f3 fc69 	bl	8000618 <__aeabi_dmul>
 800cd46:	4680      	mov	r8, r0
 800cd48:	4650      	mov	r0, sl
 800cd4a:	4689      	mov	r9, r1
 800cd4c:	f7f3 fbea 	bl	8000524 <__aeabi_ui2d>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	4640      	mov	r0, r8
 800cd56:	4649      	mov	r1, r9
 800cd58:	f7f3 faa8 	bl	80002ac <__adddf3>
 800cd5c:	4680      	mov	r8, r0
 800cd5e:	4689      	mov	r9, r1
 800cd60:	2e0f      	cmp	r6, #15
 800cd62:	dc38      	bgt.n	800cdd6 <_strtod_l+0x44e>
 800cd64:	9b08      	ldr	r3, [sp, #32]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f43f ae49 	beq.w	800c9fe <_strtod_l+0x76>
 800cd6c:	dd24      	ble.n	800cdb8 <_strtod_l+0x430>
 800cd6e:	2b16      	cmp	r3, #22
 800cd70:	dc0b      	bgt.n	800cd8a <_strtod_l+0x402>
 800cd72:	4968      	ldr	r1, [pc, #416]	; (800cf14 <_strtod_l+0x58c>)
 800cd74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd7c:	4642      	mov	r2, r8
 800cd7e:	464b      	mov	r3, r9
 800cd80:	f7f3 fc4a 	bl	8000618 <__aeabi_dmul>
 800cd84:	4680      	mov	r8, r0
 800cd86:	4689      	mov	r9, r1
 800cd88:	e639      	b.n	800c9fe <_strtod_l+0x76>
 800cd8a:	9a08      	ldr	r2, [sp, #32]
 800cd8c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800cd90:	4293      	cmp	r3, r2
 800cd92:	db20      	blt.n	800cdd6 <_strtod_l+0x44e>
 800cd94:	4c5f      	ldr	r4, [pc, #380]	; (800cf14 <_strtod_l+0x58c>)
 800cd96:	f1c6 060f 	rsb	r6, r6, #15
 800cd9a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800cd9e:	4642      	mov	r2, r8
 800cda0:	464b      	mov	r3, r9
 800cda2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cda6:	f7f3 fc37 	bl	8000618 <__aeabi_dmul>
 800cdaa:	9b08      	ldr	r3, [sp, #32]
 800cdac:	1b9e      	subs	r6, r3, r6
 800cdae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800cdb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cdb6:	e7e3      	b.n	800cd80 <_strtod_l+0x3f8>
 800cdb8:	9b08      	ldr	r3, [sp, #32]
 800cdba:	3316      	adds	r3, #22
 800cdbc:	db0b      	blt.n	800cdd6 <_strtod_l+0x44e>
 800cdbe:	9b05      	ldr	r3, [sp, #20]
 800cdc0:	1bdf      	subs	r7, r3, r7
 800cdc2:	4b54      	ldr	r3, [pc, #336]	; (800cf14 <_strtod_l+0x58c>)
 800cdc4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cdc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdcc:	4640      	mov	r0, r8
 800cdce:	4649      	mov	r1, r9
 800cdd0:	f7f3 fd4c 	bl	800086c <__aeabi_ddiv>
 800cdd4:	e7d6      	b.n	800cd84 <_strtod_l+0x3fc>
 800cdd6:	9b08      	ldr	r3, [sp, #32]
 800cdd8:	1b75      	subs	r5, r6, r5
 800cdda:	441d      	add	r5, r3
 800cddc:	2d00      	cmp	r5, #0
 800cdde:	dd70      	ble.n	800cec2 <_strtod_l+0x53a>
 800cde0:	f015 030f 	ands.w	r3, r5, #15
 800cde4:	d00a      	beq.n	800cdfc <_strtod_l+0x474>
 800cde6:	494b      	ldr	r1, [pc, #300]	; (800cf14 <_strtod_l+0x58c>)
 800cde8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cdec:	4642      	mov	r2, r8
 800cdee:	464b      	mov	r3, r9
 800cdf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdf4:	f7f3 fc10 	bl	8000618 <__aeabi_dmul>
 800cdf8:	4680      	mov	r8, r0
 800cdfa:	4689      	mov	r9, r1
 800cdfc:	f035 050f 	bics.w	r5, r5, #15
 800ce00:	d04d      	beq.n	800ce9e <_strtod_l+0x516>
 800ce02:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ce06:	dd22      	ble.n	800ce4e <_strtod_l+0x4c6>
 800ce08:	2500      	movs	r5, #0
 800ce0a:	46ab      	mov	fp, r5
 800ce0c:	9509      	str	r5, [sp, #36]	; 0x24
 800ce0e:	9505      	str	r5, [sp, #20]
 800ce10:	2322      	movs	r3, #34	; 0x22
 800ce12:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800cf1c <_strtod_l+0x594>
 800ce16:	6023      	str	r3, [r4, #0]
 800ce18:	f04f 0800 	mov.w	r8, #0
 800ce1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f43f aded 	beq.w	800c9fe <_strtod_l+0x76>
 800ce24:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ce26:	4620      	mov	r0, r4
 800ce28:	f002 fe7e 	bl	800fb28 <_Bfree>
 800ce2c:	9905      	ldr	r1, [sp, #20]
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f002 fe7a 	bl	800fb28 <_Bfree>
 800ce34:	4659      	mov	r1, fp
 800ce36:	4620      	mov	r0, r4
 800ce38:	f002 fe76 	bl	800fb28 <_Bfree>
 800ce3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f002 fe72 	bl	800fb28 <_Bfree>
 800ce44:	4629      	mov	r1, r5
 800ce46:	4620      	mov	r0, r4
 800ce48:	f002 fe6e 	bl	800fb28 <_Bfree>
 800ce4c:	e5d7      	b.n	800c9fe <_strtod_l+0x76>
 800ce4e:	4b32      	ldr	r3, [pc, #200]	; (800cf18 <_strtod_l+0x590>)
 800ce50:	9304      	str	r3, [sp, #16]
 800ce52:	2300      	movs	r3, #0
 800ce54:	112d      	asrs	r5, r5, #4
 800ce56:	4640      	mov	r0, r8
 800ce58:	4649      	mov	r1, r9
 800ce5a:	469a      	mov	sl, r3
 800ce5c:	2d01      	cmp	r5, #1
 800ce5e:	dc21      	bgt.n	800cea4 <_strtod_l+0x51c>
 800ce60:	b10b      	cbz	r3, 800ce66 <_strtod_l+0x4de>
 800ce62:	4680      	mov	r8, r0
 800ce64:	4689      	mov	r9, r1
 800ce66:	492c      	ldr	r1, [pc, #176]	; (800cf18 <_strtod_l+0x590>)
 800ce68:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ce6c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ce70:	4642      	mov	r2, r8
 800ce72:	464b      	mov	r3, r9
 800ce74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce78:	f7f3 fbce 	bl	8000618 <__aeabi_dmul>
 800ce7c:	4b27      	ldr	r3, [pc, #156]	; (800cf1c <_strtod_l+0x594>)
 800ce7e:	460a      	mov	r2, r1
 800ce80:	400b      	ands	r3, r1
 800ce82:	4927      	ldr	r1, [pc, #156]	; (800cf20 <_strtod_l+0x598>)
 800ce84:	428b      	cmp	r3, r1
 800ce86:	4680      	mov	r8, r0
 800ce88:	d8be      	bhi.n	800ce08 <_strtod_l+0x480>
 800ce8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ce8e:	428b      	cmp	r3, r1
 800ce90:	bf86      	itte	hi
 800ce92:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800cf24 <_strtod_l+0x59c>
 800ce96:	f04f 38ff 	movhi.w	r8, #4294967295
 800ce9a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ce9e:	2300      	movs	r3, #0
 800cea0:	9304      	str	r3, [sp, #16]
 800cea2:	e07b      	b.n	800cf9c <_strtod_l+0x614>
 800cea4:	07ea      	lsls	r2, r5, #31
 800cea6:	d505      	bpl.n	800ceb4 <_strtod_l+0x52c>
 800cea8:	9b04      	ldr	r3, [sp, #16]
 800ceaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceae:	f7f3 fbb3 	bl	8000618 <__aeabi_dmul>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	9a04      	ldr	r2, [sp, #16]
 800ceb6:	3208      	adds	r2, #8
 800ceb8:	f10a 0a01 	add.w	sl, sl, #1
 800cebc:	106d      	asrs	r5, r5, #1
 800cebe:	9204      	str	r2, [sp, #16]
 800cec0:	e7cc      	b.n	800ce5c <_strtod_l+0x4d4>
 800cec2:	d0ec      	beq.n	800ce9e <_strtod_l+0x516>
 800cec4:	426d      	negs	r5, r5
 800cec6:	f015 020f 	ands.w	r2, r5, #15
 800ceca:	d00a      	beq.n	800cee2 <_strtod_l+0x55a>
 800cecc:	4b11      	ldr	r3, [pc, #68]	; (800cf14 <_strtod_l+0x58c>)
 800cece:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ced2:	4640      	mov	r0, r8
 800ced4:	4649      	mov	r1, r9
 800ced6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceda:	f7f3 fcc7 	bl	800086c <__aeabi_ddiv>
 800cede:	4680      	mov	r8, r0
 800cee0:	4689      	mov	r9, r1
 800cee2:	112d      	asrs	r5, r5, #4
 800cee4:	d0db      	beq.n	800ce9e <_strtod_l+0x516>
 800cee6:	2d1f      	cmp	r5, #31
 800cee8:	dd1e      	ble.n	800cf28 <_strtod_l+0x5a0>
 800ceea:	2500      	movs	r5, #0
 800ceec:	46ab      	mov	fp, r5
 800ceee:	9509      	str	r5, [sp, #36]	; 0x24
 800cef0:	9505      	str	r5, [sp, #20]
 800cef2:	2322      	movs	r3, #34	; 0x22
 800cef4:	f04f 0800 	mov.w	r8, #0
 800cef8:	f04f 0900 	mov.w	r9, #0
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	e78d      	b.n	800ce1c <_strtod_l+0x494>
 800cf00:	0801109d 	.word	0x0801109d
 800cf04:	08011054 	.word	0x08011054
 800cf08:	08011095 	.word	0x08011095
 800cf0c:	080110d4 	.word	0x080110d4
 800cf10:	08011461 	.word	0x08011461
 800cf14:	08011240 	.word	0x08011240
 800cf18:	08011218 	.word	0x08011218
 800cf1c:	7ff00000 	.word	0x7ff00000
 800cf20:	7ca00000 	.word	0x7ca00000
 800cf24:	7fefffff 	.word	0x7fefffff
 800cf28:	f015 0310 	ands.w	r3, r5, #16
 800cf2c:	bf18      	it	ne
 800cf2e:	236a      	movne	r3, #106	; 0x6a
 800cf30:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d2d4 <_strtod_l+0x94c>
 800cf34:	9304      	str	r3, [sp, #16]
 800cf36:	4640      	mov	r0, r8
 800cf38:	4649      	mov	r1, r9
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	07ea      	lsls	r2, r5, #31
 800cf3e:	d504      	bpl.n	800cf4a <_strtod_l+0x5c2>
 800cf40:	e9da 2300 	ldrd	r2, r3, [sl]
 800cf44:	f7f3 fb68 	bl	8000618 <__aeabi_dmul>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	106d      	asrs	r5, r5, #1
 800cf4c:	f10a 0a08 	add.w	sl, sl, #8
 800cf50:	d1f4      	bne.n	800cf3c <_strtod_l+0x5b4>
 800cf52:	b10b      	cbz	r3, 800cf58 <_strtod_l+0x5d0>
 800cf54:	4680      	mov	r8, r0
 800cf56:	4689      	mov	r9, r1
 800cf58:	9b04      	ldr	r3, [sp, #16]
 800cf5a:	b1bb      	cbz	r3, 800cf8c <_strtod_l+0x604>
 800cf5c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800cf60:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	4649      	mov	r1, r9
 800cf68:	dd10      	ble.n	800cf8c <_strtod_l+0x604>
 800cf6a:	2b1f      	cmp	r3, #31
 800cf6c:	f340 811e 	ble.w	800d1ac <_strtod_l+0x824>
 800cf70:	2b34      	cmp	r3, #52	; 0x34
 800cf72:	bfde      	ittt	le
 800cf74:	f04f 33ff 	movle.w	r3, #4294967295
 800cf78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cf7c:	4093      	lslle	r3, r2
 800cf7e:	f04f 0800 	mov.w	r8, #0
 800cf82:	bfcc      	ite	gt
 800cf84:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cf88:	ea03 0901 	andle.w	r9, r3, r1
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	2300      	movs	r3, #0
 800cf90:	4640      	mov	r0, r8
 800cf92:	4649      	mov	r1, r9
 800cf94:	f7f3 fda8 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	d1a6      	bne.n	800ceea <_strtod_l+0x562>
 800cf9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfa2:	4633      	mov	r3, r6
 800cfa4:	465a      	mov	r2, fp
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f002 fe26 	bl	800fbf8 <__s2b>
 800cfac:	9009      	str	r0, [sp, #36]	; 0x24
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	f43f af2a 	beq.w	800ce08 <_strtod_l+0x480>
 800cfb4:	9a08      	ldr	r2, [sp, #32]
 800cfb6:	9b05      	ldr	r3, [sp, #20]
 800cfb8:	2a00      	cmp	r2, #0
 800cfba:	eba3 0307 	sub.w	r3, r3, r7
 800cfbe:	bfa8      	it	ge
 800cfc0:	2300      	movge	r3, #0
 800cfc2:	930c      	str	r3, [sp, #48]	; 0x30
 800cfc4:	2500      	movs	r5, #0
 800cfc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cfca:	9312      	str	r3, [sp, #72]	; 0x48
 800cfcc:	46ab      	mov	fp, r5
 800cfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	6859      	ldr	r1, [r3, #4]
 800cfd4:	f002 fd68 	bl	800faa8 <_Balloc>
 800cfd8:	9005      	str	r0, [sp, #20]
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	f43f af18 	beq.w	800ce10 <_strtod_l+0x488>
 800cfe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe2:	691a      	ldr	r2, [r3, #16]
 800cfe4:	3202      	adds	r2, #2
 800cfe6:	f103 010c 	add.w	r1, r3, #12
 800cfea:	0092      	lsls	r2, r2, #2
 800cfec:	300c      	adds	r0, #12
 800cfee:	f001 fb0a 	bl	800e606 <memcpy>
 800cff2:	ec49 8b10 	vmov	d0, r8, r9
 800cff6:	aa18      	add	r2, sp, #96	; 0x60
 800cff8:	a917      	add	r1, sp, #92	; 0x5c
 800cffa:	4620      	mov	r0, r4
 800cffc:	f003 f930 	bl	8010260 <__d2b>
 800d000:	ec49 8b18 	vmov	d8, r8, r9
 800d004:	9016      	str	r0, [sp, #88]	; 0x58
 800d006:	2800      	cmp	r0, #0
 800d008:	f43f af02 	beq.w	800ce10 <_strtod_l+0x488>
 800d00c:	2101      	movs	r1, #1
 800d00e:	4620      	mov	r0, r4
 800d010:	f002 fe8a 	bl	800fd28 <__i2b>
 800d014:	4683      	mov	fp, r0
 800d016:	2800      	cmp	r0, #0
 800d018:	f43f aefa 	beq.w	800ce10 <_strtod_l+0x488>
 800d01c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d01e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d020:	2e00      	cmp	r6, #0
 800d022:	bfab      	itete	ge
 800d024:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d026:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d028:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d02a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d02e:	bfac      	ite	ge
 800d030:	eb06 0a03 	addge.w	sl, r6, r3
 800d034:	1b9f      	sublt	r7, r3, r6
 800d036:	9b04      	ldr	r3, [sp, #16]
 800d038:	1af6      	subs	r6, r6, r3
 800d03a:	4416      	add	r6, r2
 800d03c:	4ba0      	ldr	r3, [pc, #640]	; (800d2c0 <_strtod_l+0x938>)
 800d03e:	3e01      	subs	r6, #1
 800d040:	429e      	cmp	r6, r3
 800d042:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d046:	f280 80c4 	bge.w	800d1d2 <_strtod_l+0x84a>
 800d04a:	1b9b      	subs	r3, r3, r6
 800d04c:	2b1f      	cmp	r3, #31
 800d04e:	eba2 0203 	sub.w	r2, r2, r3
 800d052:	f04f 0101 	mov.w	r1, #1
 800d056:	f300 80b0 	bgt.w	800d1ba <_strtod_l+0x832>
 800d05a:	fa01 f303 	lsl.w	r3, r1, r3
 800d05e:	930e      	str	r3, [sp, #56]	; 0x38
 800d060:	2300      	movs	r3, #0
 800d062:	930d      	str	r3, [sp, #52]	; 0x34
 800d064:	eb0a 0602 	add.w	r6, sl, r2
 800d068:	9b04      	ldr	r3, [sp, #16]
 800d06a:	45b2      	cmp	sl, r6
 800d06c:	4417      	add	r7, r2
 800d06e:	441f      	add	r7, r3
 800d070:	4653      	mov	r3, sl
 800d072:	bfa8      	it	ge
 800d074:	4633      	movge	r3, r6
 800d076:	42bb      	cmp	r3, r7
 800d078:	bfa8      	it	ge
 800d07a:	463b      	movge	r3, r7
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	bfc2      	ittt	gt
 800d080:	1af6      	subgt	r6, r6, r3
 800d082:	1aff      	subgt	r7, r7, r3
 800d084:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	dd17      	ble.n	800d0be <_strtod_l+0x736>
 800d08e:	4659      	mov	r1, fp
 800d090:	461a      	mov	r2, r3
 800d092:	4620      	mov	r0, r4
 800d094:	f002 ff08 	bl	800fea8 <__pow5mult>
 800d098:	4683      	mov	fp, r0
 800d09a:	2800      	cmp	r0, #0
 800d09c:	f43f aeb8 	beq.w	800ce10 <_strtod_l+0x488>
 800d0a0:	4601      	mov	r1, r0
 800d0a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f002 fe55 	bl	800fd54 <__multiply>
 800d0aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	f43f aeaf 	beq.w	800ce10 <_strtod_l+0x488>
 800d0b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	f002 fd37 	bl	800fb28 <_Bfree>
 800d0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0bc:	9316      	str	r3, [sp, #88]	; 0x58
 800d0be:	2e00      	cmp	r6, #0
 800d0c0:	f300 808c 	bgt.w	800d1dc <_strtod_l+0x854>
 800d0c4:	9b08      	ldr	r3, [sp, #32]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	dd08      	ble.n	800d0dc <_strtod_l+0x754>
 800d0ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d0cc:	9905      	ldr	r1, [sp, #20]
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f002 feea 	bl	800fea8 <__pow5mult>
 800d0d4:	9005      	str	r0, [sp, #20]
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	f43f ae9a 	beq.w	800ce10 <_strtod_l+0x488>
 800d0dc:	2f00      	cmp	r7, #0
 800d0de:	dd08      	ble.n	800d0f2 <_strtod_l+0x76a>
 800d0e0:	9905      	ldr	r1, [sp, #20]
 800d0e2:	463a      	mov	r2, r7
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f002 ff39 	bl	800ff5c <__lshift>
 800d0ea:	9005      	str	r0, [sp, #20]
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	f43f ae8f 	beq.w	800ce10 <_strtod_l+0x488>
 800d0f2:	f1ba 0f00 	cmp.w	sl, #0
 800d0f6:	dd08      	ble.n	800d10a <_strtod_l+0x782>
 800d0f8:	4659      	mov	r1, fp
 800d0fa:	4652      	mov	r2, sl
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f002 ff2d 	bl	800ff5c <__lshift>
 800d102:	4683      	mov	fp, r0
 800d104:	2800      	cmp	r0, #0
 800d106:	f43f ae83 	beq.w	800ce10 <_strtod_l+0x488>
 800d10a:	9a05      	ldr	r2, [sp, #20]
 800d10c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d10e:	4620      	mov	r0, r4
 800d110:	f002 ffac 	bl	801006c <__mdiff>
 800d114:	4605      	mov	r5, r0
 800d116:	2800      	cmp	r0, #0
 800d118:	f43f ae7a 	beq.w	800ce10 <_strtod_l+0x488>
 800d11c:	68c3      	ldr	r3, [r0, #12]
 800d11e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d120:	2300      	movs	r3, #0
 800d122:	60c3      	str	r3, [r0, #12]
 800d124:	4659      	mov	r1, fp
 800d126:	f002 ff85 	bl	8010034 <__mcmp>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	da60      	bge.n	800d1f0 <_strtod_l+0x868>
 800d12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d130:	ea53 0308 	orrs.w	r3, r3, r8
 800d134:	f040 8084 	bne.w	800d240 <_strtod_l+0x8b8>
 800d138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d17f      	bne.n	800d240 <_strtod_l+0x8b8>
 800d140:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d144:	0d1b      	lsrs	r3, r3, #20
 800d146:	051b      	lsls	r3, r3, #20
 800d148:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d14c:	d978      	bls.n	800d240 <_strtod_l+0x8b8>
 800d14e:	696b      	ldr	r3, [r5, #20]
 800d150:	b913      	cbnz	r3, 800d158 <_strtod_l+0x7d0>
 800d152:	692b      	ldr	r3, [r5, #16]
 800d154:	2b01      	cmp	r3, #1
 800d156:	dd73      	ble.n	800d240 <_strtod_l+0x8b8>
 800d158:	4629      	mov	r1, r5
 800d15a:	2201      	movs	r2, #1
 800d15c:	4620      	mov	r0, r4
 800d15e:	f002 fefd 	bl	800ff5c <__lshift>
 800d162:	4659      	mov	r1, fp
 800d164:	4605      	mov	r5, r0
 800d166:	f002 ff65 	bl	8010034 <__mcmp>
 800d16a:	2800      	cmp	r0, #0
 800d16c:	dd68      	ble.n	800d240 <_strtod_l+0x8b8>
 800d16e:	9904      	ldr	r1, [sp, #16]
 800d170:	4a54      	ldr	r2, [pc, #336]	; (800d2c4 <_strtod_l+0x93c>)
 800d172:	464b      	mov	r3, r9
 800d174:	2900      	cmp	r1, #0
 800d176:	f000 8084 	beq.w	800d282 <_strtod_l+0x8fa>
 800d17a:	ea02 0109 	and.w	r1, r2, r9
 800d17e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d182:	dc7e      	bgt.n	800d282 <_strtod_l+0x8fa>
 800d184:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d188:	f77f aeb3 	ble.w	800cef2 <_strtod_l+0x56a>
 800d18c:	4b4e      	ldr	r3, [pc, #312]	; (800d2c8 <_strtod_l+0x940>)
 800d18e:	4640      	mov	r0, r8
 800d190:	4649      	mov	r1, r9
 800d192:	2200      	movs	r2, #0
 800d194:	f7f3 fa40 	bl	8000618 <__aeabi_dmul>
 800d198:	4b4a      	ldr	r3, [pc, #296]	; (800d2c4 <_strtod_l+0x93c>)
 800d19a:	400b      	ands	r3, r1
 800d19c:	4680      	mov	r8, r0
 800d19e:	4689      	mov	r9, r1
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f47f ae3f 	bne.w	800ce24 <_strtod_l+0x49c>
 800d1a6:	2322      	movs	r3, #34	; 0x22
 800d1a8:	6023      	str	r3, [r4, #0]
 800d1aa:	e63b      	b.n	800ce24 <_strtod_l+0x49c>
 800d1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1b4:	ea03 0808 	and.w	r8, r3, r8
 800d1b8:	e6e8      	b.n	800cf8c <_strtod_l+0x604>
 800d1ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d1be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d1c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d1c6:	36e2      	adds	r6, #226	; 0xe2
 800d1c8:	fa01 f306 	lsl.w	r3, r1, r6
 800d1cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d1d0:	e748      	b.n	800d064 <_strtod_l+0x6dc>
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d1da:	e743      	b.n	800d064 <_strtod_l+0x6dc>
 800d1dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d1de:	4632      	mov	r2, r6
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	f002 febb 	bl	800ff5c <__lshift>
 800d1e6:	9016      	str	r0, [sp, #88]	; 0x58
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	f47f af6b 	bne.w	800d0c4 <_strtod_l+0x73c>
 800d1ee:	e60f      	b.n	800ce10 <_strtod_l+0x488>
 800d1f0:	46ca      	mov	sl, r9
 800d1f2:	d171      	bne.n	800d2d8 <_strtod_l+0x950>
 800d1f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1fa:	b352      	cbz	r2, 800d252 <_strtod_l+0x8ca>
 800d1fc:	4a33      	ldr	r2, [pc, #204]	; (800d2cc <_strtod_l+0x944>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d12a      	bne.n	800d258 <_strtod_l+0x8d0>
 800d202:	9b04      	ldr	r3, [sp, #16]
 800d204:	4641      	mov	r1, r8
 800d206:	b1fb      	cbz	r3, 800d248 <_strtod_l+0x8c0>
 800d208:	4b2e      	ldr	r3, [pc, #184]	; (800d2c4 <_strtod_l+0x93c>)
 800d20a:	ea09 0303 	and.w	r3, r9, r3
 800d20e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d212:	f04f 32ff 	mov.w	r2, #4294967295
 800d216:	d81a      	bhi.n	800d24e <_strtod_l+0x8c6>
 800d218:	0d1b      	lsrs	r3, r3, #20
 800d21a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d21e:	fa02 f303 	lsl.w	r3, r2, r3
 800d222:	4299      	cmp	r1, r3
 800d224:	d118      	bne.n	800d258 <_strtod_l+0x8d0>
 800d226:	4b2a      	ldr	r3, [pc, #168]	; (800d2d0 <_strtod_l+0x948>)
 800d228:	459a      	cmp	sl, r3
 800d22a:	d102      	bne.n	800d232 <_strtod_l+0x8aa>
 800d22c:	3101      	adds	r1, #1
 800d22e:	f43f adef 	beq.w	800ce10 <_strtod_l+0x488>
 800d232:	4b24      	ldr	r3, [pc, #144]	; (800d2c4 <_strtod_l+0x93c>)
 800d234:	ea0a 0303 	and.w	r3, sl, r3
 800d238:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d23c:	f04f 0800 	mov.w	r8, #0
 800d240:	9b04      	ldr	r3, [sp, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d1a2      	bne.n	800d18c <_strtod_l+0x804>
 800d246:	e5ed      	b.n	800ce24 <_strtod_l+0x49c>
 800d248:	f04f 33ff 	mov.w	r3, #4294967295
 800d24c:	e7e9      	b.n	800d222 <_strtod_l+0x89a>
 800d24e:	4613      	mov	r3, r2
 800d250:	e7e7      	b.n	800d222 <_strtod_l+0x89a>
 800d252:	ea53 0308 	orrs.w	r3, r3, r8
 800d256:	d08a      	beq.n	800d16e <_strtod_l+0x7e6>
 800d258:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d25a:	b1e3      	cbz	r3, 800d296 <_strtod_l+0x90e>
 800d25c:	ea13 0f0a 	tst.w	r3, sl
 800d260:	d0ee      	beq.n	800d240 <_strtod_l+0x8b8>
 800d262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d264:	9a04      	ldr	r2, [sp, #16]
 800d266:	4640      	mov	r0, r8
 800d268:	4649      	mov	r1, r9
 800d26a:	b1c3      	cbz	r3, 800d29e <_strtod_l+0x916>
 800d26c:	f7ff fb6e 	bl	800c94c <sulp>
 800d270:	4602      	mov	r2, r0
 800d272:	460b      	mov	r3, r1
 800d274:	ec51 0b18 	vmov	r0, r1, d8
 800d278:	f7f3 f818 	bl	80002ac <__adddf3>
 800d27c:	4680      	mov	r8, r0
 800d27e:	4689      	mov	r9, r1
 800d280:	e7de      	b.n	800d240 <_strtod_l+0x8b8>
 800d282:	4013      	ands	r3, r2
 800d284:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d288:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d28c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d290:	f04f 38ff 	mov.w	r8, #4294967295
 800d294:	e7d4      	b.n	800d240 <_strtod_l+0x8b8>
 800d296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d298:	ea13 0f08 	tst.w	r3, r8
 800d29c:	e7e0      	b.n	800d260 <_strtod_l+0x8d8>
 800d29e:	f7ff fb55 	bl	800c94c <sulp>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	ec51 0b18 	vmov	r0, r1, d8
 800d2aa:	f7f2 fffd 	bl	80002a8 <__aeabi_dsub>
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	4680      	mov	r8, r0
 800d2b4:	4689      	mov	r9, r1
 800d2b6:	f7f3 fc17 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	d0c0      	beq.n	800d240 <_strtod_l+0x8b8>
 800d2be:	e618      	b.n	800cef2 <_strtod_l+0x56a>
 800d2c0:	fffffc02 	.word	0xfffffc02
 800d2c4:	7ff00000 	.word	0x7ff00000
 800d2c8:	39500000 	.word	0x39500000
 800d2cc:	000fffff 	.word	0x000fffff
 800d2d0:	7fefffff 	.word	0x7fefffff
 800d2d4:	08011068 	.word	0x08011068
 800d2d8:	4659      	mov	r1, fp
 800d2da:	4628      	mov	r0, r5
 800d2dc:	f003 f81a 	bl	8010314 <__ratio>
 800d2e0:	ec57 6b10 	vmov	r6, r7, d0
 800d2e4:	ee10 0a10 	vmov	r0, s0
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d2ee:	4639      	mov	r1, r7
 800d2f0:	f7f3 fc0e 	bl	8000b10 <__aeabi_dcmple>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d071      	beq.n	800d3dc <_strtod_l+0xa54>
 800d2f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d17c      	bne.n	800d3f8 <_strtod_l+0xa70>
 800d2fe:	f1b8 0f00 	cmp.w	r8, #0
 800d302:	d15a      	bne.n	800d3ba <_strtod_l+0xa32>
 800d304:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d15d      	bne.n	800d3c8 <_strtod_l+0xa40>
 800d30c:	4b90      	ldr	r3, [pc, #576]	; (800d550 <_strtod_l+0xbc8>)
 800d30e:	2200      	movs	r2, #0
 800d310:	4630      	mov	r0, r6
 800d312:	4639      	mov	r1, r7
 800d314:	f7f3 fbf2 	bl	8000afc <__aeabi_dcmplt>
 800d318:	2800      	cmp	r0, #0
 800d31a:	d15c      	bne.n	800d3d6 <_strtod_l+0xa4e>
 800d31c:	4630      	mov	r0, r6
 800d31e:	4639      	mov	r1, r7
 800d320:	4b8c      	ldr	r3, [pc, #560]	; (800d554 <_strtod_l+0xbcc>)
 800d322:	2200      	movs	r2, #0
 800d324:	f7f3 f978 	bl	8000618 <__aeabi_dmul>
 800d328:	4606      	mov	r6, r0
 800d32a:	460f      	mov	r7, r1
 800d32c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d330:	9606      	str	r6, [sp, #24]
 800d332:	9307      	str	r3, [sp, #28]
 800d334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d338:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d33c:	4b86      	ldr	r3, [pc, #536]	; (800d558 <_strtod_l+0xbd0>)
 800d33e:	ea0a 0303 	and.w	r3, sl, r3
 800d342:	930d      	str	r3, [sp, #52]	; 0x34
 800d344:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d346:	4b85      	ldr	r3, [pc, #532]	; (800d55c <_strtod_l+0xbd4>)
 800d348:	429a      	cmp	r2, r3
 800d34a:	f040 8090 	bne.w	800d46e <_strtod_l+0xae6>
 800d34e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d352:	ec49 8b10 	vmov	d0, r8, r9
 800d356:	f002 ff13 	bl	8010180 <__ulp>
 800d35a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d35e:	ec51 0b10 	vmov	r0, r1, d0
 800d362:	f7f3 f959 	bl	8000618 <__aeabi_dmul>
 800d366:	4642      	mov	r2, r8
 800d368:	464b      	mov	r3, r9
 800d36a:	f7f2 ff9f 	bl	80002ac <__adddf3>
 800d36e:	460b      	mov	r3, r1
 800d370:	4979      	ldr	r1, [pc, #484]	; (800d558 <_strtod_l+0xbd0>)
 800d372:	4a7b      	ldr	r2, [pc, #492]	; (800d560 <_strtod_l+0xbd8>)
 800d374:	4019      	ands	r1, r3
 800d376:	4291      	cmp	r1, r2
 800d378:	4680      	mov	r8, r0
 800d37a:	d944      	bls.n	800d406 <_strtod_l+0xa7e>
 800d37c:	ee18 2a90 	vmov	r2, s17
 800d380:	4b78      	ldr	r3, [pc, #480]	; (800d564 <_strtod_l+0xbdc>)
 800d382:	429a      	cmp	r2, r3
 800d384:	d104      	bne.n	800d390 <_strtod_l+0xa08>
 800d386:	ee18 3a10 	vmov	r3, s16
 800d38a:	3301      	adds	r3, #1
 800d38c:	f43f ad40 	beq.w	800ce10 <_strtod_l+0x488>
 800d390:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d564 <_strtod_l+0xbdc>
 800d394:	f04f 38ff 	mov.w	r8, #4294967295
 800d398:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d39a:	4620      	mov	r0, r4
 800d39c:	f002 fbc4 	bl	800fb28 <_Bfree>
 800d3a0:	9905      	ldr	r1, [sp, #20]
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f002 fbc0 	bl	800fb28 <_Bfree>
 800d3a8:	4659      	mov	r1, fp
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f002 fbbc 	bl	800fb28 <_Bfree>
 800d3b0:	4629      	mov	r1, r5
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f002 fbb8 	bl	800fb28 <_Bfree>
 800d3b8:	e609      	b.n	800cfce <_strtod_l+0x646>
 800d3ba:	f1b8 0f01 	cmp.w	r8, #1
 800d3be:	d103      	bne.n	800d3c8 <_strtod_l+0xa40>
 800d3c0:	f1b9 0f00 	cmp.w	r9, #0
 800d3c4:	f43f ad95 	beq.w	800cef2 <_strtod_l+0x56a>
 800d3c8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d520 <_strtod_l+0xb98>
 800d3cc:	4f60      	ldr	r7, [pc, #384]	; (800d550 <_strtod_l+0xbc8>)
 800d3ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d3d2:	2600      	movs	r6, #0
 800d3d4:	e7ae      	b.n	800d334 <_strtod_l+0x9ac>
 800d3d6:	4f5f      	ldr	r7, [pc, #380]	; (800d554 <_strtod_l+0xbcc>)
 800d3d8:	2600      	movs	r6, #0
 800d3da:	e7a7      	b.n	800d32c <_strtod_l+0x9a4>
 800d3dc:	4b5d      	ldr	r3, [pc, #372]	; (800d554 <_strtod_l+0xbcc>)
 800d3de:	4630      	mov	r0, r6
 800d3e0:	4639      	mov	r1, r7
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f7f3 f918 	bl	8000618 <__aeabi_dmul>
 800d3e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	460f      	mov	r7, r1
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d09c      	beq.n	800d32c <_strtod_l+0x9a4>
 800d3f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d3f6:	e79d      	b.n	800d334 <_strtod_l+0x9ac>
 800d3f8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d528 <_strtod_l+0xba0>
 800d3fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d400:	ec57 6b17 	vmov	r6, r7, d7
 800d404:	e796      	b.n	800d334 <_strtod_l+0x9ac>
 800d406:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d40a:	9b04      	ldr	r3, [sp, #16]
 800d40c:	46ca      	mov	sl, r9
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1c2      	bne.n	800d398 <_strtod_l+0xa10>
 800d412:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d418:	0d1b      	lsrs	r3, r3, #20
 800d41a:	051b      	lsls	r3, r3, #20
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d1bb      	bne.n	800d398 <_strtod_l+0xa10>
 800d420:	4630      	mov	r0, r6
 800d422:	4639      	mov	r1, r7
 800d424:	f7f3 fc58 	bl	8000cd8 <__aeabi_d2lz>
 800d428:	f7f3 f8c8 	bl	80005bc <__aeabi_l2d>
 800d42c:	4602      	mov	r2, r0
 800d42e:	460b      	mov	r3, r1
 800d430:	4630      	mov	r0, r6
 800d432:	4639      	mov	r1, r7
 800d434:	f7f2 ff38 	bl	80002a8 <__aeabi_dsub>
 800d438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d43a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d43e:	ea43 0308 	orr.w	r3, r3, r8
 800d442:	4313      	orrs	r3, r2
 800d444:	4606      	mov	r6, r0
 800d446:	460f      	mov	r7, r1
 800d448:	d054      	beq.n	800d4f4 <_strtod_l+0xb6c>
 800d44a:	a339      	add	r3, pc, #228	; (adr r3, 800d530 <_strtod_l+0xba8>)
 800d44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d450:	f7f3 fb54 	bl	8000afc <__aeabi_dcmplt>
 800d454:	2800      	cmp	r0, #0
 800d456:	f47f ace5 	bne.w	800ce24 <_strtod_l+0x49c>
 800d45a:	a337      	add	r3, pc, #220	; (adr r3, 800d538 <_strtod_l+0xbb0>)
 800d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d460:	4630      	mov	r0, r6
 800d462:	4639      	mov	r1, r7
 800d464:	f7f3 fb68 	bl	8000b38 <__aeabi_dcmpgt>
 800d468:	2800      	cmp	r0, #0
 800d46a:	d095      	beq.n	800d398 <_strtod_l+0xa10>
 800d46c:	e4da      	b.n	800ce24 <_strtod_l+0x49c>
 800d46e:	9b04      	ldr	r3, [sp, #16]
 800d470:	b333      	cbz	r3, 800d4c0 <_strtod_l+0xb38>
 800d472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d474:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d478:	d822      	bhi.n	800d4c0 <_strtod_l+0xb38>
 800d47a:	a331      	add	r3, pc, #196	; (adr r3, 800d540 <_strtod_l+0xbb8>)
 800d47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d480:	4630      	mov	r0, r6
 800d482:	4639      	mov	r1, r7
 800d484:	f7f3 fb44 	bl	8000b10 <__aeabi_dcmple>
 800d488:	b1a0      	cbz	r0, 800d4b4 <_strtod_l+0xb2c>
 800d48a:	4639      	mov	r1, r7
 800d48c:	4630      	mov	r0, r6
 800d48e:	f7f3 fb9b 	bl	8000bc8 <__aeabi_d2uiz>
 800d492:	2801      	cmp	r0, #1
 800d494:	bf38      	it	cc
 800d496:	2001      	movcc	r0, #1
 800d498:	f7f3 f844 	bl	8000524 <__aeabi_ui2d>
 800d49c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d49e:	4606      	mov	r6, r0
 800d4a0:	460f      	mov	r7, r1
 800d4a2:	bb23      	cbnz	r3, 800d4ee <_strtod_l+0xb66>
 800d4a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4a8:	9010      	str	r0, [sp, #64]	; 0x40
 800d4aa:	9311      	str	r3, [sp, #68]	; 0x44
 800d4ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d4b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d4b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d4bc:	1a9b      	subs	r3, r3, r2
 800d4be:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d4c4:	eeb0 0a48 	vmov.f32	s0, s16
 800d4c8:	eef0 0a68 	vmov.f32	s1, s17
 800d4cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d4d0:	f002 fe56 	bl	8010180 <__ulp>
 800d4d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d4d8:	ec53 2b10 	vmov	r2, r3, d0
 800d4dc:	f7f3 f89c 	bl	8000618 <__aeabi_dmul>
 800d4e0:	ec53 2b18 	vmov	r2, r3, d8
 800d4e4:	f7f2 fee2 	bl	80002ac <__adddf3>
 800d4e8:	4680      	mov	r8, r0
 800d4ea:	4689      	mov	r9, r1
 800d4ec:	e78d      	b.n	800d40a <_strtod_l+0xa82>
 800d4ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d4f2:	e7db      	b.n	800d4ac <_strtod_l+0xb24>
 800d4f4:	a314      	add	r3, pc, #80	; (adr r3, 800d548 <_strtod_l+0xbc0>)
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	f7f3 faff 	bl	8000afc <__aeabi_dcmplt>
 800d4fe:	e7b3      	b.n	800d468 <_strtod_l+0xae0>
 800d500:	2300      	movs	r3, #0
 800d502:	930a      	str	r3, [sp, #40]	; 0x28
 800d504:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d506:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d508:	6013      	str	r3, [r2, #0]
 800d50a:	f7ff ba7c 	b.w	800ca06 <_strtod_l+0x7e>
 800d50e:	2a65      	cmp	r2, #101	; 0x65
 800d510:	f43f ab75 	beq.w	800cbfe <_strtod_l+0x276>
 800d514:	2a45      	cmp	r2, #69	; 0x45
 800d516:	f43f ab72 	beq.w	800cbfe <_strtod_l+0x276>
 800d51a:	2301      	movs	r3, #1
 800d51c:	f7ff bbaa 	b.w	800cc74 <_strtod_l+0x2ec>
 800d520:	00000000 	.word	0x00000000
 800d524:	bff00000 	.word	0xbff00000
 800d528:	00000000 	.word	0x00000000
 800d52c:	3ff00000 	.word	0x3ff00000
 800d530:	94a03595 	.word	0x94a03595
 800d534:	3fdfffff 	.word	0x3fdfffff
 800d538:	35afe535 	.word	0x35afe535
 800d53c:	3fe00000 	.word	0x3fe00000
 800d540:	ffc00000 	.word	0xffc00000
 800d544:	41dfffff 	.word	0x41dfffff
 800d548:	94a03595 	.word	0x94a03595
 800d54c:	3fcfffff 	.word	0x3fcfffff
 800d550:	3ff00000 	.word	0x3ff00000
 800d554:	3fe00000 	.word	0x3fe00000
 800d558:	7ff00000 	.word	0x7ff00000
 800d55c:	7fe00000 	.word	0x7fe00000
 800d560:	7c9fffff 	.word	0x7c9fffff
 800d564:	7fefffff 	.word	0x7fefffff

0800d568 <_strtod_r>:
 800d568:	4b01      	ldr	r3, [pc, #4]	; (800d570 <_strtod_r+0x8>)
 800d56a:	f7ff ba0d 	b.w	800c988 <_strtod_l>
 800d56e:	bf00      	nop
 800d570:	2000004c 	.word	0x2000004c

0800d574 <strtod>:
 800d574:	460a      	mov	r2, r1
 800d576:	4601      	mov	r1, r0
 800d578:	4802      	ldr	r0, [pc, #8]	; (800d584 <strtod+0x10>)
 800d57a:	4b03      	ldr	r3, [pc, #12]	; (800d588 <strtod+0x14>)
 800d57c:	6800      	ldr	r0, [r0, #0]
 800d57e:	f7ff ba03 	b.w	800c988 <_strtod_l>
 800d582:	bf00      	nop
 800d584:	20000204 	.word	0x20000204
 800d588:	2000004c 	.word	0x2000004c

0800d58c <__cvt>:
 800d58c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d590:	ec55 4b10 	vmov	r4, r5, d0
 800d594:	2d00      	cmp	r5, #0
 800d596:	460e      	mov	r6, r1
 800d598:	4619      	mov	r1, r3
 800d59a:	462b      	mov	r3, r5
 800d59c:	bfbb      	ittet	lt
 800d59e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d5a2:	461d      	movlt	r5, r3
 800d5a4:	2300      	movge	r3, #0
 800d5a6:	232d      	movlt	r3, #45	; 0x2d
 800d5a8:	700b      	strb	r3, [r1, #0]
 800d5aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d5b0:	4691      	mov	r9, r2
 800d5b2:	f023 0820 	bic.w	r8, r3, #32
 800d5b6:	bfbc      	itt	lt
 800d5b8:	4622      	movlt	r2, r4
 800d5ba:	4614      	movlt	r4, r2
 800d5bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d5c0:	d005      	beq.n	800d5ce <__cvt+0x42>
 800d5c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d5c6:	d100      	bne.n	800d5ca <__cvt+0x3e>
 800d5c8:	3601      	adds	r6, #1
 800d5ca:	2102      	movs	r1, #2
 800d5cc:	e000      	b.n	800d5d0 <__cvt+0x44>
 800d5ce:	2103      	movs	r1, #3
 800d5d0:	ab03      	add	r3, sp, #12
 800d5d2:	9301      	str	r3, [sp, #4]
 800d5d4:	ab02      	add	r3, sp, #8
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	ec45 4b10 	vmov	d0, r4, r5
 800d5dc:	4653      	mov	r3, sl
 800d5de:	4632      	mov	r2, r6
 800d5e0:	f001 f8ba 	bl	800e758 <_dtoa_r>
 800d5e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d5e8:	4607      	mov	r7, r0
 800d5ea:	d102      	bne.n	800d5f2 <__cvt+0x66>
 800d5ec:	f019 0f01 	tst.w	r9, #1
 800d5f0:	d022      	beq.n	800d638 <__cvt+0xac>
 800d5f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d5f6:	eb07 0906 	add.w	r9, r7, r6
 800d5fa:	d110      	bne.n	800d61e <__cvt+0x92>
 800d5fc:	783b      	ldrb	r3, [r7, #0]
 800d5fe:	2b30      	cmp	r3, #48	; 0x30
 800d600:	d10a      	bne.n	800d618 <__cvt+0x8c>
 800d602:	2200      	movs	r2, #0
 800d604:	2300      	movs	r3, #0
 800d606:	4620      	mov	r0, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	f7f3 fa6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d60e:	b918      	cbnz	r0, 800d618 <__cvt+0x8c>
 800d610:	f1c6 0601 	rsb	r6, r6, #1
 800d614:	f8ca 6000 	str.w	r6, [sl]
 800d618:	f8da 3000 	ldr.w	r3, [sl]
 800d61c:	4499      	add	r9, r3
 800d61e:	2200      	movs	r2, #0
 800d620:	2300      	movs	r3, #0
 800d622:	4620      	mov	r0, r4
 800d624:	4629      	mov	r1, r5
 800d626:	f7f3 fa5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800d62a:	b108      	cbz	r0, 800d630 <__cvt+0xa4>
 800d62c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d630:	2230      	movs	r2, #48	; 0x30
 800d632:	9b03      	ldr	r3, [sp, #12]
 800d634:	454b      	cmp	r3, r9
 800d636:	d307      	bcc.n	800d648 <__cvt+0xbc>
 800d638:	9b03      	ldr	r3, [sp, #12]
 800d63a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d63c:	1bdb      	subs	r3, r3, r7
 800d63e:	4638      	mov	r0, r7
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	b004      	add	sp, #16
 800d644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d648:	1c59      	adds	r1, r3, #1
 800d64a:	9103      	str	r1, [sp, #12]
 800d64c:	701a      	strb	r2, [r3, #0]
 800d64e:	e7f0      	b.n	800d632 <__cvt+0xa6>

0800d650 <__exponent>:
 800d650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d652:	4603      	mov	r3, r0
 800d654:	2900      	cmp	r1, #0
 800d656:	bfb8      	it	lt
 800d658:	4249      	neglt	r1, r1
 800d65a:	f803 2b02 	strb.w	r2, [r3], #2
 800d65e:	bfb4      	ite	lt
 800d660:	222d      	movlt	r2, #45	; 0x2d
 800d662:	222b      	movge	r2, #43	; 0x2b
 800d664:	2909      	cmp	r1, #9
 800d666:	7042      	strb	r2, [r0, #1]
 800d668:	dd2a      	ble.n	800d6c0 <__exponent+0x70>
 800d66a:	f10d 0207 	add.w	r2, sp, #7
 800d66e:	4617      	mov	r7, r2
 800d670:	260a      	movs	r6, #10
 800d672:	4694      	mov	ip, r2
 800d674:	fb91 f5f6 	sdiv	r5, r1, r6
 800d678:	fb06 1415 	mls	r4, r6, r5, r1
 800d67c:	3430      	adds	r4, #48	; 0x30
 800d67e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d682:	460c      	mov	r4, r1
 800d684:	2c63      	cmp	r4, #99	; 0x63
 800d686:	f102 32ff 	add.w	r2, r2, #4294967295
 800d68a:	4629      	mov	r1, r5
 800d68c:	dcf1      	bgt.n	800d672 <__exponent+0x22>
 800d68e:	3130      	adds	r1, #48	; 0x30
 800d690:	f1ac 0402 	sub.w	r4, ip, #2
 800d694:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d698:	1c41      	adds	r1, r0, #1
 800d69a:	4622      	mov	r2, r4
 800d69c:	42ba      	cmp	r2, r7
 800d69e:	d30a      	bcc.n	800d6b6 <__exponent+0x66>
 800d6a0:	f10d 0209 	add.w	r2, sp, #9
 800d6a4:	eba2 020c 	sub.w	r2, r2, ip
 800d6a8:	42bc      	cmp	r4, r7
 800d6aa:	bf88      	it	hi
 800d6ac:	2200      	movhi	r2, #0
 800d6ae:	4413      	add	r3, r2
 800d6b0:	1a18      	subs	r0, r3, r0
 800d6b2:	b003      	add	sp, #12
 800d6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d6ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d6be:	e7ed      	b.n	800d69c <__exponent+0x4c>
 800d6c0:	2330      	movs	r3, #48	; 0x30
 800d6c2:	3130      	adds	r1, #48	; 0x30
 800d6c4:	7083      	strb	r3, [r0, #2]
 800d6c6:	70c1      	strb	r1, [r0, #3]
 800d6c8:	1d03      	adds	r3, r0, #4
 800d6ca:	e7f1      	b.n	800d6b0 <__exponent+0x60>

0800d6cc <_printf_float>:
 800d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d0:	ed2d 8b02 	vpush	{d8}
 800d6d4:	b08d      	sub	sp, #52	; 0x34
 800d6d6:	460c      	mov	r4, r1
 800d6d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d6dc:	4616      	mov	r6, r2
 800d6de:	461f      	mov	r7, r3
 800d6e0:	4605      	mov	r5, r0
 800d6e2:	f000 ff09 	bl	800e4f8 <_localeconv_r>
 800d6e6:	f8d0 a000 	ldr.w	sl, [r0]
 800d6ea:	4650      	mov	r0, sl
 800d6ec:	f7f2 fdd0 	bl	8000290 <strlen>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	930a      	str	r3, [sp, #40]	; 0x28
 800d6f4:	6823      	ldr	r3, [r4, #0]
 800d6f6:	9305      	str	r3, [sp, #20]
 800d6f8:	f8d8 3000 	ldr.w	r3, [r8]
 800d6fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d700:	3307      	adds	r3, #7
 800d702:	f023 0307 	bic.w	r3, r3, #7
 800d706:	f103 0208 	add.w	r2, r3, #8
 800d70a:	f8c8 2000 	str.w	r2, [r8]
 800d70e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d712:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d716:	9307      	str	r3, [sp, #28]
 800d718:	f8cd 8018 	str.w	r8, [sp, #24]
 800d71c:	ee08 0a10 	vmov	s16, r0
 800d720:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d724:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d728:	4b9e      	ldr	r3, [pc, #632]	; (800d9a4 <_printf_float+0x2d8>)
 800d72a:	f04f 32ff 	mov.w	r2, #4294967295
 800d72e:	f7f3 fa0d 	bl	8000b4c <__aeabi_dcmpun>
 800d732:	bb88      	cbnz	r0, 800d798 <_printf_float+0xcc>
 800d734:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d738:	4b9a      	ldr	r3, [pc, #616]	; (800d9a4 <_printf_float+0x2d8>)
 800d73a:	f04f 32ff 	mov.w	r2, #4294967295
 800d73e:	f7f3 f9e7 	bl	8000b10 <__aeabi_dcmple>
 800d742:	bb48      	cbnz	r0, 800d798 <_printf_float+0xcc>
 800d744:	2200      	movs	r2, #0
 800d746:	2300      	movs	r3, #0
 800d748:	4640      	mov	r0, r8
 800d74a:	4649      	mov	r1, r9
 800d74c:	f7f3 f9d6 	bl	8000afc <__aeabi_dcmplt>
 800d750:	b110      	cbz	r0, 800d758 <_printf_float+0x8c>
 800d752:	232d      	movs	r3, #45	; 0x2d
 800d754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d758:	4a93      	ldr	r2, [pc, #588]	; (800d9a8 <_printf_float+0x2dc>)
 800d75a:	4b94      	ldr	r3, [pc, #592]	; (800d9ac <_printf_float+0x2e0>)
 800d75c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d760:	bf94      	ite	ls
 800d762:	4690      	movls	r8, r2
 800d764:	4698      	movhi	r8, r3
 800d766:	2303      	movs	r3, #3
 800d768:	6123      	str	r3, [r4, #16]
 800d76a:	9b05      	ldr	r3, [sp, #20]
 800d76c:	f023 0304 	bic.w	r3, r3, #4
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	f04f 0900 	mov.w	r9, #0
 800d776:	9700      	str	r7, [sp, #0]
 800d778:	4633      	mov	r3, r6
 800d77a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d77c:	4621      	mov	r1, r4
 800d77e:	4628      	mov	r0, r5
 800d780:	f000 f9da 	bl	800db38 <_printf_common>
 800d784:	3001      	adds	r0, #1
 800d786:	f040 8090 	bne.w	800d8aa <_printf_float+0x1de>
 800d78a:	f04f 30ff 	mov.w	r0, #4294967295
 800d78e:	b00d      	add	sp, #52	; 0x34
 800d790:	ecbd 8b02 	vpop	{d8}
 800d794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d798:	4642      	mov	r2, r8
 800d79a:	464b      	mov	r3, r9
 800d79c:	4640      	mov	r0, r8
 800d79e:	4649      	mov	r1, r9
 800d7a0:	f7f3 f9d4 	bl	8000b4c <__aeabi_dcmpun>
 800d7a4:	b140      	cbz	r0, 800d7b8 <_printf_float+0xec>
 800d7a6:	464b      	mov	r3, r9
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	bfbc      	itt	lt
 800d7ac:	232d      	movlt	r3, #45	; 0x2d
 800d7ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d7b2:	4a7f      	ldr	r2, [pc, #508]	; (800d9b0 <_printf_float+0x2e4>)
 800d7b4:	4b7f      	ldr	r3, [pc, #508]	; (800d9b4 <_printf_float+0x2e8>)
 800d7b6:	e7d1      	b.n	800d75c <_printf_float+0x90>
 800d7b8:	6863      	ldr	r3, [r4, #4]
 800d7ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d7be:	9206      	str	r2, [sp, #24]
 800d7c0:	1c5a      	adds	r2, r3, #1
 800d7c2:	d13f      	bne.n	800d844 <_printf_float+0x178>
 800d7c4:	2306      	movs	r3, #6
 800d7c6:	6063      	str	r3, [r4, #4]
 800d7c8:	9b05      	ldr	r3, [sp, #20]
 800d7ca:	6861      	ldr	r1, [r4, #4]
 800d7cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	9303      	str	r3, [sp, #12]
 800d7d4:	ab0a      	add	r3, sp, #40	; 0x28
 800d7d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d7da:	ab09      	add	r3, sp, #36	; 0x24
 800d7dc:	ec49 8b10 	vmov	d0, r8, r9
 800d7e0:	9300      	str	r3, [sp, #0]
 800d7e2:	6022      	str	r2, [r4, #0]
 800d7e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	f7ff fecf 	bl	800d58c <__cvt>
 800d7ee:	9b06      	ldr	r3, [sp, #24]
 800d7f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7f2:	2b47      	cmp	r3, #71	; 0x47
 800d7f4:	4680      	mov	r8, r0
 800d7f6:	d108      	bne.n	800d80a <_printf_float+0x13e>
 800d7f8:	1cc8      	adds	r0, r1, #3
 800d7fa:	db02      	blt.n	800d802 <_printf_float+0x136>
 800d7fc:	6863      	ldr	r3, [r4, #4]
 800d7fe:	4299      	cmp	r1, r3
 800d800:	dd41      	ble.n	800d886 <_printf_float+0x1ba>
 800d802:	f1ab 0302 	sub.w	r3, fp, #2
 800d806:	fa5f fb83 	uxtb.w	fp, r3
 800d80a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d80e:	d820      	bhi.n	800d852 <_printf_float+0x186>
 800d810:	3901      	subs	r1, #1
 800d812:	465a      	mov	r2, fp
 800d814:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d818:	9109      	str	r1, [sp, #36]	; 0x24
 800d81a:	f7ff ff19 	bl	800d650 <__exponent>
 800d81e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d820:	1813      	adds	r3, r2, r0
 800d822:	2a01      	cmp	r2, #1
 800d824:	4681      	mov	r9, r0
 800d826:	6123      	str	r3, [r4, #16]
 800d828:	dc02      	bgt.n	800d830 <_printf_float+0x164>
 800d82a:	6822      	ldr	r2, [r4, #0]
 800d82c:	07d2      	lsls	r2, r2, #31
 800d82e:	d501      	bpl.n	800d834 <_printf_float+0x168>
 800d830:	3301      	adds	r3, #1
 800d832:	6123      	str	r3, [r4, #16]
 800d834:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d09c      	beq.n	800d776 <_printf_float+0xaa>
 800d83c:	232d      	movs	r3, #45	; 0x2d
 800d83e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d842:	e798      	b.n	800d776 <_printf_float+0xaa>
 800d844:	9a06      	ldr	r2, [sp, #24]
 800d846:	2a47      	cmp	r2, #71	; 0x47
 800d848:	d1be      	bne.n	800d7c8 <_printf_float+0xfc>
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1bc      	bne.n	800d7c8 <_printf_float+0xfc>
 800d84e:	2301      	movs	r3, #1
 800d850:	e7b9      	b.n	800d7c6 <_printf_float+0xfa>
 800d852:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d856:	d118      	bne.n	800d88a <_printf_float+0x1be>
 800d858:	2900      	cmp	r1, #0
 800d85a:	6863      	ldr	r3, [r4, #4]
 800d85c:	dd0b      	ble.n	800d876 <_printf_float+0x1aa>
 800d85e:	6121      	str	r1, [r4, #16]
 800d860:	b913      	cbnz	r3, 800d868 <_printf_float+0x19c>
 800d862:	6822      	ldr	r2, [r4, #0]
 800d864:	07d0      	lsls	r0, r2, #31
 800d866:	d502      	bpl.n	800d86e <_printf_float+0x1a2>
 800d868:	3301      	adds	r3, #1
 800d86a:	440b      	add	r3, r1
 800d86c:	6123      	str	r3, [r4, #16]
 800d86e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d870:	f04f 0900 	mov.w	r9, #0
 800d874:	e7de      	b.n	800d834 <_printf_float+0x168>
 800d876:	b913      	cbnz	r3, 800d87e <_printf_float+0x1b2>
 800d878:	6822      	ldr	r2, [r4, #0]
 800d87a:	07d2      	lsls	r2, r2, #31
 800d87c:	d501      	bpl.n	800d882 <_printf_float+0x1b6>
 800d87e:	3302      	adds	r3, #2
 800d880:	e7f4      	b.n	800d86c <_printf_float+0x1a0>
 800d882:	2301      	movs	r3, #1
 800d884:	e7f2      	b.n	800d86c <_printf_float+0x1a0>
 800d886:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d88c:	4299      	cmp	r1, r3
 800d88e:	db05      	blt.n	800d89c <_printf_float+0x1d0>
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	6121      	str	r1, [r4, #16]
 800d894:	07d8      	lsls	r0, r3, #31
 800d896:	d5ea      	bpl.n	800d86e <_printf_float+0x1a2>
 800d898:	1c4b      	adds	r3, r1, #1
 800d89a:	e7e7      	b.n	800d86c <_printf_float+0x1a0>
 800d89c:	2900      	cmp	r1, #0
 800d89e:	bfd4      	ite	le
 800d8a0:	f1c1 0202 	rsble	r2, r1, #2
 800d8a4:	2201      	movgt	r2, #1
 800d8a6:	4413      	add	r3, r2
 800d8a8:	e7e0      	b.n	800d86c <_printf_float+0x1a0>
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	055a      	lsls	r2, r3, #21
 800d8ae:	d407      	bmi.n	800d8c0 <_printf_float+0x1f4>
 800d8b0:	6923      	ldr	r3, [r4, #16]
 800d8b2:	4642      	mov	r2, r8
 800d8b4:	4631      	mov	r1, r6
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	47b8      	blx	r7
 800d8ba:	3001      	adds	r0, #1
 800d8bc:	d12c      	bne.n	800d918 <_printf_float+0x24c>
 800d8be:	e764      	b.n	800d78a <_printf_float+0xbe>
 800d8c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d8c4:	f240 80e0 	bls.w	800da88 <_printf_float+0x3bc>
 800d8c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	f7f3 f90a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d034      	beq.n	800d942 <_printf_float+0x276>
 800d8d8:	4a37      	ldr	r2, [pc, #220]	; (800d9b8 <_printf_float+0x2ec>)
 800d8da:	2301      	movs	r3, #1
 800d8dc:	4631      	mov	r1, r6
 800d8de:	4628      	mov	r0, r5
 800d8e0:	47b8      	blx	r7
 800d8e2:	3001      	adds	r0, #1
 800d8e4:	f43f af51 	beq.w	800d78a <_printf_float+0xbe>
 800d8e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	db02      	blt.n	800d8f6 <_printf_float+0x22a>
 800d8f0:	6823      	ldr	r3, [r4, #0]
 800d8f2:	07d8      	lsls	r0, r3, #31
 800d8f4:	d510      	bpl.n	800d918 <_printf_float+0x24c>
 800d8f6:	ee18 3a10 	vmov	r3, s16
 800d8fa:	4652      	mov	r2, sl
 800d8fc:	4631      	mov	r1, r6
 800d8fe:	4628      	mov	r0, r5
 800d900:	47b8      	blx	r7
 800d902:	3001      	adds	r0, #1
 800d904:	f43f af41 	beq.w	800d78a <_printf_float+0xbe>
 800d908:	f04f 0800 	mov.w	r8, #0
 800d90c:	f104 091a 	add.w	r9, r4, #26
 800d910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d912:	3b01      	subs	r3, #1
 800d914:	4543      	cmp	r3, r8
 800d916:	dc09      	bgt.n	800d92c <_printf_float+0x260>
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	079b      	lsls	r3, r3, #30
 800d91c:	f100 8107 	bmi.w	800db2e <_printf_float+0x462>
 800d920:	68e0      	ldr	r0, [r4, #12]
 800d922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d924:	4298      	cmp	r0, r3
 800d926:	bfb8      	it	lt
 800d928:	4618      	movlt	r0, r3
 800d92a:	e730      	b.n	800d78e <_printf_float+0xc2>
 800d92c:	2301      	movs	r3, #1
 800d92e:	464a      	mov	r2, r9
 800d930:	4631      	mov	r1, r6
 800d932:	4628      	mov	r0, r5
 800d934:	47b8      	blx	r7
 800d936:	3001      	adds	r0, #1
 800d938:	f43f af27 	beq.w	800d78a <_printf_float+0xbe>
 800d93c:	f108 0801 	add.w	r8, r8, #1
 800d940:	e7e6      	b.n	800d910 <_printf_float+0x244>
 800d942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d944:	2b00      	cmp	r3, #0
 800d946:	dc39      	bgt.n	800d9bc <_printf_float+0x2f0>
 800d948:	4a1b      	ldr	r2, [pc, #108]	; (800d9b8 <_printf_float+0x2ec>)
 800d94a:	2301      	movs	r3, #1
 800d94c:	4631      	mov	r1, r6
 800d94e:	4628      	mov	r0, r5
 800d950:	47b8      	blx	r7
 800d952:	3001      	adds	r0, #1
 800d954:	f43f af19 	beq.w	800d78a <_printf_float+0xbe>
 800d958:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d95c:	4313      	orrs	r3, r2
 800d95e:	d102      	bne.n	800d966 <_printf_float+0x29a>
 800d960:	6823      	ldr	r3, [r4, #0]
 800d962:	07d9      	lsls	r1, r3, #31
 800d964:	d5d8      	bpl.n	800d918 <_printf_float+0x24c>
 800d966:	ee18 3a10 	vmov	r3, s16
 800d96a:	4652      	mov	r2, sl
 800d96c:	4631      	mov	r1, r6
 800d96e:	4628      	mov	r0, r5
 800d970:	47b8      	blx	r7
 800d972:	3001      	adds	r0, #1
 800d974:	f43f af09 	beq.w	800d78a <_printf_float+0xbe>
 800d978:	f04f 0900 	mov.w	r9, #0
 800d97c:	f104 0a1a 	add.w	sl, r4, #26
 800d980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d982:	425b      	negs	r3, r3
 800d984:	454b      	cmp	r3, r9
 800d986:	dc01      	bgt.n	800d98c <_printf_float+0x2c0>
 800d988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d98a:	e792      	b.n	800d8b2 <_printf_float+0x1e6>
 800d98c:	2301      	movs	r3, #1
 800d98e:	4652      	mov	r2, sl
 800d990:	4631      	mov	r1, r6
 800d992:	4628      	mov	r0, r5
 800d994:	47b8      	blx	r7
 800d996:	3001      	adds	r0, #1
 800d998:	f43f aef7 	beq.w	800d78a <_printf_float+0xbe>
 800d99c:	f109 0901 	add.w	r9, r9, #1
 800d9a0:	e7ee      	b.n	800d980 <_printf_float+0x2b4>
 800d9a2:	bf00      	nop
 800d9a4:	7fefffff 	.word	0x7fefffff
 800d9a8:	08011090 	.word	0x08011090
 800d9ac:	08011094 	.word	0x08011094
 800d9b0:	08011098 	.word	0x08011098
 800d9b4:	0801109c 	.word	0x0801109c
 800d9b8:	080110a0 	.word	0x080110a0
 800d9bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	bfa8      	it	ge
 800d9c4:	461a      	movge	r2, r3
 800d9c6:	2a00      	cmp	r2, #0
 800d9c8:	4691      	mov	r9, r2
 800d9ca:	dc37      	bgt.n	800da3c <_printf_float+0x370>
 800d9cc:	f04f 0b00 	mov.w	fp, #0
 800d9d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9d4:	f104 021a 	add.w	r2, r4, #26
 800d9d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9da:	9305      	str	r3, [sp, #20]
 800d9dc:	eba3 0309 	sub.w	r3, r3, r9
 800d9e0:	455b      	cmp	r3, fp
 800d9e2:	dc33      	bgt.n	800da4c <_printf_float+0x380>
 800d9e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	db3b      	blt.n	800da64 <_printf_float+0x398>
 800d9ec:	6823      	ldr	r3, [r4, #0]
 800d9ee:	07da      	lsls	r2, r3, #31
 800d9f0:	d438      	bmi.n	800da64 <_printf_float+0x398>
 800d9f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d9f6:	eba2 0903 	sub.w	r9, r2, r3
 800d9fa:	9b05      	ldr	r3, [sp, #20]
 800d9fc:	1ad2      	subs	r2, r2, r3
 800d9fe:	4591      	cmp	r9, r2
 800da00:	bfa8      	it	ge
 800da02:	4691      	movge	r9, r2
 800da04:	f1b9 0f00 	cmp.w	r9, #0
 800da08:	dc35      	bgt.n	800da76 <_printf_float+0x3aa>
 800da0a:	f04f 0800 	mov.w	r8, #0
 800da0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da12:	f104 0a1a 	add.w	sl, r4, #26
 800da16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da1a:	1a9b      	subs	r3, r3, r2
 800da1c:	eba3 0309 	sub.w	r3, r3, r9
 800da20:	4543      	cmp	r3, r8
 800da22:	f77f af79 	ble.w	800d918 <_printf_float+0x24c>
 800da26:	2301      	movs	r3, #1
 800da28:	4652      	mov	r2, sl
 800da2a:	4631      	mov	r1, r6
 800da2c:	4628      	mov	r0, r5
 800da2e:	47b8      	blx	r7
 800da30:	3001      	adds	r0, #1
 800da32:	f43f aeaa 	beq.w	800d78a <_printf_float+0xbe>
 800da36:	f108 0801 	add.w	r8, r8, #1
 800da3a:	e7ec      	b.n	800da16 <_printf_float+0x34a>
 800da3c:	4613      	mov	r3, r2
 800da3e:	4631      	mov	r1, r6
 800da40:	4642      	mov	r2, r8
 800da42:	4628      	mov	r0, r5
 800da44:	47b8      	blx	r7
 800da46:	3001      	adds	r0, #1
 800da48:	d1c0      	bne.n	800d9cc <_printf_float+0x300>
 800da4a:	e69e      	b.n	800d78a <_printf_float+0xbe>
 800da4c:	2301      	movs	r3, #1
 800da4e:	4631      	mov	r1, r6
 800da50:	4628      	mov	r0, r5
 800da52:	9205      	str	r2, [sp, #20]
 800da54:	47b8      	blx	r7
 800da56:	3001      	adds	r0, #1
 800da58:	f43f ae97 	beq.w	800d78a <_printf_float+0xbe>
 800da5c:	9a05      	ldr	r2, [sp, #20]
 800da5e:	f10b 0b01 	add.w	fp, fp, #1
 800da62:	e7b9      	b.n	800d9d8 <_printf_float+0x30c>
 800da64:	ee18 3a10 	vmov	r3, s16
 800da68:	4652      	mov	r2, sl
 800da6a:	4631      	mov	r1, r6
 800da6c:	4628      	mov	r0, r5
 800da6e:	47b8      	blx	r7
 800da70:	3001      	adds	r0, #1
 800da72:	d1be      	bne.n	800d9f2 <_printf_float+0x326>
 800da74:	e689      	b.n	800d78a <_printf_float+0xbe>
 800da76:	9a05      	ldr	r2, [sp, #20]
 800da78:	464b      	mov	r3, r9
 800da7a:	4442      	add	r2, r8
 800da7c:	4631      	mov	r1, r6
 800da7e:	4628      	mov	r0, r5
 800da80:	47b8      	blx	r7
 800da82:	3001      	adds	r0, #1
 800da84:	d1c1      	bne.n	800da0a <_printf_float+0x33e>
 800da86:	e680      	b.n	800d78a <_printf_float+0xbe>
 800da88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da8a:	2a01      	cmp	r2, #1
 800da8c:	dc01      	bgt.n	800da92 <_printf_float+0x3c6>
 800da8e:	07db      	lsls	r3, r3, #31
 800da90:	d53a      	bpl.n	800db08 <_printf_float+0x43c>
 800da92:	2301      	movs	r3, #1
 800da94:	4642      	mov	r2, r8
 800da96:	4631      	mov	r1, r6
 800da98:	4628      	mov	r0, r5
 800da9a:	47b8      	blx	r7
 800da9c:	3001      	adds	r0, #1
 800da9e:	f43f ae74 	beq.w	800d78a <_printf_float+0xbe>
 800daa2:	ee18 3a10 	vmov	r3, s16
 800daa6:	4652      	mov	r2, sl
 800daa8:	4631      	mov	r1, r6
 800daaa:	4628      	mov	r0, r5
 800daac:	47b8      	blx	r7
 800daae:	3001      	adds	r0, #1
 800dab0:	f43f ae6b 	beq.w	800d78a <_printf_float+0xbe>
 800dab4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dab8:	2200      	movs	r2, #0
 800daba:	2300      	movs	r3, #0
 800dabc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dac0:	f7f3 f812 	bl	8000ae8 <__aeabi_dcmpeq>
 800dac4:	b9d8      	cbnz	r0, 800dafe <_printf_float+0x432>
 800dac6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800daca:	f108 0201 	add.w	r2, r8, #1
 800dace:	4631      	mov	r1, r6
 800dad0:	4628      	mov	r0, r5
 800dad2:	47b8      	blx	r7
 800dad4:	3001      	adds	r0, #1
 800dad6:	d10e      	bne.n	800daf6 <_printf_float+0x42a>
 800dad8:	e657      	b.n	800d78a <_printf_float+0xbe>
 800dada:	2301      	movs	r3, #1
 800dadc:	4652      	mov	r2, sl
 800dade:	4631      	mov	r1, r6
 800dae0:	4628      	mov	r0, r5
 800dae2:	47b8      	blx	r7
 800dae4:	3001      	adds	r0, #1
 800dae6:	f43f ae50 	beq.w	800d78a <_printf_float+0xbe>
 800daea:	f108 0801 	add.w	r8, r8, #1
 800daee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daf0:	3b01      	subs	r3, #1
 800daf2:	4543      	cmp	r3, r8
 800daf4:	dcf1      	bgt.n	800dada <_printf_float+0x40e>
 800daf6:	464b      	mov	r3, r9
 800daf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dafc:	e6da      	b.n	800d8b4 <_printf_float+0x1e8>
 800dafe:	f04f 0800 	mov.w	r8, #0
 800db02:	f104 0a1a 	add.w	sl, r4, #26
 800db06:	e7f2      	b.n	800daee <_printf_float+0x422>
 800db08:	2301      	movs	r3, #1
 800db0a:	4642      	mov	r2, r8
 800db0c:	e7df      	b.n	800dace <_printf_float+0x402>
 800db0e:	2301      	movs	r3, #1
 800db10:	464a      	mov	r2, r9
 800db12:	4631      	mov	r1, r6
 800db14:	4628      	mov	r0, r5
 800db16:	47b8      	blx	r7
 800db18:	3001      	adds	r0, #1
 800db1a:	f43f ae36 	beq.w	800d78a <_printf_float+0xbe>
 800db1e:	f108 0801 	add.w	r8, r8, #1
 800db22:	68e3      	ldr	r3, [r4, #12]
 800db24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db26:	1a5b      	subs	r3, r3, r1
 800db28:	4543      	cmp	r3, r8
 800db2a:	dcf0      	bgt.n	800db0e <_printf_float+0x442>
 800db2c:	e6f8      	b.n	800d920 <_printf_float+0x254>
 800db2e:	f04f 0800 	mov.w	r8, #0
 800db32:	f104 0919 	add.w	r9, r4, #25
 800db36:	e7f4      	b.n	800db22 <_printf_float+0x456>

0800db38 <_printf_common>:
 800db38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db3c:	4616      	mov	r6, r2
 800db3e:	4699      	mov	r9, r3
 800db40:	688a      	ldr	r2, [r1, #8]
 800db42:	690b      	ldr	r3, [r1, #16]
 800db44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db48:	4293      	cmp	r3, r2
 800db4a:	bfb8      	it	lt
 800db4c:	4613      	movlt	r3, r2
 800db4e:	6033      	str	r3, [r6, #0]
 800db50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db54:	4607      	mov	r7, r0
 800db56:	460c      	mov	r4, r1
 800db58:	b10a      	cbz	r2, 800db5e <_printf_common+0x26>
 800db5a:	3301      	adds	r3, #1
 800db5c:	6033      	str	r3, [r6, #0]
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	0699      	lsls	r1, r3, #26
 800db62:	bf42      	ittt	mi
 800db64:	6833      	ldrmi	r3, [r6, #0]
 800db66:	3302      	addmi	r3, #2
 800db68:	6033      	strmi	r3, [r6, #0]
 800db6a:	6825      	ldr	r5, [r4, #0]
 800db6c:	f015 0506 	ands.w	r5, r5, #6
 800db70:	d106      	bne.n	800db80 <_printf_common+0x48>
 800db72:	f104 0a19 	add.w	sl, r4, #25
 800db76:	68e3      	ldr	r3, [r4, #12]
 800db78:	6832      	ldr	r2, [r6, #0]
 800db7a:	1a9b      	subs	r3, r3, r2
 800db7c:	42ab      	cmp	r3, r5
 800db7e:	dc26      	bgt.n	800dbce <_printf_common+0x96>
 800db80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db84:	1e13      	subs	r3, r2, #0
 800db86:	6822      	ldr	r2, [r4, #0]
 800db88:	bf18      	it	ne
 800db8a:	2301      	movne	r3, #1
 800db8c:	0692      	lsls	r2, r2, #26
 800db8e:	d42b      	bmi.n	800dbe8 <_printf_common+0xb0>
 800db90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db94:	4649      	mov	r1, r9
 800db96:	4638      	mov	r0, r7
 800db98:	47c0      	blx	r8
 800db9a:	3001      	adds	r0, #1
 800db9c:	d01e      	beq.n	800dbdc <_printf_common+0xa4>
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	6922      	ldr	r2, [r4, #16]
 800dba2:	f003 0306 	and.w	r3, r3, #6
 800dba6:	2b04      	cmp	r3, #4
 800dba8:	bf02      	ittt	eq
 800dbaa:	68e5      	ldreq	r5, [r4, #12]
 800dbac:	6833      	ldreq	r3, [r6, #0]
 800dbae:	1aed      	subeq	r5, r5, r3
 800dbb0:	68a3      	ldr	r3, [r4, #8]
 800dbb2:	bf0c      	ite	eq
 800dbb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbb8:	2500      	movne	r5, #0
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	bfc4      	itt	gt
 800dbbe:	1a9b      	subgt	r3, r3, r2
 800dbc0:	18ed      	addgt	r5, r5, r3
 800dbc2:	2600      	movs	r6, #0
 800dbc4:	341a      	adds	r4, #26
 800dbc6:	42b5      	cmp	r5, r6
 800dbc8:	d11a      	bne.n	800dc00 <_printf_common+0xc8>
 800dbca:	2000      	movs	r0, #0
 800dbcc:	e008      	b.n	800dbe0 <_printf_common+0xa8>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	4652      	mov	r2, sl
 800dbd2:	4649      	mov	r1, r9
 800dbd4:	4638      	mov	r0, r7
 800dbd6:	47c0      	blx	r8
 800dbd8:	3001      	adds	r0, #1
 800dbda:	d103      	bne.n	800dbe4 <_printf_common+0xac>
 800dbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe4:	3501      	adds	r5, #1
 800dbe6:	e7c6      	b.n	800db76 <_printf_common+0x3e>
 800dbe8:	18e1      	adds	r1, r4, r3
 800dbea:	1c5a      	adds	r2, r3, #1
 800dbec:	2030      	movs	r0, #48	; 0x30
 800dbee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dbf2:	4422      	add	r2, r4
 800dbf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dbf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dbfc:	3302      	adds	r3, #2
 800dbfe:	e7c7      	b.n	800db90 <_printf_common+0x58>
 800dc00:	2301      	movs	r3, #1
 800dc02:	4622      	mov	r2, r4
 800dc04:	4649      	mov	r1, r9
 800dc06:	4638      	mov	r0, r7
 800dc08:	47c0      	blx	r8
 800dc0a:	3001      	adds	r0, #1
 800dc0c:	d0e6      	beq.n	800dbdc <_printf_common+0xa4>
 800dc0e:	3601      	adds	r6, #1
 800dc10:	e7d9      	b.n	800dbc6 <_printf_common+0x8e>
	...

0800dc14 <_printf_i>:
 800dc14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc18:	7e0f      	ldrb	r7, [r1, #24]
 800dc1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc1c:	2f78      	cmp	r7, #120	; 0x78
 800dc1e:	4691      	mov	r9, r2
 800dc20:	4680      	mov	r8, r0
 800dc22:	460c      	mov	r4, r1
 800dc24:	469a      	mov	sl, r3
 800dc26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dc2a:	d807      	bhi.n	800dc3c <_printf_i+0x28>
 800dc2c:	2f62      	cmp	r7, #98	; 0x62
 800dc2e:	d80a      	bhi.n	800dc46 <_printf_i+0x32>
 800dc30:	2f00      	cmp	r7, #0
 800dc32:	f000 80d4 	beq.w	800ddde <_printf_i+0x1ca>
 800dc36:	2f58      	cmp	r7, #88	; 0x58
 800dc38:	f000 80c0 	beq.w	800ddbc <_printf_i+0x1a8>
 800dc3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc44:	e03a      	b.n	800dcbc <_printf_i+0xa8>
 800dc46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc4a:	2b15      	cmp	r3, #21
 800dc4c:	d8f6      	bhi.n	800dc3c <_printf_i+0x28>
 800dc4e:	a101      	add	r1, pc, #4	; (adr r1, 800dc54 <_printf_i+0x40>)
 800dc50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc54:	0800dcad 	.word	0x0800dcad
 800dc58:	0800dcc1 	.word	0x0800dcc1
 800dc5c:	0800dc3d 	.word	0x0800dc3d
 800dc60:	0800dc3d 	.word	0x0800dc3d
 800dc64:	0800dc3d 	.word	0x0800dc3d
 800dc68:	0800dc3d 	.word	0x0800dc3d
 800dc6c:	0800dcc1 	.word	0x0800dcc1
 800dc70:	0800dc3d 	.word	0x0800dc3d
 800dc74:	0800dc3d 	.word	0x0800dc3d
 800dc78:	0800dc3d 	.word	0x0800dc3d
 800dc7c:	0800dc3d 	.word	0x0800dc3d
 800dc80:	0800ddc5 	.word	0x0800ddc5
 800dc84:	0800dced 	.word	0x0800dced
 800dc88:	0800dd7f 	.word	0x0800dd7f
 800dc8c:	0800dc3d 	.word	0x0800dc3d
 800dc90:	0800dc3d 	.word	0x0800dc3d
 800dc94:	0800dde7 	.word	0x0800dde7
 800dc98:	0800dc3d 	.word	0x0800dc3d
 800dc9c:	0800dced 	.word	0x0800dced
 800dca0:	0800dc3d 	.word	0x0800dc3d
 800dca4:	0800dc3d 	.word	0x0800dc3d
 800dca8:	0800dd87 	.word	0x0800dd87
 800dcac:	682b      	ldr	r3, [r5, #0]
 800dcae:	1d1a      	adds	r2, r3, #4
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	602a      	str	r2, [r5, #0]
 800dcb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	e09f      	b.n	800de00 <_printf_i+0x1ec>
 800dcc0:	6820      	ldr	r0, [r4, #0]
 800dcc2:	682b      	ldr	r3, [r5, #0]
 800dcc4:	0607      	lsls	r7, r0, #24
 800dcc6:	f103 0104 	add.w	r1, r3, #4
 800dcca:	6029      	str	r1, [r5, #0]
 800dccc:	d501      	bpl.n	800dcd2 <_printf_i+0xbe>
 800dcce:	681e      	ldr	r6, [r3, #0]
 800dcd0:	e003      	b.n	800dcda <_printf_i+0xc6>
 800dcd2:	0646      	lsls	r6, r0, #25
 800dcd4:	d5fb      	bpl.n	800dcce <_printf_i+0xba>
 800dcd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dcda:	2e00      	cmp	r6, #0
 800dcdc:	da03      	bge.n	800dce6 <_printf_i+0xd2>
 800dcde:	232d      	movs	r3, #45	; 0x2d
 800dce0:	4276      	negs	r6, r6
 800dce2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dce6:	485a      	ldr	r0, [pc, #360]	; (800de50 <_printf_i+0x23c>)
 800dce8:	230a      	movs	r3, #10
 800dcea:	e012      	b.n	800dd12 <_printf_i+0xfe>
 800dcec:	682b      	ldr	r3, [r5, #0]
 800dcee:	6820      	ldr	r0, [r4, #0]
 800dcf0:	1d19      	adds	r1, r3, #4
 800dcf2:	6029      	str	r1, [r5, #0]
 800dcf4:	0605      	lsls	r5, r0, #24
 800dcf6:	d501      	bpl.n	800dcfc <_printf_i+0xe8>
 800dcf8:	681e      	ldr	r6, [r3, #0]
 800dcfa:	e002      	b.n	800dd02 <_printf_i+0xee>
 800dcfc:	0641      	lsls	r1, r0, #25
 800dcfe:	d5fb      	bpl.n	800dcf8 <_printf_i+0xe4>
 800dd00:	881e      	ldrh	r6, [r3, #0]
 800dd02:	4853      	ldr	r0, [pc, #332]	; (800de50 <_printf_i+0x23c>)
 800dd04:	2f6f      	cmp	r7, #111	; 0x6f
 800dd06:	bf0c      	ite	eq
 800dd08:	2308      	moveq	r3, #8
 800dd0a:	230a      	movne	r3, #10
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd12:	6865      	ldr	r5, [r4, #4]
 800dd14:	60a5      	str	r5, [r4, #8]
 800dd16:	2d00      	cmp	r5, #0
 800dd18:	bfa2      	ittt	ge
 800dd1a:	6821      	ldrge	r1, [r4, #0]
 800dd1c:	f021 0104 	bicge.w	r1, r1, #4
 800dd20:	6021      	strge	r1, [r4, #0]
 800dd22:	b90e      	cbnz	r6, 800dd28 <_printf_i+0x114>
 800dd24:	2d00      	cmp	r5, #0
 800dd26:	d04b      	beq.n	800ddc0 <_printf_i+0x1ac>
 800dd28:	4615      	mov	r5, r2
 800dd2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800dd2e:	fb03 6711 	mls	r7, r3, r1, r6
 800dd32:	5dc7      	ldrb	r7, [r0, r7]
 800dd34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dd38:	4637      	mov	r7, r6
 800dd3a:	42bb      	cmp	r3, r7
 800dd3c:	460e      	mov	r6, r1
 800dd3e:	d9f4      	bls.n	800dd2a <_printf_i+0x116>
 800dd40:	2b08      	cmp	r3, #8
 800dd42:	d10b      	bne.n	800dd5c <_printf_i+0x148>
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	07de      	lsls	r6, r3, #31
 800dd48:	d508      	bpl.n	800dd5c <_printf_i+0x148>
 800dd4a:	6923      	ldr	r3, [r4, #16]
 800dd4c:	6861      	ldr	r1, [r4, #4]
 800dd4e:	4299      	cmp	r1, r3
 800dd50:	bfde      	ittt	le
 800dd52:	2330      	movle	r3, #48	; 0x30
 800dd54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd5c:	1b52      	subs	r2, r2, r5
 800dd5e:	6122      	str	r2, [r4, #16]
 800dd60:	f8cd a000 	str.w	sl, [sp]
 800dd64:	464b      	mov	r3, r9
 800dd66:	aa03      	add	r2, sp, #12
 800dd68:	4621      	mov	r1, r4
 800dd6a:	4640      	mov	r0, r8
 800dd6c:	f7ff fee4 	bl	800db38 <_printf_common>
 800dd70:	3001      	adds	r0, #1
 800dd72:	d14a      	bne.n	800de0a <_printf_i+0x1f6>
 800dd74:	f04f 30ff 	mov.w	r0, #4294967295
 800dd78:	b004      	add	sp, #16
 800dd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd7e:	6823      	ldr	r3, [r4, #0]
 800dd80:	f043 0320 	orr.w	r3, r3, #32
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	4833      	ldr	r0, [pc, #204]	; (800de54 <_printf_i+0x240>)
 800dd88:	2778      	movs	r7, #120	; 0x78
 800dd8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dd8e:	6823      	ldr	r3, [r4, #0]
 800dd90:	6829      	ldr	r1, [r5, #0]
 800dd92:	061f      	lsls	r7, r3, #24
 800dd94:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd98:	d402      	bmi.n	800dda0 <_printf_i+0x18c>
 800dd9a:	065f      	lsls	r7, r3, #25
 800dd9c:	bf48      	it	mi
 800dd9e:	b2b6      	uxthmi	r6, r6
 800dda0:	07df      	lsls	r7, r3, #31
 800dda2:	bf48      	it	mi
 800dda4:	f043 0320 	orrmi.w	r3, r3, #32
 800dda8:	6029      	str	r1, [r5, #0]
 800ddaa:	bf48      	it	mi
 800ddac:	6023      	strmi	r3, [r4, #0]
 800ddae:	b91e      	cbnz	r6, 800ddb8 <_printf_i+0x1a4>
 800ddb0:	6823      	ldr	r3, [r4, #0]
 800ddb2:	f023 0320 	bic.w	r3, r3, #32
 800ddb6:	6023      	str	r3, [r4, #0]
 800ddb8:	2310      	movs	r3, #16
 800ddba:	e7a7      	b.n	800dd0c <_printf_i+0xf8>
 800ddbc:	4824      	ldr	r0, [pc, #144]	; (800de50 <_printf_i+0x23c>)
 800ddbe:	e7e4      	b.n	800dd8a <_printf_i+0x176>
 800ddc0:	4615      	mov	r5, r2
 800ddc2:	e7bd      	b.n	800dd40 <_printf_i+0x12c>
 800ddc4:	682b      	ldr	r3, [r5, #0]
 800ddc6:	6826      	ldr	r6, [r4, #0]
 800ddc8:	6961      	ldr	r1, [r4, #20]
 800ddca:	1d18      	adds	r0, r3, #4
 800ddcc:	6028      	str	r0, [r5, #0]
 800ddce:	0635      	lsls	r5, r6, #24
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	d501      	bpl.n	800ddd8 <_printf_i+0x1c4>
 800ddd4:	6019      	str	r1, [r3, #0]
 800ddd6:	e002      	b.n	800ddde <_printf_i+0x1ca>
 800ddd8:	0670      	lsls	r0, r6, #25
 800ddda:	d5fb      	bpl.n	800ddd4 <_printf_i+0x1c0>
 800dddc:	8019      	strh	r1, [r3, #0]
 800ddde:	2300      	movs	r3, #0
 800dde0:	6123      	str	r3, [r4, #16]
 800dde2:	4615      	mov	r5, r2
 800dde4:	e7bc      	b.n	800dd60 <_printf_i+0x14c>
 800dde6:	682b      	ldr	r3, [r5, #0]
 800dde8:	1d1a      	adds	r2, r3, #4
 800ddea:	602a      	str	r2, [r5, #0]
 800ddec:	681d      	ldr	r5, [r3, #0]
 800ddee:	6862      	ldr	r2, [r4, #4]
 800ddf0:	2100      	movs	r1, #0
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	f7f2 f9fc 	bl	80001f0 <memchr>
 800ddf8:	b108      	cbz	r0, 800ddfe <_printf_i+0x1ea>
 800ddfa:	1b40      	subs	r0, r0, r5
 800ddfc:	6060      	str	r0, [r4, #4]
 800ddfe:	6863      	ldr	r3, [r4, #4]
 800de00:	6123      	str	r3, [r4, #16]
 800de02:	2300      	movs	r3, #0
 800de04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de08:	e7aa      	b.n	800dd60 <_printf_i+0x14c>
 800de0a:	6923      	ldr	r3, [r4, #16]
 800de0c:	462a      	mov	r2, r5
 800de0e:	4649      	mov	r1, r9
 800de10:	4640      	mov	r0, r8
 800de12:	47d0      	blx	sl
 800de14:	3001      	adds	r0, #1
 800de16:	d0ad      	beq.n	800dd74 <_printf_i+0x160>
 800de18:	6823      	ldr	r3, [r4, #0]
 800de1a:	079b      	lsls	r3, r3, #30
 800de1c:	d413      	bmi.n	800de46 <_printf_i+0x232>
 800de1e:	68e0      	ldr	r0, [r4, #12]
 800de20:	9b03      	ldr	r3, [sp, #12]
 800de22:	4298      	cmp	r0, r3
 800de24:	bfb8      	it	lt
 800de26:	4618      	movlt	r0, r3
 800de28:	e7a6      	b.n	800dd78 <_printf_i+0x164>
 800de2a:	2301      	movs	r3, #1
 800de2c:	4632      	mov	r2, r6
 800de2e:	4649      	mov	r1, r9
 800de30:	4640      	mov	r0, r8
 800de32:	47d0      	blx	sl
 800de34:	3001      	adds	r0, #1
 800de36:	d09d      	beq.n	800dd74 <_printf_i+0x160>
 800de38:	3501      	adds	r5, #1
 800de3a:	68e3      	ldr	r3, [r4, #12]
 800de3c:	9903      	ldr	r1, [sp, #12]
 800de3e:	1a5b      	subs	r3, r3, r1
 800de40:	42ab      	cmp	r3, r5
 800de42:	dcf2      	bgt.n	800de2a <_printf_i+0x216>
 800de44:	e7eb      	b.n	800de1e <_printf_i+0x20a>
 800de46:	2500      	movs	r5, #0
 800de48:	f104 0619 	add.w	r6, r4, #25
 800de4c:	e7f5      	b.n	800de3a <_printf_i+0x226>
 800de4e:	bf00      	nop
 800de50:	080110a2 	.word	0x080110a2
 800de54:	080110b3 	.word	0x080110b3

0800de58 <_scanf_float>:
 800de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	b087      	sub	sp, #28
 800de5e:	4617      	mov	r7, r2
 800de60:	9303      	str	r3, [sp, #12]
 800de62:	688b      	ldr	r3, [r1, #8]
 800de64:	1e5a      	subs	r2, r3, #1
 800de66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800de6a:	bf83      	ittte	hi
 800de6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800de70:	195b      	addhi	r3, r3, r5
 800de72:	9302      	strhi	r3, [sp, #8]
 800de74:	2300      	movls	r3, #0
 800de76:	bf86      	itte	hi
 800de78:	f240 135d 	movwhi	r3, #349	; 0x15d
 800de7c:	608b      	strhi	r3, [r1, #8]
 800de7e:	9302      	strls	r3, [sp, #8]
 800de80:	680b      	ldr	r3, [r1, #0]
 800de82:	468b      	mov	fp, r1
 800de84:	2500      	movs	r5, #0
 800de86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800de8a:	f84b 3b1c 	str.w	r3, [fp], #28
 800de8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800de92:	4680      	mov	r8, r0
 800de94:	460c      	mov	r4, r1
 800de96:	465e      	mov	r6, fp
 800de98:	46aa      	mov	sl, r5
 800de9a:	46a9      	mov	r9, r5
 800de9c:	9501      	str	r5, [sp, #4]
 800de9e:	68a2      	ldr	r2, [r4, #8]
 800dea0:	b152      	cbz	r2, 800deb8 <_scanf_float+0x60>
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	2b4e      	cmp	r3, #78	; 0x4e
 800dea8:	d864      	bhi.n	800df74 <_scanf_float+0x11c>
 800deaa:	2b40      	cmp	r3, #64	; 0x40
 800deac:	d83c      	bhi.n	800df28 <_scanf_float+0xd0>
 800deae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800deb2:	b2c8      	uxtb	r0, r1
 800deb4:	280e      	cmp	r0, #14
 800deb6:	d93a      	bls.n	800df2e <_scanf_float+0xd6>
 800deb8:	f1b9 0f00 	cmp.w	r9, #0
 800debc:	d003      	beq.n	800dec6 <_scanf_float+0x6e>
 800debe:	6823      	ldr	r3, [r4, #0]
 800dec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dec4:	6023      	str	r3, [r4, #0]
 800dec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800deca:	f1ba 0f01 	cmp.w	sl, #1
 800dece:	f200 8113 	bhi.w	800e0f8 <_scanf_float+0x2a0>
 800ded2:	455e      	cmp	r6, fp
 800ded4:	f200 8105 	bhi.w	800e0e2 <_scanf_float+0x28a>
 800ded8:	2501      	movs	r5, #1
 800deda:	4628      	mov	r0, r5
 800dedc:	b007      	add	sp, #28
 800dede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dee6:	2a0d      	cmp	r2, #13
 800dee8:	d8e6      	bhi.n	800deb8 <_scanf_float+0x60>
 800deea:	a101      	add	r1, pc, #4	; (adr r1, 800def0 <_scanf_float+0x98>)
 800deec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800def0:	0800e02f 	.word	0x0800e02f
 800def4:	0800deb9 	.word	0x0800deb9
 800def8:	0800deb9 	.word	0x0800deb9
 800defc:	0800deb9 	.word	0x0800deb9
 800df00:	0800e08f 	.word	0x0800e08f
 800df04:	0800e067 	.word	0x0800e067
 800df08:	0800deb9 	.word	0x0800deb9
 800df0c:	0800deb9 	.word	0x0800deb9
 800df10:	0800e03d 	.word	0x0800e03d
 800df14:	0800deb9 	.word	0x0800deb9
 800df18:	0800deb9 	.word	0x0800deb9
 800df1c:	0800deb9 	.word	0x0800deb9
 800df20:	0800deb9 	.word	0x0800deb9
 800df24:	0800dff5 	.word	0x0800dff5
 800df28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800df2c:	e7db      	b.n	800dee6 <_scanf_float+0x8e>
 800df2e:	290e      	cmp	r1, #14
 800df30:	d8c2      	bhi.n	800deb8 <_scanf_float+0x60>
 800df32:	a001      	add	r0, pc, #4	; (adr r0, 800df38 <_scanf_float+0xe0>)
 800df34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800df38:	0800dfe7 	.word	0x0800dfe7
 800df3c:	0800deb9 	.word	0x0800deb9
 800df40:	0800dfe7 	.word	0x0800dfe7
 800df44:	0800e07b 	.word	0x0800e07b
 800df48:	0800deb9 	.word	0x0800deb9
 800df4c:	0800df95 	.word	0x0800df95
 800df50:	0800dfd1 	.word	0x0800dfd1
 800df54:	0800dfd1 	.word	0x0800dfd1
 800df58:	0800dfd1 	.word	0x0800dfd1
 800df5c:	0800dfd1 	.word	0x0800dfd1
 800df60:	0800dfd1 	.word	0x0800dfd1
 800df64:	0800dfd1 	.word	0x0800dfd1
 800df68:	0800dfd1 	.word	0x0800dfd1
 800df6c:	0800dfd1 	.word	0x0800dfd1
 800df70:	0800dfd1 	.word	0x0800dfd1
 800df74:	2b6e      	cmp	r3, #110	; 0x6e
 800df76:	d809      	bhi.n	800df8c <_scanf_float+0x134>
 800df78:	2b60      	cmp	r3, #96	; 0x60
 800df7a:	d8b2      	bhi.n	800dee2 <_scanf_float+0x8a>
 800df7c:	2b54      	cmp	r3, #84	; 0x54
 800df7e:	d077      	beq.n	800e070 <_scanf_float+0x218>
 800df80:	2b59      	cmp	r3, #89	; 0x59
 800df82:	d199      	bne.n	800deb8 <_scanf_float+0x60>
 800df84:	2d07      	cmp	r5, #7
 800df86:	d197      	bne.n	800deb8 <_scanf_float+0x60>
 800df88:	2508      	movs	r5, #8
 800df8a:	e029      	b.n	800dfe0 <_scanf_float+0x188>
 800df8c:	2b74      	cmp	r3, #116	; 0x74
 800df8e:	d06f      	beq.n	800e070 <_scanf_float+0x218>
 800df90:	2b79      	cmp	r3, #121	; 0x79
 800df92:	e7f6      	b.n	800df82 <_scanf_float+0x12a>
 800df94:	6821      	ldr	r1, [r4, #0]
 800df96:	05c8      	lsls	r0, r1, #23
 800df98:	d51a      	bpl.n	800dfd0 <_scanf_float+0x178>
 800df9a:	9b02      	ldr	r3, [sp, #8]
 800df9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800dfa0:	6021      	str	r1, [r4, #0]
 800dfa2:	f109 0901 	add.w	r9, r9, #1
 800dfa6:	b11b      	cbz	r3, 800dfb0 <_scanf_float+0x158>
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	3201      	adds	r2, #1
 800dfac:	9302      	str	r3, [sp, #8]
 800dfae:	60a2      	str	r2, [r4, #8]
 800dfb0:	68a3      	ldr	r3, [r4, #8]
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	60a3      	str	r3, [r4, #8]
 800dfb6:	6923      	ldr	r3, [r4, #16]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	6123      	str	r3, [r4, #16]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	607b      	str	r3, [r7, #4]
 800dfc4:	f340 8084 	ble.w	800e0d0 <_scanf_float+0x278>
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	603b      	str	r3, [r7, #0]
 800dfce:	e766      	b.n	800de9e <_scanf_float+0x46>
 800dfd0:	eb1a 0f05 	cmn.w	sl, r5
 800dfd4:	f47f af70 	bne.w	800deb8 <_scanf_float+0x60>
 800dfd8:	6822      	ldr	r2, [r4, #0]
 800dfda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dfde:	6022      	str	r2, [r4, #0]
 800dfe0:	f806 3b01 	strb.w	r3, [r6], #1
 800dfe4:	e7e4      	b.n	800dfb0 <_scanf_float+0x158>
 800dfe6:	6822      	ldr	r2, [r4, #0]
 800dfe8:	0610      	lsls	r0, r2, #24
 800dfea:	f57f af65 	bpl.w	800deb8 <_scanf_float+0x60>
 800dfee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dff2:	e7f4      	b.n	800dfde <_scanf_float+0x186>
 800dff4:	f1ba 0f00 	cmp.w	sl, #0
 800dff8:	d10e      	bne.n	800e018 <_scanf_float+0x1c0>
 800dffa:	f1b9 0f00 	cmp.w	r9, #0
 800dffe:	d10e      	bne.n	800e01e <_scanf_float+0x1c6>
 800e000:	6822      	ldr	r2, [r4, #0]
 800e002:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e006:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e00a:	d108      	bne.n	800e01e <_scanf_float+0x1c6>
 800e00c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e010:	6022      	str	r2, [r4, #0]
 800e012:	f04f 0a01 	mov.w	sl, #1
 800e016:	e7e3      	b.n	800dfe0 <_scanf_float+0x188>
 800e018:	f1ba 0f02 	cmp.w	sl, #2
 800e01c:	d055      	beq.n	800e0ca <_scanf_float+0x272>
 800e01e:	2d01      	cmp	r5, #1
 800e020:	d002      	beq.n	800e028 <_scanf_float+0x1d0>
 800e022:	2d04      	cmp	r5, #4
 800e024:	f47f af48 	bne.w	800deb8 <_scanf_float+0x60>
 800e028:	3501      	adds	r5, #1
 800e02a:	b2ed      	uxtb	r5, r5
 800e02c:	e7d8      	b.n	800dfe0 <_scanf_float+0x188>
 800e02e:	f1ba 0f01 	cmp.w	sl, #1
 800e032:	f47f af41 	bne.w	800deb8 <_scanf_float+0x60>
 800e036:	f04f 0a02 	mov.w	sl, #2
 800e03a:	e7d1      	b.n	800dfe0 <_scanf_float+0x188>
 800e03c:	b97d      	cbnz	r5, 800e05e <_scanf_float+0x206>
 800e03e:	f1b9 0f00 	cmp.w	r9, #0
 800e042:	f47f af3c 	bne.w	800debe <_scanf_float+0x66>
 800e046:	6822      	ldr	r2, [r4, #0]
 800e048:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e04c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e050:	f47f af39 	bne.w	800dec6 <_scanf_float+0x6e>
 800e054:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e058:	6022      	str	r2, [r4, #0]
 800e05a:	2501      	movs	r5, #1
 800e05c:	e7c0      	b.n	800dfe0 <_scanf_float+0x188>
 800e05e:	2d03      	cmp	r5, #3
 800e060:	d0e2      	beq.n	800e028 <_scanf_float+0x1d0>
 800e062:	2d05      	cmp	r5, #5
 800e064:	e7de      	b.n	800e024 <_scanf_float+0x1cc>
 800e066:	2d02      	cmp	r5, #2
 800e068:	f47f af26 	bne.w	800deb8 <_scanf_float+0x60>
 800e06c:	2503      	movs	r5, #3
 800e06e:	e7b7      	b.n	800dfe0 <_scanf_float+0x188>
 800e070:	2d06      	cmp	r5, #6
 800e072:	f47f af21 	bne.w	800deb8 <_scanf_float+0x60>
 800e076:	2507      	movs	r5, #7
 800e078:	e7b2      	b.n	800dfe0 <_scanf_float+0x188>
 800e07a:	6822      	ldr	r2, [r4, #0]
 800e07c:	0591      	lsls	r1, r2, #22
 800e07e:	f57f af1b 	bpl.w	800deb8 <_scanf_float+0x60>
 800e082:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e086:	6022      	str	r2, [r4, #0]
 800e088:	f8cd 9004 	str.w	r9, [sp, #4]
 800e08c:	e7a8      	b.n	800dfe0 <_scanf_float+0x188>
 800e08e:	6822      	ldr	r2, [r4, #0]
 800e090:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e094:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e098:	d006      	beq.n	800e0a8 <_scanf_float+0x250>
 800e09a:	0550      	lsls	r0, r2, #21
 800e09c:	f57f af0c 	bpl.w	800deb8 <_scanf_float+0x60>
 800e0a0:	f1b9 0f00 	cmp.w	r9, #0
 800e0a4:	f43f af0f 	beq.w	800dec6 <_scanf_float+0x6e>
 800e0a8:	0591      	lsls	r1, r2, #22
 800e0aa:	bf58      	it	pl
 800e0ac:	9901      	ldrpl	r1, [sp, #4]
 800e0ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e0b2:	bf58      	it	pl
 800e0b4:	eba9 0101 	subpl.w	r1, r9, r1
 800e0b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e0bc:	bf58      	it	pl
 800e0be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e0c2:	6022      	str	r2, [r4, #0]
 800e0c4:	f04f 0900 	mov.w	r9, #0
 800e0c8:	e78a      	b.n	800dfe0 <_scanf_float+0x188>
 800e0ca:	f04f 0a03 	mov.w	sl, #3
 800e0ce:	e787      	b.n	800dfe0 <_scanf_float+0x188>
 800e0d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e0d4:	4639      	mov	r1, r7
 800e0d6:	4640      	mov	r0, r8
 800e0d8:	4798      	blx	r3
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	f43f aedf 	beq.w	800de9e <_scanf_float+0x46>
 800e0e0:	e6ea      	b.n	800deb8 <_scanf_float+0x60>
 800e0e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0ea:	463a      	mov	r2, r7
 800e0ec:	4640      	mov	r0, r8
 800e0ee:	4798      	blx	r3
 800e0f0:	6923      	ldr	r3, [r4, #16]
 800e0f2:	3b01      	subs	r3, #1
 800e0f4:	6123      	str	r3, [r4, #16]
 800e0f6:	e6ec      	b.n	800ded2 <_scanf_float+0x7a>
 800e0f8:	1e6b      	subs	r3, r5, #1
 800e0fa:	2b06      	cmp	r3, #6
 800e0fc:	d825      	bhi.n	800e14a <_scanf_float+0x2f2>
 800e0fe:	2d02      	cmp	r5, #2
 800e100:	d836      	bhi.n	800e170 <_scanf_float+0x318>
 800e102:	455e      	cmp	r6, fp
 800e104:	f67f aee8 	bls.w	800ded8 <_scanf_float+0x80>
 800e108:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e10c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e110:	463a      	mov	r2, r7
 800e112:	4640      	mov	r0, r8
 800e114:	4798      	blx	r3
 800e116:	6923      	ldr	r3, [r4, #16]
 800e118:	3b01      	subs	r3, #1
 800e11a:	6123      	str	r3, [r4, #16]
 800e11c:	e7f1      	b.n	800e102 <_scanf_float+0x2aa>
 800e11e:	9802      	ldr	r0, [sp, #8]
 800e120:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e124:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e128:	9002      	str	r0, [sp, #8]
 800e12a:	463a      	mov	r2, r7
 800e12c:	4640      	mov	r0, r8
 800e12e:	4798      	blx	r3
 800e130:	6923      	ldr	r3, [r4, #16]
 800e132:	3b01      	subs	r3, #1
 800e134:	6123      	str	r3, [r4, #16]
 800e136:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e13a:	fa5f fa8a 	uxtb.w	sl, sl
 800e13e:	f1ba 0f02 	cmp.w	sl, #2
 800e142:	d1ec      	bne.n	800e11e <_scanf_float+0x2c6>
 800e144:	3d03      	subs	r5, #3
 800e146:	b2ed      	uxtb	r5, r5
 800e148:	1b76      	subs	r6, r6, r5
 800e14a:	6823      	ldr	r3, [r4, #0]
 800e14c:	05da      	lsls	r2, r3, #23
 800e14e:	d52f      	bpl.n	800e1b0 <_scanf_float+0x358>
 800e150:	055b      	lsls	r3, r3, #21
 800e152:	d510      	bpl.n	800e176 <_scanf_float+0x31e>
 800e154:	455e      	cmp	r6, fp
 800e156:	f67f aebf 	bls.w	800ded8 <_scanf_float+0x80>
 800e15a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e15e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e162:	463a      	mov	r2, r7
 800e164:	4640      	mov	r0, r8
 800e166:	4798      	blx	r3
 800e168:	6923      	ldr	r3, [r4, #16]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	6123      	str	r3, [r4, #16]
 800e16e:	e7f1      	b.n	800e154 <_scanf_float+0x2fc>
 800e170:	46aa      	mov	sl, r5
 800e172:	9602      	str	r6, [sp, #8]
 800e174:	e7df      	b.n	800e136 <_scanf_float+0x2de>
 800e176:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e17a:	6923      	ldr	r3, [r4, #16]
 800e17c:	2965      	cmp	r1, #101	; 0x65
 800e17e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e182:	f106 35ff 	add.w	r5, r6, #4294967295
 800e186:	6123      	str	r3, [r4, #16]
 800e188:	d00c      	beq.n	800e1a4 <_scanf_float+0x34c>
 800e18a:	2945      	cmp	r1, #69	; 0x45
 800e18c:	d00a      	beq.n	800e1a4 <_scanf_float+0x34c>
 800e18e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e192:	463a      	mov	r2, r7
 800e194:	4640      	mov	r0, r8
 800e196:	4798      	blx	r3
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	1eb5      	subs	r5, r6, #2
 800e1a2:	6123      	str	r3, [r4, #16]
 800e1a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1a8:	463a      	mov	r2, r7
 800e1aa:	4640      	mov	r0, r8
 800e1ac:	4798      	blx	r3
 800e1ae:	462e      	mov	r6, r5
 800e1b0:	6825      	ldr	r5, [r4, #0]
 800e1b2:	f015 0510 	ands.w	r5, r5, #16
 800e1b6:	d158      	bne.n	800e26a <_scanf_float+0x412>
 800e1b8:	7035      	strb	r5, [r6, #0]
 800e1ba:	6823      	ldr	r3, [r4, #0]
 800e1bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e1c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1c4:	d11c      	bne.n	800e200 <_scanf_float+0x3a8>
 800e1c6:	9b01      	ldr	r3, [sp, #4]
 800e1c8:	454b      	cmp	r3, r9
 800e1ca:	eba3 0209 	sub.w	r2, r3, r9
 800e1ce:	d124      	bne.n	800e21a <_scanf_float+0x3c2>
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	4659      	mov	r1, fp
 800e1d4:	4640      	mov	r0, r8
 800e1d6:	f7ff f9c7 	bl	800d568 <_strtod_r>
 800e1da:	9b03      	ldr	r3, [sp, #12]
 800e1dc:	6821      	ldr	r1, [r4, #0]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f011 0f02 	tst.w	r1, #2
 800e1e4:	ec57 6b10 	vmov	r6, r7, d0
 800e1e8:	f103 0204 	add.w	r2, r3, #4
 800e1ec:	d020      	beq.n	800e230 <_scanf_float+0x3d8>
 800e1ee:	9903      	ldr	r1, [sp, #12]
 800e1f0:	600a      	str	r2, [r1, #0]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	e9c3 6700 	strd	r6, r7, [r3]
 800e1f8:	68e3      	ldr	r3, [r4, #12]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	60e3      	str	r3, [r4, #12]
 800e1fe:	e66c      	b.n	800deda <_scanf_float+0x82>
 800e200:	9b04      	ldr	r3, [sp, #16]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d0e4      	beq.n	800e1d0 <_scanf_float+0x378>
 800e206:	9905      	ldr	r1, [sp, #20]
 800e208:	230a      	movs	r3, #10
 800e20a:	462a      	mov	r2, r5
 800e20c:	3101      	adds	r1, #1
 800e20e:	4640      	mov	r0, r8
 800e210:	f002 f97a 	bl	8010508 <_strtol_r>
 800e214:	9b04      	ldr	r3, [sp, #16]
 800e216:	9e05      	ldr	r6, [sp, #20]
 800e218:	1ac2      	subs	r2, r0, r3
 800e21a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e21e:	429e      	cmp	r6, r3
 800e220:	bf28      	it	cs
 800e222:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e226:	4912      	ldr	r1, [pc, #72]	; (800e270 <_scanf_float+0x418>)
 800e228:	4630      	mov	r0, r6
 800e22a:	f000 f8e7 	bl	800e3fc <siprintf>
 800e22e:	e7cf      	b.n	800e1d0 <_scanf_float+0x378>
 800e230:	f011 0f04 	tst.w	r1, #4
 800e234:	9903      	ldr	r1, [sp, #12]
 800e236:	600a      	str	r2, [r1, #0]
 800e238:	d1db      	bne.n	800e1f2 <_scanf_float+0x39a>
 800e23a:	f8d3 8000 	ldr.w	r8, [r3]
 800e23e:	ee10 2a10 	vmov	r2, s0
 800e242:	ee10 0a10 	vmov	r0, s0
 800e246:	463b      	mov	r3, r7
 800e248:	4639      	mov	r1, r7
 800e24a:	f7f2 fc7f 	bl	8000b4c <__aeabi_dcmpun>
 800e24e:	b128      	cbz	r0, 800e25c <_scanf_float+0x404>
 800e250:	4808      	ldr	r0, [pc, #32]	; (800e274 <_scanf_float+0x41c>)
 800e252:	f000 f9f1 	bl	800e638 <nanf>
 800e256:	ed88 0a00 	vstr	s0, [r8]
 800e25a:	e7cd      	b.n	800e1f8 <_scanf_float+0x3a0>
 800e25c:	4630      	mov	r0, r6
 800e25e:	4639      	mov	r1, r7
 800e260:	f7f2 fcd2 	bl	8000c08 <__aeabi_d2f>
 800e264:	f8c8 0000 	str.w	r0, [r8]
 800e268:	e7c6      	b.n	800e1f8 <_scanf_float+0x3a0>
 800e26a:	2500      	movs	r5, #0
 800e26c:	e635      	b.n	800deda <_scanf_float+0x82>
 800e26e:	bf00      	nop
 800e270:	080110c4 	.word	0x080110c4
 800e274:	08011461 	.word	0x08011461

0800e278 <std>:
 800e278:	2300      	movs	r3, #0
 800e27a:	b510      	push	{r4, lr}
 800e27c:	4604      	mov	r4, r0
 800e27e:	e9c0 3300 	strd	r3, r3, [r0]
 800e282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e286:	6083      	str	r3, [r0, #8]
 800e288:	8181      	strh	r1, [r0, #12]
 800e28a:	6643      	str	r3, [r0, #100]	; 0x64
 800e28c:	81c2      	strh	r2, [r0, #14]
 800e28e:	6183      	str	r3, [r0, #24]
 800e290:	4619      	mov	r1, r3
 800e292:	2208      	movs	r2, #8
 800e294:	305c      	adds	r0, #92	; 0x5c
 800e296:	f000 f914 	bl	800e4c2 <memset>
 800e29a:	4b0d      	ldr	r3, [pc, #52]	; (800e2d0 <std+0x58>)
 800e29c:	6263      	str	r3, [r4, #36]	; 0x24
 800e29e:	4b0d      	ldr	r3, [pc, #52]	; (800e2d4 <std+0x5c>)
 800e2a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2a2:	4b0d      	ldr	r3, [pc, #52]	; (800e2d8 <std+0x60>)
 800e2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2a6:	4b0d      	ldr	r3, [pc, #52]	; (800e2dc <std+0x64>)
 800e2a8:	6323      	str	r3, [r4, #48]	; 0x30
 800e2aa:	4b0d      	ldr	r3, [pc, #52]	; (800e2e0 <std+0x68>)
 800e2ac:	6224      	str	r4, [r4, #32]
 800e2ae:	429c      	cmp	r4, r3
 800e2b0:	d006      	beq.n	800e2c0 <std+0x48>
 800e2b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e2b6:	4294      	cmp	r4, r2
 800e2b8:	d002      	beq.n	800e2c0 <std+0x48>
 800e2ba:	33d0      	adds	r3, #208	; 0xd0
 800e2bc:	429c      	cmp	r4, r3
 800e2be:	d105      	bne.n	800e2cc <std+0x54>
 800e2c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2c8:	f000 b99a 	b.w	800e600 <__retarget_lock_init_recursive>
 800e2cc:	bd10      	pop	{r4, pc}
 800e2ce:	bf00      	nop
 800e2d0:	0800e43d 	.word	0x0800e43d
 800e2d4:	0800e45f 	.word	0x0800e45f
 800e2d8:	0800e497 	.word	0x0800e497
 800e2dc:	0800e4bb 	.word	0x0800e4bb
 800e2e0:	20000d70 	.word	0x20000d70

0800e2e4 <stdio_exit_handler>:
 800e2e4:	4a02      	ldr	r2, [pc, #8]	; (800e2f0 <stdio_exit_handler+0xc>)
 800e2e6:	4903      	ldr	r1, [pc, #12]	; (800e2f4 <stdio_exit_handler+0x10>)
 800e2e8:	4803      	ldr	r0, [pc, #12]	; (800e2f8 <stdio_exit_handler+0x14>)
 800e2ea:	f000 b869 	b.w	800e3c0 <_fwalk_sglue>
 800e2ee:	bf00      	nop
 800e2f0:	20000040 	.word	0x20000040
 800e2f4:	080108e5 	.word	0x080108e5
 800e2f8:	200001b8 	.word	0x200001b8

0800e2fc <cleanup_stdio>:
 800e2fc:	6841      	ldr	r1, [r0, #4]
 800e2fe:	4b0c      	ldr	r3, [pc, #48]	; (800e330 <cleanup_stdio+0x34>)
 800e300:	4299      	cmp	r1, r3
 800e302:	b510      	push	{r4, lr}
 800e304:	4604      	mov	r4, r0
 800e306:	d001      	beq.n	800e30c <cleanup_stdio+0x10>
 800e308:	f002 faec 	bl	80108e4 <_fflush_r>
 800e30c:	68a1      	ldr	r1, [r4, #8]
 800e30e:	4b09      	ldr	r3, [pc, #36]	; (800e334 <cleanup_stdio+0x38>)
 800e310:	4299      	cmp	r1, r3
 800e312:	d002      	beq.n	800e31a <cleanup_stdio+0x1e>
 800e314:	4620      	mov	r0, r4
 800e316:	f002 fae5 	bl	80108e4 <_fflush_r>
 800e31a:	68e1      	ldr	r1, [r4, #12]
 800e31c:	4b06      	ldr	r3, [pc, #24]	; (800e338 <cleanup_stdio+0x3c>)
 800e31e:	4299      	cmp	r1, r3
 800e320:	d004      	beq.n	800e32c <cleanup_stdio+0x30>
 800e322:	4620      	mov	r0, r4
 800e324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e328:	f002 badc 	b.w	80108e4 <_fflush_r>
 800e32c:	bd10      	pop	{r4, pc}
 800e32e:	bf00      	nop
 800e330:	20000d70 	.word	0x20000d70
 800e334:	20000dd8 	.word	0x20000dd8
 800e338:	20000e40 	.word	0x20000e40

0800e33c <global_stdio_init.part.0>:
 800e33c:	b510      	push	{r4, lr}
 800e33e:	4b0b      	ldr	r3, [pc, #44]	; (800e36c <global_stdio_init.part.0+0x30>)
 800e340:	4c0b      	ldr	r4, [pc, #44]	; (800e370 <global_stdio_init.part.0+0x34>)
 800e342:	4a0c      	ldr	r2, [pc, #48]	; (800e374 <global_stdio_init.part.0+0x38>)
 800e344:	601a      	str	r2, [r3, #0]
 800e346:	4620      	mov	r0, r4
 800e348:	2200      	movs	r2, #0
 800e34a:	2104      	movs	r1, #4
 800e34c:	f7ff ff94 	bl	800e278 <std>
 800e350:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e354:	2201      	movs	r2, #1
 800e356:	2109      	movs	r1, #9
 800e358:	f7ff ff8e 	bl	800e278 <std>
 800e35c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e360:	2202      	movs	r2, #2
 800e362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e366:	2112      	movs	r1, #18
 800e368:	f7ff bf86 	b.w	800e278 <std>
 800e36c:	20000ea8 	.word	0x20000ea8
 800e370:	20000d70 	.word	0x20000d70
 800e374:	0800e2e5 	.word	0x0800e2e5

0800e378 <__sfp_lock_acquire>:
 800e378:	4801      	ldr	r0, [pc, #4]	; (800e380 <__sfp_lock_acquire+0x8>)
 800e37a:	f000 b942 	b.w	800e602 <__retarget_lock_acquire_recursive>
 800e37e:	bf00      	nop
 800e380:	20000eb1 	.word	0x20000eb1

0800e384 <__sfp_lock_release>:
 800e384:	4801      	ldr	r0, [pc, #4]	; (800e38c <__sfp_lock_release+0x8>)
 800e386:	f000 b93d 	b.w	800e604 <__retarget_lock_release_recursive>
 800e38a:	bf00      	nop
 800e38c:	20000eb1 	.word	0x20000eb1

0800e390 <__sinit>:
 800e390:	b510      	push	{r4, lr}
 800e392:	4604      	mov	r4, r0
 800e394:	f7ff fff0 	bl	800e378 <__sfp_lock_acquire>
 800e398:	6a23      	ldr	r3, [r4, #32]
 800e39a:	b11b      	cbz	r3, 800e3a4 <__sinit+0x14>
 800e39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3a0:	f7ff bff0 	b.w	800e384 <__sfp_lock_release>
 800e3a4:	4b04      	ldr	r3, [pc, #16]	; (800e3b8 <__sinit+0x28>)
 800e3a6:	6223      	str	r3, [r4, #32]
 800e3a8:	4b04      	ldr	r3, [pc, #16]	; (800e3bc <__sinit+0x2c>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1f5      	bne.n	800e39c <__sinit+0xc>
 800e3b0:	f7ff ffc4 	bl	800e33c <global_stdio_init.part.0>
 800e3b4:	e7f2      	b.n	800e39c <__sinit+0xc>
 800e3b6:	bf00      	nop
 800e3b8:	0800e2fd 	.word	0x0800e2fd
 800e3bc:	20000ea8 	.word	0x20000ea8

0800e3c0 <_fwalk_sglue>:
 800e3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c4:	4607      	mov	r7, r0
 800e3c6:	4688      	mov	r8, r1
 800e3c8:	4614      	mov	r4, r2
 800e3ca:	2600      	movs	r6, #0
 800e3cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3d0:	f1b9 0901 	subs.w	r9, r9, #1
 800e3d4:	d505      	bpl.n	800e3e2 <_fwalk_sglue+0x22>
 800e3d6:	6824      	ldr	r4, [r4, #0]
 800e3d8:	2c00      	cmp	r4, #0
 800e3da:	d1f7      	bne.n	800e3cc <_fwalk_sglue+0xc>
 800e3dc:	4630      	mov	r0, r6
 800e3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e2:	89ab      	ldrh	r3, [r5, #12]
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d907      	bls.n	800e3f8 <_fwalk_sglue+0x38>
 800e3e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	d003      	beq.n	800e3f8 <_fwalk_sglue+0x38>
 800e3f0:	4629      	mov	r1, r5
 800e3f2:	4638      	mov	r0, r7
 800e3f4:	47c0      	blx	r8
 800e3f6:	4306      	orrs	r6, r0
 800e3f8:	3568      	adds	r5, #104	; 0x68
 800e3fa:	e7e9      	b.n	800e3d0 <_fwalk_sglue+0x10>

0800e3fc <siprintf>:
 800e3fc:	b40e      	push	{r1, r2, r3}
 800e3fe:	b500      	push	{lr}
 800e400:	b09c      	sub	sp, #112	; 0x70
 800e402:	ab1d      	add	r3, sp, #116	; 0x74
 800e404:	9002      	str	r0, [sp, #8]
 800e406:	9006      	str	r0, [sp, #24]
 800e408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e40c:	4809      	ldr	r0, [pc, #36]	; (800e434 <siprintf+0x38>)
 800e40e:	9107      	str	r1, [sp, #28]
 800e410:	9104      	str	r1, [sp, #16]
 800e412:	4909      	ldr	r1, [pc, #36]	; (800e438 <siprintf+0x3c>)
 800e414:	f853 2b04 	ldr.w	r2, [r3], #4
 800e418:	9105      	str	r1, [sp, #20]
 800e41a:	6800      	ldr	r0, [r0, #0]
 800e41c:	9301      	str	r3, [sp, #4]
 800e41e:	a902      	add	r1, sp, #8
 800e420:	f002 f8dc 	bl	80105dc <_svfiprintf_r>
 800e424:	9b02      	ldr	r3, [sp, #8]
 800e426:	2200      	movs	r2, #0
 800e428:	701a      	strb	r2, [r3, #0]
 800e42a:	b01c      	add	sp, #112	; 0x70
 800e42c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e430:	b003      	add	sp, #12
 800e432:	4770      	bx	lr
 800e434:	20000204 	.word	0x20000204
 800e438:	ffff0208 	.word	0xffff0208

0800e43c <__sread>:
 800e43c:	b510      	push	{r4, lr}
 800e43e:	460c      	mov	r4, r1
 800e440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e444:	f000 f87e 	bl	800e544 <_read_r>
 800e448:	2800      	cmp	r0, #0
 800e44a:	bfab      	itete	ge
 800e44c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e44e:	89a3      	ldrhlt	r3, [r4, #12]
 800e450:	181b      	addge	r3, r3, r0
 800e452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e456:	bfac      	ite	ge
 800e458:	6563      	strge	r3, [r4, #84]	; 0x54
 800e45a:	81a3      	strhlt	r3, [r4, #12]
 800e45c:	bd10      	pop	{r4, pc}

0800e45e <__swrite>:
 800e45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e462:	461f      	mov	r7, r3
 800e464:	898b      	ldrh	r3, [r1, #12]
 800e466:	05db      	lsls	r3, r3, #23
 800e468:	4605      	mov	r5, r0
 800e46a:	460c      	mov	r4, r1
 800e46c:	4616      	mov	r6, r2
 800e46e:	d505      	bpl.n	800e47c <__swrite+0x1e>
 800e470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e474:	2302      	movs	r3, #2
 800e476:	2200      	movs	r2, #0
 800e478:	f000 f852 	bl	800e520 <_lseek_r>
 800e47c:	89a3      	ldrh	r3, [r4, #12]
 800e47e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e486:	81a3      	strh	r3, [r4, #12]
 800e488:	4632      	mov	r2, r6
 800e48a:	463b      	mov	r3, r7
 800e48c:	4628      	mov	r0, r5
 800e48e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e492:	f000 b879 	b.w	800e588 <_write_r>

0800e496 <__sseek>:
 800e496:	b510      	push	{r4, lr}
 800e498:	460c      	mov	r4, r1
 800e49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e49e:	f000 f83f 	bl	800e520 <_lseek_r>
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	bf15      	itete	ne
 800e4a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4b2:	81a3      	strheq	r3, [r4, #12]
 800e4b4:	bf18      	it	ne
 800e4b6:	81a3      	strhne	r3, [r4, #12]
 800e4b8:	bd10      	pop	{r4, pc}

0800e4ba <__sclose>:
 800e4ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4be:	f000 b81f 	b.w	800e500 <_close_r>

0800e4c2 <memset>:
 800e4c2:	4402      	add	r2, r0
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d100      	bne.n	800e4cc <memset+0xa>
 800e4ca:	4770      	bx	lr
 800e4cc:	f803 1b01 	strb.w	r1, [r3], #1
 800e4d0:	e7f9      	b.n	800e4c6 <memset+0x4>

0800e4d2 <strncmp>:
 800e4d2:	b510      	push	{r4, lr}
 800e4d4:	b16a      	cbz	r2, 800e4f2 <strncmp+0x20>
 800e4d6:	3901      	subs	r1, #1
 800e4d8:	1884      	adds	r4, r0, r2
 800e4da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d103      	bne.n	800e4ee <strncmp+0x1c>
 800e4e6:	42a0      	cmp	r0, r4
 800e4e8:	d001      	beq.n	800e4ee <strncmp+0x1c>
 800e4ea:	2a00      	cmp	r2, #0
 800e4ec:	d1f5      	bne.n	800e4da <strncmp+0x8>
 800e4ee:	1ad0      	subs	r0, r2, r3
 800e4f0:	bd10      	pop	{r4, pc}
 800e4f2:	4610      	mov	r0, r2
 800e4f4:	e7fc      	b.n	800e4f0 <strncmp+0x1e>
	...

0800e4f8 <_localeconv_r>:
 800e4f8:	4800      	ldr	r0, [pc, #0]	; (800e4fc <_localeconv_r+0x4>)
 800e4fa:	4770      	bx	lr
 800e4fc:	2000013c 	.word	0x2000013c

0800e500 <_close_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	4d06      	ldr	r5, [pc, #24]	; (800e51c <_close_r+0x1c>)
 800e504:	2300      	movs	r3, #0
 800e506:	4604      	mov	r4, r0
 800e508:	4608      	mov	r0, r1
 800e50a:	602b      	str	r3, [r5, #0]
 800e50c:	f7f3 ff3b 	bl	8002386 <_close>
 800e510:	1c43      	adds	r3, r0, #1
 800e512:	d102      	bne.n	800e51a <_close_r+0x1a>
 800e514:	682b      	ldr	r3, [r5, #0]
 800e516:	b103      	cbz	r3, 800e51a <_close_r+0x1a>
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	bd38      	pop	{r3, r4, r5, pc}
 800e51c:	20000eac 	.word	0x20000eac

0800e520 <_lseek_r>:
 800e520:	b538      	push	{r3, r4, r5, lr}
 800e522:	4d07      	ldr	r5, [pc, #28]	; (800e540 <_lseek_r+0x20>)
 800e524:	4604      	mov	r4, r0
 800e526:	4608      	mov	r0, r1
 800e528:	4611      	mov	r1, r2
 800e52a:	2200      	movs	r2, #0
 800e52c:	602a      	str	r2, [r5, #0]
 800e52e:	461a      	mov	r2, r3
 800e530:	f7f3 ff50 	bl	80023d4 <_lseek>
 800e534:	1c43      	adds	r3, r0, #1
 800e536:	d102      	bne.n	800e53e <_lseek_r+0x1e>
 800e538:	682b      	ldr	r3, [r5, #0]
 800e53a:	b103      	cbz	r3, 800e53e <_lseek_r+0x1e>
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	bd38      	pop	{r3, r4, r5, pc}
 800e540:	20000eac 	.word	0x20000eac

0800e544 <_read_r>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	4d07      	ldr	r5, [pc, #28]	; (800e564 <_read_r+0x20>)
 800e548:	4604      	mov	r4, r0
 800e54a:	4608      	mov	r0, r1
 800e54c:	4611      	mov	r1, r2
 800e54e:	2200      	movs	r2, #0
 800e550:	602a      	str	r2, [r5, #0]
 800e552:	461a      	mov	r2, r3
 800e554:	f7f3 fede 	bl	8002314 <_read>
 800e558:	1c43      	adds	r3, r0, #1
 800e55a:	d102      	bne.n	800e562 <_read_r+0x1e>
 800e55c:	682b      	ldr	r3, [r5, #0]
 800e55e:	b103      	cbz	r3, 800e562 <_read_r+0x1e>
 800e560:	6023      	str	r3, [r4, #0]
 800e562:	bd38      	pop	{r3, r4, r5, pc}
 800e564:	20000eac 	.word	0x20000eac

0800e568 <_sbrk_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4d06      	ldr	r5, [pc, #24]	; (800e584 <_sbrk_r+0x1c>)
 800e56c:	2300      	movs	r3, #0
 800e56e:	4604      	mov	r4, r0
 800e570:	4608      	mov	r0, r1
 800e572:	602b      	str	r3, [r5, #0]
 800e574:	f7f3 ff3c 	bl	80023f0 <_sbrk>
 800e578:	1c43      	adds	r3, r0, #1
 800e57a:	d102      	bne.n	800e582 <_sbrk_r+0x1a>
 800e57c:	682b      	ldr	r3, [r5, #0]
 800e57e:	b103      	cbz	r3, 800e582 <_sbrk_r+0x1a>
 800e580:	6023      	str	r3, [r4, #0]
 800e582:	bd38      	pop	{r3, r4, r5, pc}
 800e584:	20000eac 	.word	0x20000eac

0800e588 <_write_r>:
 800e588:	b538      	push	{r3, r4, r5, lr}
 800e58a:	4d07      	ldr	r5, [pc, #28]	; (800e5a8 <_write_r+0x20>)
 800e58c:	4604      	mov	r4, r0
 800e58e:	4608      	mov	r0, r1
 800e590:	4611      	mov	r1, r2
 800e592:	2200      	movs	r2, #0
 800e594:	602a      	str	r2, [r5, #0]
 800e596:	461a      	mov	r2, r3
 800e598:	f7f3 fed9 	bl	800234e <_write>
 800e59c:	1c43      	adds	r3, r0, #1
 800e59e:	d102      	bne.n	800e5a6 <_write_r+0x1e>
 800e5a0:	682b      	ldr	r3, [r5, #0]
 800e5a2:	b103      	cbz	r3, 800e5a6 <_write_r+0x1e>
 800e5a4:	6023      	str	r3, [r4, #0]
 800e5a6:	bd38      	pop	{r3, r4, r5, pc}
 800e5a8:	20000eac 	.word	0x20000eac

0800e5ac <__errno>:
 800e5ac:	4b01      	ldr	r3, [pc, #4]	; (800e5b4 <__errno+0x8>)
 800e5ae:	6818      	ldr	r0, [r3, #0]
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	20000204 	.word	0x20000204

0800e5b8 <__libc_init_array>:
 800e5b8:	b570      	push	{r4, r5, r6, lr}
 800e5ba:	4d0d      	ldr	r5, [pc, #52]	; (800e5f0 <__libc_init_array+0x38>)
 800e5bc:	4c0d      	ldr	r4, [pc, #52]	; (800e5f4 <__libc_init_array+0x3c>)
 800e5be:	1b64      	subs	r4, r4, r5
 800e5c0:	10a4      	asrs	r4, r4, #2
 800e5c2:	2600      	movs	r6, #0
 800e5c4:	42a6      	cmp	r6, r4
 800e5c6:	d109      	bne.n	800e5dc <__libc_init_array+0x24>
 800e5c8:	4d0b      	ldr	r5, [pc, #44]	; (800e5f8 <__libc_init_array+0x40>)
 800e5ca:	4c0c      	ldr	r4, [pc, #48]	; (800e5fc <__libc_init_array+0x44>)
 800e5cc:	f002 fcf2 	bl	8010fb4 <_init>
 800e5d0:	1b64      	subs	r4, r4, r5
 800e5d2:	10a4      	asrs	r4, r4, #2
 800e5d4:	2600      	movs	r6, #0
 800e5d6:	42a6      	cmp	r6, r4
 800e5d8:	d105      	bne.n	800e5e6 <__libc_init_array+0x2e>
 800e5da:	bd70      	pop	{r4, r5, r6, pc}
 800e5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5e0:	4798      	blx	r3
 800e5e2:	3601      	adds	r6, #1
 800e5e4:	e7ee      	b.n	800e5c4 <__libc_init_array+0xc>
 800e5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5ea:	4798      	blx	r3
 800e5ec:	3601      	adds	r6, #1
 800e5ee:	e7f2      	b.n	800e5d6 <__libc_init_array+0x1e>
 800e5f0:	0801146c 	.word	0x0801146c
 800e5f4:	0801146c 	.word	0x0801146c
 800e5f8:	0801146c 	.word	0x0801146c
 800e5fc:	08011470 	.word	0x08011470

0800e600 <__retarget_lock_init_recursive>:
 800e600:	4770      	bx	lr

0800e602 <__retarget_lock_acquire_recursive>:
 800e602:	4770      	bx	lr

0800e604 <__retarget_lock_release_recursive>:
 800e604:	4770      	bx	lr

0800e606 <memcpy>:
 800e606:	440a      	add	r2, r1
 800e608:	4291      	cmp	r1, r2
 800e60a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e60e:	d100      	bne.n	800e612 <memcpy+0xc>
 800e610:	4770      	bx	lr
 800e612:	b510      	push	{r4, lr}
 800e614:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e61c:	4291      	cmp	r1, r2
 800e61e:	d1f9      	bne.n	800e614 <memcpy+0xe>
 800e620:	bd10      	pop	{r4, pc}
 800e622:	0000      	movs	r0, r0
 800e624:	0000      	movs	r0, r0
	...

0800e628 <nan>:
 800e628:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e630 <nan+0x8>
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	00000000 	.word	0x00000000
 800e634:	7ff80000 	.word	0x7ff80000

0800e638 <nanf>:
 800e638:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e640 <nanf+0x8>
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop
 800e640:	7fc00000 	.word	0x7fc00000

0800e644 <quorem>:
 800e644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e648:	6903      	ldr	r3, [r0, #16]
 800e64a:	690c      	ldr	r4, [r1, #16]
 800e64c:	42a3      	cmp	r3, r4
 800e64e:	4607      	mov	r7, r0
 800e650:	db7e      	blt.n	800e750 <quorem+0x10c>
 800e652:	3c01      	subs	r4, #1
 800e654:	f101 0814 	add.w	r8, r1, #20
 800e658:	f100 0514 	add.w	r5, r0, #20
 800e65c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e660:	9301      	str	r3, [sp, #4]
 800e662:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e66a:	3301      	adds	r3, #1
 800e66c:	429a      	cmp	r2, r3
 800e66e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e672:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e676:	fbb2 f6f3 	udiv	r6, r2, r3
 800e67a:	d331      	bcc.n	800e6e0 <quorem+0x9c>
 800e67c:	f04f 0e00 	mov.w	lr, #0
 800e680:	4640      	mov	r0, r8
 800e682:	46ac      	mov	ip, r5
 800e684:	46f2      	mov	sl, lr
 800e686:	f850 2b04 	ldr.w	r2, [r0], #4
 800e68a:	b293      	uxth	r3, r2
 800e68c:	fb06 e303 	mla	r3, r6, r3, lr
 800e690:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e694:	0c1a      	lsrs	r2, r3, #16
 800e696:	b29b      	uxth	r3, r3
 800e698:	ebaa 0303 	sub.w	r3, sl, r3
 800e69c:	f8dc a000 	ldr.w	sl, [ip]
 800e6a0:	fa13 f38a 	uxtah	r3, r3, sl
 800e6a4:	fb06 220e 	mla	r2, r6, lr, r2
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	9b00      	ldr	r3, [sp, #0]
 800e6ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e6b0:	b292      	uxth	r2, r2
 800e6b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e6b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6ba:	f8bd 3000 	ldrh.w	r3, [sp]
 800e6be:	4581      	cmp	r9, r0
 800e6c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6c4:	f84c 3b04 	str.w	r3, [ip], #4
 800e6c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e6cc:	d2db      	bcs.n	800e686 <quorem+0x42>
 800e6ce:	f855 300b 	ldr.w	r3, [r5, fp]
 800e6d2:	b92b      	cbnz	r3, 800e6e0 <quorem+0x9c>
 800e6d4:	9b01      	ldr	r3, [sp, #4]
 800e6d6:	3b04      	subs	r3, #4
 800e6d8:	429d      	cmp	r5, r3
 800e6da:	461a      	mov	r2, r3
 800e6dc:	d32c      	bcc.n	800e738 <quorem+0xf4>
 800e6de:	613c      	str	r4, [r7, #16]
 800e6e0:	4638      	mov	r0, r7
 800e6e2:	f001 fca7 	bl	8010034 <__mcmp>
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	db22      	blt.n	800e730 <quorem+0xec>
 800e6ea:	3601      	adds	r6, #1
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e6f4:	f8d1 c000 	ldr.w	ip, [r1]
 800e6f8:	b293      	uxth	r3, r2
 800e6fa:	1ac3      	subs	r3, r0, r3
 800e6fc:	0c12      	lsrs	r2, r2, #16
 800e6fe:	fa13 f38c 	uxtah	r3, r3, ip
 800e702:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e706:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e710:	45c1      	cmp	r9, r8
 800e712:	f841 3b04 	str.w	r3, [r1], #4
 800e716:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e71a:	d2e9      	bcs.n	800e6f0 <quorem+0xac>
 800e71c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e720:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e724:	b922      	cbnz	r2, 800e730 <quorem+0xec>
 800e726:	3b04      	subs	r3, #4
 800e728:	429d      	cmp	r5, r3
 800e72a:	461a      	mov	r2, r3
 800e72c:	d30a      	bcc.n	800e744 <quorem+0x100>
 800e72e:	613c      	str	r4, [r7, #16]
 800e730:	4630      	mov	r0, r6
 800e732:	b003      	add	sp, #12
 800e734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e738:	6812      	ldr	r2, [r2, #0]
 800e73a:	3b04      	subs	r3, #4
 800e73c:	2a00      	cmp	r2, #0
 800e73e:	d1ce      	bne.n	800e6de <quorem+0x9a>
 800e740:	3c01      	subs	r4, #1
 800e742:	e7c9      	b.n	800e6d8 <quorem+0x94>
 800e744:	6812      	ldr	r2, [r2, #0]
 800e746:	3b04      	subs	r3, #4
 800e748:	2a00      	cmp	r2, #0
 800e74a:	d1f0      	bne.n	800e72e <quorem+0xea>
 800e74c:	3c01      	subs	r4, #1
 800e74e:	e7eb      	b.n	800e728 <quorem+0xe4>
 800e750:	2000      	movs	r0, #0
 800e752:	e7ee      	b.n	800e732 <quorem+0xee>
 800e754:	0000      	movs	r0, r0
	...

0800e758 <_dtoa_r>:
 800e758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75c:	ed2d 8b04 	vpush	{d8-d9}
 800e760:	69c5      	ldr	r5, [r0, #28]
 800e762:	b093      	sub	sp, #76	; 0x4c
 800e764:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e768:	ec57 6b10 	vmov	r6, r7, d0
 800e76c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e770:	9107      	str	r1, [sp, #28]
 800e772:	4604      	mov	r4, r0
 800e774:	920a      	str	r2, [sp, #40]	; 0x28
 800e776:	930d      	str	r3, [sp, #52]	; 0x34
 800e778:	b975      	cbnz	r5, 800e798 <_dtoa_r+0x40>
 800e77a:	2010      	movs	r0, #16
 800e77c:	f7fe f82a 	bl	800c7d4 <malloc>
 800e780:	4602      	mov	r2, r0
 800e782:	61e0      	str	r0, [r4, #28]
 800e784:	b920      	cbnz	r0, 800e790 <_dtoa_r+0x38>
 800e786:	4bae      	ldr	r3, [pc, #696]	; (800ea40 <_dtoa_r+0x2e8>)
 800e788:	21ef      	movs	r1, #239	; 0xef
 800e78a:	48ae      	ldr	r0, [pc, #696]	; (800ea44 <_dtoa_r+0x2ec>)
 800e78c:	f002 f8ec 	bl	8010968 <__assert_func>
 800e790:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e794:	6005      	str	r5, [r0, #0]
 800e796:	60c5      	str	r5, [r0, #12]
 800e798:	69e3      	ldr	r3, [r4, #28]
 800e79a:	6819      	ldr	r1, [r3, #0]
 800e79c:	b151      	cbz	r1, 800e7b4 <_dtoa_r+0x5c>
 800e79e:	685a      	ldr	r2, [r3, #4]
 800e7a0:	604a      	str	r2, [r1, #4]
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	4093      	lsls	r3, r2
 800e7a6:	608b      	str	r3, [r1, #8]
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	f001 f9bd 	bl	800fb28 <_Bfree>
 800e7ae:	69e3      	ldr	r3, [r4, #28]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	601a      	str	r2, [r3, #0]
 800e7b4:	1e3b      	subs	r3, r7, #0
 800e7b6:	bfbb      	ittet	lt
 800e7b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e7bc:	9303      	strlt	r3, [sp, #12]
 800e7be:	2300      	movge	r3, #0
 800e7c0:	2201      	movlt	r2, #1
 800e7c2:	bfac      	ite	ge
 800e7c4:	f8c8 3000 	strge.w	r3, [r8]
 800e7c8:	f8c8 2000 	strlt.w	r2, [r8]
 800e7cc:	4b9e      	ldr	r3, [pc, #632]	; (800ea48 <_dtoa_r+0x2f0>)
 800e7ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e7d2:	ea33 0308 	bics.w	r3, r3, r8
 800e7d6:	d11b      	bne.n	800e810 <_dtoa_r+0xb8>
 800e7d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7da:	f242 730f 	movw	r3, #9999	; 0x270f
 800e7de:	6013      	str	r3, [r2, #0]
 800e7e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e7e4:	4333      	orrs	r3, r6
 800e7e6:	f000 8593 	beq.w	800f310 <_dtoa_r+0xbb8>
 800e7ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7ec:	b963      	cbnz	r3, 800e808 <_dtoa_r+0xb0>
 800e7ee:	4b97      	ldr	r3, [pc, #604]	; (800ea4c <_dtoa_r+0x2f4>)
 800e7f0:	e027      	b.n	800e842 <_dtoa_r+0xea>
 800e7f2:	4b97      	ldr	r3, [pc, #604]	; (800ea50 <_dtoa_r+0x2f8>)
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	3308      	adds	r3, #8
 800e7f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7fa:	6013      	str	r3, [r2, #0]
 800e7fc:	9800      	ldr	r0, [sp, #0]
 800e7fe:	b013      	add	sp, #76	; 0x4c
 800e800:	ecbd 8b04 	vpop	{d8-d9}
 800e804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e808:	4b90      	ldr	r3, [pc, #576]	; (800ea4c <_dtoa_r+0x2f4>)
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	3303      	adds	r3, #3
 800e80e:	e7f3      	b.n	800e7f8 <_dtoa_r+0xa0>
 800e810:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e814:	2200      	movs	r2, #0
 800e816:	ec51 0b17 	vmov	r0, r1, d7
 800e81a:	eeb0 8a47 	vmov.f32	s16, s14
 800e81e:	eef0 8a67 	vmov.f32	s17, s15
 800e822:	2300      	movs	r3, #0
 800e824:	f7f2 f960 	bl	8000ae8 <__aeabi_dcmpeq>
 800e828:	4681      	mov	r9, r0
 800e82a:	b160      	cbz	r0, 800e846 <_dtoa_r+0xee>
 800e82c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e82e:	2301      	movs	r3, #1
 800e830:	6013      	str	r3, [r2, #0]
 800e832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e834:	2b00      	cmp	r3, #0
 800e836:	f000 8568 	beq.w	800f30a <_dtoa_r+0xbb2>
 800e83a:	4b86      	ldr	r3, [pc, #536]	; (800ea54 <_dtoa_r+0x2fc>)
 800e83c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e83e:	6013      	str	r3, [r2, #0]
 800e840:	3b01      	subs	r3, #1
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	e7da      	b.n	800e7fc <_dtoa_r+0xa4>
 800e846:	aa10      	add	r2, sp, #64	; 0x40
 800e848:	a911      	add	r1, sp, #68	; 0x44
 800e84a:	4620      	mov	r0, r4
 800e84c:	eeb0 0a48 	vmov.f32	s0, s16
 800e850:	eef0 0a68 	vmov.f32	s1, s17
 800e854:	f001 fd04 	bl	8010260 <__d2b>
 800e858:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e85c:	4682      	mov	sl, r0
 800e85e:	2d00      	cmp	r5, #0
 800e860:	d07f      	beq.n	800e962 <_dtoa_r+0x20a>
 800e862:	ee18 3a90 	vmov	r3, s17
 800e866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e86a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e86e:	ec51 0b18 	vmov	r0, r1, d8
 800e872:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e87a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e87e:	4619      	mov	r1, r3
 800e880:	2200      	movs	r2, #0
 800e882:	4b75      	ldr	r3, [pc, #468]	; (800ea58 <_dtoa_r+0x300>)
 800e884:	f7f1 fd10 	bl	80002a8 <__aeabi_dsub>
 800e888:	a367      	add	r3, pc, #412	; (adr r3, 800ea28 <_dtoa_r+0x2d0>)
 800e88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88e:	f7f1 fec3 	bl	8000618 <__aeabi_dmul>
 800e892:	a367      	add	r3, pc, #412	; (adr r3, 800ea30 <_dtoa_r+0x2d8>)
 800e894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e898:	f7f1 fd08 	bl	80002ac <__adddf3>
 800e89c:	4606      	mov	r6, r0
 800e89e:	4628      	mov	r0, r5
 800e8a0:	460f      	mov	r7, r1
 800e8a2:	f7f1 fe4f 	bl	8000544 <__aeabi_i2d>
 800e8a6:	a364      	add	r3, pc, #400	; (adr r3, 800ea38 <_dtoa_r+0x2e0>)
 800e8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ac:	f7f1 feb4 	bl	8000618 <__aeabi_dmul>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	4630      	mov	r0, r6
 800e8b6:	4639      	mov	r1, r7
 800e8b8:	f7f1 fcf8 	bl	80002ac <__adddf3>
 800e8bc:	4606      	mov	r6, r0
 800e8be:	460f      	mov	r7, r1
 800e8c0:	f7f2 f95a 	bl	8000b78 <__aeabi_d2iz>
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	4683      	mov	fp, r0
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	4639      	mov	r1, r7
 800e8ce:	f7f2 f915 	bl	8000afc <__aeabi_dcmplt>
 800e8d2:	b148      	cbz	r0, 800e8e8 <_dtoa_r+0x190>
 800e8d4:	4658      	mov	r0, fp
 800e8d6:	f7f1 fe35 	bl	8000544 <__aeabi_i2d>
 800e8da:	4632      	mov	r2, r6
 800e8dc:	463b      	mov	r3, r7
 800e8de:	f7f2 f903 	bl	8000ae8 <__aeabi_dcmpeq>
 800e8e2:	b908      	cbnz	r0, 800e8e8 <_dtoa_r+0x190>
 800e8e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e8e8:	f1bb 0f16 	cmp.w	fp, #22
 800e8ec:	d857      	bhi.n	800e99e <_dtoa_r+0x246>
 800e8ee:	4b5b      	ldr	r3, [pc, #364]	; (800ea5c <_dtoa_r+0x304>)
 800e8f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f8:	ec51 0b18 	vmov	r0, r1, d8
 800e8fc:	f7f2 f8fe 	bl	8000afc <__aeabi_dcmplt>
 800e900:	2800      	cmp	r0, #0
 800e902:	d04e      	beq.n	800e9a2 <_dtoa_r+0x24a>
 800e904:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e908:	2300      	movs	r3, #0
 800e90a:	930c      	str	r3, [sp, #48]	; 0x30
 800e90c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e90e:	1b5b      	subs	r3, r3, r5
 800e910:	1e5a      	subs	r2, r3, #1
 800e912:	bf45      	ittet	mi
 800e914:	f1c3 0301 	rsbmi	r3, r3, #1
 800e918:	9305      	strmi	r3, [sp, #20]
 800e91a:	2300      	movpl	r3, #0
 800e91c:	2300      	movmi	r3, #0
 800e91e:	9206      	str	r2, [sp, #24]
 800e920:	bf54      	ite	pl
 800e922:	9305      	strpl	r3, [sp, #20]
 800e924:	9306      	strmi	r3, [sp, #24]
 800e926:	f1bb 0f00 	cmp.w	fp, #0
 800e92a:	db3c      	blt.n	800e9a6 <_dtoa_r+0x24e>
 800e92c:	9b06      	ldr	r3, [sp, #24]
 800e92e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e932:	445b      	add	r3, fp
 800e934:	9306      	str	r3, [sp, #24]
 800e936:	2300      	movs	r3, #0
 800e938:	9308      	str	r3, [sp, #32]
 800e93a:	9b07      	ldr	r3, [sp, #28]
 800e93c:	2b09      	cmp	r3, #9
 800e93e:	d868      	bhi.n	800ea12 <_dtoa_r+0x2ba>
 800e940:	2b05      	cmp	r3, #5
 800e942:	bfc4      	itt	gt
 800e944:	3b04      	subgt	r3, #4
 800e946:	9307      	strgt	r3, [sp, #28]
 800e948:	9b07      	ldr	r3, [sp, #28]
 800e94a:	f1a3 0302 	sub.w	r3, r3, #2
 800e94e:	bfcc      	ite	gt
 800e950:	2500      	movgt	r5, #0
 800e952:	2501      	movle	r5, #1
 800e954:	2b03      	cmp	r3, #3
 800e956:	f200 8085 	bhi.w	800ea64 <_dtoa_r+0x30c>
 800e95a:	e8df f003 	tbb	[pc, r3]
 800e95e:	3b2e      	.short	0x3b2e
 800e960:	5839      	.short	0x5839
 800e962:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e966:	441d      	add	r5, r3
 800e968:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e96c:	2b20      	cmp	r3, #32
 800e96e:	bfc1      	itttt	gt
 800e970:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e974:	fa08 f803 	lslgt.w	r8, r8, r3
 800e978:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e97c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e980:	bfd6      	itet	le
 800e982:	f1c3 0320 	rsble	r3, r3, #32
 800e986:	ea48 0003 	orrgt.w	r0, r8, r3
 800e98a:	fa06 f003 	lslle.w	r0, r6, r3
 800e98e:	f7f1 fdc9 	bl	8000524 <__aeabi_ui2d>
 800e992:	2201      	movs	r2, #1
 800e994:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e998:	3d01      	subs	r5, #1
 800e99a:	920e      	str	r2, [sp, #56]	; 0x38
 800e99c:	e76f      	b.n	800e87e <_dtoa_r+0x126>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	e7b3      	b.n	800e90a <_dtoa_r+0x1b2>
 800e9a2:	900c      	str	r0, [sp, #48]	; 0x30
 800e9a4:	e7b2      	b.n	800e90c <_dtoa_r+0x1b4>
 800e9a6:	9b05      	ldr	r3, [sp, #20]
 800e9a8:	eba3 030b 	sub.w	r3, r3, fp
 800e9ac:	9305      	str	r3, [sp, #20]
 800e9ae:	f1cb 0300 	rsb	r3, fp, #0
 800e9b2:	9308      	str	r3, [sp, #32]
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9b8:	e7bf      	b.n	800e93a <_dtoa_r+0x1e2>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	dc52      	bgt.n	800ea6a <_dtoa_r+0x312>
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	9301      	str	r3, [sp, #4]
 800e9c8:	9304      	str	r3, [sp, #16]
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	920a      	str	r2, [sp, #40]	; 0x28
 800e9ce:	e00b      	b.n	800e9e8 <_dtoa_r+0x290>
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e7f3      	b.n	800e9bc <_dtoa_r+0x264>
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9da:	445b      	add	r3, fp
 800e9dc:	9301      	str	r3, [sp, #4]
 800e9de:	3301      	adds	r3, #1
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	9304      	str	r3, [sp, #16]
 800e9e4:	bfb8      	it	lt
 800e9e6:	2301      	movlt	r3, #1
 800e9e8:	69e0      	ldr	r0, [r4, #28]
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	2204      	movs	r2, #4
 800e9ee:	f102 0614 	add.w	r6, r2, #20
 800e9f2:	429e      	cmp	r6, r3
 800e9f4:	d93d      	bls.n	800ea72 <_dtoa_r+0x31a>
 800e9f6:	6041      	str	r1, [r0, #4]
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	f001 f855 	bl	800faa8 <_Balloc>
 800e9fe:	9000      	str	r0, [sp, #0]
 800ea00:	2800      	cmp	r0, #0
 800ea02:	d139      	bne.n	800ea78 <_dtoa_r+0x320>
 800ea04:	4b16      	ldr	r3, [pc, #88]	; (800ea60 <_dtoa_r+0x308>)
 800ea06:	4602      	mov	r2, r0
 800ea08:	f240 11af 	movw	r1, #431	; 0x1af
 800ea0c:	e6bd      	b.n	800e78a <_dtoa_r+0x32>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	e7e1      	b.n	800e9d6 <_dtoa_r+0x27e>
 800ea12:	2501      	movs	r5, #1
 800ea14:	2300      	movs	r3, #0
 800ea16:	9307      	str	r3, [sp, #28]
 800ea18:	9509      	str	r5, [sp, #36]	; 0x24
 800ea1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ea1e:	9301      	str	r3, [sp, #4]
 800ea20:	9304      	str	r3, [sp, #16]
 800ea22:	2200      	movs	r2, #0
 800ea24:	2312      	movs	r3, #18
 800ea26:	e7d1      	b.n	800e9cc <_dtoa_r+0x274>
 800ea28:	636f4361 	.word	0x636f4361
 800ea2c:	3fd287a7 	.word	0x3fd287a7
 800ea30:	8b60c8b3 	.word	0x8b60c8b3
 800ea34:	3fc68a28 	.word	0x3fc68a28
 800ea38:	509f79fb 	.word	0x509f79fb
 800ea3c:	3fd34413 	.word	0x3fd34413
 800ea40:	080110de 	.word	0x080110de
 800ea44:	080110f5 	.word	0x080110f5
 800ea48:	7ff00000 	.word	0x7ff00000
 800ea4c:	080110da 	.word	0x080110da
 800ea50:	080110d1 	.word	0x080110d1
 800ea54:	080110a1 	.word	0x080110a1
 800ea58:	3ff80000 	.word	0x3ff80000
 800ea5c:	08011240 	.word	0x08011240
 800ea60:	0801114d 	.word	0x0801114d
 800ea64:	2301      	movs	r3, #1
 800ea66:	9309      	str	r3, [sp, #36]	; 0x24
 800ea68:	e7d7      	b.n	800ea1a <_dtoa_r+0x2c2>
 800ea6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea6c:	9301      	str	r3, [sp, #4]
 800ea6e:	9304      	str	r3, [sp, #16]
 800ea70:	e7ba      	b.n	800e9e8 <_dtoa_r+0x290>
 800ea72:	3101      	adds	r1, #1
 800ea74:	0052      	lsls	r2, r2, #1
 800ea76:	e7ba      	b.n	800e9ee <_dtoa_r+0x296>
 800ea78:	69e3      	ldr	r3, [r4, #28]
 800ea7a:	9a00      	ldr	r2, [sp, #0]
 800ea7c:	601a      	str	r2, [r3, #0]
 800ea7e:	9b04      	ldr	r3, [sp, #16]
 800ea80:	2b0e      	cmp	r3, #14
 800ea82:	f200 80a8 	bhi.w	800ebd6 <_dtoa_r+0x47e>
 800ea86:	2d00      	cmp	r5, #0
 800ea88:	f000 80a5 	beq.w	800ebd6 <_dtoa_r+0x47e>
 800ea8c:	f1bb 0f00 	cmp.w	fp, #0
 800ea90:	dd38      	ble.n	800eb04 <_dtoa_r+0x3ac>
 800ea92:	4bc0      	ldr	r3, [pc, #768]	; (800ed94 <_dtoa_r+0x63c>)
 800ea94:	f00b 020f 	and.w	r2, fp, #15
 800ea98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800eaa0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800eaa4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800eaa8:	d019      	beq.n	800eade <_dtoa_r+0x386>
 800eaaa:	4bbb      	ldr	r3, [pc, #748]	; (800ed98 <_dtoa_r+0x640>)
 800eaac:	ec51 0b18 	vmov	r0, r1, d8
 800eab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eab4:	f7f1 feda 	bl	800086c <__aeabi_ddiv>
 800eab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eabc:	f008 080f 	and.w	r8, r8, #15
 800eac0:	2503      	movs	r5, #3
 800eac2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ed98 <_dtoa_r+0x640>
 800eac6:	f1b8 0f00 	cmp.w	r8, #0
 800eaca:	d10a      	bne.n	800eae2 <_dtoa_r+0x38a>
 800eacc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ead0:	4632      	mov	r2, r6
 800ead2:	463b      	mov	r3, r7
 800ead4:	f7f1 feca 	bl	800086c <__aeabi_ddiv>
 800ead8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eadc:	e02b      	b.n	800eb36 <_dtoa_r+0x3de>
 800eade:	2502      	movs	r5, #2
 800eae0:	e7ef      	b.n	800eac2 <_dtoa_r+0x36a>
 800eae2:	f018 0f01 	tst.w	r8, #1
 800eae6:	d008      	beq.n	800eafa <_dtoa_r+0x3a2>
 800eae8:	4630      	mov	r0, r6
 800eaea:	4639      	mov	r1, r7
 800eaec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800eaf0:	f7f1 fd92 	bl	8000618 <__aeabi_dmul>
 800eaf4:	3501      	adds	r5, #1
 800eaf6:	4606      	mov	r6, r0
 800eaf8:	460f      	mov	r7, r1
 800eafa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eafe:	f109 0908 	add.w	r9, r9, #8
 800eb02:	e7e0      	b.n	800eac6 <_dtoa_r+0x36e>
 800eb04:	f000 809f 	beq.w	800ec46 <_dtoa_r+0x4ee>
 800eb08:	f1cb 0600 	rsb	r6, fp, #0
 800eb0c:	4ba1      	ldr	r3, [pc, #644]	; (800ed94 <_dtoa_r+0x63c>)
 800eb0e:	4fa2      	ldr	r7, [pc, #648]	; (800ed98 <_dtoa_r+0x640>)
 800eb10:	f006 020f 	and.w	r2, r6, #15
 800eb14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1c:	ec51 0b18 	vmov	r0, r1, d8
 800eb20:	f7f1 fd7a 	bl	8000618 <__aeabi_dmul>
 800eb24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb28:	1136      	asrs	r6, r6, #4
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	2502      	movs	r5, #2
 800eb2e:	2e00      	cmp	r6, #0
 800eb30:	d17e      	bne.n	800ec30 <_dtoa_r+0x4d8>
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1d0      	bne.n	800ead8 <_dtoa_r+0x380>
 800eb36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f000 8084 	beq.w	800ec4a <_dtoa_r+0x4f2>
 800eb42:	4b96      	ldr	r3, [pc, #600]	; (800ed9c <_dtoa_r+0x644>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	4640      	mov	r0, r8
 800eb48:	4649      	mov	r1, r9
 800eb4a:	f7f1 ffd7 	bl	8000afc <__aeabi_dcmplt>
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	d07b      	beq.n	800ec4a <_dtoa_r+0x4f2>
 800eb52:	9b04      	ldr	r3, [sp, #16]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d078      	beq.n	800ec4a <_dtoa_r+0x4f2>
 800eb58:	9b01      	ldr	r3, [sp, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	dd39      	ble.n	800ebd2 <_dtoa_r+0x47a>
 800eb5e:	4b90      	ldr	r3, [pc, #576]	; (800eda0 <_dtoa_r+0x648>)
 800eb60:	2200      	movs	r2, #0
 800eb62:	4640      	mov	r0, r8
 800eb64:	4649      	mov	r1, r9
 800eb66:	f7f1 fd57 	bl	8000618 <__aeabi_dmul>
 800eb6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb6e:	9e01      	ldr	r6, [sp, #4]
 800eb70:	f10b 37ff 	add.w	r7, fp, #4294967295
 800eb74:	3501      	adds	r5, #1
 800eb76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	f7f1 fce2 	bl	8000544 <__aeabi_i2d>
 800eb80:	4642      	mov	r2, r8
 800eb82:	464b      	mov	r3, r9
 800eb84:	f7f1 fd48 	bl	8000618 <__aeabi_dmul>
 800eb88:	4b86      	ldr	r3, [pc, #536]	; (800eda4 <_dtoa_r+0x64c>)
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f7f1 fb8e 	bl	80002ac <__adddf3>
 800eb90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800eb94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb98:	9303      	str	r3, [sp, #12]
 800eb9a:	2e00      	cmp	r6, #0
 800eb9c:	d158      	bne.n	800ec50 <_dtoa_r+0x4f8>
 800eb9e:	4b82      	ldr	r3, [pc, #520]	; (800eda8 <_dtoa_r+0x650>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	4640      	mov	r0, r8
 800eba4:	4649      	mov	r1, r9
 800eba6:	f7f1 fb7f 	bl	80002a8 <__aeabi_dsub>
 800ebaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebae:	4680      	mov	r8, r0
 800ebb0:	4689      	mov	r9, r1
 800ebb2:	f7f1 ffc1 	bl	8000b38 <__aeabi_dcmpgt>
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	f040 8296 	bne.w	800f0e8 <_dtoa_r+0x990>
 800ebbc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ebc0:	4640      	mov	r0, r8
 800ebc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebc6:	4649      	mov	r1, r9
 800ebc8:	f7f1 ff98 	bl	8000afc <__aeabi_dcmplt>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	f040 8289 	bne.w	800f0e4 <_dtoa_r+0x98c>
 800ebd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ebd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f2c0 814e 	blt.w	800ee7a <_dtoa_r+0x722>
 800ebde:	f1bb 0f0e 	cmp.w	fp, #14
 800ebe2:	f300 814a 	bgt.w	800ee7a <_dtoa_r+0x722>
 800ebe6:	4b6b      	ldr	r3, [pc, #428]	; (800ed94 <_dtoa_r+0x63c>)
 800ebe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ebec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f280 80dc 	bge.w	800edb0 <_dtoa_r+0x658>
 800ebf8:	9b04      	ldr	r3, [sp, #16]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f300 80d8 	bgt.w	800edb0 <_dtoa_r+0x658>
 800ec00:	f040 826f 	bne.w	800f0e2 <_dtoa_r+0x98a>
 800ec04:	4b68      	ldr	r3, [pc, #416]	; (800eda8 <_dtoa_r+0x650>)
 800ec06:	2200      	movs	r2, #0
 800ec08:	4640      	mov	r0, r8
 800ec0a:	4649      	mov	r1, r9
 800ec0c:	f7f1 fd04 	bl	8000618 <__aeabi_dmul>
 800ec10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec14:	f7f1 ff86 	bl	8000b24 <__aeabi_dcmpge>
 800ec18:	9e04      	ldr	r6, [sp, #16]
 800ec1a:	4637      	mov	r7, r6
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	f040 8245 	bne.w	800f0ac <_dtoa_r+0x954>
 800ec22:	9d00      	ldr	r5, [sp, #0]
 800ec24:	2331      	movs	r3, #49	; 0x31
 800ec26:	f805 3b01 	strb.w	r3, [r5], #1
 800ec2a:	f10b 0b01 	add.w	fp, fp, #1
 800ec2e:	e241      	b.n	800f0b4 <_dtoa_r+0x95c>
 800ec30:	07f2      	lsls	r2, r6, #31
 800ec32:	d505      	bpl.n	800ec40 <_dtoa_r+0x4e8>
 800ec34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec38:	f7f1 fcee 	bl	8000618 <__aeabi_dmul>
 800ec3c:	3501      	adds	r5, #1
 800ec3e:	2301      	movs	r3, #1
 800ec40:	1076      	asrs	r6, r6, #1
 800ec42:	3708      	adds	r7, #8
 800ec44:	e773      	b.n	800eb2e <_dtoa_r+0x3d6>
 800ec46:	2502      	movs	r5, #2
 800ec48:	e775      	b.n	800eb36 <_dtoa_r+0x3de>
 800ec4a:	9e04      	ldr	r6, [sp, #16]
 800ec4c:	465f      	mov	r7, fp
 800ec4e:	e792      	b.n	800eb76 <_dtoa_r+0x41e>
 800ec50:	9900      	ldr	r1, [sp, #0]
 800ec52:	4b50      	ldr	r3, [pc, #320]	; (800ed94 <_dtoa_r+0x63c>)
 800ec54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec58:	4431      	add	r1, r6
 800ec5a:	9102      	str	r1, [sp, #8]
 800ec5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec5e:	eeb0 9a47 	vmov.f32	s18, s14
 800ec62:	eef0 9a67 	vmov.f32	s19, s15
 800ec66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ec6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec6e:	2900      	cmp	r1, #0
 800ec70:	d044      	beq.n	800ecfc <_dtoa_r+0x5a4>
 800ec72:	494e      	ldr	r1, [pc, #312]	; (800edac <_dtoa_r+0x654>)
 800ec74:	2000      	movs	r0, #0
 800ec76:	f7f1 fdf9 	bl	800086c <__aeabi_ddiv>
 800ec7a:	ec53 2b19 	vmov	r2, r3, d9
 800ec7e:	f7f1 fb13 	bl	80002a8 <__aeabi_dsub>
 800ec82:	9d00      	ldr	r5, [sp, #0]
 800ec84:	ec41 0b19 	vmov	d9, r0, r1
 800ec88:	4649      	mov	r1, r9
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	f7f1 ff74 	bl	8000b78 <__aeabi_d2iz>
 800ec90:	4606      	mov	r6, r0
 800ec92:	f7f1 fc57 	bl	8000544 <__aeabi_i2d>
 800ec96:	4602      	mov	r2, r0
 800ec98:	460b      	mov	r3, r1
 800ec9a:	4640      	mov	r0, r8
 800ec9c:	4649      	mov	r1, r9
 800ec9e:	f7f1 fb03 	bl	80002a8 <__aeabi_dsub>
 800eca2:	3630      	adds	r6, #48	; 0x30
 800eca4:	f805 6b01 	strb.w	r6, [r5], #1
 800eca8:	ec53 2b19 	vmov	r2, r3, d9
 800ecac:	4680      	mov	r8, r0
 800ecae:	4689      	mov	r9, r1
 800ecb0:	f7f1 ff24 	bl	8000afc <__aeabi_dcmplt>
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d164      	bne.n	800ed82 <_dtoa_r+0x62a>
 800ecb8:	4642      	mov	r2, r8
 800ecba:	464b      	mov	r3, r9
 800ecbc:	4937      	ldr	r1, [pc, #220]	; (800ed9c <_dtoa_r+0x644>)
 800ecbe:	2000      	movs	r0, #0
 800ecc0:	f7f1 faf2 	bl	80002a8 <__aeabi_dsub>
 800ecc4:	ec53 2b19 	vmov	r2, r3, d9
 800ecc8:	f7f1 ff18 	bl	8000afc <__aeabi_dcmplt>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	f040 80b6 	bne.w	800ee3e <_dtoa_r+0x6e6>
 800ecd2:	9b02      	ldr	r3, [sp, #8]
 800ecd4:	429d      	cmp	r5, r3
 800ecd6:	f43f af7c 	beq.w	800ebd2 <_dtoa_r+0x47a>
 800ecda:	4b31      	ldr	r3, [pc, #196]	; (800eda0 <_dtoa_r+0x648>)
 800ecdc:	ec51 0b19 	vmov	r0, r1, d9
 800ece0:	2200      	movs	r2, #0
 800ece2:	f7f1 fc99 	bl	8000618 <__aeabi_dmul>
 800ece6:	4b2e      	ldr	r3, [pc, #184]	; (800eda0 <_dtoa_r+0x648>)
 800ece8:	ec41 0b19 	vmov	d9, r0, r1
 800ecec:	2200      	movs	r2, #0
 800ecee:	4640      	mov	r0, r8
 800ecf0:	4649      	mov	r1, r9
 800ecf2:	f7f1 fc91 	bl	8000618 <__aeabi_dmul>
 800ecf6:	4680      	mov	r8, r0
 800ecf8:	4689      	mov	r9, r1
 800ecfa:	e7c5      	b.n	800ec88 <_dtoa_r+0x530>
 800ecfc:	ec51 0b17 	vmov	r0, r1, d7
 800ed00:	f7f1 fc8a 	bl	8000618 <__aeabi_dmul>
 800ed04:	9b02      	ldr	r3, [sp, #8]
 800ed06:	9d00      	ldr	r5, [sp, #0]
 800ed08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed0a:	ec41 0b19 	vmov	d9, r0, r1
 800ed0e:	4649      	mov	r1, r9
 800ed10:	4640      	mov	r0, r8
 800ed12:	f7f1 ff31 	bl	8000b78 <__aeabi_d2iz>
 800ed16:	4606      	mov	r6, r0
 800ed18:	f7f1 fc14 	bl	8000544 <__aeabi_i2d>
 800ed1c:	3630      	adds	r6, #48	; 0x30
 800ed1e:	4602      	mov	r2, r0
 800ed20:	460b      	mov	r3, r1
 800ed22:	4640      	mov	r0, r8
 800ed24:	4649      	mov	r1, r9
 800ed26:	f7f1 fabf 	bl	80002a8 <__aeabi_dsub>
 800ed2a:	f805 6b01 	strb.w	r6, [r5], #1
 800ed2e:	9b02      	ldr	r3, [sp, #8]
 800ed30:	429d      	cmp	r5, r3
 800ed32:	4680      	mov	r8, r0
 800ed34:	4689      	mov	r9, r1
 800ed36:	f04f 0200 	mov.w	r2, #0
 800ed3a:	d124      	bne.n	800ed86 <_dtoa_r+0x62e>
 800ed3c:	4b1b      	ldr	r3, [pc, #108]	; (800edac <_dtoa_r+0x654>)
 800ed3e:	ec51 0b19 	vmov	r0, r1, d9
 800ed42:	f7f1 fab3 	bl	80002ac <__adddf3>
 800ed46:	4602      	mov	r2, r0
 800ed48:	460b      	mov	r3, r1
 800ed4a:	4640      	mov	r0, r8
 800ed4c:	4649      	mov	r1, r9
 800ed4e:	f7f1 fef3 	bl	8000b38 <__aeabi_dcmpgt>
 800ed52:	2800      	cmp	r0, #0
 800ed54:	d173      	bne.n	800ee3e <_dtoa_r+0x6e6>
 800ed56:	ec53 2b19 	vmov	r2, r3, d9
 800ed5a:	4914      	ldr	r1, [pc, #80]	; (800edac <_dtoa_r+0x654>)
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	f7f1 faa3 	bl	80002a8 <__aeabi_dsub>
 800ed62:	4602      	mov	r2, r0
 800ed64:	460b      	mov	r3, r1
 800ed66:	4640      	mov	r0, r8
 800ed68:	4649      	mov	r1, r9
 800ed6a:	f7f1 fec7 	bl	8000afc <__aeabi_dcmplt>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	f43f af2f 	beq.w	800ebd2 <_dtoa_r+0x47a>
 800ed74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed76:	1e6b      	subs	r3, r5, #1
 800ed78:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed7e:	2b30      	cmp	r3, #48	; 0x30
 800ed80:	d0f8      	beq.n	800ed74 <_dtoa_r+0x61c>
 800ed82:	46bb      	mov	fp, r7
 800ed84:	e04a      	b.n	800ee1c <_dtoa_r+0x6c4>
 800ed86:	4b06      	ldr	r3, [pc, #24]	; (800eda0 <_dtoa_r+0x648>)
 800ed88:	f7f1 fc46 	bl	8000618 <__aeabi_dmul>
 800ed8c:	4680      	mov	r8, r0
 800ed8e:	4689      	mov	r9, r1
 800ed90:	e7bd      	b.n	800ed0e <_dtoa_r+0x5b6>
 800ed92:	bf00      	nop
 800ed94:	08011240 	.word	0x08011240
 800ed98:	08011218 	.word	0x08011218
 800ed9c:	3ff00000 	.word	0x3ff00000
 800eda0:	40240000 	.word	0x40240000
 800eda4:	401c0000 	.word	0x401c0000
 800eda8:	40140000 	.word	0x40140000
 800edac:	3fe00000 	.word	0x3fe00000
 800edb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800edb4:	9d00      	ldr	r5, [sp, #0]
 800edb6:	4642      	mov	r2, r8
 800edb8:	464b      	mov	r3, r9
 800edba:	4630      	mov	r0, r6
 800edbc:	4639      	mov	r1, r7
 800edbe:	f7f1 fd55 	bl	800086c <__aeabi_ddiv>
 800edc2:	f7f1 fed9 	bl	8000b78 <__aeabi_d2iz>
 800edc6:	9001      	str	r0, [sp, #4]
 800edc8:	f7f1 fbbc 	bl	8000544 <__aeabi_i2d>
 800edcc:	4642      	mov	r2, r8
 800edce:	464b      	mov	r3, r9
 800edd0:	f7f1 fc22 	bl	8000618 <__aeabi_dmul>
 800edd4:	4602      	mov	r2, r0
 800edd6:	460b      	mov	r3, r1
 800edd8:	4630      	mov	r0, r6
 800edda:	4639      	mov	r1, r7
 800eddc:	f7f1 fa64 	bl	80002a8 <__aeabi_dsub>
 800ede0:	9e01      	ldr	r6, [sp, #4]
 800ede2:	9f04      	ldr	r7, [sp, #16]
 800ede4:	3630      	adds	r6, #48	; 0x30
 800ede6:	f805 6b01 	strb.w	r6, [r5], #1
 800edea:	9e00      	ldr	r6, [sp, #0]
 800edec:	1bae      	subs	r6, r5, r6
 800edee:	42b7      	cmp	r7, r6
 800edf0:	4602      	mov	r2, r0
 800edf2:	460b      	mov	r3, r1
 800edf4:	d134      	bne.n	800ee60 <_dtoa_r+0x708>
 800edf6:	f7f1 fa59 	bl	80002ac <__adddf3>
 800edfa:	4642      	mov	r2, r8
 800edfc:	464b      	mov	r3, r9
 800edfe:	4606      	mov	r6, r0
 800ee00:	460f      	mov	r7, r1
 800ee02:	f7f1 fe99 	bl	8000b38 <__aeabi_dcmpgt>
 800ee06:	b9c8      	cbnz	r0, 800ee3c <_dtoa_r+0x6e4>
 800ee08:	4642      	mov	r2, r8
 800ee0a:	464b      	mov	r3, r9
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	4639      	mov	r1, r7
 800ee10:	f7f1 fe6a 	bl	8000ae8 <__aeabi_dcmpeq>
 800ee14:	b110      	cbz	r0, 800ee1c <_dtoa_r+0x6c4>
 800ee16:	9b01      	ldr	r3, [sp, #4]
 800ee18:	07db      	lsls	r3, r3, #31
 800ee1a:	d40f      	bmi.n	800ee3c <_dtoa_r+0x6e4>
 800ee1c:	4651      	mov	r1, sl
 800ee1e:	4620      	mov	r0, r4
 800ee20:	f000 fe82 	bl	800fb28 <_Bfree>
 800ee24:	2300      	movs	r3, #0
 800ee26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee28:	702b      	strb	r3, [r5, #0]
 800ee2a:	f10b 0301 	add.w	r3, fp, #1
 800ee2e:	6013      	str	r3, [r2, #0]
 800ee30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	f43f ace2 	beq.w	800e7fc <_dtoa_r+0xa4>
 800ee38:	601d      	str	r5, [r3, #0]
 800ee3a:	e4df      	b.n	800e7fc <_dtoa_r+0xa4>
 800ee3c:	465f      	mov	r7, fp
 800ee3e:	462b      	mov	r3, r5
 800ee40:	461d      	mov	r5, r3
 800ee42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee46:	2a39      	cmp	r2, #57	; 0x39
 800ee48:	d106      	bne.n	800ee58 <_dtoa_r+0x700>
 800ee4a:	9a00      	ldr	r2, [sp, #0]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d1f7      	bne.n	800ee40 <_dtoa_r+0x6e8>
 800ee50:	9900      	ldr	r1, [sp, #0]
 800ee52:	2230      	movs	r2, #48	; 0x30
 800ee54:	3701      	adds	r7, #1
 800ee56:	700a      	strb	r2, [r1, #0]
 800ee58:	781a      	ldrb	r2, [r3, #0]
 800ee5a:	3201      	adds	r2, #1
 800ee5c:	701a      	strb	r2, [r3, #0]
 800ee5e:	e790      	b.n	800ed82 <_dtoa_r+0x62a>
 800ee60:	4ba3      	ldr	r3, [pc, #652]	; (800f0f0 <_dtoa_r+0x998>)
 800ee62:	2200      	movs	r2, #0
 800ee64:	f7f1 fbd8 	bl	8000618 <__aeabi_dmul>
 800ee68:	2200      	movs	r2, #0
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	4606      	mov	r6, r0
 800ee6e:	460f      	mov	r7, r1
 800ee70:	f7f1 fe3a 	bl	8000ae8 <__aeabi_dcmpeq>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d09e      	beq.n	800edb6 <_dtoa_r+0x65e>
 800ee78:	e7d0      	b.n	800ee1c <_dtoa_r+0x6c4>
 800ee7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee7c:	2a00      	cmp	r2, #0
 800ee7e:	f000 80ca 	beq.w	800f016 <_dtoa_r+0x8be>
 800ee82:	9a07      	ldr	r2, [sp, #28]
 800ee84:	2a01      	cmp	r2, #1
 800ee86:	f300 80ad 	bgt.w	800efe4 <_dtoa_r+0x88c>
 800ee8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee8c:	2a00      	cmp	r2, #0
 800ee8e:	f000 80a5 	beq.w	800efdc <_dtoa_r+0x884>
 800ee92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee96:	9e08      	ldr	r6, [sp, #32]
 800ee98:	9d05      	ldr	r5, [sp, #20]
 800ee9a:	9a05      	ldr	r2, [sp, #20]
 800ee9c:	441a      	add	r2, r3
 800ee9e:	9205      	str	r2, [sp, #20]
 800eea0:	9a06      	ldr	r2, [sp, #24]
 800eea2:	2101      	movs	r1, #1
 800eea4:	441a      	add	r2, r3
 800eea6:	4620      	mov	r0, r4
 800eea8:	9206      	str	r2, [sp, #24]
 800eeaa:	f000 ff3d 	bl	800fd28 <__i2b>
 800eeae:	4607      	mov	r7, r0
 800eeb0:	b165      	cbz	r5, 800eecc <_dtoa_r+0x774>
 800eeb2:	9b06      	ldr	r3, [sp, #24]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	dd09      	ble.n	800eecc <_dtoa_r+0x774>
 800eeb8:	42ab      	cmp	r3, r5
 800eeba:	9a05      	ldr	r2, [sp, #20]
 800eebc:	bfa8      	it	ge
 800eebe:	462b      	movge	r3, r5
 800eec0:	1ad2      	subs	r2, r2, r3
 800eec2:	9205      	str	r2, [sp, #20]
 800eec4:	9a06      	ldr	r2, [sp, #24]
 800eec6:	1aed      	subs	r5, r5, r3
 800eec8:	1ad3      	subs	r3, r2, r3
 800eeca:	9306      	str	r3, [sp, #24]
 800eecc:	9b08      	ldr	r3, [sp, #32]
 800eece:	b1f3      	cbz	r3, 800ef0e <_dtoa_r+0x7b6>
 800eed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	f000 80a3 	beq.w	800f01e <_dtoa_r+0x8c6>
 800eed8:	2e00      	cmp	r6, #0
 800eeda:	dd10      	ble.n	800eefe <_dtoa_r+0x7a6>
 800eedc:	4639      	mov	r1, r7
 800eede:	4632      	mov	r2, r6
 800eee0:	4620      	mov	r0, r4
 800eee2:	f000 ffe1 	bl	800fea8 <__pow5mult>
 800eee6:	4652      	mov	r2, sl
 800eee8:	4601      	mov	r1, r0
 800eeea:	4607      	mov	r7, r0
 800eeec:	4620      	mov	r0, r4
 800eeee:	f000 ff31 	bl	800fd54 <__multiply>
 800eef2:	4651      	mov	r1, sl
 800eef4:	4680      	mov	r8, r0
 800eef6:	4620      	mov	r0, r4
 800eef8:	f000 fe16 	bl	800fb28 <_Bfree>
 800eefc:	46c2      	mov	sl, r8
 800eefe:	9b08      	ldr	r3, [sp, #32]
 800ef00:	1b9a      	subs	r2, r3, r6
 800ef02:	d004      	beq.n	800ef0e <_dtoa_r+0x7b6>
 800ef04:	4651      	mov	r1, sl
 800ef06:	4620      	mov	r0, r4
 800ef08:	f000 ffce 	bl	800fea8 <__pow5mult>
 800ef0c:	4682      	mov	sl, r0
 800ef0e:	2101      	movs	r1, #1
 800ef10:	4620      	mov	r0, r4
 800ef12:	f000 ff09 	bl	800fd28 <__i2b>
 800ef16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	f340 8081 	ble.w	800f022 <_dtoa_r+0x8ca>
 800ef20:	461a      	mov	r2, r3
 800ef22:	4601      	mov	r1, r0
 800ef24:	4620      	mov	r0, r4
 800ef26:	f000 ffbf 	bl	800fea8 <__pow5mult>
 800ef2a:	9b07      	ldr	r3, [sp, #28]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	4606      	mov	r6, r0
 800ef30:	dd7a      	ble.n	800f028 <_dtoa_r+0x8d0>
 800ef32:	f04f 0800 	mov.w	r8, #0
 800ef36:	6933      	ldr	r3, [r6, #16]
 800ef38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ef3c:	6918      	ldr	r0, [r3, #16]
 800ef3e:	f000 fea5 	bl	800fc8c <__hi0bits>
 800ef42:	f1c0 0020 	rsb	r0, r0, #32
 800ef46:	9b06      	ldr	r3, [sp, #24]
 800ef48:	4418      	add	r0, r3
 800ef4a:	f010 001f 	ands.w	r0, r0, #31
 800ef4e:	f000 8094 	beq.w	800f07a <_dtoa_r+0x922>
 800ef52:	f1c0 0320 	rsb	r3, r0, #32
 800ef56:	2b04      	cmp	r3, #4
 800ef58:	f340 8085 	ble.w	800f066 <_dtoa_r+0x90e>
 800ef5c:	9b05      	ldr	r3, [sp, #20]
 800ef5e:	f1c0 001c 	rsb	r0, r0, #28
 800ef62:	4403      	add	r3, r0
 800ef64:	9305      	str	r3, [sp, #20]
 800ef66:	9b06      	ldr	r3, [sp, #24]
 800ef68:	4403      	add	r3, r0
 800ef6a:	4405      	add	r5, r0
 800ef6c:	9306      	str	r3, [sp, #24]
 800ef6e:	9b05      	ldr	r3, [sp, #20]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	dd05      	ble.n	800ef80 <_dtoa_r+0x828>
 800ef74:	4651      	mov	r1, sl
 800ef76:	461a      	mov	r2, r3
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f000 ffef 	bl	800ff5c <__lshift>
 800ef7e:	4682      	mov	sl, r0
 800ef80:	9b06      	ldr	r3, [sp, #24]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	dd05      	ble.n	800ef92 <_dtoa_r+0x83a>
 800ef86:	4631      	mov	r1, r6
 800ef88:	461a      	mov	r2, r3
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f000 ffe6 	bl	800ff5c <__lshift>
 800ef90:	4606      	mov	r6, r0
 800ef92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d072      	beq.n	800f07e <_dtoa_r+0x926>
 800ef98:	4631      	mov	r1, r6
 800ef9a:	4650      	mov	r0, sl
 800ef9c:	f001 f84a 	bl	8010034 <__mcmp>
 800efa0:	2800      	cmp	r0, #0
 800efa2:	da6c      	bge.n	800f07e <_dtoa_r+0x926>
 800efa4:	2300      	movs	r3, #0
 800efa6:	4651      	mov	r1, sl
 800efa8:	220a      	movs	r2, #10
 800efaa:	4620      	mov	r0, r4
 800efac:	f000 fdde 	bl	800fb6c <__multadd>
 800efb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800efb6:	4682      	mov	sl, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f000 81b0 	beq.w	800f31e <_dtoa_r+0xbc6>
 800efbe:	2300      	movs	r3, #0
 800efc0:	4639      	mov	r1, r7
 800efc2:	220a      	movs	r2, #10
 800efc4:	4620      	mov	r0, r4
 800efc6:	f000 fdd1 	bl	800fb6c <__multadd>
 800efca:	9b01      	ldr	r3, [sp, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	4607      	mov	r7, r0
 800efd0:	f300 8096 	bgt.w	800f100 <_dtoa_r+0x9a8>
 800efd4:	9b07      	ldr	r3, [sp, #28]
 800efd6:	2b02      	cmp	r3, #2
 800efd8:	dc59      	bgt.n	800f08e <_dtoa_r+0x936>
 800efda:	e091      	b.n	800f100 <_dtoa_r+0x9a8>
 800efdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800efe2:	e758      	b.n	800ee96 <_dtoa_r+0x73e>
 800efe4:	9b04      	ldr	r3, [sp, #16]
 800efe6:	1e5e      	subs	r6, r3, #1
 800efe8:	9b08      	ldr	r3, [sp, #32]
 800efea:	42b3      	cmp	r3, r6
 800efec:	bfbf      	itttt	lt
 800efee:	9b08      	ldrlt	r3, [sp, #32]
 800eff0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800eff2:	9608      	strlt	r6, [sp, #32]
 800eff4:	1af3      	sublt	r3, r6, r3
 800eff6:	bfb4      	ite	lt
 800eff8:	18d2      	addlt	r2, r2, r3
 800effa:	1b9e      	subge	r6, r3, r6
 800effc:	9b04      	ldr	r3, [sp, #16]
 800effe:	bfbc      	itt	lt
 800f000:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f002:	2600      	movlt	r6, #0
 800f004:	2b00      	cmp	r3, #0
 800f006:	bfb7      	itett	lt
 800f008:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f00c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f010:	1a9d      	sublt	r5, r3, r2
 800f012:	2300      	movlt	r3, #0
 800f014:	e741      	b.n	800ee9a <_dtoa_r+0x742>
 800f016:	9e08      	ldr	r6, [sp, #32]
 800f018:	9d05      	ldr	r5, [sp, #20]
 800f01a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f01c:	e748      	b.n	800eeb0 <_dtoa_r+0x758>
 800f01e:	9a08      	ldr	r2, [sp, #32]
 800f020:	e770      	b.n	800ef04 <_dtoa_r+0x7ac>
 800f022:	9b07      	ldr	r3, [sp, #28]
 800f024:	2b01      	cmp	r3, #1
 800f026:	dc19      	bgt.n	800f05c <_dtoa_r+0x904>
 800f028:	9b02      	ldr	r3, [sp, #8]
 800f02a:	b9bb      	cbnz	r3, 800f05c <_dtoa_r+0x904>
 800f02c:	9b03      	ldr	r3, [sp, #12]
 800f02e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f032:	b99b      	cbnz	r3, 800f05c <_dtoa_r+0x904>
 800f034:	9b03      	ldr	r3, [sp, #12]
 800f036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f03a:	0d1b      	lsrs	r3, r3, #20
 800f03c:	051b      	lsls	r3, r3, #20
 800f03e:	b183      	cbz	r3, 800f062 <_dtoa_r+0x90a>
 800f040:	9b05      	ldr	r3, [sp, #20]
 800f042:	3301      	adds	r3, #1
 800f044:	9305      	str	r3, [sp, #20]
 800f046:	9b06      	ldr	r3, [sp, #24]
 800f048:	3301      	adds	r3, #1
 800f04a:	9306      	str	r3, [sp, #24]
 800f04c:	f04f 0801 	mov.w	r8, #1
 800f050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f052:	2b00      	cmp	r3, #0
 800f054:	f47f af6f 	bne.w	800ef36 <_dtoa_r+0x7de>
 800f058:	2001      	movs	r0, #1
 800f05a:	e774      	b.n	800ef46 <_dtoa_r+0x7ee>
 800f05c:	f04f 0800 	mov.w	r8, #0
 800f060:	e7f6      	b.n	800f050 <_dtoa_r+0x8f8>
 800f062:	4698      	mov	r8, r3
 800f064:	e7f4      	b.n	800f050 <_dtoa_r+0x8f8>
 800f066:	d082      	beq.n	800ef6e <_dtoa_r+0x816>
 800f068:	9a05      	ldr	r2, [sp, #20]
 800f06a:	331c      	adds	r3, #28
 800f06c:	441a      	add	r2, r3
 800f06e:	9205      	str	r2, [sp, #20]
 800f070:	9a06      	ldr	r2, [sp, #24]
 800f072:	441a      	add	r2, r3
 800f074:	441d      	add	r5, r3
 800f076:	9206      	str	r2, [sp, #24]
 800f078:	e779      	b.n	800ef6e <_dtoa_r+0x816>
 800f07a:	4603      	mov	r3, r0
 800f07c:	e7f4      	b.n	800f068 <_dtoa_r+0x910>
 800f07e:	9b04      	ldr	r3, [sp, #16]
 800f080:	2b00      	cmp	r3, #0
 800f082:	dc37      	bgt.n	800f0f4 <_dtoa_r+0x99c>
 800f084:	9b07      	ldr	r3, [sp, #28]
 800f086:	2b02      	cmp	r3, #2
 800f088:	dd34      	ble.n	800f0f4 <_dtoa_r+0x99c>
 800f08a:	9b04      	ldr	r3, [sp, #16]
 800f08c:	9301      	str	r3, [sp, #4]
 800f08e:	9b01      	ldr	r3, [sp, #4]
 800f090:	b963      	cbnz	r3, 800f0ac <_dtoa_r+0x954>
 800f092:	4631      	mov	r1, r6
 800f094:	2205      	movs	r2, #5
 800f096:	4620      	mov	r0, r4
 800f098:	f000 fd68 	bl	800fb6c <__multadd>
 800f09c:	4601      	mov	r1, r0
 800f09e:	4606      	mov	r6, r0
 800f0a0:	4650      	mov	r0, sl
 800f0a2:	f000 ffc7 	bl	8010034 <__mcmp>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	f73f adbb 	bgt.w	800ec22 <_dtoa_r+0x4ca>
 800f0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0ae:	9d00      	ldr	r5, [sp, #0]
 800f0b0:	ea6f 0b03 	mvn.w	fp, r3
 800f0b4:	f04f 0800 	mov.w	r8, #0
 800f0b8:	4631      	mov	r1, r6
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f000 fd34 	bl	800fb28 <_Bfree>
 800f0c0:	2f00      	cmp	r7, #0
 800f0c2:	f43f aeab 	beq.w	800ee1c <_dtoa_r+0x6c4>
 800f0c6:	f1b8 0f00 	cmp.w	r8, #0
 800f0ca:	d005      	beq.n	800f0d8 <_dtoa_r+0x980>
 800f0cc:	45b8      	cmp	r8, r7
 800f0ce:	d003      	beq.n	800f0d8 <_dtoa_r+0x980>
 800f0d0:	4641      	mov	r1, r8
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f000 fd28 	bl	800fb28 <_Bfree>
 800f0d8:	4639      	mov	r1, r7
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f000 fd24 	bl	800fb28 <_Bfree>
 800f0e0:	e69c      	b.n	800ee1c <_dtoa_r+0x6c4>
 800f0e2:	2600      	movs	r6, #0
 800f0e4:	4637      	mov	r7, r6
 800f0e6:	e7e1      	b.n	800f0ac <_dtoa_r+0x954>
 800f0e8:	46bb      	mov	fp, r7
 800f0ea:	4637      	mov	r7, r6
 800f0ec:	e599      	b.n	800ec22 <_dtoa_r+0x4ca>
 800f0ee:	bf00      	nop
 800f0f0:	40240000 	.word	0x40240000
 800f0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	f000 80c8 	beq.w	800f28c <_dtoa_r+0xb34>
 800f0fc:	9b04      	ldr	r3, [sp, #16]
 800f0fe:	9301      	str	r3, [sp, #4]
 800f100:	2d00      	cmp	r5, #0
 800f102:	dd05      	ble.n	800f110 <_dtoa_r+0x9b8>
 800f104:	4639      	mov	r1, r7
 800f106:	462a      	mov	r2, r5
 800f108:	4620      	mov	r0, r4
 800f10a:	f000 ff27 	bl	800ff5c <__lshift>
 800f10e:	4607      	mov	r7, r0
 800f110:	f1b8 0f00 	cmp.w	r8, #0
 800f114:	d05b      	beq.n	800f1ce <_dtoa_r+0xa76>
 800f116:	6879      	ldr	r1, [r7, #4]
 800f118:	4620      	mov	r0, r4
 800f11a:	f000 fcc5 	bl	800faa8 <_Balloc>
 800f11e:	4605      	mov	r5, r0
 800f120:	b928      	cbnz	r0, 800f12e <_dtoa_r+0x9d6>
 800f122:	4b83      	ldr	r3, [pc, #524]	; (800f330 <_dtoa_r+0xbd8>)
 800f124:	4602      	mov	r2, r0
 800f126:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f12a:	f7ff bb2e 	b.w	800e78a <_dtoa_r+0x32>
 800f12e:	693a      	ldr	r2, [r7, #16]
 800f130:	3202      	adds	r2, #2
 800f132:	0092      	lsls	r2, r2, #2
 800f134:	f107 010c 	add.w	r1, r7, #12
 800f138:	300c      	adds	r0, #12
 800f13a:	f7ff fa64 	bl	800e606 <memcpy>
 800f13e:	2201      	movs	r2, #1
 800f140:	4629      	mov	r1, r5
 800f142:	4620      	mov	r0, r4
 800f144:	f000 ff0a 	bl	800ff5c <__lshift>
 800f148:	9b00      	ldr	r3, [sp, #0]
 800f14a:	3301      	adds	r3, #1
 800f14c:	9304      	str	r3, [sp, #16]
 800f14e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f152:	4413      	add	r3, r2
 800f154:	9308      	str	r3, [sp, #32]
 800f156:	9b02      	ldr	r3, [sp, #8]
 800f158:	f003 0301 	and.w	r3, r3, #1
 800f15c:	46b8      	mov	r8, r7
 800f15e:	9306      	str	r3, [sp, #24]
 800f160:	4607      	mov	r7, r0
 800f162:	9b04      	ldr	r3, [sp, #16]
 800f164:	4631      	mov	r1, r6
 800f166:	3b01      	subs	r3, #1
 800f168:	4650      	mov	r0, sl
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	f7ff fa6a 	bl	800e644 <quorem>
 800f170:	4641      	mov	r1, r8
 800f172:	9002      	str	r0, [sp, #8]
 800f174:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f178:	4650      	mov	r0, sl
 800f17a:	f000 ff5b 	bl	8010034 <__mcmp>
 800f17e:	463a      	mov	r2, r7
 800f180:	9005      	str	r0, [sp, #20]
 800f182:	4631      	mov	r1, r6
 800f184:	4620      	mov	r0, r4
 800f186:	f000 ff71 	bl	801006c <__mdiff>
 800f18a:	68c2      	ldr	r2, [r0, #12]
 800f18c:	4605      	mov	r5, r0
 800f18e:	bb02      	cbnz	r2, 800f1d2 <_dtoa_r+0xa7a>
 800f190:	4601      	mov	r1, r0
 800f192:	4650      	mov	r0, sl
 800f194:	f000 ff4e 	bl	8010034 <__mcmp>
 800f198:	4602      	mov	r2, r0
 800f19a:	4629      	mov	r1, r5
 800f19c:	4620      	mov	r0, r4
 800f19e:	9209      	str	r2, [sp, #36]	; 0x24
 800f1a0:	f000 fcc2 	bl	800fb28 <_Bfree>
 800f1a4:	9b07      	ldr	r3, [sp, #28]
 800f1a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1a8:	9d04      	ldr	r5, [sp, #16]
 800f1aa:	ea43 0102 	orr.w	r1, r3, r2
 800f1ae:	9b06      	ldr	r3, [sp, #24]
 800f1b0:	4319      	orrs	r1, r3
 800f1b2:	d110      	bne.n	800f1d6 <_dtoa_r+0xa7e>
 800f1b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f1b8:	d029      	beq.n	800f20e <_dtoa_r+0xab6>
 800f1ba:	9b05      	ldr	r3, [sp, #20]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	dd02      	ble.n	800f1c6 <_dtoa_r+0xa6e>
 800f1c0:	9b02      	ldr	r3, [sp, #8]
 800f1c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f1c6:	9b01      	ldr	r3, [sp, #4]
 800f1c8:	f883 9000 	strb.w	r9, [r3]
 800f1cc:	e774      	b.n	800f0b8 <_dtoa_r+0x960>
 800f1ce:	4638      	mov	r0, r7
 800f1d0:	e7ba      	b.n	800f148 <_dtoa_r+0x9f0>
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	e7e1      	b.n	800f19a <_dtoa_r+0xa42>
 800f1d6:	9b05      	ldr	r3, [sp, #20]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	db04      	blt.n	800f1e6 <_dtoa_r+0xa8e>
 800f1dc:	9907      	ldr	r1, [sp, #28]
 800f1de:	430b      	orrs	r3, r1
 800f1e0:	9906      	ldr	r1, [sp, #24]
 800f1e2:	430b      	orrs	r3, r1
 800f1e4:	d120      	bne.n	800f228 <_dtoa_r+0xad0>
 800f1e6:	2a00      	cmp	r2, #0
 800f1e8:	dded      	ble.n	800f1c6 <_dtoa_r+0xa6e>
 800f1ea:	4651      	mov	r1, sl
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f000 feb4 	bl	800ff5c <__lshift>
 800f1f4:	4631      	mov	r1, r6
 800f1f6:	4682      	mov	sl, r0
 800f1f8:	f000 ff1c 	bl	8010034 <__mcmp>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	dc03      	bgt.n	800f208 <_dtoa_r+0xab0>
 800f200:	d1e1      	bne.n	800f1c6 <_dtoa_r+0xa6e>
 800f202:	f019 0f01 	tst.w	r9, #1
 800f206:	d0de      	beq.n	800f1c6 <_dtoa_r+0xa6e>
 800f208:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f20c:	d1d8      	bne.n	800f1c0 <_dtoa_r+0xa68>
 800f20e:	9a01      	ldr	r2, [sp, #4]
 800f210:	2339      	movs	r3, #57	; 0x39
 800f212:	7013      	strb	r3, [r2, #0]
 800f214:	462b      	mov	r3, r5
 800f216:	461d      	mov	r5, r3
 800f218:	3b01      	subs	r3, #1
 800f21a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f21e:	2a39      	cmp	r2, #57	; 0x39
 800f220:	d06c      	beq.n	800f2fc <_dtoa_r+0xba4>
 800f222:	3201      	adds	r2, #1
 800f224:	701a      	strb	r2, [r3, #0]
 800f226:	e747      	b.n	800f0b8 <_dtoa_r+0x960>
 800f228:	2a00      	cmp	r2, #0
 800f22a:	dd07      	ble.n	800f23c <_dtoa_r+0xae4>
 800f22c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f230:	d0ed      	beq.n	800f20e <_dtoa_r+0xab6>
 800f232:	9a01      	ldr	r2, [sp, #4]
 800f234:	f109 0301 	add.w	r3, r9, #1
 800f238:	7013      	strb	r3, [r2, #0]
 800f23a:	e73d      	b.n	800f0b8 <_dtoa_r+0x960>
 800f23c:	9b04      	ldr	r3, [sp, #16]
 800f23e:	9a08      	ldr	r2, [sp, #32]
 800f240:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f244:	4293      	cmp	r3, r2
 800f246:	d043      	beq.n	800f2d0 <_dtoa_r+0xb78>
 800f248:	4651      	mov	r1, sl
 800f24a:	2300      	movs	r3, #0
 800f24c:	220a      	movs	r2, #10
 800f24e:	4620      	mov	r0, r4
 800f250:	f000 fc8c 	bl	800fb6c <__multadd>
 800f254:	45b8      	cmp	r8, r7
 800f256:	4682      	mov	sl, r0
 800f258:	f04f 0300 	mov.w	r3, #0
 800f25c:	f04f 020a 	mov.w	r2, #10
 800f260:	4641      	mov	r1, r8
 800f262:	4620      	mov	r0, r4
 800f264:	d107      	bne.n	800f276 <_dtoa_r+0xb1e>
 800f266:	f000 fc81 	bl	800fb6c <__multadd>
 800f26a:	4680      	mov	r8, r0
 800f26c:	4607      	mov	r7, r0
 800f26e:	9b04      	ldr	r3, [sp, #16]
 800f270:	3301      	adds	r3, #1
 800f272:	9304      	str	r3, [sp, #16]
 800f274:	e775      	b.n	800f162 <_dtoa_r+0xa0a>
 800f276:	f000 fc79 	bl	800fb6c <__multadd>
 800f27a:	4639      	mov	r1, r7
 800f27c:	4680      	mov	r8, r0
 800f27e:	2300      	movs	r3, #0
 800f280:	220a      	movs	r2, #10
 800f282:	4620      	mov	r0, r4
 800f284:	f000 fc72 	bl	800fb6c <__multadd>
 800f288:	4607      	mov	r7, r0
 800f28a:	e7f0      	b.n	800f26e <_dtoa_r+0xb16>
 800f28c:	9b04      	ldr	r3, [sp, #16]
 800f28e:	9301      	str	r3, [sp, #4]
 800f290:	9d00      	ldr	r5, [sp, #0]
 800f292:	4631      	mov	r1, r6
 800f294:	4650      	mov	r0, sl
 800f296:	f7ff f9d5 	bl	800e644 <quorem>
 800f29a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f29e:	9b00      	ldr	r3, [sp, #0]
 800f2a0:	f805 9b01 	strb.w	r9, [r5], #1
 800f2a4:	1aea      	subs	r2, r5, r3
 800f2a6:	9b01      	ldr	r3, [sp, #4]
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	dd07      	ble.n	800f2bc <_dtoa_r+0xb64>
 800f2ac:	4651      	mov	r1, sl
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	220a      	movs	r2, #10
 800f2b2:	4620      	mov	r0, r4
 800f2b4:	f000 fc5a 	bl	800fb6c <__multadd>
 800f2b8:	4682      	mov	sl, r0
 800f2ba:	e7ea      	b.n	800f292 <_dtoa_r+0xb3a>
 800f2bc:	9b01      	ldr	r3, [sp, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	bfc8      	it	gt
 800f2c2:	461d      	movgt	r5, r3
 800f2c4:	9b00      	ldr	r3, [sp, #0]
 800f2c6:	bfd8      	it	le
 800f2c8:	2501      	movle	r5, #1
 800f2ca:	441d      	add	r5, r3
 800f2cc:	f04f 0800 	mov.w	r8, #0
 800f2d0:	4651      	mov	r1, sl
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	f000 fe41 	bl	800ff5c <__lshift>
 800f2da:	4631      	mov	r1, r6
 800f2dc:	4682      	mov	sl, r0
 800f2de:	f000 fea9 	bl	8010034 <__mcmp>
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	dc96      	bgt.n	800f214 <_dtoa_r+0xabc>
 800f2e6:	d102      	bne.n	800f2ee <_dtoa_r+0xb96>
 800f2e8:	f019 0f01 	tst.w	r9, #1
 800f2ec:	d192      	bne.n	800f214 <_dtoa_r+0xabc>
 800f2ee:	462b      	mov	r3, r5
 800f2f0:	461d      	mov	r5, r3
 800f2f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2f6:	2a30      	cmp	r2, #48	; 0x30
 800f2f8:	d0fa      	beq.n	800f2f0 <_dtoa_r+0xb98>
 800f2fa:	e6dd      	b.n	800f0b8 <_dtoa_r+0x960>
 800f2fc:	9a00      	ldr	r2, [sp, #0]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d189      	bne.n	800f216 <_dtoa_r+0xabe>
 800f302:	f10b 0b01 	add.w	fp, fp, #1
 800f306:	2331      	movs	r3, #49	; 0x31
 800f308:	e796      	b.n	800f238 <_dtoa_r+0xae0>
 800f30a:	4b0a      	ldr	r3, [pc, #40]	; (800f334 <_dtoa_r+0xbdc>)
 800f30c:	f7ff ba99 	b.w	800e842 <_dtoa_r+0xea>
 800f310:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f312:	2b00      	cmp	r3, #0
 800f314:	f47f aa6d 	bne.w	800e7f2 <_dtoa_r+0x9a>
 800f318:	4b07      	ldr	r3, [pc, #28]	; (800f338 <_dtoa_r+0xbe0>)
 800f31a:	f7ff ba92 	b.w	800e842 <_dtoa_r+0xea>
 800f31e:	9b01      	ldr	r3, [sp, #4]
 800f320:	2b00      	cmp	r3, #0
 800f322:	dcb5      	bgt.n	800f290 <_dtoa_r+0xb38>
 800f324:	9b07      	ldr	r3, [sp, #28]
 800f326:	2b02      	cmp	r3, #2
 800f328:	f73f aeb1 	bgt.w	800f08e <_dtoa_r+0x936>
 800f32c:	e7b0      	b.n	800f290 <_dtoa_r+0xb38>
 800f32e:	bf00      	nop
 800f330:	0801114d 	.word	0x0801114d
 800f334:	080110a0 	.word	0x080110a0
 800f338:	080110d1 	.word	0x080110d1

0800f33c <_free_r>:
 800f33c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f33e:	2900      	cmp	r1, #0
 800f340:	d044      	beq.n	800f3cc <_free_r+0x90>
 800f342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f346:	9001      	str	r0, [sp, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	f1a1 0404 	sub.w	r4, r1, #4
 800f34e:	bfb8      	it	lt
 800f350:	18e4      	addlt	r4, r4, r3
 800f352:	f7fd faef 	bl	800c934 <__malloc_lock>
 800f356:	4a1e      	ldr	r2, [pc, #120]	; (800f3d0 <_free_r+0x94>)
 800f358:	9801      	ldr	r0, [sp, #4]
 800f35a:	6813      	ldr	r3, [r2, #0]
 800f35c:	b933      	cbnz	r3, 800f36c <_free_r+0x30>
 800f35e:	6063      	str	r3, [r4, #4]
 800f360:	6014      	str	r4, [r2, #0]
 800f362:	b003      	add	sp, #12
 800f364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f368:	f7fd baea 	b.w	800c940 <__malloc_unlock>
 800f36c:	42a3      	cmp	r3, r4
 800f36e:	d908      	bls.n	800f382 <_free_r+0x46>
 800f370:	6825      	ldr	r5, [r4, #0]
 800f372:	1961      	adds	r1, r4, r5
 800f374:	428b      	cmp	r3, r1
 800f376:	bf01      	itttt	eq
 800f378:	6819      	ldreq	r1, [r3, #0]
 800f37a:	685b      	ldreq	r3, [r3, #4]
 800f37c:	1949      	addeq	r1, r1, r5
 800f37e:	6021      	streq	r1, [r4, #0]
 800f380:	e7ed      	b.n	800f35e <_free_r+0x22>
 800f382:	461a      	mov	r2, r3
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	b10b      	cbz	r3, 800f38c <_free_r+0x50>
 800f388:	42a3      	cmp	r3, r4
 800f38a:	d9fa      	bls.n	800f382 <_free_r+0x46>
 800f38c:	6811      	ldr	r1, [r2, #0]
 800f38e:	1855      	adds	r5, r2, r1
 800f390:	42a5      	cmp	r5, r4
 800f392:	d10b      	bne.n	800f3ac <_free_r+0x70>
 800f394:	6824      	ldr	r4, [r4, #0]
 800f396:	4421      	add	r1, r4
 800f398:	1854      	adds	r4, r2, r1
 800f39a:	42a3      	cmp	r3, r4
 800f39c:	6011      	str	r1, [r2, #0]
 800f39e:	d1e0      	bne.n	800f362 <_free_r+0x26>
 800f3a0:	681c      	ldr	r4, [r3, #0]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	6053      	str	r3, [r2, #4]
 800f3a6:	440c      	add	r4, r1
 800f3a8:	6014      	str	r4, [r2, #0]
 800f3aa:	e7da      	b.n	800f362 <_free_r+0x26>
 800f3ac:	d902      	bls.n	800f3b4 <_free_r+0x78>
 800f3ae:	230c      	movs	r3, #12
 800f3b0:	6003      	str	r3, [r0, #0]
 800f3b2:	e7d6      	b.n	800f362 <_free_r+0x26>
 800f3b4:	6825      	ldr	r5, [r4, #0]
 800f3b6:	1961      	adds	r1, r4, r5
 800f3b8:	428b      	cmp	r3, r1
 800f3ba:	bf04      	itt	eq
 800f3bc:	6819      	ldreq	r1, [r3, #0]
 800f3be:	685b      	ldreq	r3, [r3, #4]
 800f3c0:	6063      	str	r3, [r4, #4]
 800f3c2:	bf04      	itt	eq
 800f3c4:	1949      	addeq	r1, r1, r5
 800f3c6:	6021      	streq	r1, [r4, #0]
 800f3c8:	6054      	str	r4, [r2, #4]
 800f3ca:	e7ca      	b.n	800f362 <_free_r+0x26>
 800f3cc:	b003      	add	sp, #12
 800f3ce:	bd30      	pop	{r4, r5, pc}
 800f3d0:	20000d68 	.word	0x20000d68

0800f3d4 <rshift>:
 800f3d4:	6903      	ldr	r3, [r0, #16]
 800f3d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f3da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f3e2:	f100 0414 	add.w	r4, r0, #20
 800f3e6:	dd45      	ble.n	800f474 <rshift+0xa0>
 800f3e8:	f011 011f 	ands.w	r1, r1, #31
 800f3ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f3f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f3f4:	d10c      	bne.n	800f410 <rshift+0x3c>
 800f3f6:	f100 0710 	add.w	r7, r0, #16
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	42b1      	cmp	r1, r6
 800f3fe:	d334      	bcc.n	800f46a <rshift+0x96>
 800f400:	1a9b      	subs	r3, r3, r2
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	1eea      	subs	r2, r5, #3
 800f406:	4296      	cmp	r6, r2
 800f408:	bf38      	it	cc
 800f40a:	2300      	movcc	r3, #0
 800f40c:	4423      	add	r3, r4
 800f40e:	e015      	b.n	800f43c <rshift+0x68>
 800f410:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f414:	f1c1 0820 	rsb	r8, r1, #32
 800f418:	40cf      	lsrs	r7, r1
 800f41a:	f105 0e04 	add.w	lr, r5, #4
 800f41e:	46a1      	mov	r9, r4
 800f420:	4576      	cmp	r6, lr
 800f422:	46f4      	mov	ip, lr
 800f424:	d815      	bhi.n	800f452 <rshift+0x7e>
 800f426:	1a9a      	subs	r2, r3, r2
 800f428:	0092      	lsls	r2, r2, #2
 800f42a:	3a04      	subs	r2, #4
 800f42c:	3501      	adds	r5, #1
 800f42e:	42ae      	cmp	r6, r5
 800f430:	bf38      	it	cc
 800f432:	2200      	movcc	r2, #0
 800f434:	18a3      	adds	r3, r4, r2
 800f436:	50a7      	str	r7, [r4, r2]
 800f438:	b107      	cbz	r7, 800f43c <rshift+0x68>
 800f43a:	3304      	adds	r3, #4
 800f43c:	1b1a      	subs	r2, r3, r4
 800f43e:	42a3      	cmp	r3, r4
 800f440:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f444:	bf08      	it	eq
 800f446:	2300      	moveq	r3, #0
 800f448:	6102      	str	r2, [r0, #16]
 800f44a:	bf08      	it	eq
 800f44c:	6143      	streq	r3, [r0, #20]
 800f44e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f452:	f8dc c000 	ldr.w	ip, [ip]
 800f456:	fa0c fc08 	lsl.w	ip, ip, r8
 800f45a:	ea4c 0707 	orr.w	r7, ip, r7
 800f45e:	f849 7b04 	str.w	r7, [r9], #4
 800f462:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f466:	40cf      	lsrs	r7, r1
 800f468:	e7da      	b.n	800f420 <rshift+0x4c>
 800f46a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f46e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f472:	e7c3      	b.n	800f3fc <rshift+0x28>
 800f474:	4623      	mov	r3, r4
 800f476:	e7e1      	b.n	800f43c <rshift+0x68>

0800f478 <__hexdig_fun>:
 800f478:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f47c:	2b09      	cmp	r3, #9
 800f47e:	d802      	bhi.n	800f486 <__hexdig_fun+0xe>
 800f480:	3820      	subs	r0, #32
 800f482:	b2c0      	uxtb	r0, r0
 800f484:	4770      	bx	lr
 800f486:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f48a:	2b05      	cmp	r3, #5
 800f48c:	d801      	bhi.n	800f492 <__hexdig_fun+0x1a>
 800f48e:	3847      	subs	r0, #71	; 0x47
 800f490:	e7f7      	b.n	800f482 <__hexdig_fun+0xa>
 800f492:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f496:	2b05      	cmp	r3, #5
 800f498:	d801      	bhi.n	800f49e <__hexdig_fun+0x26>
 800f49a:	3827      	subs	r0, #39	; 0x27
 800f49c:	e7f1      	b.n	800f482 <__hexdig_fun+0xa>
 800f49e:	2000      	movs	r0, #0
 800f4a0:	4770      	bx	lr
	...

0800f4a4 <__gethex>:
 800f4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a8:	4617      	mov	r7, r2
 800f4aa:	680a      	ldr	r2, [r1, #0]
 800f4ac:	b085      	sub	sp, #20
 800f4ae:	f102 0b02 	add.w	fp, r2, #2
 800f4b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f4b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f4ba:	4681      	mov	r9, r0
 800f4bc:	468a      	mov	sl, r1
 800f4be:	9302      	str	r3, [sp, #8]
 800f4c0:	32fe      	adds	r2, #254	; 0xfe
 800f4c2:	eb02 030b 	add.w	r3, r2, fp
 800f4c6:	46d8      	mov	r8, fp
 800f4c8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f4cc:	9301      	str	r3, [sp, #4]
 800f4ce:	2830      	cmp	r0, #48	; 0x30
 800f4d0:	d0f7      	beq.n	800f4c2 <__gethex+0x1e>
 800f4d2:	f7ff ffd1 	bl	800f478 <__hexdig_fun>
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	d138      	bne.n	800f54e <__gethex+0xaa>
 800f4dc:	49a7      	ldr	r1, [pc, #668]	; (800f77c <__gethex+0x2d8>)
 800f4de:	2201      	movs	r2, #1
 800f4e0:	4640      	mov	r0, r8
 800f4e2:	f7fe fff6 	bl	800e4d2 <strncmp>
 800f4e6:	4606      	mov	r6, r0
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	d169      	bne.n	800f5c0 <__gethex+0x11c>
 800f4ec:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f4f0:	465d      	mov	r5, fp
 800f4f2:	f7ff ffc1 	bl	800f478 <__hexdig_fun>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d064      	beq.n	800f5c4 <__gethex+0x120>
 800f4fa:	465a      	mov	r2, fp
 800f4fc:	7810      	ldrb	r0, [r2, #0]
 800f4fe:	2830      	cmp	r0, #48	; 0x30
 800f500:	4690      	mov	r8, r2
 800f502:	f102 0201 	add.w	r2, r2, #1
 800f506:	d0f9      	beq.n	800f4fc <__gethex+0x58>
 800f508:	f7ff ffb6 	bl	800f478 <__hexdig_fun>
 800f50c:	2301      	movs	r3, #1
 800f50e:	fab0 f480 	clz	r4, r0
 800f512:	0964      	lsrs	r4, r4, #5
 800f514:	465e      	mov	r6, fp
 800f516:	9301      	str	r3, [sp, #4]
 800f518:	4642      	mov	r2, r8
 800f51a:	4615      	mov	r5, r2
 800f51c:	3201      	adds	r2, #1
 800f51e:	7828      	ldrb	r0, [r5, #0]
 800f520:	f7ff ffaa 	bl	800f478 <__hexdig_fun>
 800f524:	2800      	cmp	r0, #0
 800f526:	d1f8      	bne.n	800f51a <__gethex+0x76>
 800f528:	4994      	ldr	r1, [pc, #592]	; (800f77c <__gethex+0x2d8>)
 800f52a:	2201      	movs	r2, #1
 800f52c:	4628      	mov	r0, r5
 800f52e:	f7fe ffd0 	bl	800e4d2 <strncmp>
 800f532:	b978      	cbnz	r0, 800f554 <__gethex+0xb0>
 800f534:	b946      	cbnz	r6, 800f548 <__gethex+0xa4>
 800f536:	1c6e      	adds	r6, r5, #1
 800f538:	4632      	mov	r2, r6
 800f53a:	4615      	mov	r5, r2
 800f53c:	3201      	adds	r2, #1
 800f53e:	7828      	ldrb	r0, [r5, #0]
 800f540:	f7ff ff9a 	bl	800f478 <__hexdig_fun>
 800f544:	2800      	cmp	r0, #0
 800f546:	d1f8      	bne.n	800f53a <__gethex+0x96>
 800f548:	1b73      	subs	r3, r6, r5
 800f54a:	009e      	lsls	r6, r3, #2
 800f54c:	e004      	b.n	800f558 <__gethex+0xb4>
 800f54e:	2400      	movs	r4, #0
 800f550:	4626      	mov	r6, r4
 800f552:	e7e1      	b.n	800f518 <__gethex+0x74>
 800f554:	2e00      	cmp	r6, #0
 800f556:	d1f7      	bne.n	800f548 <__gethex+0xa4>
 800f558:	782b      	ldrb	r3, [r5, #0]
 800f55a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f55e:	2b50      	cmp	r3, #80	; 0x50
 800f560:	d13d      	bne.n	800f5de <__gethex+0x13a>
 800f562:	786b      	ldrb	r3, [r5, #1]
 800f564:	2b2b      	cmp	r3, #43	; 0x2b
 800f566:	d02f      	beq.n	800f5c8 <__gethex+0x124>
 800f568:	2b2d      	cmp	r3, #45	; 0x2d
 800f56a:	d031      	beq.n	800f5d0 <__gethex+0x12c>
 800f56c:	1c69      	adds	r1, r5, #1
 800f56e:	f04f 0b00 	mov.w	fp, #0
 800f572:	7808      	ldrb	r0, [r1, #0]
 800f574:	f7ff ff80 	bl	800f478 <__hexdig_fun>
 800f578:	1e42      	subs	r2, r0, #1
 800f57a:	b2d2      	uxtb	r2, r2
 800f57c:	2a18      	cmp	r2, #24
 800f57e:	d82e      	bhi.n	800f5de <__gethex+0x13a>
 800f580:	f1a0 0210 	sub.w	r2, r0, #16
 800f584:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f588:	f7ff ff76 	bl	800f478 <__hexdig_fun>
 800f58c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f590:	fa5f fc8c 	uxtb.w	ip, ip
 800f594:	f1bc 0f18 	cmp.w	ip, #24
 800f598:	d91d      	bls.n	800f5d6 <__gethex+0x132>
 800f59a:	f1bb 0f00 	cmp.w	fp, #0
 800f59e:	d000      	beq.n	800f5a2 <__gethex+0xfe>
 800f5a0:	4252      	negs	r2, r2
 800f5a2:	4416      	add	r6, r2
 800f5a4:	f8ca 1000 	str.w	r1, [sl]
 800f5a8:	b1dc      	cbz	r4, 800f5e2 <__gethex+0x13e>
 800f5aa:	9b01      	ldr	r3, [sp, #4]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	bf14      	ite	ne
 800f5b0:	f04f 0800 	movne.w	r8, #0
 800f5b4:	f04f 0806 	moveq.w	r8, #6
 800f5b8:	4640      	mov	r0, r8
 800f5ba:	b005      	add	sp, #20
 800f5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c0:	4645      	mov	r5, r8
 800f5c2:	4626      	mov	r6, r4
 800f5c4:	2401      	movs	r4, #1
 800f5c6:	e7c7      	b.n	800f558 <__gethex+0xb4>
 800f5c8:	f04f 0b00 	mov.w	fp, #0
 800f5cc:	1ca9      	adds	r1, r5, #2
 800f5ce:	e7d0      	b.n	800f572 <__gethex+0xce>
 800f5d0:	f04f 0b01 	mov.w	fp, #1
 800f5d4:	e7fa      	b.n	800f5cc <__gethex+0x128>
 800f5d6:	230a      	movs	r3, #10
 800f5d8:	fb03 0002 	mla	r0, r3, r2, r0
 800f5dc:	e7d0      	b.n	800f580 <__gethex+0xdc>
 800f5de:	4629      	mov	r1, r5
 800f5e0:	e7e0      	b.n	800f5a4 <__gethex+0x100>
 800f5e2:	eba5 0308 	sub.w	r3, r5, r8
 800f5e6:	3b01      	subs	r3, #1
 800f5e8:	4621      	mov	r1, r4
 800f5ea:	2b07      	cmp	r3, #7
 800f5ec:	dc0a      	bgt.n	800f604 <__gethex+0x160>
 800f5ee:	4648      	mov	r0, r9
 800f5f0:	f000 fa5a 	bl	800faa8 <_Balloc>
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	b940      	cbnz	r0, 800f60a <__gethex+0x166>
 800f5f8:	4b61      	ldr	r3, [pc, #388]	; (800f780 <__gethex+0x2dc>)
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	21e4      	movs	r1, #228	; 0xe4
 800f5fe:	4861      	ldr	r0, [pc, #388]	; (800f784 <__gethex+0x2e0>)
 800f600:	f001 f9b2 	bl	8010968 <__assert_func>
 800f604:	3101      	adds	r1, #1
 800f606:	105b      	asrs	r3, r3, #1
 800f608:	e7ef      	b.n	800f5ea <__gethex+0x146>
 800f60a:	f100 0a14 	add.w	sl, r0, #20
 800f60e:	2300      	movs	r3, #0
 800f610:	495a      	ldr	r1, [pc, #360]	; (800f77c <__gethex+0x2d8>)
 800f612:	f8cd a004 	str.w	sl, [sp, #4]
 800f616:	469b      	mov	fp, r3
 800f618:	45a8      	cmp	r8, r5
 800f61a:	d342      	bcc.n	800f6a2 <__gethex+0x1fe>
 800f61c:	9801      	ldr	r0, [sp, #4]
 800f61e:	f840 bb04 	str.w	fp, [r0], #4
 800f622:	eba0 000a 	sub.w	r0, r0, sl
 800f626:	1080      	asrs	r0, r0, #2
 800f628:	6120      	str	r0, [r4, #16]
 800f62a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f62e:	4658      	mov	r0, fp
 800f630:	f000 fb2c 	bl	800fc8c <__hi0bits>
 800f634:	683d      	ldr	r5, [r7, #0]
 800f636:	eba8 0000 	sub.w	r0, r8, r0
 800f63a:	42a8      	cmp	r0, r5
 800f63c:	dd59      	ble.n	800f6f2 <__gethex+0x24e>
 800f63e:	eba0 0805 	sub.w	r8, r0, r5
 800f642:	4641      	mov	r1, r8
 800f644:	4620      	mov	r0, r4
 800f646:	f000 febb 	bl	80103c0 <__any_on>
 800f64a:	4683      	mov	fp, r0
 800f64c:	b1b8      	cbz	r0, 800f67e <__gethex+0x1da>
 800f64e:	f108 33ff 	add.w	r3, r8, #4294967295
 800f652:	1159      	asrs	r1, r3, #5
 800f654:	f003 021f 	and.w	r2, r3, #31
 800f658:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f65c:	f04f 0b01 	mov.w	fp, #1
 800f660:	fa0b f202 	lsl.w	r2, fp, r2
 800f664:	420a      	tst	r2, r1
 800f666:	d00a      	beq.n	800f67e <__gethex+0x1da>
 800f668:	455b      	cmp	r3, fp
 800f66a:	dd06      	ble.n	800f67a <__gethex+0x1d6>
 800f66c:	f1a8 0102 	sub.w	r1, r8, #2
 800f670:	4620      	mov	r0, r4
 800f672:	f000 fea5 	bl	80103c0 <__any_on>
 800f676:	2800      	cmp	r0, #0
 800f678:	d138      	bne.n	800f6ec <__gethex+0x248>
 800f67a:	f04f 0b02 	mov.w	fp, #2
 800f67e:	4641      	mov	r1, r8
 800f680:	4620      	mov	r0, r4
 800f682:	f7ff fea7 	bl	800f3d4 <rshift>
 800f686:	4446      	add	r6, r8
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	42b3      	cmp	r3, r6
 800f68c:	da41      	bge.n	800f712 <__gethex+0x26e>
 800f68e:	4621      	mov	r1, r4
 800f690:	4648      	mov	r0, r9
 800f692:	f000 fa49 	bl	800fb28 <_Bfree>
 800f696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f698:	2300      	movs	r3, #0
 800f69a:	6013      	str	r3, [r2, #0]
 800f69c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f6a0:	e78a      	b.n	800f5b8 <__gethex+0x114>
 800f6a2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f6a6:	2a2e      	cmp	r2, #46	; 0x2e
 800f6a8:	d014      	beq.n	800f6d4 <__gethex+0x230>
 800f6aa:	2b20      	cmp	r3, #32
 800f6ac:	d106      	bne.n	800f6bc <__gethex+0x218>
 800f6ae:	9b01      	ldr	r3, [sp, #4]
 800f6b0:	f843 bb04 	str.w	fp, [r3], #4
 800f6b4:	f04f 0b00 	mov.w	fp, #0
 800f6b8:	9301      	str	r3, [sp, #4]
 800f6ba:	465b      	mov	r3, fp
 800f6bc:	7828      	ldrb	r0, [r5, #0]
 800f6be:	9303      	str	r3, [sp, #12]
 800f6c0:	f7ff feda 	bl	800f478 <__hexdig_fun>
 800f6c4:	9b03      	ldr	r3, [sp, #12]
 800f6c6:	f000 000f 	and.w	r0, r0, #15
 800f6ca:	4098      	lsls	r0, r3
 800f6cc:	ea4b 0b00 	orr.w	fp, fp, r0
 800f6d0:	3304      	adds	r3, #4
 800f6d2:	e7a1      	b.n	800f618 <__gethex+0x174>
 800f6d4:	45a8      	cmp	r8, r5
 800f6d6:	d8e8      	bhi.n	800f6aa <__gethex+0x206>
 800f6d8:	2201      	movs	r2, #1
 800f6da:	4628      	mov	r0, r5
 800f6dc:	9303      	str	r3, [sp, #12]
 800f6de:	f7fe fef8 	bl	800e4d2 <strncmp>
 800f6e2:	4926      	ldr	r1, [pc, #152]	; (800f77c <__gethex+0x2d8>)
 800f6e4:	9b03      	ldr	r3, [sp, #12]
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d1df      	bne.n	800f6aa <__gethex+0x206>
 800f6ea:	e795      	b.n	800f618 <__gethex+0x174>
 800f6ec:	f04f 0b03 	mov.w	fp, #3
 800f6f0:	e7c5      	b.n	800f67e <__gethex+0x1da>
 800f6f2:	da0b      	bge.n	800f70c <__gethex+0x268>
 800f6f4:	eba5 0800 	sub.w	r8, r5, r0
 800f6f8:	4621      	mov	r1, r4
 800f6fa:	4642      	mov	r2, r8
 800f6fc:	4648      	mov	r0, r9
 800f6fe:	f000 fc2d 	bl	800ff5c <__lshift>
 800f702:	eba6 0608 	sub.w	r6, r6, r8
 800f706:	4604      	mov	r4, r0
 800f708:	f100 0a14 	add.w	sl, r0, #20
 800f70c:	f04f 0b00 	mov.w	fp, #0
 800f710:	e7ba      	b.n	800f688 <__gethex+0x1e4>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	42b3      	cmp	r3, r6
 800f716:	dd73      	ble.n	800f800 <__gethex+0x35c>
 800f718:	1b9e      	subs	r6, r3, r6
 800f71a:	42b5      	cmp	r5, r6
 800f71c:	dc34      	bgt.n	800f788 <__gethex+0x2e4>
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2b02      	cmp	r3, #2
 800f722:	d023      	beq.n	800f76c <__gethex+0x2c8>
 800f724:	2b03      	cmp	r3, #3
 800f726:	d025      	beq.n	800f774 <__gethex+0x2d0>
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d115      	bne.n	800f758 <__gethex+0x2b4>
 800f72c:	42b5      	cmp	r5, r6
 800f72e:	d113      	bne.n	800f758 <__gethex+0x2b4>
 800f730:	2d01      	cmp	r5, #1
 800f732:	d10b      	bne.n	800f74c <__gethex+0x2a8>
 800f734:	9a02      	ldr	r2, [sp, #8]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6013      	str	r3, [r2, #0]
 800f73a:	2301      	movs	r3, #1
 800f73c:	6123      	str	r3, [r4, #16]
 800f73e:	f8ca 3000 	str.w	r3, [sl]
 800f742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f744:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f748:	601c      	str	r4, [r3, #0]
 800f74a:	e735      	b.n	800f5b8 <__gethex+0x114>
 800f74c:	1e69      	subs	r1, r5, #1
 800f74e:	4620      	mov	r0, r4
 800f750:	f000 fe36 	bl	80103c0 <__any_on>
 800f754:	2800      	cmp	r0, #0
 800f756:	d1ed      	bne.n	800f734 <__gethex+0x290>
 800f758:	4621      	mov	r1, r4
 800f75a:	4648      	mov	r0, r9
 800f75c:	f000 f9e4 	bl	800fb28 <_Bfree>
 800f760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f762:	2300      	movs	r3, #0
 800f764:	6013      	str	r3, [r2, #0]
 800f766:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f76a:	e725      	b.n	800f5b8 <__gethex+0x114>
 800f76c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d1f2      	bne.n	800f758 <__gethex+0x2b4>
 800f772:	e7df      	b.n	800f734 <__gethex+0x290>
 800f774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1dc      	bne.n	800f734 <__gethex+0x290>
 800f77a:	e7ed      	b.n	800f758 <__gethex+0x2b4>
 800f77c:	0801103c 	.word	0x0801103c
 800f780:	0801114d 	.word	0x0801114d
 800f784:	0801115e 	.word	0x0801115e
 800f788:	f106 38ff 	add.w	r8, r6, #4294967295
 800f78c:	f1bb 0f00 	cmp.w	fp, #0
 800f790:	d133      	bne.n	800f7fa <__gethex+0x356>
 800f792:	f1b8 0f00 	cmp.w	r8, #0
 800f796:	d004      	beq.n	800f7a2 <__gethex+0x2fe>
 800f798:	4641      	mov	r1, r8
 800f79a:	4620      	mov	r0, r4
 800f79c:	f000 fe10 	bl	80103c0 <__any_on>
 800f7a0:	4683      	mov	fp, r0
 800f7a2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f7ac:	f008 081f 	and.w	r8, r8, #31
 800f7b0:	fa03 f308 	lsl.w	r3, r3, r8
 800f7b4:	4213      	tst	r3, r2
 800f7b6:	4631      	mov	r1, r6
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	bf18      	it	ne
 800f7bc:	f04b 0b02 	orrne.w	fp, fp, #2
 800f7c0:	1bad      	subs	r5, r5, r6
 800f7c2:	f7ff fe07 	bl	800f3d4 <rshift>
 800f7c6:	687e      	ldr	r6, [r7, #4]
 800f7c8:	f04f 0802 	mov.w	r8, #2
 800f7cc:	f1bb 0f00 	cmp.w	fp, #0
 800f7d0:	d04a      	beq.n	800f868 <__gethex+0x3c4>
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	d016      	beq.n	800f806 <__gethex+0x362>
 800f7d8:	2b03      	cmp	r3, #3
 800f7da:	d018      	beq.n	800f80e <__gethex+0x36a>
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d109      	bne.n	800f7f4 <__gethex+0x350>
 800f7e0:	f01b 0f02 	tst.w	fp, #2
 800f7e4:	d006      	beq.n	800f7f4 <__gethex+0x350>
 800f7e6:	f8da 3000 	ldr.w	r3, [sl]
 800f7ea:	ea4b 0b03 	orr.w	fp, fp, r3
 800f7ee:	f01b 0f01 	tst.w	fp, #1
 800f7f2:	d10f      	bne.n	800f814 <__gethex+0x370>
 800f7f4:	f048 0810 	orr.w	r8, r8, #16
 800f7f8:	e036      	b.n	800f868 <__gethex+0x3c4>
 800f7fa:	f04f 0b01 	mov.w	fp, #1
 800f7fe:	e7d0      	b.n	800f7a2 <__gethex+0x2fe>
 800f800:	f04f 0801 	mov.w	r8, #1
 800f804:	e7e2      	b.n	800f7cc <__gethex+0x328>
 800f806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f808:	f1c3 0301 	rsb	r3, r3, #1
 800f80c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f80e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f810:	2b00      	cmp	r3, #0
 800f812:	d0ef      	beq.n	800f7f4 <__gethex+0x350>
 800f814:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f818:	f104 0214 	add.w	r2, r4, #20
 800f81c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f820:	9301      	str	r3, [sp, #4]
 800f822:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f826:	2300      	movs	r3, #0
 800f828:	4694      	mov	ip, r2
 800f82a:	f852 1b04 	ldr.w	r1, [r2], #4
 800f82e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f832:	d01e      	beq.n	800f872 <__gethex+0x3ce>
 800f834:	3101      	adds	r1, #1
 800f836:	f8cc 1000 	str.w	r1, [ip]
 800f83a:	f1b8 0f02 	cmp.w	r8, #2
 800f83e:	f104 0214 	add.w	r2, r4, #20
 800f842:	d13d      	bne.n	800f8c0 <__gethex+0x41c>
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	3b01      	subs	r3, #1
 800f848:	42ab      	cmp	r3, r5
 800f84a:	d10b      	bne.n	800f864 <__gethex+0x3c0>
 800f84c:	1169      	asrs	r1, r5, #5
 800f84e:	2301      	movs	r3, #1
 800f850:	f005 051f 	and.w	r5, r5, #31
 800f854:	fa03 f505 	lsl.w	r5, r3, r5
 800f858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f85c:	421d      	tst	r5, r3
 800f85e:	bf18      	it	ne
 800f860:	f04f 0801 	movne.w	r8, #1
 800f864:	f048 0820 	orr.w	r8, r8, #32
 800f868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f86a:	601c      	str	r4, [r3, #0]
 800f86c:	9b02      	ldr	r3, [sp, #8]
 800f86e:	601e      	str	r6, [r3, #0]
 800f870:	e6a2      	b.n	800f5b8 <__gethex+0x114>
 800f872:	4290      	cmp	r0, r2
 800f874:	f842 3c04 	str.w	r3, [r2, #-4]
 800f878:	d8d6      	bhi.n	800f828 <__gethex+0x384>
 800f87a:	68a2      	ldr	r2, [r4, #8]
 800f87c:	4593      	cmp	fp, r2
 800f87e:	db17      	blt.n	800f8b0 <__gethex+0x40c>
 800f880:	6861      	ldr	r1, [r4, #4]
 800f882:	4648      	mov	r0, r9
 800f884:	3101      	adds	r1, #1
 800f886:	f000 f90f 	bl	800faa8 <_Balloc>
 800f88a:	4682      	mov	sl, r0
 800f88c:	b918      	cbnz	r0, 800f896 <__gethex+0x3f2>
 800f88e:	4b1b      	ldr	r3, [pc, #108]	; (800f8fc <__gethex+0x458>)
 800f890:	4602      	mov	r2, r0
 800f892:	2184      	movs	r1, #132	; 0x84
 800f894:	e6b3      	b.n	800f5fe <__gethex+0x15a>
 800f896:	6922      	ldr	r2, [r4, #16]
 800f898:	3202      	adds	r2, #2
 800f89a:	f104 010c 	add.w	r1, r4, #12
 800f89e:	0092      	lsls	r2, r2, #2
 800f8a0:	300c      	adds	r0, #12
 800f8a2:	f7fe feb0 	bl	800e606 <memcpy>
 800f8a6:	4621      	mov	r1, r4
 800f8a8:	4648      	mov	r0, r9
 800f8aa:	f000 f93d 	bl	800fb28 <_Bfree>
 800f8ae:	4654      	mov	r4, sl
 800f8b0:	6922      	ldr	r2, [r4, #16]
 800f8b2:	1c51      	adds	r1, r2, #1
 800f8b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f8b8:	6121      	str	r1, [r4, #16]
 800f8ba:	2101      	movs	r1, #1
 800f8bc:	6151      	str	r1, [r2, #20]
 800f8be:	e7bc      	b.n	800f83a <__gethex+0x396>
 800f8c0:	6921      	ldr	r1, [r4, #16]
 800f8c2:	4559      	cmp	r1, fp
 800f8c4:	dd0b      	ble.n	800f8de <__gethex+0x43a>
 800f8c6:	2101      	movs	r1, #1
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	f7ff fd83 	bl	800f3d4 <rshift>
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	3601      	adds	r6, #1
 800f8d2:	42b3      	cmp	r3, r6
 800f8d4:	f6ff aedb 	blt.w	800f68e <__gethex+0x1ea>
 800f8d8:	f04f 0801 	mov.w	r8, #1
 800f8dc:	e7c2      	b.n	800f864 <__gethex+0x3c0>
 800f8de:	f015 051f 	ands.w	r5, r5, #31
 800f8e2:	d0f9      	beq.n	800f8d8 <__gethex+0x434>
 800f8e4:	9b01      	ldr	r3, [sp, #4]
 800f8e6:	441a      	add	r2, r3
 800f8e8:	f1c5 0520 	rsb	r5, r5, #32
 800f8ec:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f8f0:	f000 f9cc 	bl	800fc8c <__hi0bits>
 800f8f4:	42a8      	cmp	r0, r5
 800f8f6:	dbe6      	blt.n	800f8c6 <__gethex+0x422>
 800f8f8:	e7ee      	b.n	800f8d8 <__gethex+0x434>
 800f8fa:	bf00      	nop
 800f8fc:	0801114d 	.word	0x0801114d

0800f900 <L_shift>:
 800f900:	f1c2 0208 	rsb	r2, r2, #8
 800f904:	0092      	lsls	r2, r2, #2
 800f906:	b570      	push	{r4, r5, r6, lr}
 800f908:	f1c2 0620 	rsb	r6, r2, #32
 800f90c:	6843      	ldr	r3, [r0, #4]
 800f90e:	6804      	ldr	r4, [r0, #0]
 800f910:	fa03 f506 	lsl.w	r5, r3, r6
 800f914:	432c      	orrs	r4, r5
 800f916:	40d3      	lsrs	r3, r2
 800f918:	6004      	str	r4, [r0, #0]
 800f91a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f91e:	4288      	cmp	r0, r1
 800f920:	d3f4      	bcc.n	800f90c <L_shift+0xc>
 800f922:	bd70      	pop	{r4, r5, r6, pc}

0800f924 <__match>:
 800f924:	b530      	push	{r4, r5, lr}
 800f926:	6803      	ldr	r3, [r0, #0]
 800f928:	3301      	adds	r3, #1
 800f92a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f92e:	b914      	cbnz	r4, 800f936 <__match+0x12>
 800f930:	6003      	str	r3, [r0, #0]
 800f932:	2001      	movs	r0, #1
 800f934:	bd30      	pop	{r4, r5, pc}
 800f936:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f93a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f93e:	2d19      	cmp	r5, #25
 800f940:	bf98      	it	ls
 800f942:	3220      	addls	r2, #32
 800f944:	42a2      	cmp	r2, r4
 800f946:	d0f0      	beq.n	800f92a <__match+0x6>
 800f948:	2000      	movs	r0, #0
 800f94a:	e7f3      	b.n	800f934 <__match+0x10>

0800f94c <__hexnan>:
 800f94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f950:	680b      	ldr	r3, [r1, #0]
 800f952:	6801      	ldr	r1, [r0, #0]
 800f954:	115e      	asrs	r6, r3, #5
 800f956:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f95a:	f013 031f 	ands.w	r3, r3, #31
 800f95e:	b087      	sub	sp, #28
 800f960:	bf18      	it	ne
 800f962:	3604      	addne	r6, #4
 800f964:	2500      	movs	r5, #0
 800f966:	1f37      	subs	r7, r6, #4
 800f968:	4682      	mov	sl, r0
 800f96a:	4690      	mov	r8, r2
 800f96c:	9301      	str	r3, [sp, #4]
 800f96e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f972:	46b9      	mov	r9, r7
 800f974:	463c      	mov	r4, r7
 800f976:	9502      	str	r5, [sp, #8]
 800f978:	46ab      	mov	fp, r5
 800f97a:	784a      	ldrb	r2, [r1, #1]
 800f97c:	1c4b      	adds	r3, r1, #1
 800f97e:	9303      	str	r3, [sp, #12]
 800f980:	b342      	cbz	r2, 800f9d4 <__hexnan+0x88>
 800f982:	4610      	mov	r0, r2
 800f984:	9105      	str	r1, [sp, #20]
 800f986:	9204      	str	r2, [sp, #16]
 800f988:	f7ff fd76 	bl	800f478 <__hexdig_fun>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d14f      	bne.n	800fa30 <__hexnan+0xe4>
 800f990:	9a04      	ldr	r2, [sp, #16]
 800f992:	9905      	ldr	r1, [sp, #20]
 800f994:	2a20      	cmp	r2, #32
 800f996:	d818      	bhi.n	800f9ca <__hexnan+0x7e>
 800f998:	9b02      	ldr	r3, [sp, #8]
 800f99a:	459b      	cmp	fp, r3
 800f99c:	dd13      	ble.n	800f9c6 <__hexnan+0x7a>
 800f99e:	454c      	cmp	r4, r9
 800f9a0:	d206      	bcs.n	800f9b0 <__hexnan+0x64>
 800f9a2:	2d07      	cmp	r5, #7
 800f9a4:	dc04      	bgt.n	800f9b0 <__hexnan+0x64>
 800f9a6:	462a      	mov	r2, r5
 800f9a8:	4649      	mov	r1, r9
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	f7ff ffa8 	bl	800f900 <L_shift>
 800f9b0:	4544      	cmp	r4, r8
 800f9b2:	d950      	bls.n	800fa56 <__hexnan+0x10a>
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f1a4 0904 	sub.w	r9, r4, #4
 800f9ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9be:	f8cd b008 	str.w	fp, [sp, #8]
 800f9c2:	464c      	mov	r4, r9
 800f9c4:	461d      	mov	r5, r3
 800f9c6:	9903      	ldr	r1, [sp, #12]
 800f9c8:	e7d7      	b.n	800f97a <__hexnan+0x2e>
 800f9ca:	2a29      	cmp	r2, #41	; 0x29
 800f9cc:	d155      	bne.n	800fa7a <__hexnan+0x12e>
 800f9ce:	3102      	adds	r1, #2
 800f9d0:	f8ca 1000 	str.w	r1, [sl]
 800f9d4:	f1bb 0f00 	cmp.w	fp, #0
 800f9d8:	d04f      	beq.n	800fa7a <__hexnan+0x12e>
 800f9da:	454c      	cmp	r4, r9
 800f9dc:	d206      	bcs.n	800f9ec <__hexnan+0xa0>
 800f9de:	2d07      	cmp	r5, #7
 800f9e0:	dc04      	bgt.n	800f9ec <__hexnan+0xa0>
 800f9e2:	462a      	mov	r2, r5
 800f9e4:	4649      	mov	r1, r9
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	f7ff ff8a 	bl	800f900 <L_shift>
 800f9ec:	4544      	cmp	r4, r8
 800f9ee:	d934      	bls.n	800fa5a <__hexnan+0x10e>
 800f9f0:	f1a8 0204 	sub.w	r2, r8, #4
 800f9f4:	4623      	mov	r3, r4
 800f9f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800f9fa:	f842 1f04 	str.w	r1, [r2, #4]!
 800f9fe:	429f      	cmp	r7, r3
 800fa00:	d2f9      	bcs.n	800f9f6 <__hexnan+0xaa>
 800fa02:	1b3b      	subs	r3, r7, r4
 800fa04:	f023 0303 	bic.w	r3, r3, #3
 800fa08:	3304      	adds	r3, #4
 800fa0a:	3e03      	subs	r6, #3
 800fa0c:	3401      	adds	r4, #1
 800fa0e:	42a6      	cmp	r6, r4
 800fa10:	bf38      	it	cc
 800fa12:	2304      	movcc	r3, #4
 800fa14:	4443      	add	r3, r8
 800fa16:	2200      	movs	r2, #0
 800fa18:	f843 2b04 	str.w	r2, [r3], #4
 800fa1c:	429f      	cmp	r7, r3
 800fa1e:	d2fb      	bcs.n	800fa18 <__hexnan+0xcc>
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	b91b      	cbnz	r3, 800fa2c <__hexnan+0xe0>
 800fa24:	4547      	cmp	r7, r8
 800fa26:	d126      	bne.n	800fa76 <__hexnan+0x12a>
 800fa28:	2301      	movs	r3, #1
 800fa2a:	603b      	str	r3, [r7, #0]
 800fa2c:	2005      	movs	r0, #5
 800fa2e:	e025      	b.n	800fa7c <__hexnan+0x130>
 800fa30:	3501      	adds	r5, #1
 800fa32:	2d08      	cmp	r5, #8
 800fa34:	f10b 0b01 	add.w	fp, fp, #1
 800fa38:	dd06      	ble.n	800fa48 <__hexnan+0xfc>
 800fa3a:	4544      	cmp	r4, r8
 800fa3c:	d9c3      	bls.n	800f9c6 <__hexnan+0x7a>
 800fa3e:	2300      	movs	r3, #0
 800fa40:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa44:	2501      	movs	r5, #1
 800fa46:	3c04      	subs	r4, #4
 800fa48:	6822      	ldr	r2, [r4, #0]
 800fa4a:	f000 000f 	and.w	r0, r0, #15
 800fa4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fa52:	6020      	str	r0, [r4, #0]
 800fa54:	e7b7      	b.n	800f9c6 <__hexnan+0x7a>
 800fa56:	2508      	movs	r5, #8
 800fa58:	e7b5      	b.n	800f9c6 <__hexnan+0x7a>
 800fa5a:	9b01      	ldr	r3, [sp, #4]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d0df      	beq.n	800fa20 <__hexnan+0xd4>
 800fa60:	f1c3 0320 	rsb	r3, r3, #32
 800fa64:	f04f 32ff 	mov.w	r2, #4294967295
 800fa68:	40da      	lsrs	r2, r3
 800fa6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fa6e:	4013      	ands	r3, r2
 800fa70:	f846 3c04 	str.w	r3, [r6, #-4]
 800fa74:	e7d4      	b.n	800fa20 <__hexnan+0xd4>
 800fa76:	3f04      	subs	r7, #4
 800fa78:	e7d2      	b.n	800fa20 <__hexnan+0xd4>
 800fa7a:	2004      	movs	r0, #4
 800fa7c:	b007      	add	sp, #28
 800fa7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa82 <__ascii_mbtowc>:
 800fa82:	b082      	sub	sp, #8
 800fa84:	b901      	cbnz	r1, 800fa88 <__ascii_mbtowc+0x6>
 800fa86:	a901      	add	r1, sp, #4
 800fa88:	b142      	cbz	r2, 800fa9c <__ascii_mbtowc+0x1a>
 800fa8a:	b14b      	cbz	r3, 800faa0 <__ascii_mbtowc+0x1e>
 800fa8c:	7813      	ldrb	r3, [r2, #0]
 800fa8e:	600b      	str	r3, [r1, #0]
 800fa90:	7812      	ldrb	r2, [r2, #0]
 800fa92:	1e10      	subs	r0, r2, #0
 800fa94:	bf18      	it	ne
 800fa96:	2001      	movne	r0, #1
 800fa98:	b002      	add	sp, #8
 800fa9a:	4770      	bx	lr
 800fa9c:	4610      	mov	r0, r2
 800fa9e:	e7fb      	b.n	800fa98 <__ascii_mbtowc+0x16>
 800faa0:	f06f 0001 	mvn.w	r0, #1
 800faa4:	e7f8      	b.n	800fa98 <__ascii_mbtowc+0x16>
	...

0800faa8 <_Balloc>:
 800faa8:	b570      	push	{r4, r5, r6, lr}
 800faaa:	69c6      	ldr	r6, [r0, #28]
 800faac:	4604      	mov	r4, r0
 800faae:	460d      	mov	r5, r1
 800fab0:	b976      	cbnz	r6, 800fad0 <_Balloc+0x28>
 800fab2:	2010      	movs	r0, #16
 800fab4:	f7fc fe8e 	bl	800c7d4 <malloc>
 800fab8:	4602      	mov	r2, r0
 800faba:	61e0      	str	r0, [r4, #28]
 800fabc:	b920      	cbnz	r0, 800fac8 <_Balloc+0x20>
 800fabe:	4b18      	ldr	r3, [pc, #96]	; (800fb20 <_Balloc+0x78>)
 800fac0:	4818      	ldr	r0, [pc, #96]	; (800fb24 <_Balloc+0x7c>)
 800fac2:	216b      	movs	r1, #107	; 0x6b
 800fac4:	f000 ff50 	bl	8010968 <__assert_func>
 800fac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800facc:	6006      	str	r6, [r0, #0]
 800face:	60c6      	str	r6, [r0, #12]
 800fad0:	69e6      	ldr	r6, [r4, #28]
 800fad2:	68f3      	ldr	r3, [r6, #12]
 800fad4:	b183      	cbz	r3, 800faf8 <_Balloc+0x50>
 800fad6:	69e3      	ldr	r3, [r4, #28]
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fade:	b9b8      	cbnz	r0, 800fb10 <_Balloc+0x68>
 800fae0:	2101      	movs	r1, #1
 800fae2:	fa01 f605 	lsl.w	r6, r1, r5
 800fae6:	1d72      	adds	r2, r6, #5
 800fae8:	0092      	lsls	r2, r2, #2
 800faea:	4620      	mov	r0, r4
 800faec:	f000 ff5a 	bl	80109a4 <_calloc_r>
 800faf0:	b160      	cbz	r0, 800fb0c <_Balloc+0x64>
 800faf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800faf6:	e00e      	b.n	800fb16 <_Balloc+0x6e>
 800faf8:	2221      	movs	r2, #33	; 0x21
 800fafa:	2104      	movs	r1, #4
 800fafc:	4620      	mov	r0, r4
 800fafe:	f000 ff51 	bl	80109a4 <_calloc_r>
 800fb02:	69e3      	ldr	r3, [r4, #28]
 800fb04:	60f0      	str	r0, [r6, #12]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d1e4      	bne.n	800fad6 <_Balloc+0x2e>
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	bd70      	pop	{r4, r5, r6, pc}
 800fb10:	6802      	ldr	r2, [r0, #0]
 800fb12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb16:	2300      	movs	r3, #0
 800fb18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb1c:	e7f7      	b.n	800fb0e <_Balloc+0x66>
 800fb1e:	bf00      	nop
 800fb20:	080110de 	.word	0x080110de
 800fb24:	080111be 	.word	0x080111be

0800fb28 <_Bfree>:
 800fb28:	b570      	push	{r4, r5, r6, lr}
 800fb2a:	69c6      	ldr	r6, [r0, #28]
 800fb2c:	4605      	mov	r5, r0
 800fb2e:	460c      	mov	r4, r1
 800fb30:	b976      	cbnz	r6, 800fb50 <_Bfree+0x28>
 800fb32:	2010      	movs	r0, #16
 800fb34:	f7fc fe4e 	bl	800c7d4 <malloc>
 800fb38:	4602      	mov	r2, r0
 800fb3a:	61e8      	str	r0, [r5, #28]
 800fb3c:	b920      	cbnz	r0, 800fb48 <_Bfree+0x20>
 800fb3e:	4b09      	ldr	r3, [pc, #36]	; (800fb64 <_Bfree+0x3c>)
 800fb40:	4809      	ldr	r0, [pc, #36]	; (800fb68 <_Bfree+0x40>)
 800fb42:	218f      	movs	r1, #143	; 0x8f
 800fb44:	f000 ff10 	bl	8010968 <__assert_func>
 800fb48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb4c:	6006      	str	r6, [r0, #0]
 800fb4e:	60c6      	str	r6, [r0, #12]
 800fb50:	b13c      	cbz	r4, 800fb62 <_Bfree+0x3a>
 800fb52:	69eb      	ldr	r3, [r5, #28]
 800fb54:	6862      	ldr	r2, [r4, #4]
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb5c:	6021      	str	r1, [r4, #0]
 800fb5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb62:	bd70      	pop	{r4, r5, r6, pc}
 800fb64:	080110de 	.word	0x080110de
 800fb68:	080111be 	.word	0x080111be

0800fb6c <__multadd>:
 800fb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb70:	690d      	ldr	r5, [r1, #16]
 800fb72:	4607      	mov	r7, r0
 800fb74:	460c      	mov	r4, r1
 800fb76:	461e      	mov	r6, r3
 800fb78:	f101 0c14 	add.w	ip, r1, #20
 800fb7c:	2000      	movs	r0, #0
 800fb7e:	f8dc 3000 	ldr.w	r3, [ip]
 800fb82:	b299      	uxth	r1, r3
 800fb84:	fb02 6101 	mla	r1, r2, r1, r6
 800fb88:	0c1e      	lsrs	r6, r3, #16
 800fb8a:	0c0b      	lsrs	r3, r1, #16
 800fb8c:	fb02 3306 	mla	r3, r2, r6, r3
 800fb90:	b289      	uxth	r1, r1
 800fb92:	3001      	adds	r0, #1
 800fb94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fb98:	4285      	cmp	r5, r0
 800fb9a:	f84c 1b04 	str.w	r1, [ip], #4
 800fb9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fba2:	dcec      	bgt.n	800fb7e <__multadd+0x12>
 800fba4:	b30e      	cbz	r6, 800fbea <__multadd+0x7e>
 800fba6:	68a3      	ldr	r3, [r4, #8]
 800fba8:	42ab      	cmp	r3, r5
 800fbaa:	dc19      	bgt.n	800fbe0 <__multadd+0x74>
 800fbac:	6861      	ldr	r1, [r4, #4]
 800fbae:	4638      	mov	r0, r7
 800fbb0:	3101      	adds	r1, #1
 800fbb2:	f7ff ff79 	bl	800faa8 <_Balloc>
 800fbb6:	4680      	mov	r8, r0
 800fbb8:	b928      	cbnz	r0, 800fbc6 <__multadd+0x5a>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	4b0c      	ldr	r3, [pc, #48]	; (800fbf0 <__multadd+0x84>)
 800fbbe:	480d      	ldr	r0, [pc, #52]	; (800fbf4 <__multadd+0x88>)
 800fbc0:	21ba      	movs	r1, #186	; 0xba
 800fbc2:	f000 fed1 	bl	8010968 <__assert_func>
 800fbc6:	6922      	ldr	r2, [r4, #16]
 800fbc8:	3202      	adds	r2, #2
 800fbca:	f104 010c 	add.w	r1, r4, #12
 800fbce:	0092      	lsls	r2, r2, #2
 800fbd0:	300c      	adds	r0, #12
 800fbd2:	f7fe fd18 	bl	800e606 <memcpy>
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	4638      	mov	r0, r7
 800fbda:	f7ff ffa5 	bl	800fb28 <_Bfree>
 800fbde:	4644      	mov	r4, r8
 800fbe0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fbe4:	3501      	adds	r5, #1
 800fbe6:	615e      	str	r6, [r3, #20]
 800fbe8:	6125      	str	r5, [r4, #16]
 800fbea:	4620      	mov	r0, r4
 800fbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbf0:	0801114d 	.word	0x0801114d
 800fbf4:	080111be 	.word	0x080111be

0800fbf8 <__s2b>:
 800fbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbfc:	460c      	mov	r4, r1
 800fbfe:	4615      	mov	r5, r2
 800fc00:	461f      	mov	r7, r3
 800fc02:	2209      	movs	r2, #9
 800fc04:	3308      	adds	r3, #8
 800fc06:	4606      	mov	r6, r0
 800fc08:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc0c:	2100      	movs	r1, #0
 800fc0e:	2201      	movs	r2, #1
 800fc10:	429a      	cmp	r2, r3
 800fc12:	db09      	blt.n	800fc28 <__s2b+0x30>
 800fc14:	4630      	mov	r0, r6
 800fc16:	f7ff ff47 	bl	800faa8 <_Balloc>
 800fc1a:	b940      	cbnz	r0, 800fc2e <__s2b+0x36>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	4b19      	ldr	r3, [pc, #100]	; (800fc84 <__s2b+0x8c>)
 800fc20:	4819      	ldr	r0, [pc, #100]	; (800fc88 <__s2b+0x90>)
 800fc22:	21d3      	movs	r1, #211	; 0xd3
 800fc24:	f000 fea0 	bl	8010968 <__assert_func>
 800fc28:	0052      	lsls	r2, r2, #1
 800fc2a:	3101      	adds	r1, #1
 800fc2c:	e7f0      	b.n	800fc10 <__s2b+0x18>
 800fc2e:	9b08      	ldr	r3, [sp, #32]
 800fc30:	6143      	str	r3, [r0, #20]
 800fc32:	2d09      	cmp	r5, #9
 800fc34:	f04f 0301 	mov.w	r3, #1
 800fc38:	6103      	str	r3, [r0, #16]
 800fc3a:	dd16      	ble.n	800fc6a <__s2b+0x72>
 800fc3c:	f104 0909 	add.w	r9, r4, #9
 800fc40:	46c8      	mov	r8, r9
 800fc42:	442c      	add	r4, r5
 800fc44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc48:	4601      	mov	r1, r0
 800fc4a:	3b30      	subs	r3, #48	; 0x30
 800fc4c:	220a      	movs	r2, #10
 800fc4e:	4630      	mov	r0, r6
 800fc50:	f7ff ff8c 	bl	800fb6c <__multadd>
 800fc54:	45a0      	cmp	r8, r4
 800fc56:	d1f5      	bne.n	800fc44 <__s2b+0x4c>
 800fc58:	f1a5 0408 	sub.w	r4, r5, #8
 800fc5c:	444c      	add	r4, r9
 800fc5e:	1b2d      	subs	r5, r5, r4
 800fc60:	1963      	adds	r3, r4, r5
 800fc62:	42bb      	cmp	r3, r7
 800fc64:	db04      	blt.n	800fc70 <__s2b+0x78>
 800fc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc6a:	340a      	adds	r4, #10
 800fc6c:	2509      	movs	r5, #9
 800fc6e:	e7f6      	b.n	800fc5e <__s2b+0x66>
 800fc70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc74:	4601      	mov	r1, r0
 800fc76:	3b30      	subs	r3, #48	; 0x30
 800fc78:	220a      	movs	r2, #10
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	f7ff ff76 	bl	800fb6c <__multadd>
 800fc80:	e7ee      	b.n	800fc60 <__s2b+0x68>
 800fc82:	bf00      	nop
 800fc84:	0801114d 	.word	0x0801114d
 800fc88:	080111be 	.word	0x080111be

0800fc8c <__hi0bits>:
 800fc8c:	0c03      	lsrs	r3, r0, #16
 800fc8e:	041b      	lsls	r3, r3, #16
 800fc90:	b9d3      	cbnz	r3, 800fcc8 <__hi0bits+0x3c>
 800fc92:	0400      	lsls	r0, r0, #16
 800fc94:	2310      	movs	r3, #16
 800fc96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fc9a:	bf04      	itt	eq
 800fc9c:	0200      	lsleq	r0, r0, #8
 800fc9e:	3308      	addeq	r3, #8
 800fca0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fca4:	bf04      	itt	eq
 800fca6:	0100      	lsleq	r0, r0, #4
 800fca8:	3304      	addeq	r3, #4
 800fcaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fcae:	bf04      	itt	eq
 800fcb0:	0080      	lsleq	r0, r0, #2
 800fcb2:	3302      	addeq	r3, #2
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	db05      	blt.n	800fcc4 <__hi0bits+0x38>
 800fcb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fcbc:	f103 0301 	add.w	r3, r3, #1
 800fcc0:	bf08      	it	eq
 800fcc2:	2320      	moveq	r3, #32
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	4770      	bx	lr
 800fcc8:	2300      	movs	r3, #0
 800fcca:	e7e4      	b.n	800fc96 <__hi0bits+0xa>

0800fccc <__lo0bits>:
 800fccc:	6803      	ldr	r3, [r0, #0]
 800fcce:	f013 0207 	ands.w	r2, r3, #7
 800fcd2:	d00c      	beq.n	800fcee <__lo0bits+0x22>
 800fcd4:	07d9      	lsls	r1, r3, #31
 800fcd6:	d422      	bmi.n	800fd1e <__lo0bits+0x52>
 800fcd8:	079a      	lsls	r2, r3, #30
 800fcda:	bf49      	itett	mi
 800fcdc:	085b      	lsrmi	r3, r3, #1
 800fcde:	089b      	lsrpl	r3, r3, #2
 800fce0:	6003      	strmi	r3, [r0, #0]
 800fce2:	2201      	movmi	r2, #1
 800fce4:	bf5c      	itt	pl
 800fce6:	6003      	strpl	r3, [r0, #0]
 800fce8:	2202      	movpl	r2, #2
 800fcea:	4610      	mov	r0, r2
 800fcec:	4770      	bx	lr
 800fcee:	b299      	uxth	r1, r3
 800fcf0:	b909      	cbnz	r1, 800fcf6 <__lo0bits+0x2a>
 800fcf2:	0c1b      	lsrs	r3, r3, #16
 800fcf4:	2210      	movs	r2, #16
 800fcf6:	b2d9      	uxtb	r1, r3
 800fcf8:	b909      	cbnz	r1, 800fcfe <__lo0bits+0x32>
 800fcfa:	3208      	adds	r2, #8
 800fcfc:	0a1b      	lsrs	r3, r3, #8
 800fcfe:	0719      	lsls	r1, r3, #28
 800fd00:	bf04      	itt	eq
 800fd02:	091b      	lsreq	r3, r3, #4
 800fd04:	3204      	addeq	r2, #4
 800fd06:	0799      	lsls	r1, r3, #30
 800fd08:	bf04      	itt	eq
 800fd0a:	089b      	lsreq	r3, r3, #2
 800fd0c:	3202      	addeq	r2, #2
 800fd0e:	07d9      	lsls	r1, r3, #31
 800fd10:	d403      	bmi.n	800fd1a <__lo0bits+0x4e>
 800fd12:	085b      	lsrs	r3, r3, #1
 800fd14:	f102 0201 	add.w	r2, r2, #1
 800fd18:	d003      	beq.n	800fd22 <__lo0bits+0x56>
 800fd1a:	6003      	str	r3, [r0, #0]
 800fd1c:	e7e5      	b.n	800fcea <__lo0bits+0x1e>
 800fd1e:	2200      	movs	r2, #0
 800fd20:	e7e3      	b.n	800fcea <__lo0bits+0x1e>
 800fd22:	2220      	movs	r2, #32
 800fd24:	e7e1      	b.n	800fcea <__lo0bits+0x1e>
	...

0800fd28 <__i2b>:
 800fd28:	b510      	push	{r4, lr}
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	2101      	movs	r1, #1
 800fd2e:	f7ff febb 	bl	800faa8 <_Balloc>
 800fd32:	4602      	mov	r2, r0
 800fd34:	b928      	cbnz	r0, 800fd42 <__i2b+0x1a>
 800fd36:	4b05      	ldr	r3, [pc, #20]	; (800fd4c <__i2b+0x24>)
 800fd38:	4805      	ldr	r0, [pc, #20]	; (800fd50 <__i2b+0x28>)
 800fd3a:	f240 1145 	movw	r1, #325	; 0x145
 800fd3e:	f000 fe13 	bl	8010968 <__assert_func>
 800fd42:	2301      	movs	r3, #1
 800fd44:	6144      	str	r4, [r0, #20]
 800fd46:	6103      	str	r3, [r0, #16]
 800fd48:	bd10      	pop	{r4, pc}
 800fd4a:	bf00      	nop
 800fd4c:	0801114d 	.word	0x0801114d
 800fd50:	080111be 	.word	0x080111be

0800fd54 <__multiply>:
 800fd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd58:	4691      	mov	r9, r2
 800fd5a:	690a      	ldr	r2, [r1, #16]
 800fd5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	bfb8      	it	lt
 800fd64:	460b      	movlt	r3, r1
 800fd66:	460c      	mov	r4, r1
 800fd68:	bfbc      	itt	lt
 800fd6a:	464c      	movlt	r4, r9
 800fd6c:	4699      	movlt	r9, r3
 800fd6e:	6927      	ldr	r7, [r4, #16]
 800fd70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fd74:	68a3      	ldr	r3, [r4, #8]
 800fd76:	6861      	ldr	r1, [r4, #4]
 800fd78:	eb07 060a 	add.w	r6, r7, sl
 800fd7c:	42b3      	cmp	r3, r6
 800fd7e:	b085      	sub	sp, #20
 800fd80:	bfb8      	it	lt
 800fd82:	3101      	addlt	r1, #1
 800fd84:	f7ff fe90 	bl	800faa8 <_Balloc>
 800fd88:	b930      	cbnz	r0, 800fd98 <__multiply+0x44>
 800fd8a:	4602      	mov	r2, r0
 800fd8c:	4b44      	ldr	r3, [pc, #272]	; (800fea0 <__multiply+0x14c>)
 800fd8e:	4845      	ldr	r0, [pc, #276]	; (800fea4 <__multiply+0x150>)
 800fd90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fd94:	f000 fde8 	bl	8010968 <__assert_func>
 800fd98:	f100 0514 	add.w	r5, r0, #20
 800fd9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fda0:	462b      	mov	r3, r5
 800fda2:	2200      	movs	r2, #0
 800fda4:	4543      	cmp	r3, r8
 800fda6:	d321      	bcc.n	800fdec <__multiply+0x98>
 800fda8:	f104 0314 	add.w	r3, r4, #20
 800fdac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fdb0:	f109 0314 	add.w	r3, r9, #20
 800fdb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fdb8:	9202      	str	r2, [sp, #8]
 800fdba:	1b3a      	subs	r2, r7, r4
 800fdbc:	3a15      	subs	r2, #21
 800fdbe:	f022 0203 	bic.w	r2, r2, #3
 800fdc2:	3204      	adds	r2, #4
 800fdc4:	f104 0115 	add.w	r1, r4, #21
 800fdc8:	428f      	cmp	r7, r1
 800fdca:	bf38      	it	cc
 800fdcc:	2204      	movcc	r2, #4
 800fdce:	9201      	str	r2, [sp, #4]
 800fdd0:	9a02      	ldr	r2, [sp, #8]
 800fdd2:	9303      	str	r3, [sp, #12]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d80c      	bhi.n	800fdf2 <__multiply+0x9e>
 800fdd8:	2e00      	cmp	r6, #0
 800fdda:	dd03      	ble.n	800fde4 <__multiply+0x90>
 800fddc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d05b      	beq.n	800fe9c <__multiply+0x148>
 800fde4:	6106      	str	r6, [r0, #16]
 800fde6:	b005      	add	sp, #20
 800fde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdec:	f843 2b04 	str.w	r2, [r3], #4
 800fdf0:	e7d8      	b.n	800fda4 <__multiply+0x50>
 800fdf2:	f8b3 a000 	ldrh.w	sl, [r3]
 800fdf6:	f1ba 0f00 	cmp.w	sl, #0
 800fdfa:	d024      	beq.n	800fe46 <__multiply+0xf2>
 800fdfc:	f104 0e14 	add.w	lr, r4, #20
 800fe00:	46a9      	mov	r9, r5
 800fe02:	f04f 0c00 	mov.w	ip, #0
 800fe06:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fe0a:	f8d9 1000 	ldr.w	r1, [r9]
 800fe0e:	fa1f fb82 	uxth.w	fp, r2
 800fe12:	b289      	uxth	r1, r1
 800fe14:	fb0a 110b 	mla	r1, sl, fp, r1
 800fe18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fe1c:	f8d9 2000 	ldr.w	r2, [r9]
 800fe20:	4461      	add	r1, ip
 800fe22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe26:	fb0a c20b 	mla	r2, sl, fp, ip
 800fe2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fe2e:	b289      	uxth	r1, r1
 800fe30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fe34:	4577      	cmp	r7, lr
 800fe36:	f849 1b04 	str.w	r1, [r9], #4
 800fe3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe3e:	d8e2      	bhi.n	800fe06 <__multiply+0xb2>
 800fe40:	9a01      	ldr	r2, [sp, #4]
 800fe42:	f845 c002 	str.w	ip, [r5, r2]
 800fe46:	9a03      	ldr	r2, [sp, #12]
 800fe48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fe4c:	3304      	adds	r3, #4
 800fe4e:	f1b9 0f00 	cmp.w	r9, #0
 800fe52:	d021      	beq.n	800fe98 <__multiply+0x144>
 800fe54:	6829      	ldr	r1, [r5, #0]
 800fe56:	f104 0c14 	add.w	ip, r4, #20
 800fe5a:	46ae      	mov	lr, r5
 800fe5c:	f04f 0a00 	mov.w	sl, #0
 800fe60:	f8bc b000 	ldrh.w	fp, [ip]
 800fe64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fe68:	fb09 220b 	mla	r2, r9, fp, r2
 800fe6c:	4452      	add	r2, sl
 800fe6e:	b289      	uxth	r1, r1
 800fe70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fe74:	f84e 1b04 	str.w	r1, [lr], #4
 800fe78:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fe7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fe80:	f8be 1000 	ldrh.w	r1, [lr]
 800fe84:	fb09 110a 	mla	r1, r9, sl, r1
 800fe88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fe8c:	4567      	cmp	r7, ip
 800fe8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fe92:	d8e5      	bhi.n	800fe60 <__multiply+0x10c>
 800fe94:	9a01      	ldr	r2, [sp, #4]
 800fe96:	50a9      	str	r1, [r5, r2]
 800fe98:	3504      	adds	r5, #4
 800fe9a:	e799      	b.n	800fdd0 <__multiply+0x7c>
 800fe9c:	3e01      	subs	r6, #1
 800fe9e:	e79b      	b.n	800fdd8 <__multiply+0x84>
 800fea0:	0801114d 	.word	0x0801114d
 800fea4:	080111be 	.word	0x080111be

0800fea8 <__pow5mult>:
 800fea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feac:	4615      	mov	r5, r2
 800feae:	f012 0203 	ands.w	r2, r2, #3
 800feb2:	4606      	mov	r6, r0
 800feb4:	460f      	mov	r7, r1
 800feb6:	d007      	beq.n	800fec8 <__pow5mult+0x20>
 800feb8:	4c25      	ldr	r4, [pc, #148]	; (800ff50 <__pow5mult+0xa8>)
 800feba:	3a01      	subs	r2, #1
 800febc:	2300      	movs	r3, #0
 800febe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fec2:	f7ff fe53 	bl	800fb6c <__multadd>
 800fec6:	4607      	mov	r7, r0
 800fec8:	10ad      	asrs	r5, r5, #2
 800feca:	d03d      	beq.n	800ff48 <__pow5mult+0xa0>
 800fecc:	69f4      	ldr	r4, [r6, #28]
 800fece:	b97c      	cbnz	r4, 800fef0 <__pow5mult+0x48>
 800fed0:	2010      	movs	r0, #16
 800fed2:	f7fc fc7f 	bl	800c7d4 <malloc>
 800fed6:	4602      	mov	r2, r0
 800fed8:	61f0      	str	r0, [r6, #28]
 800feda:	b928      	cbnz	r0, 800fee8 <__pow5mult+0x40>
 800fedc:	4b1d      	ldr	r3, [pc, #116]	; (800ff54 <__pow5mult+0xac>)
 800fede:	481e      	ldr	r0, [pc, #120]	; (800ff58 <__pow5mult+0xb0>)
 800fee0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fee4:	f000 fd40 	bl	8010968 <__assert_func>
 800fee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800feec:	6004      	str	r4, [r0, #0]
 800feee:	60c4      	str	r4, [r0, #12]
 800fef0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fef4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fef8:	b94c      	cbnz	r4, 800ff0e <__pow5mult+0x66>
 800fefa:	f240 2171 	movw	r1, #625	; 0x271
 800fefe:	4630      	mov	r0, r6
 800ff00:	f7ff ff12 	bl	800fd28 <__i2b>
 800ff04:	2300      	movs	r3, #0
 800ff06:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	6003      	str	r3, [r0, #0]
 800ff0e:	f04f 0900 	mov.w	r9, #0
 800ff12:	07eb      	lsls	r3, r5, #31
 800ff14:	d50a      	bpl.n	800ff2c <__pow5mult+0x84>
 800ff16:	4639      	mov	r1, r7
 800ff18:	4622      	mov	r2, r4
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	f7ff ff1a 	bl	800fd54 <__multiply>
 800ff20:	4639      	mov	r1, r7
 800ff22:	4680      	mov	r8, r0
 800ff24:	4630      	mov	r0, r6
 800ff26:	f7ff fdff 	bl	800fb28 <_Bfree>
 800ff2a:	4647      	mov	r7, r8
 800ff2c:	106d      	asrs	r5, r5, #1
 800ff2e:	d00b      	beq.n	800ff48 <__pow5mult+0xa0>
 800ff30:	6820      	ldr	r0, [r4, #0]
 800ff32:	b938      	cbnz	r0, 800ff44 <__pow5mult+0x9c>
 800ff34:	4622      	mov	r2, r4
 800ff36:	4621      	mov	r1, r4
 800ff38:	4630      	mov	r0, r6
 800ff3a:	f7ff ff0b 	bl	800fd54 <__multiply>
 800ff3e:	6020      	str	r0, [r4, #0]
 800ff40:	f8c0 9000 	str.w	r9, [r0]
 800ff44:	4604      	mov	r4, r0
 800ff46:	e7e4      	b.n	800ff12 <__pow5mult+0x6a>
 800ff48:	4638      	mov	r0, r7
 800ff4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff4e:	bf00      	nop
 800ff50:	08011308 	.word	0x08011308
 800ff54:	080110de 	.word	0x080110de
 800ff58:	080111be 	.word	0x080111be

0800ff5c <__lshift>:
 800ff5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff60:	460c      	mov	r4, r1
 800ff62:	6849      	ldr	r1, [r1, #4]
 800ff64:	6923      	ldr	r3, [r4, #16]
 800ff66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff6a:	68a3      	ldr	r3, [r4, #8]
 800ff6c:	4607      	mov	r7, r0
 800ff6e:	4691      	mov	r9, r2
 800ff70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff74:	f108 0601 	add.w	r6, r8, #1
 800ff78:	42b3      	cmp	r3, r6
 800ff7a:	db0b      	blt.n	800ff94 <__lshift+0x38>
 800ff7c:	4638      	mov	r0, r7
 800ff7e:	f7ff fd93 	bl	800faa8 <_Balloc>
 800ff82:	4605      	mov	r5, r0
 800ff84:	b948      	cbnz	r0, 800ff9a <__lshift+0x3e>
 800ff86:	4602      	mov	r2, r0
 800ff88:	4b28      	ldr	r3, [pc, #160]	; (801002c <__lshift+0xd0>)
 800ff8a:	4829      	ldr	r0, [pc, #164]	; (8010030 <__lshift+0xd4>)
 800ff8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ff90:	f000 fcea 	bl	8010968 <__assert_func>
 800ff94:	3101      	adds	r1, #1
 800ff96:	005b      	lsls	r3, r3, #1
 800ff98:	e7ee      	b.n	800ff78 <__lshift+0x1c>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	f100 0114 	add.w	r1, r0, #20
 800ffa0:	f100 0210 	add.w	r2, r0, #16
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	4553      	cmp	r3, sl
 800ffa8:	db33      	blt.n	8010012 <__lshift+0xb6>
 800ffaa:	6920      	ldr	r0, [r4, #16]
 800ffac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ffb0:	f104 0314 	add.w	r3, r4, #20
 800ffb4:	f019 091f 	ands.w	r9, r9, #31
 800ffb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ffbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ffc0:	d02b      	beq.n	801001a <__lshift+0xbe>
 800ffc2:	f1c9 0e20 	rsb	lr, r9, #32
 800ffc6:	468a      	mov	sl, r1
 800ffc8:	2200      	movs	r2, #0
 800ffca:	6818      	ldr	r0, [r3, #0]
 800ffcc:	fa00 f009 	lsl.w	r0, r0, r9
 800ffd0:	4310      	orrs	r0, r2
 800ffd2:	f84a 0b04 	str.w	r0, [sl], #4
 800ffd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffda:	459c      	cmp	ip, r3
 800ffdc:	fa22 f20e 	lsr.w	r2, r2, lr
 800ffe0:	d8f3      	bhi.n	800ffca <__lshift+0x6e>
 800ffe2:	ebac 0304 	sub.w	r3, ip, r4
 800ffe6:	3b15      	subs	r3, #21
 800ffe8:	f023 0303 	bic.w	r3, r3, #3
 800ffec:	3304      	adds	r3, #4
 800ffee:	f104 0015 	add.w	r0, r4, #21
 800fff2:	4584      	cmp	ip, r0
 800fff4:	bf38      	it	cc
 800fff6:	2304      	movcc	r3, #4
 800fff8:	50ca      	str	r2, [r1, r3]
 800fffa:	b10a      	cbz	r2, 8010000 <__lshift+0xa4>
 800fffc:	f108 0602 	add.w	r6, r8, #2
 8010000:	3e01      	subs	r6, #1
 8010002:	4638      	mov	r0, r7
 8010004:	612e      	str	r6, [r5, #16]
 8010006:	4621      	mov	r1, r4
 8010008:	f7ff fd8e 	bl	800fb28 <_Bfree>
 801000c:	4628      	mov	r0, r5
 801000e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010012:	f842 0f04 	str.w	r0, [r2, #4]!
 8010016:	3301      	adds	r3, #1
 8010018:	e7c5      	b.n	800ffa6 <__lshift+0x4a>
 801001a:	3904      	subs	r1, #4
 801001c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010020:	f841 2f04 	str.w	r2, [r1, #4]!
 8010024:	459c      	cmp	ip, r3
 8010026:	d8f9      	bhi.n	801001c <__lshift+0xc0>
 8010028:	e7ea      	b.n	8010000 <__lshift+0xa4>
 801002a:	bf00      	nop
 801002c:	0801114d 	.word	0x0801114d
 8010030:	080111be 	.word	0x080111be

08010034 <__mcmp>:
 8010034:	b530      	push	{r4, r5, lr}
 8010036:	6902      	ldr	r2, [r0, #16]
 8010038:	690c      	ldr	r4, [r1, #16]
 801003a:	1b12      	subs	r2, r2, r4
 801003c:	d10e      	bne.n	801005c <__mcmp+0x28>
 801003e:	f100 0314 	add.w	r3, r0, #20
 8010042:	3114      	adds	r1, #20
 8010044:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010048:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801004c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010050:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010054:	42a5      	cmp	r5, r4
 8010056:	d003      	beq.n	8010060 <__mcmp+0x2c>
 8010058:	d305      	bcc.n	8010066 <__mcmp+0x32>
 801005a:	2201      	movs	r2, #1
 801005c:	4610      	mov	r0, r2
 801005e:	bd30      	pop	{r4, r5, pc}
 8010060:	4283      	cmp	r3, r0
 8010062:	d3f3      	bcc.n	801004c <__mcmp+0x18>
 8010064:	e7fa      	b.n	801005c <__mcmp+0x28>
 8010066:	f04f 32ff 	mov.w	r2, #4294967295
 801006a:	e7f7      	b.n	801005c <__mcmp+0x28>

0801006c <__mdiff>:
 801006c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010070:	460c      	mov	r4, r1
 8010072:	4606      	mov	r6, r0
 8010074:	4611      	mov	r1, r2
 8010076:	4620      	mov	r0, r4
 8010078:	4690      	mov	r8, r2
 801007a:	f7ff ffdb 	bl	8010034 <__mcmp>
 801007e:	1e05      	subs	r5, r0, #0
 8010080:	d110      	bne.n	80100a4 <__mdiff+0x38>
 8010082:	4629      	mov	r1, r5
 8010084:	4630      	mov	r0, r6
 8010086:	f7ff fd0f 	bl	800faa8 <_Balloc>
 801008a:	b930      	cbnz	r0, 801009a <__mdiff+0x2e>
 801008c:	4b3a      	ldr	r3, [pc, #232]	; (8010178 <__mdiff+0x10c>)
 801008e:	4602      	mov	r2, r0
 8010090:	f240 2137 	movw	r1, #567	; 0x237
 8010094:	4839      	ldr	r0, [pc, #228]	; (801017c <__mdiff+0x110>)
 8010096:	f000 fc67 	bl	8010968 <__assert_func>
 801009a:	2301      	movs	r3, #1
 801009c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80100a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a4:	bfa4      	itt	ge
 80100a6:	4643      	movge	r3, r8
 80100a8:	46a0      	movge	r8, r4
 80100aa:	4630      	mov	r0, r6
 80100ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80100b0:	bfa6      	itte	ge
 80100b2:	461c      	movge	r4, r3
 80100b4:	2500      	movge	r5, #0
 80100b6:	2501      	movlt	r5, #1
 80100b8:	f7ff fcf6 	bl	800faa8 <_Balloc>
 80100bc:	b920      	cbnz	r0, 80100c8 <__mdiff+0x5c>
 80100be:	4b2e      	ldr	r3, [pc, #184]	; (8010178 <__mdiff+0x10c>)
 80100c0:	4602      	mov	r2, r0
 80100c2:	f240 2145 	movw	r1, #581	; 0x245
 80100c6:	e7e5      	b.n	8010094 <__mdiff+0x28>
 80100c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80100cc:	6926      	ldr	r6, [r4, #16]
 80100ce:	60c5      	str	r5, [r0, #12]
 80100d0:	f104 0914 	add.w	r9, r4, #20
 80100d4:	f108 0514 	add.w	r5, r8, #20
 80100d8:	f100 0e14 	add.w	lr, r0, #20
 80100dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80100e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80100e4:	f108 0210 	add.w	r2, r8, #16
 80100e8:	46f2      	mov	sl, lr
 80100ea:	2100      	movs	r1, #0
 80100ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80100f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80100f4:	fa11 f88b 	uxtah	r8, r1, fp
 80100f8:	b299      	uxth	r1, r3
 80100fa:	0c1b      	lsrs	r3, r3, #16
 80100fc:	eba8 0801 	sub.w	r8, r8, r1
 8010100:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010104:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010108:	fa1f f888 	uxth.w	r8, r8
 801010c:	1419      	asrs	r1, r3, #16
 801010e:	454e      	cmp	r6, r9
 8010110:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010114:	f84a 3b04 	str.w	r3, [sl], #4
 8010118:	d8e8      	bhi.n	80100ec <__mdiff+0x80>
 801011a:	1b33      	subs	r3, r6, r4
 801011c:	3b15      	subs	r3, #21
 801011e:	f023 0303 	bic.w	r3, r3, #3
 8010122:	3304      	adds	r3, #4
 8010124:	3415      	adds	r4, #21
 8010126:	42a6      	cmp	r6, r4
 8010128:	bf38      	it	cc
 801012a:	2304      	movcc	r3, #4
 801012c:	441d      	add	r5, r3
 801012e:	4473      	add	r3, lr
 8010130:	469e      	mov	lr, r3
 8010132:	462e      	mov	r6, r5
 8010134:	4566      	cmp	r6, ip
 8010136:	d30e      	bcc.n	8010156 <__mdiff+0xea>
 8010138:	f10c 0203 	add.w	r2, ip, #3
 801013c:	1b52      	subs	r2, r2, r5
 801013e:	f022 0203 	bic.w	r2, r2, #3
 8010142:	3d03      	subs	r5, #3
 8010144:	45ac      	cmp	ip, r5
 8010146:	bf38      	it	cc
 8010148:	2200      	movcc	r2, #0
 801014a:	4413      	add	r3, r2
 801014c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010150:	b17a      	cbz	r2, 8010172 <__mdiff+0x106>
 8010152:	6107      	str	r7, [r0, #16]
 8010154:	e7a4      	b.n	80100a0 <__mdiff+0x34>
 8010156:	f856 8b04 	ldr.w	r8, [r6], #4
 801015a:	fa11 f288 	uxtah	r2, r1, r8
 801015e:	1414      	asrs	r4, r2, #16
 8010160:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010164:	b292      	uxth	r2, r2
 8010166:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801016a:	f84e 2b04 	str.w	r2, [lr], #4
 801016e:	1421      	asrs	r1, r4, #16
 8010170:	e7e0      	b.n	8010134 <__mdiff+0xc8>
 8010172:	3f01      	subs	r7, #1
 8010174:	e7ea      	b.n	801014c <__mdiff+0xe0>
 8010176:	bf00      	nop
 8010178:	0801114d 	.word	0x0801114d
 801017c:	080111be 	.word	0x080111be

08010180 <__ulp>:
 8010180:	b082      	sub	sp, #8
 8010182:	ed8d 0b00 	vstr	d0, [sp]
 8010186:	9a01      	ldr	r2, [sp, #4]
 8010188:	4b0f      	ldr	r3, [pc, #60]	; (80101c8 <__ulp+0x48>)
 801018a:	4013      	ands	r3, r2
 801018c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010190:	2b00      	cmp	r3, #0
 8010192:	dc08      	bgt.n	80101a6 <__ulp+0x26>
 8010194:	425b      	negs	r3, r3
 8010196:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801019a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801019e:	da04      	bge.n	80101aa <__ulp+0x2a>
 80101a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80101a4:	4113      	asrs	r3, r2
 80101a6:	2200      	movs	r2, #0
 80101a8:	e008      	b.n	80101bc <__ulp+0x3c>
 80101aa:	f1a2 0314 	sub.w	r3, r2, #20
 80101ae:	2b1e      	cmp	r3, #30
 80101b0:	bfda      	itte	le
 80101b2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80101b6:	40da      	lsrle	r2, r3
 80101b8:	2201      	movgt	r2, #1
 80101ba:	2300      	movs	r3, #0
 80101bc:	4619      	mov	r1, r3
 80101be:	4610      	mov	r0, r2
 80101c0:	ec41 0b10 	vmov	d0, r0, r1
 80101c4:	b002      	add	sp, #8
 80101c6:	4770      	bx	lr
 80101c8:	7ff00000 	.word	0x7ff00000

080101cc <__b2d>:
 80101cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101d0:	6906      	ldr	r6, [r0, #16]
 80101d2:	f100 0814 	add.w	r8, r0, #20
 80101d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80101da:	1f37      	subs	r7, r6, #4
 80101dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80101e0:	4610      	mov	r0, r2
 80101e2:	f7ff fd53 	bl	800fc8c <__hi0bits>
 80101e6:	f1c0 0320 	rsb	r3, r0, #32
 80101ea:	280a      	cmp	r0, #10
 80101ec:	600b      	str	r3, [r1, #0]
 80101ee:	491b      	ldr	r1, [pc, #108]	; (801025c <__b2d+0x90>)
 80101f0:	dc15      	bgt.n	801021e <__b2d+0x52>
 80101f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80101f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80101fa:	45b8      	cmp	r8, r7
 80101fc:	ea43 0501 	orr.w	r5, r3, r1
 8010200:	bf34      	ite	cc
 8010202:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010206:	2300      	movcs	r3, #0
 8010208:	3015      	adds	r0, #21
 801020a:	fa02 f000 	lsl.w	r0, r2, r0
 801020e:	fa23 f30c 	lsr.w	r3, r3, ip
 8010212:	4303      	orrs	r3, r0
 8010214:	461c      	mov	r4, r3
 8010216:	ec45 4b10 	vmov	d0, r4, r5
 801021a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801021e:	45b8      	cmp	r8, r7
 8010220:	bf3a      	itte	cc
 8010222:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010226:	f1a6 0708 	subcc.w	r7, r6, #8
 801022a:	2300      	movcs	r3, #0
 801022c:	380b      	subs	r0, #11
 801022e:	d012      	beq.n	8010256 <__b2d+0x8a>
 8010230:	f1c0 0120 	rsb	r1, r0, #32
 8010234:	fa23 f401 	lsr.w	r4, r3, r1
 8010238:	4082      	lsls	r2, r0
 801023a:	4322      	orrs	r2, r4
 801023c:	4547      	cmp	r7, r8
 801023e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8010242:	bf8c      	ite	hi
 8010244:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010248:	2200      	movls	r2, #0
 801024a:	4083      	lsls	r3, r0
 801024c:	40ca      	lsrs	r2, r1
 801024e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010252:	4313      	orrs	r3, r2
 8010254:	e7de      	b.n	8010214 <__b2d+0x48>
 8010256:	ea42 0501 	orr.w	r5, r2, r1
 801025a:	e7db      	b.n	8010214 <__b2d+0x48>
 801025c:	3ff00000 	.word	0x3ff00000

08010260 <__d2b>:
 8010260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010264:	460f      	mov	r7, r1
 8010266:	2101      	movs	r1, #1
 8010268:	ec59 8b10 	vmov	r8, r9, d0
 801026c:	4616      	mov	r6, r2
 801026e:	f7ff fc1b 	bl	800faa8 <_Balloc>
 8010272:	4604      	mov	r4, r0
 8010274:	b930      	cbnz	r0, 8010284 <__d2b+0x24>
 8010276:	4602      	mov	r2, r0
 8010278:	4b24      	ldr	r3, [pc, #144]	; (801030c <__d2b+0xac>)
 801027a:	4825      	ldr	r0, [pc, #148]	; (8010310 <__d2b+0xb0>)
 801027c:	f240 310f 	movw	r1, #783	; 0x30f
 8010280:	f000 fb72 	bl	8010968 <__assert_func>
 8010284:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801028c:	bb2d      	cbnz	r5, 80102da <__d2b+0x7a>
 801028e:	9301      	str	r3, [sp, #4]
 8010290:	f1b8 0300 	subs.w	r3, r8, #0
 8010294:	d026      	beq.n	80102e4 <__d2b+0x84>
 8010296:	4668      	mov	r0, sp
 8010298:	9300      	str	r3, [sp, #0]
 801029a:	f7ff fd17 	bl	800fccc <__lo0bits>
 801029e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80102a2:	b1e8      	cbz	r0, 80102e0 <__d2b+0x80>
 80102a4:	f1c0 0320 	rsb	r3, r0, #32
 80102a8:	fa02 f303 	lsl.w	r3, r2, r3
 80102ac:	430b      	orrs	r3, r1
 80102ae:	40c2      	lsrs	r2, r0
 80102b0:	6163      	str	r3, [r4, #20]
 80102b2:	9201      	str	r2, [sp, #4]
 80102b4:	9b01      	ldr	r3, [sp, #4]
 80102b6:	61a3      	str	r3, [r4, #24]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	bf14      	ite	ne
 80102bc:	2202      	movne	r2, #2
 80102be:	2201      	moveq	r2, #1
 80102c0:	6122      	str	r2, [r4, #16]
 80102c2:	b1bd      	cbz	r5, 80102f4 <__d2b+0x94>
 80102c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80102c8:	4405      	add	r5, r0
 80102ca:	603d      	str	r5, [r7, #0]
 80102cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80102d0:	6030      	str	r0, [r6, #0]
 80102d2:	4620      	mov	r0, r4
 80102d4:	b003      	add	sp, #12
 80102d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102de:	e7d6      	b.n	801028e <__d2b+0x2e>
 80102e0:	6161      	str	r1, [r4, #20]
 80102e2:	e7e7      	b.n	80102b4 <__d2b+0x54>
 80102e4:	a801      	add	r0, sp, #4
 80102e6:	f7ff fcf1 	bl	800fccc <__lo0bits>
 80102ea:	9b01      	ldr	r3, [sp, #4]
 80102ec:	6163      	str	r3, [r4, #20]
 80102ee:	3020      	adds	r0, #32
 80102f0:	2201      	movs	r2, #1
 80102f2:	e7e5      	b.n	80102c0 <__d2b+0x60>
 80102f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80102fc:	6038      	str	r0, [r7, #0]
 80102fe:	6918      	ldr	r0, [r3, #16]
 8010300:	f7ff fcc4 	bl	800fc8c <__hi0bits>
 8010304:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010308:	e7e2      	b.n	80102d0 <__d2b+0x70>
 801030a:	bf00      	nop
 801030c:	0801114d 	.word	0x0801114d
 8010310:	080111be 	.word	0x080111be

08010314 <__ratio>:
 8010314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010318:	4688      	mov	r8, r1
 801031a:	4669      	mov	r1, sp
 801031c:	4681      	mov	r9, r0
 801031e:	f7ff ff55 	bl	80101cc <__b2d>
 8010322:	a901      	add	r1, sp, #4
 8010324:	4640      	mov	r0, r8
 8010326:	ec55 4b10 	vmov	r4, r5, d0
 801032a:	f7ff ff4f 	bl	80101cc <__b2d>
 801032e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010332:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010336:	eba3 0c02 	sub.w	ip, r3, r2
 801033a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801033e:	1a9b      	subs	r3, r3, r2
 8010340:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010344:	ec51 0b10 	vmov	r0, r1, d0
 8010348:	2b00      	cmp	r3, #0
 801034a:	bfd6      	itet	le
 801034c:	460a      	movle	r2, r1
 801034e:	462a      	movgt	r2, r5
 8010350:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010354:	468b      	mov	fp, r1
 8010356:	462f      	mov	r7, r5
 8010358:	bfd4      	ite	le
 801035a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801035e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010362:	4620      	mov	r0, r4
 8010364:	ee10 2a10 	vmov	r2, s0
 8010368:	465b      	mov	r3, fp
 801036a:	4639      	mov	r1, r7
 801036c:	f7f0 fa7e 	bl	800086c <__aeabi_ddiv>
 8010370:	ec41 0b10 	vmov	d0, r0, r1
 8010374:	b003      	add	sp, #12
 8010376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801037a <__copybits>:
 801037a:	3901      	subs	r1, #1
 801037c:	b570      	push	{r4, r5, r6, lr}
 801037e:	1149      	asrs	r1, r1, #5
 8010380:	6914      	ldr	r4, [r2, #16]
 8010382:	3101      	adds	r1, #1
 8010384:	f102 0314 	add.w	r3, r2, #20
 8010388:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801038c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010390:	1f05      	subs	r5, r0, #4
 8010392:	42a3      	cmp	r3, r4
 8010394:	d30c      	bcc.n	80103b0 <__copybits+0x36>
 8010396:	1aa3      	subs	r3, r4, r2
 8010398:	3b11      	subs	r3, #17
 801039a:	f023 0303 	bic.w	r3, r3, #3
 801039e:	3211      	adds	r2, #17
 80103a0:	42a2      	cmp	r2, r4
 80103a2:	bf88      	it	hi
 80103a4:	2300      	movhi	r3, #0
 80103a6:	4418      	add	r0, r3
 80103a8:	2300      	movs	r3, #0
 80103aa:	4288      	cmp	r0, r1
 80103ac:	d305      	bcc.n	80103ba <__copybits+0x40>
 80103ae:	bd70      	pop	{r4, r5, r6, pc}
 80103b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80103b4:	f845 6f04 	str.w	r6, [r5, #4]!
 80103b8:	e7eb      	b.n	8010392 <__copybits+0x18>
 80103ba:	f840 3b04 	str.w	r3, [r0], #4
 80103be:	e7f4      	b.n	80103aa <__copybits+0x30>

080103c0 <__any_on>:
 80103c0:	f100 0214 	add.w	r2, r0, #20
 80103c4:	6900      	ldr	r0, [r0, #16]
 80103c6:	114b      	asrs	r3, r1, #5
 80103c8:	4298      	cmp	r0, r3
 80103ca:	b510      	push	{r4, lr}
 80103cc:	db11      	blt.n	80103f2 <__any_on+0x32>
 80103ce:	dd0a      	ble.n	80103e6 <__any_on+0x26>
 80103d0:	f011 011f 	ands.w	r1, r1, #31
 80103d4:	d007      	beq.n	80103e6 <__any_on+0x26>
 80103d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80103da:	fa24 f001 	lsr.w	r0, r4, r1
 80103de:	fa00 f101 	lsl.w	r1, r0, r1
 80103e2:	428c      	cmp	r4, r1
 80103e4:	d10b      	bne.n	80103fe <__any_on+0x3e>
 80103e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80103ea:	4293      	cmp	r3, r2
 80103ec:	d803      	bhi.n	80103f6 <__any_on+0x36>
 80103ee:	2000      	movs	r0, #0
 80103f0:	bd10      	pop	{r4, pc}
 80103f2:	4603      	mov	r3, r0
 80103f4:	e7f7      	b.n	80103e6 <__any_on+0x26>
 80103f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80103fa:	2900      	cmp	r1, #0
 80103fc:	d0f5      	beq.n	80103ea <__any_on+0x2a>
 80103fe:	2001      	movs	r0, #1
 8010400:	e7f6      	b.n	80103f0 <__any_on+0x30>
	...

08010404 <_strtol_l.constprop.0>:
 8010404:	2b01      	cmp	r3, #1
 8010406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801040a:	d001      	beq.n	8010410 <_strtol_l.constprop.0+0xc>
 801040c:	2b24      	cmp	r3, #36	; 0x24
 801040e:	d906      	bls.n	801041e <_strtol_l.constprop.0+0x1a>
 8010410:	f7fe f8cc 	bl	800e5ac <__errno>
 8010414:	2316      	movs	r3, #22
 8010416:	6003      	str	r3, [r0, #0]
 8010418:	2000      	movs	r0, #0
 801041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801041e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010504 <_strtol_l.constprop.0+0x100>
 8010422:	460d      	mov	r5, r1
 8010424:	462e      	mov	r6, r5
 8010426:	f815 4b01 	ldrb.w	r4, [r5], #1
 801042a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801042e:	f017 0708 	ands.w	r7, r7, #8
 8010432:	d1f7      	bne.n	8010424 <_strtol_l.constprop.0+0x20>
 8010434:	2c2d      	cmp	r4, #45	; 0x2d
 8010436:	d132      	bne.n	801049e <_strtol_l.constprop.0+0x9a>
 8010438:	782c      	ldrb	r4, [r5, #0]
 801043a:	2701      	movs	r7, #1
 801043c:	1cb5      	adds	r5, r6, #2
 801043e:	2b00      	cmp	r3, #0
 8010440:	d05b      	beq.n	80104fa <_strtol_l.constprop.0+0xf6>
 8010442:	2b10      	cmp	r3, #16
 8010444:	d109      	bne.n	801045a <_strtol_l.constprop.0+0x56>
 8010446:	2c30      	cmp	r4, #48	; 0x30
 8010448:	d107      	bne.n	801045a <_strtol_l.constprop.0+0x56>
 801044a:	782c      	ldrb	r4, [r5, #0]
 801044c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010450:	2c58      	cmp	r4, #88	; 0x58
 8010452:	d14d      	bne.n	80104f0 <_strtol_l.constprop.0+0xec>
 8010454:	786c      	ldrb	r4, [r5, #1]
 8010456:	2310      	movs	r3, #16
 8010458:	3502      	adds	r5, #2
 801045a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801045e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010462:	f04f 0e00 	mov.w	lr, #0
 8010466:	fbb8 f9f3 	udiv	r9, r8, r3
 801046a:	4676      	mov	r6, lr
 801046c:	fb03 8a19 	mls	sl, r3, r9, r8
 8010470:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010474:	f1bc 0f09 	cmp.w	ip, #9
 8010478:	d816      	bhi.n	80104a8 <_strtol_l.constprop.0+0xa4>
 801047a:	4664      	mov	r4, ip
 801047c:	42a3      	cmp	r3, r4
 801047e:	dd24      	ble.n	80104ca <_strtol_l.constprop.0+0xc6>
 8010480:	f1be 3fff 	cmp.w	lr, #4294967295
 8010484:	d008      	beq.n	8010498 <_strtol_l.constprop.0+0x94>
 8010486:	45b1      	cmp	r9, r6
 8010488:	d31c      	bcc.n	80104c4 <_strtol_l.constprop.0+0xc0>
 801048a:	d101      	bne.n	8010490 <_strtol_l.constprop.0+0x8c>
 801048c:	45a2      	cmp	sl, r4
 801048e:	db19      	blt.n	80104c4 <_strtol_l.constprop.0+0xc0>
 8010490:	fb06 4603 	mla	r6, r6, r3, r4
 8010494:	f04f 0e01 	mov.w	lr, #1
 8010498:	f815 4b01 	ldrb.w	r4, [r5], #1
 801049c:	e7e8      	b.n	8010470 <_strtol_l.constprop.0+0x6c>
 801049e:	2c2b      	cmp	r4, #43	; 0x2b
 80104a0:	bf04      	itt	eq
 80104a2:	782c      	ldrbeq	r4, [r5, #0]
 80104a4:	1cb5      	addeq	r5, r6, #2
 80104a6:	e7ca      	b.n	801043e <_strtol_l.constprop.0+0x3a>
 80104a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80104ac:	f1bc 0f19 	cmp.w	ip, #25
 80104b0:	d801      	bhi.n	80104b6 <_strtol_l.constprop.0+0xb2>
 80104b2:	3c37      	subs	r4, #55	; 0x37
 80104b4:	e7e2      	b.n	801047c <_strtol_l.constprop.0+0x78>
 80104b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80104ba:	f1bc 0f19 	cmp.w	ip, #25
 80104be:	d804      	bhi.n	80104ca <_strtol_l.constprop.0+0xc6>
 80104c0:	3c57      	subs	r4, #87	; 0x57
 80104c2:	e7db      	b.n	801047c <_strtol_l.constprop.0+0x78>
 80104c4:	f04f 3eff 	mov.w	lr, #4294967295
 80104c8:	e7e6      	b.n	8010498 <_strtol_l.constprop.0+0x94>
 80104ca:	f1be 3fff 	cmp.w	lr, #4294967295
 80104ce:	d105      	bne.n	80104dc <_strtol_l.constprop.0+0xd8>
 80104d0:	2322      	movs	r3, #34	; 0x22
 80104d2:	6003      	str	r3, [r0, #0]
 80104d4:	4646      	mov	r6, r8
 80104d6:	b942      	cbnz	r2, 80104ea <_strtol_l.constprop.0+0xe6>
 80104d8:	4630      	mov	r0, r6
 80104da:	e79e      	b.n	801041a <_strtol_l.constprop.0+0x16>
 80104dc:	b107      	cbz	r7, 80104e0 <_strtol_l.constprop.0+0xdc>
 80104de:	4276      	negs	r6, r6
 80104e0:	2a00      	cmp	r2, #0
 80104e2:	d0f9      	beq.n	80104d8 <_strtol_l.constprop.0+0xd4>
 80104e4:	f1be 0f00 	cmp.w	lr, #0
 80104e8:	d000      	beq.n	80104ec <_strtol_l.constprop.0+0xe8>
 80104ea:	1e69      	subs	r1, r5, #1
 80104ec:	6011      	str	r1, [r2, #0]
 80104ee:	e7f3      	b.n	80104d8 <_strtol_l.constprop.0+0xd4>
 80104f0:	2430      	movs	r4, #48	; 0x30
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d1b1      	bne.n	801045a <_strtol_l.constprop.0+0x56>
 80104f6:	2308      	movs	r3, #8
 80104f8:	e7af      	b.n	801045a <_strtol_l.constprop.0+0x56>
 80104fa:	2c30      	cmp	r4, #48	; 0x30
 80104fc:	d0a5      	beq.n	801044a <_strtol_l.constprop.0+0x46>
 80104fe:	230a      	movs	r3, #10
 8010500:	e7ab      	b.n	801045a <_strtol_l.constprop.0+0x56>
 8010502:	bf00      	nop
 8010504:	08011315 	.word	0x08011315

08010508 <_strtol_r>:
 8010508:	f7ff bf7c 	b.w	8010404 <_strtol_l.constprop.0>

0801050c <__ascii_wctomb>:
 801050c:	b149      	cbz	r1, 8010522 <__ascii_wctomb+0x16>
 801050e:	2aff      	cmp	r2, #255	; 0xff
 8010510:	bf85      	ittet	hi
 8010512:	238a      	movhi	r3, #138	; 0x8a
 8010514:	6003      	strhi	r3, [r0, #0]
 8010516:	700a      	strbls	r2, [r1, #0]
 8010518:	f04f 30ff 	movhi.w	r0, #4294967295
 801051c:	bf98      	it	ls
 801051e:	2001      	movls	r0, #1
 8010520:	4770      	bx	lr
 8010522:	4608      	mov	r0, r1
 8010524:	4770      	bx	lr

08010526 <__ssputs_r>:
 8010526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801052a:	688e      	ldr	r6, [r1, #8]
 801052c:	461f      	mov	r7, r3
 801052e:	42be      	cmp	r6, r7
 8010530:	680b      	ldr	r3, [r1, #0]
 8010532:	4682      	mov	sl, r0
 8010534:	460c      	mov	r4, r1
 8010536:	4690      	mov	r8, r2
 8010538:	d82c      	bhi.n	8010594 <__ssputs_r+0x6e>
 801053a:	898a      	ldrh	r2, [r1, #12]
 801053c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010540:	d026      	beq.n	8010590 <__ssputs_r+0x6a>
 8010542:	6965      	ldr	r5, [r4, #20]
 8010544:	6909      	ldr	r1, [r1, #16]
 8010546:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801054a:	eba3 0901 	sub.w	r9, r3, r1
 801054e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010552:	1c7b      	adds	r3, r7, #1
 8010554:	444b      	add	r3, r9
 8010556:	106d      	asrs	r5, r5, #1
 8010558:	429d      	cmp	r5, r3
 801055a:	bf38      	it	cc
 801055c:	461d      	movcc	r5, r3
 801055e:	0553      	lsls	r3, r2, #21
 8010560:	d527      	bpl.n	80105b2 <__ssputs_r+0x8c>
 8010562:	4629      	mov	r1, r5
 8010564:	f7fc f966 	bl	800c834 <_malloc_r>
 8010568:	4606      	mov	r6, r0
 801056a:	b360      	cbz	r0, 80105c6 <__ssputs_r+0xa0>
 801056c:	6921      	ldr	r1, [r4, #16]
 801056e:	464a      	mov	r2, r9
 8010570:	f7fe f849 	bl	800e606 <memcpy>
 8010574:	89a3      	ldrh	r3, [r4, #12]
 8010576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801057a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801057e:	81a3      	strh	r3, [r4, #12]
 8010580:	6126      	str	r6, [r4, #16]
 8010582:	6165      	str	r5, [r4, #20]
 8010584:	444e      	add	r6, r9
 8010586:	eba5 0509 	sub.w	r5, r5, r9
 801058a:	6026      	str	r6, [r4, #0]
 801058c:	60a5      	str	r5, [r4, #8]
 801058e:	463e      	mov	r6, r7
 8010590:	42be      	cmp	r6, r7
 8010592:	d900      	bls.n	8010596 <__ssputs_r+0x70>
 8010594:	463e      	mov	r6, r7
 8010596:	6820      	ldr	r0, [r4, #0]
 8010598:	4632      	mov	r2, r6
 801059a:	4641      	mov	r1, r8
 801059c:	f000 f9ca 	bl	8010934 <memmove>
 80105a0:	68a3      	ldr	r3, [r4, #8]
 80105a2:	1b9b      	subs	r3, r3, r6
 80105a4:	60a3      	str	r3, [r4, #8]
 80105a6:	6823      	ldr	r3, [r4, #0]
 80105a8:	4433      	add	r3, r6
 80105aa:	6023      	str	r3, [r4, #0]
 80105ac:	2000      	movs	r0, #0
 80105ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105b2:	462a      	mov	r2, r5
 80105b4:	f000 fa0c 	bl	80109d0 <_realloc_r>
 80105b8:	4606      	mov	r6, r0
 80105ba:	2800      	cmp	r0, #0
 80105bc:	d1e0      	bne.n	8010580 <__ssputs_r+0x5a>
 80105be:	6921      	ldr	r1, [r4, #16]
 80105c0:	4650      	mov	r0, sl
 80105c2:	f7fe febb 	bl	800f33c <_free_r>
 80105c6:	230c      	movs	r3, #12
 80105c8:	f8ca 3000 	str.w	r3, [sl]
 80105cc:	89a3      	ldrh	r3, [r4, #12]
 80105ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105d2:	81a3      	strh	r3, [r4, #12]
 80105d4:	f04f 30ff 	mov.w	r0, #4294967295
 80105d8:	e7e9      	b.n	80105ae <__ssputs_r+0x88>
	...

080105dc <_svfiprintf_r>:
 80105dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e0:	4698      	mov	r8, r3
 80105e2:	898b      	ldrh	r3, [r1, #12]
 80105e4:	061b      	lsls	r3, r3, #24
 80105e6:	b09d      	sub	sp, #116	; 0x74
 80105e8:	4607      	mov	r7, r0
 80105ea:	460d      	mov	r5, r1
 80105ec:	4614      	mov	r4, r2
 80105ee:	d50e      	bpl.n	801060e <_svfiprintf_r+0x32>
 80105f0:	690b      	ldr	r3, [r1, #16]
 80105f2:	b963      	cbnz	r3, 801060e <_svfiprintf_r+0x32>
 80105f4:	2140      	movs	r1, #64	; 0x40
 80105f6:	f7fc f91d 	bl	800c834 <_malloc_r>
 80105fa:	6028      	str	r0, [r5, #0]
 80105fc:	6128      	str	r0, [r5, #16]
 80105fe:	b920      	cbnz	r0, 801060a <_svfiprintf_r+0x2e>
 8010600:	230c      	movs	r3, #12
 8010602:	603b      	str	r3, [r7, #0]
 8010604:	f04f 30ff 	mov.w	r0, #4294967295
 8010608:	e0d0      	b.n	80107ac <_svfiprintf_r+0x1d0>
 801060a:	2340      	movs	r3, #64	; 0x40
 801060c:	616b      	str	r3, [r5, #20]
 801060e:	2300      	movs	r3, #0
 8010610:	9309      	str	r3, [sp, #36]	; 0x24
 8010612:	2320      	movs	r3, #32
 8010614:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010618:	f8cd 800c 	str.w	r8, [sp, #12]
 801061c:	2330      	movs	r3, #48	; 0x30
 801061e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80107c4 <_svfiprintf_r+0x1e8>
 8010622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010626:	f04f 0901 	mov.w	r9, #1
 801062a:	4623      	mov	r3, r4
 801062c:	469a      	mov	sl, r3
 801062e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010632:	b10a      	cbz	r2, 8010638 <_svfiprintf_r+0x5c>
 8010634:	2a25      	cmp	r2, #37	; 0x25
 8010636:	d1f9      	bne.n	801062c <_svfiprintf_r+0x50>
 8010638:	ebba 0b04 	subs.w	fp, sl, r4
 801063c:	d00b      	beq.n	8010656 <_svfiprintf_r+0x7a>
 801063e:	465b      	mov	r3, fp
 8010640:	4622      	mov	r2, r4
 8010642:	4629      	mov	r1, r5
 8010644:	4638      	mov	r0, r7
 8010646:	f7ff ff6e 	bl	8010526 <__ssputs_r>
 801064a:	3001      	adds	r0, #1
 801064c:	f000 80a9 	beq.w	80107a2 <_svfiprintf_r+0x1c6>
 8010650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010652:	445a      	add	r2, fp
 8010654:	9209      	str	r2, [sp, #36]	; 0x24
 8010656:	f89a 3000 	ldrb.w	r3, [sl]
 801065a:	2b00      	cmp	r3, #0
 801065c:	f000 80a1 	beq.w	80107a2 <_svfiprintf_r+0x1c6>
 8010660:	2300      	movs	r3, #0
 8010662:	f04f 32ff 	mov.w	r2, #4294967295
 8010666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801066a:	f10a 0a01 	add.w	sl, sl, #1
 801066e:	9304      	str	r3, [sp, #16]
 8010670:	9307      	str	r3, [sp, #28]
 8010672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010676:	931a      	str	r3, [sp, #104]	; 0x68
 8010678:	4654      	mov	r4, sl
 801067a:	2205      	movs	r2, #5
 801067c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010680:	4850      	ldr	r0, [pc, #320]	; (80107c4 <_svfiprintf_r+0x1e8>)
 8010682:	f7ef fdb5 	bl	80001f0 <memchr>
 8010686:	9a04      	ldr	r2, [sp, #16]
 8010688:	b9d8      	cbnz	r0, 80106c2 <_svfiprintf_r+0xe6>
 801068a:	06d0      	lsls	r0, r2, #27
 801068c:	bf44      	itt	mi
 801068e:	2320      	movmi	r3, #32
 8010690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010694:	0711      	lsls	r1, r2, #28
 8010696:	bf44      	itt	mi
 8010698:	232b      	movmi	r3, #43	; 0x2b
 801069a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801069e:	f89a 3000 	ldrb.w	r3, [sl]
 80106a2:	2b2a      	cmp	r3, #42	; 0x2a
 80106a4:	d015      	beq.n	80106d2 <_svfiprintf_r+0xf6>
 80106a6:	9a07      	ldr	r2, [sp, #28]
 80106a8:	4654      	mov	r4, sl
 80106aa:	2000      	movs	r0, #0
 80106ac:	f04f 0c0a 	mov.w	ip, #10
 80106b0:	4621      	mov	r1, r4
 80106b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106b6:	3b30      	subs	r3, #48	; 0x30
 80106b8:	2b09      	cmp	r3, #9
 80106ba:	d94d      	bls.n	8010758 <_svfiprintf_r+0x17c>
 80106bc:	b1b0      	cbz	r0, 80106ec <_svfiprintf_r+0x110>
 80106be:	9207      	str	r2, [sp, #28]
 80106c0:	e014      	b.n	80106ec <_svfiprintf_r+0x110>
 80106c2:	eba0 0308 	sub.w	r3, r0, r8
 80106c6:	fa09 f303 	lsl.w	r3, r9, r3
 80106ca:	4313      	orrs	r3, r2
 80106cc:	9304      	str	r3, [sp, #16]
 80106ce:	46a2      	mov	sl, r4
 80106d0:	e7d2      	b.n	8010678 <_svfiprintf_r+0x9c>
 80106d2:	9b03      	ldr	r3, [sp, #12]
 80106d4:	1d19      	adds	r1, r3, #4
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	9103      	str	r1, [sp, #12]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	bfbb      	ittet	lt
 80106de:	425b      	neglt	r3, r3
 80106e0:	f042 0202 	orrlt.w	r2, r2, #2
 80106e4:	9307      	strge	r3, [sp, #28]
 80106e6:	9307      	strlt	r3, [sp, #28]
 80106e8:	bfb8      	it	lt
 80106ea:	9204      	strlt	r2, [sp, #16]
 80106ec:	7823      	ldrb	r3, [r4, #0]
 80106ee:	2b2e      	cmp	r3, #46	; 0x2e
 80106f0:	d10c      	bne.n	801070c <_svfiprintf_r+0x130>
 80106f2:	7863      	ldrb	r3, [r4, #1]
 80106f4:	2b2a      	cmp	r3, #42	; 0x2a
 80106f6:	d134      	bne.n	8010762 <_svfiprintf_r+0x186>
 80106f8:	9b03      	ldr	r3, [sp, #12]
 80106fa:	1d1a      	adds	r2, r3, #4
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	9203      	str	r2, [sp, #12]
 8010700:	2b00      	cmp	r3, #0
 8010702:	bfb8      	it	lt
 8010704:	f04f 33ff 	movlt.w	r3, #4294967295
 8010708:	3402      	adds	r4, #2
 801070a:	9305      	str	r3, [sp, #20]
 801070c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80107d4 <_svfiprintf_r+0x1f8>
 8010710:	7821      	ldrb	r1, [r4, #0]
 8010712:	2203      	movs	r2, #3
 8010714:	4650      	mov	r0, sl
 8010716:	f7ef fd6b 	bl	80001f0 <memchr>
 801071a:	b138      	cbz	r0, 801072c <_svfiprintf_r+0x150>
 801071c:	9b04      	ldr	r3, [sp, #16]
 801071e:	eba0 000a 	sub.w	r0, r0, sl
 8010722:	2240      	movs	r2, #64	; 0x40
 8010724:	4082      	lsls	r2, r0
 8010726:	4313      	orrs	r3, r2
 8010728:	3401      	adds	r4, #1
 801072a:	9304      	str	r3, [sp, #16]
 801072c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010730:	4825      	ldr	r0, [pc, #148]	; (80107c8 <_svfiprintf_r+0x1ec>)
 8010732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010736:	2206      	movs	r2, #6
 8010738:	f7ef fd5a 	bl	80001f0 <memchr>
 801073c:	2800      	cmp	r0, #0
 801073e:	d038      	beq.n	80107b2 <_svfiprintf_r+0x1d6>
 8010740:	4b22      	ldr	r3, [pc, #136]	; (80107cc <_svfiprintf_r+0x1f0>)
 8010742:	bb1b      	cbnz	r3, 801078c <_svfiprintf_r+0x1b0>
 8010744:	9b03      	ldr	r3, [sp, #12]
 8010746:	3307      	adds	r3, #7
 8010748:	f023 0307 	bic.w	r3, r3, #7
 801074c:	3308      	adds	r3, #8
 801074e:	9303      	str	r3, [sp, #12]
 8010750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010752:	4433      	add	r3, r6
 8010754:	9309      	str	r3, [sp, #36]	; 0x24
 8010756:	e768      	b.n	801062a <_svfiprintf_r+0x4e>
 8010758:	fb0c 3202 	mla	r2, ip, r2, r3
 801075c:	460c      	mov	r4, r1
 801075e:	2001      	movs	r0, #1
 8010760:	e7a6      	b.n	80106b0 <_svfiprintf_r+0xd4>
 8010762:	2300      	movs	r3, #0
 8010764:	3401      	adds	r4, #1
 8010766:	9305      	str	r3, [sp, #20]
 8010768:	4619      	mov	r1, r3
 801076a:	f04f 0c0a 	mov.w	ip, #10
 801076e:	4620      	mov	r0, r4
 8010770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010774:	3a30      	subs	r2, #48	; 0x30
 8010776:	2a09      	cmp	r2, #9
 8010778:	d903      	bls.n	8010782 <_svfiprintf_r+0x1a6>
 801077a:	2b00      	cmp	r3, #0
 801077c:	d0c6      	beq.n	801070c <_svfiprintf_r+0x130>
 801077e:	9105      	str	r1, [sp, #20]
 8010780:	e7c4      	b.n	801070c <_svfiprintf_r+0x130>
 8010782:	fb0c 2101 	mla	r1, ip, r1, r2
 8010786:	4604      	mov	r4, r0
 8010788:	2301      	movs	r3, #1
 801078a:	e7f0      	b.n	801076e <_svfiprintf_r+0x192>
 801078c:	ab03      	add	r3, sp, #12
 801078e:	9300      	str	r3, [sp, #0]
 8010790:	462a      	mov	r2, r5
 8010792:	4b0f      	ldr	r3, [pc, #60]	; (80107d0 <_svfiprintf_r+0x1f4>)
 8010794:	a904      	add	r1, sp, #16
 8010796:	4638      	mov	r0, r7
 8010798:	f7fc ff98 	bl	800d6cc <_printf_float>
 801079c:	1c42      	adds	r2, r0, #1
 801079e:	4606      	mov	r6, r0
 80107a0:	d1d6      	bne.n	8010750 <_svfiprintf_r+0x174>
 80107a2:	89ab      	ldrh	r3, [r5, #12]
 80107a4:	065b      	lsls	r3, r3, #25
 80107a6:	f53f af2d 	bmi.w	8010604 <_svfiprintf_r+0x28>
 80107aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107ac:	b01d      	add	sp, #116	; 0x74
 80107ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b2:	ab03      	add	r3, sp, #12
 80107b4:	9300      	str	r3, [sp, #0]
 80107b6:	462a      	mov	r2, r5
 80107b8:	4b05      	ldr	r3, [pc, #20]	; (80107d0 <_svfiprintf_r+0x1f4>)
 80107ba:	a904      	add	r1, sp, #16
 80107bc:	4638      	mov	r0, r7
 80107be:	f7fd fa29 	bl	800dc14 <_printf_i>
 80107c2:	e7eb      	b.n	801079c <_svfiprintf_r+0x1c0>
 80107c4:	08011415 	.word	0x08011415
 80107c8:	0801141f 	.word	0x0801141f
 80107cc:	0800d6cd 	.word	0x0800d6cd
 80107d0:	08010527 	.word	0x08010527
 80107d4:	0801141b 	.word	0x0801141b

080107d8 <__sflush_r>:
 80107d8:	898a      	ldrh	r2, [r1, #12]
 80107da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107de:	4605      	mov	r5, r0
 80107e0:	0710      	lsls	r0, r2, #28
 80107e2:	460c      	mov	r4, r1
 80107e4:	d458      	bmi.n	8010898 <__sflush_r+0xc0>
 80107e6:	684b      	ldr	r3, [r1, #4]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	dc05      	bgt.n	80107f8 <__sflush_r+0x20>
 80107ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	dc02      	bgt.n	80107f8 <__sflush_r+0x20>
 80107f2:	2000      	movs	r0, #0
 80107f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107fa:	2e00      	cmp	r6, #0
 80107fc:	d0f9      	beq.n	80107f2 <__sflush_r+0x1a>
 80107fe:	2300      	movs	r3, #0
 8010800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010804:	682f      	ldr	r7, [r5, #0]
 8010806:	6a21      	ldr	r1, [r4, #32]
 8010808:	602b      	str	r3, [r5, #0]
 801080a:	d032      	beq.n	8010872 <__sflush_r+0x9a>
 801080c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801080e:	89a3      	ldrh	r3, [r4, #12]
 8010810:	075a      	lsls	r2, r3, #29
 8010812:	d505      	bpl.n	8010820 <__sflush_r+0x48>
 8010814:	6863      	ldr	r3, [r4, #4]
 8010816:	1ac0      	subs	r0, r0, r3
 8010818:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801081a:	b10b      	cbz	r3, 8010820 <__sflush_r+0x48>
 801081c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801081e:	1ac0      	subs	r0, r0, r3
 8010820:	2300      	movs	r3, #0
 8010822:	4602      	mov	r2, r0
 8010824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010826:	6a21      	ldr	r1, [r4, #32]
 8010828:	4628      	mov	r0, r5
 801082a:	47b0      	blx	r6
 801082c:	1c43      	adds	r3, r0, #1
 801082e:	89a3      	ldrh	r3, [r4, #12]
 8010830:	d106      	bne.n	8010840 <__sflush_r+0x68>
 8010832:	6829      	ldr	r1, [r5, #0]
 8010834:	291d      	cmp	r1, #29
 8010836:	d82b      	bhi.n	8010890 <__sflush_r+0xb8>
 8010838:	4a29      	ldr	r2, [pc, #164]	; (80108e0 <__sflush_r+0x108>)
 801083a:	410a      	asrs	r2, r1
 801083c:	07d6      	lsls	r6, r2, #31
 801083e:	d427      	bmi.n	8010890 <__sflush_r+0xb8>
 8010840:	2200      	movs	r2, #0
 8010842:	6062      	str	r2, [r4, #4]
 8010844:	04d9      	lsls	r1, r3, #19
 8010846:	6922      	ldr	r2, [r4, #16]
 8010848:	6022      	str	r2, [r4, #0]
 801084a:	d504      	bpl.n	8010856 <__sflush_r+0x7e>
 801084c:	1c42      	adds	r2, r0, #1
 801084e:	d101      	bne.n	8010854 <__sflush_r+0x7c>
 8010850:	682b      	ldr	r3, [r5, #0]
 8010852:	b903      	cbnz	r3, 8010856 <__sflush_r+0x7e>
 8010854:	6560      	str	r0, [r4, #84]	; 0x54
 8010856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010858:	602f      	str	r7, [r5, #0]
 801085a:	2900      	cmp	r1, #0
 801085c:	d0c9      	beq.n	80107f2 <__sflush_r+0x1a>
 801085e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010862:	4299      	cmp	r1, r3
 8010864:	d002      	beq.n	801086c <__sflush_r+0x94>
 8010866:	4628      	mov	r0, r5
 8010868:	f7fe fd68 	bl	800f33c <_free_r>
 801086c:	2000      	movs	r0, #0
 801086e:	6360      	str	r0, [r4, #52]	; 0x34
 8010870:	e7c0      	b.n	80107f4 <__sflush_r+0x1c>
 8010872:	2301      	movs	r3, #1
 8010874:	4628      	mov	r0, r5
 8010876:	47b0      	blx	r6
 8010878:	1c41      	adds	r1, r0, #1
 801087a:	d1c8      	bne.n	801080e <__sflush_r+0x36>
 801087c:	682b      	ldr	r3, [r5, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d0c5      	beq.n	801080e <__sflush_r+0x36>
 8010882:	2b1d      	cmp	r3, #29
 8010884:	d001      	beq.n	801088a <__sflush_r+0xb2>
 8010886:	2b16      	cmp	r3, #22
 8010888:	d101      	bne.n	801088e <__sflush_r+0xb6>
 801088a:	602f      	str	r7, [r5, #0]
 801088c:	e7b1      	b.n	80107f2 <__sflush_r+0x1a>
 801088e:	89a3      	ldrh	r3, [r4, #12]
 8010890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010894:	81a3      	strh	r3, [r4, #12]
 8010896:	e7ad      	b.n	80107f4 <__sflush_r+0x1c>
 8010898:	690f      	ldr	r7, [r1, #16]
 801089a:	2f00      	cmp	r7, #0
 801089c:	d0a9      	beq.n	80107f2 <__sflush_r+0x1a>
 801089e:	0793      	lsls	r3, r2, #30
 80108a0:	680e      	ldr	r6, [r1, #0]
 80108a2:	bf08      	it	eq
 80108a4:	694b      	ldreq	r3, [r1, #20]
 80108a6:	600f      	str	r7, [r1, #0]
 80108a8:	bf18      	it	ne
 80108aa:	2300      	movne	r3, #0
 80108ac:	eba6 0807 	sub.w	r8, r6, r7
 80108b0:	608b      	str	r3, [r1, #8]
 80108b2:	f1b8 0f00 	cmp.w	r8, #0
 80108b6:	dd9c      	ble.n	80107f2 <__sflush_r+0x1a>
 80108b8:	6a21      	ldr	r1, [r4, #32]
 80108ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80108bc:	4643      	mov	r3, r8
 80108be:	463a      	mov	r2, r7
 80108c0:	4628      	mov	r0, r5
 80108c2:	47b0      	blx	r6
 80108c4:	2800      	cmp	r0, #0
 80108c6:	dc06      	bgt.n	80108d6 <__sflush_r+0xfe>
 80108c8:	89a3      	ldrh	r3, [r4, #12]
 80108ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108ce:	81a3      	strh	r3, [r4, #12]
 80108d0:	f04f 30ff 	mov.w	r0, #4294967295
 80108d4:	e78e      	b.n	80107f4 <__sflush_r+0x1c>
 80108d6:	4407      	add	r7, r0
 80108d8:	eba8 0800 	sub.w	r8, r8, r0
 80108dc:	e7e9      	b.n	80108b2 <__sflush_r+0xda>
 80108de:	bf00      	nop
 80108e0:	dfbffffe 	.word	0xdfbffffe

080108e4 <_fflush_r>:
 80108e4:	b538      	push	{r3, r4, r5, lr}
 80108e6:	690b      	ldr	r3, [r1, #16]
 80108e8:	4605      	mov	r5, r0
 80108ea:	460c      	mov	r4, r1
 80108ec:	b913      	cbnz	r3, 80108f4 <_fflush_r+0x10>
 80108ee:	2500      	movs	r5, #0
 80108f0:	4628      	mov	r0, r5
 80108f2:	bd38      	pop	{r3, r4, r5, pc}
 80108f4:	b118      	cbz	r0, 80108fe <_fflush_r+0x1a>
 80108f6:	6a03      	ldr	r3, [r0, #32]
 80108f8:	b90b      	cbnz	r3, 80108fe <_fflush_r+0x1a>
 80108fa:	f7fd fd49 	bl	800e390 <__sinit>
 80108fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d0f3      	beq.n	80108ee <_fflush_r+0xa>
 8010906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010908:	07d0      	lsls	r0, r2, #31
 801090a:	d404      	bmi.n	8010916 <_fflush_r+0x32>
 801090c:	0599      	lsls	r1, r3, #22
 801090e:	d402      	bmi.n	8010916 <_fflush_r+0x32>
 8010910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010912:	f7fd fe76 	bl	800e602 <__retarget_lock_acquire_recursive>
 8010916:	4628      	mov	r0, r5
 8010918:	4621      	mov	r1, r4
 801091a:	f7ff ff5d 	bl	80107d8 <__sflush_r>
 801091e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010920:	07da      	lsls	r2, r3, #31
 8010922:	4605      	mov	r5, r0
 8010924:	d4e4      	bmi.n	80108f0 <_fflush_r+0xc>
 8010926:	89a3      	ldrh	r3, [r4, #12]
 8010928:	059b      	lsls	r3, r3, #22
 801092a:	d4e1      	bmi.n	80108f0 <_fflush_r+0xc>
 801092c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801092e:	f7fd fe69 	bl	800e604 <__retarget_lock_release_recursive>
 8010932:	e7dd      	b.n	80108f0 <_fflush_r+0xc>

08010934 <memmove>:
 8010934:	4288      	cmp	r0, r1
 8010936:	b510      	push	{r4, lr}
 8010938:	eb01 0402 	add.w	r4, r1, r2
 801093c:	d902      	bls.n	8010944 <memmove+0x10>
 801093e:	4284      	cmp	r4, r0
 8010940:	4623      	mov	r3, r4
 8010942:	d807      	bhi.n	8010954 <memmove+0x20>
 8010944:	1e43      	subs	r3, r0, #1
 8010946:	42a1      	cmp	r1, r4
 8010948:	d008      	beq.n	801095c <memmove+0x28>
 801094a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801094e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010952:	e7f8      	b.n	8010946 <memmove+0x12>
 8010954:	4402      	add	r2, r0
 8010956:	4601      	mov	r1, r0
 8010958:	428a      	cmp	r2, r1
 801095a:	d100      	bne.n	801095e <memmove+0x2a>
 801095c:	bd10      	pop	{r4, pc}
 801095e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010966:	e7f7      	b.n	8010958 <memmove+0x24>

08010968 <__assert_func>:
 8010968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801096a:	4614      	mov	r4, r2
 801096c:	461a      	mov	r2, r3
 801096e:	4b09      	ldr	r3, [pc, #36]	; (8010994 <__assert_func+0x2c>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	4605      	mov	r5, r0
 8010974:	68d8      	ldr	r0, [r3, #12]
 8010976:	b14c      	cbz	r4, 801098c <__assert_func+0x24>
 8010978:	4b07      	ldr	r3, [pc, #28]	; (8010998 <__assert_func+0x30>)
 801097a:	9100      	str	r1, [sp, #0]
 801097c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010980:	4906      	ldr	r1, [pc, #24]	; (801099c <__assert_func+0x34>)
 8010982:	462b      	mov	r3, r5
 8010984:	f000 f854 	bl	8010a30 <fiprintf>
 8010988:	f000 f864 	bl	8010a54 <abort>
 801098c:	4b04      	ldr	r3, [pc, #16]	; (80109a0 <__assert_func+0x38>)
 801098e:	461c      	mov	r4, r3
 8010990:	e7f3      	b.n	801097a <__assert_func+0x12>
 8010992:	bf00      	nop
 8010994:	20000204 	.word	0x20000204
 8010998:	08011426 	.word	0x08011426
 801099c:	08011433 	.word	0x08011433
 80109a0:	08011461 	.word	0x08011461

080109a4 <_calloc_r>:
 80109a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109a6:	fba1 2402 	umull	r2, r4, r1, r2
 80109aa:	b94c      	cbnz	r4, 80109c0 <_calloc_r+0x1c>
 80109ac:	4611      	mov	r1, r2
 80109ae:	9201      	str	r2, [sp, #4]
 80109b0:	f7fb ff40 	bl	800c834 <_malloc_r>
 80109b4:	9a01      	ldr	r2, [sp, #4]
 80109b6:	4605      	mov	r5, r0
 80109b8:	b930      	cbnz	r0, 80109c8 <_calloc_r+0x24>
 80109ba:	4628      	mov	r0, r5
 80109bc:	b003      	add	sp, #12
 80109be:	bd30      	pop	{r4, r5, pc}
 80109c0:	220c      	movs	r2, #12
 80109c2:	6002      	str	r2, [r0, #0]
 80109c4:	2500      	movs	r5, #0
 80109c6:	e7f8      	b.n	80109ba <_calloc_r+0x16>
 80109c8:	4621      	mov	r1, r4
 80109ca:	f7fd fd7a 	bl	800e4c2 <memset>
 80109ce:	e7f4      	b.n	80109ba <_calloc_r+0x16>

080109d0 <_realloc_r>:
 80109d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109d4:	4680      	mov	r8, r0
 80109d6:	4614      	mov	r4, r2
 80109d8:	460e      	mov	r6, r1
 80109da:	b921      	cbnz	r1, 80109e6 <_realloc_r+0x16>
 80109dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109e0:	4611      	mov	r1, r2
 80109e2:	f7fb bf27 	b.w	800c834 <_malloc_r>
 80109e6:	b92a      	cbnz	r2, 80109f4 <_realloc_r+0x24>
 80109e8:	f7fe fca8 	bl	800f33c <_free_r>
 80109ec:	4625      	mov	r5, r4
 80109ee:	4628      	mov	r0, r5
 80109f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f4:	f000 f835 	bl	8010a62 <_malloc_usable_size_r>
 80109f8:	4284      	cmp	r4, r0
 80109fa:	4607      	mov	r7, r0
 80109fc:	d802      	bhi.n	8010a04 <_realloc_r+0x34>
 80109fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010a02:	d812      	bhi.n	8010a2a <_realloc_r+0x5a>
 8010a04:	4621      	mov	r1, r4
 8010a06:	4640      	mov	r0, r8
 8010a08:	f7fb ff14 	bl	800c834 <_malloc_r>
 8010a0c:	4605      	mov	r5, r0
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	d0ed      	beq.n	80109ee <_realloc_r+0x1e>
 8010a12:	42bc      	cmp	r4, r7
 8010a14:	4622      	mov	r2, r4
 8010a16:	4631      	mov	r1, r6
 8010a18:	bf28      	it	cs
 8010a1a:	463a      	movcs	r2, r7
 8010a1c:	f7fd fdf3 	bl	800e606 <memcpy>
 8010a20:	4631      	mov	r1, r6
 8010a22:	4640      	mov	r0, r8
 8010a24:	f7fe fc8a 	bl	800f33c <_free_r>
 8010a28:	e7e1      	b.n	80109ee <_realloc_r+0x1e>
 8010a2a:	4635      	mov	r5, r6
 8010a2c:	e7df      	b.n	80109ee <_realloc_r+0x1e>
	...

08010a30 <fiprintf>:
 8010a30:	b40e      	push	{r1, r2, r3}
 8010a32:	b503      	push	{r0, r1, lr}
 8010a34:	4601      	mov	r1, r0
 8010a36:	ab03      	add	r3, sp, #12
 8010a38:	4805      	ldr	r0, [pc, #20]	; (8010a50 <fiprintf+0x20>)
 8010a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a3e:	6800      	ldr	r0, [r0, #0]
 8010a40:	9301      	str	r3, [sp, #4]
 8010a42:	f000 f83f 	bl	8010ac4 <_vfiprintf_r>
 8010a46:	b002      	add	sp, #8
 8010a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a4c:	b003      	add	sp, #12
 8010a4e:	4770      	bx	lr
 8010a50:	20000204 	.word	0x20000204

08010a54 <abort>:
 8010a54:	b508      	push	{r3, lr}
 8010a56:	2006      	movs	r0, #6
 8010a58:	f000 fa0c 	bl	8010e74 <raise>
 8010a5c:	2001      	movs	r0, #1
 8010a5e:	f7f1 fc4f 	bl	8002300 <_exit>

08010a62 <_malloc_usable_size_r>:
 8010a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a66:	1f18      	subs	r0, r3, #4
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	bfbc      	itt	lt
 8010a6c:	580b      	ldrlt	r3, [r1, r0]
 8010a6e:	18c0      	addlt	r0, r0, r3
 8010a70:	4770      	bx	lr

08010a72 <__sfputc_r>:
 8010a72:	6893      	ldr	r3, [r2, #8]
 8010a74:	3b01      	subs	r3, #1
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	b410      	push	{r4}
 8010a7a:	6093      	str	r3, [r2, #8]
 8010a7c:	da08      	bge.n	8010a90 <__sfputc_r+0x1e>
 8010a7e:	6994      	ldr	r4, [r2, #24]
 8010a80:	42a3      	cmp	r3, r4
 8010a82:	db01      	blt.n	8010a88 <__sfputc_r+0x16>
 8010a84:	290a      	cmp	r1, #10
 8010a86:	d103      	bne.n	8010a90 <__sfputc_r+0x1e>
 8010a88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a8c:	f000 b934 	b.w	8010cf8 <__swbuf_r>
 8010a90:	6813      	ldr	r3, [r2, #0]
 8010a92:	1c58      	adds	r0, r3, #1
 8010a94:	6010      	str	r0, [r2, #0]
 8010a96:	7019      	strb	r1, [r3, #0]
 8010a98:	4608      	mov	r0, r1
 8010a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a9e:	4770      	bx	lr

08010aa0 <__sfputs_r>:
 8010aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aa2:	4606      	mov	r6, r0
 8010aa4:	460f      	mov	r7, r1
 8010aa6:	4614      	mov	r4, r2
 8010aa8:	18d5      	adds	r5, r2, r3
 8010aaa:	42ac      	cmp	r4, r5
 8010aac:	d101      	bne.n	8010ab2 <__sfputs_r+0x12>
 8010aae:	2000      	movs	r0, #0
 8010ab0:	e007      	b.n	8010ac2 <__sfputs_r+0x22>
 8010ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ab6:	463a      	mov	r2, r7
 8010ab8:	4630      	mov	r0, r6
 8010aba:	f7ff ffda 	bl	8010a72 <__sfputc_r>
 8010abe:	1c43      	adds	r3, r0, #1
 8010ac0:	d1f3      	bne.n	8010aaa <__sfputs_r+0xa>
 8010ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ac4 <_vfiprintf_r>:
 8010ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac8:	460d      	mov	r5, r1
 8010aca:	b09d      	sub	sp, #116	; 0x74
 8010acc:	4614      	mov	r4, r2
 8010ace:	4698      	mov	r8, r3
 8010ad0:	4606      	mov	r6, r0
 8010ad2:	b118      	cbz	r0, 8010adc <_vfiprintf_r+0x18>
 8010ad4:	6a03      	ldr	r3, [r0, #32]
 8010ad6:	b90b      	cbnz	r3, 8010adc <_vfiprintf_r+0x18>
 8010ad8:	f7fd fc5a 	bl	800e390 <__sinit>
 8010adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ade:	07d9      	lsls	r1, r3, #31
 8010ae0:	d405      	bmi.n	8010aee <_vfiprintf_r+0x2a>
 8010ae2:	89ab      	ldrh	r3, [r5, #12]
 8010ae4:	059a      	lsls	r2, r3, #22
 8010ae6:	d402      	bmi.n	8010aee <_vfiprintf_r+0x2a>
 8010ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010aea:	f7fd fd8a 	bl	800e602 <__retarget_lock_acquire_recursive>
 8010aee:	89ab      	ldrh	r3, [r5, #12]
 8010af0:	071b      	lsls	r3, r3, #28
 8010af2:	d501      	bpl.n	8010af8 <_vfiprintf_r+0x34>
 8010af4:	692b      	ldr	r3, [r5, #16]
 8010af6:	b99b      	cbnz	r3, 8010b20 <_vfiprintf_r+0x5c>
 8010af8:	4629      	mov	r1, r5
 8010afa:	4630      	mov	r0, r6
 8010afc:	f000 f93a 	bl	8010d74 <__swsetup_r>
 8010b00:	b170      	cbz	r0, 8010b20 <_vfiprintf_r+0x5c>
 8010b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b04:	07dc      	lsls	r4, r3, #31
 8010b06:	d504      	bpl.n	8010b12 <_vfiprintf_r+0x4e>
 8010b08:	f04f 30ff 	mov.w	r0, #4294967295
 8010b0c:	b01d      	add	sp, #116	; 0x74
 8010b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b12:	89ab      	ldrh	r3, [r5, #12]
 8010b14:	0598      	lsls	r0, r3, #22
 8010b16:	d4f7      	bmi.n	8010b08 <_vfiprintf_r+0x44>
 8010b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b1a:	f7fd fd73 	bl	800e604 <__retarget_lock_release_recursive>
 8010b1e:	e7f3      	b.n	8010b08 <_vfiprintf_r+0x44>
 8010b20:	2300      	movs	r3, #0
 8010b22:	9309      	str	r3, [sp, #36]	; 0x24
 8010b24:	2320      	movs	r3, #32
 8010b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b2e:	2330      	movs	r3, #48	; 0x30
 8010b30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010ce4 <_vfiprintf_r+0x220>
 8010b34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b38:	f04f 0901 	mov.w	r9, #1
 8010b3c:	4623      	mov	r3, r4
 8010b3e:	469a      	mov	sl, r3
 8010b40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b44:	b10a      	cbz	r2, 8010b4a <_vfiprintf_r+0x86>
 8010b46:	2a25      	cmp	r2, #37	; 0x25
 8010b48:	d1f9      	bne.n	8010b3e <_vfiprintf_r+0x7a>
 8010b4a:	ebba 0b04 	subs.w	fp, sl, r4
 8010b4e:	d00b      	beq.n	8010b68 <_vfiprintf_r+0xa4>
 8010b50:	465b      	mov	r3, fp
 8010b52:	4622      	mov	r2, r4
 8010b54:	4629      	mov	r1, r5
 8010b56:	4630      	mov	r0, r6
 8010b58:	f7ff ffa2 	bl	8010aa0 <__sfputs_r>
 8010b5c:	3001      	adds	r0, #1
 8010b5e:	f000 80a9 	beq.w	8010cb4 <_vfiprintf_r+0x1f0>
 8010b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b64:	445a      	add	r2, fp
 8010b66:	9209      	str	r2, [sp, #36]	; 0x24
 8010b68:	f89a 3000 	ldrb.w	r3, [sl]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	f000 80a1 	beq.w	8010cb4 <_vfiprintf_r+0x1f0>
 8010b72:	2300      	movs	r3, #0
 8010b74:	f04f 32ff 	mov.w	r2, #4294967295
 8010b78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b7c:	f10a 0a01 	add.w	sl, sl, #1
 8010b80:	9304      	str	r3, [sp, #16]
 8010b82:	9307      	str	r3, [sp, #28]
 8010b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b88:	931a      	str	r3, [sp, #104]	; 0x68
 8010b8a:	4654      	mov	r4, sl
 8010b8c:	2205      	movs	r2, #5
 8010b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b92:	4854      	ldr	r0, [pc, #336]	; (8010ce4 <_vfiprintf_r+0x220>)
 8010b94:	f7ef fb2c 	bl	80001f0 <memchr>
 8010b98:	9a04      	ldr	r2, [sp, #16]
 8010b9a:	b9d8      	cbnz	r0, 8010bd4 <_vfiprintf_r+0x110>
 8010b9c:	06d1      	lsls	r1, r2, #27
 8010b9e:	bf44      	itt	mi
 8010ba0:	2320      	movmi	r3, #32
 8010ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ba6:	0713      	lsls	r3, r2, #28
 8010ba8:	bf44      	itt	mi
 8010baa:	232b      	movmi	r3, #43	; 0x2b
 8010bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8010bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8010bb6:	d015      	beq.n	8010be4 <_vfiprintf_r+0x120>
 8010bb8:	9a07      	ldr	r2, [sp, #28]
 8010bba:	4654      	mov	r4, sl
 8010bbc:	2000      	movs	r0, #0
 8010bbe:	f04f 0c0a 	mov.w	ip, #10
 8010bc2:	4621      	mov	r1, r4
 8010bc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bc8:	3b30      	subs	r3, #48	; 0x30
 8010bca:	2b09      	cmp	r3, #9
 8010bcc:	d94d      	bls.n	8010c6a <_vfiprintf_r+0x1a6>
 8010bce:	b1b0      	cbz	r0, 8010bfe <_vfiprintf_r+0x13a>
 8010bd0:	9207      	str	r2, [sp, #28]
 8010bd2:	e014      	b.n	8010bfe <_vfiprintf_r+0x13a>
 8010bd4:	eba0 0308 	sub.w	r3, r0, r8
 8010bd8:	fa09 f303 	lsl.w	r3, r9, r3
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	9304      	str	r3, [sp, #16]
 8010be0:	46a2      	mov	sl, r4
 8010be2:	e7d2      	b.n	8010b8a <_vfiprintf_r+0xc6>
 8010be4:	9b03      	ldr	r3, [sp, #12]
 8010be6:	1d19      	adds	r1, r3, #4
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	9103      	str	r1, [sp, #12]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	bfbb      	ittet	lt
 8010bf0:	425b      	neglt	r3, r3
 8010bf2:	f042 0202 	orrlt.w	r2, r2, #2
 8010bf6:	9307      	strge	r3, [sp, #28]
 8010bf8:	9307      	strlt	r3, [sp, #28]
 8010bfa:	bfb8      	it	lt
 8010bfc:	9204      	strlt	r2, [sp, #16]
 8010bfe:	7823      	ldrb	r3, [r4, #0]
 8010c00:	2b2e      	cmp	r3, #46	; 0x2e
 8010c02:	d10c      	bne.n	8010c1e <_vfiprintf_r+0x15a>
 8010c04:	7863      	ldrb	r3, [r4, #1]
 8010c06:	2b2a      	cmp	r3, #42	; 0x2a
 8010c08:	d134      	bne.n	8010c74 <_vfiprintf_r+0x1b0>
 8010c0a:	9b03      	ldr	r3, [sp, #12]
 8010c0c:	1d1a      	adds	r2, r3, #4
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	9203      	str	r2, [sp, #12]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	bfb8      	it	lt
 8010c16:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c1a:	3402      	adds	r4, #2
 8010c1c:	9305      	str	r3, [sp, #20]
 8010c1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010cf4 <_vfiprintf_r+0x230>
 8010c22:	7821      	ldrb	r1, [r4, #0]
 8010c24:	2203      	movs	r2, #3
 8010c26:	4650      	mov	r0, sl
 8010c28:	f7ef fae2 	bl	80001f0 <memchr>
 8010c2c:	b138      	cbz	r0, 8010c3e <_vfiprintf_r+0x17a>
 8010c2e:	9b04      	ldr	r3, [sp, #16]
 8010c30:	eba0 000a 	sub.w	r0, r0, sl
 8010c34:	2240      	movs	r2, #64	; 0x40
 8010c36:	4082      	lsls	r2, r0
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	3401      	adds	r4, #1
 8010c3c:	9304      	str	r3, [sp, #16]
 8010c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c42:	4829      	ldr	r0, [pc, #164]	; (8010ce8 <_vfiprintf_r+0x224>)
 8010c44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c48:	2206      	movs	r2, #6
 8010c4a:	f7ef fad1 	bl	80001f0 <memchr>
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	d03f      	beq.n	8010cd2 <_vfiprintf_r+0x20e>
 8010c52:	4b26      	ldr	r3, [pc, #152]	; (8010cec <_vfiprintf_r+0x228>)
 8010c54:	bb1b      	cbnz	r3, 8010c9e <_vfiprintf_r+0x1da>
 8010c56:	9b03      	ldr	r3, [sp, #12]
 8010c58:	3307      	adds	r3, #7
 8010c5a:	f023 0307 	bic.w	r3, r3, #7
 8010c5e:	3308      	adds	r3, #8
 8010c60:	9303      	str	r3, [sp, #12]
 8010c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c64:	443b      	add	r3, r7
 8010c66:	9309      	str	r3, [sp, #36]	; 0x24
 8010c68:	e768      	b.n	8010b3c <_vfiprintf_r+0x78>
 8010c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c6e:	460c      	mov	r4, r1
 8010c70:	2001      	movs	r0, #1
 8010c72:	e7a6      	b.n	8010bc2 <_vfiprintf_r+0xfe>
 8010c74:	2300      	movs	r3, #0
 8010c76:	3401      	adds	r4, #1
 8010c78:	9305      	str	r3, [sp, #20]
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	f04f 0c0a 	mov.w	ip, #10
 8010c80:	4620      	mov	r0, r4
 8010c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c86:	3a30      	subs	r2, #48	; 0x30
 8010c88:	2a09      	cmp	r2, #9
 8010c8a:	d903      	bls.n	8010c94 <_vfiprintf_r+0x1d0>
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d0c6      	beq.n	8010c1e <_vfiprintf_r+0x15a>
 8010c90:	9105      	str	r1, [sp, #20]
 8010c92:	e7c4      	b.n	8010c1e <_vfiprintf_r+0x15a>
 8010c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c98:	4604      	mov	r4, r0
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	e7f0      	b.n	8010c80 <_vfiprintf_r+0x1bc>
 8010c9e:	ab03      	add	r3, sp, #12
 8010ca0:	9300      	str	r3, [sp, #0]
 8010ca2:	462a      	mov	r2, r5
 8010ca4:	4b12      	ldr	r3, [pc, #72]	; (8010cf0 <_vfiprintf_r+0x22c>)
 8010ca6:	a904      	add	r1, sp, #16
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f7fc fd0f 	bl	800d6cc <_printf_float>
 8010cae:	4607      	mov	r7, r0
 8010cb0:	1c78      	adds	r0, r7, #1
 8010cb2:	d1d6      	bne.n	8010c62 <_vfiprintf_r+0x19e>
 8010cb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cb6:	07d9      	lsls	r1, r3, #31
 8010cb8:	d405      	bmi.n	8010cc6 <_vfiprintf_r+0x202>
 8010cba:	89ab      	ldrh	r3, [r5, #12]
 8010cbc:	059a      	lsls	r2, r3, #22
 8010cbe:	d402      	bmi.n	8010cc6 <_vfiprintf_r+0x202>
 8010cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cc2:	f7fd fc9f 	bl	800e604 <__retarget_lock_release_recursive>
 8010cc6:	89ab      	ldrh	r3, [r5, #12]
 8010cc8:	065b      	lsls	r3, r3, #25
 8010cca:	f53f af1d 	bmi.w	8010b08 <_vfiprintf_r+0x44>
 8010cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010cd0:	e71c      	b.n	8010b0c <_vfiprintf_r+0x48>
 8010cd2:	ab03      	add	r3, sp, #12
 8010cd4:	9300      	str	r3, [sp, #0]
 8010cd6:	462a      	mov	r2, r5
 8010cd8:	4b05      	ldr	r3, [pc, #20]	; (8010cf0 <_vfiprintf_r+0x22c>)
 8010cda:	a904      	add	r1, sp, #16
 8010cdc:	4630      	mov	r0, r6
 8010cde:	f7fc ff99 	bl	800dc14 <_printf_i>
 8010ce2:	e7e4      	b.n	8010cae <_vfiprintf_r+0x1ea>
 8010ce4:	08011415 	.word	0x08011415
 8010ce8:	0801141f 	.word	0x0801141f
 8010cec:	0800d6cd 	.word	0x0800d6cd
 8010cf0:	08010aa1 	.word	0x08010aa1
 8010cf4:	0801141b 	.word	0x0801141b

08010cf8 <__swbuf_r>:
 8010cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cfa:	460e      	mov	r6, r1
 8010cfc:	4614      	mov	r4, r2
 8010cfe:	4605      	mov	r5, r0
 8010d00:	b118      	cbz	r0, 8010d0a <__swbuf_r+0x12>
 8010d02:	6a03      	ldr	r3, [r0, #32]
 8010d04:	b90b      	cbnz	r3, 8010d0a <__swbuf_r+0x12>
 8010d06:	f7fd fb43 	bl	800e390 <__sinit>
 8010d0a:	69a3      	ldr	r3, [r4, #24]
 8010d0c:	60a3      	str	r3, [r4, #8]
 8010d0e:	89a3      	ldrh	r3, [r4, #12]
 8010d10:	071a      	lsls	r2, r3, #28
 8010d12:	d525      	bpl.n	8010d60 <__swbuf_r+0x68>
 8010d14:	6923      	ldr	r3, [r4, #16]
 8010d16:	b31b      	cbz	r3, 8010d60 <__swbuf_r+0x68>
 8010d18:	6823      	ldr	r3, [r4, #0]
 8010d1a:	6922      	ldr	r2, [r4, #16]
 8010d1c:	1a98      	subs	r0, r3, r2
 8010d1e:	6963      	ldr	r3, [r4, #20]
 8010d20:	b2f6      	uxtb	r6, r6
 8010d22:	4283      	cmp	r3, r0
 8010d24:	4637      	mov	r7, r6
 8010d26:	dc04      	bgt.n	8010d32 <__swbuf_r+0x3a>
 8010d28:	4621      	mov	r1, r4
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	f7ff fdda 	bl	80108e4 <_fflush_r>
 8010d30:	b9e0      	cbnz	r0, 8010d6c <__swbuf_r+0x74>
 8010d32:	68a3      	ldr	r3, [r4, #8]
 8010d34:	3b01      	subs	r3, #1
 8010d36:	60a3      	str	r3, [r4, #8]
 8010d38:	6823      	ldr	r3, [r4, #0]
 8010d3a:	1c5a      	adds	r2, r3, #1
 8010d3c:	6022      	str	r2, [r4, #0]
 8010d3e:	701e      	strb	r6, [r3, #0]
 8010d40:	6962      	ldr	r2, [r4, #20]
 8010d42:	1c43      	adds	r3, r0, #1
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d004      	beq.n	8010d52 <__swbuf_r+0x5a>
 8010d48:	89a3      	ldrh	r3, [r4, #12]
 8010d4a:	07db      	lsls	r3, r3, #31
 8010d4c:	d506      	bpl.n	8010d5c <__swbuf_r+0x64>
 8010d4e:	2e0a      	cmp	r6, #10
 8010d50:	d104      	bne.n	8010d5c <__swbuf_r+0x64>
 8010d52:	4621      	mov	r1, r4
 8010d54:	4628      	mov	r0, r5
 8010d56:	f7ff fdc5 	bl	80108e4 <_fflush_r>
 8010d5a:	b938      	cbnz	r0, 8010d6c <__swbuf_r+0x74>
 8010d5c:	4638      	mov	r0, r7
 8010d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d60:	4621      	mov	r1, r4
 8010d62:	4628      	mov	r0, r5
 8010d64:	f000 f806 	bl	8010d74 <__swsetup_r>
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	d0d5      	beq.n	8010d18 <__swbuf_r+0x20>
 8010d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8010d70:	e7f4      	b.n	8010d5c <__swbuf_r+0x64>
	...

08010d74 <__swsetup_r>:
 8010d74:	b538      	push	{r3, r4, r5, lr}
 8010d76:	4b2a      	ldr	r3, [pc, #168]	; (8010e20 <__swsetup_r+0xac>)
 8010d78:	4605      	mov	r5, r0
 8010d7a:	6818      	ldr	r0, [r3, #0]
 8010d7c:	460c      	mov	r4, r1
 8010d7e:	b118      	cbz	r0, 8010d88 <__swsetup_r+0x14>
 8010d80:	6a03      	ldr	r3, [r0, #32]
 8010d82:	b90b      	cbnz	r3, 8010d88 <__swsetup_r+0x14>
 8010d84:	f7fd fb04 	bl	800e390 <__sinit>
 8010d88:	89a3      	ldrh	r3, [r4, #12]
 8010d8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d8e:	0718      	lsls	r0, r3, #28
 8010d90:	d422      	bmi.n	8010dd8 <__swsetup_r+0x64>
 8010d92:	06d9      	lsls	r1, r3, #27
 8010d94:	d407      	bmi.n	8010da6 <__swsetup_r+0x32>
 8010d96:	2309      	movs	r3, #9
 8010d98:	602b      	str	r3, [r5, #0]
 8010d9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010d9e:	81a3      	strh	r3, [r4, #12]
 8010da0:	f04f 30ff 	mov.w	r0, #4294967295
 8010da4:	e034      	b.n	8010e10 <__swsetup_r+0x9c>
 8010da6:	0758      	lsls	r0, r3, #29
 8010da8:	d512      	bpl.n	8010dd0 <__swsetup_r+0x5c>
 8010daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010dac:	b141      	cbz	r1, 8010dc0 <__swsetup_r+0x4c>
 8010dae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010db2:	4299      	cmp	r1, r3
 8010db4:	d002      	beq.n	8010dbc <__swsetup_r+0x48>
 8010db6:	4628      	mov	r0, r5
 8010db8:	f7fe fac0 	bl	800f33c <_free_r>
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	6363      	str	r3, [r4, #52]	; 0x34
 8010dc0:	89a3      	ldrh	r3, [r4, #12]
 8010dc2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010dc6:	81a3      	strh	r3, [r4, #12]
 8010dc8:	2300      	movs	r3, #0
 8010dca:	6063      	str	r3, [r4, #4]
 8010dcc:	6923      	ldr	r3, [r4, #16]
 8010dce:	6023      	str	r3, [r4, #0]
 8010dd0:	89a3      	ldrh	r3, [r4, #12]
 8010dd2:	f043 0308 	orr.w	r3, r3, #8
 8010dd6:	81a3      	strh	r3, [r4, #12]
 8010dd8:	6923      	ldr	r3, [r4, #16]
 8010dda:	b94b      	cbnz	r3, 8010df0 <__swsetup_r+0x7c>
 8010ddc:	89a3      	ldrh	r3, [r4, #12]
 8010dde:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010de6:	d003      	beq.n	8010df0 <__swsetup_r+0x7c>
 8010de8:	4621      	mov	r1, r4
 8010dea:	4628      	mov	r0, r5
 8010dec:	f000 f884 	bl	8010ef8 <__smakebuf_r>
 8010df0:	89a0      	ldrh	r0, [r4, #12]
 8010df2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010df6:	f010 0301 	ands.w	r3, r0, #1
 8010dfa:	d00a      	beq.n	8010e12 <__swsetup_r+0x9e>
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	60a3      	str	r3, [r4, #8]
 8010e00:	6963      	ldr	r3, [r4, #20]
 8010e02:	425b      	negs	r3, r3
 8010e04:	61a3      	str	r3, [r4, #24]
 8010e06:	6923      	ldr	r3, [r4, #16]
 8010e08:	b943      	cbnz	r3, 8010e1c <__swsetup_r+0xa8>
 8010e0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010e0e:	d1c4      	bne.n	8010d9a <__swsetup_r+0x26>
 8010e10:	bd38      	pop	{r3, r4, r5, pc}
 8010e12:	0781      	lsls	r1, r0, #30
 8010e14:	bf58      	it	pl
 8010e16:	6963      	ldrpl	r3, [r4, #20]
 8010e18:	60a3      	str	r3, [r4, #8]
 8010e1a:	e7f4      	b.n	8010e06 <__swsetup_r+0x92>
 8010e1c:	2000      	movs	r0, #0
 8010e1e:	e7f7      	b.n	8010e10 <__swsetup_r+0x9c>
 8010e20:	20000204 	.word	0x20000204

08010e24 <_raise_r>:
 8010e24:	291f      	cmp	r1, #31
 8010e26:	b538      	push	{r3, r4, r5, lr}
 8010e28:	4604      	mov	r4, r0
 8010e2a:	460d      	mov	r5, r1
 8010e2c:	d904      	bls.n	8010e38 <_raise_r+0x14>
 8010e2e:	2316      	movs	r3, #22
 8010e30:	6003      	str	r3, [r0, #0]
 8010e32:	f04f 30ff 	mov.w	r0, #4294967295
 8010e36:	bd38      	pop	{r3, r4, r5, pc}
 8010e38:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010e3a:	b112      	cbz	r2, 8010e42 <_raise_r+0x1e>
 8010e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e40:	b94b      	cbnz	r3, 8010e56 <_raise_r+0x32>
 8010e42:	4620      	mov	r0, r4
 8010e44:	f000 f830 	bl	8010ea8 <_getpid_r>
 8010e48:	462a      	mov	r2, r5
 8010e4a:	4601      	mov	r1, r0
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e52:	f000 b817 	b.w	8010e84 <_kill_r>
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	d00a      	beq.n	8010e70 <_raise_r+0x4c>
 8010e5a:	1c59      	adds	r1, r3, #1
 8010e5c:	d103      	bne.n	8010e66 <_raise_r+0x42>
 8010e5e:	2316      	movs	r3, #22
 8010e60:	6003      	str	r3, [r0, #0]
 8010e62:	2001      	movs	r0, #1
 8010e64:	e7e7      	b.n	8010e36 <_raise_r+0x12>
 8010e66:	2400      	movs	r4, #0
 8010e68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e6c:	4628      	mov	r0, r5
 8010e6e:	4798      	blx	r3
 8010e70:	2000      	movs	r0, #0
 8010e72:	e7e0      	b.n	8010e36 <_raise_r+0x12>

08010e74 <raise>:
 8010e74:	4b02      	ldr	r3, [pc, #8]	; (8010e80 <raise+0xc>)
 8010e76:	4601      	mov	r1, r0
 8010e78:	6818      	ldr	r0, [r3, #0]
 8010e7a:	f7ff bfd3 	b.w	8010e24 <_raise_r>
 8010e7e:	bf00      	nop
 8010e80:	20000204 	.word	0x20000204

08010e84 <_kill_r>:
 8010e84:	b538      	push	{r3, r4, r5, lr}
 8010e86:	4d07      	ldr	r5, [pc, #28]	; (8010ea4 <_kill_r+0x20>)
 8010e88:	2300      	movs	r3, #0
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	4608      	mov	r0, r1
 8010e8e:	4611      	mov	r1, r2
 8010e90:	602b      	str	r3, [r5, #0]
 8010e92:	f7f1 fa25 	bl	80022e0 <_kill>
 8010e96:	1c43      	adds	r3, r0, #1
 8010e98:	d102      	bne.n	8010ea0 <_kill_r+0x1c>
 8010e9a:	682b      	ldr	r3, [r5, #0]
 8010e9c:	b103      	cbz	r3, 8010ea0 <_kill_r+0x1c>
 8010e9e:	6023      	str	r3, [r4, #0]
 8010ea0:	bd38      	pop	{r3, r4, r5, pc}
 8010ea2:	bf00      	nop
 8010ea4:	20000eac 	.word	0x20000eac

08010ea8 <_getpid_r>:
 8010ea8:	f7f1 ba12 	b.w	80022d0 <_getpid>

08010eac <__swhatbuf_r>:
 8010eac:	b570      	push	{r4, r5, r6, lr}
 8010eae:	460c      	mov	r4, r1
 8010eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eb4:	2900      	cmp	r1, #0
 8010eb6:	b096      	sub	sp, #88	; 0x58
 8010eb8:	4615      	mov	r5, r2
 8010eba:	461e      	mov	r6, r3
 8010ebc:	da0d      	bge.n	8010eda <__swhatbuf_r+0x2e>
 8010ebe:	89a3      	ldrh	r3, [r4, #12]
 8010ec0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010ec4:	f04f 0100 	mov.w	r1, #0
 8010ec8:	bf0c      	ite	eq
 8010eca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010ece:	2340      	movne	r3, #64	; 0x40
 8010ed0:	2000      	movs	r0, #0
 8010ed2:	6031      	str	r1, [r6, #0]
 8010ed4:	602b      	str	r3, [r5, #0]
 8010ed6:	b016      	add	sp, #88	; 0x58
 8010ed8:	bd70      	pop	{r4, r5, r6, pc}
 8010eda:	466a      	mov	r2, sp
 8010edc:	f000 f848 	bl	8010f70 <_fstat_r>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	dbec      	blt.n	8010ebe <__swhatbuf_r+0x12>
 8010ee4:	9901      	ldr	r1, [sp, #4]
 8010ee6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010eea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010eee:	4259      	negs	r1, r3
 8010ef0:	4159      	adcs	r1, r3
 8010ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ef6:	e7eb      	b.n	8010ed0 <__swhatbuf_r+0x24>

08010ef8 <__smakebuf_r>:
 8010ef8:	898b      	ldrh	r3, [r1, #12]
 8010efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010efc:	079d      	lsls	r5, r3, #30
 8010efe:	4606      	mov	r6, r0
 8010f00:	460c      	mov	r4, r1
 8010f02:	d507      	bpl.n	8010f14 <__smakebuf_r+0x1c>
 8010f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010f08:	6023      	str	r3, [r4, #0]
 8010f0a:	6123      	str	r3, [r4, #16]
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	6163      	str	r3, [r4, #20]
 8010f10:	b002      	add	sp, #8
 8010f12:	bd70      	pop	{r4, r5, r6, pc}
 8010f14:	ab01      	add	r3, sp, #4
 8010f16:	466a      	mov	r2, sp
 8010f18:	f7ff ffc8 	bl	8010eac <__swhatbuf_r>
 8010f1c:	9900      	ldr	r1, [sp, #0]
 8010f1e:	4605      	mov	r5, r0
 8010f20:	4630      	mov	r0, r6
 8010f22:	f7fb fc87 	bl	800c834 <_malloc_r>
 8010f26:	b948      	cbnz	r0, 8010f3c <__smakebuf_r+0x44>
 8010f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f2c:	059a      	lsls	r2, r3, #22
 8010f2e:	d4ef      	bmi.n	8010f10 <__smakebuf_r+0x18>
 8010f30:	f023 0303 	bic.w	r3, r3, #3
 8010f34:	f043 0302 	orr.w	r3, r3, #2
 8010f38:	81a3      	strh	r3, [r4, #12]
 8010f3a:	e7e3      	b.n	8010f04 <__smakebuf_r+0xc>
 8010f3c:	89a3      	ldrh	r3, [r4, #12]
 8010f3e:	6020      	str	r0, [r4, #0]
 8010f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f44:	81a3      	strh	r3, [r4, #12]
 8010f46:	9b00      	ldr	r3, [sp, #0]
 8010f48:	6163      	str	r3, [r4, #20]
 8010f4a:	9b01      	ldr	r3, [sp, #4]
 8010f4c:	6120      	str	r0, [r4, #16]
 8010f4e:	b15b      	cbz	r3, 8010f68 <__smakebuf_r+0x70>
 8010f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f54:	4630      	mov	r0, r6
 8010f56:	f000 f81d 	bl	8010f94 <_isatty_r>
 8010f5a:	b128      	cbz	r0, 8010f68 <__smakebuf_r+0x70>
 8010f5c:	89a3      	ldrh	r3, [r4, #12]
 8010f5e:	f023 0303 	bic.w	r3, r3, #3
 8010f62:	f043 0301 	orr.w	r3, r3, #1
 8010f66:	81a3      	strh	r3, [r4, #12]
 8010f68:	89a3      	ldrh	r3, [r4, #12]
 8010f6a:	431d      	orrs	r5, r3
 8010f6c:	81a5      	strh	r5, [r4, #12]
 8010f6e:	e7cf      	b.n	8010f10 <__smakebuf_r+0x18>

08010f70 <_fstat_r>:
 8010f70:	b538      	push	{r3, r4, r5, lr}
 8010f72:	4d07      	ldr	r5, [pc, #28]	; (8010f90 <_fstat_r+0x20>)
 8010f74:	2300      	movs	r3, #0
 8010f76:	4604      	mov	r4, r0
 8010f78:	4608      	mov	r0, r1
 8010f7a:	4611      	mov	r1, r2
 8010f7c:	602b      	str	r3, [r5, #0]
 8010f7e:	f7f1 fa0e 	bl	800239e <_fstat>
 8010f82:	1c43      	adds	r3, r0, #1
 8010f84:	d102      	bne.n	8010f8c <_fstat_r+0x1c>
 8010f86:	682b      	ldr	r3, [r5, #0]
 8010f88:	b103      	cbz	r3, 8010f8c <_fstat_r+0x1c>
 8010f8a:	6023      	str	r3, [r4, #0]
 8010f8c:	bd38      	pop	{r3, r4, r5, pc}
 8010f8e:	bf00      	nop
 8010f90:	20000eac 	.word	0x20000eac

08010f94 <_isatty_r>:
 8010f94:	b538      	push	{r3, r4, r5, lr}
 8010f96:	4d06      	ldr	r5, [pc, #24]	; (8010fb0 <_isatty_r+0x1c>)
 8010f98:	2300      	movs	r3, #0
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	4608      	mov	r0, r1
 8010f9e:	602b      	str	r3, [r5, #0]
 8010fa0:	f7f1 fa0d 	bl	80023be <_isatty>
 8010fa4:	1c43      	adds	r3, r0, #1
 8010fa6:	d102      	bne.n	8010fae <_isatty_r+0x1a>
 8010fa8:	682b      	ldr	r3, [r5, #0]
 8010faa:	b103      	cbz	r3, 8010fae <_isatty_r+0x1a>
 8010fac:	6023      	str	r3, [r4, #0]
 8010fae:	bd38      	pop	{r3, r4, r5, pc}
 8010fb0:	20000eac 	.word	0x20000eac

08010fb4 <_init>:
 8010fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fb6:	bf00      	nop
 8010fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fba:	bc08      	pop	{r3}
 8010fbc:	469e      	mov	lr, r3
 8010fbe:	4770      	bx	lr

08010fc0 <_fini>:
 8010fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fc2:	bf00      	nop
 8010fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fc6:	bc08      	pop	{r3}
 8010fc8:	469e      	mov	lr, r3
 8010fca:	4770      	bx	lr
