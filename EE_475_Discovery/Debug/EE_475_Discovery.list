
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9a8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800bb30  0800bb30  0001bb30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd28  0800bd28  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd28  0800bd28  0001bd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd30  0800bd30  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd30  0800bd30  0001bd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd34  0800bd34  0001bd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800bd38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000aac  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b28  20000b28  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c7c2  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040ee  00000000  00000000  0003c8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018a8  00000000  00000000  000409a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000133b  00000000  00000000  00042248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000248f0  00000000  00000000  00043583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002063e  00000000  00000000  00067e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6491  00000000  00000000  000884b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007094  00000000  00000000  0015e944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  001659d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bb18 	.word	0x0800bb18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800bb18 	.word	0x0800bb18

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b970 	b.w	8000dbc <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9e08      	ldr	r6, [sp, #32]
 8000afa:	460d      	mov	r5, r1
 8000afc:	4604      	mov	r4, r0
 8000afe:	460f      	mov	r7, r1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d14a      	bne.n	8000b9a <__udivmoddi4+0xa6>
 8000b04:	428a      	cmp	r2, r1
 8000b06:	4694      	mov	ip, r2
 8000b08:	d965      	bls.n	8000bd6 <__udivmoddi4+0xe2>
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	b143      	cbz	r3, 8000b22 <__udivmoddi4+0x2e>
 8000b10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b14:	f1c3 0220 	rsb	r2, r3, #32
 8000b18:	409f      	lsls	r7, r3
 8000b1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1e:	4317      	orrs	r7, r2
 8000b20:	409c      	lsls	r4, r3
 8000b22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b26:	fa1f f58c 	uxth.w	r5, ip
 8000b2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b2e:	0c22      	lsrs	r2, r4, #16
 8000b30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b38:	fb01 f005 	mul.w	r0, r1, r5
 8000b3c:	4290      	cmp	r0, r2
 8000b3e:	d90a      	bls.n	8000b56 <__udivmoddi4+0x62>
 8000b40:	eb1c 0202 	adds.w	r2, ip, r2
 8000b44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b48:	f080 811c 	bcs.w	8000d84 <__udivmoddi4+0x290>
 8000b4c:	4290      	cmp	r0, r2
 8000b4e:	f240 8119 	bls.w	8000d84 <__udivmoddi4+0x290>
 8000b52:	3902      	subs	r1, #2
 8000b54:	4462      	add	r2, ip
 8000b56:	1a12      	subs	r2, r2, r0
 8000b58:	b2a4      	uxth	r4, r4
 8000b5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b66:	fb00 f505 	mul.w	r5, r0, r5
 8000b6a:	42a5      	cmp	r5, r4
 8000b6c:	d90a      	bls.n	8000b84 <__udivmoddi4+0x90>
 8000b6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b76:	f080 8107 	bcs.w	8000d88 <__udivmoddi4+0x294>
 8000b7a:	42a5      	cmp	r5, r4
 8000b7c:	f240 8104 	bls.w	8000d88 <__udivmoddi4+0x294>
 8000b80:	4464      	add	r4, ip
 8000b82:	3802      	subs	r0, #2
 8000b84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b88:	1b64      	subs	r4, r4, r5
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	b11e      	cbz	r6, 8000b96 <__udivmoddi4+0xa2>
 8000b8e:	40dc      	lsrs	r4, r3
 8000b90:	2300      	movs	r3, #0
 8000b92:	e9c6 4300 	strd	r4, r3, [r6]
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0xbc>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	f000 80ed 	beq.w	8000d7e <__udivmoddi4+0x28a>
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	e9c6 0500 	strd	r0, r5, [r6]
 8000baa:	4608      	mov	r0, r1
 8000bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb0:	fab3 f183 	clz	r1, r3
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	d149      	bne.n	8000c4c <__udivmoddi4+0x158>
 8000bb8:	42ab      	cmp	r3, r5
 8000bba:	d302      	bcc.n	8000bc2 <__udivmoddi4+0xce>
 8000bbc:	4282      	cmp	r2, r0
 8000bbe:	f200 80f8 	bhi.w	8000db2 <__udivmoddi4+0x2be>
 8000bc2:	1a84      	subs	r4, r0, r2
 8000bc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000bc8:	2001      	movs	r0, #1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	2e00      	cmp	r6, #0
 8000bce:	d0e2      	beq.n	8000b96 <__udivmoddi4+0xa2>
 8000bd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000bd4:	e7df      	b.n	8000b96 <__udivmoddi4+0xa2>
 8000bd6:	b902      	cbnz	r2, 8000bda <__udivmoddi4+0xe6>
 8000bd8:	deff      	udf	#255	; 0xff
 8000bda:	fab2 f382 	clz	r3, r2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 8090 	bne.w	8000d04 <__udivmoddi4+0x210>
 8000be4:	1a8a      	subs	r2, r1, r2
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bf4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bf8:	0c22      	lsrs	r2, r4, #16
 8000bfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bfe:	fb0e f005 	mul.w	r0, lr, r5
 8000c02:	4290      	cmp	r0, r2
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x124>
 8000c06:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x122>
 8000c10:	4290      	cmp	r0, r2
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2b8>
 8000c16:	4645      	mov	r5, r8
 8000c18:	1a12      	subs	r2, r2, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c20:	fb07 2210 	mls	r2, r7, r0, r2
 8000c24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x14e>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x14c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2c2>
 8000c40:	4610      	mov	r0, r2
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c4a:	e79f      	b.n	8000b8c <__udivmoddi4+0x98>
 8000c4c:	f1c1 0720 	rsb	r7, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c62:	40fd      	lsrs	r5, r7
 8000c64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c68:	4323      	orrs	r3, r4
 8000c6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	fb09 5518 	mls	r5, r9, r8, r5
 8000c76:	0c1c      	lsrs	r4, r3, #16
 8000c78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	fa02 f201 	lsl.w	r2, r2, r1
 8000c86:	fa00 f001 	lsl.w	r0, r0, r1
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b0>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2b4>
 8000c98:	42a5      	cmp	r5, r4
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2b4>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4464      	add	r4, ip
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	b29d      	uxth	r5, r3
 8000ca8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cac:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1da>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2ac>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2ac>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	4464      	add	r4, ip
 8000cce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	42ac      	cmp	r4, r5
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46ae      	mov	lr, r5
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x29c>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x298>
 8000ce4:	b156      	cbz	r6, 8000cfc <__udivmoddi4+0x208>
 8000ce6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cea:	eb64 040e 	sbc.w	r4, r4, lr
 8000cee:	fa04 f707 	lsl.w	r7, r4, r7
 8000cf2:	40ca      	lsrs	r2, r1
 8000cf4:	40cc      	lsrs	r4, r1
 8000cf6:	4317      	orrs	r7, r2
 8000cf8:	e9c6 7400 	strd	r7, r4, [r6]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	2100      	movs	r1, #0
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	f1c3 0120 	rsb	r1, r3, #32
 8000d08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d10:	fa25 f101 	lsr.w	r1, r5, r1
 8000d14:	409d      	lsls	r5, r3
 8000d16:	432a      	orrs	r2, r5
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d24:	fb07 1510 	mls	r5, r7, r0, r1
 8000d28:	0c11      	lsrs	r1, r2, #16
 8000d2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d32:	428d      	cmp	r5, r1
 8000d34:	fa04 f403 	lsl.w	r4, r4, r3
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x258>
 8000d3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b0>
 8000d44:	428d      	cmp	r5, r1
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b0>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4461      	add	r1, ip
 8000d4c:	1b49      	subs	r1, r1, r5
 8000d4e:	b292      	uxth	r2, r2
 8000d50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d54:	fb07 1115 	mls	r1, r7, r5, r1
 8000d58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d60:	4291      	cmp	r1, r2
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x282>
 8000d64:	eb1c 0202 	adds.w	r2, ip, r2
 8000d68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2a8>
 8000d6e:	4291      	cmp	r1, r2
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2a8>
 8000d72:	3d02      	subs	r5, #2
 8000d74:	4462      	add	r2, ip
 8000d76:	1a52      	subs	r2, r2, r1
 8000d78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0xfc>
 8000d7e:	4631      	mov	r1, r6
 8000d80:	4630      	mov	r0, r6
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xa2>
 8000d84:	4639      	mov	r1, r7
 8000d86:	e6e6      	b.n	8000b56 <__udivmoddi4+0x62>
 8000d88:	4610      	mov	r0, r2
 8000d8a:	e6fb      	b.n	8000b84 <__udivmoddi4+0x90>
 8000d8c:	4548      	cmp	r0, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d9c:	4645      	mov	r5, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x282>
 8000da0:	462b      	mov	r3, r5
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1da>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x258>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b0>
 8000dac:	3d02      	subs	r5, #2
 8000dae:	4462      	add	r2, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x124>
 8000db2:	4608      	mov	r0, r1
 8000db4:	e70a      	b.n	8000bcc <__udivmoddi4+0xd8>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x14e>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 fda9 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f857 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 fa1f 	bl	8001210 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dd2:	f000 f8bd 	bl	8000f50 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dd6:	f000 f8e9 	bl	8000fac <MX_I2S3_Init>
  MX_SPI1_Init();
 8000dda:	f000 f917 	bl	800100c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000dde:	f009 fa03 	bl	800a1e8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000de2:	f000 f9eb 	bl	80011bc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000de6:	f000 f947 	bl	8001078 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dea:	2100      	movs	r1, #0
 8000dec:	4820      	ldr	r0, [pc, #128]	; (8000e70 <main+0xb0>)
 8000dee:	f004 fefd 	bl	8005bec <HAL_TIM_PWM_Start>

  int i = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000df6:	f009 fa1d 	bl	800a234 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // HAL_UART_Transmit(&huart2, (uint8_t*) "Hello", 5, 1);
    int p = 1500 + 500*sin(i/100.0);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fb36 	bl	800046c <__aeabi_i2d>
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <main+0xb4>)
 8000e06:	f7ff fcc5 	bl	8000794 <__aeabi_ddiv>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	ec43 2b17 	vmov	d7, r2, r3
 8000e12:	eeb0 0a47 	vmov.f32	s0, s14
 8000e16:	eef0 0a67 	vmov.f32	s1, s15
 8000e1a:	f009 fe3d 	bl	800aa98 <sin>
 8000e1e:	ec51 0b10 	vmov	r0, r1, d0
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <main+0xb8>)
 8000e28:	f7ff fb8a 	bl	8000540 <__aeabi_dmul>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	a30c      	add	r3, pc, #48	; (adr r3, 8000e68 <main+0xa8>)
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	f7ff f9cb 	bl	80001d4 <__adddf3>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	f7ff fe15 	bl	8000a74 <__aeabi_d2iz>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	603b      	str	r3, [r7, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, p);
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <main+0xb0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(10);
 8000e56:	200a      	movs	r0, #10
 8000e58:	f000 fdd2 	bl	8001a00 <HAL_Delay>
    i++;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
  {
 8000e62:	e7c8      	b.n	8000df6 <main+0x36>
 8000e64:	f3af 8000 	nop.w
 8000e68:	00000000 	.word	0x00000000
 8000e6c:	40977000 	.word	0x40977000
 8000e70:	2000018c 	.word	0x2000018c
 8000e74:	40590000 	.word	0x40590000
 8000e78:	407f4000 	.word	0x407f4000

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	; 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	2230      	movs	r2, #48	; 0x30
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f009 fd72 	bl	800a974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <SystemClock_Config+0xcc>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <SystemClock_Config+0xcc>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <SystemClock_Config+0xcc>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <SystemClock_Config+0xd0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <SystemClock_Config+0xd0>)
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <SystemClock_Config+0xd0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eec:	2308      	movs	r3, #8
 8000eee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ef0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000efa:	2307      	movs	r3, #7
 8000efc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 ff66 	bl	8004dd4 <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f0e:	f000 fa7d 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f12:	230f      	movs	r3, #15
 8000f14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f16:	2302      	movs	r3, #2
 8000f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2105      	movs	r1, #5
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 f9c7 	bl	80052c4 <HAL_RCC_ClockConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f3c:	f000 fa66 	bl	800140c <Error_Handler>
  }
}
 8000f40:	bf00      	nop
 8000f42:	3750      	adds	r7, #80	; 0x50
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40007000 	.word	0x40007000

08000f50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <MX_I2C1_Init+0x54>)
 8000f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f5c:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <MX_I2C1_Init+0x58>)
 8000f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f8e:	f003 f93d 	bl	800420c <HAL_I2C_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f98:	f000 fa38 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000098 	.word	0x20000098
 8000fa4:	40005400 	.word	0x40005400
 8000fa8:	000186a0 	.word	0x000186a0

08000fac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <MX_I2S3_Init+0x54>)
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <MX_I2S3_Init+0x58>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_I2S3_Init+0x54>)
 8000fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fbc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <MX_I2S3_Init+0x54>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_I2S3_Init+0x54>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <MX_I2S3_Init+0x54>)
 8000fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_I2S3_Init+0x54>)
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <MX_I2S3_Init+0x5c>)
 8000fd6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_I2S3_Init+0x54>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_I2S3_Init+0x54>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_I2S3_Init+0x54>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_I2S3_Init+0x54>)
 8000fec:	f003 fa52 	bl	8004494 <HAL_I2S_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000ff6:	f000 fa09 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000ec 	.word	0x200000ec
 8001004:	40003c00 	.word	0x40003c00
 8001008:	00017700 	.word	0x00017700

0800100c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_SPI1_Init+0x64>)
 8001012:	4a18      	ldr	r2, [pc, #96]	; (8001074 <MX_SPI1_Init+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_SPI1_Init+0x64>)
 8001018:	f44f 7282 	mov.w	r2, #260	; 0x104
 800101c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_SPI1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_SPI1_Init+0x64>)
 8001038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_SPI1_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_SPI1_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <MX_SPI1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_SPI1_Init+0x64>)
 8001058:	220a      	movs	r2, #10
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_SPI1_Init+0x64>)
 800105e:	f004 fc93 	bl	8005988 <HAL_SPI_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001068:	f000 f9d0 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000134 	.word	0x20000134
 8001074:	40013000 	.word	0x40013000

08001078 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b096      	sub	sp, #88	; 0x58
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2220      	movs	r2, #32
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f009 fc5f 	bl	800a974 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010b6:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <MX_TIM1_Init+0x13c>)
 80010b8:	4a3f      	ldr	r2, [pc, #252]	; (80011b8 <MX_TIM1_Init+0x140>)
 80010ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 80010bc:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <MX_TIM1_Init+0x13c>)
 80010be:	22a8      	movs	r2, #168	; 0xa8
 80010c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <MX_TIM1_Init+0x13c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <MX_TIM1_Init+0x13c>)
 80010ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80010ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <MX_TIM1_Init+0x13c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <MX_TIM1_Init+0x13c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <MX_TIM1_Init+0x13c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010e2:	4834      	ldr	r0, [pc, #208]	; (80011b4 <MX_TIM1_Init+0x13c>)
 80010e4:	f004 fcd9 	bl	8005a9a <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010ee:	f000 f98d 	bl	800140c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010fc:	4619      	mov	r1, r3
 80010fe:	482d      	ldr	r0, [pc, #180]	; (80011b4 <MX_TIM1_Init+0x13c>)
 8001100:	f004 fefe 	bl	8005f00 <HAL_TIM_ConfigClockSource>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800110a:	f000 f97f 	bl	800140c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800110e:	4829      	ldr	r0, [pc, #164]	; (80011b4 <MX_TIM1_Init+0x13c>)
 8001110:	f004 fd12 	bl	8005b38 <HAL_TIM_PWM_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800111a:	f000 f977 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001126:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800112a:	4619      	mov	r1, r3
 800112c:	4821      	ldr	r0, [pc, #132]	; (80011b4 <MX_TIM1_Init+0x13c>)
 800112e:	f005 facb 	bl	80066c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001138:	f000 f968 	bl	800140c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113c:	2360      	movs	r3, #96	; 0x60
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <MX_TIM1_Init+0x13c>)
 8001164:	f004 fe0a 	bl	8005d7c <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800116e:	f000 f94d 	bl	800140c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_TIM1_Init+0x13c>)
 8001196:	f005 fb13 	bl	80067c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80011a0:	f000 f934 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_TIM1_Init+0x13c>)
 80011a6:	f000 fa91 	bl	80016cc <HAL_TIM_MspPostInit>

}
 80011aa:	bf00      	nop
 80011ac:	3758      	adds	r7, #88	; 0x58
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000018c 	.word	0x2000018c
 80011b8:	40010000 	.word	0x40010000

080011bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <MX_USART2_UART_Init+0x50>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011f4:	f005 fb36 	bl	8006864 <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fe:	f000 f905 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001d4 	.word	0x200001d4
 800120c:	40004400 	.word	0x40004400

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	; 0x30
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	4b72      	ldr	r3, [pc, #456]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a71      	ldr	r2, [pc, #452]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 8001230:	f043 0310 	orr.w	r3, r3, #16
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	4b6b      	ldr	r3, [pc, #428]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a6a      	ldr	r2, [pc, #424]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b68      	ldr	r3, [pc, #416]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b64      	ldr	r3, [pc, #400]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a63      	ldr	r2, [pc, #396]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a5c      	ldr	r2, [pc, #368]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b56      	ldr	r3, [pc, #344]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a55      	ldr	r2, [pc, #340]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b4f      	ldr	r3, [pc, #316]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a4e      	ldr	r2, [pc, #312]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <MX_GPIO_Init+0x1e4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2108      	movs	r1, #8
 80012d2:	4849      	ldr	r0, [pc, #292]	; (80013f8 <MX_GPIO_Init+0x1e8>)
 80012d4:	f000 fe66 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	2101      	movs	r1, #1
 80012dc:	4847      	ldr	r0, [pc, #284]	; (80013fc <MX_GPIO_Init+0x1ec>)
 80012de:	f000 fe61 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012e2:	2200      	movs	r2, #0
 80012e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80012e8:	4845      	ldr	r0, [pc, #276]	; (8001400 <MX_GPIO_Init+0x1f0>)
 80012ea:	f000 fe5b 	bl	8001fa4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012ee:	2308      	movs	r3, #8
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	483c      	ldr	r0, [pc, #240]	; (80013f8 <MX_GPIO_Init+0x1e8>)
 8001306:	f000 fcb1 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800130a:	2301      	movs	r3, #1
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4836      	ldr	r0, [pc, #216]	; (80013fc <MX_GPIO_Init+0x1ec>)
 8001322:	f000 fca3 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001326:	2308      	movs	r3, #8
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001336:	2305      	movs	r3, #5
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	482e      	ldr	r0, [pc, #184]	; (80013fc <MX_GPIO_Init+0x1ec>)
 8001342:	f000 fc93 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001346:	2301      	movs	r3, #1
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800134a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	482a      	ldr	r0, [pc, #168]	; (8001404 <MX_GPIO_Init+0x1f4>)
 800135c:	f000 fc86 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001360:	2304      	movs	r3, #4
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4825      	ldr	r0, [pc, #148]	; (8001408 <MX_GPIO_Init+0x1f8>)
 8001374:	f000 fc7a 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800138a:	2305      	movs	r3, #5
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	481c      	ldr	r0, [pc, #112]	; (8001408 <MX_GPIO_Init+0x1f8>)
 8001396:	f000 fc69 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800139a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800139e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4813      	ldr	r0, [pc, #76]	; (8001400 <MX_GPIO_Init+0x1f0>)
 80013b4:	f000 fc5a 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013b8:	2320      	movs	r3, #32
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <MX_GPIO_Init+0x1f0>)
 80013cc:	f000 fc4e 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_GPIO_Init+0x1e8>)
 80013e6:	f000 fc41 	bl	8001c6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ea:	bf00      	nop
 80013ec:	3730      	adds	r7, #48	; 0x30
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	e7fe      	b.n	8001414 <Error_Handler+0x8>
	...

08001418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_MspInit+0x4c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_MspInit+0x4c>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_MspInit+0x4c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_MspInit+0x4c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001456:	2007      	movs	r0, #7
 8001458:	f000 fbc6 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800

08001468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <HAL_I2C_MspInit+0x84>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d12c      	bne.n	80014e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_I2C_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_I2C_MspInit+0x88>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_I2C_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80014a6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ac:	2312      	movs	r3, #18
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b8:	2304      	movs	r3, #4
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	480c      	ldr	r0, [pc, #48]	; (80014f4 <HAL_I2C_MspInit+0x8c>)
 80014c4:	f000 fbd2 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_I2C_MspInit+0x88>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_I2C_MspInit+0x88>)
 80014d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_I2C_MspInit+0x88>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40005400 	.word	0x40005400
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020400 	.word	0x40020400

080014f8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a31      	ldr	r2, [pc, #196]	; (80015e8 <HAL_I2S_MspInit+0xf0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d15a      	bne.n	80015de <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001528:	2301      	movs	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800152c:	23c0      	movs	r3, #192	; 0xc0
 800152e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001530:	2302      	movs	r3, #2
 8001532:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4618      	mov	r0, r3
 800153a:	f004 f8e3 	bl	8005704 <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001544:	f7ff ff62 	bl	800140c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_I2S_MspInit+0xf4>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a26      	ldr	r2, [pc, #152]	; (80015ec <HAL_I2S_MspInit+0xf4>)
 8001552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_I2S_MspInit+0xf4>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_I2S_MspInit+0xf4>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <HAL_I2S_MspInit+0xf4>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6313      	str	r3, [r2, #48]	; 0x30
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_I2S_MspInit+0xf4>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_I2S_MspInit+0xf4>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4a18      	ldr	r2, [pc, #96]	; (80015ec <HAL_I2S_MspInit+0xf4>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_I2S_MspInit+0xf4>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800159c:	2310      	movs	r3, #16
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ac:	2306      	movs	r3, #6
 80015ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	4619      	mov	r1, r3
 80015b6:	480e      	ldr	r0, [pc, #56]	; (80015f0 <HAL_I2S_MspInit+0xf8>)
 80015b8:	f000 fb58 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80015bc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ce:	2306      	movs	r3, #6
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <HAL_I2S_MspInit+0xfc>)
 80015da:	f000 fb47 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3738      	adds	r7, #56	; 0x38
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40003c00 	.word	0x40003c00
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020800 	.word	0x40020800

080015f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_SPI_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12b      	bne.n	8001672 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_SPI_MspInit+0x88>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_SPI_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001652:	23e0      	movs	r3, #224	; 0xe0
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001662:	2305      	movs	r3, #5
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_SPI_MspInit+0x8c>)
 800166e:	f000 fafd 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40013000 	.word	0x40013000
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000

08001688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_TIM_Base_MspInit+0x3c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10d      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_TIM_Base_MspInit+0x40>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <HAL_TIM_Base_MspInit+0x40>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <HAL_TIM_Base_MspInit+0x40>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40010000 	.word	0x40010000
 80016c8:	40023800 	.word	0x40023800

080016cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <HAL_TIM_MspPostInit+0x68>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d11e      	bne.n	800172c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_TIM_MspPostInit+0x6c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_TIM_MspPostInit+0x6c>)
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_TIM_MspPostInit+0x6c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800170a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800171c:	2301      	movs	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4619      	mov	r1, r3
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_TIM_MspPostInit+0x70>)
 8001728:	f000 faa0 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40010000 	.word	0x40010000
 8001738:	40023800 	.word	0x40023800
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_UART_MspInit+0x84>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d12b      	bne.n	80017ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0x88>)
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800179a:	230c      	movs	r3, #12
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017aa:	2307      	movs	r3, #7
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_UART_MspInit+0x8c>)
 80017b6:	f000 fa59 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40004400 	.word	0x40004400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020000 	.word	0x40020000

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181c:	f000 f8d0 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <OTG_FS_IRQHandler+0x10>)
 800182a:	f000 feb5 	bl	8002598 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000600 	.word	0x20000600

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f009 f89c 	bl	800a9a4 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20020000 	.word	0x20020000
 8001898:	00000400 	.word	0x00000400
 800189c:	2000021c 	.word	0x2000021c
 80018a0:	20000b28 	.word	0x20000b28

080018a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001900 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018cc:	f7ff ffea 	bl	80018a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	; (8001908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	; (800190c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	; (8001914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f6:	f009 f85b 	bl	800a9b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fa:	f7ff fa61 	bl	8000dc0 <main>
  bx  lr    
 80018fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800190c:	0800bd38 	.word	0x0800bd38
  ldr r2, =_sbss
 8001910:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001914:	20000b28 	.word	0x20000b28

08001918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC_IRQHandler>
	...

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <HAL_Init+0x40>)
 8001926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <HAL_Init+0x40>)
 8001932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_Init+0x40>)
 800193e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001944:	2003      	movs	r0, #3
 8001946:	f000 f94f 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194a:	2000      	movs	r0, #0
 800194c:	f000 f808 	bl	8001960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001950:	f7ff fd62 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023c00 	.word	0x40023c00

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_InitTick+0x54>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_InitTick+0x58>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f967 	bl	8001c52 <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00e      	b.n	80019ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d80a      	bhi.n	80019aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f000 f92f 	bl	8001bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <HAL_InitTick+0x5c>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000008 	.word	0x20000008
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000008 	.word	0x20000008
 80019e4:	20000220 	.word	0x20000220

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000220 	.word	0x20000220

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d005      	beq.n	8001a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_Delay+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a26:	bf00      	nop
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f7      	bhi.n	8001a28 <HAL_Delay+0x28>
  {
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008

08001a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 0307 	and.w	r3, r3, #7
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	db0b      	blt.n	8001ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	4907      	ldr	r1, [pc, #28]	; (8001ae4 <__NVIC_EnableIRQ+0x38>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	2001      	movs	r0, #1
 8001ace:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
         );
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb4:	d301      	bcc.n	8001bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00f      	b.n	8001bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <SysTick_Config+0x40>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f7ff ff8e 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <SysTick_Config+0x40>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <SysTick_Config+0x40>)
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	e000e010 	.word	0xe000e010

08001be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff29 	bl	8001a48 <__NVIC_SetPriorityGrouping>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c10:	f7ff ff3e 	bl	8001a90 <__NVIC_GetPriorityGrouping>
 8001c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff8e 	bl	8001b3c <NVIC_EncodePriority>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff31 	bl	8001aac <__NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffa2 	bl	8001ba4 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e16b      	b.n	8001f60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 815a 	bne.w	8001f5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d005      	beq.n	8001cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d130      	bne.n	8001d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 0201 	and.w	r2, r3, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d017      	beq.n	8001d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80b4 	beq.w	8001f5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b60      	ldr	r3, [pc, #384]	; (8001f78 <HAL_GPIO_Init+0x30c>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a5f      	ldr	r2, [pc, #380]	; (8001f78 <HAL_GPIO_Init+0x30c>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_GPIO_Init+0x30c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0e:	4a5b      	ldr	r2, [pc, #364]	; (8001f7c <HAL_GPIO_Init+0x310>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a52      	ldr	r2, [pc, #328]	; (8001f80 <HAL_GPIO_Init+0x314>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d02b      	beq.n	8001e92 <HAL_GPIO_Init+0x226>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a51      	ldr	r2, [pc, #324]	; (8001f84 <HAL_GPIO_Init+0x318>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d025      	beq.n	8001e8e <HAL_GPIO_Init+0x222>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a50      	ldr	r2, [pc, #320]	; (8001f88 <HAL_GPIO_Init+0x31c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <HAL_GPIO_Init+0x21e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4f      	ldr	r2, [pc, #316]	; (8001f8c <HAL_GPIO_Init+0x320>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_Init+0x21a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4e      	ldr	r2, [pc, #312]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x216>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4d      	ldr	r2, [pc, #308]	; (8001f94 <HAL_GPIO_Init+0x328>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_Init+0x212>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <HAL_GPIO_Init+0x32c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_Init+0x20e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4b      	ldr	r2, [pc, #300]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_Init+0x20a>
 8001e72:	2307      	movs	r3, #7
 8001e74:	e00e      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e76:	2308      	movs	r3, #8
 8001e78:	e00c      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e7a:	2306      	movs	r3, #6
 8001e7c:	e00a      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e7e:	2305      	movs	r3, #5
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e82:	2304      	movs	r3, #4
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	; (8001f7c <HAL_GPIO_Init+0x310>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <HAL_GPIO_Init+0x334>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed6:	4a32      	ldr	r2, [pc, #200]	; (8001fa0 <HAL_GPIO_Init+0x334>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_GPIO_Init+0x334>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f00:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <HAL_GPIO_Init+0x334>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <HAL_GPIO_Init+0x334>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <HAL_GPIO_Init+0x334>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <HAL_GPIO_Init+0x334>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <HAL_GPIO_Init+0x334>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f ae90 	bls.w	8001c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40021400 	.word	0x40021400
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	40021c00 	.word	0x40021c00
 8001fa0:	40013c00 	.word	0x40013c00

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	041a      	lsls	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af02      	add	r7, sp, #8
 8001fdc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e059      	b.n	800209c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f008 f94e 	bl	800a2a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2203      	movs	r2, #3
 800200c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002016:	d102      	bne.n	800201e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f004 ff57 	bl	8006ed6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7c1a      	ldrb	r2, [r3, #16]
 8002030:	f88d 2000 	strb.w	r2, [sp]
 8002034:	3304      	adds	r3, #4
 8002036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002038:	f004 fed8 	bl	8006dec <USB_CoreInit>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2202      	movs	r2, #2
 8002046:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e026      	b.n	800209c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2101      	movs	r1, #1
 8002054:	4618      	mov	r0, r3
 8002056:	f004 ff4f 	bl	8006ef8 <USB_SetCurrentMode>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e017      	b.n	800209c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7c1a      	ldrb	r2, [r3, #16]
 8002074:	f88d 2000 	strb.w	r2, [sp]
 8002078:	3304      	adds	r3, #4
 800207a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800207c:	f005 f8f2 	bl	8007264 <USB_HostInit>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e004      	b.n	800209c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08b      	sub	sp, #44	; 0x2c
 80020a8:	af04      	add	r7, sp, #16
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	70fb      	strb	r3, [r7, #3]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70bb      	strb	r3, [r7, #2]
 80020ba:	4613      	mov	r3, r2
 80020bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80020be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80020c0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_HCD_HC_Init+0x2c>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e09d      	b.n	800220c <HAL_HCD_HC_Init+0x168>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	3319      	adds	r3, #25
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	3314      	adds	r3, #20
 80020fc:	787a      	ldrb	r2, [r7, #1]
 80020fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	3315      	adds	r3, #21
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3326      	adds	r3, #38	; 0x26
 8002124:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002128:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	78bb      	ldrb	r3, [r7, #2]
 800212e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002132:	b2d8      	uxtb	r0, r3
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	3316      	adds	r3, #22
 8002142:	4602      	mov	r2, r0
 8002144:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fbc8 	bl	80028e0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002150:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002154:	2b00      	cmp	r3, #0
 8002156:	da0a      	bge.n	800216e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3317      	adds	r3, #23
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
 800216c:	e009      	b.n	8002182 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	3317      	adds	r3, #23
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f005 f9d0 	bl	800752c <USB_GetHostSpeed>
 800218c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800218e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d10b      	bne.n	80021ae <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002196:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_HCD_HC_Init+0x10a>
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d104      	bne.n	80021ae <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2bbc      	cmp	r3, #188	; 0xbc
 80021a8:	d901      	bls.n	80021ae <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80021aa:	23bc      	movs	r3, #188	; 0xbc
 80021ac:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	3318      	adds	r3, #24
 80021be:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80021c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	b298      	uxth	r0, r3
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	3328      	adds	r3, #40	; 0x28
 80021d8:	4602      	mov	r2, r0
 80021da:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	787c      	ldrb	r4, [r7, #1]
 80021e6:	78ba      	ldrb	r2, [r7, #2]
 80021e8:	78f9      	ldrb	r1, [r7, #3]
 80021ea:	9302      	str	r3, [sp, #8]
 80021ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	4623      	mov	r3, r4
 80021fa:	f005 f9bf 	bl	800757c <USB_HC_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
}
 800220c:	4618      	mov	r0, r3
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}

08002214 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_HCD_HC_Halt+0x1e>
 800222e:	2302      	movs	r3, #2
 8002230:	e00f      	b.n	8002252 <HAL_HCD_HC_Halt+0x3e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f005 fd51 	bl	8007cea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	4608      	mov	r0, r1
 8002266:	4611      	mov	r1, r2
 8002268:	461a      	mov	r2, r3
 800226a:	4603      	mov	r3, r0
 800226c:	70fb      	strb	r3, [r7, #3]
 800226e:	460b      	mov	r3, r1
 8002270:	70bb      	strb	r3, [r7, #2]
 8002272:	4613      	mov	r3, r2
 8002274:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	3317      	adds	r3, #23
 8002286:	78ba      	ldrb	r2, [r7, #2]
 8002288:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	3326      	adds	r3, #38	; 0x26
 800229a:	787a      	ldrb	r2, [r7, #1]
 800229c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800229e:	7c3b      	ldrb	r3, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d114      	bne.n	80022ce <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	332a      	adds	r3, #42	; 0x2a
 80022b4:	2203      	movs	r2, #3
 80022b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3319      	adds	r3, #25
 80022c8:	7f3a      	ldrb	r2, [r7, #28]
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e009      	b.n	80022e2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	332a      	adds	r3, #42	; 0x2a
 80022de:	2202      	movs	r2, #2
 80022e0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022e2:	787b      	ldrb	r3, [r7, #1]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	f200 8102 	bhi.w	80024ee <HAL_HCD_HC_SubmitRequest+0x292>
 80022ea:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80022ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f0:	08002301 	.word	0x08002301
 80022f4:	080024d9 	.word	0x080024d9
 80022f8:	080023c5 	.word	0x080023c5
 80022fc:	0800244f 	.word	0x0800244f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002300:	7c3b      	ldrb	r3, [r7, #16]
 8002302:	2b01      	cmp	r3, #1
 8002304:	f040 80f5 	bne.w	80024f2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002308:	78bb      	ldrb	r3, [r7, #2]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d12d      	bne.n	800236a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800230e:	8b3b      	ldrh	r3, [r7, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	333d      	adds	r3, #61	; 0x3d
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	333d      	adds	r3, #61	; 0x3d
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10a      	bne.n	8002354 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	332a      	adds	r3, #42	; 0x2a
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002352:	e0ce      	b.n	80024f2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	332a      	adds	r3, #42	; 0x2a
 8002364:	2202      	movs	r2, #2
 8002366:	701a      	strb	r2, [r3, #0]
      break;
 8002368:	e0c3      	b.n	80024f2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	331a      	adds	r3, #26
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	f040 80b8 	bne.w	80024f2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	333c      	adds	r3, #60	; 0x3c
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	332a      	adds	r3, #42	; 0x2a
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
      break;
 80023ac:	e0a1      	b.n	80024f2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	332a      	adds	r3, #42	; 0x2a
 80023be:	2202      	movs	r2, #2
 80023c0:	701a      	strb	r2, [r3, #0]
      break;
 80023c2:	e096      	b.n	80024f2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023c4:	78bb      	ldrb	r3, [r7, #2]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d120      	bne.n	800240c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	333d      	adds	r3, #61	; 0x3d
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	332a      	adds	r3, #42	; 0x2a
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023f4:	e07e      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	332a      	adds	r3, #42	; 0x2a
 8002406:	2202      	movs	r2, #2
 8002408:	701a      	strb	r2, [r3, #0]
      break;
 800240a:	e073      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	333c      	adds	r3, #60	; 0x3c
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	332a      	adds	r3, #42	; 0x2a
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
      break;
 8002436:	e05d      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	332a      	adds	r3, #42	; 0x2a
 8002448:	2202      	movs	r2, #2
 800244a:	701a      	strb	r2, [r3, #0]
      break;
 800244c:	e052      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800244e:	78bb      	ldrb	r3, [r7, #2]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d120      	bne.n	8002496 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	333d      	adds	r3, #61	; 0x3d
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	332a      	adds	r3, #42	; 0x2a
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800247e:	e039      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	332a      	adds	r3, #42	; 0x2a
 8002490:	2202      	movs	r2, #2
 8002492:	701a      	strb	r2, [r3, #0]
      break;
 8002494:	e02e      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	333c      	adds	r3, #60	; 0x3c
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	332a      	adds	r3, #42	; 0x2a
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
      break;
 80024c0:	e018      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	332a      	adds	r3, #42	; 0x2a
 80024d2:	2202      	movs	r2, #2
 80024d4:	701a      	strb	r2, [r3, #0]
      break;
 80024d6:	e00d      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	332a      	adds	r3, #42	; 0x2a
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
      break;
 80024ec:	e002      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80024ee:	bf00      	nop
 80024f0:	e000      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80024f2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	332c      	adds	r3, #44	; 0x2c
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	8b39      	ldrh	r1, [r7, #24]
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4403      	add	r3, r0
 8002518:	3334      	adds	r3, #52	; 0x34
 800251a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	334c      	adds	r3, #76	; 0x4c
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3338      	adds	r3, #56	; 0x38
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3315      	adds	r3, #21
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	334d      	adds	r3, #77	; 0x4d
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	3310      	adds	r3, #16
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	1d19      	adds	r1, r3, #4
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	799b      	ldrb	r3, [r3, #6]
 8002586:	461a      	mov	r2, r3
 8002588:	f005 f924 	bl	80077d4 <USB_HC_StartXfer>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop

08002598 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f004 fe18 	bl	80071e4 <USB_GetMode>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	f040 80fb 	bne.w	80027b2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f004 fddb 	bl	800717c <USB_ReadInterrupts>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80f1 	beq.w	80027b0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f004 fdd2 	bl	800717c <USB_ReadInterrupts>
 80025d8:	4603      	mov	r3, r0
 80025da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025e2:	d104      	bne.n	80025ee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 fdc2 	bl	800717c <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002602:	d104      	bne.n	800260e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800260c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f004 fdb2 	bl	800717c <USB_ReadInterrupts>
 8002618:	4603      	mov	r3, r0
 800261a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800261e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002622:	d104      	bne.n	800262e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800262c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f004 fda2 	bl	800717c <USB_ReadInterrupts>
 8002638:	4603      	mov	r3, r0
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b02      	cmp	r3, #2
 8002640:	d103      	bne.n	800264a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2202      	movs	r2, #2
 8002648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f004 fd94 	bl	800717c <USB_ReadInterrupts>
 8002654:	4603      	mov	r3, r0
 8002656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800265a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800265e:	d120      	bne.n	80026a2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002668:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d113      	bne.n	80026a2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800267a:	2110      	movs	r1, #16
 800267c:	6938      	ldr	r0, [r7, #16]
 800267e:	f004 fc87 	bl	8006f90 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002682:	6938      	ldr	r0, [r7, #16]
 8002684:	f004 fcb6 	bl	8006ff4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7a5b      	ldrb	r3, [r3, #9]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d105      	bne.n	800269c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2101      	movs	r1, #1
 8002696:	4618      	mov	r0, r3
 8002698:	f004 fea8 	bl	80073ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f007 fe7f 	bl	800a3a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fd68 	bl	800717c <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b6:	d102      	bne.n	80026be <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f001 fd33 	bl	8004124 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f004 fd5a 	bl	800717c <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d106      	bne.n	80026e0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f007 fe48 	bl	800a368 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2208      	movs	r2, #8
 80026de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 fd49 	bl	800717c <USB_ReadInterrupts>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026f4:	d139      	bne.n	800276a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f005 fae4 	bl	8007cc8 <USB_HC_ReadInterrupt>
 8002700:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	e025      	b.n	8002754 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d018      	beq.n	800274e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800272e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002732:	d106      	bne.n	8002742 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	4619      	mov	r1, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f905 	bl	800294a <HCD_HC_IN_IRQHandler>
 8002740:	e005      	b.n	800274e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	4619      	mov	r1, r3
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 ff67 	bl	800361c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3301      	adds	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	795b      	ldrb	r3, [r3, #5]
 8002758:	461a      	mov	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4293      	cmp	r3, r2
 800275e:	d3d3      	bcc.n	8002708 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f004 fd04 	bl	800717c <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b10      	cmp	r3, #16
 800277c:	d101      	bne.n	8002782 <HAL_HCD_IRQHandler+0x1ea>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_HCD_IRQHandler+0x1ec>
 8002782:	2300      	movs	r3, #0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d014      	beq.n	80027b2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0210 	bic.w	r2, r2, #16
 8002796:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f001 fbe4 	bl	8003f66 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0210 	orr.w	r2, r2, #16
 80027ac:	619a      	str	r2, [r3, #24]
 80027ae:	e000      	b.n	80027b2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80027b0:	bf00      	nop
    }
  }
}
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_HCD_Start+0x16>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e013      	b.n	80027f6 <HAL_HCD_Start+0x3e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2101      	movs	r1, #1
 80027dc:	4618      	mov	r0, r3
 80027de:	f004 fe6c 	bl	80074ba <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f004 fb64 	bl	8006eb4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_HCD_Stop+0x16>
 8002810:	2302      	movs	r3, #2
 8002812:	e00d      	b.n	8002830 <HAL_HCD_Stop+0x32>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f005 fbbf 	bl	8007fa4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f004 fe0e 	bl	8007466 <USB_ResetPort>
 800284a:	4603      	mov	r3, r0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	334c      	adds	r3, #76	; 0x4c
 8002870:	781b      	ldrb	r3, [r3, #0]
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3338      	adds	r3, #56	; 0x38
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 fe50 	bl	800755a <USB_GetCurrentFrame>
 80028ba:	4603      	mov	r3, r0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f004 fe2b 	bl	800752c <USB_GetHostSpeed>
 80028d6:	4603      	mov	r3, r0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	331a      	adds	r3, #26
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	331b      	adds	r3, #27
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3325      	adds	r3, #37	; 0x25
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	3324      	adds	r3, #36	; 0x24
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f004 fc1a 	bl	80071a2 <USB_ReadChInterrupts>
 800296e:	4603      	mov	r3, r0
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d11a      	bne.n	80029ae <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	461a      	mov	r2, r3
 8002986:	2304      	movs	r3, #4
 8002988:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	334d      	adds	r3, #77	; 0x4d
 800299a:	2207      	movs	r2, #7
 800299c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 f99f 	bl	8007cea <USB_HC_Halt>
 80029ac:	e09e      	b.n	8002aec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 fbf3 	bl	80071a2 <USB_ReadChInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c6:	d11b      	bne.n	8002a00 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	334d      	adds	r3, #77	; 0x4d
 80029ec:	2208      	movs	r2, #8
 80029ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f005 f976 	bl	8007cea <USB_HC_Halt>
 80029fe:	e075      	b.n	8002aec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f004 fbca 	bl	80071a2 <USB_ReadChInterrupts>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d11a      	bne.n	8002a4e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	461a      	mov	r2, r3
 8002a26:	2308      	movs	r3, #8
 8002a28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	334d      	adds	r3, #77	; 0x4d
 8002a3a:	2206      	movs	r2, #6
 8002a3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f005 f94f 	bl	8007cea <USB_HC_Halt>
 8002a4c:	e04e      	b.n	8002aec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f004 fba3 	bl	80071a2 <USB_ReadChInterrupts>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a66:	d11b      	bne.n	8002aa0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	461a      	mov	r2, r3
 8002a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	334d      	adds	r3, #77	; 0x4d
 8002a8c:	2209      	movs	r2, #9
 8002a8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f005 f926 	bl	8007cea <USB_HC_Halt>
 8002a9e:	e025      	b.n	8002aec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f004 fb7a 	bl	80071a2 <USB_ReadChInterrupts>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab4:	2b80      	cmp	r3, #128	; 0x80
 8002ab6:	d119      	bne.n	8002aec <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	334d      	adds	r3, #77	; 0x4d
 8002ada:	2207      	movs	r2, #7
 8002adc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f005 f8ff 	bl	8007cea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 fb54 	bl	80071a2 <USB_ReadChInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b04:	d112      	bne.n	8002b2c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f005 f8eb 	bl	8007cea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b26:	6093      	str	r3, [r2, #8]
 8002b28:	f000 bd75 	b.w	8003616 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 fb34 	bl	80071a2 <USB_ReadChInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	f040 8128 	bne.w	8002d96 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	461a      	mov	r2, r3
 8002b54:	2320      	movs	r3, #32
 8002b56:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	331b      	adds	r3, #27
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d119      	bne.n	8002ba2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	331b      	adds	r3, #27
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	0151      	lsls	r1, r2, #5
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	440a      	add	r2, r1
 8002b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	799b      	ldrb	r3, [r3, #6]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01b      	beq.n	8002be2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3330      	adds	r3, #48	; 0x30
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	1ac9      	subs	r1, r1, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4403      	add	r3, r0
 8002bde:	3338      	adds	r3, #56	; 0x38
 8002be0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	334d      	adds	r3, #77	; 0x4d
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	3344      	adds	r3, #68	; 0x44
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	461a      	mov	r2, r3
 8002c18:	2301      	movs	r3, #1
 8002c1a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3326      	adds	r3, #38	; 0x26
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3326      	adds	r3, #38	; 0x26
 8002c42:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d110      	bne.n	8002c6a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f005 f84a 	bl	8007cea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	461a      	mov	r2, r3
 8002c64:	2310      	movs	r3, #16
 8002c66:	6093      	str	r3, [r2, #8]
 8002c68:	e03d      	b.n	8002ce6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3326      	adds	r3, #38	; 0x26
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d00a      	beq.n	8002c96 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3326      	adds	r3, #38	; 0x26
 8002c90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d127      	bne.n	8002ce6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	0151      	lsls	r1, r2, #5
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	440a      	add	r2, r1
 8002cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cb4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	334c      	adds	r3, #76	; 0x4c
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	334c      	adds	r3, #76	; 0x4c
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f007 fb6b 	bl	800a3bc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	799b      	ldrb	r3, [r3, #6]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d13b      	bne.n	8002d66 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3338      	adds	r3, #56	; 0x38
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4403      	add	r3, r0
 8002d0e:	3328      	adds	r3, #40	; 0x28
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	440b      	add	r3, r1
 8002d14:	1e59      	subs	r1, r3, #1
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4403      	add	r3, r0
 8002d24:	3328      	adds	r3, #40	; 0x28
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8470 	beq.w	8003616 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	333c      	adds	r3, #60	; 0x3c
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	f083 0301 	eor.w	r3, r3, #1
 8002d4e:	b2d8      	uxtb	r0, r3
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	333c      	adds	r3, #60	; 0x3c
 8002d5e:	4602      	mov	r2, r0
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	f000 bc58 	b.w	8003616 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	333c      	adds	r3, #60	; 0x3c
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	f083 0301 	eor.w	r3, r3, #1
 8002d7e:	b2d8      	uxtb	r0, r3
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	333c      	adds	r3, #60	; 0x3c
 8002d8e:	4602      	mov	r2, r0
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	f000 bc40 	b.w	8003616 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 f9ff 	bl	80071a2 <USB_ReadChInterrupts>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d131      	bne.n	8002e12 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	331a      	adds	r3, #26
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	f040 841f 	bne.w	8003616 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	331b      	adds	r3, #27
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	; 0x4d
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 ff6e 	bl	8007cea <USB_HC_Halt>
 8002e0e:	f000 bc02 	b.w	8003616 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f004 f9c1 	bl	80071a2 <USB_ReadChInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	f040 8305 	bne.w	8003436 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	334d      	adds	r3, #77	; 0x4d
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d114      	bne.n	8002e7e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	334d      	adds	r3, #77	; 0x4d
 8002e64:	2202      	movs	r2, #2
 8002e66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	334c      	adds	r3, #76	; 0x4c
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	e2cc      	b.n	8003418 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	334d      	adds	r3, #77	; 0x4d
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b06      	cmp	r3, #6
 8002e92:	d114      	bne.n	8002ebe <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	334d      	adds	r3, #77	; 0x4d
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	334c      	adds	r3, #76	; 0x4c
 8002eb8:	2205      	movs	r2, #5
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e2ac      	b.n	8003418 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	334d      	adds	r3, #77	; 0x4d
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b07      	cmp	r3, #7
 8002ed2:	d00b      	beq.n	8002eec <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	334d      	adds	r3, #77	; 0x4d
 8002ee4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ee6:	2b09      	cmp	r3, #9
 8002ee8:	f040 80a6 	bne.w	8003038 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	334d      	adds	r3, #77	; 0x4d
 8002efc:	2202      	movs	r2, #2
 8002efe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3344      	adds	r3, #68	; 0x44
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4403      	add	r3, r0
 8002f20:	3344      	adds	r3, #68	; 0x44
 8002f22:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3344      	adds	r3, #68	; 0x44
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d943      	bls.n	8002fc2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	3344      	adds	r3, #68	; 0x44
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	331a      	adds	r3, #26
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d123      	bne.n	8002fac <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	331b      	adds	r3, #27
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	331c      	adds	r3, #28
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	0151      	lsls	r1, r2, #5
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	440a      	add	r2, r1
 8002fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002faa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	334c      	adds	r3, #76	; 0x4c
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fc0:	e229      	b.n	8003416 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	334c      	adds	r3, #76	; 0x4c
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3326      	adds	r3, #38	; 0x26
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3326      	adds	r3, #38	; 0x26
 8002ffc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	f040 8209 	bne.w	8003416 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800301a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003022:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	461a      	mov	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003036:	e1ee      	b.n	8003416 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	334d      	adds	r3, #77	; 0x4d
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b05      	cmp	r3, #5
 800304c:	f040 80c8 	bne.w	80031e0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	334d      	adds	r3, #77	; 0x4d
 8003060:	2202      	movs	r2, #2
 8003062:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	331b      	adds	r3, #27
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b01      	cmp	r3, #1
 8003078:	f040 81ce 	bne.w	8003418 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	3326      	adds	r3, #38	; 0x26
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d16b      	bne.n	800316a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	3348      	adds	r3, #72	; 0x48
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	1c59      	adds	r1, r3, #1
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4403      	add	r3, r0
 80030b2:	3348      	adds	r3, #72	; 0x48
 80030b4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3348      	adds	r3, #72	; 0x48
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d943      	bls.n	8003154 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	3348      	adds	r3, #72	; 0x48
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	331b      	adds	r3, #27
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3344      	adds	r3, #68	; 0x44
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d809      	bhi.n	800311e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	331c      	adds	r3, #28
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	0151      	lsls	r1, r2, #5
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	440a      	add	r2, r1
 8003134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	334c      	adds	r3, #76	; 0x4c
 800314e:	2204      	movs	r2, #4
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e014      	b.n	800317e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	334c      	adds	r3, #76	; 0x4c
 8003164:	2202      	movs	r2, #2
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e009      	b.n	800317e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	334c      	adds	r3, #76	; 0x4c
 800317a:	2202      	movs	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	3326      	adds	r3, #38	; 0x26
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00b      	beq.n	80031ac <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3326      	adds	r3, #38	; 0x26
 80031a4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	f040 8136 	bne.w	8003418 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031c2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031ca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e11b      	b.n	8003418 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	334d      	adds	r3, #77	; 0x4d
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	f040 8081 	bne.w	80032fa <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	334d      	adds	r3, #77	; 0x4d
 8003208:	2202      	movs	r2, #2
 800320a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	331b      	adds	r3, #27
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	f040 80fa 	bne.w	8003418 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	334c      	adds	r3, #76	; 0x4c
 8003234:	2202      	movs	r2, #2
 8003236:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	0151      	lsls	r1, r2, #5
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	440a      	add	r2, r1
 800324e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003256:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	0151      	lsls	r1, r2, #5
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	440a      	add	r2, r1
 800326e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003276:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	0151      	lsls	r1, r2, #5
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	440a      	add	r2, r1
 800328e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003292:	f023 0320 	bic.w	r3, r3, #32
 8003296:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	3326      	adds	r3, #38	; 0x26
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3326      	adds	r3, #38	; 0x26
 80032be:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	f040 80a9 	bne.w	8003418 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032dc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032e4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e08e      	b.n	8003418 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	334d      	adds	r3, #77	; 0x4d
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d143      	bne.n	8003398 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	334d      	adds	r3, #77	; 0x4d
 8003320:	2202      	movs	r2, #2
 8003322:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334c      	adds	r3, #76	; 0x4c
 8003334:	2202      	movs	r2, #2
 8003336:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3326      	adds	r3, #38	; 0x26
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3326      	adds	r3, #38	; 0x26
 800335e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003360:	2b02      	cmp	r3, #2
 8003362:	d159      	bne.n	8003418 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800337a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003382:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003390:	461a      	mov	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e03f      	b.n	8003418 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	334d      	adds	r3, #77	; 0x4d
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d126      	bne.n	80033fc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	334d      	adds	r3, #77	; 0x4d
 80033be:	2202      	movs	r2, #2
 80033c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3344      	adds	r3, #68	; 0x44
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1c59      	adds	r1, r3, #1
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4403      	add	r3, r0
 80033e2:	3344      	adds	r3, #68	; 0x44
 80033e4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	334c      	adds	r3, #76	; 0x4c
 80033f6:	2204      	movs	r2, #4
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e00d      	b.n	8003418 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334d      	adds	r3, #77	; 0x4d
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b02      	cmp	r3, #2
 8003410:	f000 8100 	beq.w	8003614 <HCD_HC_IN_IRQHandler+0xcca>
 8003414:	e000      	b.n	8003418 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003416:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	334c      	adds	r3, #76	; 0x4c
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f006 ffc4 	bl	800a3bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003434:	e0ef      	b.n	8003616 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f003 feaf 	bl	80071a2 <USB_ReadChInterrupts>
 8003444:	4603      	mov	r3, r0
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d12f      	bne.n	80034ae <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4413      	add	r3, r2
 8003456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345a:	461a      	mov	r2, r3
 800345c:	2340      	movs	r3, #64	; 0x40
 800345e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	334d      	adds	r3, #77	; 0x4d
 8003470:	2205      	movs	r2, #5
 8003472:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	331a      	adds	r3, #26
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3344      	adds	r3, #68	; 0x44
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f004 fc1f 	bl	8007cea <USB_HC_Halt>
 80034ac:	e0b3      	b.n	8003616 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f003 fe73 	bl	80071a2 <USB_ReadChInterrupts>
 80034bc:	4603      	mov	r3, r0
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	f040 80a7 	bne.w	8003616 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3326      	adds	r3, #38	; 0x26
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d11b      	bne.n	8003516 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3344      	adds	r3, #68	; 0x44
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	334d      	adds	r3, #77	; 0x4d
 8003502:	2204      	movs	r2, #4
 8003504:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f004 fbeb 	bl	8007cea <USB_HC_Halt>
 8003514:	e03f      	b.n	8003596 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3326      	adds	r3, #38	; 0x26
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3326      	adds	r3, #38	; 0x26
 800353c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800353e:	2b02      	cmp	r3, #2
 8003540:	d129      	bne.n	8003596 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3344      	adds	r3, #68	; 0x44
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	799b      	ldrb	r3, [r3, #6]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HCD_HC_IN_IRQHandler+0xc2a>
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	331b      	adds	r3, #27
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d110      	bne.n	8003596 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	334d      	adds	r3, #77	; 0x4d
 8003584:	2204      	movs	r2, #4
 8003586:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f004 fbaa 	bl	8007cea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	331b      	adds	r3, #27
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d129      	bne.n	8003600 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	331b      	adds	r3, #27
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	0151      	lsls	r1, r2, #5
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	440a      	add	r2, r1
 80035d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035de:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fa:	f043 0320 	orr.w	r3, r3, #32
 80035fe:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360c:	461a      	mov	r2, r3
 800360e:	2310      	movs	r3, #16
 8003610:	6093      	str	r3, [r2, #8]
 8003612:	e000      	b.n	8003616 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003614:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f003 fdb1 	bl	80071a2 <USB_ReadChInterrupts>
 8003640:	4603      	mov	r3, r0
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b04      	cmp	r3, #4
 8003648:	d11b      	bne.n	8003682 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4413      	add	r3, r2
 8003652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003656:	461a      	mov	r2, r3
 8003658:	2304      	movs	r3, #4
 800365a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	334d      	adds	r3, #77	; 0x4d
 800366c:	2207      	movs	r2, #7
 800366e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f004 fb36 	bl	8007cea <USB_HC_Halt>
 800367e:	f000 bc6f 	b.w	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	4611      	mov	r1, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f003 fd89 	bl	80071a2 <USB_ReadChInterrupts>
 8003690:	4603      	mov	r3, r0
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b20      	cmp	r3, #32
 8003698:	f040 8082 	bne.w	80037a0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a8:	461a      	mov	r2, r3
 80036aa:	2320      	movs	r3, #32
 80036ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3319      	adds	r3, #25
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d124      	bne.n	800370e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3319      	adds	r3, #25
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	334c      	adds	r3, #76	; 0x4c
 80036e8:	2202      	movs	r2, #2
 80036ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	334d      	adds	r3, #77	; 0x4d
 80036fc:	2203      	movs	r2, #3
 80036fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f004 faee 	bl	8007cea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	331a      	adds	r3, #26
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	f040 841d 	bne.w	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	331b      	adds	r3, #27
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 8411 	bne.w	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	3326      	adds	r3, #38	; 0x26
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d009      	beq.n	8003768 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	331b      	adds	r3, #27
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	334d      	adds	r3, #77	; 0x4d
 8003778:	2203      	movs	r2, #3
 800377a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f004 fab0 	bl	8007cea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3344      	adds	r3, #68	; 0x44
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e3df      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 fcfa 	bl	80071a2 <USB_ReadChInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b8:	d111      	bne.n	80037de <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c6:	461a      	mov	r2, r3
 80037c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f004 fa87 	bl	8007cea <USB_HC_Halt>
 80037dc:	e3c0      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f003 fcdb 	bl	80071a2 <USB_ReadChInterrupts>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d168      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3344      	adds	r3, #68	; 0x44
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f003 fcc5 	bl	80071a2 <USB_ReadChInterrupts>
 8003818:	4603      	mov	r3, r0
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d112      	bne.n	8003848 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	3319      	adds	r3, #25
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4413      	add	r3, r2
 800383e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003842:	461a      	mov	r2, r3
 8003844:	2340      	movs	r3, #64	; 0x40
 8003846:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	331b      	adds	r3, #27
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d019      	beq.n	8003892 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	331b      	adds	r3, #27
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	0151      	lsls	r1, r2, #5
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	440a      	add	r2, r1
 8003888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800388c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003890:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4413      	add	r3, r2
 800389a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389e:	461a      	mov	r2, r3
 80038a0:	2301      	movs	r3, #1
 80038a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	334d      	adds	r3, #77	; 0x4d
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f004 fa12 	bl	8007cea <USB_HC_Halt>
 80038c6:	e34b      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f003 fc66 	bl	80071a2 <USB_ReadChInterrupts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038dc:	2b40      	cmp	r3, #64	; 0x40
 80038de:	d139      	bne.n	8003954 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	334d      	adds	r3, #77	; 0x4d
 80038f0:	2205      	movs	r2, #5
 80038f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	331a      	adds	r3, #26
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	3319      	adds	r3, #25
 800391a:	2201      	movs	r2, #1
 800391c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	3344      	adds	r3, #68	; 0x44
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f004 f9d5 	bl	8007cea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394c:	461a      	mov	r2, r3
 800394e:	2340      	movs	r3, #64	; 0x40
 8003950:	6093      	str	r3, [r2, #8]
 8003952:	e305      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f003 fc20 	bl	80071a2 <USB_ReadChInterrupts>
 8003962:	4603      	mov	r3, r0
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b08      	cmp	r3, #8
 800396a:	d11a      	bne.n	80039a2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003978:	461a      	mov	r2, r3
 800397a:	2308      	movs	r3, #8
 800397c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	334d      	adds	r3, #77	; 0x4d
 800398e:	2206      	movs	r2, #6
 8003990:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f004 f9a5 	bl	8007cea <USB_HC_Halt>
 80039a0:	e2de      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f003 fbf9 	bl	80071a2 <USB_ReadChInterrupts>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d144      	bne.n	8003a44 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	3344      	adds	r3, #68	; 0x44
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	334d      	adds	r3, #77	; 0x4d
 80039de:	2204      	movs	r2, #4
 80039e0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	3319      	adds	r3, #25
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d114      	bne.n	8003a22 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3318      	adds	r3, #24
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3319      	adds	r3, #25
 8003a1e:	2201      	movs	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 f95d 	bl	8007cea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2310      	movs	r3, #16
 8003a40:	6093      	str	r3, [r2, #8]
 8003a42:	e28d      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f003 fba8 	bl	80071a2 <USB_ReadChInterrupts>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a58:	2b80      	cmp	r3, #128	; 0x80
 8003a5a:	d169      	bne.n	8003b30 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	799b      	ldrb	r3, [r3, #6]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d111      	bne.n	8003a88 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	334d      	adds	r3, #77	; 0x4d
 8003a74:	2207      	movs	r2, #7
 8003a76:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f004 f932 	bl	8007cea <USB_HC_Halt>
 8003a86:	e049      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	3344      	adds	r3, #68	; 0x44
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	1c59      	adds	r1, r3, #1
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4403      	add	r3, r0
 8003aa8:	3344      	adds	r3, #68	; 0x44
 8003aaa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3344      	adds	r3, #68	; 0x44
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d922      	bls.n	8003b08 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3344      	adds	r3, #68	; 0x44
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	334c      	adds	r3, #76	; 0x4c
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	334c      	adds	r3, #76	; 0x4c
 8003afa:	781a      	ldrb	r2, [r3, #0]
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f006 fc5b 	bl	800a3bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b06:	e009      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	334c      	adds	r3, #76	; 0x4c
 8003b18:	2202      	movs	r2, #2
 8003b1a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	6093      	str	r3, [r2, #8]
 8003b2e:	e217      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f003 fb32 	bl	80071a2 <USB_ReadChInterrupts>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b48:	d11b      	bne.n	8003b82 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	334d      	adds	r3, #77	; 0x4d
 8003b5a:	2209      	movs	r2, #9
 8003b5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 f8bf 	bl	8007cea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	e1ee      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f003 fb09 	bl	80071a2 <USB_ReadChInterrupts>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	f040 81df 	bne.w	8003f5a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2302      	movs	r3, #2
 8003bac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	334d      	adds	r3, #77	; 0x4d
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	f040 8093 	bne.w	8003cec <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	334d      	adds	r3, #77	; 0x4d
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	334c      	adds	r3, #76	; 0x4c
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3326      	adds	r3, #38	; 0x26
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d00b      	beq.n	8003c1c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3326      	adds	r3, #38	; 0x26
 8003c14:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	f040 8190 	bne.w	8003f3c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	799b      	ldrb	r3, [r3, #6]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d115      	bne.n	8003c50 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	333d      	adds	r3, #61	; 0x3d
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	f083 0301 	eor.w	r3, r3, #1
 8003c3c:	b2d8      	uxtb	r0, r3
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	333d      	adds	r3, #61	; 0x3d
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	799b      	ldrb	r3, [r3, #6]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	f040 8171 	bne.w	8003f3c <HCD_HC_OUT_IRQHandler+0x920>
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	3334      	adds	r3, #52	; 0x34
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8165 	beq.w	8003f3c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	3334      	adds	r3, #52	; 0x34
 8003c82:	6819      	ldr	r1, [r3, #0]
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4403      	add	r3, r0
 8003c92:	3328      	adds	r3, #40	; 0x28
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	440b      	add	r3, r1
 8003c98:	1e59      	subs	r1, r3, #1
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4403      	add	r3, r0
 8003ca8:	3328      	adds	r3, #40	; 0x28
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 813f 	beq.w	8003f3c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	333d      	adds	r3, #61	; 0x3d
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	f083 0301 	eor.w	r3, r3, #1
 8003cd6:	b2d8      	uxtb	r0, r3
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	333d      	adds	r3, #61	; 0x3d
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e127      	b.n	8003f3c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	334d      	adds	r3, #77	; 0x4d
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d120      	bne.n	8003d44 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	334d      	adds	r3, #77	; 0x4d
 8003d12:	2202      	movs	r2, #2
 8003d14:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	331b      	adds	r3, #27
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	f040 8107 	bne.w	8003f3c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d2e:	78fa      	ldrb	r2, [r7, #3]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	334c      	adds	r3, #76	; 0x4c
 8003d3e:	2202      	movs	r2, #2
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e0fb      	b.n	8003f3c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	334d      	adds	r3, #77	; 0x4d
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d13a      	bne.n	8003dd0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	334d      	adds	r3, #77	; 0x4d
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	334c      	adds	r3, #76	; 0x4c
 8003d7e:	2202      	movs	r2, #2
 8003d80:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d82:	78fa      	ldrb	r2, [r7, #3]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	331b      	adds	r3, #27
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	f040 80d1 	bne.w	8003f3c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	331b      	adds	r3, #27
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	0151      	lsls	r1, r2, #5
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dcc:	6053      	str	r3, [r2, #4]
 8003dce:	e0b5      	b.n	8003f3c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	334d      	adds	r3, #77	; 0x4d
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d114      	bne.n	8003e10 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	334d      	adds	r3, #77	; 0x4d
 8003df6:	2202      	movs	r2, #2
 8003df8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	334c      	adds	r3, #76	; 0x4c
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	e095      	b.n	8003f3c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	334d      	adds	r3, #77	; 0x4d
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d114      	bne.n	8003e50 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	334d      	adds	r3, #77	; 0x4d
 8003e36:	2202      	movs	r2, #2
 8003e38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	334c      	adds	r3, #76	; 0x4c
 8003e4a:	2205      	movs	r2, #5
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	e075      	b.n	8003f3c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	334d      	adds	r3, #77	; 0x4d
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b07      	cmp	r3, #7
 8003e64:	d00a      	beq.n	8003e7c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	334d      	adds	r3, #77	; 0x4d
 8003e76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e78:	2b09      	cmp	r3, #9
 8003e7a:	d170      	bne.n	8003f5e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	334d      	adds	r3, #77	; 0x4d
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3344      	adds	r3, #68	; 0x44
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	1c59      	adds	r1, r3, #1
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4403      	add	r3, r0
 8003eb0:	3344      	adds	r3, #68	; 0x44
 8003eb2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3344      	adds	r3, #68	; 0x44
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d914      	bls.n	8003ef4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	3344      	adds	r3, #68	; 0x44
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ede:	78fa      	ldrb	r2, [r7, #3]
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	334c      	adds	r3, #76	; 0x4c
 8003eee:	2204      	movs	r2, #4
 8003ef0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ef2:	e022      	b.n	8003f3a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	334c      	adds	r3, #76	; 0x4c
 8003f04:	2202      	movs	r2, #2
 8003f06:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f1e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f26:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f34:	461a      	mov	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f3a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	334c      	adds	r3, #76	; 0x4c
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	4619      	mov	r1, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f006 fa32 	bl	800a3bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f58:	e002      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003f5e:	bf00      	nop
  }
}
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b08a      	sub	sp, #40	; 0x28
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	0c5b      	lsrs	r3, r3, #17
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f9a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d004      	beq.n	8003fac <HCD_RXQLVL_IRQHandler+0x46>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	f000 80b6 	beq.w	8004116 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003faa:	e0b7      	b.n	800411c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80b3 	beq.w	800411a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	332c      	adds	r3, #44	; 0x2c
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80a7 	beq.w	800411a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	3338      	adds	r3, #56	; 0x38
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	18d1      	adds	r1, r2, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4403      	add	r3, r0
 8003ff0:	3334      	adds	r3, #52	; 0x34
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4299      	cmp	r1, r3
 8003ff6:	f200 8083 	bhi.w	8004100 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	332c      	adds	r3, #44	; 0x2c
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	b292      	uxth	r2, r2
 8004014:	4619      	mov	r1, r3
 8004016:	f003 f859 	bl	80070cc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4613      	mov	r3, r2
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	332c      	adds	r3, #44	; 0x2c
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	18d1      	adds	r1, r2, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4403      	add	r3, r0
 800403e:	332c      	adds	r3, #44	; 0x2c
 8004040:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4613      	mov	r3, r2
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	3338      	adds	r3, #56	; 0x38
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	18d1      	adds	r1, r2, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4613      	mov	r3, r2
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4403      	add	r3, r0
 8004066:	3338      	adds	r3, #56	; 0x38
 8004068:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	0cdb      	lsrs	r3, r3, #19
 800407a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800407e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	3328      	adds	r3, #40	; 0x28
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4293      	cmp	r3, r2
 8004098:	d13f      	bne.n	800411a <HCD_RXQLVL_IRQHandler+0x1b4>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d03c      	beq.n	800411a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040b6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040be:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040cc:	461a      	mov	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4613      	mov	r3, r2
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	333c      	adds	r3, #60	; 0x3c
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	f083 0301 	eor.w	r3, r3, #1
 80040e8:	b2d8      	uxtb	r0, r3
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	333c      	adds	r3, #60	; 0x3c
 80040fa:	4602      	mov	r2, r0
 80040fc:	701a      	strb	r2, [r3, #0]
      break;
 80040fe:	e00c      	b.n	800411a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	334c      	adds	r3, #76	; 0x4c
 8004110:	2204      	movs	r2, #4
 8004112:	701a      	strb	r2, [r3, #0]
      break;
 8004114:	e001      	b.n	800411a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800411a:	bf00      	nop
  }
}
 800411c:	bf00      	nop
 800411e:	3728      	adds	r7, #40	; 0x28
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004150:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b02      	cmp	r3, #2
 800415a:	d10b      	bne.n	8004174 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d102      	bne.n	800416c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f006 f90c 	bl	800a384 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f043 0302 	orr.w	r3, r3, #2
 8004172:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b08      	cmp	r3, #8
 800417c:	d132      	bne.n	80041e4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f043 0308 	orr.w	r3, r3, #8
 8004184:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d126      	bne.n	80041de <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7a5b      	ldrb	r3, [r3, #9]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d113      	bne.n	80041c0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800419e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041a2:	d106      	bne.n	80041b2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2102      	movs	r1, #2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f003 f91e 	bl	80073ec <USB_InitFSLSPClkSel>
 80041b0:	e011      	b.n	80041d6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f003 f917 	bl	80073ec <USB_InitFSLSPClkSel>
 80041be:	e00a      	b.n	80041d6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	79db      	ldrb	r3, [r3, #7]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d106      	bne.n	80041d6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ce:	461a      	mov	r2, r3
 80041d0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80041d4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f006 f8fe 	bl	800a3d8 <HAL_HCD_PortEnabled_Callback>
 80041dc:	e002      	b.n	80041e4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f006 f908 	bl	800a3f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d103      	bne.n	80041f6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f043 0320 	orr.w	r3, r3, #32
 80041f4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041fc:	461a      	mov	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	6013      	str	r3, [r2, #0]
}
 8004202:	bf00      	nop
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e12b      	b.n	8004476 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fd f918 	bl	8001468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2224      	movs	r2, #36	; 0x24
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800425e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800426e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004270:	f001 fa20 	bl	80056b4 <HAL_RCC_GetPCLK1Freq>
 8004274:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4a81      	ldr	r2, [pc, #516]	; (8004480 <HAL_I2C_Init+0x274>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d807      	bhi.n	8004290 <HAL_I2C_Init+0x84>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a80      	ldr	r2, [pc, #512]	; (8004484 <HAL_I2C_Init+0x278>)
 8004284:	4293      	cmp	r3, r2
 8004286:	bf94      	ite	ls
 8004288:	2301      	movls	r3, #1
 800428a:	2300      	movhi	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e006      	b.n	800429e <HAL_I2C_Init+0x92>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a7d      	ldr	r2, [pc, #500]	; (8004488 <HAL_I2C_Init+0x27c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	bf94      	ite	ls
 8004298:	2301      	movls	r3, #1
 800429a:	2300      	movhi	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e0e7      	b.n	8004476 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4a78      	ldr	r2, [pc, #480]	; (800448c <HAL_I2C_Init+0x280>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	0c9b      	lsrs	r3, r3, #18
 80042b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a6a      	ldr	r2, [pc, #424]	; (8004480 <HAL_I2C_Init+0x274>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d802      	bhi.n	80042e0 <HAL_I2C_Init+0xd4>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3301      	adds	r3, #1
 80042de:	e009      	b.n	80042f4 <HAL_I2C_Init+0xe8>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	4a69      	ldr	r2, [pc, #420]	; (8004490 <HAL_I2C_Init+0x284>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	099b      	lsrs	r3, r3, #6
 80042f2:	3301      	adds	r3, #1
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004306:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	495c      	ldr	r1, [pc, #368]	; (8004480 <HAL_I2C_Init+0x274>)
 8004310:	428b      	cmp	r3, r1
 8004312:	d819      	bhi.n	8004348 <HAL_I2C_Init+0x13c>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1e59      	subs	r1, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004322:	1c59      	adds	r1, r3, #1
 8004324:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004328:	400b      	ands	r3, r1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_I2C_Init+0x138>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1e59      	subs	r1, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	fbb1 f3f3 	udiv	r3, r1, r3
 800433c:	3301      	adds	r3, #1
 800433e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004342:	e051      	b.n	80043e8 <HAL_I2C_Init+0x1dc>
 8004344:	2304      	movs	r3, #4
 8004346:	e04f      	b.n	80043e8 <HAL_I2C_Init+0x1dc>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d111      	bne.n	8004374 <HAL_I2C_Init+0x168>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1e58      	subs	r0, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	440b      	add	r3, r1
 800435e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004362:	3301      	adds	r3, #1
 8004364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	e012      	b.n	800439a <HAL_I2C_Init+0x18e>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1e58      	subs	r0, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	0099      	lsls	r1, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	fbb0 f3f3 	udiv	r3, r0, r3
 800438a:	3301      	adds	r3, #1
 800438c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_I2C_Init+0x196>
 800439e:	2301      	movs	r3, #1
 80043a0:	e022      	b.n	80043e8 <HAL_I2C_Init+0x1dc>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10e      	bne.n	80043c8 <HAL_I2C_Init+0x1bc>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1e58      	subs	r0, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6859      	ldr	r1, [r3, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	440b      	add	r3, r1
 80043b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80043bc:	3301      	adds	r3, #1
 80043be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c6:	e00f      	b.n	80043e8 <HAL_I2C_Init+0x1dc>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e58      	subs	r0, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	0099      	lsls	r1, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	fbb0 f3f3 	udiv	r3, r0, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	6809      	ldr	r1, [r1, #0]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69da      	ldr	r2, [r3, #28]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004416:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6911      	ldr	r1, [r2, #16]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68d2      	ldr	r2, [r2, #12]
 8004422:	4311      	orrs	r1, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	430b      	orrs	r3, r1
 800442a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	000186a0 	.word	0x000186a0
 8004484:	001e847f 	.word	0x001e847f
 8004488:	003d08ff 	.word	0x003d08ff
 800448c:	431bde83 	.word	0x431bde83
 8004490:	10624dd3 	.word	0x10624dd3

08004494 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e128      	b.n	80046f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a90      	ldr	r2, [pc, #576]	; (8004700 <HAL_I2S_Init+0x26c>)
 80044be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fd f819 	bl	80014f8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044dc:	f023 030f 	bic.w	r3, r3, #15
 80044e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2202      	movs	r2, #2
 80044e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d060      	beq.n	80045b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80044fa:	2310      	movs	r3, #16
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	e001      	b.n	8004504 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004500:	2320      	movs	r3, #32
 8004502:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b20      	cmp	r3, #32
 800450a:	d802      	bhi.n	8004512 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004512:	2001      	movs	r0, #1
 8004514:	f001 f9d8 	bl	80058c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004518:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004522:	d125      	bne.n	8004570 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	fbb2 f2f3 	udiv	r2, r2, r3
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	3305      	adds	r3, #5
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e01f      	b.n	800458e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	fbb2 f2f3 	udiv	r2, r2, r3
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	461a      	mov	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	fbb2 f3f3 	udiv	r3, r2, r3
 800456a:	3305      	adds	r3, #5
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e00e      	b.n	800458e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	fbb2 f2f3 	udiv	r2, r2, r3
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	3305      	adds	r3, #5
 800458c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4a5c      	ldr	r2, [pc, #368]	; (8004704 <HAL_I2S_Init+0x270>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	08db      	lsrs	r3, r3, #3
 8004598:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	085b      	lsrs	r3, r3, #1
 80045aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	e003      	b.n	80045bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80045b4:	2302      	movs	r3, #2
 80045b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d902      	bls.n	80045c8 <HAL_I2S_Init+0x134>
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	2bff      	cmp	r3, #255	; 0xff
 80045c6:	d907      	bls.n	80045d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	f043 0210 	orr.w	r2, r3, #16
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e08f      	b.n	80046f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	ea42 0103 	orr.w	r1, r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80045f6:	f023 030f 	bic.w	r3, r3, #15
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6851      	ldr	r1, [r2, #4]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6892      	ldr	r2, [r2, #8]
 8004602:	4311      	orrs	r1, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	68d2      	ldr	r2, [r2, #12]
 8004608:	4311      	orrs	r1, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6992      	ldr	r2, [r2, #24]
 800460e:	430a      	orrs	r2, r1
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800461a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d161      	bne.n	80046e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a38      	ldr	r2, [pc, #224]	; (8004708 <HAL_I2S_Init+0x274>)
 8004628:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a37      	ldr	r2, [pc, #220]	; (800470c <HAL_I2S_Init+0x278>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d101      	bne.n	8004638 <HAL_I2S_Init+0x1a4>
 8004634:	4b36      	ldr	r3, [pc, #216]	; (8004710 <HAL_I2S_Init+0x27c>)
 8004636:	e001      	b.n	800463c <HAL_I2S_Init+0x1a8>
 8004638:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	4932      	ldr	r1, [pc, #200]	; (800470c <HAL_I2S_Init+0x278>)
 8004644:	428a      	cmp	r2, r1
 8004646:	d101      	bne.n	800464c <HAL_I2S_Init+0x1b8>
 8004648:	4a31      	ldr	r2, [pc, #196]	; (8004710 <HAL_I2S_Init+0x27c>)
 800464a:	e001      	b.n	8004650 <HAL_I2S_Init+0x1bc>
 800464c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004650:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004654:	f023 030f 	bic.w	r3, r3, #15
 8004658:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2b      	ldr	r2, [pc, #172]	; (800470c <HAL_I2S_Init+0x278>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d101      	bne.n	8004668 <HAL_I2S_Init+0x1d4>
 8004664:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <HAL_I2S_Init+0x27c>)
 8004666:	e001      	b.n	800466c <HAL_I2S_Init+0x1d8>
 8004668:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800466c:	2202      	movs	r2, #2
 800466e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a25      	ldr	r2, [pc, #148]	; (800470c <HAL_I2S_Init+0x278>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_I2S_Init+0x1ea>
 800467a:	4b25      	ldr	r3, [pc, #148]	; (8004710 <HAL_I2S_Init+0x27c>)
 800467c:	e001      	b.n	8004682 <HAL_I2S_Init+0x1ee>
 800467e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468e:	d003      	beq.n	8004698 <HAL_I2S_Init+0x204>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	e001      	b.n	80046a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80046ae:	4313      	orrs	r3, r2
 80046b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80046b8:	4313      	orrs	r3, r2
 80046ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80046c2:	4313      	orrs	r3, r2
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a0d      	ldr	r2, [pc, #52]	; (800470c <HAL_I2S_Init+0x278>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_I2S_Init+0x24c>
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <HAL_I2S_Init+0x27c>)
 80046de:	e001      	b.n	80046e4 <HAL_I2S_Init+0x250>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e4:	897a      	ldrh	r2, [r7, #10]
 80046e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3720      	adds	r7, #32
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	0800480b 	.word	0x0800480b
 8004704:	cccccccd 	.word	0xcccccccd
 8004708:	08004921 	.word	0x08004921
 800470c:	40003800 	.word	0x40003800
 8004710:	40003400 	.word	0x40003400

08004714 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	881a      	ldrh	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	1c9a      	adds	r2, r3, #2
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10e      	bne.n	80047a4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004794:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff ffb8 	bl	8004714 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	b292      	uxth	r2, r2
 80047c0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	1c9a      	adds	r2, r3, #2
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10e      	bne.n	8004802 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff93 	bl	8004728 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b04      	cmp	r3, #4
 8004824:	d13a      	bne.n	800489c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b01      	cmp	r3, #1
 800482e:	d109      	bne.n	8004844 <I2S_IRQHandler+0x3a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d102      	bne.n	8004844 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ffb4 	bl	80047ac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d126      	bne.n	800489c <I2S_IRQHandler+0x92>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b20      	cmp	r3, #32
 800485a:	d11f      	bne.n	800489c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800486a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	f043 0202 	orr.w	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff ff50 	bl	800473c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d136      	bne.n	8004916 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d109      	bne.n	80048c6 <I2S_IRQHandler+0xbc>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048bc:	2b80      	cmp	r3, #128	; 0x80
 80048be:	d102      	bne.n	80048c6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff45 	bl	8004750 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d122      	bne.n	8004916 <I2S_IRQHandler+0x10c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d11b      	bne.n	8004916 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048ec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	f043 0204 	orr.w	r2, r3, #4
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ff13 	bl	800473c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004916:	bf00      	nop
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a92      	ldr	r2, [pc, #584]	; (8004b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800493a:	4b92      	ldr	r3, [pc, #584]	; (8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800493c:	e001      	b.n	8004942 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800493e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a8b      	ldr	r2, [pc, #556]	; (8004b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004958:	4b8a      	ldr	r3, [pc, #552]	; (8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800495a:	e001      	b.n	8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800495c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800496c:	d004      	beq.n	8004978 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f040 8099 	bne.w	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b02      	cmp	r3, #2
 8004980:	d107      	bne.n	8004992 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f925 	bl	8004bdc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b01      	cmp	r3, #1
 800499a:	d107      	bne.n	80049ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9c8 	bl	8004d3c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	d13a      	bne.n	8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d035      	beq.n	8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a6e      	ldr	r2, [pc, #440]	; (8004b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80049ca:	4b6e      	ldr	r3, [pc, #440]	; (8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049cc:	e001      	b.n	80049d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80049ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4969      	ldr	r1, [pc, #420]	; (8004b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049da:	428b      	cmp	r3, r1
 80049dc:	d101      	bne.n	80049e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80049de:	4b69      	ldr	r3, [pc, #420]	; (8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049e0:	e001      	b.n	80049e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80049e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f043 0202 	orr.w	r2, r3, #2
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff fe88 	bl	800473c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	f040 80c3 	bne.w	8004bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 80bd 	beq.w	8004bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a52:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a49      	ldr	r2, [pc, #292]	; (8004b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d101      	bne.n	8004a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004a5e:	4b49      	ldr	r3, [pc, #292]	; (8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a60:	e001      	b.n	8004a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4944      	ldr	r1, [pc, #272]	; (8004b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a6e:	428b      	cmp	r3, r1
 8004a70:	d101      	bne.n	8004a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004a72:	4b44      	ldr	r3, [pc, #272]	; (8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a74:	e001      	b.n	8004a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004a76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a7e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a80:	2300      	movs	r3, #0
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60bb      	str	r3, [r7, #8]
 8004a8c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9a:	f043 0204 	orr.w	r2, r3, #4
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7ff fe4a 	bl	800473c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004aa8:	e089      	b.n	8004bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d107      	bne.n	8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f8be 	bl	8004c40 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d107      	bne.n	8004ade <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f8fd 	bl	8004cd8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d12f      	bne.n	8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d02a      	beq.n	8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b00:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d101      	bne.n	8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004b0c:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b0e:	e001      	b.n	8004b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4919      	ldr	r1, [pc, #100]	; (8004b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b1c:	428b      	cmp	r3, r1
 8004b1e:	d101      	bne.n	8004b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004b20:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b22:	e001      	b.n	8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b2c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	f043 0202 	orr.w	r2, r3, #2
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff fdfa 	bl	800473c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d136      	bne.n	8004bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d031      	beq.n	8004bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a07      	ldr	r2, [pc, #28]	; (8004b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d101      	bne.n	8004b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004b66:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b68:	e001      	b.n	8004b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4902      	ldr	r1, [pc, #8]	; (8004b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b76:	428b      	cmp	r3, r1
 8004b78:	d106      	bne.n	8004b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004b7a:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b7c:	e006      	b.n	8004b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004b7e:	bf00      	nop
 8004b80:	40003800 	.word	0x40003800
 8004b84:	40003400 	.word	0x40003400
 8004b88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b90:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ba0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	f043 0204 	orr.w	r2, r3, #4
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff fdc0 	bl	800473c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bbc:	e000      	b.n	8004bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bbe:	bf00      	nop
}
 8004bc0:	bf00      	nop
 8004bc2:	3720      	adds	r7, #32
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	1c99      	adds	r1, r3, #2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6251      	str	r1, [r2, #36]	; 0x24
 8004bee:	881a      	ldrh	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d113      	bne.n	8004c36 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff ffc9 	bl	8004bc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	1c99      	adds	r1, r3, #2
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6251      	str	r1, [r2, #36]	; 0x24
 8004c52:	8819      	ldrh	r1, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <I2SEx_TxISR_I2SExt+0x90>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d101      	bne.n	8004c62 <I2SEx_TxISR_I2SExt+0x22>
 8004c5e:	4b1d      	ldr	r3, [pc, #116]	; (8004cd4 <I2SEx_TxISR_I2SExt+0x94>)
 8004c60:	e001      	b.n	8004c66 <I2SEx_TxISR_I2SExt+0x26>
 8004c62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c66:	460a      	mov	r2, r1
 8004c68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d121      	bne.n	8004cc6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a12      	ldr	r2, [pc, #72]	; (8004cd0 <I2SEx_TxISR_I2SExt+0x90>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d101      	bne.n	8004c90 <I2SEx_TxISR_I2SExt+0x50>
 8004c8c:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <I2SEx_TxISR_I2SExt+0x94>)
 8004c8e:	e001      	b.n	8004c94 <I2SEx_TxISR_I2SExt+0x54>
 8004c90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	490d      	ldr	r1, [pc, #52]	; (8004cd0 <I2SEx_TxISR_I2SExt+0x90>)
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	d101      	bne.n	8004ca4 <I2SEx_TxISR_I2SExt+0x64>
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <I2SEx_TxISR_I2SExt+0x94>)
 8004ca2:	e001      	b.n	8004ca8 <I2SEx_TxISR_I2SExt+0x68>
 8004ca4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ca8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff81 	bl	8004bc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40003800 	.word	0x40003800
 8004cd4:	40003400 	.word	0x40003400

08004cd8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68d8      	ldr	r0, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	1c99      	adds	r1, r3, #2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004cf0:	b282      	uxth	r2, r0
 8004cf2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d113      	bne.n	8004d34 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d1a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff ff4a 	bl	8004bc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d34:	bf00      	nop
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <I2SEx_RxISR_I2SExt+0x90>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d101      	bne.n	8004d52 <I2SEx_RxISR_I2SExt+0x16>
 8004d4e:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <I2SEx_RxISR_I2SExt+0x94>)
 8004d50:	e001      	b.n	8004d56 <I2SEx_RxISR_I2SExt+0x1a>
 8004d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d56:	68d8      	ldr	r0, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	1c99      	adds	r1, r3, #2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d62:	b282      	uxth	r2, r0
 8004d64:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d121      	bne.n	8004dc2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a12      	ldr	r2, [pc, #72]	; (8004dcc <I2SEx_RxISR_I2SExt+0x90>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d101      	bne.n	8004d8c <I2SEx_RxISR_I2SExt+0x50>
 8004d88:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <I2SEx_RxISR_I2SExt+0x94>)
 8004d8a:	e001      	b.n	8004d90 <I2SEx_RxISR_I2SExt+0x54>
 8004d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	490d      	ldr	r1, [pc, #52]	; (8004dcc <I2SEx_RxISR_I2SExt+0x90>)
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	d101      	bne.n	8004da0 <I2SEx_RxISR_I2SExt+0x64>
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <I2SEx_RxISR_I2SExt+0x94>)
 8004d9e:	e001      	b.n	8004da4 <I2SEx_RxISR_I2SExt+0x68>
 8004da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004da8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ff03 	bl	8004bc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40003800 	.word	0x40003800
 8004dd0:	40003400 	.word	0x40003400

08004dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e267      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d075      	beq.n	8004ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004df2:	4b88      	ldr	r3, [pc, #544]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d00c      	beq.n	8004e18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dfe:	4b85      	ldr	r3, [pc, #532]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d112      	bne.n	8004e30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0a:	4b82      	ldr	r3, [pc, #520]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e16:	d10b      	bne.n	8004e30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	4b7e      	ldr	r3, [pc, #504]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d05b      	beq.n	8004edc <HAL_RCC_OscConfig+0x108>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d157      	bne.n	8004edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e242      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e38:	d106      	bne.n	8004e48 <HAL_RCC_OscConfig+0x74>
 8004e3a:	4b76      	ldr	r3, [pc, #472]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a75      	ldr	r2, [pc, #468]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e01d      	b.n	8004e84 <HAL_RCC_OscConfig+0xb0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x98>
 8004e52:	4b70      	ldr	r3, [pc, #448]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a6f      	ldr	r2, [pc, #444]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	4b6d      	ldr	r3, [pc, #436]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a6c      	ldr	r2, [pc, #432]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCC_OscConfig+0xb0>
 8004e6c:	4b69      	ldr	r3, [pc, #420]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a68      	ldr	r2, [pc, #416]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	4b66      	ldr	r3, [pc, #408]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a65      	ldr	r2, [pc, #404]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d013      	beq.n	8004eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fc fdac 	bl	80019e8 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e94:	f7fc fda8 	bl	80019e8 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e207      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea6:	4b5b      	ldr	r3, [pc, #364]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0xc0>
 8004eb2:	e014      	b.n	8004ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb4:	f7fc fd98 	bl	80019e8 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ebc:	f7fc fd94 	bl	80019e8 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e1f3      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ece:	4b51      	ldr	r3, [pc, #324]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0xe8>
 8004eda:	e000      	b.n	8004ede <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d063      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eea:	4b4a      	ldr	r3, [pc, #296]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 030c 	and.w	r3, r3, #12
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ef6:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d11c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f02:	4b44      	ldr	r3, [pc, #272]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d116      	bne.n	8004f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f0e:	4b41      	ldr	r3, [pc, #260]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_RCC_OscConfig+0x152>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d001      	beq.n	8004f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e1c7      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f26:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	4937      	ldr	r1, [pc, #220]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f3a:	e03a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d020      	beq.n	8004f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f44:	4b34      	ldr	r3, [pc, #208]	; (8005018 <HAL_RCC_OscConfig+0x244>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4a:	f7fc fd4d 	bl	80019e8 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f52:	f7fc fd49 	bl	80019e8 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e1a8      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f64:	4b2b      	ldr	r3, [pc, #172]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f70:	4b28      	ldr	r3, [pc, #160]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4925      	ldr	r1, [pc, #148]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]
 8004f84:	e015      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <HAL_RCC_OscConfig+0x244>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8c:	f7fc fd2c 	bl	80019e8 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f94:	f7fc fd28 	bl	80019e8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e187      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d036      	beq.n	800502c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d016      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc6:	4b15      	ldr	r3, [pc, #84]	; (800501c <HAL_RCC_OscConfig+0x248>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fcc:	f7fc fd0c 	bl	80019e8 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fd4:	f7fc fd08 	bl	80019e8 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e167      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x200>
 8004ff2:	e01b      	b.n	800502c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ff4:	4b09      	ldr	r3, [pc, #36]	; (800501c <HAL_RCC_OscConfig+0x248>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffa:	f7fc fcf5 	bl	80019e8 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005000:	e00e      	b.n	8005020 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005002:	f7fc fcf1 	bl	80019e8 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d907      	bls.n	8005020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e150      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
 8005014:	40023800 	.word	0x40023800
 8005018:	42470000 	.word	0x42470000
 800501c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005020:	4b88      	ldr	r3, [pc, #544]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1ea      	bne.n	8005002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8097 	beq.w	8005168 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503a:	2300      	movs	r3, #0
 800503c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800503e:	4b81      	ldr	r3, [pc, #516]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	4b7d      	ldr	r3, [pc, #500]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	4a7c      	ldr	r2, [pc, #496]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005058:	6413      	str	r3, [r2, #64]	; 0x40
 800505a:	4b7a      	ldr	r3, [pc, #488]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005066:	2301      	movs	r3, #1
 8005068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506a:	4b77      	ldr	r3, [pc, #476]	; (8005248 <HAL_RCC_OscConfig+0x474>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d118      	bne.n	80050a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005076:	4b74      	ldr	r3, [pc, #464]	; (8005248 <HAL_RCC_OscConfig+0x474>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a73      	ldr	r2, [pc, #460]	; (8005248 <HAL_RCC_OscConfig+0x474>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005082:	f7fc fcb1 	bl	80019e8 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508a:	f7fc fcad 	bl	80019e8 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e10c      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509c:	4b6a      	ldr	r3, [pc, #424]	; (8005248 <HAL_RCC_OscConfig+0x474>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d106      	bne.n	80050be <HAL_RCC_OscConfig+0x2ea>
 80050b0:	4b64      	ldr	r3, [pc, #400]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	4a63      	ldr	r2, [pc, #396]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	6713      	str	r3, [r2, #112]	; 0x70
 80050bc:	e01c      	b.n	80050f8 <HAL_RCC_OscConfig+0x324>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b05      	cmp	r3, #5
 80050c4:	d10c      	bne.n	80050e0 <HAL_RCC_OscConfig+0x30c>
 80050c6:	4b5f      	ldr	r3, [pc, #380]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	4a5e      	ldr	r2, [pc, #376]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050cc:	f043 0304 	orr.w	r3, r3, #4
 80050d0:	6713      	str	r3, [r2, #112]	; 0x70
 80050d2:	4b5c      	ldr	r3, [pc, #368]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	4a5b      	ldr	r2, [pc, #364]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6713      	str	r3, [r2, #112]	; 0x70
 80050de:	e00b      	b.n	80050f8 <HAL_RCC_OscConfig+0x324>
 80050e0:	4b58      	ldr	r3, [pc, #352]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	4a57      	ldr	r2, [pc, #348]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050e6:	f023 0301 	bic.w	r3, r3, #1
 80050ea:	6713      	str	r3, [r2, #112]	; 0x70
 80050ec:	4b55      	ldr	r3, [pc, #340]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	4a54      	ldr	r2, [pc, #336]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050f2:	f023 0304 	bic.w	r3, r3, #4
 80050f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d015      	beq.n	800512c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005100:	f7fc fc72 	bl	80019e8 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005106:	e00a      	b.n	800511e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005108:	f7fc fc6e 	bl	80019e8 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e0cb      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511e:	4b49      	ldr	r3, [pc, #292]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ee      	beq.n	8005108 <HAL_RCC_OscConfig+0x334>
 800512a:	e014      	b.n	8005156 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800512c:	f7fc fc5c 	bl	80019e8 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005132:	e00a      	b.n	800514a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005134:	f7fc fc58 	bl	80019e8 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005142:	4293      	cmp	r3, r2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e0b5      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514a:	4b3e      	ldr	r3, [pc, #248]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1ee      	bne.n	8005134 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005156:	7dfb      	ldrb	r3, [r7, #23]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d105      	bne.n	8005168 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515c:	4b39      	ldr	r3, [pc, #228]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	4a38      	ldr	r2, [pc, #224]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005166:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80a1 	beq.w	80052b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005172:	4b34      	ldr	r3, [pc, #208]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b08      	cmp	r3, #8
 800517c:	d05c      	beq.n	8005238 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d141      	bne.n	800520a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005186:	4b31      	ldr	r3, [pc, #196]	; (800524c <HAL_RCC_OscConfig+0x478>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518c:	f7fc fc2c 	bl	80019e8 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005194:	f7fc fc28 	bl	80019e8 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e087      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a6:	4b27      	ldr	r3, [pc, #156]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69da      	ldr	r2, [r3, #28]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	019b      	lsls	r3, r3, #6
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	3b01      	subs	r3, #1
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	491b      	ldr	r1, [pc, #108]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051dc:	4b1b      	ldr	r3, [pc, #108]	; (800524c <HAL_RCC_OscConfig+0x478>)
 80051de:	2201      	movs	r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e2:	f7fc fc01 	bl	80019e8 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ea:	f7fc fbfd 	bl	80019e8 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e05c      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fc:	4b11      	ldr	r3, [pc, #68]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0f0      	beq.n	80051ea <HAL_RCC_OscConfig+0x416>
 8005208:	e054      	b.n	80052b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520a:	4b10      	ldr	r3, [pc, #64]	; (800524c <HAL_RCC_OscConfig+0x478>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005210:	f7fc fbea 	bl	80019e8 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005218:	f7fc fbe6 	bl	80019e8 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e045      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x444>
 8005236:	e03d      	b.n	80052b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d107      	bne.n	8005250 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e038      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
 8005244:	40023800 	.word	0x40023800
 8005248:	40007000 	.word	0x40007000
 800524c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005250:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <HAL_RCC_OscConfig+0x4ec>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d028      	beq.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005268:	429a      	cmp	r2, r3
 800526a:	d121      	bne.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d11a      	bne.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005280:	4013      	ands	r3, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005288:	4293      	cmp	r3, r2
 800528a:	d111      	bne.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	085b      	lsrs	r3, r3, #1
 8005298:	3b01      	subs	r3, #1
 800529a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800529c:	429a      	cmp	r2, r3
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d001      	beq.n	80052b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800

080052c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0cc      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052d8:	4b68      	ldr	r3, [pc, #416]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d90c      	bls.n	8005300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e6:	4b65      	ldr	r3, [pc, #404]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b63      	ldr	r3, [pc, #396]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0b8      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005318:	4b59      	ldr	r3, [pc, #356]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a58      	ldr	r2, [pc, #352]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005330:	4b53      	ldr	r3, [pc, #332]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a52      	ldr	r2, [pc, #328]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800533a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533c:	4b50      	ldr	r3, [pc, #320]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	494d      	ldr	r1, [pc, #308]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d044      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d119      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e07f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d003      	beq.n	8005382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800537e:	2b03      	cmp	r3, #3
 8005380:	d107      	bne.n	8005392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005382:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e06f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005392:	4b3b      	ldr	r3, [pc, #236]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e067      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 0203 	bic.w	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4934      	ldr	r1, [pc, #208]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b4:	f7fc fb18 	bl	80019e8 <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ba:	e00a      	b.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053bc:	f7fc fb14 	bl	80019e8 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e04f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 020c 	and.w	r2, r3, #12
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d1eb      	bne.n	80053bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d20c      	bcs.n	800540c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f2:	4b22      	ldr	r3, [pc, #136]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e032      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4916      	ldr	r1, [pc, #88]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	490e      	ldr	r1, [pc, #56]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800544a:	f000 f821 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 800544e:	4602      	mov	r2, r0
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	490a      	ldr	r1, [pc, #40]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 800545c:	5ccb      	ldrb	r3, [r1, r3]
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	4a09      	ldr	r2, [pc, #36]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fc fa78 	bl	8001960 <HAL_InitTick>

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40023c00 	.word	0x40023c00
 8005480:	40023800 	.word	0x40023800
 8005484:	0800bb34 	.word	0x0800bb34
 8005488:	20000000 	.word	0x20000000
 800548c:	20000004 	.word	0x20000004

08005490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005494:	b094      	sub	sp, #80	; 0x50
 8005496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	647b      	str	r3, [r7, #68]	; 0x44
 800549c:	2300      	movs	r3, #0
 800549e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a0:	2300      	movs	r3, #0
 80054a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054a8:	4b79      	ldr	r3, [pc, #484]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 030c 	and.w	r3, r3, #12
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d00d      	beq.n	80054d0 <HAL_RCC_GetSysClockFreq+0x40>
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	f200 80e1 	bhi.w	800567c <HAL_RCC_GetSysClockFreq+0x1ec>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_RCC_GetSysClockFreq+0x34>
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d003      	beq.n	80054ca <HAL_RCC_GetSysClockFreq+0x3a>
 80054c2:	e0db      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054c4:	4b73      	ldr	r3, [pc, #460]	; (8005694 <HAL_RCC_GetSysClockFreq+0x204>)
 80054c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80054c8:	e0db      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054ca:	4b73      	ldr	r3, [pc, #460]	; (8005698 <HAL_RCC_GetSysClockFreq+0x208>)
 80054cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054ce:	e0d8      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d0:	4b6f      	ldr	r3, [pc, #444]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054da:	4b6d      	ldr	r3, [pc, #436]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d063      	beq.n	80055ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e6:	4b6a      	ldr	r3, [pc, #424]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	099b      	lsrs	r3, r3, #6
 80054ec:	2200      	movs	r2, #0
 80054ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80054f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30
 80054fa:	2300      	movs	r3, #0
 80054fc:	637b      	str	r3, [r7, #52]	; 0x34
 80054fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	f04f 0000 	mov.w	r0, #0
 800550a:	f04f 0100 	mov.w	r1, #0
 800550e:	0159      	lsls	r1, r3, #5
 8005510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005514:	0150      	lsls	r0, r2, #5
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4621      	mov	r1, r4
 800551c:	1a51      	subs	r1, r2, r1
 800551e:	6139      	str	r1, [r7, #16]
 8005520:	4629      	mov	r1, r5
 8005522:	eb63 0301 	sbc.w	r3, r3, r1
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005534:	4659      	mov	r1, fp
 8005536:	018b      	lsls	r3, r1, #6
 8005538:	4651      	mov	r1, sl
 800553a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800553e:	4651      	mov	r1, sl
 8005540:	018a      	lsls	r2, r1, #6
 8005542:	4651      	mov	r1, sl
 8005544:	ebb2 0801 	subs.w	r8, r2, r1
 8005548:	4659      	mov	r1, fp
 800554a:	eb63 0901 	sbc.w	r9, r3, r1
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800555a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800555e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005562:	4690      	mov	r8, r2
 8005564:	4699      	mov	r9, r3
 8005566:	4623      	mov	r3, r4
 8005568:	eb18 0303 	adds.w	r3, r8, r3
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	462b      	mov	r3, r5
 8005570:	eb49 0303 	adc.w	r3, r9, r3
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005582:	4629      	mov	r1, r5
 8005584:	024b      	lsls	r3, r1, #9
 8005586:	4621      	mov	r1, r4
 8005588:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800558c:	4621      	mov	r1, r4
 800558e:	024a      	lsls	r2, r1, #9
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005596:	2200      	movs	r2, #0
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
 800559a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800559c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055a0:	f7fb fa90 	bl	8000ac4 <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4613      	mov	r3, r2
 80055aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ac:	e058      	b.n	8005660 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ae:	4b38      	ldr	r3, [pc, #224]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	099b      	lsrs	r3, r3, #6
 80055b4:	2200      	movs	r2, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	4611      	mov	r1, r2
 80055ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055be:	623b      	str	r3, [r7, #32]
 80055c0:	2300      	movs	r3, #0
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
 80055c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055c8:	4642      	mov	r2, r8
 80055ca:	464b      	mov	r3, r9
 80055cc:	f04f 0000 	mov.w	r0, #0
 80055d0:	f04f 0100 	mov.w	r1, #0
 80055d4:	0159      	lsls	r1, r3, #5
 80055d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055da:	0150      	lsls	r0, r2, #5
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4641      	mov	r1, r8
 80055e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80055e6:	4649      	mov	r1, r9
 80055e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005600:	ebb2 040a 	subs.w	r4, r2, sl
 8005604:	eb63 050b 	sbc.w	r5, r3, fp
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	00eb      	lsls	r3, r5, #3
 8005612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005616:	00e2      	lsls	r2, r4, #3
 8005618:	4614      	mov	r4, r2
 800561a:	461d      	mov	r5, r3
 800561c:	4643      	mov	r3, r8
 800561e:	18e3      	adds	r3, r4, r3
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	464b      	mov	r3, r9
 8005624:	eb45 0303 	adc.w	r3, r5, r3
 8005628:	607b      	str	r3, [r7, #4]
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005636:	4629      	mov	r1, r5
 8005638:	028b      	lsls	r3, r1, #10
 800563a:	4621      	mov	r1, r4
 800563c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005640:	4621      	mov	r1, r4
 8005642:	028a      	lsls	r2, r1, #10
 8005644:	4610      	mov	r0, r2
 8005646:	4619      	mov	r1, r3
 8005648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564a:	2200      	movs	r2, #0
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	61fa      	str	r2, [r7, #28]
 8005650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005654:	f7fb fa36 	bl	8000ac4 <__aeabi_uldivmod>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4613      	mov	r3, r2
 800565e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	3301      	adds	r3, #1
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800567a:	e002      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <HAL_RCC_GetSysClockFreq+0x204>)
 800567e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005684:	4618      	mov	r0, r3
 8005686:	3750      	adds	r7, #80	; 0x50
 8005688:	46bd      	mov	sp, r7
 800568a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800568e:	bf00      	nop
 8005690:	40023800 	.word	0x40023800
 8005694:	00f42400 	.word	0x00f42400
 8005698:	007a1200 	.word	0x007a1200

0800569c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056a0:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056a2:	681b      	ldr	r3, [r3, #0]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	20000000 	.word	0x20000000

080056b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056b8:	f7ff fff0 	bl	800569c <HAL_RCC_GetHCLKFreq>
 80056bc:	4602      	mov	r2, r0
 80056be:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	0a9b      	lsrs	r3, r3, #10
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	4903      	ldr	r1, [pc, #12]	; (80056d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ca:	5ccb      	ldrb	r3, [r1, r3]
 80056cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40023800 	.word	0x40023800
 80056d8:	0800bb44 	.word	0x0800bb44

080056dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056e0:	f7ff ffdc 	bl	800569c <HAL_RCC_GetHCLKFreq>
 80056e4:	4602      	mov	r2, r0
 80056e6:	4b05      	ldr	r3, [pc, #20]	; (80056fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	0b5b      	lsrs	r3, r3, #13
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	4903      	ldr	r1, [pc, #12]	; (8005700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056f2:	5ccb      	ldrb	r3, [r1, r3]
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40023800 	.word	0x40023800
 8005700:	0800bb44 	.word	0x0800bb44

08005704 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d105      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005728:	2b00      	cmp	r3, #0
 800572a:	d035      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800572c:	4b62      	ldr	r3, [pc, #392]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005732:	f7fc f959 	bl	80019e8 <HAL_GetTick>
 8005736:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005738:	e008      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800573a:	f7fc f955 	bl	80019e8 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e0b0      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800574c:	4b5b      	ldr	r3, [pc, #364]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f0      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	019a      	lsls	r2, r3, #6
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	071b      	lsls	r3, r3, #28
 8005764:	4955      	ldr	r1, [pc, #340]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800576c:	4b52      	ldr	r3, [pc, #328]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800576e:	2201      	movs	r2, #1
 8005770:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005772:	f7fc f939 	bl	80019e8 <HAL_GetTick>
 8005776:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005778:	e008      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800577a:	f7fc f935 	bl	80019e8 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e090      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800578c:	4b4b      	ldr	r3, [pc, #300]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8083 	beq.w	80058ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	4b44      	ldr	r3, [pc, #272]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	4a43      	ldr	r2, [pc, #268]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b4:	6413      	str	r3, [r2, #64]	; 0x40
 80057b6:	4b41      	ldr	r3, [pc, #260]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057c2:	4b3f      	ldr	r3, [pc, #252]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a3e      	ldr	r2, [pc, #248]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057ce:	f7fc f90b 	bl	80019e8 <HAL_GetTick>
 80057d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057d6:	f7fc f907 	bl	80019e8 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e062      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057e8:	4b35      	ldr	r3, [pc, #212]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057f4:	4b31      	ldr	r3, [pc, #196]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d02f      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	429a      	cmp	r2, r3
 8005810:	d028      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005812:	4b2a      	ldr	r3, [pc, #168]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800581c:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800581e:	2201      	movs	r2, #1
 8005820:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005822:	4b28      	ldr	r3, [pc, #160]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005828:	4a24      	ldr	r2, [pc, #144]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800582e:	4b23      	ldr	r3, [pc, #140]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b01      	cmp	r3, #1
 8005838:	d114      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800583a:	f7fc f8d5 	bl	80019e8 <HAL_GetTick>
 800583e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005840:	e00a      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005842:	f7fc f8d1 	bl	80019e8 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005850:	4293      	cmp	r3, r2
 8005852:	d901      	bls.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e02a      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005858:	4b18      	ldr	r3, [pc, #96]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ee      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005870:	d10d      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005872:	4b12      	ldr	r3, [pc, #72]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005886:	490d      	ldr	r1, [pc, #52]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005888:	4313      	orrs	r3, r2
 800588a:	608b      	str	r3, [r1, #8]
 800588c:	e005      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800588e:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	4a0a      	ldr	r2, [pc, #40]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005894:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005898:	6093      	str	r3, [r2, #8]
 800589a:	4b08      	ldr	r3, [pc, #32]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800589c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a6:	4905      	ldr	r1, [pc, #20]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	42470068 	.word	0x42470068
 80058bc:	40023800 	.word	0x40023800
 80058c0:	40007000 	.word	0x40007000
 80058c4:	42470e40 	.word	0x42470e40

080058c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d13f      	bne.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80058e6:	4b24      	ldr	r3, [pc, #144]	; (8005978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d006      	beq.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058fc:	d12f      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80058fe:	4b1f      	ldr	r3, [pc, #124]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005900:	617b      	str	r3, [r7, #20]
          break;
 8005902:	e02f      	b.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005904:	4b1c      	ldr	r3, [pc, #112]	; (8005978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005910:	d108      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005912:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800591a:	4a19      	ldr	r2, [pc, #100]	; (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e007      	b.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005924:	4b14      	ldr	r3, [pc, #80]	; (8005978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800592c:	4a15      	ldr	r2, [pc, #84]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800592e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005932:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005934:	4b10      	ldr	r3, [pc, #64]	; (8005978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800593a:	099b      	lsrs	r3, r3, #6
 800593c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800594a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594e:	0f1b      	lsrs	r3, r3, #28
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	fbb2 f3f3 	udiv	r3, r2, r3
 800595a:	617b      	str	r3, [r7, #20]
          break;
 800595c:	e002      	b.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
          break;
 8005962:	bf00      	nop
        }
      }
      break;
 8005964:	e000      	b.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8005966:	bf00      	nop
    }
  }
  return frequency;
 8005968:	697b      	ldr	r3, [r7, #20]
}
 800596a:	4618      	mov	r0, r3
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800
 800597c:	00bb8000 	.word	0x00bb8000
 8005980:	007a1200 	.word	0x007a1200
 8005984:	00f42400 	.word	0x00f42400

08005988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e07b      	b.n	8005a92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d108      	bne.n	80059b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059aa:	d009      	beq.n	80059c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	61da      	str	r2, [r3, #28]
 80059b2:	e005      	b.n	80059c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fb fe0c 	bl	80015f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a44:	ea42 0103 	orr.w	r1, r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	0c1b      	lsrs	r3, r3, #16
 8005a5e:	f003 0104 	and.w	r1, r3, #4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	f003 0210 	and.w	r2, r3, #16
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69da      	ldr	r2, [r3, #28]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e041      	b.n	8005b30 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7fb fde1 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f000 fad9 	bl	8006090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e041      	b.n	8005bce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f839 	bl	8005bd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f000 fa8a 	bl	8006090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <HAL_TIM_PWM_Start+0x24>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	bf14      	ite	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	2300      	moveq	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	e022      	b.n	8005c56 <HAL_TIM_PWM_Start+0x6a>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d109      	bne.n	8005c2a <HAL_TIM_PWM_Start+0x3e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	bf14      	ite	ne
 8005c22:	2301      	movne	r3, #1
 8005c24:	2300      	moveq	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	e015      	b.n	8005c56 <HAL_TIM_PWM_Start+0x6a>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d109      	bne.n	8005c44 <HAL_TIM_PWM_Start+0x58>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	e008      	b.n	8005c56 <HAL_TIM_PWM_Start+0x6a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	bf14      	ite	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2300      	moveq	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e07c      	b.n	8005d58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <HAL_TIM_PWM_Start+0x82>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c6c:	e013      	b.n	8005c96 <HAL_TIM_PWM_Start+0xaa>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_PWM_Start+0x92>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c7c:	e00b      	b.n	8005c96 <HAL_TIM_PWM_Start+0xaa>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_PWM_Start+0xa2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c8c:	e003      	b.n	8005c96 <HAL_TIM_PWM_Start+0xaa>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2202      	movs	r2, #2
 8005c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fcec 	bl	800667c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a2d      	ldr	r2, [pc, #180]	; (8005d60 <HAL_TIM_PWM_Start+0x174>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d004      	beq.n	8005cb8 <HAL_TIM_PWM_Start+0xcc>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a2c      	ldr	r2, [pc, #176]	; (8005d64 <HAL_TIM_PWM_Start+0x178>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d101      	bne.n	8005cbc <HAL_TIM_PWM_Start+0xd0>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <HAL_TIM_PWM_Start+0xd2>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a22      	ldr	r2, [pc, #136]	; (8005d60 <HAL_TIM_PWM_Start+0x174>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d022      	beq.n	8005d22 <HAL_TIM_PWM_Start+0x136>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce4:	d01d      	beq.n	8005d22 <HAL_TIM_PWM_Start+0x136>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <HAL_TIM_PWM_Start+0x17c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d018      	beq.n	8005d22 <HAL_TIM_PWM_Start+0x136>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	; (8005d6c <HAL_TIM_PWM_Start+0x180>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d013      	beq.n	8005d22 <HAL_TIM_PWM_Start+0x136>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1c      	ldr	r2, [pc, #112]	; (8005d70 <HAL_TIM_PWM_Start+0x184>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00e      	beq.n	8005d22 <HAL_TIM_PWM_Start+0x136>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a16      	ldr	r2, [pc, #88]	; (8005d64 <HAL_TIM_PWM_Start+0x178>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d009      	beq.n	8005d22 <HAL_TIM_PWM_Start+0x136>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a18      	ldr	r2, [pc, #96]	; (8005d74 <HAL_TIM_PWM_Start+0x188>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_TIM_PWM_Start+0x136>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a16      	ldr	r2, [pc, #88]	; (8005d78 <HAL_TIM_PWM_Start+0x18c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d111      	bne.n	8005d46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b06      	cmp	r3, #6
 8005d32:	d010      	beq.n	8005d56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d44:	e007      	b.n	8005d56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40010400 	.word	0x40010400
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40000800 	.word	0x40000800
 8005d70:	40000c00 	.word	0x40000c00
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40001800 	.word	0x40001800

08005d7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e0ae      	b.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b0c      	cmp	r3, #12
 8005da6:	f200 809f 	bhi.w	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005de5 	.word	0x08005de5
 8005db4:	08005ee9 	.word	0x08005ee9
 8005db8:	08005ee9 	.word	0x08005ee9
 8005dbc:	08005ee9 	.word	0x08005ee9
 8005dc0:	08005e25 	.word	0x08005e25
 8005dc4:	08005ee9 	.word	0x08005ee9
 8005dc8:	08005ee9 	.word	0x08005ee9
 8005dcc:	08005ee9 	.word	0x08005ee9
 8005dd0:	08005e67 	.word	0x08005e67
 8005dd4:	08005ee9 	.word	0x08005ee9
 8005dd8:	08005ee9 	.word	0x08005ee9
 8005ddc:	08005ee9 	.word	0x08005ee9
 8005de0:	08005ea7 	.word	0x08005ea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 f9fc 	bl	80061e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0208 	orr.w	r2, r2, #8
 8005dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0204 	bic.w	r2, r2, #4
 8005e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6999      	ldr	r1, [r3, #24]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	619a      	str	r2, [r3, #24]
      break;
 8005e22:	e064      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fa4c 	bl	80062c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6999      	ldr	r1, [r3, #24]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	021a      	lsls	r2, r3, #8
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	619a      	str	r2, [r3, #24]
      break;
 8005e64:	e043      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 faa1 	bl	80063b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0208 	orr.w	r2, r2, #8
 8005e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0204 	bic.w	r2, r2, #4
 8005e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69d9      	ldr	r1, [r3, #28]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	61da      	str	r2, [r3, #28]
      break;
 8005ea4:	e023      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 faf5 	bl	800649c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69d9      	ldr	r1, [r3, #28]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	021a      	lsls	r2, r3, #8
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	61da      	str	r2, [r3, #28]
      break;
 8005ee6:	e002      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	75fb      	strb	r3, [r7, #23]
      break;
 8005eec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_TIM_ConfigClockSource+0x1c>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e0b4      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x186>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f54:	d03e      	beq.n	8005fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5a:	f200 8087 	bhi.w	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f62:	f000 8086 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x172>
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6a:	d87f      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b70      	cmp	r3, #112	; 0x70
 8005f6e:	d01a      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0xa6>
 8005f70:	2b70      	cmp	r3, #112	; 0x70
 8005f72:	d87b      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b60      	cmp	r3, #96	; 0x60
 8005f76:	d050      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x11a>
 8005f78:	2b60      	cmp	r3, #96	; 0x60
 8005f7a:	d877      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b50      	cmp	r3, #80	; 0x50
 8005f7e:	d03c      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0xfa>
 8005f80:	2b50      	cmp	r3, #80	; 0x50
 8005f82:	d873      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d058      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x13a>
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d86f      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b30      	cmp	r3, #48	; 0x30
 8005f8e:	d064      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005f90:	2b30      	cmp	r3, #48	; 0x30
 8005f92:	d86b      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d060      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d867      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d05c      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d05a      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa4:	e062      	b.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fb6:	f000 fb41 	bl	800663c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	609a      	str	r2, [r3, #8]
      break;
 8005fd2:	e04f      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fe4:	f000 fb2a 	bl	800663c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ff6:	609a      	str	r2, [r3, #8]
      break;
 8005ff8:	e03c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006006:	461a      	mov	r2, r3
 8006008:	f000 fa9e 	bl	8006548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2150      	movs	r1, #80	; 0x50
 8006012:	4618      	mov	r0, r3
 8006014:	f000 faf7 	bl	8006606 <TIM_ITRx_SetConfig>
      break;
 8006018:	e02c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006026:	461a      	mov	r2, r3
 8006028:	f000 fabd 	bl	80065a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2160      	movs	r1, #96	; 0x60
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fae7 	bl	8006606 <TIM_ITRx_SetConfig>
      break;
 8006038:	e01c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006046:	461a      	mov	r2, r3
 8006048:	f000 fa7e 	bl	8006548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2140      	movs	r1, #64	; 0x40
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fad7 	bl	8006606 <TIM_ITRx_SetConfig>
      break;
 8006058:	e00c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f000 face 	bl	8006606 <TIM_ITRx_SetConfig>
      break;
 800606a:	e003      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	73fb      	strb	r3, [r7, #15]
      break;
 8006070:	e000      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a46      	ldr	r2, [pc, #280]	; (80061bc <TIM_Base_SetConfig+0x12c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d013      	beq.n	80060d0 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ae:	d00f      	beq.n	80060d0 <TIM_Base_SetConfig+0x40>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a43      	ldr	r2, [pc, #268]	; (80061c0 <TIM_Base_SetConfig+0x130>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00b      	beq.n	80060d0 <TIM_Base_SetConfig+0x40>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a42      	ldr	r2, [pc, #264]	; (80061c4 <TIM_Base_SetConfig+0x134>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d007      	beq.n	80060d0 <TIM_Base_SetConfig+0x40>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a41      	ldr	r2, [pc, #260]	; (80061c8 <TIM_Base_SetConfig+0x138>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d003      	beq.n	80060d0 <TIM_Base_SetConfig+0x40>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a40      	ldr	r2, [pc, #256]	; (80061cc <TIM_Base_SetConfig+0x13c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d108      	bne.n	80060e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a35      	ldr	r2, [pc, #212]	; (80061bc <TIM_Base_SetConfig+0x12c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d02b      	beq.n	8006142 <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f0:	d027      	beq.n	8006142 <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a32      	ldr	r2, [pc, #200]	; (80061c0 <TIM_Base_SetConfig+0x130>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d023      	beq.n	8006142 <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a31      	ldr	r2, [pc, #196]	; (80061c4 <TIM_Base_SetConfig+0x134>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d01f      	beq.n	8006142 <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a30      	ldr	r2, [pc, #192]	; (80061c8 <TIM_Base_SetConfig+0x138>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d01b      	beq.n	8006142 <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a2f      	ldr	r2, [pc, #188]	; (80061cc <TIM_Base_SetConfig+0x13c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d017      	beq.n	8006142 <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a2e      	ldr	r2, [pc, #184]	; (80061d0 <TIM_Base_SetConfig+0x140>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d013      	beq.n	8006142 <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a2d      	ldr	r2, [pc, #180]	; (80061d4 <TIM_Base_SetConfig+0x144>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00f      	beq.n	8006142 <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a2c      	ldr	r2, [pc, #176]	; (80061d8 <TIM_Base_SetConfig+0x148>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00b      	beq.n	8006142 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a2b      	ldr	r2, [pc, #172]	; (80061dc <TIM_Base_SetConfig+0x14c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d007      	beq.n	8006142 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2a      	ldr	r2, [pc, #168]	; (80061e0 <TIM_Base_SetConfig+0x150>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d003      	beq.n	8006142 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a29      	ldr	r2, [pc, #164]	; (80061e4 <TIM_Base_SetConfig+0x154>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d108      	bne.n	8006154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a10      	ldr	r2, [pc, #64]	; (80061bc <TIM_Base_SetConfig+0x12c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_Base_SetConfig+0xf8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a12      	ldr	r2, [pc, #72]	; (80061cc <TIM_Base_SetConfig+0x13c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d103      	bne.n	8006190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d105      	bne.n	80061ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f023 0201 	bic.w	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	611a      	str	r2, [r3, #16]
  }
}
 80061ae:	bf00      	nop
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40000400 	.word	0x40000400
 80061c4:	40000800 	.word	0x40000800
 80061c8:	40000c00 	.word	0x40000c00
 80061cc:	40010400 	.word	0x40010400
 80061d0:	40014000 	.word	0x40014000
 80061d4:	40014400 	.word	0x40014400
 80061d8:	40014800 	.word	0x40014800
 80061dc:	40001800 	.word	0x40001800
 80061e0:	40001c00 	.word	0x40001c00
 80061e4:	40002000 	.word	0x40002000

080061e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f023 0201 	bic.w	r2, r3, #1
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f023 0302 	bic.w	r3, r3, #2
 8006230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <TIM_OC1_SetConfig+0xd8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_OC1_SetConfig+0x64>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a1f      	ldr	r2, [pc, #124]	; (80062c4 <TIM_OC1_SetConfig+0xdc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d10c      	bne.n	8006266 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f023 0308 	bic.w	r3, r3, #8
 8006252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f023 0304 	bic.w	r3, r3, #4
 8006264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <TIM_OC1_SetConfig+0xd8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <TIM_OC1_SetConfig+0x8e>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a14      	ldr	r2, [pc, #80]	; (80062c4 <TIM_OC1_SetConfig+0xdc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d111      	bne.n	800629a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800627c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40010400 	.word	0x40010400

080062c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f023 0210 	bic.w	r2, r3, #16
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f023 0320 	bic.w	r3, r3, #32
 8006312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a22      	ldr	r2, [pc, #136]	; (80063ac <TIM_OC2_SetConfig+0xe4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d003      	beq.n	8006330 <TIM_OC2_SetConfig+0x68>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a21      	ldr	r2, [pc, #132]	; (80063b0 <TIM_OC2_SetConfig+0xe8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10d      	bne.n	800634c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800634a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a17      	ldr	r2, [pc, #92]	; (80063ac <TIM_OC2_SetConfig+0xe4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_OC2_SetConfig+0x94>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a16      	ldr	r2, [pc, #88]	; (80063b0 <TIM_OC2_SetConfig+0xe8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d113      	bne.n	8006384 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800636a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	621a      	str	r2, [r3, #32]
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40010400 	.word	0x40010400

080063b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a21      	ldr	r2, [pc, #132]	; (8006494 <TIM_OC3_SetConfig+0xe0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d003      	beq.n	800641a <TIM_OC3_SetConfig+0x66>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a20      	ldr	r2, [pc, #128]	; (8006498 <TIM_OC3_SetConfig+0xe4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d10d      	bne.n	8006436 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a16      	ldr	r2, [pc, #88]	; (8006494 <TIM_OC3_SetConfig+0xe0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_OC3_SetConfig+0x92>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a15      	ldr	r2, [pc, #84]	; (8006498 <TIM_OC3_SetConfig+0xe4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d113      	bne.n	800646e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800644c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	621a      	str	r2, [r3, #32]
}
 8006488:	bf00      	nop
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	40010000 	.word	0x40010000
 8006498:	40010400 	.word	0x40010400

0800649c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	031b      	lsls	r3, r3, #12
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a12      	ldr	r2, [pc, #72]	; (8006540 <TIM_OC4_SetConfig+0xa4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_OC4_SetConfig+0x68>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a11      	ldr	r2, [pc, #68]	; (8006544 <TIM_OC4_SetConfig+0xa8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d109      	bne.n	8006518 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800650a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	019b      	lsls	r3, r3, #6
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	40010400 	.word	0x40010400

08006548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f023 0201 	bic.w	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4313      	orrs	r3, r2
 800657c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f023 030a 	bic.w	r3, r3, #10
 8006584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b087      	sub	sp, #28
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f023 0210 	bic.w	r2, r3, #16
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	031b      	lsls	r3, r3, #12
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006606:	b480      	push	{r7}
 8006608:	b085      	sub	sp, #20
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	f043 0307 	orr.w	r3, r3, #7
 8006628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	609a      	str	r2, [r3, #8]
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	021a      	lsls	r2, r3, #8
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	431a      	orrs	r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4313      	orrs	r3, r2
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	609a      	str	r2, [r3, #8]
}
 8006670:	bf00      	nop
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	2201      	movs	r2, #1
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1a      	ldr	r2, [r3, #32]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	43db      	mvns	r3, r3
 800669e:	401a      	ands	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a1a      	ldr	r2, [r3, #32]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	fa01 f303 	lsl.w	r3, r1, r3
 80066b4:	431a      	orrs	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	621a      	str	r2, [r3, #32]
}
 80066ba:	bf00      	nop
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
	...

080066c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066dc:	2302      	movs	r3, #2
 80066de:	e05a      	b.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a21      	ldr	r2, [pc, #132]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d022      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672c:	d01d      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a1d      	ldr	r2, [pc, #116]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d018      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1b      	ldr	r2, [pc, #108]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1a      	ldr	r2, [pc, #104]	; (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00e      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a18      	ldr	r2, [pc, #96]	; (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d009      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d004      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a15      	ldr	r2, [pc, #84]	; (80067bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d10c      	bne.n	8006784 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	4313      	orrs	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	40010000 	.word	0x40010000
 80067a8:	40000400 	.word	0x40000400
 80067ac:	40000800 	.word	0x40000800
 80067b0:	40000c00 	.word	0x40000c00
 80067b4:	40010400 	.word	0x40010400
 80067b8:	40014000 	.word	0x40014000
 80067bc:	40001800 	.word	0x40001800

080067c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067d8:	2302      	movs	r3, #2
 80067da:	e03d      	b.n	8006858 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e042      	b.n	80068fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fa ff58 	bl	8001740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2224      	movs	r2, #36	; 0x24
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f82b 	bl	8006904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006908:	b0c0      	sub	sp, #256	; 0x100
 800690a:	af00      	add	r7, sp, #0
 800690c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800691c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006920:	68d9      	ldr	r1, [r3, #12]
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	ea40 0301 	orr.w	r3, r0, r1
 800692c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800692e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	431a      	orrs	r2, r3
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	431a      	orrs	r2, r3
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800695c:	f021 010c 	bic.w	r1, r1, #12
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800696a:	430b      	orrs	r3, r1
 800696c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800696e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800697a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697e:	6999      	ldr	r1, [r3, #24]
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	ea40 0301 	orr.w	r3, r0, r1
 800698a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800698c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b8f      	ldr	r3, [pc, #572]	; (8006bd0 <UART_SetConfig+0x2cc>)
 8006994:	429a      	cmp	r2, r3
 8006996:	d005      	beq.n	80069a4 <UART_SetConfig+0xa0>
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	4b8d      	ldr	r3, [pc, #564]	; (8006bd4 <UART_SetConfig+0x2d0>)
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d104      	bne.n	80069ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069a4:	f7fe fe9a 	bl	80056dc <HAL_RCC_GetPCLK2Freq>
 80069a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80069ac:	e003      	b.n	80069b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069ae:	f7fe fe81 	bl	80056b4 <HAL_RCC_GetPCLK1Freq>
 80069b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c0:	f040 810c 	bne.w	8006bdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069d6:	4622      	mov	r2, r4
 80069d8:	462b      	mov	r3, r5
 80069da:	1891      	adds	r1, r2, r2
 80069dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80069de:	415b      	adcs	r3, r3
 80069e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069e6:	4621      	mov	r1, r4
 80069e8:	eb12 0801 	adds.w	r8, r2, r1
 80069ec:	4629      	mov	r1, r5
 80069ee:	eb43 0901 	adc.w	r9, r3, r1
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a06:	4690      	mov	r8, r2
 8006a08:	4699      	mov	r9, r3
 8006a0a:	4623      	mov	r3, r4
 8006a0c:	eb18 0303 	adds.w	r3, r8, r3
 8006a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a14:	462b      	mov	r3, r5
 8006a16:	eb49 0303 	adc.w	r3, r9, r3
 8006a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a32:	460b      	mov	r3, r1
 8006a34:	18db      	adds	r3, r3, r3
 8006a36:	653b      	str	r3, [r7, #80]	; 0x50
 8006a38:	4613      	mov	r3, r2
 8006a3a:	eb42 0303 	adc.w	r3, r2, r3
 8006a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a48:	f7fa f83c 	bl	8000ac4 <__aeabi_uldivmod>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4b61      	ldr	r3, [pc, #388]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006a52:	fba3 2302 	umull	r2, r3, r3, r2
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	011c      	lsls	r4, r3, #4
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	1891      	adds	r1, r2, r2
 8006a72:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a74:	415b      	adcs	r3, r3
 8006a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	eb12 0a01 	adds.w	sl, r2, r1
 8006a82:	4649      	mov	r1, r9
 8006a84:	eb43 0b01 	adc.w	fp, r3, r1
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a9c:	4692      	mov	sl, r2
 8006a9e:	469b      	mov	fp, r3
 8006aa0:	4643      	mov	r3, r8
 8006aa2:	eb1a 0303 	adds.w	r3, sl, r3
 8006aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	eb4b 0303 	adc.w	r3, fp, r3
 8006ab0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ac4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	18db      	adds	r3, r3, r3
 8006acc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ace:	4613      	mov	r3, r2
 8006ad0:	eb42 0303 	adc.w	r3, r2, r3
 8006ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ada:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ade:	f7f9 fff1 	bl	8000ac4 <__aeabi_uldivmod>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4b3b      	ldr	r3, [pc, #236]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006aea:	fba3 2301 	umull	r2, r3, r3, r1
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	2264      	movs	r2, #100	; 0x64
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
 8006af6:	1acb      	subs	r3, r1, r3
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006afe:	4b36      	ldr	r3, [pc, #216]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006b00:	fba3 2302 	umull	r2, r3, r3, r2
 8006b04:	095b      	lsrs	r3, r3, #5
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b0c:	441c      	add	r4, r3
 8006b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	1891      	adds	r1, r2, r2
 8006b26:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b28:	415b      	adcs	r3, r3
 8006b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b30:	4641      	mov	r1, r8
 8006b32:	1851      	adds	r1, r2, r1
 8006b34:	6339      	str	r1, [r7, #48]	; 0x30
 8006b36:	4649      	mov	r1, r9
 8006b38:	414b      	adcs	r3, r1
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b48:	4659      	mov	r1, fp
 8006b4a:	00cb      	lsls	r3, r1, #3
 8006b4c:	4651      	mov	r1, sl
 8006b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b52:	4651      	mov	r1, sl
 8006b54:	00ca      	lsls	r2, r1, #3
 8006b56:	4610      	mov	r0, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	189b      	adds	r3, r3, r2
 8006b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b64:	464b      	mov	r3, r9
 8006b66:	460a      	mov	r2, r1
 8006b68:	eb42 0303 	adc.w	r3, r2, r3
 8006b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b84:	460b      	mov	r3, r1
 8006b86:	18db      	adds	r3, r3, r3
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	eb42 0303 	adc.w	r3, r2, r3
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b9a:	f7f9 ff93 	bl	8000ac4 <__aeabi_uldivmod>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	2164      	movs	r1, #100	; 0x64
 8006bac:	fb01 f303 	mul.w	r3, r1, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	3332      	adds	r3, #50	; 0x32
 8006bb6:	4a08      	ldr	r2, [pc, #32]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbc:	095b      	lsrs	r3, r3, #5
 8006bbe:	f003 0207 	and.w	r2, r3, #7
 8006bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4422      	add	r2, r4
 8006bca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bcc:	e106      	b.n	8006ddc <UART_SetConfig+0x4d8>
 8006bce:	bf00      	nop
 8006bd0:	40011000 	.word	0x40011000
 8006bd4:	40011400 	.word	0x40011400
 8006bd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006be6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bee:	4642      	mov	r2, r8
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	1891      	adds	r1, r2, r2
 8006bf4:	6239      	str	r1, [r7, #32]
 8006bf6:	415b      	adcs	r3, r3
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bfe:	4641      	mov	r1, r8
 8006c00:	1854      	adds	r4, r2, r1
 8006c02:	4649      	mov	r1, r9
 8006c04:	eb43 0501 	adc.w	r5, r3, r1
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	00eb      	lsls	r3, r5, #3
 8006c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c16:	00e2      	lsls	r2, r4, #3
 8006c18:	4614      	mov	r4, r2
 8006c1a:	461d      	mov	r5, r3
 8006c1c:	4643      	mov	r3, r8
 8006c1e:	18e3      	adds	r3, r4, r3
 8006c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c24:	464b      	mov	r3, r9
 8006c26:	eb45 0303 	adc.w	r3, r5, r3
 8006c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	f04f 0300 	mov.w	r3, #0
 8006c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	008b      	lsls	r3, r1, #2
 8006c4e:	4621      	mov	r1, r4
 8006c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c54:	4621      	mov	r1, r4
 8006c56:	008a      	lsls	r2, r1, #2
 8006c58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c5c:	f7f9 ff32 	bl	8000ac4 <__aeabi_uldivmod>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4b60      	ldr	r3, [pc, #384]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006c66:	fba3 2302 	umull	r2, r3, r3, r2
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	011c      	lsls	r4, r3, #4
 8006c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c80:	4642      	mov	r2, r8
 8006c82:	464b      	mov	r3, r9
 8006c84:	1891      	adds	r1, r2, r2
 8006c86:	61b9      	str	r1, [r7, #24]
 8006c88:	415b      	adcs	r3, r3
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c90:	4641      	mov	r1, r8
 8006c92:	1851      	adds	r1, r2, r1
 8006c94:	6139      	str	r1, [r7, #16]
 8006c96:	4649      	mov	r1, r9
 8006c98:	414b      	adcs	r3, r1
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ca8:	4659      	mov	r1, fp
 8006caa:	00cb      	lsls	r3, r1, #3
 8006cac:	4651      	mov	r1, sl
 8006cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cb2:	4651      	mov	r1, sl
 8006cb4:	00ca      	lsls	r2, r1, #3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	189b      	adds	r3, r3, r2
 8006cc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	460a      	mov	r2, r1
 8006cc8:	eb42 0303 	adc.w	r3, r2, r3
 8006ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ce8:	4649      	mov	r1, r9
 8006cea:	008b      	lsls	r3, r1, #2
 8006cec:	4641      	mov	r1, r8
 8006cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	008a      	lsls	r2, r1, #2
 8006cf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cfa:	f7f9 fee3 	bl	8000ac4 <__aeabi_uldivmod>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	4b38      	ldr	r3, [pc, #224]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006d06:	fba3 2301 	umull	r2, r3, r3, r1
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	2264      	movs	r2, #100	; 0x64
 8006d0e:	fb02 f303 	mul.w	r3, r2, r3
 8006d12:	1acb      	subs	r3, r1, r3
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	3332      	adds	r3, #50	; 0x32
 8006d18:	4a33      	ldr	r2, [pc, #204]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d24:	441c      	add	r4, r3
 8006d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	673b      	str	r3, [r7, #112]	; 0x70
 8006d2e:	677a      	str	r2, [r7, #116]	; 0x74
 8006d30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d34:	4642      	mov	r2, r8
 8006d36:	464b      	mov	r3, r9
 8006d38:	1891      	adds	r1, r2, r2
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	415b      	adcs	r3, r3
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d44:	4641      	mov	r1, r8
 8006d46:	1851      	adds	r1, r2, r1
 8006d48:	6039      	str	r1, [r7, #0]
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	414b      	adcs	r3, r1
 8006d4e:	607b      	str	r3, [r7, #4]
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	00cb      	lsls	r3, r1, #3
 8006d60:	4651      	mov	r1, sl
 8006d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d66:	4651      	mov	r1, sl
 8006d68:	00ca      	lsls	r2, r1, #3
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4642      	mov	r2, r8
 8006d72:	189b      	adds	r3, r3, r2
 8006d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d76:	464b      	mov	r3, r9
 8006d78:	460a      	mov	r2, r1
 8006d7a:	eb42 0303 	adc.w	r3, r2, r3
 8006d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	663b      	str	r3, [r7, #96]	; 0x60
 8006d8a:	667a      	str	r2, [r7, #100]	; 0x64
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	f04f 0300 	mov.w	r3, #0
 8006d94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d98:	4649      	mov	r1, r9
 8006d9a:	008b      	lsls	r3, r1, #2
 8006d9c:	4641      	mov	r1, r8
 8006d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006da2:	4641      	mov	r1, r8
 8006da4:	008a      	lsls	r2, r1, #2
 8006da6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006daa:	f7f9 fe8b 	bl	8000ac4 <__aeabi_uldivmod>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006db4:	fba3 1302 	umull	r1, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	2164      	movs	r1, #100	; 0x64
 8006dbc:	fb01 f303 	mul.w	r3, r1, r3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	3332      	adds	r3, #50	; 0x32
 8006dc6:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	f003 020f 	and.w	r2, r3, #15
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4422      	add	r2, r4
 8006dda:	609a      	str	r2, [r3, #8]
}
 8006ddc:	bf00      	nop
 8006dde:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006de2:	46bd      	mov	sp, r7
 8006de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006de8:	51eb851f 	.word	0x51eb851f

08006dec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dec:	b084      	sub	sp, #16
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	f107 001c 	add.w	r0, r7, #28
 8006dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dfe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d123      	bne.n	8006e4e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d105      	bne.n	8006e42 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f9dc 	bl	8007200 <USB_CoreReset>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73fb      	strb	r3, [r7, #15]
 8006e4c:	e01b      	b.n	8006e86 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f9d0 	bl	8007200 <USB_CoreReset>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e64:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
 8006e78:	e005      	b.n	8006e86 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e86:	7fbb      	ldrb	r3, [r7, #30]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d10b      	bne.n	8006ea4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f043 0206 	orr.w	r2, r3, #6
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f043 0220 	orr.w	r2, r3, #32
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eb0:	b004      	add	sp, #16
 8006eb2:	4770      	bx	lr

08006eb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f043 0201 	orr.w	r2, r3, #1
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f023 0201 	bic.w	r2, r3, #1
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d115      	bne.n	8006f46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f26:	200a      	movs	r0, #10
 8006f28:	f7fa fd6a 	bl	8001a00 <HAL_Delay>
      ms += 10U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	330a      	adds	r3, #10
 8006f30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f956 	bl	80071e4 <USB_GetMode>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d01e      	beq.n	8006f7c <USB_SetCurrentMode+0x84>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2bc7      	cmp	r3, #199	; 0xc7
 8006f42:	d9f0      	bls.n	8006f26 <USB_SetCurrentMode+0x2e>
 8006f44:	e01a      	b.n	8006f7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d115      	bne.n	8006f78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f58:	200a      	movs	r0, #10
 8006f5a:	f7fa fd51 	bl	8001a00 <HAL_Delay>
      ms += 10U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	330a      	adds	r3, #10
 8006f62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f93d 	bl	80071e4 <USB_GetMode>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <USB_SetCurrentMode+0x84>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2bc7      	cmp	r3, #199	; 0xc7
 8006f74:	d9f0      	bls.n	8006f58 <USB_SetCurrentMode+0x60>
 8006f76:	e001      	b.n	8006f7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e005      	b.n	8006f88 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2bc8      	cmp	r3, #200	; 0xc8
 8006f80:	d101      	bne.n	8006f86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006faa:	d901      	bls.n	8006fb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e01b      	b.n	8006fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	daf2      	bge.n	8006f9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	019b      	lsls	r3, r3, #6
 8006fc0:	f043 0220 	orr.w	r2, r3, #32
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006fd4:	d901      	bls.n	8006fda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e006      	b.n	8006fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0320 	and.w	r3, r3, #32
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d0f0      	beq.n	8006fc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	3301      	adds	r3, #1
 8007004:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800700c:	d901      	bls.n	8007012 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e018      	b.n	8007044 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	daf2      	bge.n	8007000 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2210      	movs	r2, #16
 8007022:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3301      	adds	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007030:	d901      	bls.n	8007036 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e006      	b.n	8007044 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0310 	and.w	r3, r3, #16
 800703e:	2b10      	cmp	r3, #16
 8007040:	d0f0      	beq.n	8007024 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007050:	b480      	push	{r7}
 8007052:	b089      	sub	sp, #36	; 0x24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	4611      	mov	r1, r2
 800705c:	461a      	mov	r2, r3
 800705e:	460b      	mov	r3, r1
 8007060:	71fb      	strb	r3, [r7, #7]
 8007062:	4613      	mov	r3, r2
 8007064:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800706e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007072:	2b00      	cmp	r3, #0
 8007074:	d123      	bne.n	80070be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007076:	88bb      	ldrh	r3, [r7, #4]
 8007078:	3303      	adds	r3, #3
 800707a:	089b      	lsrs	r3, r3, #2
 800707c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800707e:	2300      	movs	r3, #0
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	e018      	b.n	80070b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	031a      	lsls	r2, r3, #12
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	4413      	add	r3, r2
 800708c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007090:	461a      	mov	r2, r3
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	3301      	adds	r3, #1
 800709c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3301      	adds	r3, #1
 80070a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	3301      	adds	r3, #1
 80070a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	3301      	adds	r3, #1
 80070ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	3301      	adds	r3, #1
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d3e2      	bcc.n	8007084 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3724      	adds	r7, #36	; 0x24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b08b      	sub	sp, #44	; 0x2c
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	089b      	lsrs	r3, r3, #2
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	623b      	str	r3, [r7, #32]
 80070f6:	e014      	b.n	8007122 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	601a      	str	r2, [r3, #0]
    pDest++;
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	3301      	adds	r3, #1
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	3301      	adds	r3, #1
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	3301      	adds	r3, #1
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	3301      	adds	r3, #1
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	3301      	adds	r3, #1
 8007120:	623b      	str	r3, [r7, #32]
 8007122:	6a3a      	ldr	r2, [r7, #32]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	429a      	cmp	r2, r3
 8007128:	d3e6      	bcc.n	80070f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800712a:	8bfb      	ldrh	r3, [r7, #30]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01e      	beq.n	800716e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800713a:	461a      	mov	r2, r3
 800713c:	f107 0310 	add.w	r3, r7, #16
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
 8007150:	b2da      	uxtb	r2, r3
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	701a      	strb	r2, [r3, #0]
      i++;
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	3301      	adds	r3, #1
 800715a:	623b      	str	r3, [r7, #32]
      pDest++;
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	3301      	adds	r3, #1
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007162:	8bfb      	ldrh	r3, [r7, #30]
 8007164:	3b01      	subs	r3, #1
 8007166:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007168:	8bfb      	ldrh	r3, [r7, #30]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1ea      	bne.n	8007144 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007170:	4618      	mov	r0, r3
 8007172:	372c      	adds	r7, #44	; 0x2c
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4013      	ands	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007194:	68fb      	ldr	r3, [r7, #12]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	460b      	mov	r3, r1
 80071ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80071b2:	78fb      	ldrb	r3, [r7, #3]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	4013      	ands	r3, r2
 80071d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071d6:	68bb      	ldr	r3, [r7, #8]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	f003 0301 	and.w	r3, r3, #1
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007218:	d901      	bls.n	800721e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e01b      	b.n	8007256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	daf2      	bge.n	800720c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f043 0201 	orr.w	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3301      	adds	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007242:	d901      	bls.n	8007248 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e006      	b.n	8007256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b01      	cmp	r3, #1
 8007252:	d0f0      	beq.n	8007236 <USB_CoreReset+0x36>

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
	...

08007264 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007264:	b084      	sub	sp, #16
 8007266:	b580      	push	{r7, lr}
 8007268:	b086      	sub	sp, #24
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007284:	461a      	mov	r2, r3
 8007286:	2300      	movs	r3, #0
 8007288:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d119      	bne.n	80072ee <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80072ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d10a      	bne.n	80072d8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072d0:	f043 0304 	orr.w	r3, r3, #4
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e014      	b.n	8007302 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072e6:	f023 0304 	bic.w	r3, r3, #4
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	e009      	b.n	8007302 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072fc:	f023 0304 	bic.w	r3, r3, #4
 8007300:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007302:	2110      	movs	r1, #16
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff fe43 	bl	8006f90 <USB_FlushTxFifo>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff fe6d 	bl	8006ff4 <USB_FlushRxFifo>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	e015      	b.n	8007356 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4413      	add	r3, r2
 8007332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007336:	461a      	mov	r2, r3
 8007338:	f04f 33ff 	mov.w	r3, #4294967295
 800733c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4413      	add	r3, r2
 8007346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800734a:	461a      	mov	r2, r3
 800734c:	2300      	movs	r3, #0
 800734e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	3301      	adds	r3, #1
 8007354:	613b      	str	r3, [r7, #16]
 8007356:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800735a:	461a      	mov	r2, r3
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	4293      	cmp	r3, r2
 8007360:	d3e3      	bcc.n	800732a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f04f 32ff 	mov.w	r2, #4294967295
 800736e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a18      	ldr	r2, [pc, #96]	; (80073d4 <USB_HostInit+0x170>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d10b      	bne.n	8007390 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800737e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <USB_HostInit+0x174>)
 8007384:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a14      	ldr	r2, [pc, #80]	; (80073dc <USB_HostInit+0x178>)
 800738a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800738e:	e009      	b.n	80073a4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2280      	movs	r2, #128	; 0x80
 8007394:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a11      	ldr	r2, [pc, #68]	; (80073e0 <USB_HostInit+0x17c>)
 800739a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a11      	ldr	r2, [pc, #68]	; (80073e4 <USB_HostInit+0x180>)
 80073a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d105      	bne.n	80073b8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	f043 0210 	orr.w	r2, r3, #16
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <USB_HostInit+0x184>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073d0:	b004      	add	sp, #16
 80073d2:	4770      	bx	lr
 80073d4:	40040000 	.word	0x40040000
 80073d8:	01000200 	.word	0x01000200
 80073dc:	00e00300 	.word	0x00e00300
 80073e0:	00600080 	.word	0x00600080
 80073e4:	004000e0 	.word	0x004000e0
 80073e8:	a3200008 	.word	0xa3200008

080073ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800740a:	f023 0303 	bic.w	r3, r3, #3
 800740e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	68f9      	ldr	r1, [r7, #12]
 8007420:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007424:	4313      	orrs	r3, r2
 8007426:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d107      	bne.n	800743e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007434:	461a      	mov	r2, r3
 8007436:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800743a:	6053      	str	r3, [r2, #4]
 800743c:	e00c      	b.n	8007458 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d107      	bne.n	8007454 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800744a:	461a      	mov	r2, r3
 800744c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007450:	6053      	str	r3, [r2, #4]
 8007452:	e001      	b.n	8007458 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e000      	b.n	800745a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007486:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007494:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007496:	2064      	movs	r0, #100	; 0x64
 8007498:	f7fa fab2 	bl	8001a00 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80074aa:	200a      	movs	r0, #10
 80074ac:	f7fa faa8 	bl	8001a00 <HAL_Delay>

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80074de:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <USB_DriveVbus+0x44>
 80074ea:	78fb      	ldrb	r3, [r7, #3]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d106      	bne.n	80074fe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074fc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007508:	d109      	bne.n	800751e <USB_DriveVbus+0x64>
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800751c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	0c5b      	lsrs	r3, r3, #17
 800754a:	f003 0303 	and.w	r3, r3, #3
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	b29b      	uxth	r3, r3
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	4608      	mov	r0, r1
 8007586:	4611      	mov	r1, r2
 8007588:	461a      	mov	r2, r3
 800758a:	4603      	mov	r3, r0
 800758c:	70fb      	strb	r3, [r7, #3]
 800758e:	460b      	mov	r3, r1
 8007590:	70bb      	strb	r3, [r7, #2]
 8007592:	4613      	mov	r3, r2
 8007594:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075aa:	461a      	mov	r2, r3
 80075ac:	f04f 33ff 	mov.w	r3, #4294967295
 80075b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80075b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d87c      	bhi.n	80076b4 <USB_HC_Init+0x138>
 80075ba:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <USB_HC_Init+0x44>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	080075d1 	.word	0x080075d1
 80075c4:	08007677 	.word	0x08007677
 80075c8:	080075d1 	.word	0x080075d1
 80075cc:	08007639 	.word	0x08007639
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075dc:	461a      	mov	r2, r3
 80075de:	f240 439d 	movw	r3, #1181	; 0x49d
 80075e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80075e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	da10      	bge.n	800760e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	78fa      	ldrb	r2, [r7, #3]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	440a      	add	r2, r1
 8007602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800760a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800760c:	e055      	b.n	80076ba <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a6f      	ldr	r2, [pc, #444]	; (80077d0 <USB_HC_Init+0x254>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d151      	bne.n	80076ba <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007616:	78fb      	ldrb	r3, [r7, #3]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	4413      	add	r3, r2
 800761e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	78fa      	ldrb	r2, [r7, #3]
 8007626:	0151      	lsls	r1, r2, #5
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	440a      	add	r2, r1
 800762c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007630:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007634:	60d3      	str	r3, [r2, #12]
      break;
 8007636:	e040      	b.n	80076ba <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	4413      	add	r3, r2
 8007640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007644:	461a      	mov	r2, r3
 8007646:	f240 639d 	movw	r3, #1693	; 0x69d
 800764a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800764c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007650:	2b00      	cmp	r3, #0
 8007652:	da34      	bge.n	80076be <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	4413      	add	r3, r2
 800765c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	440a      	add	r2, r1
 800766a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800766e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007672:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007674:	e023      	b.n	80076be <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	4413      	add	r3, r2
 800767e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007682:	461a      	mov	r2, r3
 8007684:	f240 2325 	movw	r3, #549	; 0x225
 8007688:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800768a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800768e:	2b00      	cmp	r3, #0
 8007690:	da17      	bge.n	80076c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	78fa      	ldrb	r2, [r7, #3]
 80076a2:	0151      	lsls	r1, r2, #5
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	440a      	add	r2, r1
 80076a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076ac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80076b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80076b2:	e006      	b.n	80076c2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	77fb      	strb	r3, [r7, #31]
      break;
 80076b8:	e004      	b.n	80076c4 <USB_HC_Init+0x148>
      break;
 80076ba:	bf00      	nop
 80076bc:	e002      	b.n	80076c4 <USB_HC_Init+0x148>
      break;
 80076be:	bf00      	nop
 80076c0:	e000      	b.n	80076c4 <USB_HC_Init+0x148>
      break;
 80076c2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d0:	461a      	mov	r2, r3
 80076d2:	2300      	movs	r3, #0
 80076d4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	0151      	lsls	r1, r2, #5
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	440a      	add	r2, r1
 80076ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076f0:	f043 0302 	orr.w	r3, r3, #2
 80076f4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	78fb      	ldrb	r3, [r7, #3]
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	2101      	movs	r1, #1
 8007706:	fa01 f303 	lsl.w	r3, r1, r3
 800770a:	6939      	ldr	r1, [r7, #16]
 800770c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007710:	4313      	orrs	r3, r2
 8007712:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007720:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007724:	2b00      	cmp	r3, #0
 8007726:	da03      	bge.n	8007730 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	e001      	b.n	8007734 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff fef9 	bl	800752c <USB_GetHostSpeed>
 800773a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800773c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007740:	2b02      	cmp	r3, #2
 8007742:	d106      	bne.n	8007752 <USB_HC_Init+0x1d6>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d003      	beq.n	8007752 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800774a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	e001      	b.n	8007756 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007756:	787b      	ldrb	r3, [r7, #1]
 8007758:	059b      	lsls	r3, r3, #22
 800775a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800775e:	78bb      	ldrb	r3, [r7, #2]
 8007760:	02db      	lsls	r3, r3, #11
 8007762:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007766:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800776c:	049b      	lsls	r3, r3, #18
 800776e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007772:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007774:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007776:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800777a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	431a      	orrs	r2, r3
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007784:	78fa      	ldrb	r2, [r7, #3]
 8007786:	0151      	lsls	r1, r2, #5
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	440a      	add	r2, r1
 800778c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007794:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007796:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800779a:	2b03      	cmp	r3, #3
 800779c:	d003      	beq.n	80077a6 <USB_HC_Init+0x22a>
 800779e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d10f      	bne.n	80077c6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	78fa      	ldrb	r2, [r7, #3]
 80077b6:	0151      	lsls	r1, r2, #5
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	440a      	add	r2, r1
 80077bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80077c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3720      	adds	r7, #32
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	40040000 	.word	0x40040000

080077d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08c      	sub	sp, #48	; 0x30
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80077ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077f0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4a5d      	ldr	r2, [pc, #372]	; (800796c <USB_HC_StartXfer+0x198>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d12f      	bne.n	800785a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d11c      	bne.n	800783a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	7c9b      	ldrb	r3, [r3, #18]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <USB_HC_StartXfer+0x3c>
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	7c9b      	ldrb	r3, [r3, #18]
 800780c:	2b02      	cmp	r3, #2
 800780e:	d124      	bne.n	800785a <USB_HC_StartXfer+0x86>
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	799b      	ldrb	r3, [r3, #6]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d120      	bne.n	800785a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	4413      	add	r3, r2
 8007820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	0151      	lsls	r1, r2, #5
 800782a:	6a3a      	ldr	r2, [r7, #32]
 800782c:	440a      	add	r2, r1
 800782e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007836:	60d3      	str	r3, [r2, #12]
 8007838:	e00f      	b.n	800785a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	791b      	ldrb	r3, [r3, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10b      	bne.n	800785a <USB_HC_StartXfer+0x86>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	795b      	ldrb	r3, [r3, #5]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d107      	bne.n	800785a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	4619      	mov	r1, r3
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 fb6b 	bl	8007f2c <USB_DoPing>
        return HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	e232      	b.n	8007cc0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	799b      	ldrb	r3, [r3, #6]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d158      	bne.n	8007914 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007862:	2301      	movs	r3, #1
 8007864:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	78db      	ldrb	r3, [r3, #3]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800786e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	8a92      	ldrh	r2, [r2, #20]
 8007874:	fb03 f202 	mul.w	r2, r3, r2
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	61da      	str	r2, [r3, #28]
 800787c:	e07c      	b.n	8007978 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	7c9b      	ldrb	r3, [r3, #18]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d130      	bne.n	80078e8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	2bbc      	cmp	r3, #188	; 0xbc
 800788c:	d918      	bls.n	80078c0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	8a9b      	ldrh	r3, [r3, #20]
 8007892:	461a      	mov	r2, r3
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	69da      	ldr	r2, [r3, #28]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d003      	beq.n	80078b0 <USB_HC_StartXfer+0xdc>
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d103      	bne.n	80078b8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2202      	movs	r2, #2
 80078b4:	60da      	str	r2, [r3, #12]
 80078b6:	e05f      	b.n	8007978 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2201      	movs	r2, #1
 80078bc:	60da      	str	r2, [r3, #12]
 80078be:	e05b      	b.n	8007978 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6a1a      	ldr	r2, [r3, #32]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d007      	beq.n	80078e0 <USB_HC_StartXfer+0x10c>
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d003      	beq.n	80078e0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2204      	movs	r2, #4
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	e04b      	b.n	8007978 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2203      	movs	r2, #3
 80078e4:	60da      	str	r2, [r3, #12]
 80078e6:	e047      	b.n	8007978 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d10d      	bne.n	800790a <USB_HC_StartXfer+0x136>
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	8a92      	ldrh	r2, [r2, #20]
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d907      	bls.n	800790a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	8a92      	ldrh	r2, [r2, #20]
 8007900:	fb03 f202 	mul.w	r2, r3, r2
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	61da      	str	r2, [r3, #28]
 8007908:	e036      	b.n	8007978 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	6a1a      	ldr	r2, [r3, #32]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	61da      	str	r2, [r3, #28]
 8007912:	e031      	b.n	8007978 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d018      	beq.n	800794e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	8a92      	ldrh	r2, [r2, #20]
 8007924:	4413      	add	r3, r2
 8007926:	3b01      	subs	r3, #1
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	8a92      	ldrh	r2, [r2, #20]
 800792c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007930:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8007932:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007934:	8b7b      	ldrh	r3, [r7, #26]
 8007936:	429a      	cmp	r2, r3
 8007938:	d90b      	bls.n	8007952 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800793a:	8b7b      	ldrh	r3, [r7, #26]
 800793c:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800793e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	8a92      	ldrh	r2, [r2, #20]
 8007944:	fb03 f202 	mul.w	r2, r3, r2
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	61da      	str	r2, [r3, #28]
 800794c:	e001      	b.n	8007952 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800794e:	2301      	movs	r3, #1
 8007950:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	78db      	ldrb	r3, [r3, #3]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800795a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	8a92      	ldrh	r2, [r2, #20]
 8007960:	fb03 f202 	mul.w	r2, r3, r2
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	61da      	str	r2, [r3, #28]
 8007968:	e006      	b.n	8007978 <USB_HC_StartXfer+0x1a4>
 800796a:	bf00      	nop
 800796c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	6a1a      	ldr	r2, [r3, #32]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007982:	04d9      	lsls	r1, r3, #19
 8007984:	4ba3      	ldr	r3, [pc, #652]	; (8007c14 <USB_HC_StartXfer+0x440>)
 8007986:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007988:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	7d9b      	ldrb	r3, [r3, #22]
 800798e:	075b      	lsls	r3, r3, #29
 8007990:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007994:	69f9      	ldr	r1, [r7, #28]
 8007996:	0148      	lsls	r0, r1, #5
 8007998:	6a39      	ldr	r1, [r7, #32]
 800799a:	4401      	add	r1, r0
 800799c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80079a4:	79fb      	ldrb	r3, [r7, #7]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d009      	beq.n	80079be <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	6999      	ldr	r1, [r3, #24]
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ba:	460a      	mov	r2, r1
 80079bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bf0c      	ite	eq
 80079ce:	2301      	moveq	r3, #1
 80079d0:	2300      	movne	r3, #0
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	69fa      	ldr	r2, [r7, #28]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	6a3a      	ldr	r2, [r7, #32]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80079f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	7e7b      	ldrb	r3, [r7, #25]
 8007a06:	075b      	lsls	r3, r3, #29
 8007a08:	69f9      	ldr	r1, [r7, #28]
 8007a0a:	0148      	lsls	r0, r1, #5
 8007a0c:	6a39      	ldr	r1, [r7, #32]
 8007a0e:	4401      	add	r1, r0
 8007a10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007a14:	4313      	orrs	r3, r2
 8007a16:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	799b      	ldrb	r3, [r3, #6]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	f040 80c3 	bne.w	8007ba8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	7c5b      	ldrb	r3, [r3, #17]
 8007a26:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	6a3a      	ldr	r2, [r7, #32]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007a3e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	0151      	lsls	r1, r2, #5
 8007a52:	6a3a      	ldr	r2, [r7, #32]
 8007a54:	440a      	add	r2, r1
 8007a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	79db      	ldrb	r3, [r3, #7]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d123      	bne.n	8007ab0 <USB_HC_StartXfer+0x2dc>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	78db      	ldrb	r3, [r3, #3]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d11f      	bne.n	8007ab0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	69fa      	ldr	r2, [r7, #28]
 8007a80:	0151      	lsls	r1, r2, #5
 8007a82:	6a3a      	ldr	r2, [r7, #32]
 8007a84:	440a      	add	r2, r1
 8007a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a8e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	69fa      	ldr	r2, [r7, #28]
 8007aa0:	0151      	lsls	r1, r2, #5
 8007aa2:	6a3a      	ldr	r2, [r7, #32]
 8007aa4:	440a      	add	r2, r1
 8007aa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aae:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	7c9b      	ldrb	r3, [r3, #18]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d003      	beq.n	8007ac0 <USB_HC_StartXfer+0x2ec>
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	7c9b      	ldrb	r3, [r3, #18]
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d117      	bne.n	8007af0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d113      	bne.n	8007af0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	78db      	ldrb	r3, [r3, #3]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d10f      	bne.n	8007af0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	6a3a      	ldr	r2, [r7, #32]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aee:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	7c9b      	ldrb	r3, [r3, #18]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d162      	bne.n	8007bbe <USB_HC_StartXfer+0x3ea>
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	78db      	ldrb	r3, [r3, #3]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d15e      	bne.n	8007bbe <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d858      	bhi.n	8007bbc <USB_HC_StartXfer+0x3e8>
 8007b0a:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <USB_HC_StartXfer+0x33c>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b43 	.word	0x08007b43
 8007b18:	08007b65 	.word	0x08007b65
 8007b1c:	08007b87 	.word	0x08007b87
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	6a3a      	ldr	r2, [r7, #32]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b3e:	6053      	str	r3, [r2, #4]
          break;
 8007b40:	e03d      	b.n	8007bbe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	69fa      	ldr	r2, [r7, #28]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	6a3a      	ldr	r2, [r7, #32]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b5c:	f043 030e 	orr.w	r3, r3, #14
 8007b60:	6053      	str	r3, [r2, #4]
          break;
 8007b62:	e02c      	b.n	8007bbe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	69fa      	ldr	r2, [r7, #28]
 8007b74:	0151      	lsls	r1, r2, #5
 8007b76:	6a3a      	ldr	r2, [r7, #32]
 8007b78:	440a      	add	r2, r1
 8007b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b82:	6053      	str	r3, [r2, #4]
          break;
 8007b84:	e01b      	b.n	8007bbe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	0151      	lsls	r1, r2, #5
 8007b98:	6a3a      	ldr	r2, [r7, #32]
 8007b9a:	440a      	add	r2, r1
 8007b9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ba4:	6053      	str	r3, [r2, #4]
          break;
 8007ba6:	e00a      	b.n	8007bbe <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	6053      	str	r3, [r2, #4]
 8007bba:	e000      	b.n	8007bbe <USB_HC_StartXfer+0x3ea>
          break;
 8007bbc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bd4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	78db      	ldrb	r3, [r3, #3]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d004      	beq.n	8007be8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be4:	613b      	str	r3, [r7, #16]
 8007be6:	e003      	b.n	8007bf0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bf6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c04:	461a      	mov	r2, r3
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	e055      	b.n	8007cc0 <USB_HC_StartXfer+0x4ec>
 8007c14:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	78db      	ldrb	r3, [r3, #3]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d14e      	bne.n	8007cbe <USB_HC_StartXfer+0x4ea>
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d04a      	beq.n	8007cbe <USB_HC_StartXfer+0x4ea>
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	79db      	ldrb	r3, [r3, #7]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d146      	bne.n	8007cbe <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	7c9b      	ldrb	r3, [r3, #18]
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d831      	bhi.n	8007c9c <USB_HC_StartXfer+0x4c8>
 8007c38:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <USB_HC_StartXfer+0x46c>)
 8007c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3e:	bf00      	nop
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c75 	.word	0x08007c75
 8007c48:	08007c51 	.word	0x08007c51
 8007c4c:	08007c75 	.word	0x08007c75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	3303      	adds	r3, #3
 8007c56:	089b      	lsrs	r3, r3, #2
 8007c58:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c5a:	8afa      	ldrh	r2, [r7, #22]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d91c      	bls.n	8007ca0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	f043 0220 	orr.w	r2, r3, #32
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c72:	e015      	b.n	8007ca0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	3303      	adds	r3, #3
 8007c7a:	089b      	lsrs	r3, r3, #2
 8007c7c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007c7e:	8afa      	ldrh	r2, [r7, #22]
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d90a      	bls.n	8007ca4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c9a:	e003      	b.n	8007ca4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007c9c:	bf00      	nop
 8007c9e:	e002      	b.n	8007ca6 <USB_HC_StartXfer+0x4d2>
        break;
 8007ca0:	bf00      	nop
 8007ca2:	e000      	b.n	8007ca6 <USB_HC_StartXfer+0x4d2>
        break;
 8007ca4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6999      	ldr	r1, [r3, #24]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	785a      	ldrb	r2, [r3, #1]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	9000      	str	r0, [sp, #0]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f7ff f9c9 	bl	8007050 <USB_WritePacket>
  }

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3728      	adds	r7, #40	; 0x28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	b29b      	uxth	r3, r3
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b089      	sub	sp, #36	; 0x24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	0c9b      	lsrs	r3, r3, #18
 8007d12:	f003 0303 	and.w	r3, r3, #3
 8007d16:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	0fdb      	lsrs	r3, r3, #31
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	0fdb      	lsrs	r3, r3, #31
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	d10d      	bne.n	8007d6c <USB_HC_Halt+0x82>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10a      	bne.n	8007d6c <USB_HC_Halt+0x82>
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d002      	beq.n	8007d68 <USB_HC_Halt+0x7e>
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d101      	bne.n	8007d6c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e0d8      	b.n	8007f1e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <USB_HC_Halt+0x8e>
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d173      	bne.n	8007e60 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	69fa      	ldr	r2, [r7, #28]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f003 0320 	and.w	r3, r3, #32
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d14a      	bne.n	8007e3a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d133      	bne.n	8007e18 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	69fa      	ldr	r2, [r7, #28]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	0151      	lsls	r1, r2, #5
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	440a      	add	r2, r1
 8007de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	3301      	adds	r3, #1
 8007df4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dfc:	d82e      	bhi.n	8007e5c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e14:	d0ec      	beq.n	8007df0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e16:	e081      	b.n	8007f1c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	0151      	lsls	r1, r2, #5
 8007e2a:	69fa      	ldr	r2, [r7, #28]
 8007e2c:	440a      	add	r2, r1
 8007e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e36:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e38:	e070      	b.n	8007f1c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	0151      	lsls	r1, r2, #5
 8007e4c:	69fa      	ldr	r2, [r7, #28]
 8007e4e:	440a      	add	r2, r1
 8007e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e5a:	e05f      	b.n	8007f1c <USB_HC_Halt+0x232>
            break;
 8007e5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e5e:	e05d      	b.n	8007f1c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	0151      	lsls	r1, r2, #5
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	440a      	add	r2, r1
 8007e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d133      	bne.n	8007ef8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	0151      	lsls	r1, r2, #5
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	440a      	add	r2, r1
 8007ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007eae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	0151      	lsls	r1, r2, #5
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	440a      	add	r2, r1
 8007ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ece:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007edc:	d81d      	bhi.n	8007f1a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ef4:	d0ec      	beq.n	8007ed0 <USB_HC_Halt+0x1e6>
 8007ef6:	e011      	b.n	8007f1c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	0151      	lsls	r1, r2, #5
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	440a      	add	r2, r1
 8007f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	e000      	b.n	8007f1c <USB_HC_Halt+0x232>
          break;
 8007f1a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3724      	adds	r7, #36	; 0x24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
	...

08007f2c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f40:	2301      	movs	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	04da      	lsls	r2, r3, #19
 8007f48:	4b15      	ldr	r3, [pc, #84]	; (8007fa0 <USB_DoPing+0x74>)
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	0151      	lsls	r1, r2, #5
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	440a      	add	r2, r1
 8007f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f5c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f74:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f7c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	1ff80000 	.word	0x1ff80000

08007fa4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b088      	sub	sp, #32
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7fe ff8c 	bl	8006ed6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fbe:	2110      	movs	r1, #16
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7fe ffe5 	bl	8006f90 <USB_FlushTxFifo>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff f80f 	bl	8006ff4 <USB_FlushRxFifo>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61bb      	str	r3, [r7, #24]
 8007fe4:	e01f      	b.n	8008026 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ffc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008004:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800800c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	4413      	add	r3, r2
 8008016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800801a:	461a      	mov	r2, r3
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	3301      	adds	r3, #1
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	2b0f      	cmp	r3, #15
 800802a:	d9dc      	bls.n	8007fe6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800802c:	2300      	movs	r3, #0
 800802e:	61bb      	str	r3, [r7, #24]
 8008030:	e034      	b.n	800809c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	4413      	add	r3, r2
 800803a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008048:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008050:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008058:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	4413      	add	r3, r2
 8008062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008066:	461a      	mov	r2, r3
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3301      	adds	r3, #1
 8008070:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008078:	d80c      	bhi.n	8008094 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	4413      	add	r3, r2
 8008082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800808c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008090:	d0ec      	beq.n	800806c <USB_StopHost+0xc8>
 8008092:	e000      	b.n	8008096 <USB_StopHost+0xf2>
        break;
 8008094:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	3301      	adds	r3, #1
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b0f      	cmp	r3, #15
 80080a0:	d9c7      	bls.n	8008032 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a8:	461a      	mov	r2, r3
 80080aa:	f04f 33ff 	mov.w	r3, #4294967295
 80080ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f04f 32ff 	mov.w	r2, #4294967295
 80080b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7fe fefb 	bl	8006eb4 <USB_EnableGlobalInt>

  return ret;
 80080be:	7ffb      	ldrb	r3, [r7, #31]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3720      	adds	r7, #32
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80080c8:	b590      	push	{r4, r7, lr}
 80080ca:	b089      	sub	sp, #36	; 0x24
 80080cc:	af04      	add	r7, sp, #16
 80080ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80080d0:	2301      	movs	r3, #1
 80080d2:	2202      	movs	r2, #2
 80080d4:	2102      	movs	r1, #2
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fc85 	bl	80089e6 <USBH_FindInterface>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	2bff      	cmp	r3, #255	; 0xff
 80080e4:	d002      	beq.n	80080ec <USBH_CDC_InterfaceInit+0x24>
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d901      	bls.n	80080f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80080ec:	2302      	movs	r3, #2
 80080ee:	e13d      	b.n	800836c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fc5a 	bl	80089ae <USBH_SelectInterface>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008104:	2302      	movs	r3, #2
 8008106:	e131      	b.n	800836c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800810e:	2050      	movs	r0, #80	; 0x50
 8008110:	f002 fb74 	bl	800a7fc <malloc>
 8008114:	4603      	mov	r3, r0
 8008116:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008128:	2302      	movs	r3, #2
 800812a:	e11f      	b.n	800836c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800812c:	2250      	movs	r2, #80	; 0x50
 800812e:	2100      	movs	r1, #0
 8008130:	68b8      	ldr	r0, [r7, #8]
 8008132:	f002 fc1f 	bl	800a974 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	211a      	movs	r1, #26
 800813c:	fb01 f303 	mul.w	r3, r1, r3
 8008140:	4413      	add	r3, r2
 8008142:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	b25b      	sxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	da15      	bge.n	800817a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	211a      	movs	r1, #26
 8008154:	fb01 f303 	mul.w	r3, r1, r3
 8008158:	4413      	add	r3, r2
 800815a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800815e:	781a      	ldrb	r2, [r3, #0]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008164:	7bfb      	ldrb	r3, [r7, #15]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	211a      	movs	r1, #26
 800816a:	fb01 f303 	mul.w	r3, r1, r3
 800816e:	4413      	add	r3, r2
 8008170:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008174:	881a      	ldrh	r2, [r3, #0]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	785b      	ldrb	r3, [r3, #1]
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 ffce 	bl	800a122 <USBH_AllocPipe>
 8008186:	4603      	mov	r3, r0
 8008188:	461a      	mov	r2, r3
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	7819      	ldrb	r1, [r3, #0]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	7858      	ldrb	r0, [r3, #1]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	8952      	ldrh	r2, [r2, #10]
 80081a6:	9202      	str	r2, [sp, #8]
 80081a8:	2203      	movs	r2, #3
 80081aa:	9201      	str	r2, [sp, #4]
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	4623      	mov	r3, r4
 80081b0:	4602      	mov	r2, r0
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 ff86 	bl	800a0c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	2200      	movs	r2, #0
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f002 fa95 	bl	800a6f0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80081c6:	2300      	movs	r3, #0
 80081c8:	2200      	movs	r2, #0
 80081ca:	210a      	movs	r1, #10
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fc0a 	bl	80089e6 <USBH_FindInterface>
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	2bff      	cmp	r3, #255	; 0xff
 80081da:	d002      	beq.n	80081e2 <USBH_CDC_InterfaceInit+0x11a>
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d901      	bls.n	80081e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80081e2:	2302      	movs	r3, #2
 80081e4:	e0c2      	b.n	800836c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	211a      	movs	r1, #26
 80081ec:	fb01 f303 	mul.w	r3, r1, r3
 80081f0:	4413      	add	r3, r2
 80081f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	b25b      	sxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da16      	bge.n	800822c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	211a      	movs	r1, #26
 8008204:	fb01 f303 	mul.w	r3, r1, r3
 8008208:	4413      	add	r3, r2
 800820a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800820e:	781a      	ldrb	r2, [r3, #0]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	211a      	movs	r1, #26
 800821a:	fb01 f303 	mul.w	r3, r1, r3
 800821e:	4413      	add	r3, r2
 8008220:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008224:	881a      	ldrh	r2, [r3, #0]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	835a      	strh	r2, [r3, #26]
 800822a:	e015      	b.n	8008258 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	211a      	movs	r1, #26
 8008232:	fb01 f303 	mul.w	r3, r1, r3
 8008236:	4413      	add	r3, r2
 8008238:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800823c:	781a      	ldrb	r2, [r3, #0]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	211a      	movs	r1, #26
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	4413      	add	r3, r2
 800824e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008252:	881a      	ldrh	r2, [r3, #0]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	211a      	movs	r1, #26
 800825e:	fb01 f303 	mul.w	r3, r1, r3
 8008262:	4413      	add	r3, r2
 8008264:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	b25b      	sxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	da16      	bge.n	800829e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	211a      	movs	r1, #26
 8008276:	fb01 f303 	mul.w	r3, r1, r3
 800827a:	4413      	add	r3, r2
 800827c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008280:	781a      	ldrb	r2, [r3, #0]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	211a      	movs	r1, #26
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	4413      	add	r3, r2
 8008292:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008296:	881a      	ldrh	r2, [r3, #0]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	835a      	strh	r2, [r3, #26]
 800829c:	e015      	b.n	80082ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	211a      	movs	r1, #26
 80082a4:	fb01 f303 	mul.w	r3, r1, r3
 80082a8:	4413      	add	r3, r2
 80082aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082ae:	781a      	ldrb	r2, [r3, #0]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	211a      	movs	r1, #26
 80082ba:	fb01 f303 	mul.w	r3, r1, r3
 80082be:	4413      	add	r3, r2
 80082c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80082c4:	881a      	ldrh	r2, [r3, #0]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	7b9b      	ldrb	r3, [r3, #14]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 ff26 	bl	800a122 <USBH_AllocPipe>
 80082d6:	4603      	mov	r3, r0
 80082d8:	461a      	mov	r2, r3
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	7bdb      	ldrb	r3, [r3, #15]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 ff1c 	bl	800a122 <USBH_AllocPipe>
 80082ea:	4603      	mov	r3, r0
 80082ec:	461a      	mov	r2, r3
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	7b59      	ldrb	r1, [r3, #13]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	7b98      	ldrb	r0, [r3, #14]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	8b12      	ldrh	r2, [r2, #24]
 800830a:	9202      	str	r2, [sp, #8]
 800830c:	2202      	movs	r2, #2
 800830e:	9201      	str	r2, [sp, #4]
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	4623      	mov	r3, r4
 8008314:	4602      	mov	r2, r0
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 fed4 	bl	800a0c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	7b19      	ldrb	r1, [r3, #12]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	7bd8      	ldrb	r0, [r3, #15]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	8b52      	ldrh	r2, [r2, #26]
 8008334:	9202      	str	r2, [sp, #8]
 8008336:	2202      	movs	r2, #2
 8008338:	9201      	str	r2, [sp, #4]
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	4623      	mov	r3, r4
 800833e:	4602      	mov	r2, r0
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 febf 	bl	800a0c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	7b5b      	ldrb	r3, [r3, #13]
 8008352:	2200      	movs	r2, #0
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f002 f9ca 	bl	800a6f0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	7b1b      	ldrb	r3, [r3, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f002 f9c3 	bl	800a6f0 <USBH_LL_SetToggle>

  return USBH_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	bd90      	pop	{r4, r7, pc}

08008374 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00e      	beq.n	80083ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 feb4 	bl	800a102 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 fedf 	bl	800a164 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	7b1b      	ldrb	r3, [r3, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00e      	beq.n	80083d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	7b1b      	ldrb	r3, [r3, #12]
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 fea1 	bl	800a102 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	7b1b      	ldrb	r3, [r3, #12]
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 fecc 	bl	800a164 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	7b5b      	ldrb	r3, [r3, #13]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00e      	beq.n	80083f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	7b5b      	ldrb	r3, [r3, #13]
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 fe8e 	bl	800a102 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	7b5b      	ldrb	r3, [r3, #13]
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 feb9 	bl	800a164 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	4618      	mov	r0, r3
 800840e:	f002 f9fd 	bl	800a80c <free>
    phost->pActiveClass->pData = 0U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008418:	2200      	movs	r2, #0
 800841a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3340      	adds	r3, #64	; 0x40
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f8b1 	bl	80085a6 <GetLineCoding>
 8008444:	4603      	mov	r3, r0
 8008446:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008448:	7afb      	ldrb	r3, [r7, #11]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008454:	2102      	movs	r1, #2
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800845a:	7afb      	ldrb	r3, [r7, #11]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800846c:	2301      	movs	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008484:	2b04      	cmp	r3, #4
 8008486:	d877      	bhi.n	8008578 <USBH_CDC_Process+0x114>
 8008488:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <USBH_CDC_Process+0x2c>)
 800848a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848e:	bf00      	nop
 8008490:	080084a5 	.word	0x080084a5
 8008494:	080084ab 	.word	0x080084ab
 8008498:	080084db 	.word	0x080084db
 800849c:	0800854f 	.word	0x0800854f
 80084a0:	0800855d 	.word	0x0800855d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
      break;
 80084a8:	e06d      	b.n	8008586 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f897 	bl	80085e4 <SetLineCoding>
 80084b6:	4603      	mov	r3, r0
 80084b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d104      	bne.n	80084ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80084c8:	e058      	b.n	800857c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d055      	beq.n	800857c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2204      	movs	r2, #4
 80084d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80084d8:	e050      	b.n	800857c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	3340      	adds	r3, #64	; 0x40
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f860 	bl	80085a6 <GetLineCoding>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d126      	bne.n	800853e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008502:	791b      	ldrb	r3, [r3, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	d13b      	bne.n	8008580 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008512:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008514:	429a      	cmp	r2, r3
 8008516:	d133      	bne.n	8008580 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008522:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008524:	429a      	cmp	r2, r3
 8008526:	d12b      	bne.n	8008580 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008530:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008532:	429a      	cmp	r2, r3
 8008534:	d124      	bne.n	8008580 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f958 	bl	80087ec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800853c:	e020      	b.n	8008580 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d01d      	beq.n	8008580 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2204      	movs	r2, #4
 8008548:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800854c:	e018      	b.n	8008580 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f867 	bl	8008622 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f8da 	bl	800870e <CDC_ProcessReception>
      break;
 800855a:	e014      	b.n	8008586 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800855c:	2100      	movs	r1, #0
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 f822 	bl	80095a8 <USBH_ClrFeature>
 8008564:	4603      	mov	r3, r0
 8008566:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10a      	bne.n	8008584 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008576:	e005      	b.n	8008584 <USBH_CDC_Process+0x120>

    default:
      break;
 8008578:	bf00      	nop
 800857a:	e004      	b.n	8008586 <USBH_CDC_Process+0x122>
      break;
 800857c:	bf00      	nop
 800857e:	e002      	b.n	8008586 <USBH_CDC_Process+0x122>
      break;
 8008580:	bf00      	nop
 8008582:	e000      	b.n	8008586 <USBH_CDC_Process+0x122>
      break;
 8008584:	bf00      	nop

  }

  return status;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	22a1      	movs	r2, #161	; 0xa1
 80085b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2221      	movs	r2, #33	; 0x21
 80085ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2207      	movs	r2, #7
 80085cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2207      	movs	r2, #7
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f001 fb23 	bl	8009c20 <USBH_CtlReq>
 80085da:	4603      	mov	r3, r0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2221      	movs	r2, #33	; 0x21
 80085f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2220      	movs	r2, #32
 80085f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2207      	movs	r2, #7
 800860a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2207      	movs	r2, #7
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f001 fb04 	bl	8009c20 <USBH_CtlReq>
 8008618:	4603      	mov	r3, r0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b086      	sub	sp, #24
 8008626:	af02      	add	r7, sp, #8
 8008628:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008634:	2300      	movs	r3, #0
 8008636:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800863e:	2b01      	cmp	r3, #1
 8008640:	d002      	beq.n	8008648 <CDC_ProcessTransmission+0x26>
 8008642:	2b02      	cmp	r3, #2
 8008644:	d023      	beq.n	800868e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008646:	e05e      	b.n	8008706 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	8b12      	ldrh	r2, [r2, #24]
 8008650:	4293      	cmp	r3, r2
 8008652:	d90b      	bls.n	800866c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	69d9      	ldr	r1, [r3, #28]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8b1a      	ldrh	r2, [r3, #24]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	7b5b      	ldrb	r3, [r3, #13]
 8008660:	2001      	movs	r0, #1
 8008662:	9000      	str	r0, [sp, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 fcea 	bl	800a03e <USBH_BulkSendData>
 800866a:	e00b      	b.n	8008684 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008674:	b29a      	uxth	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	7b5b      	ldrb	r3, [r3, #13]
 800867a:	2001      	movs	r0, #1
 800867c:	9000      	str	r0, [sp, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 fcdd 	bl	800a03e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800868c:	e03b      	b.n	8008706 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	7b5b      	ldrb	r3, [r3, #13]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f002 f801 	bl	800a69c <USBH_LL_GetURBState>
 800869a:	4603      	mov	r3, r0
 800869c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800869e:	7afb      	ldrb	r3, [r7, #11]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d128      	bne.n	80086f6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	8b12      	ldrh	r2, [r2, #24]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d90e      	bls.n	80086ce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	8b12      	ldrh	r2, [r2, #24]
 80086b8:	1a9a      	subs	r2, r3, r2
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	8b12      	ldrh	r2, [r2, #24]
 80086c6:	441a      	add	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	61da      	str	r2, [r3, #28]
 80086cc:	e002      	b.n	80086d4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80086e4:	e00e      	b.n	8008704 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f868 	bl	80087c4 <USBH_CDC_TransmitCallback>
      break;
 80086f4:	e006      	b.n	8008704 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d103      	bne.n	8008704 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008704:	bf00      	nop
  }
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b086      	sub	sp, #24
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008720:	2300      	movs	r3, #0
 8008722:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800872a:	2b03      	cmp	r3, #3
 800872c:	d002      	beq.n	8008734 <CDC_ProcessReception+0x26>
 800872e:	2b04      	cmp	r3, #4
 8008730:	d00e      	beq.n	8008750 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008732:	e043      	b.n	80087bc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	6a19      	ldr	r1, [r3, #32]
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	8b5a      	ldrh	r2, [r3, #26]
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	7b1b      	ldrb	r3, [r3, #12]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 fca1 	bl	800a088 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2204      	movs	r2, #4
 800874a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800874e:	e035      	b.n	80087bc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	7b1b      	ldrb	r3, [r3, #12]
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 ffa0 	bl	800a69c <USBH_LL_GetURBState>
 800875c:	4603      	mov	r3, r0
 800875e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008760:	7cfb      	ldrb	r3, [r7, #19]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d129      	bne.n	80087ba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	7b1b      	ldrb	r3, [r3, #12]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 ff03 	bl	800a578 <USBH_LL_GetLastXferSize>
 8008772:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	429a      	cmp	r2, r3
 800877c:	d016      	beq.n	80087ac <CDC_ProcessReception+0x9e>
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	8b5b      	ldrh	r3, [r3, #26]
 8008782:	461a      	mov	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4293      	cmp	r3, r2
 8008788:	d910      	bls.n	80087ac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	1ad2      	subs	r2, r2, r3
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	6a1a      	ldr	r2, [r3, #32]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	441a      	add	r2, r3
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2203      	movs	r2, #3
 80087a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80087aa:	e006      	b.n	80087ba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f80f 	bl	80087d8 <USBH_CDC_ReceiveCallback>
      break;
 80087ba:	bf00      	nop
  }
}
 80087bc:	bf00      	nop
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008814:	2302      	movs	r3, #2
 8008816:	e029      	b.n	800886c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	79fa      	ldrb	r2, [r7, #7]
 800881c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 f81f 	bl	8008874 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f001 fdd3 	bl	800a410 <USBH_LL_Init>

  return USBH_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	e009      	b.n	800889a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	33e0      	adds	r3, #224	; 0xe0
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	2200      	movs	r2, #0
 8008892:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3301      	adds	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b0f      	cmp	r3, #15
 800889e:	d9f2      	bls.n	8008886 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e009      	b.n	80088ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088b0:	2200      	movs	r2, #0
 80088b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	3301      	adds	r3, #1
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088c0:	d3f1      	bcc.n	80088a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2240      	movs	r2, #64	; 0x40
 80088e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	331c      	adds	r3, #28
 8008912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008916:	2100      	movs	r1, #0
 8008918:	4618      	mov	r0, r3
 800891a:	f002 f82b 	bl	800a974 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008928:	2100      	movs	r1, #0
 800892a:	4618      	mov	r0, r3
 800892c:	f002 f822 	bl	800a974 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008936:	2212      	movs	r2, #18
 8008938:	2100      	movs	r1, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f002 f81a 	bl	800a974 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008946:	223e      	movs	r2, #62	; 0x3e
 8008948:	2100      	movs	r1, #0
 800894a:	4618      	mov	r0, r3
 800894c:	f002 f812 	bl	800a974 <memset>

  return USBH_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800895a:	b480      	push	{r7}
 800895c:	b085      	sub	sp, #20
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d016      	beq.n	800899c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10e      	bne.n	8008996 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800897e:	1c59      	adds	r1, r3, #1
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	33de      	adds	r3, #222	; 0xde
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	73fb      	strb	r3, [r7, #15]
 8008994:	e004      	b.n	80089a0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008996:	2302      	movs	r3, #2
 8008998:	73fb      	strb	r3, [r7, #15]
 800899a:	e001      	b.n	80089a0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800899c:	2302      	movs	r3, #2
 800899e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b085      	sub	sp, #20
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	460b      	mov	r3, r1
 80089b8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80089c4:	78fa      	ldrb	r2, [r7, #3]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d204      	bcs.n	80089d4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	78fa      	ldrb	r2, [r7, #3]
 80089ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80089d2:	e001      	b.n	80089d8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80089d4:	2302      	movs	r3, #2
 80089d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b087      	sub	sp, #28
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	4608      	mov	r0, r1
 80089f0:	4611      	mov	r1, r2
 80089f2:	461a      	mov	r2, r3
 80089f4:	4603      	mov	r3, r0
 80089f6:	70fb      	strb	r3, [r7, #3]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70bb      	strb	r3, [r7, #2]
 80089fc:	4613      	mov	r3, r2
 80089fe:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008a0e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a10:	e025      	b.n	8008a5e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	221a      	movs	r2, #26
 8008a16:	fb02 f303 	mul.w	r3, r2, r3
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	3302      	adds	r3, #2
 8008a22:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	795b      	ldrb	r3, [r3, #5]
 8008a28:	78fa      	ldrb	r2, [r7, #3]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d002      	beq.n	8008a34 <USBH_FindInterface+0x4e>
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	2bff      	cmp	r3, #255	; 0xff
 8008a32:	d111      	bne.n	8008a58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a38:	78ba      	ldrb	r2, [r7, #2]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d002      	beq.n	8008a44 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a3e:	78bb      	ldrb	r3, [r7, #2]
 8008a40:	2bff      	cmp	r3, #255	; 0xff
 8008a42:	d109      	bne.n	8008a58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a48:	787a      	ldrb	r2, [r7, #1]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d002      	beq.n	8008a54 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008a4e:	787b      	ldrb	r3, [r7, #1]
 8008a50:	2bff      	cmp	r3, #255	; 0xff
 8008a52:	d101      	bne.n	8008a58 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
 8008a56:	e006      	b.n	8008a66 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008a58:	7dfb      	ldrb	r3, [r7, #23]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d9d6      	bls.n	8008a12 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008a64:	23ff      	movs	r3, #255	; 0xff
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f001 fd04 	bl	800a488 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008a80:	2101      	movs	r1, #1
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 fe1d 	bl	800a6c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af04      	add	r7, sp, #16
 8008a9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d102      	bne.n	8008ab6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2203      	movs	r2, #3
 8008ab4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b0b      	cmp	r3, #11
 8008abe:	f200 81be 	bhi.w	8008e3e <USBH_Process+0x3aa>
 8008ac2:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <USBH_Process+0x34>)
 8008ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac8:	08008af9 	.word	0x08008af9
 8008acc:	08008b2b 	.word	0x08008b2b
 8008ad0:	08008b93 	.word	0x08008b93
 8008ad4:	08008dd9 	.word	0x08008dd9
 8008ad8:	08008e3f 	.word	0x08008e3f
 8008adc:	08008c37 	.word	0x08008c37
 8008ae0:	08008d7f 	.word	0x08008d7f
 8008ae4:	08008c6d 	.word	0x08008c6d
 8008ae8:	08008c8d 	.word	0x08008c8d
 8008aec:	08008cad 	.word	0x08008cad
 8008af0:	08008cf1 	.word	0x08008cf1
 8008af4:	08008dc1 	.word	0x08008dc1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 819e 	beq.w	8008e42 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008b0c:	20c8      	movs	r0, #200	; 0xc8
 8008b0e:	f001 fe22 	bl	800a756 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fd15 	bl	800a542 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b28:	e18b      	b.n	8008e42 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d107      	bne.n	8008b44 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b42:	e18d      	b.n	8008e60 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b4e:	d914      	bls.n	8008b7a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008b56:	3301      	adds	r3, #1
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d903      	bls.n	8008b72 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	220d      	movs	r2, #13
 8008b6e:	701a      	strb	r2, [r3, #0]
      break;
 8008b70:	e176      	b.n	8008e60 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	701a      	strb	r2, [r3, #0]
      break;
 8008b78:	e172      	b.n	8008e60 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008b80:	f103 020a 	add.w	r2, r3, #10
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008b8a:	200a      	movs	r0, #10
 8008b8c:	f001 fde3 	bl	800a756 <USBH_Delay>
      break;
 8008b90:	e166      	b.n	8008e60 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d005      	beq.n	8008ba8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ba2:	2104      	movs	r1, #4
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008ba8:	2064      	movs	r0, #100	; 0x64
 8008baa:	f001 fdd4 	bl	800a756 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 fca0 	bl	800a4f4 <USBH_LL_GetSpeed>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2205      	movs	r2, #5
 8008bc2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 faab 	bl	800a122 <USBH_AllocPipe>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	461a      	mov	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008bd4:	2180      	movs	r1, #128	; 0x80
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f001 faa3 	bl	800a122 <USBH_AllocPipe>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	461a      	mov	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	7919      	ldrb	r1, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008bf8:	b292      	uxth	r2, r2
 8008bfa:	9202      	str	r2, [sp, #8]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	9201      	str	r2, [sp, #4]
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	4603      	mov	r3, r0
 8008c04:	2280      	movs	r2, #128	; 0x80
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f001 fa5c 	bl	800a0c4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	7959      	ldrb	r1, [r3, #5]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c20:	b292      	uxth	r2, r2
 8008c22:	9202      	str	r2, [sp, #8]
 8008c24:	2200      	movs	r2, #0
 8008c26:	9201      	str	r2, [sp, #4]
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f001 fa48 	bl	800a0c4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c34:	e114      	b.n	8008e60 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f918 	bl	8008e6c <USBH_HandleEnum>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f040 80fe 	bne.w	8008e46 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d103      	bne.n	8008c64 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2208      	movs	r2, #8
 8008c60:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c62:	e0f0      	b.n	8008e46 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2207      	movs	r2, #7
 8008c68:	701a      	strb	r2, [r3, #0]
      break;
 8008c6a:	e0ec      	b.n	8008e46 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 80e9 	beq.w	8008e4a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c7e:	2101      	movs	r1, #1
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2208      	movs	r2, #8
 8008c88:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008c8a:	e0de      	b.n	8008e4a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fc3f 	bl	800951a <USBH_SetCfg>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f040 80d5 	bne.w	8008e4e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2209      	movs	r2, #9
 8008ca8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008caa:	e0d0      	b.n	8008e4e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008cb2:	f003 0320 	and.w	r3, r3, #32
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d016      	beq.n	8008ce8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008cba:	2101      	movs	r1, #1
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fc4f 	bl	8009560 <USBH_SetFeature>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d103      	bne.n	8008cd6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	220a      	movs	r2, #10
 8008cd2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cd4:	e0bd      	b.n	8008e52 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	f040 80b9 	bne.w	8008e52 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	220a      	movs	r2, #10
 8008ce4:	701a      	strb	r2, [r3, #0]
      break;
 8008ce6:	e0b4      	b.n	8008e52 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	220a      	movs	r2, #10
 8008cec:	701a      	strb	r2, [r3, #0]
      break;
 8008cee:	e0b0      	b.n	8008e52 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 80ad 	beq.w	8008e56 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]
 8008d08:	e016      	b.n	8008d38 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008d0a:	7bfa      	ldrb	r2, [r7, #15]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	32de      	adds	r2, #222	; 0xde
 8008d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d14:	791a      	ldrb	r2, [r3, #4]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d108      	bne.n	8008d32 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008d20:	7bfa      	ldrb	r2, [r7, #15]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	32de      	adds	r2, #222	; 0xde
 8008d26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008d30:	e005      	b.n	8008d3e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	3301      	adds	r3, #1
 8008d36:	73fb      	strb	r3, [r7, #15]
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0e5      	beq.n	8008d0a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d016      	beq.n	8008d76 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2206      	movs	r2, #6
 8008d5e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d66:	2103      	movs	r1, #3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d6c:	e073      	b.n	8008e56 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	220d      	movs	r2, #13
 8008d72:	701a      	strb	r2, [r3, #0]
      break;
 8008d74:	e06f      	b.n	8008e56 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	220d      	movs	r2, #13
 8008d7a:	701a      	strb	r2, [r3, #0]
      break;
 8008d7c:	e06b      	b.n	8008e56 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d017      	beq.n	8008db8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
 8008d94:	4603      	mov	r3, r0
 8008d96:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d103      	bne.n	8008da8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	220b      	movs	r2, #11
 8008da4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008da6:	e058      	b.n	8008e5a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d154      	bne.n	8008e5a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	220d      	movs	r2, #13
 8008db4:	701a      	strb	r2, [r3, #0]
      break;
 8008db6:	e050      	b.n	8008e5a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	220d      	movs	r2, #13
 8008dbc:	701a      	strb	r2, [r3, #0]
      break;
 8008dbe:	e04c      	b.n	8008e5a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d049      	beq.n	8008e5e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	4798      	blx	r3
      }
      break;
 8008dd6:	e042      	b.n	8008e5e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7ff fd47 	bl	8008874 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d009      	beq.n	8008e04 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d005      	beq.n	8008e1a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e14:	2105      	movs	r1, #5
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d107      	bne.n	8008e36 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7ff fe1f 	bl	8008a72 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e34:	e014      	b.n	8008e60 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 fb26 	bl	800a488 <USBH_LL_Start>
      break;
 8008e3c:	e010      	b.n	8008e60 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008e3e:	bf00      	nop
 8008e40:	e00e      	b.n	8008e60 <USBH_Process+0x3cc>
      break;
 8008e42:	bf00      	nop
 8008e44:	e00c      	b.n	8008e60 <USBH_Process+0x3cc>
      break;
 8008e46:	bf00      	nop
 8008e48:	e00a      	b.n	8008e60 <USBH_Process+0x3cc>
    break;
 8008e4a:	bf00      	nop
 8008e4c:	e008      	b.n	8008e60 <USBH_Process+0x3cc>
      break;
 8008e4e:	bf00      	nop
 8008e50:	e006      	b.n	8008e60 <USBH_Process+0x3cc>
      break;
 8008e52:	bf00      	nop
 8008e54:	e004      	b.n	8008e60 <USBH_Process+0x3cc>
      break;
 8008e56:	bf00      	nop
 8008e58:	e002      	b.n	8008e60 <USBH_Process+0x3cc>
      break;
 8008e5a:	bf00      	nop
 8008e5c:	e000      	b.n	8008e60 <USBH_Process+0x3cc>
      break;
 8008e5e:	bf00      	nop
  }
  return USBH_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop

08008e6c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af04      	add	r7, sp, #16
 8008e72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008e74:	2301      	movs	r3, #1
 8008e76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	785b      	ldrb	r3, [r3, #1]
 8008e80:	2b07      	cmp	r3, #7
 8008e82:	f200 81c1 	bhi.w	8009208 <USBH_HandleEnum+0x39c>
 8008e86:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <USBH_HandleEnum+0x20>)
 8008e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8c:	08008ead 	.word	0x08008ead
 8008e90:	08008f6b 	.word	0x08008f6b
 8008e94:	08008fd5 	.word	0x08008fd5
 8008e98:	08009063 	.word	0x08009063
 8008e9c:	080090cd 	.word	0x080090cd
 8008ea0:	0800913d 	.word	0x0800913d
 8008ea4:	08009183 	.word	0x08009183
 8008ea8:	080091c9 	.word	0x080091c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008eac:	2108      	movs	r1, #8
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa50 	bl	8009354 <USBH_Get_DevDesc>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d130      	bne.n	8008f20 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	7919      	ldrb	r1, [r3, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ee2:	b292      	uxth	r2, r2
 8008ee4:	9202      	str	r2, [sp, #8]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	9201      	str	r2, [sp, #4]
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	4603      	mov	r3, r0
 8008eee:	2280      	movs	r2, #128	; 0x80
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 f8e7 	bl	800a0c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	7959      	ldrb	r1, [r3, #5]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f0a:	b292      	uxth	r2, r2
 8008f0c:	9202      	str	r2, [sp, #8]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	9201      	str	r2, [sp, #4]
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	4603      	mov	r3, r0
 8008f16:	2200      	movs	r2, #0
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 f8d3 	bl	800a0c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f1e:	e175      	b.n	800920c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	f040 8172 	bne.w	800920c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f2e:	3301      	adds	r3, #1
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d903      	bls.n	8008f4a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	220d      	movs	r2, #13
 8008f46:	701a      	strb	r2, [r3, #0]
      break;
 8008f48:	e160      	b.n	800920c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	795b      	ldrb	r3, [r3, #5]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 f907 	bl	800a164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	791b      	ldrb	r3, [r3, #4]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 f901 	bl	800a164 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	701a      	strb	r2, [r3, #0]
      break;
 8008f68:	e150      	b.n	800920c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008f6a:	2112      	movs	r1, #18
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f9f1 	bl	8009354 <USBH_Get_DevDesc>
 8008f72:	4603      	mov	r3, r0
 8008f74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d103      	bne.n	8008f84 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f82:	e145      	b.n	8009210 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	f040 8142 	bne.w	8009210 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f92:	3301      	adds	r3, #1
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d903      	bls.n	8008fae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	220d      	movs	r2, #13
 8008faa:	701a      	strb	r2, [r3, #0]
      break;
 8008fac:	e130      	b.n	8009210 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	795b      	ldrb	r3, [r3, #5]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 f8d5 	bl	800a164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	791b      	ldrb	r3, [r3, #4]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 f8cf 	bl	800a164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	701a      	strb	r2, [r3, #0]
      break;
 8008fd2:	e11d      	b.n	8009210 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fa7b 	bl	80094d2 <USBH_SetAddress>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d132      	bne.n	800904c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008fe6:	2002      	movs	r0, #2
 8008fe8:	f001 fbb5 	bl	800a756 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2203      	movs	r2, #3
 8008ff8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	7919      	ldrb	r1, [r3, #4]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800900e:	b292      	uxth	r2, r2
 8009010:	9202      	str	r2, [sp, #8]
 8009012:	2200      	movs	r2, #0
 8009014:	9201      	str	r2, [sp, #4]
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	4603      	mov	r3, r0
 800901a:	2280      	movs	r2, #128	; 0x80
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 f851 	bl	800a0c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	7959      	ldrb	r1, [r3, #5]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009036:	b292      	uxth	r2, r2
 8009038:	9202      	str	r2, [sp, #8]
 800903a:	2200      	movs	r2, #0
 800903c:	9201      	str	r2, [sp, #4]
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	4603      	mov	r3, r0
 8009042:	2200      	movs	r2, #0
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f001 f83d 	bl	800a0c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800904a:	e0e3      	b.n	8009214 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	2b03      	cmp	r3, #3
 8009050:	f040 80e0 	bne.w	8009214 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	220d      	movs	r2, #13
 8009058:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	705a      	strb	r2, [r3, #1]
      break;
 8009060:	e0d8      	b.n	8009214 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009062:	2109      	movs	r1, #9
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f9a1 	bl	80093ac <USBH_Get_CfgDesc>
 800906a:	4603      	mov	r3, r0
 800906c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800906e:	7bbb      	ldrb	r3, [r7, #14]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d103      	bne.n	800907c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2204      	movs	r2, #4
 8009078:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800907a:	e0cd      	b.n	8009218 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	2b03      	cmp	r3, #3
 8009080:	f040 80ca 	bne.w	8009218 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800908a:	3301      	adds	r3, #1
 800908c:	b2da      	uxtb	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800909a:	2b03      	cmp	r3, #3
 800909c:	d903      	bls.n	80090a6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	220d      	movs	r2, #13
 80090a2:	701a      	strb	r2, [r3, #0]
      break;
 80090a4:	e0b8      	b.n	8009218 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	795b      	ldrb	r3, [r3, #5]
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 f859 	bl	800a164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	791b      	ldrb	r3, [r3, #4]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 f853 	bl	800a164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	701a      	strb	r2, [r3, #0]
      break;
 80090ca:	e0a5      	b.n	8009218 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f969 	bl	80093ac <USBH_Get_CfgDesc>
 80090da:	4603      	mov	r3, r0
 80090dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090de:	7bbb      	ldrb	r3, [r7, #14]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d103      	bne.n	80090ec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2205      	movs	r2, #5
 80090e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80090ea:	e097      	b.n	800921c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	f040 8094 	bne.w	800921c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090fa:	3301      	adds	r3, #1
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800910a:	2b03      	cmp	r3, #3
 800910c:	d903      	bls.n	8009116 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	220d      	movs	r2, #13
 8009112:	701a      	strb	r2, [r3, #0]
      break;
 8009114:	e082      	b.n	800921c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	795b      	ldrb	r3, [r3, #5]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 f821 	bl	800a164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	791b      	ldrb	r3, [r3, #4]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 f81b 	bl	800a164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	701a      	strb	r2, [r3, #0]
      break;
 800913a:	e06f      	b.n	800921c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009142:	2b00      	cmp	r3, #0
 8009144:	d019      	beq.n	800917a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009152:	23ff      	movs	r3, #255	; 0xff
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f953 	bl	8009400 <USBH_Get_StringDesc>
 800915a:	4603      	mov	r3, r0
 800915c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d103      	bne.n	800916c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2206      	movs	r2, #6
 8009168:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800916a:	e059      	b.n	8009220 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	2b03      	cmp	r3, #3
 8009170:	d156      	bne.n	8009220 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2206      	movs	r2, #6
 8009176:	705a      	strb	r2, [r3, #1]
      break;
 8009178:	e052      	b.n	8009220 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2206      	movs	r2, #6
 800917e:	705a      	strb	r2, [r3, #1]
      break;
 8009180:	e04e      	b.n	8009220 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009188:	2b00      	cmp	r3, #0
 800918a:	d019      	beq.n	80091c0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009198:	23ff      	movs	r3, #255	; 0xff
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f930 	bl	8009400 <USBH_Get_StringDesc>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d103      	bne.n	80091b2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2207      	movs	r2, #7
 80091ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091b0:	e038      	b.n	8009224 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091b2:	7bbb      	ldrb	r3, [r7, #14]
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d135      	bne.n	8009224 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2207      	movs	r2, #7
 80091bc:	705a      	strb	r2, [r3, #1]
      break;
 80091be:	e031      	b.n	8009224 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2207      	movs	r2, #7
 80091c4:	705a      	strb	r2, [r3, #1]
      break;
 80091c6:	e02d      	b.n	8009224 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d017      	beq.n	8009202 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80091de:	23ff      	movs	r3, #255	; 0xff
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f90d 	bl	8009400 <USBH_Get_StringDesc>
 80091e6:	4603      	mov	r3, r0
 80091e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80091f4:	e018      	b.n	8009228 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d115      	bne.n	8009228 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009200:	e012      	b.n	8009228 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]
      break;
 8009206:	e00f      	b.n	8009228 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009208:	bf00      	nop
 800920a:	e00e      	b.n	800922a <USBH_HandleEnum+0x3be>
      break;
 800920c:	bf00      	nop
 800920e:	e00c      	b.n	800922a <USBH_HandleEnum+0x3be>
      break;
 8009210:	bf00      	nop
 8009212:	e00a      	b.n	800922a <USBH_HandleEnum+0x3be>
      break;
 8009214:	bf00      	nop
 8009216:	e008      	b.n	800922a <USBH_HandleEnum+0x3be>
      break;
 8009218:	bf00      	nop
 800921a:	e006      	b.n	800922a <USBH_HandleEnum+0x3be>
      break;
 800921c:	bf00      	nop
 800921e:	e004      	b.n	800922a <USBH_HandleEnum+0x3be>
      break;
 8009220:	bf00      	nop
 8009222:	e002      	b.n	800922a <USBH_HandleEnum+0x3be>
      break;
 8009224:	bf00      	nop
 8009226:	e000      	b.n	800922a <USBH_HandleEnum+0x3be>
      break;
 8009228:	bf00      	nop
  }
  return Status;
 800922a:	7bfb      	ldrb	r3, [r7, #15]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009246:	bf00      	nop
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f804 	bl	8009276 <USBH_HandleSof>
}
 800926e:	bf00      	nop
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b0b      	cmp	r3, #11
 8009286:	d10a      	bne.n	800929e <USBH_HandleSof+0x28>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	4798      	blx	r3
  }
}
 800929e:	bf00      	nop
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b083      	sub	sp, #12
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80092b6:	bf00      	nop
}
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80092d2:	bf00      	nop
}
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80092de:	b480      	push	{r7}
 80092e0:	b083      	sub	sp, #12
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 f8c6 	bl	800a4be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	791b      	ldrb	r3, [r3, #4]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 ff13 	bl	800a164 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	795b      	ldrb	r3, [r3, #5]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 ff0d 	bl	800a164 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af02      	add	r7, sp, #8
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009360:	887b      	ldrh	r3, [r7, #2]
 8009362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009366:	d901      	bls.n	800936c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009368:	2303      	movs	r3, #3
 800936a:	e01b      	b.n	80093a4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009372:	887b      	ldrh	r3, [r7, #2]
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	4613      	mov	r3, r2
 8009378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800937c:	2100      	movs	r1, #0
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f872 	bl	8009468 <USBH_GetDescriptor>
 8009384:	4603      	mov	r3, r0
 8009386:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d109      	bne.n	80093a2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009394:	887a      	ldrh	r2, [r7, #2]
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f929 	bl	80095f0 <USBH_ParseDevDesc>
 800939e:	4603      	mov	r3, r0
 80093a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af02      	add	r7, sp, #8
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	331c      	adds	r3, #28
 80093bc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80093be:	887b      	ldrh	r3, [r7, #2]
 80093c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c4:	d901      	bls.n	80093ca <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e016      	b.n	80093f8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80093ca:	887b      	ldrh	r3, [r7, #2]
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093d4:	2100      	movs	r1, #0
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f846 	bl	8009468 <USBH_GetDescriptor>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d107      	bne.n	80093f6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80093e6:	887b      	ldrh	r3, [r7, #2]
 80093e8:	461a      	mov	r2, r3
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f9b3 	bl	8009758 <USBH_ParseCfgDesc>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af02      	add	r7, sp, #8
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	607a      	str	r2, [r7, #4]
 800940a:	461a      	mov	r2, r3
 800940c:	460b      	mov	r3, r1
 800940e:	72fb      	strb	r3, [r7, #11]
 8009410:	4613      	mov	r3, r2
 8009412:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009414:	893b      	ldrh	r3, [r7, #8]
 8009416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800941a:	d802      	bhi.n	8009422 <USBH_Get_StringDesc+0x22>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009422:	2303      	movs	r3, #3
 8009424:	e01c      	b.n	8009460 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009426:	7afb      	ldrb	r3, [r7, #11]
 8009428:	b29b      	uxth	r3, r3
 800942a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800942e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009436:	893b      	ldrh	r3, [r7, #8]
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	460b      	mov	r3, r1
 800943c:	2100      	movs	r1, #0
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 f812 	bl	8009468 <USBH_GetDescriptor>
 8009444:	4603      	mov	r3, r0
 8009446:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009448:	7dfb      	ldrb	r3, [r7, #23]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d107      	bne.n	800945e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009454:	893a      	ldrh	r2, [r7, #8]
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fb93 	bl	8009b84 <USBH_ParseStringDesc>
  }

  return status;
 800945e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	607b      	str	r3, [r7, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	72fb      	strb	r3, [r7, #11]
 8009476:	4613      	mov	r3, r2
 8009478:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	789b      	ldrb	r3, [r3, #2]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d11c      	bne.n	80094bc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009482:	7afb      	ldrb	r3, [r7, #11]
 8009484:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009488:	b2da      	uxtb	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2206      	movs	r2, #6
 8009492:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	893a      	ldrh	r2, [r7, #8]
 8009498:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800949a:	893b      	ldrh	r3, [r7, #8]
 800949c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80094a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094a4:	d104      	bne.n	80094b0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f240 4209 	movw	r2, #1033	; 0x409
 80094ac:	829a      	strh	r2, [r3, #20]
 80094ae:	e002      	b.n	80094b6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8b3a      	ldrh	r2, [r7, #24]
 80094ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80094bc:	8b3b      	ldrh	r3, [r7, #24]
 80094be:	461a      	mov	r2, r3
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fbac 	bl	8009c20 <USBH_CtlReq>
 80094c8:	4603      	mov	r3, r0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b082      	sub	sp, #8
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	460b      	mov	r3, r1
 80094dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	789b      	ldrb	r3, [r3, #2]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d10f      	bne.n	8009506 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2205      	movs	r2, #5
 80094f0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80094f2:	78fb      	ldrb	r3, [r7, #3]
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009506:	2200      	movs	r2, #0
 8009508:	2100      	movs	r1, #0
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fb88 	bl	8009c20 <USBH_CtlReq>
 8009510:	4603      	mov	r3, r0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	460b      	mov	r3, r1
 8009524:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	789b      	ldrb	r3, [r3, #2]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d10e      	bne.n	800954c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2209      	movs	r2, #9
 8009538:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	887a      	ldrh	r2, [r7, #2]
 800953e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800954c:	2200      	movs	r2, #0
 800954e:	2100      	movs	r1, #0
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fb65 	bl	8009c20 <USBH_CtlReq>
 8009556:	4603      	mov	r3, r0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	789b      	ldrb	r3, [r3, #2]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d10f      	bne.n	8009594 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2203      	movs	r2, #3
 800957e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	b29a      	uxth	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009594:	2200      	movs	r2, #0
 8009596:	2100      	movs	r1, #0
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fb41 	bl	8009c20 <USBH_CtlReq>
 800959e:	4603      	mov	r3, r0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	789b      	ldrb	r3, [r3, #2]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d10f      	bne.n	80095dc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2202      	movs	r2, #2
 80095c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095dc:	2200      	movs	r2, #0
 80095de:	2100      	movs	r1, #0
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fb1d 	bl	8009c20 <USBH_CtlReq>
 80095e6:	4603      	mov	r3, r0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	4613      	mov	r3, r2
 80095fc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f203 3326 	addw	r3, r3, #806	; 0x326
 8009604:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009610:	2302      	movs	r3, #2
 8009612:	e098      	b.n	8009746 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	781a      	ldrb	r2, [r3, #0]
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	785a      	ldrb	r2, [r3, #1]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	3302      	adds	r3, #2
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	b29a      	uxth	r2, r3
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	3303      	adds	r3, #3
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	b29b      	uxth	r3, r3
 8009638:	4313      	orrs	r3, r2
 800963a:	b29a      	uxth	r2, r3
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	791a      	ldrb	r2, [r3, #4]
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	795a      	ldrb	r2, [r3, #5]
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	799a      	ldrb	r2, [r3, #6]
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	79da      	ldrb	r2, [r3, #7]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009666:	2b00      	cmp	r3, #0
 8009668:	d004      	beq.n	8009674 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009670:	2b01      	cmp	r3, #1
 8009672:	d11b      	bne.n	80096ac <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	79db      	ldrb	r3, [r3, #7]
 8009678:	2b20      	cmp	r3, #32
 800967a:	dc0f      	bgt.n	800969c <USBH_ParseDevDesc+0xac>
 800967c:	2b08      	cmp	r3, #8
 800967e:	db0f      	blt.n	80096a0 <USBH_ParseDevDesc+0xb0>
 8009680:	3b08      	subs	r3, #8
 8009682:	4a34      	ldr	r2, [pc, #208]	; (8009754 <USBH_ParseDevDesc+0x164>)
 8009684:	fa22 f303 	lsr.w	r3, r2, r3
 8009688:	f003 0301 	and.w	r3, r3, #1
 800968c:	2b00      	cmp	r3, #0
 800968e:	bf14      	ite	ne
 8009690:	2301      	movne	r3, #1
 8009692:	2300      	moveq	r3, #0
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d106      	bne.n	80096a8 <USBH_ParseDevDesc+0xb8>
 800969a:	e001      	b.n	80096a0 <USBH_ParseDevDesc+0xb0>
 800969c:	2b40      	cmp	r3, #64	; 0x40
 800969e:	d003      	beq.n	80096a8 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	2208      	movs	r2, #8
 80096a4:	71da      	strb	r2, [r3, #7]
        break;
 80096a6:	e000      	b.n	80096aa <USBH_ParseDevDesc+0xba>
        break;
 80096a8:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80096aa:	e00e      	b.n	80096ca <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d107      	bne.n	80096c6 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	79db      	ldrb	r3, [r3, #7]
 80096ba:	2b08      	cmp	r3, #8
 80096bc:	d005      	beq.n	80096ca <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2208      	movs	r2, #8
 80096c2:	71da      	strb	r2, [r3, #7]
 80096c4:	e001      	b.n	80096ca <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80096c6:	2303      	movs	r3, #3
 80096c8:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80096ca:	88fb      	ldrh	r3, [r7, #6]
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	d939      	bls.n	8009744 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	3308      	adds	r3, #8
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	3309      	adds	r3, #9
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	021b      	lsls	r3, r3, #8
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	4313      	orrs	r3, r2
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	330a      	adds	r3, #10
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	330b      	adds	r3, #11
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	b29b      	uxth	r3, r3
 8009700:	4313      	orrs	r3, r2
 8009702:	b29a      	uxth	r2, r3
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	330c      	adds	r3, #12
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	b29a      	uxth	r2, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	330d      	adds	r3, #13
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	b29b      	uxth	r3, r3
 8009718:	021b      	lsls	r3, r3, #8
 800971a:	b29b      	uxth	r3, r3
 800971c:	4313      	orrs	r3, r2
 800971e:	b29a      	uxth	r2, r3
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	7b9a      	ldrb	r2, [r3, #14]
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	7bda      	ldrb	r2, [r3, #15]
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	7c1a      	ldrb	r2, [r3, #16]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	7c5a      	ldrb	r2, [r3, #17]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009744:	7dfb      	ldrb	r3, [r7, #23]
}
 8009746:	4618      	mov	r0, r3
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	01000101 	.word	0x01000101

08009758 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b08c      	sub	sp, #48	; 0x30
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	4613      	mov	r3, r2
 8009764:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800976c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800977a:	2300      	movs	r3, #0
 800977c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d101      	bne.n	800978a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009786:	2302      	movs	r3, #2
 8009788:	e0db      	b.n	8009942 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	781a      	ldrb	r2, [r3, #0]
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	785a      	ldrb	r2, [r3, #1]
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	3302      	adds	r3, #2
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	3303      	adds	r3, #3
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	021b      	lsls	r3, r3, #8
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	4313      	orrs	r3, r2
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ba:	bf28      	it	cs
 80097bc:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	791a      	ldrb	r2, [r3, #4]
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	795a      	ldrb	r2, [r3, #5]
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	799a      	ldrb	r2, [r3, #6]
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	79da      	ldrb	r2, [r3, #7]
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	7a1a      	ldrb	r2, [r3, #8]
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2b09      	cmp	r3, #9
 80097f4:	d002      	beq.n	80097fc <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	2209      	movs	r2, #9
 80097fa:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80097fc:	88fb      	ldrh	r3, [r7, #6]
 80097fe:	2b09      	cmp	r3, #9
 8009800:	f240 809d 	bls.w	800993e <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8009804:	2309      	movs	r3, #9
 8009806:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009808:	2300      	movs	r3, #0
 800980a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800980c:	e081      	b.n	8009912 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800980e:	f107 0316 	add.w	r3, r7, #22
 8009812:	4619      	mov	r1, r3
 8009814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009816:	f000 f9e8 	bl	8009bea <USBH_GetNextDesc>
 800981a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	785b      	ldrb	r3, [r3, #1]
 8009820:	2b04      	cmp	r3, #4
 8009822:	d176      	bne.n	8009912 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	2b09      	cmp	r3, #9
 800982a:	d002      	beq.n	8009832 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982e:	2209      	movs	r2, #9
 8009830:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009836:	221a      	movs	r2, #26
 8009838:	fb02 f303 	mul.w	r3, r2, r3
 800983c:	3308      	adds	r3, #8
 800983e:	6a3a      	ldr	r2, [r7, #32]
 8009840:	4413      	add	r3, r2
 8009842:	3302      	adds	r3, #2
 8009844:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009848:	69f8      	ldr	r0, [r7, #28]
 800984a:	f000 f87e 	bl	800994a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009854:	2300      	movs	r3, #0
 8009856:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009858:	e043      	b.n	80098e2 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800985a:	f107 0316 	add.w	r3, r7, #22
 800985e:	4619      	mov	r1, r3
 8009860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009862:	f000 f9c2 	bl	8009bea <USBH_GetNextDesc>
 8009866:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	2b05      	cmp	r3, #5
 800986e:	d138      	bne.n	80098e2 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	795b      	ldrb	r3, [r3, #5]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d113      	bne.n	80098a0 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800987c:	2b02      	cmp	r3, #2
 800987e:	d003      	beq.n	8009888 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	799b      	ldrb	r3, [r3, #6]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d10b      	bne.n	80098a0 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	79db      	ldrb	r3, [r3, #7]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10b      	bne.n	80098a8 <USBH_ParseCfgDesc+0x150>
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b09      	cmp	r3, #9
 8009896:	d007      	beq.n	80098a8 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	2209      	movs	r2, #9
 800989c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800989e:	e003      	b.n	80098a8 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	2207      	movs	r2, #7
 80098a4:	701a      	strb	r2, [r3, #0]
 80098a6:	e000      	b.n	80098aa <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80098a8:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80098aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80098b2:	3201      	adds	r2, #1
 80098b4:	00d2      	lsls	r2, r2, #3
 80098b6:	211a      	movs	r1, #26
 80098b8:	fb01 f303 	mul.w	r3, r1, r3
 80098bc:	4413      	add	r3, r2
 80098be:	3308      	adds	r3, #8
 80098c0:	6a3a      	ldr	r2, [r7, #32]
 80098c2:	4413      	add	r3, r2
 80098c4:	3304      	adds	r3, #4
 80098c6:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80098c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ca:	69b9      	ldr	r1, [r7, #24]
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 f870 	bl	80099b2 <USBH_ParseEPDesc>
 80098d2:	4603      	mov	r3, r0
 80098d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80098d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098dc:	3301      	adds	r3, #1
 80098de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	791b      	ldrb	r3, [r3, #4]
 80098e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d204      	bcs.n	80098f8 <USBH_ParseCfgDesc+0x1a0>
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	885a      	ldrh	r2, [r3, #2]
 80098f2:	8afb      	ldrh	r3, [r7, #22]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d8b0      	bhi.n	800985a <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	791b      	ldrb	r3, [r3, #4]
 80098fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009900:	429a      	cmp	r2, r3
 8009902:	d201      	bcs.n	8009908 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8009904:	2303      	movs	r3, #3
 8009906:	e01c      	b.n	8009942 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8009908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800990c:	3301      	adds	r3, #1
 800990e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009916:	2b01      	cmp	r3, #1
 8009918:	d805      	bhi.n	8009926 <USBH_ParseCfgDesc+0x1ce>
 800991a:	6a3b      	ldr	r3, [r7, #32]
 800991c:	885a      	ldrh	r2, [r3, #2]
 800991e:	8afb      	ldrh	r3, [r7, #22]
 8009920:	429a      	cmp	r2, r3
 8009922:	f63f af74 	bhi.w	800980e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	791b      	ldrb	r3, [r3, #4]
 800992a:	2b02      	cmp	r3, #2
 800992c:	bf28      	it	cs
 800992e:	2302      	movcs	r3, #2
 8009930:	b2db      	uxtb	r3, r3
 8009932:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009936:	429a      	cmp	r2, r3
 8009938:	d201      	bcs.n	800993e <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800993a:	2303      	movs	r3, #3
 800993c:	e001      	b.n	8009942 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800993e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009942:	4618      	mov	r0, r3
 8009944:	3730      	adds	r7, #48	; 0x30
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781a      	ldrb	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	785a      	ldrb	r2, [r3, #1]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	789a      	ldrb	r2, [r3, #2]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	78da      	ldrb	r2, [r3, #3]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	3304      	adds	r3, #4
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	2b02      	cmp	r3, #2
 800997c:	bf28      	it	cs
 800997e:	2302      	movcs	r3, #2
 8009980:	b2da      	uxtb	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	795a      	ldrb	r2, [r3, #5]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	799a      	ldrb	r2, [r3, #6]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	79da      	ldrb	r2, [r3, #7]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	7a1a      	ldrb	r2, [r3, #8]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	721a      	strb	r2, [r3, #8]
}
 80099a6:	bf00      	nop
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b087      	sub	sp, #28
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	781a      	ldrb	r2, [r3, #0]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	785a      	ldrb	r2, [r3, #1]
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	789a      	ldrb	r2, [r3, #2]
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	78da      	ldrb	r2, [r3, #3]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	3304      	adds	r3, #4
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	3305      	adds	r3, #5
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	021b      	lsls	r3, r3, #8
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	4313      	orrs	r3, r2
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	799a      	ldrb	r2, [r3, #6]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	889b      	ldrh	r3, [r3, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d009      	beq.n	8009a22 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a16:	d804      	bhi.n	8009a22 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a20:	d901      	bls.n	8009a26 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8009a22:	2303      	movs	r3, #3
 8009a24:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d136      	bne.n	8009a9e <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	78db      	ldrb	r3, [r3, #3]
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d108      	bne.n	8009a4e <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	889b      	ldrh	r3, [r3, #4]
 8009a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a44:	f240 8097 	bls.w	8009b76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	75fb      	strb	r3, [r7, #23]
 8009a4c:	e093      	b.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	78db      	ldrb	r3, [r3, #3]
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d107      	bne.n	8009a6a <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	889b      	ldrh	r3, [r3, #4]
 8009a5e:	2b40      	cmp	r3, #64	; 0x40
 8009a60:	f240 8089 	bls.w	8009b76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009a64:	2303      	movs	r3, #3
 8009a66:	75fb      	strb	r3, [r7, #23]
 8009a68:	e085      	b.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	78db      	ldrb	r3, [r3, #3]
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d005      	beq.n	8009a82 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	78db      	ldrb	r3, [r3, #3]
 8009a7a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d10a      	bne.n	8009a98 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	799b      	ldrb	r3, [r3, #6]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <USBH_ParseEPDesc+0xe0>
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	799b      	ldrb	r3, [r3, #6]
 8009a8e:	2b10      	cmp	r3, #16
 8009a90:	d970      	bls.n	8009b74 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a92:	2303      	movs	r3, #3
 8009a94:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009a96:	e06d      	b.n	8009b74 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	75fb      	strb	r3, [r7, #23]
 8009a9c:	e06b      	b.n	8009b76 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d13c      	bne.n	8009b22 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	78db      	ldrb	r3, [r3, #3]
 8009aac:	f003 0303 	and.w	r3, r3, #3
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d005      	beq.n	8009ac0 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	78db      	ldrb	r3, [r3, #3]
 8009ab8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d106      	bne.n	8009ace <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	889b      	ldrh	r3, [r3, #4]
 8009ac4:	2b40      	cmp	r3, #64	; 0x40
 8009ac6:	d956      	bls.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009acc:	e053      	b.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	78db      	ldrb	r3, [r3, #3]
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d10e      	bne.n	8009af8 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	799b      	ldrb	r3, [r3, #6]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d007      	beq.n	8009af2 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009ae6:	2b10      	cmp	r3, #16
 8009ae8:	d803      	bhi.n	8009af2 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009aee:	2b40      	cmp	r3, #64	; 0x40
 8009af0:	d941      	bls.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009af2:	2303      	movs	r3, #3
 8009af4:	75fb      	strb	r3, [r7, #23]
 8009af6:	e03e      	b.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	78db      	ldrb	r3, [r3, #3]
 8009afc:	f003 0303 	and.w	r3, r3, #3
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d10b      	bne.n	8009b1c <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	799b      	ldrb	r3, [r3, #6]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d004      	beq.n	8009b16 <USBH_ParseEPDesc+0x164>
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	889b      	ldrh	r3, [r3, #4]
 8009b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b14:	d32f      	bcc.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009b16:	2303      	movs	r3, #3
 8009b18:	75fb      	strb	r3, [r7, #23]
 8009b1a:	e02c      	b.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	75fb      	strb	r3, [r7, #23]
 8009b20:	e029      	b.n	8009b76 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d120      	bne.n	8009b6e <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	78db      	ldrb	r3, [r3, #3]
 8009b30:	f003 0303 	and.w	r3, r3, #3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d106      	bne.n	8009b46 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	889b      	ldrh	r3, [r3, #4]
 8009b3c:	2b08      	cmp	r3, #8
 8009b3e:	d01a      	beq.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009b40:	2303      	movs	r3, #3
 8009b42:	75fb      	strb	r3, [r7, #23]
 8009b44:	e017      	b.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	78db      	ldrb	r3, [r3, #3]
 8009b4a:	f003 0303 	and.w	r3, r3, #3
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d10a      	bne.n	8009b68 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	799b      	ldrb	r3, [r3, #6]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <USBH_ParseEPDesc+0x1b0>
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	889b      	ldrh	r3, [r3, #4]
 8009b5e:	2b08      	cmp	r3, #8
 8009b60:	d909      	bls.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009b62:	2303      	movs	r3, #3
 8009b64:	75fb      	strb	r3, [r7, #23]
 8009b66:	e006      	b.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	75fb      	strb	r3, [r7, #23]
 8009b6c:	e003      	b.n	8009b76 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	75fb      	strb	r3, [r7, #23]
 8009b72:	e000      	b.n	8009b76 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b74:	bf00      	nop
  }

  return status;
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	371c      	adds	r7, #28
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3301      	adds	r3, #1
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d120      	bne.n	8009bde <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	1e9a      	subs	r2, r3, #2
 8009ba2:	88fb      	ldrh	r3, [r7, #6]
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	bf28      	it	cs
 8009ba8:	4613      	movcs	r3, r2
 8009baa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	3302      	adds	r3, #2
 8009bb0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	82fb      	strh	r3, [r7, #22]
 8009bb6:	e00b      	b.n	8009bd0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009bb8:	8afb      	ldrh	r3, [r7, #22]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	781a      	ldrb	r2, [r3, #0]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009bca:	8afb      	ldrh	r3, [r7, #22]
 8009bcc:	3302      	adds	r3, #2
 8009bce:	82fb      	strh	r3, [r7, #22]
 8009bd0:	8afa      	ldrh	r2, [r7, #22]
 8009bd2:	8abb      	ldrh	r3, [r7, #20]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d3ef      	bcc.n	8009bb8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	701a      	strb	r2, [r3, #0]
  }
}
 8009bde:	bf00      	nop
 8009be0:	371c      	adds	r7, #28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	881a      	ldrh	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	4413      	add	r3, r2
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4413      	add	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c12:	68fb      	ldr	r3, [r7, #12]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	789b      	ldrb	r3, [r3, #2]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d002      	beq.n	8009c40 <USBH_CtlReq+0x20>
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d00f      	beq.n	8009c5e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009c3e:	e027      	b.n	8009c90 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	88fa      	ldrh	r2, [r7, #6]
 8009c4a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2202      	movs	r2, #2
 8009c56:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c5c:	e018      	b.n	8009c90 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 f81c 	bl	8009c9c <USBH_HandleControl>
 8009c64:	4603      	mov	r3, r0
 8009c66:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <USBH_CtlReq+0x54>
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	2b03      	cmp	r3, #3
 8009c72:	d106      	bne.n	8009c82 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2201      	movs	r2, #1
 8009c78:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	761a      	strb	r2, [r3, #24]
      break;
 8009c80:	e005      	b.n	8009c8e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d102      	bne.n	8009c8e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	709a      	strb	r2, [r3, #2]
      break;
 8009c8e:	bf00      	nop
  }
  return status;
 8009c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7e1b      	ldrb	r3, [r3, #24]
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	2b0a      	cmp	r3, #10
 8009cb4:	f200 8156 	bhi.w	8009f64 <USBH_HandleControl+0x2c8>
 8009cb8:	a201      	add	r2, pc, #4	; (adr r2, 8009cc0 <USBH_HandleControl+0x24>)
 8009cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbe:	bf00      	nop
 8009cc0:	08009ced 	.word	0x08009ced
 8009cc4:	08009d07 	.word	0x08009d07
 8009cc8:	08009d71 	.word	0x08009d71
 8009ccc:	08009d97 	.word	0x08009d97
 8009cd0:	08009dcf 	.word	0x08009dcf
 8009cd4:	08009df9 	.word	0x08009df9
 8009cd8:	08009e4b 	.word	0x08009e4b
 8009cdc:	08009e6d 	.word	0x08009e6d
 8009ce0:	08009ea9 	.word	0x08009ea9
 8009ce4:	08009ecf 	.word	0x08009ecf
 8009ce8:	08009f0d 	.word	0x08009f0d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f103 0110 	add.w	r1, r3, #16
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	795b      	ldrb	r3, [r3, #5]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f943 	bl	8009f84 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2202      	movs	r2, #2
 8009d02:	761a      	strb	r2, [r3, #24]
      break;
 8009d04:	e139      	b.n	8009f7a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	795b      	ldrb	r3, [r3, #5]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fcc5 	bl	800a69c <USBH_LL_GetURBState>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d11e      	bne.n	8009d5a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7c1b      	ldrb	r3, [r3, #16]
 8009d20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	8adb      	ldrh	r3, [r3, #22]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00a      	beq.n	8009d44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009d2e:	7b7b      	ldrb	r3, [r7, #13]
 8009d30:	2b80      	cmp	r3, #128	; 0x80
 8009d32:	d103      	bne.n	8009d3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2203      	movs	r2, #3
 8009d38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d3a:	e115      	b.n	8009f68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2205      	movs	r2, #5
 8009d40:	761a      	strb	r2, [r3, #24]
      break;
 8009d42:	e111      	b.n	8009f68 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009d44:	7b7b      	ldrb	r3, [r7, #13]
 8009d46:	2b80      	cmp	r3, #128	; 0x80
 8009d48:	d103      	bne.n	8009d52 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2209      	movs	r2, #9
 8009d4e:	761a      	strb	r2, [r3, #24]
      break;
 8009d50:	e10a      	b.n	8009f68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2207      	movs	r2, #7
 8009d56:	761a      	strb	r2, [r3, #24]
      break;
 8009d58:	e106      	b.n	8009f68 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	d003      	beq.n	8009d68 <USBH_HandleControl+0xcc>
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	f040 8100 	bne.w	8009f68 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	220b      	movs	r2, #11
 8009d6c:	761a      	strb	r2, [r3, #24]
      break;
 8009d6e:	e0fb      	b.n	8009f68 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6899      	ldr	r1, [r3, #8]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	899a      	ldrh	r2, [r3, #12]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	791b      	ldrb	r3, [r3, #4]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f93a 	bl	800a002 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2204      	movs	r2, #4
 8009d92:	761a      	strb	r2, [r3, #24]
      break;
 8009d94:	e0f1      	b.n	8009f7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	791b      	ldrb	r3, [r3, #4]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fc7d 	bl	800a69c <USBH_LL_GetURBState>
 8009da2:	4603      	mov	r3, r0
 8009da4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d102      	bne.n	8009db2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2209      	movs	r2, #9
 8009db0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	2b05      	cmp	r3, #5
 8009db6:	d102      	bne.n	8009dbe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009db8:	2303      	movs	r3, #3
 8009dba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009dbc:	e0d6      	b.n	8009f6c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	f040 80d3 	bne.w	8009f6c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	220b      	movs	r2, #11
 8009dca:	761a      	strb	r2, [r3, #24]
      break;
 8009dcc:	e0ce      	b.n	8009f6c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6899      	ldr	r1, [r3, #8]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	899a      	ldrh	r2, [r3, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	795b      	ldrb	r3, [r3, #5]
 8009dda:	2001      	movs	r0, #1
 8009ddc:	9000      	str	r0, [sp, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f8ea 	bl	8009fb8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2206      	movs	r2, #6
 8009df4:	761a      	strb	r2, [r3, #24]
      break;
 8009df6:	e0c0      	b.n	8009f7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	795b      	ldrb	r3, [r3, #5]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fc4c 	bl	800a69c <USBH_LL_GetURBState>
 8009e04:	4603      	mov	r3, r0
 8009e06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d103      	bne.n	8009e16 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2207      	movs	r2, #7
 8009e12:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e14:	e0ac      	b.n	8009f70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b05      	cmp	r3, #5
 8009e1a:	d105      	bne.n	8009e28 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	220c      	movs	r2, #12
 8009e20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009e22:	2303      	movs	r3, #3
 8009e24:	73fb      	strb	r3, [r7, #15]
      break;
 8009e26:	e0a3      	b.n	8009f70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d103      	bne.n	8009e36 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2205      	movs	r2, #5
 8009e32:	761a      	strb	r2, [r3, #24]
      break;
 8009e34:	e09c      	b.n	8009f70 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	2b04      	cmp	r3, #4
 8009e3a:	f040 8099 	bne.w	8009f70 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	220b      	movs	r2, #11
 8009e42:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009e44:	2302      	movs	r3, #2
 8009e46:	73fb      	strb	r3, [r7, #15]
      break;
 8009e48:	e092      	b.n	8009f70 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	791b      	ldrb	r3, [r3, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2100      	movs	r1, #0
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f8d5 	bl	800a002 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2208      	movs	r2, #8
 8009e68:	761a      	strb	r2, [r3, #24]

      break;
 8009e6a:	e086      	b.n	8009f7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	791b      	ldrb	r3, [r3, #4]
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fc12 	bl	800a69c <USBH_LL_GetURBState>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d105      	bne.n	8009e8e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	220d      	movs	r2, #13
 8009e86:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e8c:	e072      	b.n	8009f74 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d103      	bne.n	8009e9c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	220b      	movs	r2, #11
 8009e98:	761a      	strb	r2, [r3, #24]
      break;
 8009e9a:	e06b      	b.n	8009f74 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
 8009e9e:	2b05      	cmp	r3, #5
 8009ea0:	d168      	bne.n	8009f74 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea6:	e065      	b.n	8009f74 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	795b      	ldrb	r3, [r3, #5]
 8009eac:	2201      	movs	r2, #1
 8009eae:	9200      	str	r2, [sp, #0]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f87f 	bl	8009fb8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	220a      	movs	r2, #10
 8009eca:	761a      	strb	r2, [r3, #24]
      break;
 8009ecc:	e055      	b.n	8009f7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	795b      	ldrb	r3, [r3, #5]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 fbe1 	bl	800a69c <USBH_LL_GetURBState>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d105      	bne.n	8009ef0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	220d      	movs	r2, #13
 8009eec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009eee:	e043      	b.n	8009f78 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d103      	bne.n	8009efe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2209      	movs	r2, #9
 8009efa:	761a      	strb	r2, [r3, #24]
      break;
 8009efc:	e03c      	b.n	8009f78 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d139      	bne.n	8009f78 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	220b      	movs	r2, #11
 8009f08:	761a      	strb	r2, [r3, #24]
      break;
 8009f0a:	e035      	b.n	8009f78 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	7e5b      	ldrb	r3, [r3, #25]
 8009f10:	3301      	adds	r3, #1
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	765a      	strb	r2, [r3, #25]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	7e5b      	ldrb	r3, [r3, #25]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d806      	bhi.n	8009f2e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009f2c:	e025      	b.n	8009f7a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f34:	2106      	movs	r1, #6
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	795b      	ldrb	r3, [r3, #5]
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f90c 	bl	800a164 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	791b      	ldrb	r3, [r3, #4]
 8009f50:	4619      	mov	r1, r3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f906 	bl	800a164 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009f5e:	2302      	movs	r3, #2
 8009f60:	73fb      	strb	r3, [r7, #15]
      break;
 8009f62:	e00a      	b.n	8009f7a <USBH_HandleControl+0x2de>

    default:
      break;
 8009f64:	bf00      	nop
 8009f66:	e008      	b.n	8009f7a <USBH_HandleControl+0x2de>
      break;
 8009f68:	bf00      	nop
 8009f6a:	e006      	b.n	8009f7a <USBH_HandleControl+0x2de>
      break;
 8009f6c:	bf00      	nop
 8009f6e:	e004      	b.n	8009f7a <USBH_HandleControl+0x2de>
      break;
 8009f70:	bf00      	nop
 8009f72:	e002      	b.n	8009f7a <USBH_HandleControl+0x2de>
      break;
 8009f74:	bf00      	nop
 8009f76:	e000      	b.n	8009f7a <USBH_HandleControl+0x2de>
      break;
 8009f78:	bf00      	nop
  }

  return status;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b088      	sub	sp, #32
 8009f88:	af04      	add	r7, sp, #16
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f92:	79f9      	ldrb	r1, [r7, #7]
 8009f94:	2300      	movs	r3, #0
 8009f96:	9303      	str	r3, [sp, #12]
 8009f98:	2308      	movs	r3, #8
 8009f9a:	9302      	str	r3, [sp, #8]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 fb46 	bl	800a63a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af04      	add	r7, sp, #16
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	80fb      	strh	r3, [r7, #6]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009fdc:	7979      	ldrb	r1, [r7, #5]
 8009fde:	7e3b      	ldrb	r3, [r7, #24]
 8009fe0:	9303      	str	r3, [sp, #12]
 8009fe2:	88fb      	ldrh	r3, [r7, #6]
 8009fe4:	9302      	str	r3, [sp, #8]
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	9301      	str	r3, [sp, #4]
 8009fea:	2301      	movs	r3, #1
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 fb21 	bl	800a63a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b088      	sub	sp, #32
 800a006:	af04      	add	r7, sp, #16
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	4611      	mov	r1, r2
 800a00e:	461a      	mov	r2, r3
 800a010:	460b      	mov	r3, r1
 800a012:	80fb      	strh	r3, [r7, #6]
 800a014:	4613      	mov	r3, r2
 800a016:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a018:	7979      	ldrb	r1, [r7, #5]
 800a01a:	2300      	movs	r3, #0
 800a01c:	9303      	str	r3, [sp, #12]
 800a01e:	88fb      	ldrh	r3, [r7, #6]
 800a020:	9302      	str	r3, [sp, #8]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	9301      	str	r3, [sp, #4]
 800a026:	2301      	movs	r3, #1
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	2300      	movs	r3, #0
 800a02c:	2201      	movs	r2, #1
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 fb03 	bl	800a63a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a034:	2300      	movs	r3, #0

}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b088      	sub	sp, #32
 800a042:	af04      	add	r7, sp, #16
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	4611      	mov	r1, r2
 800a04a:	461a      	mov	r2, r3
 800a04c:	460b      	mov	r3, r1
 800a04e:	80fb      	strh	r3, [r7, #6]
 800a050:	4613      	mov	r3, r2
 800a052:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a05e:	2300      	movs	r3, #0
 800a060:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a062:	7979      	ldrb	r1, [r7, #5]
 800a064:	7e3b      	ldrb	r3, [r7, #24]
 800a066:	9303      	str	r3, [sp, #12]
 800a068:	88fb      	ldrh	r3, [r7, #6]
 800a06a:	9302      	str	r3, [sp, #8]
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	9301      	str	r3, [sp, #4]
 800a070:	2301      	movs	r3, #1
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	2302      	movs	r3, #2
 800a076:	2200      	movs	r2, #0
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 fade 	bl	800a63a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b088      	sub	sp, #32
 800a08c:	af04      	add	r7, sp, #16
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	4611      	mov	r1, r2
 800a094:	461a      	mov	r2, r3
 800a096:	460b      	mov	r3, r1
 800a098:	80fb      	strh	r3, [r7, #6]
 800a09a:	4613      	mov	r3, r2
 800a09c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a09e:	7979      	ldrb	r1, [r7, #5]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	9303      	str	r3, [sp, #12]
 800a0a4:	88fb      	ldrh	r3, [r7, #6]
 800a0a6:	9302      	str	r3, [sp, #8]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f000 fac0 	bl	800a63a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af04      	add	r7, sp, #16
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	4608      	mov	r0, r1
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	70fb      	strb	r3, [r7, #3]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	70bb      	strb	r3, [r7, #2]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a0de:	7878      	ldrb	r0, [r7, #1]
 800a0e0:	78ba      	ldrb	r2, [r7, #2]
 800a0e2:	78f9      	ldrb	r1, [r7, #3]
 800a0e4:	8b3b      	ldrh	r3, [r7, #24]
 800a0e6:	9302      	str	r3, [sp, #8]
 800a0e8:	7d3b      	ldrb	r3, [r7, #20]
 800a0ea:	9301      	str	r3, [sp, #4]
 800a0ec:	7c3b      	ldrb	r3, [r7, #16]
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa53 	bl	800a59e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b082      	sub	sp, #8
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fa72 	bl	800a5fc <USBH_LL_ClosePipe>

  return USBH_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	460b      	mov	r3, r1
 800a12c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f836 	bl	800a1a0 <USBH_GetFreePipe>
 800a134:	4603      	mov	r3, r0
 800a136:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a138:	89fb      	ldrh	r3, [r7, #14]
 800a13a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00a      	beq.n	800a158 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a142:	78fa      	ldrb	r2, [r7, #3]
 800a144:	89fb      	ldrh	r3, [r7, #14]
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a14e:	6879      	ldr	r1, [r7, #4]
 800a150:	33e0      	adds	r3, #224	; 0xe0
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	440b      	add	r3, r1
 800a156:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a158:	89fb      	ldrh	r3, [r7, #14]
 800a15a:	b2db      	uxtb	r3, r3
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a170:	78fb      	ldrb	r3, [r7, #3]
 800a172:	2b0f      	cmp	r3, #15
 800a174:	d80d      	bhi.n	800a192 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	33e0      	adds	r3, #224	; 0xe0
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	78fb      	ldrb	r3, [r7, #3]
 800a184:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a188:	6879      	ldr	r1, [r7, #4]
 800a18a:	33e0      	adds	r3, #224	; 0xe0
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	440b      	add	r3, r1
 800a190:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73fb      	strb	r3, [r7, #15]
 800a1b0:	e00f      	b.n	800a1d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	33e0      	adds	r3, #224	; 0xe0
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d102      	bne.n	800a1cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	e007      	b.n	800a1dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	73fb      	strb	r3, [r7, #15]
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	2b0f      	cmp	r3, #15
 800a1d6:	d9ec      	bls.n	800a1b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a1d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3714      	adds	r7, #20
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	490e      	ldr	r1, [pc, #56]	; (800a228 <MX_USB_HOST_Init+0x40>)
 800a1f0:	480e      	ldr	r0, [pc, #56]	; (800a22c <MX_USB_HOST_Init+0x44>)
 800a1f2:	f7fe fb05 	bl	8008800 <USBH_Init>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a1fc:	f7f7 f906 	bl	800140c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a200:	490b      	ldr	r1, [pc, #44]	; (800a230 <MX_USB_HOST_Init+0x48>)
 800a202:	480a      	ldr	r0, [pc, #40]	; (800a22c <MX_USB_HOST_Init+0x44>)
 800a204:	f7fe fba9 	bl	800895a <USBH_RegisterClass>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a20e:	f7f7 f8fd 	bl	800140c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a212:	4806      	ldr	r0, [pc, #24]	; (800a22c <MX_USB_HOST_Init+0x44>)
 800a214:	f7fe fc2d 	bl	8008a72 <USBH_Start>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a21e:	f7f7 f8f5 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a222:	bf00      	nop
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	0800a249 	.word	0x0800a249
 800a22c:	20000224 	.word	0x20000224
 800a230:	2000000c 	.word	0x2000000c

0800a234 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a238:	4802      	ldr	r0, [pc, #8]	; (800a244 <MX_USB_HOST_Process+0x10>)
 800a23a:	f7fe fc2b 	bl	8008a94 <USBH_Process>
}
 800a23e:	bf00      	nop
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000224 	.word	0x20000224

0800a248 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	3b01      	subs	r3, #1
 800a258:	2b04      	cmp	r3, #4
 800a25a:	d819      	bhi.n	800a290 <USBH_UserProcess+0x48>
 800a25c:	a201      	add	r2, pc, #4	; (adr r2, 800a264 <USBH_UserProcess+0x1c>)
 800a25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a262:	bf00      	nop
 800a264:	0800a291 	.word	0x0800a291
 800a268:	0800a281 	.word	0x0800a281
 800a26c:	0800a291 	.word	0x0800a291
 800a270:	0800a289 	.word	0x0800a289
 800a274:	0800a279 	.word	0x0800a279
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a278:	4b09      	ldr	r3, [pc, #36]	; (800a2a0 <USBH_UserProcess+0x58>)
 800a27a:	2203      	movs	r2, #3
 800a27c:	701a      	strb	r2, [r3, #0]
  break;
 800a27e:	e008      	b.n	800a292 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a280:	4b07      	ldr	r3, [pc, #28]	; (800a2a0 <USBH_UserProcess+0x58>)
 800a282:	2202      	movs	r2, #2
 800a284:	701a      	strb	r2, [r3, #0]
  break;
 800a286:	e004      	b.n	800a292 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a288:	4b05      	ldr	r3, [pc, #20]	; (800a2a0 <USBH_UserProcess+0x58>)
 800a28a:	2201      	movs	r2, #1
 800a28c:	701a      	strb	r2, [r3, #0]
  break;
 800a28e:	e000      	b.n	800a292 <USBH_UserProcess+0x4a>

  default:
  break;
 800a290:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a292:	bf00      	nop
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	200005fc 	.word	0x200005fc

0800a2a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b08a      	sub	sp, #40	; 0x28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2ac:	f107 0314 	add.w	r3, r7, #20
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	605a      	str	r2, [r3, #4]
 800a2b6:	609a      	str	r2, [r3, #8]
 800a2b8:	60da      	str	r2, [r3, #12]
 800a2ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2c4:	d147      	bne.n	800a356 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	613b      	str	r3, [r7, #16]
 800a2ca:	4b25      	ldr	r3, [pc, #148]	; (800a360 <HAL_HCD_MspInit+0xbc>)
 800a2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ce:	4a24      	ldr	r2, [pc, #144]	; (800a360 <HAL_HCD_MspInit+0xbc>)
 800a2d0:	f043 0301 	orr.w	r3, r3, #1
 800a2d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a2d6:	4b22      	ldr	r3, [pc, #136]	; (800a360 <HAL_HCD_MspInit+0xbc>)
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	613b      	str	r3, [r7, #16]
 800a2e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a2e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a2f0:	f107 0314 	add.w	r3, r7, #20
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	481b      	ldr	r0, [pc, #108]	; (800a364 <HAL_HCD_MspInit+0xc0>)
 800a2f8:	f7f7 fcb8 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a2fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a302:	2302      	movs	r3, #2
 800a304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a306:	2300      	movs	r3, #0
 800a308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a30a:	2300      	movs	r3, #0
 800a30c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a30e:	230a      	movs	r3, #10
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a312:	f107 0314 	add.w	r3, r7, #20
 800a316:	4619      	mov	r1, r3
 800a318:	4812      	ldr	r0, [pc, #72]	; (800a364 <HAL_HCD_MspInit+0xc0>)
 800a31a:	f7f7 fca7 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a31e:	4b10      	ldr	r3, [pc, #64]	; (800a360 <HAL_HCD_MspInit+0xbc>)
 800a320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a322:	4a0f      	ldr	r2, [pc, #60]	; (800a360 <HAL_HCD_MspInit+0xbc>)
 800a324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a328:	6353      	str	r3, [r2, #52]	; 0x34
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	4b0c      	ldr	r3, [pc, #48]	; (800a360 <HAL_HCD_MspInit+0xbc>)
 800a330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a332:	4a0b      	ldr	r2, [pc, #44]	; (800a360 <HAL_HCD_MspInit+0xbc>)
 800a334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a338:	6453      	str	r3, [r2, #68]	; 0x44
 800a33a:	4b09      	ldr	r3, [pc, #36]	; (800a360 <HAL_HCD_MspInit+0xbc>)
 800a33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a33e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a346:	2200      	movs	r2, #0
 800a348:	2100      	movs	r1, #0
 800a34a:	2043      	movs	r0, #67	; 0x43
 800a34c:	f7f7 fc57 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a350:	2043      	movs	r0, #67	; 0x43
 800a352:	f7f7 fc70 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a356:	bf00      	nop
 800a358:	3728      	adds	r7, #40	; 0x28
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	40023800 	.word	0x40023800
 800a364:	40020000 	.word	0x40020000

0800a368 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe ff6b 	bl	8009252 <USBH_LL_IncTimer>
}
 800a37c:	bf00      	nop
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a392:	4618      	mov	r0, r3
 800a394:	f7fe ffa3 	bl	80092de <USBH_LL_Connect>
}
 800a398:	bf00      	nop
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe ffac 	bl	800930c <USBH_LL_Disconnect>
}
 800a3b4:	bf00      	nop
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70fb      	strb	r3, [r7, #3]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe ff5d 	bl	80092a6 <USBH_LL_PortEnabled>
}
 800a3ec:	bf00      	nop
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe ff5d 	bl	80092c2 <USBH_LL_PortDisabled>
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d12a      	bne.n	800a478 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a422:	4a18      	ldr	r2, [pc, #96]	; (800a484 <USBH_LL_Init+0x74>)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a15      	ldr	r2, [pc, #84]	; (800a484 <USBH_LL_Init+0x74>)
 800a42e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a432:	4b14      	ldr	r3, [pc, #80]	; (800a484 <USBH_LL_Init+0x74>)
 800a434:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a438:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a43a:	4b12      	ldr	r3, [pc, #72]	; (800a484 <USBH_LL_Init+0x74>)
 800a43c:	2208      	movs	r2, #8
 800a43e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a440:	4b10      	ldr	r3, [pc, #64]	; (800a484 <USBH_LL_Init+0x74>)
 800a442:	2201      	movs	r2, #1
 800a444:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a446:	4b0f      	ldr	r3, [pc, #60]	; (800a484 <USBH_LL_Init+0x74>)
 800a448:	2200      	movs	r2, #0
 800a44a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a44c:	4b0d      	ldr	r3, [pc, #52]	; (800a484 <USBH_LL_Init+0x74>)
 800a44e:	2202      	movs	r2, #2
 800a450:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a452:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <USBH_LL_Init+0x74>)
 800a454:	2200      	movs	r2, #0
 800a456:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a458:	480a      	ldr	r0, [pc, #40]	; (800a484 <USBH_LL_Init+0x74>)
 800a45a:	f7f7 fdbc 	bl	8001fd6 <HAL_HCD_Init>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a464:	f7f6 ffd2 	bl	800140c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a468:	4806      	ldr	r0, [pc, #24]	; (800a484 <USBH_LL_Init+0x74>)
 800a46a:	f7f8 fa1d 	bl	80028a8 <HAL_HCD_GetCurrentFrame>
 800a46e:	4603      	mov	r3, r0
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7fe fede 	bl	8009234 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20000600 	.word	0x20000600

0800a488 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7f8 f98a 	bl	80027b8 <HAL_HCD_Start>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4a8:	7bfb      	ldrb	r3, [r7, #15]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 f95e 	bl	800a76c <USBH_Get_USB_Status>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7f8 f992 	bl	80027fe <HAL_HCD_Stop>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4de:	7bfb      	ldrb	r3, [r7, #15]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 f943 	bl	800a76c <USBH_Get_USB_Status>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a506:	4618      	mov	r0, r3
 800a508:	f7f8 f9dc 	bl	80028c4 <HAL_HCD_GetCurrentSpeed>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d00c      	beq.n	800a52c <USBH_LL_GetSpeed+0x38>
 800a512:	2b02      	cmp	r3, #2
 800a514:	d80d      	bhi.n	800a532 <USBH_LL_GetSpeed+0x3e>
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <USBH_LL_GetSpeed+0x2c>
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d003      	beq.n	800a526 <USBH_LL_GetSpeed+0x32>
 800a51e:	e008      	b.n	800a532 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a520:	2300      	movs	r3, #0
 800a522:	73fb      	strb	r3, [r7, #15]
    break;
 800a524:	e008      	b.n	800a538 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a526:	2301      	movs	r3, #1
 800a528:	73fb      	strb	r3, [r7, #15]
    break;
 800a52a:	e005      	b.n	800a538 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a52c:	2302      	movs	r3, #2
 800a52e:	73fb      	strb	r3, [r7, #15]
    break;
 800a530:	e002      	b.n	800a538 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a532:	2301      	movs	r3, #1
 800a534:	73fb      	strb	r3, [r7, #15]
    break;
 800a536:	bf00      	nop
  }
  return  speed;
 800a538:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a558:	4618      	mov	r0, r3
 800a55a:	f7f8 f96d 	bl	8002838 <HAL_HCD_ResetPort>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	4618      	mov	r0, r3
 800a566:	f000 f901 	bl	800a76c <USBH_Get_USB_Status>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a58a:	78fa      	ldrb	r2, [r7, #3]
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f7f8 f975 	bl	800287e <HAL_HCD_HC_GetXferCount>
 800a594:	4603      	mov	r3, r0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a59e:	b590      	push	{r4, r7, lr}
 800a5a0:	b089      	sub	sp, #36	; 0x24
 800a5a2:	af04      	add	r7, sp, #16
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	4608      	mov	r0, r1
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	70fb      	strb	r3, [r7, #3]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70bb      	strb	r3, [r7, #2]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a5c6:	787c      	ldrb	r4, [r7, #1]
 800a5c8:	78ba      	ldrb	r2, [r7, #2]
 800a5ca:	78f9      	ldrb	r1, [r7, #3]
 800a5cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a5ce:	9302      	str	r3, [sp, #8]
 800a5d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a5d4:	9301      	str	r3, [sp, #4]
 800a5d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	4623      	mov	r3, r4
 800a5de:	f7f7 fd61 	bl	80020a4 <HAL_HCD_HC_Init>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 f8bf 	bl	800a76c <USBH_Get_USB_Status>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd90      	pop	{r4, r7, pc}

0800a5fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a616:	78fa      	ldrb	r2, [r7, #3]
 800a618:	4611      	mov	r1, r2
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7f7 fdfa 	bl	8002214 <HAL_HCD_HC_Halt>
 800a620:	4603      	mov	r3, r0
 800a622:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a624:	7bfb      	ldrb	r3, [r7, #15]
 800a626:	4618      	mov	r0, r3
 800a628:	f000 f8a0 	bl	800a76c <USBH_Get_USB_Status>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a630:	7bbb      	ldrb	r3, [r7, #14]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a63a:	b590      	push	{r4, r7, lr}
 800a63c:	b089      	sub	sp, #36	; 0x24
 800a63e:	af04      	add	r7, sp, #16
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	4608      	mov	r0, r1
 800a644:	4611      	mov	r1, r2
 800a646:	461a      	mov	r2, r3
 800a648:	4603      	mov	r3, r0
 800a64a:	70fb      	strb	r3, [r7, #3]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70bb      	strb	r3, [r7, #2]
 800a650:	4613      	mov	r3, r2
 800a652:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a662:	787c      	ldrb	r4, [r7, #1]
 800a664:	78ba      	ldrb	r2, [r7, #2]
 800a666:	78f9      	ldrb	r1, [r7, #3]
 800a668:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a66c:	9303      	str	r3, [sp, #12]
 800a66e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a670:	9302      	str	r3, [sp, #8]
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	4623      	mov	r3, r4
 800a67e:	f7f7 fded 	bl	800225c <HAL_HCD_HC_SubmitRequest>
 800a682:	4603      	mov	r3, r0
 800a684:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 f86f 	bl	800a76c <USBH_Get_USB_Status>
 800a68e:	4603      	mov	r3, r0
 800a690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a692:	7bbb      	ldrb	r3, [r7, #14]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd90      	pop	{r4, r7, pc}

0800a69c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a6ae:	78fa      	ldrb	r2, [r7, #3]
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7f8 f8ce 	bl	8002854 <HAL_HCD_HC_GetURBState>
 800a6b8:	4603      	mov	r3, r0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d103      	bne.n	800a6e0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a6d8:	78fb      	ldrb	r3, [r7, #3]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 f872 	bl	800a7c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a6e0:	20c8      	movs	r0, #200	; 0xc8
 800a6e2:	f7f7 f98d 	bl	8001a00 <HAL_Delay>
  return USBH_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a706:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a708:	78fa      	ldrb	r2, [r7, #3]
 800a70a:	68f9      	ldr	r1, [r7, #12]
 800a70c:	4613      	mov	r3, r2
 800a70e:	011b      	lsls	r3, r3, #4
 800a710:	1a9b      	subs	r3, r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	440b      	add	r3, r1
 800a716:	3317      	adds	r3, #23
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00a      	beq.n	800a734 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a71e:	78fa      	ldrb	r2, [r7, #3]
 800a720:	68f9      	ldr	r1, [r7, #12]
 800a722:	4613      	mov	r3, r2
 800a724:	011b      	lsls	r3, r3, #4
 800a726:	1a9b      	subs	r3, r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	440b      	add	r3, r1
 800a72c:	333c      	adds	r3, #60	; 0x3c
 800a72e:	78ba      	ldrb	r2, [r7, #2]
 800a730:	701a      	strb	r2, [r3, #0]
 800a732:	e009      	b.n	800a748 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a734:	78fa      	ldrb	r2, [r7, #3]
 800a736:	68f9      	ldr	r1, [r7, #12]
 800a738:	4613      	mov	r3, r2
 800a73a:	011b      	lsls	r3, r3, #4
 800a73c:	1a9b      	subs	r3, r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	440b      	add	r3, r1
 800a742:	333d      	adds	r3, #61	; 0x3d
 800a744:	78ba      	ldrb	r2, [r7, #2]
 800a746:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3714      	adds	r7, #20
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b082      	sub	sp, #8
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7f7 f94e 	bl	8001a00 <HAL_Delay>
}
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a77a:	79fb      	ldrb	r3, [r7, #7]
 800a77c:	2b03      	cmp	r3, #3
 800a77e:	d817      	bhi.n	800a7b0 <USBH_Get_USB_Status+0x44>
 800a780:	a201      	add	r2, pc, #4	; (adr r2, 800a788 <USBH_Get_USB_Status+0x1c>)
 800a782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a786:	bf00      	nop
 800a788:	0800a799 	.word	0x0800a799
 800a78c:	0800a79f 	.word	0x0800a79f
 800a790:	0800a7a5 	.word	0x0800a7a5
 800a794:	0800a7ab 	.word	0x0800a7ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	73fb      	strb	r3, [r7, #15]
    break;
 800a79c:	e00b      	b.n	800a7b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a79e:	2302      	movs	r3, #2
 800a7a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7a2:	e008      	b.n	800a7b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7a8:	e005      	b.n	800a7b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ae:	e002      	b.n	800a7b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b4:	bf00      	nop
  }
  return usb_status;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a7ce:	79fb      	ldrb	r3, [r7, #7]
 800a7d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a7d2:	79fb      	ldrb	r3, [r7, #7]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d102      	bne.n	800a7de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73fb      	strb	r3, [r7, #15]
 800a7dc:	e001      	b.n	800a7e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a7e2:	7bfb      	ldrb	r3, [r7, #15]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	4803      	ldr	r0, [pc, #12]	; (800a7f8 <MX_DriverVbusFS+0x34>)
 800a7ea:	f7f7 fbdb 	bl	8001fa4 <HAL_GPIO_WritePin>
}
 800a7ee:	bf00      	nop
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	40020800 	.word	0x40020800

0800a7fc <malloc>:
 800a7fc:	4b02      	ldr	r3, [pc, #8]	; (800a808 <malloc+0xc>)
 800a7fe:	4601      	mov	r1, r0
 800a800:	6818      	ldr	r0, [r3, #0]
 800a802:	f000 b82b 	b.w	800a85c <_malloc_r>
 800a806:	bf00      	nop
 800a808:	20000078 	.word	0x20000078

0800a80c <free>:
 800a80c:	4b02      	ldr	r3, [pc, #8]	; (800a818 <free+0xc>)
 800a80e:	4601      	mov	r1, r0
 800a810:	6818      	ldr	r0, [r3, #0]
 800a812:	f000 b8f3 	b.w	800a9fc <_free_r>
 800a816:	bf00      	nop
 800a818:	20000078 	.word	0x20000078

0800a81c <sbrk_aligned>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	4e0e      	ldr	r6, [pc, #56]	; (800a858 <sbrk_aligned+0x3c>)
 800a820:	460c      	mov	r4, r1
 800a822:	6831      	ldr	r1, [r6, #0]
 800a824:	4605      	mov	r5, r0
 800a826:	b911      	cbnz	r1, 800a82e <sbrk_aligned+0x12>
 800a828:	f000 f8ac 	bl	800a984 <_sbrk_r>
 800a82c:	6030      	str	r0, [r6, #0]
 800a82e:	4621      	mov	r1, r4
 800a830:	4628      	mov	r0, r5
 800a832:	f000 f8a7 	bl	800a984 <_sbrk_r>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	d00a      	beq.n	800a850 <sbrk_aligned+0x34>
 800a83a:	1cc4      	adds	r4, r0, #3
 800a83c:	f024 0403 	bic.w	r4, r4, #3
 800a840:	42a0      	cmp	r0, r4
 800a842:	d007      	beq.n	800a854 <sbrk_aligned+0x38>
 800a844:	1a21      	subs	r1, r4, r0
 800a846:	4628      	mov	r0, r5
 800a848:	f000 f89c 	bl	800a984 <_sbrk_r>
 800a84c:	3001      	adds	r0, #1
 800a84e:	d101      	bne.n	800a854 <sbrk_aligned+0x38>
 800a850:	f04f 34ff 	mov.w	r4, #4294967295
 800a854:	4620      	mov	r0, r4
 800a856:	bd70      	pop	{r4, r5, r6, pc}
 800a858:	200009e4 	.word	0x200009e4

0800a85c <_malloc_r>:
 800a85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a860:	1ccd      	adds	r5, r1, #3
 800a862:	f025 0503 	bic.w	r5, r5, #3
 800a866:	3508      	adds	r5, #8
 800a868:	2d0c      	cmp	r5, #12
 800a86a:	bf38      	it	cc
 800a86c:	250c      	movcc	r5, #12
 800a86e:	2d00      	cmp	r5, #0
 800a870:	4607      	mov	r7, r0
 800a872:	db01      	blt.n	800a878 <_malloc_r+0x1c>
 800a874:	42a9      	cmp	r1, r5
 800a876:	d905      	bls.n	800a884 <_malloc_r+0x28>
 800a878:	230c      	movs	r3, #12
 800a87a:	603b      	str	r3, [r7, #0]
 800a87c:	2600      	movs	r6, #0
 800a87e:	4630      	mov	r0, r6
 800a880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a884:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a958 <_malloc_r+0xfc>
 800a888:	f000 f868 	bl	800a95c <__malloc_lock>
 800a88c:	f8d8 3000 	ldr.w	r3, [r8]
 800a890:	461c      	mov	r4, r3
 800a892:	bb5c      	cbnz	r4, 800a8ec <_malloc_r+0x90>
 800a894:	4629      	mov	r1, r5
 800a896:	4638      	mov	r0, r7
 800a898:	f7ff ffc0 	bl	800a81c <sbrk_aligned>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	4604      	mov	r4, r0
 800a8a0:	d155      	bne.n	800a94e <_malloc_r+0xf2>
 800a8a2:	f8d8 4000 	ldr.w	r4, [r8]
 800a8a6:	4626      	mov	r6, r4
 800a8a8:	2e00      	cmp	r6, #0
 800a8aa:	d145      	bne.n	800a938 <_malloc_r+0xdc>
 800a8ac:	2c00      	cmp	r4, #0
 800a8ae:	d048      	beq.n	800a942 <_malloc_r+0xe6>
 800a8b0:	6823      	ldr	r3, [r4, #0]
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	eb04 0903 	add.w	r9, r4, r3
 800a8ba:	f000 f863 	bl	800a984 <_sbrk_r>
 800a8be:	4581      	cmp	r9, r0
 800a8c0:	d13f      	bne.n	800a942 <_malloc_r+0xe6>
 800a8c2:	6821      	ldr	r1, [r4, #0]
 800a8c4:	1a6d      	subs	r5, r5, r1
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	f7ff ffa7 	bl	800a81c <sbrk_aligned>
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	d037      	beq.n	800a942 <_malloc_r+0xe6>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	442b      	add	r3, r5
 800a8d6:	6023      	str	r3, [r4, #0]
 800a8d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d038      	beq.n	800a952 <_malloc_r+0xf6>
 800a8e0:	685a      	ldr	r2, [r3, #4]
 800a8e2:	42a2      	cmp	r2, r4
 800a8e4:	d12b      	bne.n	800a93e <_malloc_r+0xe2>
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	605a      	str	r2, [r3, #4]
 800a8ea:	e00f      	b.n	800a90c <_malloc_r+0xb0>
 800a8ec:	6822      	ldr	r2, [r4, #0]
 800a8ee:	1b52      	subs	r2, r2, r5
 800a8f0:	d41f      	bmi.n	800a932 <_malloc_r+0xd6>
 800a8f2:	2a0b      	cmp	r2, #11
 800a8f4:	d917      	bls.n	800a926 <_malloc_r+0xca>
 800a8f6:	1961      	adds	r1, r4, r5
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	6025      	str	r5, [r4, #0]
 800a8fc:	bf18      	it	ne
 800a8fe:	6059      	strne	r1, [r3, #4]
 800a900:	6863      	ldr	r3, [r4, #4]
 800a902:	bf08      	it	eq
 800a904:	f8c8 1000 	streq.w	r1, [r8]
 800a908:	5162      	str	r2, [r4, r5]
 800a90a:	604b      	str	r3, [r1, #4]
 800a90c:	4638      	mov	r0, r7
 800a90e:	f104 060b 	add.w	r6, r4, #11
 800a912:	f000 f829 	bl	800a968 <__malloc_unlock>
 800a916:	f026 0607 	bic.w	r6, r6, #7
 800a91a:	1d23      	adds	r3, r4, #4
 800a91c:	1af2      	subs	r2, r6, r3
 800a91e:	d0ae      	beq.n	800a87e <_malloc_r+0x22>
 800a920:	1b9b      	subs	r3, r3, r6
 800a922:	50a3      	str	r3, [r4, r2]
 800a924:	e7ab      	b.n	800a87e <_malloc_r+0x22>
 800a926:	42a3      	cmp	r3, r4
 800a928:	6862      	ldr	r2, [r4, #4]
 800a92a:	d1dd      	bne.n	800a8e8 <_malloc_r+0x8c>
 800a92c:	f8c8 2000 	str.w	r2, [r8]
 800a930:	e7ec      	b.n	800a90c <_malloc_r+0xb0>
 800a932:	4623      	mov	r3, r4
 800a934:	6864      	ldr	r4, [r4, #4]
 800a936:	e7ac      	b.n	800a892 <_malloc_r+0x36>
 800a938:	4634      	mov	r4, r6
 800a93a:	6876      	ldr	r6, [r6, #4]
 800a93c:	e7b4      	b.n	800a8a8 <_malloc_r+0x4c>
 800a93e:	4613      	mov	r3, r2
 800a940:	e7cc      	b.n	800a8dc <_malloc_r+0x80>
 800a942:	230c      	movs	r3, #12
 800a944:	603b      	str	r3, [r7, #0]
 800a946:	4638      	mov	r0, r7
 800a948:	f000 f80e 	bl	800a968 <__malloc_unlock>
 800a94c:	e797      	b.n	800a87e <_malloc_r+0x22>
 800a94e:	6025      	str	r5, [r4, #0]
 800a950:	e7dc      	b.n	800a90c <_malloc_r+0xb0>
 800a952:	605b      	str	r3, [r3, #4]
 800a954:	deff      	udf	#255	; 0xff
 800a956:	bf00      	nop
 800a958:	200009e0 	.word	0x200009e0

0800a95c <__malloc_lock>:
 800a95c:	4801      	ldr	r0, [pc, #4]	; (800a964 <__malloc_lock+0x8>)
 800a95e:	f000 b84b 	b.w	800a9f8 <__retarget_lock_acquire_recursive>
 800a962:	bf00      	nop
 800a964:	20000b24 	.word	0x20000b24

0800a968 <__malloc_unlock>:
 800a968:	4801      	ldr	r0, [pc, #4]	; (800a970 <__malloc_unlock+0x8>)
 800a96a:	f000 b846 	b.w	800a9fa <__retarget_lock_release_recursive>
 800a96e:	bf00      	nop
 800a970:	20000b24 	.word	0x20000b24

0800a974 <memset>:
 800a974:	4402      	add	r2, r0
 800a976:	4603      	mov	r3, r0
 800a978:	4293      	cmp	r3, r2
 800a97a:	d100      	bne.n	800a97e <memset+0xa>
 800a97c:	4770      	bx	lr
 800a97e:	f803 1b01 	strb.w	r1, [r3], #1
 800a982:	e7f9      	b.n	800a978 <memset+0x4>

0800a984 <_sbrk_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4d06      	ldr	r5, [pc, #24]	; (800a9a0 <_sbrk_r+0x1c>)
 800a988:	2300      	movs	r3, #0
 800a98a:	4604      	mov	r4, r0
 800a98c:	4608      	mov	r0, r1
 800a98e:	602b      	str	r3, [r5, #0]
 800a990:	f7f6 ff52 	bl	8001838 <_sbrk>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_sbrk_r+0x1a>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_sbrk_r+0x1a>
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	20000b20 	.word	0x20000b20

0800a9a4 <__errno>:
 800a9a4:	4b01      	ldr	r3, [pc, #4]	; (800a9ac <__errno+0x8>)
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	20000078 	.word	0x20000078

0800a9b0 <__libc_init_array>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	4d0d      	ldr	r5, [pc, #52]	; (800a9e8 <__libc_init_array+0x38>)
 800a9b4:	4c0d      	ldr	r4, [pc, #52]	; (800a9ec <__libc_init_array+0x3c>)
 800a9b6:	1b64      	subs	r4, r4, r5
 800a9b8:	10a4      	asrs	r4, r4, #2
 800a9ba:	2600      	movs	r6, #0
 800a9bc:	42a6      	cmp	r6, r4
 800a9be:	d109      	bne.n	800a9d4 <__libc_init_array+0x24>
 800a9c0:	4d0b      	ldr	r5, [pc, #44]	; (800a9f0 <__libc_init_array+0x40>)
 800a9c2:	4c0c      	ldr	r4, [pc, #48]	; (800a9f4 <__libc_init_array+0x44>)
 800a9c4:	f001 f8a8 	bl	800bb18 <_init>
 800a9c8:	1b64      	subs	r4, r4, r5
 800a9ca:	10a4      	asrs	r4, r4, #2
 800a9cc:	2600      	movs	r6, #0
 800a9ce:	42a6      	cmp	r6, r4
 800a9d0:	d105      	bne.n	800a9de <__libc_init_array+0x2e>
 800a9d2:	bd70      	pop	{r4, r5, r6, pc}
 800a9d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9d8:	4798      	blx	r3
 800a9da:	3601      	adds	r6, #1
 800a9dc:	e7ee      	b.n	800a9bc <__libc_init_array+0xc>
 800a9de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9e2:	4798      	blx	r3
 800a9e4:	3601      	adds	r6, #1
 800a9e6:	e7f2      	b.n	800a9ce <__libc_init_array+0x1e>
 800a9e8:	0800bd30 	.word	0x0800bd30
 800a9ec:	0800bd30 	.word	0x0800bd30
 800a9f0:	0800bd30 	.word	0x0800bd30
 800a9f4:	0800bd34 	.word	0x0800bd34

0800a9f8 <__retarget_lock_acquire_recursive>:
 800a9f8:	4770      	bx	lr

0800a9fa <__retarget_lock_release_recursive>:
 800a9fa:	4770      	bx	lr

0800a9fc <_free_r>:
 800a9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	d044      	beq.n	800aa8c <_free_r+0x90>
 800aa02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa06:	9001      	str	r0, [sp, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa0e:	bfb8      	it	lt
 800aa10:	18e4      	addlt	r4, r4, r3
 800aa12:	f7ff ffa3 	bl	800a95c <__malloc_lock>
 800aa16:	4a1e      	ldr	r2, [pc, #120]	; (800aa90 <_free_r+0x94>)
 800aa18:	9801      	ldr	r0, [sp, #4]
 800aa1a:	6813      	ldr	r3, [r2, #0]
 800aa1c:	b933      	cbnz	r3, 800aa2c <_free_r+0x30>
 800aa1e:	6063      	str	r3, [r4, #4]
 800aa20:	6014      	str	r4, [r2, #0]
 800aa22:	b003      	add	sp, #12
 800aa24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa28:	f7ff bf9e 	b.w	800a968 <__malloc_unlock>
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	d908      	bls.n	800aa42 <_free_r+0x46>
 800aa30:	6825      	ldr	r5, [r4, #0]
 800aa32:	1961      	adds	r1, r4, r5
 800aa34:	428b      	cmp	r3, r1
 800aa36:	bf01      	itttt	eq
 800aa38:	6819      	ldreq	r1, [r3, #0]
 800aa3a:	685b      	ldreq	r3, [r3, #4]
 800aa3c:	1949      	addeq	r1, r1, r5
 800aa3e:	6021      	streq	r1, [r4, #0]
 800aa40:	e7ed      	b.n	800aa1e <_free_r+0x22>
 800aa42:	461a      	mov	r2, r3
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	b10b      	cbz	r3, 800aa4c <_free_r+0x50>
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	d9fa      	bls.n	800aa42 <_free_r+0x46>
 800aa4c:	6811      	ldr	r1, [r2, #0]
 800aa4e:	1855      	adds	r5, r2, r1
 800aa50:	42a5      	cmp	r5, r4
 800aa52:	d10b      	bne.n	800aa6c <_free_r+0x70>
 800aa54:	6824      	ldr	r4, [r4, #0]
 800aa56:	4421      	add	r1, r4
 800aa58:	1854      	adds	r4, r2, r1
 800aa5a:	42a3      	cmp	r3, r4
 800aa5c:	6011      	str	r1, [r2, #0]
 800aa5e:	d1e0      	bne.n	800aa22 <_free_r+0x26>
 800aa60:	681c      	ldr	r4, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	6053      	str	r3, [r2, #4]
 800aa66:	440c      	add	r4, r1
 800aa68:	6014      	str	r4, [r2, #0]
 800aa6a:	e7da      	b.n	800aa22 <_free_r+0x26>
 800aa6c:	d902      	bls.n	800aa74 <_free_r+0x78>
 800aa6e:	230c      	movs	r3, #12
 800aa70:	6003      	str	r3, [r0, #0]
 800aa72:	e7d6      	b.n	800aa22 <_free_r+0x26>
 800aa74:	6825      	ldr	r5, [r4, #0]
 800aa76:	1961      	adds	r1, r4, r5
 800aa78:	428b      	cmp	r3, r1
 800aa7a:	bf04      	itt	eq
 800aa7c:	6819      	ldreq	r1, [r3, #0]
 800aa7e:	685b      	ldreq	r3, [r3, #4]
 800aa80:	6063      	str	r3, [r4, #4]
 800aa82:	bf04      	itt	eq
 800aa84:	1949      	addeq	r1, r1, r5
 800aa86:	6021      	streq	r1, [r4, #0]
 800aa88:	6054      	str	r4, [r2, #4]
 800aa8a:	e7ca      	b.n	800aa22 <_free_r+0x26>
 800aa8c:	b003      	add	sp, #12
 800aa8e:	bd30      	pop	{r4, r5, pc}
 800aa90:	200009e0 	.word	0x200009e0
 800aa94:	00000000 	.word	0x00000000

0800aa98 <sin>:
 800aa98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa9a:	ec53 2b10 	vmov	r2, r3, d0
 800aa9e:	4828      	ldr	r0, [pc, #160]	; (800ab40 <sin+0xa8>)
 800aaa0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aaa4:	4281      	cmp	r1, r0
 800aaa6:	dc07      	bgt.n	800aab8 <sin+0x20>
 800aaa8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ab38 <sin+0xa0>
 800aaac:	2000      	movs	r0, #0
 800aaae:	b005      	add	sp, #20
 800aab0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aab4:	f000 b910 	b.w	800acd8 <__kernel_sin>
 800aab8:	4822      	ldr	r0, [pc, #136]	; (800ab44 <sin+0xac>)
 800aaba:	4281      	cmp	r1, r0
 800aabc:	dd09      	ble.n	800aad2 <sin+0x3a>
 800aabe:	ee10 0a10 	vmov	r0, s0
 800aac2:	4619      	mov	r1, r3
 800aac4:	f7f5 fb84 	bl	80001d0 <__aeabi_dsub>
 800aac8:	ec41 0b10 	vmov	d0, r0, r1
 800aacc:	b005      	add	sp, #20
 800aace:	f85d fb04 	ldr.w	pc, [sp], #4
 800aad2:	4668      	mov	r0, sp
 800aad4:	f000 f9c0 	bl	800ae58 <__ieee754_rem_pio2>
 800aad8:	f000 0003 	and.w	r0, r0, #3
 800aadc:	2801      	cmp	r0, #1
 800aade:	d00c      	beq.n	800aafa <sin+0x62>
 800aae0:	2802      	cmp	r0, #2
 800aae2:	d011      	beq.n	800ab08 <sin+0x70>
 800aae4:	b9f0      	cbnz	r0, 800ab24 <sin+0x8c>
 800aae6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aaea:	ed9d 0b00 	vldr	d0, [sp]
 800aaee:	2001      	movs	r0, #1
 800aaf0:	f000 f8f2 	bl	800acd8 <__kernel_sin>
 800aaf4:	ec51 0b10 	vmov	r0, r1, d0
 800aaf8:	e7e6      	b.n	800aac8 <sin+0x30>
 800aafa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aafe:	ed9d 0b00 	vldr	d0, [sp]
 800ab02:	f000 f821 	bl	800ab48 <__kernel_cos>
 800ab06:	e7f5      	b.n	800aaf4 <sin+0x5c>
 800ab08:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ab0c:	ed9d 0b00 	vldr	d0, [sp]
 800ab10:	2001      	movs	r0, #1
 800ab12:	f000 f8e1 	bl	800acd8 <__kernel_sin>
 800ab16:	ec53 2b10 	vmov	r2, r3, d0
 800ab1a:	ee10 0a10 	vmov	r0, s0
 800ab1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ab22:	e7d1      	b.n	800aac8 <sin+0x30>
 800ab24:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ab28:	ed9d 0b00 	vldr	d0, [sp]
 800ab2c:	f000 f80c 	bl	800ab48 <__kernel_cos>
 800ab30:	e7f1      	b.n	800ab16 <sin+0x7e>
 800ab32:	bf00      	nop
 800ab34:	f3af 8000 	nop.w
	...
 800ab40:	3fe921fb 	.word	0x3fe921fb
 800ab44:	7fefffff 	.word	0x7fefffff

0800ab48 <__kernel_cos>:
 800ab48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	ec57 6b10 	vmov	r6, r7, d0
 800ab50:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ab54:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ab58:	ed8d 1b00 	vstr	d1, [sp]
 800ab5c:	da07      	bge.n	800ab6e <__kernel_cos+0x26>
 800ab5e:	ee10 0a10 	vmov	r0, s0
 800ab62:	4639      	mov	r1, r7
 800ab64:	f7f5 ff86 	bl	8000a74 <__aeabi_d2iz>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	f000 8088 	beq.w	800ac7e <__kernel_cos+0x136>
 800ab6e:	4632      	mov	r2, r6
 800ab70:	463b      	mov	r3, r7
 800ab72:	4630      	mov	r0, r6
 800ab74:	4639      	mov	r1, r7
 800ab76:	f7f5 fce3 	bl	8000540 <__aeabi_dmul>
 800ab7a:	4b51      	ldr	r3, [pc, #324]	; (800acc0 <__kernel_cos+0x178>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	4604      	mov	r4, r0
 800ab80:	460d      	mov	r5, r1
 800ab82:	f7f5 fcdd 	bl	8000540 <__aeabi_dmul>
 800ab86:	a340      	add	r3, pc, #256	; (adr r3, 800ac88 <__kernel_cos+0x140>)
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	4682      	mov	sl, r0
 800ab8e:	468b      	mov	fp, r1
 800ab90:	4620      	mov	r0, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	f7f5 fcd4 	bl	8000540 <__aeabi_dmul>
 800ab98:	a33d      	add	r3, pc, #244	; (adr r3, 800ac90 <__kernel_cos+0x148>)
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f7f5 fb19 	bl	80001d4 <__adddf3>
 800aba2:	4622      	mov	r2, r4
 800aba4:	462b      	mov	r3, r5
 800aba6:	f7f5 fccb 	bl	8000540 <__aeabi_dmul>
 800abaa:	a33b      	add	r3, pc, #236	; (adr r3, 800ac98 <__kernel_cos+0x150>)
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	f7f5 fb0e 	bl	80001d0 <__aeabi_dsub>
 800abb4:	4622      	mov	r2, r4
 800abb6:	462b      	mov	r3, r5
 800abb8:	f7f5 fcc2 	bl	8000540 <__aeabi_dmul>
 800abbc:	a338      	add	r3, pc, #224	; (adr r3, 800aca0 <__kernel_cos+0x158>)
 800abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc2:	f7f5 fb07 	bl	80001d4 <__adddf3>
 800abc6:	4622      	mov	r2, r4
 800abc8:	462b      	mov	r3, r5
 800abca:	f7f5 fcb9 	bl	8000540 <__aeabi_dmul>
 800abce:	a336      	add	r3, pc, #216	; (adr r3, 800aca8 <__kernel_cos+0x160>)
 800abd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd4:	f7f5 fafc 	bl	80001d0 <__aeabi_dsub>
 800abd8:	4622      	mov	r2, r4
 800abda:	462b      	mov	r3, r5
 800abdc:	f7f5 fcb0 	bl	8000540 <__aeabi_dmul>
 800abe0:	a333      	add	r3, pc, #204	; (adr r3, 800acb0 <__kernel_cos+0x168>)
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	f7f5 faf5 	bl	80001d4 <__adddf3>
 800abea:	4622      	mov	r2, r4
 800abec:	462b      	mov	r3, r5
 800abee:	f7f5 fca7 	bl	8000540 <__aeabi_dmul>
 800abf2:	4622      	mov	r2, r4
 800abf4:	462b      	mov	r3, r5
 800abf6:	f7f5 fca3 	bl	8000540 <__aeabi_dmul>
 800abfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abfe:	4604      	mov	r4, r0
 800ac00:	460d      	mov	r5, r1
 800ac02:	4630      	mov	r0, r6
 800ac04:	4639      	mov	r1, r7
 800ac06:	f7f5 fc9b 	bl	8000540 <__aeabi_dmul>
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4629      	mov	r1, r5
 800ac10:	4620      	mov	r0, r4
 800ac12:	f7f5 fadd 	bl	80001d0 <__aeabi_dsub>
 800ac16:	4b2b      	ldr	r3, [pc, #172]	; (800acc4 <__kernel_cos+0x17c>)
 800ac18:	4598      	cmp	r8, r3
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	dc10      	bgt.n	800ac42 <__kernel_cos+0xfa>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4650      	mov	r0, sl
 800ac26:	4659      	mov	r1, fp
 800ac28:	f7f5 fad2 	bl	80001d0 <__aeabi_dsub>
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4926      	ldr	r1, [pc, #152]	; (800acc8 <__kernel_cos+0x180>)
 800ac30:	4602      	mov	r2, r0
 800ac32:	2000      	movs	r0, #0
 800ac34:	f7f5 facc 	bl	80001d0 <__aeabi_dsub>
 800ac38:	ec41 0b10 	vmov	d0, r0, r1
 800ac3c:	b003      	add	sp, #12
 800ac3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac42:	4b22      	ldr	r3, [pc, #136]	; (800accc <__kernel_cos+0x184>)
 800ac44:	4920      	ldr	r1, [pc, #128]	; (800acc8 <__kernel_cos+0x180>)
 800ac46:	4598      	cmp	r8, r3
 800ac48:	bfcc      	ite	gt
 800ac4a:	4d21      	ldrgt	r5, [pc, #132]	; (800acd0 <__kernel_cos+0x188>)
 800ac4c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ac50:	2400      	movs	r4, #0
 800ac52:	4622      	mov	r2, r4
 800ac54:	462b      	mov	r3, r5
 800ac56:	2000      	movs	r0, #0
 800ac58:	f7f5 faba 	bl	80001d0 <__aeabi_dsub>
 800ac5c:	4622      	mov	r2, r4
 800ac5e:	4680      	mov	r8, r0
 800ac60:	4689      	mov	r9, r1
 800ac62:	462b      	mov	r3, r5
 800ac64:	4650      	mov	r0, sl
 800ac66:	4659      	mov	r1, fp
 800ac68:	f7f5 fab2 	bl	80001d0 <__aeabi_dsub>
 800ac6c:	4632      	mov	r2, r6
 800ac6e:	463b      	mov	r3, r7
 800ac70:	f7f5 faae 	bl	80001d0 <__aeabi_dsub>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4640      	mov	r0, r8
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	e7da      	b.n	800ac34 <__kernel_cos+0xec>
 800ac7e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800acb8 <__kernel_cos+0x170>
 800ac82:	e7db      	b.n	800ac3c <__kernel_cos+0xf4>
 800ac84:	f3af 8000 	nop.w
 800ac88:	be8838d4 	.word	0xbe8838d4
 800ac8c:	bda8fae9 	.word	0xbda8fae9
 800ac90:	bdb4b1c4 	.word	0xbdb4b1c4
 800ac94:	3e21ee9e 	.word	0x3e21ee9e
 800ac98:	809c52ad 	.word	0x809c52ad
 800ac9c:	3e927e4f 	.word	0x3e927e4f
 800aca0:	19cb1590 	.word	0x19cb1590
 800aca4:	3efa01a0 	.word	0x3efa01a0
 800aca8:	16c15177 	.word	0x16c15177
 800acac:	3f56c16c 	.word	0x3f56c16c
 800acb0:	5555554c 	.word	0x5555554c
 800acb4:	3fa55555 	.word	0x3fa55555
 800acb8:	00000000 	.word	0x00000000
 800acbc:	3ff00000 	.word	0x3ff00000
 800acc0:	3fe00000 	.word	0x3fe00000
 800acc4:	3fd33332 	.word	0x3fd33332
 800acc8:	3ff00000 	.word	0x3ff00000
 800accc:	3fe90000 	.word	0x3fe90000
 800acd0:	3fd20000 	.word	0x3fd20000
 800acd4:	00000000 	.word	0x00000000

0800acd8 <__kernel_sin>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	ed2d 8b04 	vpush	{d8-d9}
 800ace0:	eeb0 8a41 	vmov.f32	s16, s2
 800ace4:	eef0 8a61 	vmov.f32	s17, s3
 800ace8:	ec55 4b10 	vmov	r4, r5, d0
 800acec:	b083      	sub	sp, #12
 800acee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800acf2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800acf6:	9001      	str	r0, [sp, #4]
 800acf8:	da06      	bge.n	800ad08 <__kernel_sin+0x30>
 800acfa:	ee10 0a10 	vmov	r0, s0
 800acfe:	4629      	mov	r1, r5
 800ad00:	f7f5 feb8 	bl	8000a74 <__aeabi_d2iz>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d051      	beq.n	800adac <__kernel_sin+0xd4>
 800ad08:	4622      	mov	r2, r4
 800ad0a:	462b      	mov	r3, r5
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	4629      	mov	r1, r5
 800ad10:	f7f5 fc16 	bl	8000540 <__aeabi_dmul>
 800ad14:	4682      	mov	sl, r0
 800ad16:	468b      	mov	fp, r1
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	4629      	mov	r1, r5
 800ad20:	f7f5 fc0e 	bl	8000540 <__aeabi_dmul>
 800ad24:	a341      	add	r3, pc, #260	; (adr r3, 800ae2c <__kernel_sin+0x154>)
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	4680      	mov	r8, r0
 800ad2c:	4689      	mov	r9, r1
 800ad2e:	4650      	mov	r0, sl
 800ad30:	4659      	mov	r1, fp
 800ad32:	f7f5 fc05 	bl	8000540 <__aeabi_dmul>
 800ad36:	a33f      	add	r3, pc, #252	; (adr r3, 800ae34 <__kernel_sin+0x15c>)
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	f7f5 fa48 	bl	80001d0 <__aeabi_dsub>
 800ad40:	4652      	mov	r2, sl
 800ad42:	465b      	mov	r3, fp
 800ad44:	f7f5 fbfc 	bl	8000540 <__aeabi_dmul>
 800ad48:	a33c      	add	r3, pc, #240	; (adr r3, 800ae3c <__kernel_sin+0x164>)
 800ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4e:	f7f5 fa41 	bl	80001d4 <__adddf3>
 800ad52:	4652      	mov	r2, sl
 800ad54:	465b      	mov	r3, fp
 800ad56:	f7f5 fbf3 	bl	8000540 <__aeabi_dmul>
 800ad5a:	a33a      	add	r3, pc, #232	; (adr r3, 800ae44 <__kernel_sin+0x16c>)
 800ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad60:	f7f5 fa36 	bl	80001d0 <__aeabi_dsub>
 800ad64:	4652      	mov	r2, sl
 800ad66:	465b      	mov	r3, fp
 800ad68:	f7f5 fbea 	bl	8000540 <__aeabi_dmul>
 800ad6c:	a337      	add	r3, pc, #220	; (adr r3, 800ae4c <__kernel_sin+0x174>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	f7f5 fa2f 	bl	80001d4 <__adddf3>
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	4606      	mov	r6, r0
 800ad7a:	460f      	mov	r7, r1
 800ad7c:	b9eb      	cbnz	r3, 800adba <__kernel_sin+0xe2>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4650      	mov	r0, sl
 800ad84:	4659      	mov	r1, fp
 800ad86:	f7f5 fbdb 	bl	8000540 <__aeabi_dmul>
 800ad8a:	a325      	add	r3, pc, #148	; (adr r3, 800ae20 <__kernel_sin+0x148>)
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f7f5 fa1e 	bl	80001d0 <__aeabi_dsub>
 800ad94:	4642      	mov	r2, r8
 800ad96:	464b      	mov	r3, r9
 800ad98:	f7f5 fbd2 	bl	8000540 <__aeabi_dmul>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4620      	mov	r0, r4
 800ada2:	4629      	mov	r1, r5
 800ada4:	f7f5 fa16 	bl	80001d4 <__adddf3>
 800ada8:	4604      	mov	r4, r0
 800adaa:	460d      	mov	r5, r1
 800adac:	ec45 4b10 	vmov	d0, r4, r5
 800adb0:	b003      	add	sp, #12
 800adb2:	ecbd 8b04 	vpop	{d8-d9}
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adba:	4b1b      	ldr	r3, [pc, #108]	; (800ae28 <__kernel_sin+0x150>)
 800adbc:	ec51 0b18 	vmov	r0, r1, d8
 800adc0:	2200      	movs	r2, #0
 800adc2:	f7f5 fbbd 	bl	8000540 <__aeabi_dmul>
 800adc6:	4632      	mov	r2, r6
 800adc8:	ec41 0b19 	vmov	d9, r0, r1
 800adcc:	463b      	mov	r3, r7
 800adce:	4640      	mov	r0, r8
 800add0:	4649      	mov	r1, r9
 800add2:	f7f5 fbb5 	bl	8000540 <__aeabi_dmul>
 800add6:	4602      	mov	r2, r0
 800add8:	460b      	mov	r3, r1
 800adda:	ec51 0b19 	vmov	r0, r1, d9
 800adde:	f7f5 f9f7 	bl	80001d0 <__aeabi_dsub>
 800ade2:	4652      	mov	r2, sl
 800ade4:	465b      	mov	r3, fp
 800ade6:	f7f5 fbab 	bl	8000540 <__aeabi_dmul>
 800adea:	ec53 2b18 	vmov	r2, r3, d8
 800adee:	f7f5 f9ef 	bl	80001d0 <__aeabi_dsub>
 800adf2:	a30b      	add	r3, pc, #44	; (adr r3, 800ae20 <__kernel_sin+0x148>)
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	4606      	mov	r6, r0
 800adfa:	460f      	mov	r7, r1
 800adfc:	4640      	mov	r0, r8
 800adfe:	4649      	mov	r1, r9
 800ae00:	f7f5 fb9e 	bl	8000540 <__aeabi_dmul>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4630      	mov	r0, r6
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	f7f5 f9e2 	bl	80001d4 <__adddf3>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 f9da 	bl	80001d0 <__aeabi_dsub>
 800ae1c:	e7c4      	b.n	800ada8 <__kernel_sin+0xd0>
 800ae1e:	bf00      	nop
 800ae20:	55555549 	.word	0x55555549
 800ae24:	3fc55555 	.word	0x3fc55555
 800ae28:	3fe00000 	.word	0x3fe00000
 800ae2c:	5acfd57c 	.word	0x5acfd57c
 800ae30:	3de5d93a 	.word	0x3de5d93a
 800ae34:	8a2b9ceb 	.word	0x8a2b9ceb
 800ae38:	3e5ae5e6 	.word	0x3e5ae5e6
 800ae3c:	57b1fe7d 	.word	0x57b1fe7d
 800ae40:	3ec71de3 	.word	0x3ec71de3
 800ae44:	19c161d5 	.word	0x19c161d5
 800ae48:	3f2a01a0 	.word	0x3f2a01a0
 800ae4c:	1110f8a6 	.word	0x1110f8a6
 800ae50:	3f811111 	.word	0x3f811111
 800ae54:	00000000 	.word	0x00000000

0800ae58 <__ieee754_rem_pio2>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	ed2d 8b02 	vpush	{d8}
 800ae60:	ec55 4b10 	vmov	r4, r5, d0
 800ae64:	4bca      	ldr	r3, [pc, #808]	; (800b190 <__ieee754_rem_pio2+0x338>)
 800ae66:	b08b      	sub	sp, #44	; 0x2c
 800ae68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ae6c:	4598      	cmp	r8, r3
 800ae6e:	4682      	mov	sl, r0
 800ae70:	9502      	str	r5, [sp, #8]
 800ae72:	dc08      	bgt.n	800ae86 <__ieee754_rem_pio2+0x2e>
 800ae74:	2200      	movs	r2, #0
 800ae76:	2300      	movs	r3, #0
 800ae78:	ed80 0b00 	vstr	d0, [r0]
 800ae7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ae80:	f04f 0b00 	mov.w	fp, #0
 800ae84:	e028      	b.n	800aed8 <__ieee754_rem_pio2+0x80>
 800ae86:	4bc3      	ldr	r3, [pc, #780]	; (800b194 <__ieee754_rem_pio2+0x33c>)
 800ae88:	4598      	cmp	r8, r3
 800ae8a:	dc78      	bgt.n	800af7e <__ieee754_rem_pio2+0x126>
 800ae8c:	9b02      	ldr	r3, [sp, #8]
 800ae8e:	4ec2      	ldr	r6, [pc, #776]	; (800b198 <__ieee754_rem_pio2+0x340>)
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	ee10 0a10 	vmov	r0, s0
 800ae96:	a3b0      	add	r3, pc, #704	; (adr r3, 800b158 <__ieee754_rem_pio2+0x300>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	dd39      	ble.n	800af14 <__ieee754_rem_pio2+0xbc>
 800aea0:	f7f5 f996 	bl	80001d0 <__aeabi_dsub>
 800aea4:	45b0      	cmp	r8, r6
 800aea6:	4604      	mov	r4, r0
 800aea8:	460d      	mov	r5, r1
 800aeaa:	d01b      	beq.n	800aee4 <__ieee754_rem_pio2+0x8c>
 800aeac:	a3ac      	add	r3, pc, #688	; (adr r3, 800b160 <__ieee754_rem_pio2+0x308>)
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	f7f5 f98d 	bl	80001d0 <__aeabi_dsub>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	e9ca 2300 	strd	r2, r3, [sl]
 800aebe:	4620      	mov	r0, r4
 800aec0:	4629      	mov	r1, r5
 800aec2:	f7f5 f985 	bl	80001d0 <__aeabi_dsub>
 800aec6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b160 <__ieee754_rem_pio2+0x308>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	f7f5 f980 	bl	80001d0 <__aeabi_dsub>
 800aed0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aed4:	f04f 0b01 	mov.w	fp, #1
 800aed8:	4658      	mov	r0, fp
 800aeda:	b00b      	add	sp, #44	; 0x2c
 800aedc:	ecbd 8b02 	vpop	{d8}
 800aee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b168 <__ieee754_rem_pio2+0x310>)
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	f7f5 f971 	bl	80001d0 <__aeabi_dsub>
 800aeee:	a3a0      	add	r3, pc, #640	; (adr r3, 800b170 <__ieee754_rem_pio2+0x318>)
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	4604      	mov	r4, r0
 800aef6:	460d      	mov	r5, r1
 800aef8:	f7f5 f96a 	bl	80001d0 <__aeabi_dsub>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	e9ca 2300 	strd	r2, r3, [sl]
 800af04:	4620      	mov	r0, r4
 800af06:	4629      	mov	r1, r5
 800af08:	f7f5 f962 	bl	80001d0 <__aeabi_dsub>
 800af0c:	a398      	add	r3, pc, #608	; (adr r3, 800b170 <__ieee754_rem_pio2+0x318>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	e7db      	b.n	800aecc <__ieee754_rem_pio2+0x74>
 800af14:	f7f5 f95e 	bl	80001d4 <__adddf3>
 800af18:	45b0      	cmp	r8, r6
 800af1a:	4604      	mov	r4, r0
 800af1c:	460d      	mov	r5, r1
 800af1e:	d016      	beq.n	800af4e <__ieee754_rem_pio2+0xf6>
 800af20:	a38f      	add	r3, pc, #572	; (adr r3, 800b160 <__ieee754_rem_pio2+0x308>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f7f5 f955 	bl	80001d4 <__adddf3>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
 800af2e:	e9ca 2300 	strd	r2, r3, [sl]
 800af32:	4620      	mov	r0, r4
 800af34:	4629      	mov	r1, r5
 800af36:	f7f5 f94b 	bl	80001d0 <__aeabi_dsub>
 800af3a:	a389      	add	r3, pc, #548	; (adr r3, 800b160 <__ieee754_rem_pio2+0x308>)
 800af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af40:	f7f5 f948 	bl	80001d4 <__adddf3>
 800af44:	f04f 3bff 	mov.w	fp, #4294967295
 800af48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af4c:	e7c4      	b.n	800aed8 <__ieee754_rem_pio2+0x80>
 800af4e:	a386      	add	r3, pc, #536	; (adr r3, 800b168 <__ieee754_rem_pio2+0x310>)
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f7f5 f93e 	bl	80001d4 <__adddf3>
 800af58:	a385      	add	r3, pc, #532	; (adr r3, 800b170 <__ieee754_rem_pio2+0x318>)
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	4604      	mov	r4, r0
 800af60:	460d      	mov	r5, r1
 800af62:	f7f5 f937 	bl	80001d4 <__adddf3>
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	e9ca 2300 	strd	r2, r3, [sl]
 800af6e:	4620      	mov	r0, r4
 800af70:	4629      	mov	r1, r5
 800af72:	f7f5 f92d 	bl	80001d0 <__aeabi_dsub>
 800af76:	a37e      	add	r3, pc, #504	; (adr r3, 800b170 <__ieee754_rem_pio2+0x318>)
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	e7e0      	b.n	800af40 <__ieee754_rem_pio2+0xe8>
 800af7e:	4b87      	ldr	r3, [pc, #540]	; (800b19c <__ieee754_rem_pio2+0x344>)
 800af80:	4598      	cmp	r8, r3
 800af82:	f300 80d8 	bgt.w	800b136 <__ieee754_rem_pio2+0x2de>
 800af86:	f000 f96d 	bl	800b264 <fabs>
 800af8a:	ec55 4b10 	vmov	r4, r5, d0
 800af8e:	ee10 0a10 	vmov	r0, s0
 800af92:	a379      	add	r3, pc, #484	; (adr r3, 800b178 <__ieee754_rem_pio2+0x320>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	4629      	mov	r1, r5
 800af9a:	f7f5 fad1 	bl	8000540 <__aeabi_dmul>
 800af9e:	4b80      	ldr	r3, [pc, #512]	; (800b1a0 <__ieee754_rem_pio2+0x348>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	f7f5 f917 	bl	80001d4 <__adddf3>
 800afa6:	f7f5 fd65 	bl	8000a74 <__aeabi_d2iz>
 800afaa:	4683      	mov	fp, r0
 800afac:	f7f5 fa5e 	bl	800046c <__aeabi_i2d>
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	ec43 2b18 	vmov	d8, r2, r3
 800afb8:	a367      	add	r3, pc, #412	; (adr r3, 800b158 <__ieee754_rem_pio2+0x300>)
 800afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbe:	f7f5 fabf 	bl	8000540 <__aeabi_dmul>
 800afc2:	4602      	mov	r2, r0
 800afc4:	460b      	mov	r3, r1
 800afc6:	4620      	mov	r0, r4
 800afc8:	4629      	mov	r1, r5
 800afca:	f7f5 f901 	bl	80001d0 <__aeabi_dsub>
 800afce:	a364      	add	r3, pc, #400	; (adr r3, 800b160 <__ieee754_rem_pio2+0x308>)
 800afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd4:	4606      	mov	r6, r0
 800afd6:	460f      	mov	r7, r1
 800afd8:	ec51 0b18 	vmov	r0, r1, d8
 800afdc:	f7f5 fab0 	bl	8000540 <__aeabi_dmul>
 800afe0:	f1bb 0f1f 	cmp.w	fp, #31
 800afe4:	4604      	mov	r4, r0
 800afe6:	460d      	mov	r5, r1
 800afe8:	dc0d      	bgt.n	800b006 <__ieee754_rem_pio2+0x1ae>
 800afea:	4b6e      	ldr	r3, [pc, #440]	; (800b1a4 <__ieee754_rem_pio2+0x34c>)
 800afec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800aff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff4:	4543      	cmp	r3, r8
 800aff6:	d006      	beq.n	800b006 <__ieee754_rem_pio2+0x1ae>
 800aff8:	4622      	mov	r2, r4
 800affa:	462b      	mov	r3, r5
 800affc:	4630      	mov	r0, r6
 800affe:	4639      	mov	r1, r7
 800b000:	f7f5 f8e6 	bl	80001d0 <__aeabi_dsub>
 800b004:	e00e      	b.n	800b024 <__ieee754_rem_pio2+0x1cc>
 800b006:	462b      	mov	r3, r5
 800b008:	4622      	mov	r2, r4
 800b00a:	4630      	mov	r0, r6
 800b00c:	4639      	mov	r1, r7
 800b00e:	f7f5 f8df 	bl	80001d0 <__aeabi_dsub>
 800b012:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b016:	9303      	str	r3, [sp, #12]
 800b018:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b01c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b020:	2b10      	cmp	r3, #16
 800b022:	dc02      	bgt.n	800b02a <__ieee754_rem_pio2+0x1d2>
 800b024:	e9ca 0100 	strd	r0, r1, [sl]
 800b028:	e039      	b.n	800b09e <__ieee754_rem_pio2+0x246>
 800b02a:	a34f      	add	r3, pc, #316	; (adr r3, 800b168 <__ieee754_rem_pio2+0x310>)
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	ec51 0b18 	vmov	r0, r1, d8
 800b034:	f7f5 fa84 	bl	8000540 <__aeabi_dmul>
 800b038:	4604      	mov	r4, r0
 800b03a:	460d      	mov	r5, r1
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	4630      	mov	r0, r6
 800b042:	4639      	mov	r1, r7
 800b044:	f7f5 f8c4 	bl	80001d0 <__aeabi_dsub>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4680      	mov	r8, r0
 800b04e:	4689      	mov	r9, r1
 800b050:	4630      	mov	r0, r6
 800b052:	4639      	mov	r1, r7
 800b054:	f7f5 f8bc 	bl	80001d0 <__aeabi_dsub>
 800b058:	4622      	mov	r2, r4
 800b05a:	462b      	mov	r3, r5
 800b05c:	f7f5 f8b8 	bl	80001d0 <__aeabi_dsub>
 800b060:	a343      	add	r3, pc, #268	; (adr r3, 800b170 <__ieee754_rem_pio2+0x318>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	4604      	mov	r4, r0
 800b068:	460d      	mov	r5, r1
 800b06a:	ec51 0b18 	vmov	r0, r1, d8
 800b06e:	f7f5 fa67 	bl	8000540 <__aeabi_dmul>
 800b072:	4622      	mov	r2, r4
 800b074:	462b      	mov	r3, r5
 800b076:	f7f5 f8ab 	bl	80001d0 <__aeabi_dsub>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4604      	mov	r4, r0
 800b080:	460d      	mov	r5, r1
 800b082:	4640      	mov	r0, r8
 800b084:	4649      	mov	r1, r9
 800b086:	f7f5 f8a3 	bl	80001d0 <__aeabi_dsub>
 800b08a:	9a03      	ldr	r2, [sp, #12]
 800b08c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	2b31      	cmp	r3, #49	; 0x31
 800b094:	dc24      	bgt.n	800b0e0 <__ieee754_rem_pio2+0x288>
 800b096:	e9ca 0100 	strd	r0, r1, [sl]
 800b09a:	4646      	mov	r6, r8
 800b09c:	464f      	mov	r7, r9
 800b09e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	f7f5 f891 	bl	80001d0 <__aeabi_dsub>
 800b0ae:	462b      	mov	r3, r5
 800b0b0:	4622      	mov	r2, r4
 800b0b2:	f7f5 f88d 	bl	80001d0 <__aeabi_dsub>
 800b0b6:	9b02      	ldr	r3, [sp, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b0be:	f6bf af0b 	bge.w	800aed8 <__ieee754_rem_pio2+0x80>
 800b0c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b0c6:	f8ca 3004 	str.w	r3, [sl, #4]
 800b0ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0ce:	f8ca 8000 	str.w	r8, [sl]
 800b0d2:	f8ca 0008 	str.w	r0, [sl, #8]
 800b0d6:	f8ca 300c 	str.w	r3, [sl, #12]
 800b0da:	f1cb 0b00 	rsb	fp, fp, #0
 800b0de:	e6fb      	b.n	800aed8 <__ieee754_rem_pio2+0x80>
 800b0e0:	a327      	add	r3, pc, #156	; (adr r3, 800b180 <__ieee754_rem_pio2+0x328>)
 800b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e6:	ec51 0b18 	vmov	r0, r1, d8
 800b0ea:	f7f5 fa29 	bl	8000540 <__aeabi_dmul>
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	460d      	mov	r5, r1
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4640      	mov	r0, r8
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	f7f5 f869 	bl	80001d0 <__aeabi_dsub>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	4606      	mov	r6, r0
 800b104:	460f      	mov	r7, r1
 800b106:	4640      	mov	r0, r8
 800b108:	4649      	mov	r1, r9
 800b10a:	f7f5 f861 	bl	80001d0 <__aeabi_dsub>
 800b10e:	4622      	mov	r2, r4
 800b110:	462b      	mov	r3, r5
 800b112:	f7f5 f85d 	bl	80001d0 <__aeabi_dsub>
 800b116:	a31c      	add	r3, pc, #112	; (adr r3, 800b188 <__ieee754_rem_pio2+0x330>)
 800b118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11c:	4604      	mov	r4, r0
 800b11e:	460d      	mov	r5, r1
 800b120:	ec51 0b18 	vmov	r0, r1, d8
 800b124:	f7f5 fa0c 	bl	8000540 <__aeabi_dmul>
 800b128:	4622      	mov	r2, r4
 800b12a:	462b      	mov	r3, r5
 800b12c:	f7f5 f850 	bl	80001d0 <__aeabi_dsub>
 800b130:	4604      	mov	r4, r0
 800b132:	460d      	mov	r5, r1
 800b134:	e760      	b.n	800aff8 <__ieee754_rem_pio2+0x1a0>
 800b136:	4b1c      	ldr	r3, [pc, #112]	; (800b1a8 <__ieee754_rem_pio2+0x350>)
 800b138:	4598      	cmp	r8, r3
 800b13a:	dd37      	ble.n	800b1ac <__ieee754_rem_pio2+0x354>
 800b13c:	ee10 2a10 	vmov	r2, s0
 800b140:	462b      	mov	r3, r5
 800b142:	4620      	mov	r0, r4
 800b144:	4629      	mov	r1, r5
 800b146:	f7f5 f843 	bl	80001d0 <__aeabi_dsub>
 800b14a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b14e:	e9ca 0100 	strd	r0, r1, [sl]
 800b152:	e695      	b.n	800ae80 <__ieee754_rem_pio2+0x28>
 800b154:	f3af 8000 	nop.w
 800b158:	54400000 	.word	0x54400000
 800b15c:	3ff921fb 	.word	0x3ff921fb
 800b160:	1a626331 	.word	0x1a626331
 800b164:	3dd0b461 	.word	0x3dd0b461
 800b168:	1a600000 	.word	0x1a600000
 800b16c:	3dd0b461 	.word	0x3dd0b461
 800b170:	2e037073 	.word	0x2e037073
 800b174:	3ba3198a 	.word	0x3ba3198a
 800b178:	6dc9c883 	.word	0x6dc9c883
 800b17c:	3fe45f30 	.word	0x3fe45f30
 800b180:	2e000000 	.word	0x2e000000
 800b184:	3ba3198a 	.word	0x3ba3198a
 800b188:	252049c1 	.word	0x252049c1
 800b18c:	397b839a 	.word	0x397b839a
 800b190:	3fe921fb 	.word	0x3fe921fb
 800b194:	4002d97b 	.word	0x4002d97b
 800b198:	3ff921fb 	.word	0x3ff921fb
 800b19c:	413921fb 	.word	0x413921fb
 800b1a0:	3fe00000 	.word	0x3fe00000
 800b1a4:	0800bb4c 	.word	0x0800bb4c
 800b1a8:	7fefffff 	.word	0x7fefffff
 800b1ac:	ea4f 5628 	mov.w	r6, r8, asr #20
 800b1b0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800b1b4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	460d      	mov	r5, r1
 800b1bc:	f7f5 fc5a 	bl	8000a74 <__aeabi_d2iz>
 800b1c0:	f7f5 f954 	bl	800046c <__aeabi_i2d>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1d0:	f7f4 fffe 	bl	80001d0 <__aeabi_dsub>
 800b1d4:	4b21      	ldr	r3, [pc, #132]	; (800b25c <__ieee754_rem_pio2+0x404>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f7f5 f9b2 	bl	8000540 <__aeabi_dmul>
 800b1dc:	460d      	mov	r5, r1
 800b1de:	4604      	mov	r4, r0
 800b1e0:	f7f5 fc48 	bl	8000a74 <__aeabi_d2iz>
 800b1e4:	f7f5 f942 	bl	800046c <__aeabi_i2d>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	4629      	mov	r1, r5
 800b1f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b1f4:	f7f4 ffec 	bl	80001d0 <__aeabi_dsub>
 800b1f8:	4b18      	ldr	r3, [pc, #96]	; (800b25c <__ieee754_rem_pio2+0x404>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f7f5 f9a0 	bl	8000540 <__aeabi_dmul>
 800b200:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b204:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b208:	2703      	movs	r7, #3
 800b20a:	2400      	movs	r4, #0
 800b20c:	2500      	movs	r5, #0
 800b20e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800b212:	4622      	mov	r2, r4
 800b214:	462b      	mov	r3, r5
 800b216:	46b9      	mov	r9, r7
 800b218:	3f01      	subs	r7, #1
 800b21a:	f7f5 fbf9 	bl	8000a10 <__aeabi_dcmpeq>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d1f5      	bne.n	800b20e <__ieee754_rem_pio2+0x3b6>
 800b222:	4b0f      	ldr	r3, [pc, #60]	; (800b260 <__ieee754_rem_pio2+0x408>)
 800b224:	9301      	str	r3, [sp, #4]
 800b226:	2302      	movs	r3, #2
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	4632      	mov	r2, r6
 800b22c:	464b      	mov	r3, r9
 800b22e:	4651      	mov	r1, sl
 800b230:	a804      	add	r0, sp, #16
 800b232:	f000 f821 	bl	800b278 <__kernel_rem_pio2>
 800b236:	9b02      	ldr	r3, [sp, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	4683      	mov	fp, r0
 800b23c:	f6bf ae4c 	bge.w	800aed8 <__ieee754_rem_pio2+0x80>
 800b240:	e9da 2100 	ldrd	r2, r1, [sl]
 800b244:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b248:	e9ca 2300 	strd	r2, r3, [sl]
 800b24c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b250:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b254:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b258:	e73f      	b.n	800b0da <__ieee754_rem_pio2+0x282>
 800b25a:	bf00      	nop
 800b25c:	41700000 	.word	0x41700000
 800b260:	0800bbcc 	.word	0x0800bbcc

0800b264 <fabs>:
 800b264:	ec51 0b10 	vmov	r0, r1, d0
 800b268:	ee10 2a10 	vmov	r2, s0
 800b26c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b270:	ec43 2b10 	vmov	d0, r2, r3
 800b274:	4770      	bx	lr
	...

0800b278 <__kernel_rem_pio2>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	ed2d 8b02 	vpush	{d8}
 800b280:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b284:	f112 0f14 	cmn.w	r2, #20
 800b288:	9306      	str	r3, [sp, #24]
 800b28a:	9104      	str	r1, [sp, #16]
 800b28c:	4bc2      	ldr	r3, [pc, #776]	; (800b598 <__kernel_rem_pio2+0x320>)
 800b28e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b290:	9009      	str	r0, [sp, #36]	; 0x24
 800b292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	9b06      	ldr	r3, [sp, #24]
 800b29a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b29e:	bfa8      	it	ge
 800b2a0:	1ed4      	subge	r4, r2, #3
 800b2a2:	9305      	str	r3, [sp, #20]
 800b2a4:	bfb2      	itee	lt
 800b2a6:	2400      	movlt	r4, #0
 800b2a8:	2318      	movge	r3, #24
 800b2aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800b2ae:	f06f 0317 	mvn.w	r3, #23
 800b2b2:	fb04 3303 	mla	r3, r4, r3, r3
 800b2b6:	eb03 0a02 	add.w	sl, r3, r2
 800b2ba:	9b00      	ldr	r3, [sp, #0]
 800b2bc:	9a05      	ldr	r2, [sp, #20]
 800b2be:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800b588 <__kernel_rem_pio2+0x310>
 800b2c2:	eb03 0802 	add.w	r8, r3, r2
 800b2c6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b2c8:	1aa7      	subs	r7, r4, r2
 800b2ca:	ae20      	add	r6, sp, #128	; 0x80
 800b2cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b2d0:	2500      	movs	r5, #0
 800b2d2:	4545      	cmp	r5, r8
 800b2d4:	dd13      	ble.n	800b2fe <__kernel_rem_pio2+0x86>
 800b2d6:	9b06      	ldr	r3, [sp, #24]
 800b2d8:	aa20      	add	r2, sp, #128	; 0x80
 800b2da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b2de:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b2e2:	f04f 0800 	mov.w	r8, #0
 800b2e6:	9b00      	ldr	r3, [sp, #0]
 800b2e8:	4598      	cmp	r8, r3
 800b2ea:	dc31      	bgt.n	800b350 <__kernel_rem_pio2+0xd8>
 800b2ec:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800b588 <__kernel_rem_pio2+0x310>
 800b2f0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b2f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2f8:	462f      	mov	r7, r5
 800b2fa:	2600      	movs	r6, #0
 800b2fc:	e01b      	b.n	800b336 <__kernel_rem_pio2+0xbe>
 800b2fe:	42ef      	cmn	r7, r5
 800b300:	d407      	bmi.n	800b312 <__kernel_rem_pio2+0x9a>
 800b302:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b306:	f7f5 f8b1 	bl	800046c <__aeabi_i2d>
 800b30a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b30e:	3501      	adds	r5, #1
 800b310:	e7df      	b.n	800b2d2 <__kernel_rem_pio2+0x5a>
 800b312:	ec51 0b18 	vmov	r0, r1, d8
 800b316:	e7f8      	b.n	800b30a <__kernel_rem_pio2+0x92>
 800b318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b31c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b320:	f7f5 f90e 	bl	8000540 <__aeabi_dmul>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b32c:	f7f4 ff52 	bl	80001d4 <__adddf3>
 800b330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b334:	3601      	adds	r6, #1
 800b336:	9b05      	ldr	r3, [sp, #20]
 800b338:	429e      	cmp	r6, r3
 800b33a:	f1a7 0708 	sub.w	r7, r7, #8
 800b33e:	ddeb      	ble.n	800b318 <__kernel_rem_pio2+0xa0>
 800b340:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b344:	f108 0801 	add.w	r8, r8, #1
 800b348:	ecab 7b02 	vstmia	fp!, {d7}
 800b34c:	3508      	adds	r5, #8
 800b34e:	e7ca      	b.n	800b2e6 <__kernel_rem_pio2+0x6e>
 800b350:	9b00      	ldr	r3, [sp, #0]
 800b352:	aa0c      	add	r2, sp, #48	; 0x30
 800b354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b358:	930b      	str	r3, [sp, #44]	; 0x2c
 800b35a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b35c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b360:	9c00      	ldr	r4, [sp, #0]
 800b362:	930a      	str	r3, [sp, #40]	; 0x28
 800b364:	00e3      	lsls	r3, r4, #3
 800b366:	9308      	str	r3, [sp, #32]
 800b368:	ab98      	add	r3, sp, #608	; 0x260
 800b36a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b36e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b372:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800b376:	ab70      	add	r3, sp, #448	; 0x1c0
 800b378:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b37c:	46c3      	mov	fp, r8
 800b37e:	46a1      	mov	r9, r4
 800b380:	f1b9 0f00 	cmp.w	r9, #0
 800b384:	f1a5 0508 	sub.w	r5, r5, #8
 800b388:	dc77      	bgt.n	800b47a <__kernel_rem_pio2+0x202>
 800b38a:	ec47 6b10 	vmov	d0, r6, r7
 800b38e:	4650      	mov	r0, sl
 800b390:	f000 fac2 	bl	800b918 <scalbn>
 800b394:	ec57 6b10 	vmov	r6, r7, d0
 800b398:	2200      	movs	r2, #0
 800b39a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b39e:	ee10 0a10 	vmov	r0, s0
 800b3a2:	4639      	mov	r1, r7
 800b3a4:	f7f5 f8cc 	bl	8000540 <__aeabi_dmul>
 800b3a8:	ec41 0b10 	vmov	d0, r0, r1
 800b3ac:	f000 fb34 	bl	800ba18 <floor>
 800b3b0:	4b7a      	ldr	r3, [pc, #488]	; (800b59c <__kernel_rem_pio2+0x324>)
 800b3b2:	ec51 0b10 	vmov	r0, r1, d0
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f7f5 f8c2 	bl	8000540 <__aeabi_dmul>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	f7f4 ff04 	bl	80001d0 <__aeabi_dsub>
 800b3c8:	460f      	mov	r7, r1
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	f7f5 fb52 	bl	8000a74 <__aeabi_d2iz>
 800b3d0:	9002      	str	r0, [sp, #8]
 800b3d2:	f7f5 f84b 	bl	800046c <__aeabi_i2d>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	4630      	mov	r0, r6
 800b3dc:	4639      	mov	r1, r7
 800b3de:	f7f4 fef7 	bl	80001d0 <__aeabi_dsub>
 800b3e2:	f1ba 0f00 	cmp.w	sl, #0
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	460f      	mov	r7, r1
 800b3ea:	dd6d      	ble.n	800b4c8 <__kernel_rem_pio2+0x250>
 800b3ec:	1e61      	subs	r1, r4, #1
 800b3ee:	ab0c      	add	r3, sp, #48	; 0x30
 800b3f0:	9d02      	ldr	r5, [sp, #8]
 800b3f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3f6:	f1ca 0018 	rsb	r0, sl, #24
 800b3fa:	fa43 f200 	asr.w	r2, r3, r0
 800b3fe:	4415      	add	r5, r2
 800b400:	4082      	lsls	r2, r0
 800b402:	1a9b      	subs	r3, r3, r2
 800b404:	aa0c      	add	r2, sp, #48	; 0x30
 800b406:	9502      	str	r5, [sp, #8]
 800b408:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b40c:	f1ca 0217 	rsb	r2, sl, #23
 800b410:	fa43 fb02 	asr.w	fp, r3, r2
 800b414:	f1bb 0f00 	cmp.w	fp, #0
 800b418:	dd65      	ble.n	800b4e6 <__kernel_rem_pio2+0x26e>
 800b41a:	9b02      	ldr	r3, [sp, #8]
 800b41c:	2200      	movs	r2, #0
 800b41e:	3301      	adds	r3, #1
 800b420:	9302      	str	r3, [sp, #8]
 800b422:	4615      	mov	r5, r2
 800b424:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b428:	4294      	cmp	r4, r2
 800b42a:	f300 809f 	bgt.w	800b56c <__kernel_rem_pio2+0x2f4>
 800b42e:	f1ba 0f00 	cmp.w	sl, #0
 800b432:	dd07      	ble.n	800b444 <__kernel_rem_pio2+0x1cc>
 800b434:	f1ba 0f01 	cmp.w	sl, #1
 800b438:	f000 80c1 	beq.w	800b5be <__kernel_rem_pio2+0x346>
 800b43c:	f1ba 0f02 	cmp.w	sl, #2
 800b440:	f000 80c7 	beq.w	800b5d2 <__kernel_rem_pio2+0x35a>
 800b444:	f1bb 0f02 	cmp.w	fp, #2
 800b448:	d14d      	bne.n	800b4e6 <__kernel_rem_pio2+0x26e>
 800b44a:	4632      	mov	r2, r6
 800b44c:	463b      	mov	r3, r7
 800b44e:	4954      	ldr	r1, [pc, #336]	; (800b5a0 <__kernel_rem_pio2+0x328>)
 800b450:	2000      	movs	r0, #0
 800b452:	f7f4 febd 	bl	80001d0 <__aeabi_dsub>
 800b456:	4606      	mov	r6, r0
 800b458:	460f      	mov	r7, r1
 800b45a:	2d00      	cmp	r5, #0
 800b45c:	d043      	beq.n	800b4e6 <__kernel_rem_pio2+0x26e>
 800b45e:	4650      	mov	r0, sl
 800b460:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800b590 <__kernel_rem_pio2+0x318>
 800b464:	f000 fa58 	bl	800b918 <scalbn>
 800b468:	4630      	mov	r0, r6
 800b46a:	4639      	mov	r1, r7
 800b46c:	ec53 2b10 	vmov	r2, r3, d0
 800b470:	f7f4 feae 	bl	80001d0 <__aeabi_dsub>
 800b474:	4606      	mov	r6, r0
 800b476:	460f      	mov	r7, r1
 800b478:	e035      	b.n	800b4e6 <__kernel_rem_pio2+0x26e>
 800b47a:	4b4a      	ldr	r3, [pc, #296]	; (800b5a4 <__kernel_rem_pio2+0x32c>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	4630      	mov	r0, r6
 800b480:	4639      	mov	r1, r7
 800b482:	f7f5 f85d 	bl	8000540 <__aeabi_dmul>
 800b486:	f7f5 faf5 	bl	8000a74 <__aeabi_d2iz>
 800b48a:	f7f4 ffef 	bl	800046c <__aeabi_i2d>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	ec43 2b18 	vmov	d8, r2, r3
 800b496:	4b44      	ldr	r3, [pc, #272]	; (800b5a8 <__kernel_rem_pio2+0x330>)
 800b498:	2200      	movs	r2, #0
 800b49a:	f7f5 f851 	bl	8000540 <__aeabi_dmul>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	4639      	mov	r1, r7
 800b4a6:	f7f4 fe93 	bl	80001d0 <__aeabi_dsub>
 800b4aa:	f7f5 fae3 	bl	8000a74 <__aeabi_d2iz>
 800b4ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4b2:	f84b 0b04 	str.w	r0, [fp], #4
 800b4b6:	ec51 0b18 	vmov	r0, r1, d8
 800b4ba:	f7f4 fe8b 	bl	80001d4 <__adddf3>
 800b4be:	f109 39ff 	add.w	r9, r9, #4294967295
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	e75b      	b.n	800b380 <__kernel_rem_pio2+0x108>
 800b4c8:	d106      	bne.n	800b4d8 <__kernel_rem_pio2+0x260>
 800b4ca:	1e63      	subs	r3, r4, #1
 800b4cc:	aa0c      	add	r2, sp, #48	; 0x30
 800b4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4d2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800b4d6:	e79d      	b.n	800b414 <__kernel_rem_pio2+0x19c>
 800b4d8:	4b34      	ldr	r3, [pc, #208]	; (800b5ac <__kernel_rem_pio2+0x334>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f7f5 fab6 	bl	8000a4c <__aeabi_dcmpge>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d140      	bne.n	800b566 <__kernel_rem_pio2+0x2ee>
 800b4e4:	4683      	mov	fp, r0
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	f7f5 fa8f 	bl	8000a10 <__aeabi_dcmpeq>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f000 80c1 	beq.w	800b67a <__kernel_rem_pio2+0x402>
 800b4f8:	1e65      	subs	r5, r4, #1
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	9900      	ldr	r1, [sp, #0]
 800b500:	428b      	cmp	r3, r1
 800b502:	da6d      	bge.n	800b5e0 <__kernel_rem_pio2+0x368>
 800b504:	2a00      	cmp	r2, #0
 800b506:	f000 808a 	beq.w	800b61e <__kernel_rem_pio2+0x3a6>
 800b50a:	ab0c      	add	r3, sp, #48	; 0x30
 800b50c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b510:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80ae 	beq.w	800b676 <__kernel_rem_pio2+0x3fe>
 800b51a:	4650      	mov	r0, sl
 800b51c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800b590 <__kernel_rem_pio2+0x318>
 800b520:	f000 f9fa 	bl	800b918 <scalbn>
 800b524:	1c6b      	adds	r3, r5, #1
 800b526:	00da      	lsls	r2, r3, #3
 800b528:	9205      	str	r2, [sp, #20]
 800b52a:	ec57 6b10 	vmov	r6, r7, d0
 800b52e:	aa70      	add	r2, sp, #448	; 0x1c0
 800b530:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800b5a4 <__kernel_rem_pio2+0x32c>
 800b534:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800b538:	462c      	mov	r4, r5
 800b53a:	f04f 0800 	mov.w	r8, #0
 800b53e:	2c00      	cmp	r4, #0
 800b540:	f280 80d4 	bge.w	800b6ec <__kernel_rem_pio2+0x474>
 800b544:	462c      	mov	r4, r5
 800b546:	2c00      	cmp	r4, #0
 800b548:	f2c0 8102 	blt.w	800b750 <__kernel_rem_pio2+0x4d8>
 800b54c:	4b18      	ldr	r3, [pc, #96]	; (800b5b0 <__kernel_rem_pio2+0x338>)
 800b54e:	461e      	mov	r6, r3
 800b550:	ab70      	add	r3, sp, #448	; 0x1c0
 800b552:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800b556:	1b2b      	subs	r3, r5, r4
 800b558:	f04f 0900 	mov.w	r9, #0
 800b55c:	f04f 0a00 	mov.w	sl, #0
 800b560:	2700      	movs	r7, #0
 800b562:	9306      	str	r3, [sp, #24]
 800b564:	e0e6      	b.n	800b734 <__kernel_rem_pio2+0x4bc>
 800b566:	f04f 0b02 	mov.w	fp, #2
 800b56a:	e756      	b.n	800b41a <__kernel_rem_pio2+0x1a2>
 800b56c:	f8d8 3000 	ldr.w	r3, [r8]
 800b570:	bb05      	cbnz	r5, 800b5b4 <__kernel_rem_pio2+0x33c>
 800b572:	b123      	cbz	r3, 800b57e <__kernel_rem_pio2+0x306>
 800b574:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b578:	f8c8 3000 	str.w	r3, [r8]
 800b57c:	2301      	movs	r3, #1
 800b57e:	3201      	adds	r2, #1
 800b580:	f108 0804 	add.w	r8, r8, #4
 800b584:	461d      	mov	r5, r3
 800b586:	e74f      	b.n	800b428 <__kernel_rem_pio2+0x1b0>
	...
 800b594:	3ff00000 	.word	0x3ff00000
 800b598:	0800bd18 	.word	0x0800bd18
 800b59c:	40200000 	.word	0x40200000
 800b5a0:	3ff00000 	.word	0x3ff00000
 800b5a4:	3e700000 	.word	0x3e700000
 800b5a8:	41700000 	.word	0x41700000
 800b5ac:	3fe00000 	.word	0x3fe00000
 800b5b0:	0800bcd8 	.word	0x0800bcd8
 800b5b4:	1acb      	subs	r3, r1, r3
 800b5b6:	f8c8 3000 	str.w	r3, [r8]
 800b5ba:	462b      	mov	r3, r5
 800b5bc:	e7df      	b.n	800b57e <__kernel_rem_pio2+0x306>
 800b5be:	1e62      	subs	r2, r4, #1
 800b5c0:	ab0c      	add	r3, sp, #48	; 0x30
 800b5c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b5ca:	a90c      	add	r1, sp, #48	; 0x30
 800b5cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b5d0:	e738      	b.n	800b444 <__kernel_rem_pio2+0x1cc>
 800b5d2:	1e62      	subs	r2, r4, #1
 800b5d4:	ab0c      	add	r3, sp, #48	; 0x30
 800b5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5da:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b5de:	e7f4      	b.n	800b5ca <__kernel_rem_pio2+0x352>
 800b5e0:	a90c      	add	r1, sp, #48	; 0x30
 800b5e2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	e788      	b.n	800b4fe <__kernel_rem_pio2+0x286>
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b5f2:	2900      	cmp	r1, #0
 800b5f4:	d0fa      	beq.n	800b5ec <__kernel_rem_pio2+0x374>
 800b5f6:	9a08      	ldr	r2, [sp, #32]
 800b5f8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800b5fc:	446a      	add	r2, sp
 800b5fe:	3a98      	subs	r2, #152	; 0x98
 800b600:	9208      	str	r2, [sp, #32]
 800b602:	9a06      	ldr	r2, [sp, #24]
 800b604:	a920      	add	r1, sp, #128	; 0x80
 800b606:	18a2      	adds	r2, r4, r2
 800b608:	18e3      	adds	r3, r4, r3
 800b60a:	f104 0801 	add.w	r8, r4, #1
 800b60e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800b612:	9302      	str	r3, [sp, #8]
 800b614:	9b02      	ldr	r3, [sp, #8]
 800b616:	4543      	cmp	r3, r8
 800b618:	da04      	bge.n	800b624 <__kernel_rem_pio2+0x3ac>
 800b61a:	461c      	mov	r4, r3
 800b61c:	e6a2      	b.n	800b364 <__kernel_rem_pio2+0xec>
 800b61e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b620:	2301      	movs	r3, #1
 800b622:	e7e4      	b.n	800b5ee <__kernel_rem_pio2+0x376>
 800b624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b626:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b62a:	f7f4 ff1f 	bl	800046c <__aeabi_i2d>
 800b62e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b634:	46ab      	mov	fp, r5
 800b636:	461c      	mov	r4, r3
 800b638:	f04f 0900 	mov.w	r9, #0
 800b63c:	2600      	movs	r6, #0
 800b63e:	2700      	movs	r7, #0
 800b640:	9b05      	ldr	r3, [sp, #20]
 800b642:	4599      	cmp	r9, r3
 800b644:	dd06      	ble.n	800b654 <__kernel_rem_pio2+0x3dc>
 800b646:	9b08      	ldr	r3, [sp, #32]
 800b648:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b64c:	f108 0801 	add.w	r8, r8, #1
 800b650:	9308      	str	r3, [sp, #32]
 800b652:	e7df      	b.n	800b614 <__kernel_rem_pio2+0x39c>
 800b654:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b658:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b65c:	f7f4 ff70 	bl	8000540 <__aeabi_dmul>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	4630      	mov	r0, r6
 800b666:	4639      	mov	r1, r7
 800b668:	f7f4 fdb4 	bl	80001d4 <__adddf3>
 800b66c:	f109 0901 	add.w	r9, r9, #1
 800b670:	4606      	mov	r6, r0
 800b672:	460f      	mov	r7, r1
 800b674:	e7e4      	b.n	800b640 <__kernel_rem_pio2+0x3c8>
 800b676:	3d01      	subs	r5, #1
 800b678:	e747      	b.n	800b50a <__kernel_rem_pio2+0x292>
 800b67a:	ec47 6b10 	vmov	d0, r6, r7
 800b67e:	f1ca 0000 	rsb	r0, sl, #0
 800b682:	f000 f949 	bl	800b918 <scalbn>
 800b686:	ec57 6b10 	vmov	r6, r7, d0
 800b68a:	4ba0      	ldr	r3, [pc, #640]	; (800b90c <__kernel_rem_pio2+0x694>)
 800b68c:	ee10 0a10 	vmov	r0, s0
 800b690:	2200      	movs	r2, #0
 800b692:	4639      	mov	r1, r7
 800b694:	f7f5 f9da 	bl	8000a4c <__aeabi_dcmpge>
 800b698:	b1f8      	cbz	r0, 800b6da <__kernel_rem_pio2+0x462>
 800b69a:	4b9d      	ldr	r3, [pc, #628]	; (800b910 <__kernel_rem_pio2+0x698>)
 800b69c:	2200      	movs	r2, #0
 800b69e:	4630      	mov	r0, r6
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	f7f4 ff4d 	bl	8000540 <__aeabi_dmul>
 800b6a6:	f7f5 f9e5 	bl	8000a74 <__aeabi_d2iz>
 800b6aa:	4680      	mov	r8, r0
 800b6ac:	f7f4 fede 	bl	800046c <__aeabi_i2d>
 800b6b0:	4b96      	ldr	r3, [pc, #600]	; (800b90c <__kernel_rem_pio2+0x694>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f7f4 ff44 	bl	8000540 <__aeabi_dmul>
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	4639      	mov	r1, r7
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f7f4 fd86 	bl	80001d0 <__aeabi_dsub>
 800b6c4:	f7f5 f9d6 	bl	8000a74 <__aeabi_d2iz>
 800b6c8:	1c65      	adds	r5, r4, #1
 800b6ca:	ab0c      	add	r3, sp, #48	; 0x30
 800b6cc:	f10a 0a18 	add.w	sl, sl, #24
 800b6d0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b6d4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b6d8:	e71f      	b.n	800b51a <__kernel_rem_pio2+0x2a2>
 800b6da:	4630      	mov	r0, r6
 800b6dc:	4639      	mov	r1, r7
 800b6de:	f7f5 f9c9 	bl	8000a74 <__aeabi_d2iz>
 800b6e2:	ab0c      	add	r3, sp, #48	; 0x30
 800b6e4:	4625      	mov	r5, r4
 800b6e6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b6ea:	e716      	b.n	800b51a <__kernel_rem_pio2+0x2a2>
 800b6ec:	ab0c      	add	r3, sp, #48	; 0x30
 800b6ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b6f2:	f7f4 febb 	bl	800046c <__aeabi_i2d>
 800b6f6:	4632      	mov	r2, r6
 800b6f8:	463b      	mov	r3, r7
 800b6fa:	f7f4 ff21 	bl	8000540 <__aeabi_dmul>
 800b6fe:	4642      	mov	r2, r8
 800b700:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b704:	464b      	mov	r3, r9
 800b706:	4630      	mov	r0, r6
 800b708:	4639      	mov	r1, r7
 800b70a:	f7f4 ff19 	bl	8000540 <__aeabi_dmul>
 800b70e:	3c01      	subs	r4, #1
 800b710:	4606      	mov	r6, r0
 800b712:	460f      	mov	r7, r1
 800b714:	e713      	b.n	800b53e <__kernel_rem_pio2+0x2c6>
 800b716:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800b71a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800b71e:	f7f4 ff0f 	bl	8000540 <__aeabi_dmul>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	4648      	mov	r0, r9
 800b728:	4651      	mov	r1, sl
 800b72a:	f7f4 fd53 	bl	80001d4 <__adddf3>
 800b72e:	3701      	adds	r7, #1
 800b730:	4681      	mov	r9, r0
 800b732:	468a      	mov	sl, r1
 800b734:	9b00      	ldr	r3, [sp, #0]
 800b736:	429f      	cmp	r7, r3
 800b738:	dc02      	bgt.n	800b740 <__kernel_rem_pio2+0x4c8>
 800b73a:	9b06      	ldr	r3, [sp, #24]
 800b73c:	429f      	cmp	r7, r3
 800b73e:	ddea      	ble.n	800b716 <__kernel_rem_pio2+0x49e>
 800b740:	9a06      	ldr	r2, [sp, #24]
 800b742:	ab48      	add	r3, sp, #288	; 0x120
 800b744:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800b748:	e9c6 9a00 	strd	r9, sl, [r6]
 800b74c:	3c01      	subs	r4, #1
 800b74e:	e6fa      	b.n	800b546 <__kernel_rem_pio2+0x2ce>
 800b750:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b752:	2b02      	cmp	r3, #2
 800b754:	dc0b      	bgt.n	800b76e <__kernel_rem_pio2+0x4f6>
 800b756:	2b00      	cmp	r3, #0
 800b758:	dc39      	bgt.n	800b7ce <__kernel_rem_pio2+0x556>
 800b75a:	d05d      	beq.n	800b818 <__kernel_rem_pio2+0x5a0>
 800b75c:	9b02      	ldr	r3, [sp, #8]
 800b75e:	f003 0007 	and.w	r0, r3, #7
 800b762:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b766:	ecbd 8b02 	vpop	{d8}
 800b76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b770:	2b03      	cmp	r3, #3
 800b772:	d1f3      	bne.n	800b75c <__kernel_rem_pio2+0x4e4>
 800b774:	9b05      	ldr	r3, [sp, #20]
 800b776:	9500      	str	r5, [sp, #0]
 800b778:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b77c:	eb0d 0403 	add.w	r4, sp, r3
 800b780:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800b784:	46a2      	mov	sl, r4
 800b786:	9b00      	ldr	r3, [sp, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f1aa 0a08 	sub.w	sl, sl, #8
 800b78e:	dc69      	bgt.n	800b864 <__kernel_rem_pio2+0x5ec>
 800b790:	46aa      	mov	sl, r5
 800b792:	f1ba 0f01 	cmp.w	sl, #1
 800b796:	f1a4 0408 	sub.w	r4, r4, #8
 800b79a:	f300 8083 	bgt.w	800b8a4 <__kernel_rem_pio2+0x62c>
 800b79e:	9c05      	ldr	r4, [sp, #20]
 800b7a0:	ab48      	add	r3, sp, #288	; 0x120
 800b7a2:	441c      	add	r4, r3
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	2d01      	cmp	r5, #1
 800b7aa:	f300 809a 	bgt.w	800b8e2 <__kernel_rem_pio2+0x66a>
 800b7ae:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800b7b2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b7b6:	f1bb 0f00 	cmp.w	fp, #0
 800b7ba:	f040 8098 	bne.w	800b8ee <__kernel_rem_pio2+0x676>
 800b7be:	9b04      	ldr	r3, [sp, #16]
 800b7c0:	e9c3 7800 	strd	r7, r8, [r3]
 800b7c4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b7c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b7cc:	e7c6      	b.n	800b75c <__kernel_rem_pio2+0x4e4>
 800b7ce:	9e05      	ldr	r6, [sp, #20]
 800b7d0:	ab48      	add	r3, sp, #288	; 0x120
 800b7d2:	441e      	add	r6, r3
 800b7d4:	462c      	mov	r4, r5
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	2100      	movs	r1, #0
 800b7da:	2c00      	cmp	r4, #0
 800b7dc:	da33      	bge.n	800b846 <__kernel_rem_pio2+0x5ce>
 800b7de:	f1bb 0f00 	cmp.w	fp, #0
 800b7e2:	d036      	beq.n	800b852 <__kernel_rem_pio2+0x5da>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7ea:	9c04      	ldr	r4, [sp, #16]
 800b7ec:	e9c4 2300 	strd	r2, r3, [r4]
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b7f8:	f7f4 fcea 	bl	80001d0 <__aeabi_dsub>
 800b7fc:	ae4a      	add	r6, sp, #296	; 0x128
 800b7fe:	2401      	movs	r4, #1
 800b800:	42a5      	cmp	r5, r4
 800b802:	da29      	bge.n	800b858 <__kernel_rem_pio2+0x5e0>
 800b804:	f1bb 0f00 	cmp.w	fp, #0
 800b808:	d002      	beq.n	800b810 <__kernel_rem_pio2+0x598>
 800b80a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b80e:	4619      	mov	r1, r3
 800b810:	9b04      	ldr	r3, [sp, #16]
 800b812:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b816:	e7a1      	b.n	800b75c <__kernel_rem_pio2+0x4e4>
 800b818:	9c05      	ldr	r4, [sp, #20]
 800b81a:	ab48      	add	r3, sp, #288	; 0x120
 800b81c:	441c      	add	r4, r3
 800b81e:	2000      	movs	r0, #0
 800b820:	2100      	movs	r1, #0
 800b822:	2d00      	cmp	r5, #0
 800b824:	da09      	bge.n	800b83a <__kernel_rem_pio2+0x5c2>
 800b826:	f1bb 0f00 	cmp.w	fp, #0
 800b82a:	d002      	beq.n	800b832 <__kernel_rem_pio2+0x5ba>
 800b82c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b830:	4619      	mov	r1, r3
 800b832:	9b04      	ldr	r3, [sp, #16]
 800b834:	e9c3 0100 	strd	r0, r1, [r3]
 800b838:	e790      	b.n	800b75c <__kernel_rem_pio2+0x4e4>
 800b83a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b83e:	f7f4 fcc9 	bl	80001d4 <__adddf3>
 800b842:	3d01      	subs	r5, #1
 800b844:	e7ed      	b.n	800b822 <__kernel_rem_pio2+0x5aa>
 800b846:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b84a:	f7f4 fcc3 	bl	80001d4 <__adddf3>
 800b84e:	3c01      	subs	r4, #1
 800b850:	e7c3      	b.n	800b7da <__kernel_rem_pio2+0x562>
 800b852:	4602      	mov	r2, r0
 800b854:	460b      	mov	r3, r1
 800b856:	e7c8      	b.n	800b7ea <__kernel_rem_pio2+0x572>
 800b858:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b85c:	f7f4 fcba 	bl	80001d4 <__adddf3>
 800b860:	3401      	adds	r4, #1
 800b862:	e7cd      	b.n	800b800 <__kernel_rem_pio2+0x588>
 800b864:	e9da 8900 	ldrd	r8, r9, [sl]
 800b868:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b86c:	9b00      	ldr	r3, [sp, #0]
 800b86e:	3b01      	subs	r3, #1
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	4632      	mov	r2, r6
 800b874:	463b      	mov	r3, r7
 800b876:	4640      	mov	r0, r8
 800b878:	4649      	mov	r1, r9
 800b87a:	f7f4 fcab 	bl	80001d4 <__adddf3>
 800b87e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4640      	mov	r0, r8
 800b888:	4649      	mov	r1, r9
 800b88a:	f7f4 fca1 	bl	80001d0 <__aeabi_dsub>
 800b88e:	4632      	mov	r2, r6
 800b890:	463b      	mov	r3, r7
 800b892:	f7f4 fc9f 	bl	80001d4 <__adddf3>
 800b896:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b89a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b89e:	ed8a 7b00 	vstr	d7, [sl]
 800b8a2:	e770      	b.n	800b786 <__kernel_rem_pio2+0x50e>
 800b8a4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b8a8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b8ac:	4640      	mov	r0, r8
 800b8ae:	4632      	mov	r2, r6
 800b8b0:	463b      	mov	r3, r7
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	f7f4 fc8e 	bl	80001d4 <__adddf3>
 800b8b8:	e9cd 0100 	strd	r0, r1, [sp]
 800b8bc:	4602      	mov	r2, r0
 800b8be:	460b      	mov	r3, r1
 800b8c0:	4640      	mov	r0, r8
 800b8c2:	4649      	mov	r1, r9
 800b8c4:	f7f4 fc84 	bl	80001d0 <__aeabi_dsub>
 800b8c8:	4632      	mov	r2, r6
 800b8ca:	463b      	mov	r3, r7
 800b8cc:	f7f4 fc82 	bl	80001d4 <__adddf3>
 800b8d0:	ed9d 7b00 	vldr	d7, [sp]
 800b8d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b8d8:	ed84 7b00 	vstr	d7, [r4]
 800b8dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8e0:	e757      	b.n	800b792 <__kernel_rem_pio2+0x51a>
 800b8e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b8e6:	f7f4 fc75 	bl	80001d4 <__adddf3>
 800b8ea:	3d01      	subs	r5, #1
 800b8ec:	e75c      	b.n	800b7a8 <__kernel_rem_pio2+0x530>
 800b8ee:	9b04      	ldr	r3, [sp, #16]
 800b8f0:	9a04      	ldr	r2, [sp, #16]
 800b8f2:	601f      	str	r7, [r3, #0]
 800b8f4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b8f8:	605c      	str	r4, [r3, #4]
 800b8fa:	609d      	str	r5, [r3, #8]
 800b8fc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b900:	60d3      	str	r3, [r2, #12]
 800b902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b906:	6110      	str	r0, [r2, #16]
 800b908:	6153      	str	r3, [r2, #20]
 800b90a:	e727      	b.n	800b75c <__kernel_rem_pio2+0x4e4>
 800b90c:	41700000 	.word	0x41700000
 800b910:	3e700000 	.word	0x3e700000
 800b914:	00000000 	.word	0x00000000

0800b918 <scalbn>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	ec55 4b10 	vmov	r4, r5, d0
 800b91e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b922:	4606      	mov	r6, r0
 800b924:	462b      	mov	r3, r5
 800b926:	b999      	cbnz	r1, 800b950 <scalbn+0x38>
 800b928:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b92c:	4323      	orrs	r3, r4
 800b92e:	d03f      	beq.n	800b9b0 <scalbn+0x98>
 800b930:	4b35      	ldr	r3, [pc, #212]	; (800ba08 <scalbn+0xf0>)
 800b932:	4629      	mov	r1, r5
 800b934:	ee10 0a10 	vmov	r0, s0
 800b938:	2200      	movs	r2, #0
 800b93a:	f7f4 fe01 	bl	8000540 <__aeabi_dmul>
 800b93e:	4b33      	ldr	r3, [pc, #204]	; (800ba0c <scalbn+0xf4>)
 800b940:	429e      	cmp	r6, r3
 800b942:	4604      	mov	r4, r0
 800b944:	460d      	mov	r5, r1
 800b946:	da10      	bge.n	800b96a <scalbn+0x52>
 800b948:	a327      	add	r3, pc, #156	; (adr r3, 800b9e8 <scalbn+0xd0>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	e01f      	b.n	800b990 <scalbn+0x78>
 800b950:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b954:	4291      	cmp	r1, r2
 800b956:	d10c      	bne.n	800b972 <scalbn+0x5a>
 800b958:	ee10 2a10 	vmov	r2, s0
 800b95c:	4620      	mov	r0, r4
 800b95e:	4629      	mov	r1, r5
 800b960:	f7f4 fc38 	bl	80001d4 <__adddf3>
 800b964:	4604      	mov	r4, r0
 800b966:	460d      	mov	r5, r1
 800b968:	e022      	b.n	800b9b0 <scalbn+0x98>
 800b96a:	460b      	mov	r3, r1
 800b96c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b970:	3936      	subs	r1, #54	; 0x36
 800b972:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b976:	4296      	cmp	r6, r2
 800b978:	dd0d      	ble.n	800b996 <scalbn+0x7e>
 800b97a:	2d00      	cmp	r5, #0
 800b97c:	a11c      	add	r1, pc, #112	; (adr r1, 800b9f0 <scalbn+0xd8>)
 800b97e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b982:	da02      	bge.n	800b98a <scalbn+0x72>
 800b984:	a11c      	add	r1, pc, #112	; (adr r1, 800b9f8 <scalbn+0xe0>)
 800b986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b98a:	a319      	add	r3, pc, #100	; (adr r3, 800b9f0 <scalbn+0xd8>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 fdd6 	bl	8000540 <__aeabi_dmul>
 800b994:	e7e6      	b.n	800b964 <scalbn+0x4c>
 800b996:	1872      	adds	r2, r6, r1
 800b998:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b99c:	428a      	cmp	r2, r1
 800b99e:	dcec      	bgt.n	800b97a <scalbn+0x62>
 800b9a0:	2a00      	cmp	r2, #0
 800b9a2:	dd08      	ble.n	800b9b6 <scalbn+0x9e>
 800b9a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b9b0:	ec45 4b10 	vmov	d0, r4, r5
 800b9b4:	bd70      	pop	{r4, r5, r6, pc}
 800b9b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b9ba:	da08      	bge.n	800b9ce <scalbn+0xb6>
 800b9bc:	2d00      	cmp	r5, #0
 800b9be:	a10a      	add	r1, pc, #40	; (adr r1, 800b9e8 <scalbn+0xd0>)
 800b9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9c4:	dac0      	bge.n	800b948 <scalbn+0x30>
 800b9c6:	a10e      	add	r1, pc, #56	; (adr r1, 800ba00 <scalbn+0xe8>)
 800b9c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9cc:	e7bc      	b.n	800b948 <scalbn+0x30>
 800b9ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9d2:	3236      	adds	r2, #54	; 0x36
 800b9d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b9dc:	4620      	mov	r0, r4
 800b9de:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <scalbn+0xf8>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	e7d5      	b.n	800b990 <scalbn+0x78>
 800b9e4:	f3af 8000 	nop.w
 800b9e8:	c2f8f359 	.word	0xc2f8f359
 800b9ec:	01a56e1f 	.word	0x01a56e1f
 800b9f0:	8800759c 	.word	0x8800759c
 800b9f4:	7e37e43c 	.word	0x7e37e43c
 800b9f8:	8800759c 	.word	0x8800759c
 800b9fc:	fe37e43c 	.word	0xfe37e43c
 800ba00:	c2f8f359 	.word	0xc2f8f359
 800ba04:	81a56e1f 	.word	0x81a56e1f
 800ba08:	43500000 	.word	0x43500000
 800ba0c:	ffff3cb0 	.word	0xffff3cb0
 800ba10:	3c900000 	.word	0x3c900000
 800ba14:	00000000 	.word	0x00000000

0800ba18 <floor>:
 800ba18:	ec51 0b10 	vmov	r0, r1, d0
 800ba1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ba20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba24:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800ba28:	2e13      	cmp	r6, #19
 800ba2a:	ee10 5a10 	vmov	r5, s0
 800ba2e:	ee10 8a10 	vmov	r8, s0
 800ba32:	460c      	mov	r4, r1
 800ba34:	dc31      	bgt.n	800ba9a <floor+0x82>
 800ba36:	2e00      	cmp	r6, #0
 800ba38:	da14      	bge.n	800ba64 <floor+0x4c>
 800ba3a:	a333      	add	r3, pc, #204	; (adr r3, 800bb08 <floor+0xf0>)
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	f7f4 fbc8 	bl	80001d4 <__adddf3>
 800ba44:	2200      	movs	r2, #0
 800ba46:	2300      	movs	r3, #0
 800ba48:	f7f5 f80a 	bl	8000a60 <__aeabi_dcmpgt>
 800ba4c:	b138      	cbz	r0, 800ba5e <floor+0x46>
 800ba4e:	2c00      	cmp	r4, #0
 800ba50:	da53      	bge.n	800bafa <floor+0xe2>
 800ba52:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ba56:	4325      	orrs	r5, r4
 800ba58:	d052      	beq.n	800bb00 <floor+0xe8>
 800ba5a:	4c2d      	ldr	r4, [pc, #180]	; (800bb10 <floor+0xf8>)
 800ba5c:	2500      	movs	r5, #0
 800ba5e:	4621      	mov	r1, r4
 800ba60:	4628      	mov	r0, r5
 800ba62:	e024      	b.n	800baae <floor+0x96>
 800ba64:	4f2b      	ldr	r7, [pc, #172]	; (800bb14 <floor+0xfc>)
 800ba66:	4137      	asrs	r7, r6
 800ba68:	ea01 0307 	and.w	r3, r1, r7
 800ba6c:	4303      	orrs	r3, r0
 800ba6e:	d01e      	beq.n	800baae <floor+0x96>
 800ba70:	a325      	add	r3, pc, #148	; (adr r3, 800bb08 <floor+0xf0>)
 800ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba76:	f7f4 fbad 	bl	80001d4 <__adddf3>
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f7f4 ffef 	bl	8000a60 <__aeabi_dcmpgt>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d0eb      	beq.n	800ba5e <floor+0x46>
 800ba86:	2c00      	cmp	r4, #0
 800ba88:	bfbe      	ittt	lt
 800ba8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ba8e:	4133      	asrlt	r3, r6
 800ba90:	18e4      	addlt	r4, r4, r3
 800ba92:	ea24 0407 	bic.w	r4, r4, r7
 800ba96:	2500      	movs	r5, #0
 800ba98:	e7e1      	b.n	800ba5e <floor+0x46>
 800ba9a:	2e33      	cmp	r6, #51	; 0x33
 800ba9c:	dd0b      	ble.n	800bab6 <floor+0x9e>
 800ba9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800baa2:	d104      	bne.n	800baae <floor+0x96>
 800baa4:	ee10 2a10 	vmov	r2, s0
 800baa8:	460b      	mov	r3, r1
 800baaa:	f7f4 fb93 	bl	80001d4 <__adddf3>
 800baae:	ec41 0b10 	vmov	d0, r0, r1
 800bab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800baba:	f04f 37ff 	mov.w	r7, #4294967295
 800babe:	40df      	lsrs	r7, r3
 800bac0:	4238      	tst	r0, r7
 800bac2:	d0f4      	beq.n	800baae <floor+0x96>
 800bac4:	a310      	add	r3, pc, #64	; (adr r3, 800bb08 <floor+0xf0>)
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	f7f4 fb83 	bl	80001d4 <__adddf3>
 800bace:	2200      	movs	r2, #0
 800bad0:	2300      	movs	r3, #0
 800bad2:	f7f4 ffc5 	bl	8000a60 <__aeabi_dcmpgt>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d0c1      	beq.n	800ba5e <floor+0x46>
 800bada:	2c00      	cmp	r4, #0
 800badc:	da0a      	bge.n	800baf4 <floor+0xdc>
 800bade:	2e14      	cmp	r6, #20
 800bae0:	d101      	bne.n	800bae6 <floor+0xce>
 800bae2:	3401      	adds	r4, #1
 800bae4:	e006      	b.n	800baf4 <floor+0xdc>
 800bae6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800baea:	2301      	movs	r3, #1
 800baec:	40b3      	lsls	r3, r6
 800baee:	441d      	add	r5, r3
 800baf0:	45a8      	cmp	r8, r5
 800baf2:	d8f6      	bhi.n	800bae2 <floor+0xca>
 800baf4:	ea25 0507 	bic.w	r5, r5, r7
 800baf8:	e7b1      	b.n	800ba5e <floor+0x46>
 800bafa:	2500      	movs	r5, #0
 800bafc:	462c      	mov	r4, r5
 800bafe:	e7ae      	b.n	800ba5e <floor+0x46>
 800bb00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bb04:	e7ab      	b.n	800ba5e <floor+0x46>
 800bb06:	bf00      	nop
 800bb08:	8800759c 	.word	0x8800759c
 800bb0c:	7e37e43c 	.word	0x7e37e43c
 800bb10:	bff00000 	.word	0xbff00000
 800bb14:	000fffff 	.word	0x000fffff

0800bb18 <_init>:
 800bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1a:	bf00      	nop
 800bb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb1e:	bc08      	pop	{r3}
 800bb20:	469e      	mov	lr, r3
 800bb22:	4770      	bx	lr

0800bb24 <_fini>:
 800bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb26:	bf00      	nop
 800bb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2a:	bc08      	pop	{r3}
 800bb2c:	469e      	mov	lr, r3
 800bb2e:	4770      	bx	lr
