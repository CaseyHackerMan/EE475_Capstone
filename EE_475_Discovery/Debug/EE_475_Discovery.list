
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adf0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800af78  0800af78  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afa8  0800afa8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800afa8  0800afa8  0001afa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afb0  0800afb0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afb0  0800afb0  0001afb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afb4  0800afb4  0001afb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800afb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000b60  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bdc  20000bdc  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d909  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004399  00000000  00000000  0003d9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001950  00000000  00000000  00041d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013bc  00000000  00000000  000436e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254e5  00000000  00000000  00044aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021886  00000000  00000000  00069f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6fbc  00000000  00000000  0008b80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006f90  00000000  00000000  001627cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0016975c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800af60 	.word	0x0800af60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800af60 	.word	0x0800af60

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	UART3_Rx_buf[UART3_Rx_i++] = UART3_Rx_c;
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <HAL_UART_RxCpltCallback+0x64>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	1c5a      	adds	r2, r3, #1
 80004d2:	4915      	ldr	r1, [pc, #84]	; (8000528 <HAL_UART_RxCpltCallback+0x64>)
 80004d4:	600a      	str	r2, [r1, #0]
 80004d6:	4a15      	ldr	r2, [pc, #84]	; (800052c <HAL_UART_RxCpltCallback+0x68>)
 80004d8:	7811      	ldrb	r1, [r2, #0]
 80004da:	4a15      	ldr	r2, [pc, #84]	; (8000530 <HAL_UART_RxCpltCallback+0x6c>)
 80004dc:	54d1      	strb	r1, [r2, r3]
	if (UART3_Rx_c == '\n') {
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <HAL_UART_RxCpltCallback+0x68>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b0a      	cmp	r3, #10
 80004e4:	d116      	bne.n	8000514 <HAL_UART_RxCpltCallback+0x50>
		if (UART3_Rx_i >= 50 && strncmp((char*) UART3_Rx_buf, "$GPGGA", 6) == 0) {
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <HAL_UART_RxCpltCallback+0x64>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b31      	cmp	r3, #49	; 0x31
 80004ec:	dd0f      	ble.n	800050e <HAL_UART_RxCpltCallback+0x4a>
 80004ee:	2206      	movs	r2, #6
 80004f0:	4910      	ldr	r1, [pc, #64]	; (8000534 <HAL_UART_RxCpltCallback+0x70>)
 80004f2:	480f      	ldr	r0, [pc, #60]	; (8000530 <HAL_UART_RxCpltCallback+0x6c>)
 80004f4:	f00a fc9a 	bl	800ae2c <strncmp>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d107      	bne.n	800050e <HAL_UART_RxCpltCallback+0x4a>
			HAL_UART_Transmit(&huart2, UART3_Rx_buf, UART3_Rx_i, 100);
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <HAL_UART_RxCpltCallback+0x64>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	b29a      	uxth	r2, r3
 8000504:	2364      	movs	r3, #100	; 0x64
 8000506:	490a      	ldr	r1, [pc, #40]	; (8000530 <HAL_UART_RxCpltCallback+0x6c>)
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <HAL_UART_RxCpltCallback+0x74>)
 800050a:	f005 febd 	bl	8006288 <HAL_UART_Transmit>
		}
		UART3_Rx_i = 0;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_UART_RxCpltCallback+0x64>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart3, &UART3_Rx_c, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	4905      	ldr	r1, [pc, #20]	; (800052c <HAL_UART_RxCpltCallback+0x68>)
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <HAL_UART_RxCpltCallback+0x78>)
 800051a:	f005 ff40 	bl	800639e <HAL_UART_Receive_IT>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000268 	.word	0x20000268
 800052c:	20000264 	.word	0x20000264
 8000530:	2000026c 	.word	0x2000026c
 8000534:	0800af78 	.word	0x0800af78
 8000538:	200001d4 	.word	0x200001d4
 800053c:	2000021c 	.word	0x2000021c

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fe1a 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f834 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fa26 	bl	800099c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000550:	f000 f89a 	bl	8000688 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000554:	f000 f8c6 	bl	80006e4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000558:	f000 f8f4 	bl	8000744 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800055c:	f00a f898 	bl	800a690 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000560:	f000 f9c8 	bl	80008f4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000564:	f000 f924 	bl	80007b0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000568:	f000 f9ee 	bl	8000948 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800056c:	2100      	movs	r1, #0
 800056e:	480c      	ldr	r0, [pc, #48]	; (80005a0 <main+0x60>)
 8000570:	f004 fffe 	bl	8005570 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &UART3_Rx_c, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	490b      	ldr	r1, [pc, #44]	; (80005a4 <main+0x64>)
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <main+0x68>)
 800057a:	f005 ff10 	bl	800639e <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2, (uint8_t*) "Hello!\r\n", 8, 100);
 800057e:	2364      	movs	r3, #100	; 0x64
 8000580:	2208      	movs	r2, #8
 8000582:	490a      	ldr	r1, [pc, #40]	; (80005ac <main+0x6c>)
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <main+0x70>)
 8000586:	f005 fe7f 	bl	8006288 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800058a:	f00a f8a7 	bl	800a6dc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // int p = 1500 + 500*sin(i/100.0);
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 800058e:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <main+0x60>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000596:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(10);
 8000598:	200a      	movs	r0, #10
 800059a:	f000 fe61 	bl	8001260 <HAL_Delay>
    MX_USB_HOST_Process();
 800059e:	e7f4      	b.n	800058a <main+0x4a>
 80005a0:	2000018c 	.word	0x2000018c
 80005a4:	20000264 	.word	0x20000264
 80005a8:	2000021c 	.word	0x2000021c
 80005ac:	0800af80 	.word	0x0800af80
 80005b0:	200001d4 	.word	0x200001d4

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f00a fc2a 	bl	800ae1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <SystemClock_Config+0xd0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000624:	2308      	movs	r3, #8
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000628:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800062c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000632:	2307      	movs	r3, #7
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	4618      	mov	r0, r3
 800063c:	f004 f88c 	bl	8004758 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000646:	f000 faa7 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000656:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2105      	movs	r1, #5
 8000668:	4618      	mov	r0, r3
 800066a:	f004 faed 	bl	8004c48 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000674:	f000 fa90 	bl	8000b98 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C1_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c6:	f003 fa63 	bl	8003b90 <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 fa62 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000098 	.word	0x20000098
 80006dc:	40005400 	.word	0x40005400
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_I2S3_Init+0x54>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <MX_I2S3_Init+0x58>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2S3_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_I2S3_Init+0x54>)
 800070c:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <MX_I2S3_Init+0x5c>)
 800070e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_I2S3_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_I2S3_Init+0x54>)
 8000724:	f003 fb78 	bl	8003e18 <HAL_I2S_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800072e:	f000 fa33 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000ec 	.word	0x200000ec
 800073c:	40003c00 	.word	0x40003c00
 8000740:	00017700 	.word	0x00017700

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f004 fdb9 	bl	800530c <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f9fa 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000134 	.word	0x20000134
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b096      	sub	sp, #88	; 0x58
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
 80007de:	615a      	str	r2, [r3, #20]
 80007e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2220      	movs	r2, #32
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f00a fb17 	bl	800ae1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ee:	4b3f      	ldr	r3, [pc, #252]	; (80008ec <MX_TIM1_Init+0x13c>)
 80007f0:	4a3f      	ldr	r2, [pc, #252]	; (80008f0 <MX_TIM1_Init+0x140>)
 80007f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 80007f4:	4b3d      	ldr	r3, [pc, #244]	; (80008ec <MX_TIM1_Init+0x13c>)
 80007f6:	22a8      	movs	r2, #168	; 0xa8
 80007f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b3c      	ldr	r3, [pc, #240]	; (80008ec <MX_TIM1_Init+0x13c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000800:	4b3a      	ldr	r3, [pc, #232]	; (80008ec <MX_TIM1_Init+0x13c>)
 8000802:	f242 7210 	movw	r2, #10000	; 0x2710
 8000806:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b38      	ldr	r3, [pc, #224]	; (80008ec <MX_TIM1_Init+0x13c>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800080e:	4b37      	ldr	r3, [pc, #220]	; (80008ec <MX_TIM1_Init+0x13c>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b35      	ldr	r3, [pc, #212]	; (80008ec <MX_TIM1_Init+0x13c>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800081a:	4834      	ldr	r0, [pc, #208]	; (80008ec <MX_TIM1_Init+0x13c>)
 800081c:	f004 fdff 	bl	800541e <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000826:	f000 f9b7 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000830:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000834:	4619      	mov	r1, r3
 8000836:	482d      	ldr	r0, [pc, #180]	; (80008ec <MX_TIM1_Init+0x13c>)
 8000838:	f005 f824 	bl	8005884 <HAL_TIM_ConfigClockSource>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000842:	f000 f9a9 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000846:	4829      	ldr	r0, [pc, #164]	; (80008ec <MX_TIM1_Init+0x13c>)
 8000848:	f004 fe38 	bl	80054bc <HAL_TIM_PWM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000852:	f000 f9a1 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800085e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000862:	4619      	mov	r1, r3
 8000864:	4821      	ldr	r0, [pc, #132]	; (80008ec <MX_TIM1_Init+0x13c>)
 8000866:	f005 fbf1 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000870:	f000 f992 	bl	8000b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8000878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087e:	2300      	movs	r3, #0
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000882:	2300      	movs	r3, #0
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	2200      	movs	r2, #0
 8000898:	4619      	mov	r1, r3
 800089a:	4814      	ldr	r0, [pc, #80]	; (80008ec <MX_TIM1_Init+0x13c>)
 800089c:	f004 ff30 	bl	8005700 <HAL_TIM_PWM_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80008a6:	f000 f977 	bl	8000b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <MX_TIM1_Init+0x13c>)
 80008ce:	f005 fc39 	bl	8006144 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80008d8:	f000 f95e 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <MX_TIM1_Init+0x13c>)
 80008de:	f000 fabb 	bl	8000e58 <HAL_TIM_MspPostInit>

}
 80008e2:	bf00      	nop
 80008e4:	3758      	adds	r7, #88	; 0x58
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000018c 	.word	0x2000018c
 80008f0:	40010000 	.word	0x40010000

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_USART2_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800092c:	f005 fc5c 	bl	80061e8 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000936:	f000 f92f 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200001d4 	.word	0x200001d4
 8000944:	40004400 	.word	0x40004400

08000948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <MX_USART3_UART_Init+0x50>)
 8000950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 8000954:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 8000980:	f005 fc32 	bl	80061e8 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800098a:	f000 f905 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000021c 	.word	0x2000021c
 8000998:	40004800 	.word	0x40004800

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	4b72      	ldr	r3, [pc, #456]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a71      	ldr	r2, [pc, #452]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b6f      	ldr	r3, [pc, #444]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	4b6b      	ldr	r3, [pc, #428]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a6a      	ldr	r2, [pc, #424]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b68      	ldr	r3, [pc, #416]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b64      	ldr	r3, [pc, #400]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a63      	ldr	r2, [pc, #396]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b61      	ldr	r3, [pc, #388]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b5d      	ldr	r3, [pc, #372]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a5c      	ldr	r2, [pc, #368]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b5a      	ldr	r3, [pc, #360]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b56      	ldr	r3, [pc, #344]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a55      	ldr	r2, [pc, #340]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b53      	ldr	r3, [pc, #332]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b4f      	ldr	r3, [pc, #316]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a4e      	ldr	r2, [pc, #312]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b4c      	ldr	r3, [pc, #304]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	4849      	ldr	r0, [pc, #292]	; (8000b84 <MX_GPIO_Init+0x1e8>)
 8000a60:	f000 ff62 	bl	8001928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2101      	movs	r1, #1
 8000a68:	4847      	ldr	r0, [pc, #284]	; (8000b88 <MX_GPIO_Init+0x1ec>)
 8000a6a:	f000 ff5d 	bl	8001928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a74:	4845      	ldr	r0, [pc, #276]	; (8000b8c <MX_GPIO_Init+0x1f0>)
 8000a76:	f000 ff57 	bl	8001928 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	483c      	ldr	r0, [pc, #240]	; (8000b84 <MX_GPIO_Init+0x1e8>)
 8000a92:	f000 fdad 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4836      	ldr	r0, [pc, #216]	; (8000b88 <MX_GPIO_Init+0x1ec>)
 8000aae:	f000 fd9f 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	482e      	ldr	r0, [pc, #184]	; (8000b88 <MX_GPIO_Init+0x1ec>)
 8000ace:	f000 fd8f 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ad6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	482a      	ldr	r0, [pc, #168]	; (8000b90 <MX_GPIO_Init+0x1f4>)
 8000ae8:	f000 fd82 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000aec:	2304      	movs	r3, #4
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4825      	ldr	r0, [pc, #148]	; (8000b94 <MX_GPIO_Init+0x1f8>)
 8000b00:	f000 fd76 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b16:	2305      	movs	r3, #5
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <MX_GPIO_Init+0x1f8>)
 8000b22:	f000 fd65 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b26:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b2a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4813      	ldr	r0, [pc, #76]	; (8000b8c <MX_GPIO_Init+0x1f0>)
 8000b40:	f000 fd56 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b44:	2320      	movs	r3, #32
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_GPIO_Init+0x1f0>)
 8000b58:	f000 fd4a 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b60:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_GPIO_Init+0x1e8>)
 8000b72:	f000 fd3d 	bl	80015f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b76:	bf00      	nop
 8000b78:	3730      	adds	r7, #48	; 0x30
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40020400 	.word	0x40020400

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be2:	2007      	movs	r0, #7
 8000be4:	f000 fc30 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_I2C_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12c      	bne.n	8000c70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c38:	2312      	movs	r3, #18
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c44:	2304      	movs	r3, #4
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480c      	ldr	r0, [pc, #48]	; (8000c80 <HAL_I2C_MspInit+0x8c>)
 8000c50:	f000 fcce 	bl	80015f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020400 	.word	0x40020400

08000c84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08e      	sub	sp, #56	; 0x38
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <HAL_I2S_MspInit+0xf0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d15a      	bne.n	8000d6a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cb8:	23c0      	movs	r3, #192	; 0xc0
 8000cba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 f9df 	bl	8005088 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cd0:	f7ff ff62 	bl	8000b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <HAL_I2S_MspInit+0xf4>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	4a26      	ldr	r2, [pc, #152]	; (8000d78 <HAL_I2S_MspInit+0xf4>)
 8000cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_I2S_MspInit+0xf4>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_I2S_MspInit+0xf4>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	4a1f      	ldr	r2, [pc, #124]	; (8000d78 <HAL_I2S_MspInit+0xf4>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_I2S_MspInit+0xf4>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_I2S_MspInit+0xf4>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <HAL_I2S_MspInit+0xf4>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_I2S_MspInit+0xf4>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	480e      	ldr	r0, [pc, #56]	; (8000d7c <HAL_I2S_MspInit+0xf8>)
 8000d44:	f000 fc54 	bl	80015f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d48:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d5a:	2306      	movs	r3, #6
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <HAL_I2S_MspInit+0xfc>)
 8000d66:	f000 fc43 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3738      	adds	r7, #56	; 0x38
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40003c00 	.word	0x40003c00
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	40020800 	.word	0x40020800

08000d84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <HAL_SPI_MspInit+0x84>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d12b      	bne.n	8000dfe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000db0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dde:	23e0      	movs	r3, #224	; 0xe0
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dee:	2305      	movs	r3, #5
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_SPI_MspInit+0x8c>)
 8000dfa:	f000 fbf9 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40013000 	.word	0x40013000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <HAL_TIM_Base_MspInit+0x3c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d10d      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_TIM_Base_MspInit+0x40>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_TIM_Base_MspInit+0x40>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <HAL_TIM_Base_MspInit+0x40>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40010000 	.word	0x40010000
 8000e54:	40023800 	.word	0x40023800

08000e58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_TIM_MspPostInit+0x68>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d11e      	bne.n	8000eb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_TIM_MspPostInit+0x6c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <HAL_TIM_MspPostInit+0x6c>)
 8000e84:	f043 0310 	orr.w	r3, r3, #16
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_TIM_MspPostInit+0x6c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0310 	and.w	r3, r3, #16
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_TIM_MspPostInit+0x70>)
 8000eb4:	f000 fb9c 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a46      	ldr	r2, [pc, #280]	; (8001004 <HAL_UART_MspInit+0x138>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d12c      	bne.n	8000f48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	4b45      	ldr	r3, [pc, #276]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a44      	ldr	r2, [pc, #272]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b42      	ldr	r3, [pc, #264]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	4b3e      	ldr	r3, [pc, #248]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a3d      	ldr	r2, [pc, #244]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f26:	230c      	movs	r3, #12
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f36:	2307      	movs	r3, #7
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4832      	ldr	r0, [pc, #200]	; (800100c <HAL_UART_MspInit+0x140>)
 8000f42:	f000 fb55 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f46:	e058      	b.n	8000ffa <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a30      	ldr	r2, [pc, #192]	; (8001010 <HAL_UART_MspInit+0x144>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d153      	bne.n	8000ffa <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a2b      	ldr	r2, [pc, #172]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b25      	ldr	r3, [pc, #148]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a24      	ldr	r2, [pc, #144]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_UART_MspInit+0x13c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4814      	ldr	r0, [pc, #80]	; (8001014 <HAL_UART_MspInit+0x148>)
 8000fc4:	f000 fb14 	bl	80015f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <HAL_UART_MspInit+0x14c>)
 8000fe6:	f000 fb03 	bl	80015f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	2027      	movs	r0, #39	; 0x27
 8000ff0:	f000 fa35 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ff4:	2027      	movs	r0, #39	; 0x27
 8000ff6:	f000 fa4e 	bl	8001496 <HAL_NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3730      	adds	r7, #48	; 0x30
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40004400 	.word	0x40004400
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000
 8001010:	40004800 	.word	0x40004800
 8001014:	40020400 	.word	0x40020400
 8001018:	40020c00 	.word	0x40020c00

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001068:	f000 f8da 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <USART3_IRQHandler+0x10>)
 8001076:	f005 f9b7 	bl	80063e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000021c 	.word	0x2000021c

08001084 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <OTG_FS_IRQHandler+0x10>)
 800108a:	f000 ff47 	bl	8001f1c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200006b4 	.word	0x200006b4

08001098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <_sbrk+0x5c>)
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <_sbrk+0x60>)
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <_sbrk+0x64>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <_sbrk+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d207      	bcs.n	80010d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c8:	f009 fed2 	bl	800ae70 <__errno>
 80010cc:	4603      	mov	r3, r0
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	e009      	b.n	80010ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <_sbrk+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20020000 	.word	0x20020000
 80010f8:	00000400 	.word	0x00000400
 80010fc:	200002d0 	.word	0x200002d0
 8001100:	20000be0 	.word	0x20000be0

08001104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800112c:	f7ff ffea 	bl	8001104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	; (8001174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001156:	f009 fe91 	bl	800ae7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff f9f1 	bl	8000540 <main>
  bx  lr    
 800115e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001160:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001168:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800116c:	0800afb8 	.word	0x0800afb8
  ldr r2, =_sbss
 8001170:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001174:	20000bdc 	.word	0x20000bdc

08001178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_Init+0x40>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_Init+0x40>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_Init+0x40>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f94f 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f000 f808 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fcf8 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x58>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f967 	bl	80014b2 <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f000 f92f 	bl	800145e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_InitTick+0x5c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000000 	.word	0x20000000
 8001218:	20000008 	.word	0x20000008
 800121c:	20000004 	.word	0x20000004

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008
 8001244:	200002d4 	.word	0x200002d4

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200002d4 	.word	0x200002d4

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012da:	4a04      	ldr	r2, [pc, #16]	; (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4907      	ldr	r1, [pc, #28]	; (8001344 <__NVIC_EnableIRQ+0x38>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	; (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
         );
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001414:	d301      	bcc.n	800141a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001416:	2301      	movs	r3, #1
 8001418:	e00f      	b.n	800143a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <SysTick_Config+0x40>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001422:	210f      	movs	r1, #15
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f7ff ff8e 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <SysTick_Config+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <SysTick_Config+0x40>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff29 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001470:	f7ff ff3e 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 8001474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff8e 	bl	800139c <NVIC_EncodePriority>
 8001480:	4602      	mov	r2, r0
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff5d 	bl	8001348 <__NVIC_SetPriority>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff31 	bl	800130c <__NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffa2 	bl	8001404 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff feb6 	bl	8001248 <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d008      	beq.n	80014fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e052      	b.n	80015a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0216 	bic.w	r2, r2, #22
 800150a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800151a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d103      	bne.n	800152c <HAL_DMA_Abort+0x62>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0208 	bic.w	r2, r2, #8
 800153a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800154c:	e013      	b.n	8001576 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800154e:	f7ff fe7b 	bl	8001248 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b05      	cmp	r3, #5
 800155a:	d90c      	bls.n	8001576 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2220      	movs	r2, #32
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2203      	movs	r2, #3
 8001566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e015      	b.n	80015a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e4      	bne.n	800154e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	223f      	movs	r2, #63	; 0x3f
 800158a:	409a      	lsls	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d004      	beq.n	80015c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e00c      	b.n	80015e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2205      	movs	r2, #5
 80015cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	e16b      	b.n	80018e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800160c:	2201      	movs	r2, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	429a      	cmp	r2, r3
 8001626:	f040 815a 	bne.w	80018de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	2b01      	cmp	r3, #1
 8001634:	d005      	beq.n	8001642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163e:	2b02      	cmp	r3, #2
 8001640:	d130      	bne.n	80016a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001678:	2201      	movs	r2, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 0201 	and.w	r2, r3, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d017      	beq.n	80016e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d123      	bne.n	8001734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3208      	adds	r2, #8
 800172e:	69b9      	ldr	r1, [r7, #24]
 8001730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0203 	and.w	r2, r3, #3
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80b4 	beq.w	80018de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b60      	ldr	r3, [pc, #384]	; (80018fc <HAL_GPIO_Init+0x30c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a5f      	ldr	r2, [pc, #380]	; (80018fc <HAL_GPIO_Init+0x30c>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_GPIO_Init+0x30c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001792:	4a5b      	ldr	r2, [pc, #364]	; (8001900 <HAL_GPIO_Init+0x310>)
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3302      	adds	r3, #2
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a52      	ldr	r2, [pc, #328]	; (8001904 <HAL_GPIO_Init+0x314>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d02b      	beq.n	8001816 <HAL_GPIO_Init+0x226>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a51      	ldr	r2, [pc, #324]	; (8001908 <HAL_GPIO_Init+0x318>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d025      	beq.n	8001812 <HAL_GPIO_Init+0x222>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a50      	ldr	r2, [pc, #320]	; (800190c <HAL_GPIO_Init+0x31c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d01f      	beq.n	800180e <HAL_GPIO_Init+0x21e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4f      	ldr	r2, [pc, #316]	; (8001910 <HAL_GPIO_Init+0x320>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d019      	beq.n	800180a <HAL_GPIO_Init+0x21a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4e      	ldr	r2, [pc, #312]	; (8001914 <HAL_GPIO_Init+0x324>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_GPIO_Init+0x216>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4d      	ldr	r2, [pc, #308]	; (8001918 <HAL_GPIO_Init+0x328>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d00d      	beq.n	8001802 <HAL_GPIO_Init+0x212>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4c      	ldr	r2, [pc, #304]	; (800191c <HAL_GPIO_Init+0x32c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d007      	beq.n	80017fe <HAL_GPIO_Init+0x20e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4b      	ldr	r2, [pc, #300]	; (8001920 <HAL_GPIO_Init+0x330>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_GPIO_Init+0x20a>
 80017f6:	2307      	movs	r3, #7
 80017f8:	e00e      	b.n	8001818 <HAL_GPIO_Init+0x228>
 80017fa:	2308      	movs	r3, #8
 80017fc:	e00c      	b.n	8001818 <HAL_GPIO_Init+0x228>
 80017fe:	2306      	movs	r3, #6
 8001800:	e00a      	b.n	8001818 <HAL_GPIO_Init+0x228>
 8001802:	2305      	movs	r3, #5
 8001804:	e008      	b.n	8001818 <HAL_GPIO_Init+0x228>
 8001806:	2304      	movs	r3, #4
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x228>
 800180a:	2303      	movs	r3, #3
 800180c:	e004      	b.n	8001818 <HAL_GPIO_Init+0x228>
 800180e:	2302      	movs	r3, #2
 8001810:	e002      	b.n	8001818 <HAL_GPIO_Init+0x228>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_GPIO_Init+0x228>
 8001816:	2300      	movs	r3, #0
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	f002 0203 	and.w	r2, r2, #3
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	4093      	lsls	r3, r2
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001828:	4935      	ldr	r1, [pc, #212]	; (8001900 <HAL_GPIO_Init+0x310>)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_GPIO_Init+0x334>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800185a:	4a32      	ldr	r2, [pc, #200]	; (8001924 <HAL_GPIO_Init+0x334>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_GPIO_Init+0x334>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001884:	4a27      	ldr	r2, [pc, #156]	; (8001924 <HAL_GPIO_Init+0x334>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_GPIO_Init+0x334>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ae:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <HAL_GPIO_Init+0x334>)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_GPIO_Init+0x334>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018d8:	4a12      	ldr	r2, [pc, #72]	; (8001924 <HAL_GPIO_Init+0x334>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3301      	adds	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b0f      	cmp	r3, #15
 80018e8:	f67f ae90 	bls.w	800160c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40013800 	.word	0x40013800
 8001904:	40020000 	.word	0x40020000
 8001908:	40020400 	.word	0x40020400
 800190c:	40020800 	.word	0x40020800
 8001910:	40020c00 	.word	0x40020c00
 8001914:	40021000 	.word	0x40021000
 8001918:	40021400 	.word	0x40021400
 800191c:	40021800 	.word	0x40021800
 8001920:	40021c00 	.word	0x40021c00
 8001924:	40013c00 	.word	0x40013c00

08001928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
 8001934:	4613      	mov	r3, r2
 8001936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001938:	787b      	ldrb	r3, [r7, #1]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001944:	e003      	b.n	800194e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	041a      	lsls	r2, r3, #16
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	619a      	str	r2, [r3, #24]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af02      	add	r7, sp, #8
 8001960:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e059      	b.n	8001a20 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f008 fee0 	bl	800a74c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2203      	movs	r2, #3
 8001990:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800199a:	d102      	bne.n	80019a2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 fce9 	bl	800737e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7c1a      	ldrb	r2, [r3, #16]
 80019b4:	f88d 2000 	strb.w	r2, [sp]
 80019b8:	3304      	adds	r3, #4
 80019ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019bc:	f005 fc6a 	bl	8007294 <USB_CoreInit>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e026      	b.n	8001a20 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2101      	movs	r1, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f005 fce1 	bl	80073a0 <USB_SetCurrentMode>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e017      	b.n	8001a20 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7c1a      	ldrb	r2, [r3, #16]
 80019f8:	f88d 2000 	strb.w	r2, [sp]
 80019fc:	3304      	adds	r3, #4
 80019fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a00:	f005 fe84 	bl	800770c <USB_HostInit>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e004      	b.n	8001a20 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b08b      	sub	sp, #44	; 0x2c
 8001a2c:	af04      	add	r7, sp, #16
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	4608      	mov	r0, r1
 8001a32:	4611      	mov	r1, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	70fb      	strb	r3, [r7, #3]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70bb      	strb	r3, [r7, #2]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001a42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a44:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_HCD_HC_Init+0x2c>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e09d      	b.n	8001b90 <HAL_HCD_HC_Init+0x168>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3319      	adds	r3, #25
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3314      	adds	r3, #20
 8001a80:	787a      	ldrb	r2, [r7, #1]
 8001a82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	3315      	adds	r3, #21
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3326      	adds	r3, #38	; 0x26
 8001aa8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001aac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	78bb      	ldrb	r3, [r7, #2]
 8001ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab6:	b2d8      	uxtb	r0, r3
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3316      	adds	r3, #22
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fbc8 	bl	8002264 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001ad4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da0a      	bge.n	8001af2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3317      	adds	r3, #23
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	e009      	b.n	8001b06 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001af2:	78fa      	ldrb	r2, [r7, #3]
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	3317      	adds	r3, #23
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f005 ff62 	bl	80079d4 <USB_GetHostSpeed>
 8001b10:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001b12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d10b      	bne.n	8001b32 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_HCD_HC_Init+0x10a>
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d104      	bne.n	8001b32 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2bbc      	cmp	r3, #188	; 0xbc
 8001b2c:	d901      	bls.n	8001b32 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001b2e:	23bc      	movs	r3, #188	; 0xbc
 8001b30:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	3318      	adds	r3, #24
 8001b42:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001b46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	b298      	uxth	r0, r3
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	3328      	adds	r3, #40	; 0x28
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	787c      	ldrb	r4, [r7, #1]
 8001b6a:	78ba      	ldrb	r2, [r7, #2]
 8001b6c:	78f9      	ldrb	r1, [r7, #3]
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4623      	mov	r3, r4
 8001b7e:	f005 ff51 	bl	8007a24 <USB_HC_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}

08001b98 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_HCD_HC_Halt+0x1e>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e00f      	b.n	8001bd6 <HAL_HCD_HC_Halt+0x3e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f006 fae3 	bl	8008192 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	4608      	mov	r0, r1
 8001bea:	4611      	mov	r1, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	70fb      	strb	r3, [r7, #3]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	70bb      	strb	r3, [r7, #2]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3317      	adds	r3, #23
 8001c0a:	78ba      	ldrb	r2, [r7, #2]
 8001c0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3326      	adds	r3, #38	; 0x26
 8001c1e:	787a      	ldrb	r2, [r7, #1]
 8001c20:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c22:	7c3b      	ldrb	r3, [r7, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d114      	bne.n	8001c52 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	332a      	adds	r3, #42	; 0x2a
 8001c38:	2203      	movs	r2, #3
 8001c3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3319      	adds	r3, #25
 8001c4c:	7f3a      	ldrb	r2, [r7, #28]
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	e009      	b.n	8001c66 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	332a      	adds	r3, #42	; 0x2a
 8001c62:	2202      	movs	r2, #2
 8001c64:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c66:	787b      	ldrb	r3, [r7, #1]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	f200 8102 	bhi.w	8001e72 <HAL_HCD_HC_SubmitRequest+0x292>
 8001c6e:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001e5d 	.word	0x08001e5d
 8001c7c:	08001d49 	.word	0x08001d49
 8001c80:	08001dd3 	.word	0x08001dd3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001c84:	7c3b      	ldrb	r3, [r7, #16]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	f040 80f5 	bne.w	8001e76 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001c8c:	78bb      	ldrb	r3, [r7, #2]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d12d      	bne.n	8001cee <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001c92:	8b3b      	ldrh	r3, [r7, #24]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	333d      	adds	r3, #61	; 0x3d
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	333d      	adds	r3, #61	; 0x3d
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	332a      	adds	r3, #42	; 0x2a
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001cd6:	e0ce      	b.n	8001e76 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	332a      	adds	r3, #42	; 0x2a
 8001ce8:	2202      	movs	r2, #2
 8001cea:	701a      	strb	r2, [r3, #0]
      break;
 8001cec:	e0c3      	b.n	8001e76 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	331a      	adds	r3, #26
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	f040 80b8 	bne.w	8001e76 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d06:	78fa      	ldrb	r2, [r7, #3]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	333c      	adds	r3, #60	; 0x3c
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	1a9b      	subs	r3, r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	332a      	adds	r3, #42	; 0x2a
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
      break;
 8001d30:	e0a1      	b.n	8001e76 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	332a      	adds	r3, #42	; 0x2a
 8001d42:	2202      	movs	r2, #2
 8001d44:	701a      	strb	r2, [r3, #0]
      break;
 8001d46:	e096      	b.n	8001e76 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d48:	78bb      	ldrb	r3, [r7, #2]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d120      	bne.n	8001d90 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	333d      	adds	r3, #61	; 0x3d
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10a      	bne.n	8001d7a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	332a      	adds	r3, #42	; 0x2a
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d78:	e07e      	b.n	8001e78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	332a      	adds	r3, #42	; 0x2a
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	701a      	strb	r2, [r3, #0]
      break;
 8001d8e:	e073      	b.n	8001e78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	333c      	adds	r3, #60	; 0x3c
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10a      	bne.n	8001dbc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	1a9b      	subs	r3, r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	332a      	adds	r3, #42	; 0x2a
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
      break;
 8001dba:	e05d      	b.n	8001e78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	332a      	adds	r3, #42	; 0x2a
 8001dcc:	2202      	movs	r2, #2
 8001dce:	701a      	strb	r2, [r3, #0]
      break;
 8001dd0:	e052      	b.n	8001e78 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001dd2:	78bb      	ldrb	r3, [r7, #2]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d120      	bne.n	8001e1a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	333d      	adds	r3, #61	; 0x3d
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	332a      	adds	r3, #42	; 0x2a
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e02:	e039      	b.n	8001e78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	332a      	adds	r3, #42	; 0x2a
 8001e14:	2202      	movs	r2, #2
 8001e16:	701a      	strb	r2, [r3, #0]
      break;
 8001e18:	e02e      	b.n	8001e78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	333c      	adds	r3, #60	; 0x3c
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10a      	bne.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	332a      	adds	r3, #42	; 0x2a
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
      break;
 8001e44:	e018      	b.n	8001e78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	332a      	adds	r3, #42	; 0x2a
 8001e56:	2202      	movs	r2, #2
 8001e58:	701a      	strb	r2, [r3, #0]
      break;
 8001e5a:	e00d      	b.n	8001e78 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	332a      	adds	r3, #42	; 0x2a
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
      break;
 8001e70:	e002      	b.n	8001e78 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001e72:	bf00      	nop
 8001e74:	e000      	b.n	8001e78 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001e76:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	332c      	adds	r3, #44	; 0x2c
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	8b39      	ldrh	r1, [r7, #24]
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4403      	add	r3, r0
 8001e9c:	3334      	adds	r3, #52	; 0x34
 8001e9e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ea0:	78fa      	ldrb	r2, [r7, #3]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	334c      	adds	r3, #76	; 0x4c
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001eb4:	78fa      	ldrb	r2, [r7, #3]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3338      	adds	r3, #56	; 0x38
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3315      	adds	r3, #21
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	334d      	adds	r3, #77	; 0x4d
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	3310      	adds	r3, #16
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	1d19      	adds	r1, r3, #4
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	799b      	ldrb	r3, [r3, #6]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f005 feb6 	bl	8007c7c <USB_HC_StartXfer>
 8001f10:	4603      	mov	r3, r0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop

08001f1c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f005 fbaa 	bl	800768c <USB_GetMode>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	f040 80fb 	bne.w	8002136 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f005 fb6d 	bl	8007624 <USB_ReadInterrupts>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80f1 	beq.w	8002134 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f005 fb64 	bl	8007624 <USB_ReadInterrupts>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f66:	d104      	bne.n	8001f72 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f005 fb54 	bl	8007624 <USB_ReadInterrupts>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f86:	d104      	bne.n	8001f92 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f005 fb44 	bl	8007624 <USB_ReadInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fa6:	d104      	bne.n	8001fb2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f005 fb34 	bl	8007624 <USB_ReadInterrupts>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d103      	bne.n	8001fce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f005 fb26 	bl	8007624 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fe2:	d120      	bne.n	8002026 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d113      	bne.n	8002026 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ffe:	2110      	movs	r1, #16
 8002000:	6938      	ldr	r0, [r7, #16]
 8002002:	f005 fa19 	bl	8007438 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002006:	6938      	ldr	r0, [r7, #16]
 8002008:	f005 fa48 	bl	800749c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7a5b      	ldrb	r3, [r3, #9]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d105      	bne.n	8002020 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	4618      	mov	r0, r3
 800201c:	f005 fc3a 	bl	8007894 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f008 fc11 	bl	800a848 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f005 fafa 	bl	8007624 <USB_ReadInterrupts>
 8002030:	4603      	mov	r3, r0
 8002032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002036:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203a:	d102      	bne.n	8002042 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f001 fd33 	bl	8003aa8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f005 faec 	bl	8007624 <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b08      	cmp	r3, #8
 8002054:	d106      	bne.n	8002064 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f008 fbda 	bl	800a810 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2208      	movs	r2, #8
 8002062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f005 fadb 	bl	8007624 <USB_ReadInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002078:	d139      	bne.n	80020ee <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f006 f876 	bl	8008170 <USB_HC_ReadInterrupt>
 8002084:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e025      	b.n	80020d8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d018      	beq.n	80020d2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b6:	d106      	bne.n	80020c6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f905 	bl	80022ce <HCD_HC_IN_IRQHandler>
 80020c4:	e005      	b.n	80020d2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	4619      	mov	r1, r3
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 ff67 	bl	8002fa0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	795b      	ldrb	r3, [r3, #5]
 80020dc:	461a      	mov	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d3d3      	bcc.n	800208c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f005 fa96 	bl	8007624 <USB_ReadInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b10      	cmp	r3, #16
 8002100:	d101      	bne.n	8002106 <HAL_HCD_IRQHandler+0x1ea>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_HCD_IRQHandler+0x1ec>
 8002106:	2300      	movs	r3, #0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d014      	beq.n	8002136 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0210 	bic.w	r2, r2, #16
 800211a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f001 fbe4 	bl	80038ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0210 	orr.w	r2, r2, #16
 8002130:	619a      	str	r2, [r3, #24]
 8002132:	e000      	b.n	8002136 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002134:	bf00      	nop
    }
  }
}
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_HCD_Start+0x16>
 800214e:	2302      	movs	r3, #2
 8002150:	e013      	b.n	800217a <HAL_HCD_Start+0x3e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2101      	movs	r1, #1
 8002160:	4618      	mov	r0, r3
 8002162:	f005 fbfe 	bl	8007962 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f005 f8f6 	bl	800735c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_HCD_Stop+0x16>
 8002194:	2302      	movs	r3, #2
 8002196:	e00d      	b.n	80021b4 <HAL_HCD_Stop+0x32>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f006 f951 	bl	800844c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f005 fba0 	bl	800790e <USB_ResetPort>
 80021ce:	4603      	mov	r3, r0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	334c      	adds	r3, #76	; 0x4c
 80021f4:	781b      	ldrb	r3, [r3, #0]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	3338      	adds	r3, #56	; 0x38
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f005 fbe2 	bl	8007a02 <USB_GetCurrentFrame>
 800223e:	4603      	mov	r3, r0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f005 fbbd 	bl	80079d4 <USB_GetHostSpeed>
 800225a:	4603      	mov	r3, r0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	331a      	adds	r3, #26
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	331b      	adds	r3, #27
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3325      	adds	r3, #37	; 0x25
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	3324      	adds	r3, #36	; 0x24
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f005 f9ac 	bl	800764a <USB_ReadChInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d11a      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	461a      	mov	r2, r3
 800230a:	2304      	movs	r3, #4
 800230c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	334d      	adds	r3, #77	; 0x4d
 800231e:	2207      	movs	r2, #7
 8002320:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f005 ff31 	bl	8008192 <USB_HC_Halt>
 8002330:	e09e      	b.n	8002470 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f005 f985 	bl	800764a <USB_ReadChInterrupts>
 8002340:	4603      	mov	r3, r0
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234a:	d11b      	bne.n	8002384 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	461a      	mov	r2, r3
 800235a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	334d      	adds	r3, #77	; 0x4d
 8002370:	2208      	movs	r2, #8
 8002372:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f005 ff08 	bl	8008192 <USB_HC_Halt>
 8002382:	e075      	b.n	8002470 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f005 f95c 	bl	800764a <USB_ReadChInterrupts>
 8002392:	4603      	mov	r3, r0
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b08      	cmp	r3, #8
 800239a:	d11a      	bne.n	80023d2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	461a      	mov	r2, r3
 80023aa:	2308      	movs	r3, #8
 80023ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	334d      	adds	r3, #77	; 0x4d
 80023be:	2206      	movs	r2, #6
 80023c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f005 fee1 	bl	8008192 <USB_HC_Halt>
 80023d0:	e04e      	b.n	8002470 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 f935 	bl	800764a <USB_ReadChInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ea:	d11b      	bne.n	8002424 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	461a      	mov	r2, r3
 80023fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	334d      	adds	r3, #77	; 0x4d
 8002410:	2209      	movs	r2, #9
 8002412:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f005 feb8 	bl	8008192 <USB_HC_Halt>
 8002422:	e025      	b.n	8002470 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f005 f90c 	bl	800764a <USB_ReadChInterrupts>
 8002432:	4603      	mov	r3, r0
 8002434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002438:	2b80      	cmp	r3, #128	; 0x80
 800243a:	d119      	bne.n	8002470 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	461a      	mov	r2, r3
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800244e:	78fa      	ldrb	r2, [r7, #3]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	334d      	adds	r3, #77	; 0x4d
 800245e:	2207      	movs	r2, #7
 8002460:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f005 fe91 	bl	8008192 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f005 f8e6 	bl	800764a <USB_ReadChInterrupts>
 800247e:	4603      	mov	r3, r0
 8002480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002488:	d112      	bne.n	80024b0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f005 fe7d 	bl	8008192 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	461a      	mov	r2, r3
 80024a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024aa:	6093      	str	r3, [r2, #8]
 80024ac:	f000 bd75 	b.w	8002f9a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f005 f8c6 	bl	800764a <USB_ReadChInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	f040 8128 	bne.w	800271a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	461a      	mov	r2, r3
 80024d8:	2320      	movs	r3, #32
 80024da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	331b      	adds	r3, #27
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d119      	bne.n	8002526 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	331b      	adds	r3, #27
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	0151      	lsls	r1, r2, #5
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	440a      	add	r2, r1
 800251c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002524:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	799b      	ldrb	r3, [r3, #6]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01b      	beq.n	8002566 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3330      	adds	r3, #48	; 0x30
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	1ac9      	subs	r1, r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4403      	add	r3, r0
 8002562:	3338      	adds	r3, #56	; 0x38
 8002564:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	334d      	adds	r3, #77	; 0x4d
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	3344      	adds	r3, #68	; 0x44
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	461a      	mov	r2, r3
 800259c:	2301      	movs	r3, #1
 800259e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3326      	adds	r3, #38	; 0x26
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3326      	adds	r3, #38	; 0x26
 80025c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d110      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f005 fddc 	bl	8008192 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	461a      	mov	r2, r3
 80025e8:	2310      	movs	r3, #16
 80025ea:	6093      	str	r3, [r2, #8]
 80025ec:	e03d      	b.n	800266a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	3326      	adds	r3, #38	; 0x26
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d00a      	beq.n	800261a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3326      	adds	r3, #38	; 0x26
 8002614:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002616:	2b01      	cmp	r3, #1
 8002618:	d127      	bne.n	800266a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	0151      	lsls	r1, r2, #5
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	440a      	add	r2, r1
 8002630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002634:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002638:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	334c      	adds	r3, #76	; 0x4c
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	334c      	adds	r3, #76	; 0x4c
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f008 f8fd 	bl	800a864 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	799b      	ldrb	r3, [r3, #6]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d13b      	bne.n	80026ea <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	3338      	adds	r3, #56	; 0x38
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4403      	add	r3, r0
 8002692:	3328      	adds	r3, #40	; 0x28
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	440b      	add	r3, r1
 8002698:	1e59      	subs	r1, r3, #1
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4403      	add	r3, r0
 80026a8:	3328      	adds	r3, #40	; 0x28
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8470 	beq.w	8002f9a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	333c      	adds	r3, #60	; 0x3c
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	f083 0301 	eor.w	r3, r3, #1
 80026d2:	b2d8      	uxtb	r0, r3
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	333c      	adds	r3, #60	; 0x3c
 80026e2:	4602      	mov	r2, r0
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	f000 bc58 	b.w	8002f9a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	333c      	adds	r3, #60	; 0x3c
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	f083 0301 	eor.w	r3, r3, #1
 8002702:	b2d8      	uxtb	r0, r3
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	333c      	adds	r3, #60	; 0x3c
 8002712:	4602      	mov	r2, r0
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	f000 bc40 	b.w	8002f9a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f004 ff91 	bl	800764a <USB_ReadChInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b20      	cmp	r3, #32
 8002730:	d131      	bne.n	8002796 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	461a      	mov	r2, r3
 8002740:	2320      	movs	r3, #32
 8002742:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	331a      	adds	r3, #26
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	f040 841f 	bne.w	8002f9a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	331b      	adds	r3, #27
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	334d      	adds	r3, #77	; 0x4d
 8002780:	2203      	movs	r2, #3
 8002782:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f005 fd00 	bl	8008192 <USB_HC_Halt>
 8002792:	f000 bc02 	b.w	8002f9a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 ff53 	bl	800764a <USB_ReadChInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	f040 8305 	bne.w	8002dba <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	461a      	mov	r2, r3
 80027be:	2302      	movs	r3, #2
 80027c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	334d      	adds	r3, #77	; 0x4d
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d114      	bne.n	8002802 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	334d      	adds	r3, #77	; 0x4d
 80027e8:	2202      	movs	r2, #2
 80027ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	334c      	adds	r3, #76	; 0x4c
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	e2cc      	b.n	8002d9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	334d      	adds	r3, #77	; 0x4d
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b06      	cmp	r3, #6
 8002816:	d114      	bne.n	8002842 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	334d      	adds	r3, #77	; 0x4d
 8002828:	2202      	movs	r2, #2
 800282a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	334c      	adds	r3, #76	; 0x4c
 800283c:	2205      	movs	r2, #5
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e2ac      	b.n	8002d9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	334d      	adds	r3, #77	; 0x4d
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b07      	cmp	r3, #7
 8002856:	d00b      	beq.n	8002870 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	334d      	adds	r3, #77	; 0x4d
 8002868:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800286a:	2b09      	cmp	r3, #9
 800286c:	f040 80a6 	bne.w	80029bc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	334d      	adds	r3, #77	; 0x4d
 8002880:	2202      	movs	r2, #2
 8002882:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3344      	adds	r3, #68	; 0x44
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	1c59      	adds	r1, r3, #1
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4403      	add	r3, r0
 80028a4:	3344      	adds	r3, #68	; 0x44
 80028a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3344      	adds	r3, #68	; 0x44
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d943      	bls.n	8002946 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3344      	adds	r3, #68	; 0x44
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	331a      	adds	r3, #26
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d123      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	331b      	adds	r3, #27
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	331c      	adds	r3, #28
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	0151      	lsls	r1, r2, #5
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	440a      	add	r2, r1
 8002926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334c      	adds	r3, #76	; 0x4c
 8002940:	2204      	movs	r2, #4
 8002942:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002944:	e229      	b.n	8002d9a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	334c      	adds	r3, #76	; 0x4c
 8002956:	2202      	movs	r2, #2
 8002958:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3326      	adds	r3, #38	; 0x26
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00b      	beq.n	8002988 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	3326      	adds	r3, #38	; 0x26
 8002980:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002982:	2b02      	cmp	r3, #2
 8002984:	f040 8209 	bne.w	8002d9a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800299e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	461a      	mov	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029ba:	e1ee      	b.n	8002d9a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334d      	adds	r3, #77	; 0x4d
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b05      	cmp	r3, #5
 80029d0:	f040 80c8 	bne.w	8002b64 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	334d      	adds	r3, #77	; 0x4d
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	331b      	adds	r3, #27
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	f040 81ce 	bne.w	8002d9c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3326      	adds	r3, #38	; 0x26
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d16b      	bne.n	8002aee <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3348      	adds	r3, #72	; 0x48
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	1c59      	adds	r1, r3, #1
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4403      	add	r3, r0
 8002a36:	3348      	adds	r3, #72	; 0x48
 8002a38:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	3348      	adds	r3, #72	; 0x48
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d943      	bls.n	8002ad8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3348      	adds	r3, #72	; 0x48
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	331b      	adds	r3, #27
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	3344      	adds	r3, #68	; 0x44
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d809      	bhi.n	8002aa2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	331c      	adds	r3, #28
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	0151      	lsls	r1, r2, #5
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	440a      	add	r2, r1
 8002ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	334c      	adds	r3, #76	; 0x4c
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e014      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334c      	adds	r3, #76	; 0x4c
 8002ae8:	2202      	movs	r2, #2
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e009      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	334c      	adds	r3, #76	; 0x4c
 8002afe:	2202      	movs	r2, #2
 8002b00:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3326      	adds	r3, #38	; 0x26
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3326      	adds	r3, #38	; 0x26
 8002b28:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	f040 8136 	bne.w	8002d9c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b46:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b4e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e11b      	b.n	8002d9c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	334d      	adds	r3, #77	; 0x4d
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	f040 8081 	bne.w	8002c7e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	334d      	adds	r3, #77	; 0x4d
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	331b      	adds	r3, #27
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	f040 80fa 	bne.w	8002d9c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	334c      	adds	r3, #76	; 0x4c
 8002bb8:	2202      	movs	r2, #2
 8002bba:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	0151      	lsls	r1, r2, #5
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	440a      	add	r2, r1
 8002bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bda:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	0151      	lsls	r1, r2, #5
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	440a      	add	r2, r1
 8002bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	0151      	lsls	r1, r2, #5
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	440a      	add	r2, r1
 8002c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c16:	f023 0320 	bic.w	r3, r3, #32
 8002c1a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3326      	adds	r3, #38	; 0x26
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3326      	adds	r3, #38	; 0x26
 8002c42:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	f040 80a9 	bne.w	8002d9c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c60:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c68:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	e08e      	b.n	8002d9c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	334d      	adds	r3, #77	; 0x4d
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d143      	bne.n	8002d1c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	334d      	adds	r3, #77	; 0x4d
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	334c      	adds	r3, #76	; 0x4c
 8002cb8:	2202      	movs	r2, #2
 8002cba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	3326      	adds	r3, #38	; 0x26
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3326      	adds	r3, #38	; 0x26
 8002ce2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d159      	bne.n	8002d9c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cfe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d06:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	461a      	mov	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e03f      	b.n	8002d9c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	334d      	adds	r3, #77	; 0x4d
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d126      	bne.n	8002d80 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	334d      	adds	r3, #77	; 0x4d
 8002d42:	2202      	movs	r2, #2
 8002d44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3344      	adds	r3, #68	; 0x44
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	1c59      	adds	r1, r3, #1
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4403      	add	r3, r0
 8002d66:	3344      	adds	r3, #68	; 0x44
 8002d68:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	334c      	adds	r3, #76	; 0x4c
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e00d      	b.n	8002d9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	334d      	adds	r3, #77	; 0x4d
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	f000 8100 	beq.w	8002f98 <HCD_HC_IN_IRQHandler+0xcca>
 8002d98:	e000      	b.n	8002d9c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d9a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	334c      	adds	r3, #76	; 0x4c
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f007 fd56 	bl	800a864 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002db8:	e0ef      	b.n	8002f9a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 fc41 	bl	800764a <USB_ReadChInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d12f      	bne.n	8002e32 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dde:	461a      	mov	r2, r3
 8002de0:	2340      	movs	r3, #64	; 0x40
 8002de2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	334d      	adds	r3, #77	; 0x4d
 8002df4:	2205      	movs	r2, #5
 8002df6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	331a      	adds	r3, #26
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	3344      	adds	r3, #68	; 0x44
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f005 f9b1 	bl	8008192 <USB_HC_Halt>
 8002e30:	e0b3      	b.n	8002f9a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f004 fc05 	bl	800764a <USB_ReadChInterrupts>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	f040 80a7 	bne.w	8002f9a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3326      	adds	r3, #38	; 0x26
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d11b      	bne.n	8002e9a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	3344      	adds	r3, #68	; 0x44
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	334d      	adds	r3, #77	; 0x4d
 8002e86:	2204      	movs	r2, #4
 8002e88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f005 f97d 	bl	8008192 <USB_HC_Halt>
 8002e98:	e03f      	b.n	8002f1a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3326      	adds	r3, #38	; 0x26
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3326      	adds	r3, #38	; 0x26
 8002ec0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d129      	bne.n	8002f1a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3344      	adds	r3, #68	; 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	799b      	ldrb	r3, [r3, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HCD_HC_IN_IRQHandler+0xc2a>
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	331b      	adds	r3, #27
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d110      	bne.n	8002f1a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	334d      	adds	r3, #77	; 0x4d
 8002f08:	2204      	movs	r2, #4
 8002f0a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f005 f93c 	bl	8008192 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	331b      	adds	r3, #27
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d129      	bne.n	8002f84 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	331b      	adds	r3, #27
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	0151      	lsls	r1, r2, #5
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	440a      	add	r2, r1
 8002f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f62:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	0151      	lsls	r1, r2, #5
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	440a      	add	r2, r1
 8002f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f7e:	f043 0320 	orr.w	r3, r3, #32
 8002f82:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f90:	461a      	mov	r2, r3
 8002f92:	2310      	movs	r3, #16
 8002f94:	6093      	str	r3, [r2, #8]
 8002f96:	e000      	b.n	8002f9a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002f98:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 fb43 	bl	800764a <USB_ReadChInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d11b      	bne.n	8003006 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2304      	movs	r3, #4
 8002fde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	; 0x4d
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f005 f8c8 	bl	8008192 <USB_HC_Halt>
 8003002:	f000 bc6f 	b.w	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f004 fb1b 	bl	800764a <USB_ReadChInterrupts>
 8003014:	4603      	mov	r3, r0
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b20      	cmp	r3, #32
 800301c:	f040 8082 	bne.w	8003124 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2320      	movs	r3, #32
 8003030:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3319      	adds	r3, #25
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d124      	bne.n	8003092 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3319      	adds	r3, #25
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	334c      	adds	r3, #76	; 0x4c
 800306c:	2202      	movs	r2, #2
 800306e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	334d      	adds	r3, #77	; 0x4d
 8003080:	2203      	movs	r2, #3
 8003082:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f005 f880 	bl	8008192 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	331a      	adds	r3, #26
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	f040 841d 	bne.w	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	331b      	adds	r3, #27
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f040 8411 	bne.w	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	3326      	adds	r3, #38	; 0x26
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d009      	beq.n	80030ec <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	331b      	adds	r3, #27
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	334d      	adds	r3, #77	; 0x4d
 80030fc:	2203      	movs	r2, #3
 80030fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f005 f842 	bl	8008192 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3344      	adds	r3, #68	; 0x44
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e3df      	b.n	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f004 fa8c 	bl	800764a <USB_ReadChInterrupts>
 8003132:	4603      	mov	r3, r0
 8003134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800313c:	d111      	bne.n	8003162 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314a:	461a      	mov	r2, r3
 800314c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003150:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f005 f819 	bl	8008192 <USB_HC_Halt>
 8003160:	e3c0      	b.n	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f004 fa6d 	bl	800764a <USB_ReadChInterrupts>
 8003170:	4603      	mov	r3, r0
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d168      	bne.n	800324c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	3344      	adds	r3, #68	; 0x44
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f004 fa57 	bl	800764a <USB_ReadChInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b40      	cmp	r3, #64	; 0x40
 80031a4:	d112      	bne.n	80031cc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3319      	adds	r3, #25
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	461a      	mov	r2, r3
 80031c8:	2340      	movs	r3, #64	; 0x40
 80031ca:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	331b      	adds	r3, #27
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d019      	beq.n	8003216 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	331b      	adds	r3, #27
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	0151      	lsls	r1, r2, #5
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	440a      	add	r2, r1
 800320c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003214:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003222:	461a      	mov	r2, r3
 8003224:	2301      	movs	r3, #1
 8003226:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	334d      	adds	r3, #77	; 0x4d
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f004 ffa4 	bl	8008192 <USB_HC_Halt>
 800324a:	e34b      	b.n	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f004 f9f8 	bl	800764a <USB_ReadChInterrupts>
 800325a:	4603      	mov	r3, r0
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	d139      	bne.n	80032d8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	334d      	adds	r3, #77	; 0x4d
 8003274:	2205      	movs	r2, #5
 8003276:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	331a      	adds	r3, #26
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	3319      	adds	r3, #25
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	3344      	adds	r3, #68	; 0x44
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 ff67 	bl	8008192 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	461a      	mov	r2, r3
 80032d2:	2340      	movs	r3, #64	; 0x40
 80032d4:	6093      	str	r3, [r2, #8]
 80032d6:	e305      	b.n	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f004 f9b2 	bl	800764a <USB_ReadChInterrupts>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d11a      	bne.n	8003326 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fc:	461a      	mov	r2, r3
 80032fe:	2308      	movs	r3, #8
 8003300:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	334d      	adds	r3, #77	; 0x4d
 8003312:	2206      	movs	r2, #6
 8003314:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f004 ff37 	bl	8008192 <USB_HC_Halt>
 8003324:	e2de      	b.n	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f004 f98b 	bl	800764a <USB_ReadChInterrupts>
 8003334:	4603      	mov	r3, r0
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b10      	cmp	r3, #16
 800333c:	d144      	bne.n	80033c8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	3344      	adds	r3, #68	; 0x44
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334d      	adds	r3, #77	; 0x4d
 8003362:	2204      	movs	r2, #4
 8003364:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	3319      	adds	r3, #25
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d114      	bne.n	80033a6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3318      	adds	r3, #24
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3319      	adds	r3, #25
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f004 feef 	bl	8008192 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	461a      	mov	r2, r3
 80033c2:	2310      	movs	r3, #16
 80033c4:	6093      	str	r3, [r2, #8]
 80033c6:	e28d      	b.n	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 f93a 	bl	800764a <USB_ReadChInterrupts>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d169      	bne.n	80034b4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	799b      	ldrb	r3, [r3, #6]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d111      	bne.n	800340c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334d      	adds	r3, #77	; 0x4d
 80033f8:	2207      	movs	r2, #7
 80033fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f004 fec4 	bl	8008192 <USB_HC_Halt>
 800340a:	e049      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	3344      	adds	r3, #68	; 0x44
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	1c59      	adds	r1, r3, #1
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4403      	add	r3, r0
 800342c:	3344      	adds	r3, #68	; 0x44
 800342e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3344      	adds	r3, #68	; 0x44
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d922      	bls.n	800348c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	3344      	adds	r3, #68	; 0x44
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334c      	adds	r3, #76	; 0x4c
 800346a:	2204      	movs	r2, #4
 800346c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	334c      	adds	r3, #76	; 0x4c
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f007 f9ed 	bl	800a864 <HAL_HCD_HC_NotifyURBChange_Callback>
 800348a:	e009      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	334c      	adds	r3, #76	; 0x4c
 800349c:	2202      	movs	r2, #2
 800349e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	461a      	mov	r2, r3
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	6093      	str	r3, [r2, #8]
 80034b2:	e217      	b.n	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 f8c4 	bl	800764a <USB_ReadChInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034cc:	d11b      	bne.n	8003506 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	334d      	adds	r3, #77	; 0x4d
 80034de:	2209      	movs	r2, #9
 80034e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	4611      	mov	r1, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f004 fe51 	bl	8008192 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	461a      	mov	r2, r3
 80034fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003502:	6093      	str	r3, [r2, #8]
 8003504:	e1ee      	b.n	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f004 f89b 	bl	800764a <USB_ReadChInterrupts>
 8003514:	4603      	mov	r3, r0
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b02      	cmp	r3, #2
 800351c:	f040 81df 	bne.w	80038de <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352c:	461a      	mov	r2, r3
 800352e:	2302      	movs	r3, #2
 8003530:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	334d      	adds	r3, #77	; 0x4d
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	f040 8093 	bne.w	8003670 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	334d      	adds	r3, #77	; 0x4d
 800355a:	2202      	movs	r2, #2
 800355c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	334c      	adds	r3, #76	; 0x4c
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3326      	adds	r3, #38	; 0x26
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d00b      	beq.n	80035a0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3326      	adds	r3, #38	; 0x26
 8003598:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800359a:	2b03      	cmp	r3, #3
 800359c:	f040 8190 	bne.w	80038c0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	799b      	ldrb	r3, [r3, #6]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d115      	bne.n	80035d4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	333d      	adds	r3, #61	; 0x3d
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	f083 0301 	eor.w	r3, r3, #1
 80035c0:	b2d8      	uxtb	r0, r3
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	333d      	adds	r3, #61	; 0x3d
 80035d0:	4602      	mov	r2, r0
 80035d2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	799b      	ldrb	r3, [r3, #6]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 8171 	bne.w	80038c0 <HCD_HC_OUT_IRQHandler+0x920>
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3334      	adds	r3, #52	; 0x34
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8165 	beq.w	80038c0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3334      	adds	r3, #52	; 0x34
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4403      	add	r3, r0
 8003616:	3328      	adds	r3, #40	; 0x28
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	440b      	add	r3, r1
 800361c:	1e59      	subs	r1, r3, #1
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4403      	add	r3, r0
 800362c:	3328      	adds	r3, #40	; 0x28
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	fbb1 f3f3 	udiv	r3, r1, r3
 8003634:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 813f 	beq.w	80038c0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	333d      	adds	r3, #61	; 0x3d
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	f083 0301 	eor.w	r3, r3, #1
 800365a:	b2d8      	uxtb	r0, r3
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	333d      	adds	r3, #61	; 0x3d
 800366a:	4602      	mov	r2, r0
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	e127      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	334d      	adds	r3, #77	; 0x4d
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d120      	bne.n	80036c8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	334d      	adds	r3, #77	; 0x4d
 8003696:	2202      	movs	r2, #2
 8003698:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	331b      	adds	r3, #27
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	f040 8107 	bne.w	80038c0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	334c      	adds	r3, #76	; 0x4c
 80036c2:	2202      	movs	r2, #2
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e0fb      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	334d      	adds	r3, #77	; 0x4d
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d13a      	bne.n	8003754 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	334d      	adds	r3, #77	; 0x4d
 80036ee:	2202      	movs	r2, #2
 80036f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334c      	adds	r3, #76	; 0x4c
 8003702:	2202      	movs	r2, #2
 8003704:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	331b      	adds	r3, #27
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	f040 80d1 	bne.w	80038c0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	331b      	adds	r3, #27
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	0151      	lsls	r1, r2, #5
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	440a      	add	r2, r1
 8003748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800374c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003750:	6053      	str	r3, [r2, #4]
 8003752:	e0b5      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	334d      	adds	r3, #77	; 0x4d
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b05      	cmp	r3, #5
 8003768:	d114      	bne.n	8003794 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	334d      	adds	r3, #77	; 0x4d
 800377a:	2202      	movs	r2, #2
 800377c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	334c      	adds	r3, #76	; 0x4c
 800378e:	2202      	movs	r2, #2
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e095      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334d      	adds	r3, #77	; 0x4d
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d114      	bne.n	80037d4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	334d      	adds	r3, #77	; 0x4d
 80037ba:	2202      	movs	r2, #2
 80037bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	334c      	adds	r3, #76	; 0x4c
 80037ce:	2205      	movs	r2, #5
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	e075      	b.n	80038c0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	334d      	adds	r3, #77	; 0x4d
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b07      	cmp	r3, #7
 80037e8:	d00a      	beq.n	8003800 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	334d      	adds	r3, #77	; 0x4d
 80037fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80037fc:	2b09      	cmp	r3, #9
 80037fe:	d170      	bne.n	80038e2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	334d      	adds	r3, #77	; 0x4d
 8003810:	2202      	movs	r2, #2
 8003812:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	3344      	adds	r3, #68	; 0x44
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	1c59      	adds	r1, r3, #1
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4403      	add	r3, r0
 8003834:	3344      	adds	r3, #68	; 0x44
 8003836:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	3344      	adds	r3, #68	; 0x44
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d914      	bls.n	8003878 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3344      	adds	r3, #68	; 0x44
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	334c      	adds	r3, #76	; 0x4c
 8003872:	2204      	movs	r2, #4
 8003874:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003876:	e022      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	334c      	adds	r3, #76	; 0x4c
 8003888:	2202      	movs	r2, #2
 800388a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038a2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038aa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	461a      	mov	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	334c      	adds	r3, #76	; 0x4c
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f006 ffc4 	bl	800a864 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038dc:	e002      	b.n	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80038e2:	bf00      	nop
  }
}
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b08a      	sub	sp, #40	; 0x28
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	0c5b      	lsrs	r3, r3, #17
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800391e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d004      	beq.n	8003930 <HCD_RXQLVL_IRQHandler+0x46>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b05      	cmp	r3, #5
 800392a:	f000 80b6 	beq.w	8003a9a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800392e:	e0b7      	b.n	8003aa0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80b3 	beq.w	8003a9e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	332c      	adds	r3, #44	; 0x2c
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80a7 	beq.w	8003a9e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	3338      	adds	r3, #56	; 0x38
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	18d1      	adds	r1, r2, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4403      	add	r3, r0
 8003974:	3334      	adds	r3, #52	; 0x34
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4299      	cmp	r1, r3
 800397a:	f200 8083 	bhi.w	8003a84 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	332c      	adds	r3, #44	; 0x2c
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	b292      	uxth	r2, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f003 fdeb 	bl	8007574 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	332c      	adds	r3, #44	; 0x2c
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	18d1      	adds	r1, r2, r3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4403      	add	r3, r0
 80039c2:	332c      	adds	r3, #44	; 0x2c
 80039c4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4613      	mov	r3, r2
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	3338      	adds	r3, #56	; 0x38
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	18d1      	adds	r1, r2, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4403      	add	r3, r0
 80039ea:	3338      	adds	r3, #56	; 0x38
 80039ec:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	0cdb      	lsrs	r3, r3, #19
 80039fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a02:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	3328      	adds	r3, #40	; 0x28
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d13f      	bne.n	8003a9e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d03c      	beq.n	8003a9e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a3a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a42:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	333c      	adds	r3, #60	; 0x3c
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f083 0301 	eor.w	r3, r3, #1
 8003a6c:	b2d8      	uxtb	r0, r3
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4613      	mov	r3, r2
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	333c      	adds	r3, #60	; 0x3c
 8003a7e:	4602      	mov	r2, r0
 8003a80:	701a      	strb	r2, [r3, #0]
      break;
 8003a82:	e00c      	b.n	8003a9e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	334c      	adds	r3, #76	; 0x4c
 8003a94:	2204      	movs	r2, #4
 8003a96:	701a      	strb	r2, [r3, #0]
      break;
 8003a98:	e001      	b.n	8003a9e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003a9e:	bf00      	nop
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3728      	adds	r7, #40	; 0x28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ad4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d10b      	bne.n	8003af8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d102      	bne.n	8003af0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f006 fe9e 	bl	800a82c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d132      	bne.n	8003b68 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f043 0308 	orr.w	r3, r3, #8
 8003b08:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d126      	bne.n	8003b62 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7a5b      	ldrb	r3, [r3, #9]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d113      	bne.n	8003b44 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b26:	d106      	bne.n	8003b36 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f003 feb0 	bl	8007894 <USB_InitFSLSPClkSel>
 8003b34:	e011      	b.n	8003b5a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 fea9 	bl	8007894 <USB_InitFSLSPClkSel>
 8003b42:	e00a      	b.n	8003b5a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	79db      	ldrb	r3, [r3, #7]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d106      	bne.n	8003b5a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b52:	461a      	mov	r2, r3
 8003b54:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b58:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f006 fe90 	bl	800a880 <HAL_HCD_PortEnabled_Callback>
 8003b60:	e002      	b.n	8003b68 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f006 fe9a 	bl	800a89c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d103      	bne.n	8003b7a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f043 0320 	orr.w	r3, r3, #32
 8003b78:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	6013      	str	r3, [r2, #0]
}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e12b      	b.n	8003dfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd f81c 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f001 fa20 	bl	8005038 <HAL_RCC_GetPCLK1Freq>
 8003bf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4a81      	ldr	r2, [pc, #516]	; (8003e04 <HAL_I2C_Init+0x274>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d807      	bhi.n	8003c14 <HAL_I2C_Init+0x84>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a80      	ldr	r2, [pc, #512]	; (8003e08 <HAL_I2C_Init+0x278>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	bf94      	ite	ls
 8003c0c:	2301      	movls	r3, #1
 8003c0e:	2300      	movhi	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e006      	b.n	8003c22 <HAL_I2C_Init+0x92>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a7d      	ldr	r2, [pc, #500]	; (8003e0c <HAL_I2C_Init+0x27c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bf94      	ite	ls
 8003c1c:	2301      	movls	r3, #1
 8003c1e:	2300      	movhi	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e0e7      	b.n	8003dfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a78      	ldr	r2, [pc, #480]	; (8003e10 <HAL_I2C_Init+0x280>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	0c9b      	lsrs	r3, r3, #18
 8003c34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a6a      	ldr	r2, [pc, #424]	; (8003e04 <HAL_I2C_Init+0x274>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d802      	bhi.n	8003c64 <HAL_I2C_Init+0xd4>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3301      	adds	r3, #1
 8003c62:	e009      	b.n	8003c78 <HAL_I2C_Init+0xe8>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	4a69      	ldr	r2, [pc, #420]	; (8003e14 <HAL_I2C_Init+0x284>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	3301      	adds	r3, #1
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	495c      	ldr	r1, [pc, #368]	; (8003e04 <HAL_I2C_Init+0x274>)
 8003c94:	428b      	cmp	r3, r1
 8003c96:	d819      	bhi.n	8003ccc <HAL_I2C_Init+0x13c>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1e59      	subs	r1, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ca6:	1c59      	adds	r1, r3, #1
 8003ca8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cac:	400b      	ands	r3, r1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_I2C_Init+0x138>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1e59      	subs	r1, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc6:	e051      	b.n	8003d6c <HAL_I2C_Init+0x1dc>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	e04f      	b.n	8003d6c <HAL_I2C_Init+0x1dc>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d111      	bne.n	8003cf8 <HAL_I2C_Init+0x168>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1e58      	subs	r0, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	440b      	add	r3, r1
 8003ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e012      	b.n	8003d1e <HAL_I2C_Init+0x18e>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1e58      	subs	r0, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	0099      	lsls	r1, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Init+0x196>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e022      	b.n	8003d6c <HAL_I2C_Init+0x1dc>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10e      	bne.n	8003d4c <HAL_I2C_Init+0x1bc>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1e58      	subs	r0, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	460b      	mov	r3, r1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	440b      	add	r3, r1
 8003d3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d40:	3301      	adds	r3, #1
 8003d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4a:	e00f      	b.n	8003d6c <HAL_I2C_Init+0x1dc>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1e58      	subs	r0, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	0099      	lsls	r1, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d62:	3301      	adds	r3, #1
 8003d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	6809      	ldr	r1, [r1, #0]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6911      	ldr	r1, [r2, #16]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68d2      	ldr	r2, [r2, #12]
 8003da6:	4311      	orrs	r1, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	000186a0 	.word	0x000186a0
 8003e08:	001e847f 	.word	0x001e847f
 8003e0c:	003d08ff 	.word	0x003d08ff
 8003e10:	431bde83 	.word	0x431bde83
 8003e14:	10624dd3 	.word	0x10624dd3

08003e18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e128      	b.n	800407c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a90      	ldr	r2, [pc, #576]	; (8004084 <HAL_I2S_Init+0x26c>)
 8003e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fc ff1d 	bl	8000c84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e60:	f023 030f 	bic.w	r3, r3, #15
 8003e64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d060      	beq.n	8003f38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d102      	bne.n	8003e84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003e7e:	2310      	movs	r3, #16
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e001      	b.n	8003e88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e84:	2320      	movs	r3, #32
 8003e86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d802      	bhi.n	8003e96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e96:	2001      	movs	r0, #1
 8003e98:	f001 f9d8 	bl	800524c <HAL_RCCEx_GetPeriphCLKFreq>
 8003e9c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea6:	d125      	bne.n	8003ef4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d010      	beq.n	8003ed2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ecc:	3305      	adds	r3, #5
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	e01f      	b.n	8003f12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	3305      	adds	r3, #5
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e00e      	b.n	8003f12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	461a      	mov	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	3305      	adds	r3, #5
 8003f10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4a5c      	ldr	r2, [pc, #368]	; (8004088 <HAL_I2S_Init+0x270>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	08db      	lsrs	r3, r3, #3
 8003f1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	e003      	b.n	8003f40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d902      	bls.n	8003f4c <HAL_I2S_Init+0x134>
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	2bff      	cmp	r3, #255	; 0xff
 8003f4a:	d907      	bls.n	8003f5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	f043 0210 	orr.w	r2, r3, #16
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e08f      	b.n	800407c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	ea42 0103 	orr.w	r1, r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f7a:	f023 030f 	bic.w	r3, r3, #15
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6851      	ldr	r1, [r2, #4]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6892      	ldr	r2, [r2, #8]
 8003f86:	4311      	orrs	r1, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68d2      	ldr	r2, [r2, #12]
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6992      	ldr	r2, [r2, #24]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d161      	bne.n	800406c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a38      	ldr	r2, [pc, #224]	; (800408c <HAL_I2S_Init+0x274>)
 8003fac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a37      	ldr	r2, [pc, #220]	; (8004090 <HAL_I2S_Init+0x278>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d101      	bne.n	8003fbc <HAL_I2S_Init+0x1a4>
 8003fb8:	4b36      	ldr	r3, [pc, #216]	; (8004094 <HAL_I2S_Init+0x27c>)
 8003fba:	e001      	b.n	8003fc0 <HAL_I2S_Init+0x1a8>
 8003fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	4932      	ldr	r1, [pc, #200]	; (8004090 <HAL_I2S_Init+0x278>)
 8003fc8:	428a      	cmp	r2, r1
 8003fca:	d101      	bne.n	8003fd0 <HAL_I2S_Init+0x1b8>
 8003fcc:	4a31      	ldr	r2, [pc, #196]	; (8004094 <HAL_I2S_Init+0x27c>)
 8003fce:	e001      	b.n	8003fd4 <HAL_I2S_Init+0x1bc>
 8003fd0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003fd4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003fd8:	f023 030f 	bic.w	r3, r3, #15
 8003fdc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2b      	ldr	r2, [pc, #172]	; (8004090 <HAL_I2S_Init+0x278>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <HAL_I2S_Init+0x1d4>
 8003fe8:	4b2a      	ldr	r3, [pc, #168]	; (8004094 <HAL_I2S_Init+0x27c>)
 8003fea:	e001      	b.n	8003ff0 <HAL_I2S_Init+0x1d8>
 8003fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a25      	ldr	r2, [pc, #148]	; (8004090 <HAL_I2S_Init+0x278>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_I2S_Init+0x1ea>
 8003ffe:	4b25      	ldr	r3, [pc, #148]	; (8004094 <HAL_I2S_Init+0x27c>)
 8004000:	e001      	b.n	8004006 <HAL_I2S_Init+0x1ee>
 8004002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004012:	d003      	beq.n	800401c <HAL_I2S_Init+0x204>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800401c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	e001      	b.n	8004028 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004032:	4313      	orrs	r3, r2
 8004034:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800403c:	4313      	orrs	r3, r2
 800403e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004046:	4313      	orrs	r3, r2
 8004048:	b29a      	uxth	r2, r3
 800404a:	897b      	ldrh	r3, [r7, #10]
 800404c:	4313      	orrs	r3, r2
 800404e:	b29b      	uxth	r3, r3
 8004050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004054:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a0d      	ldr	r2, [pc, #52]	; (8004090 <HAL_I2S_Init+0x278>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d101      	bne.n	8004064 <HAL_I2S_Init+0x24c>
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <HAL_I2S_Init+0x27c>)
 8004062:	e001      	b.n	8004068 <HAL_I2S_Init+0x250>
 8004064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004068:	897a      	ldrh	r2, [r7, #10]
 800406a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3720      	adds	r7, #32
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	0800418f 	.word	0x0800418f
 8004088:	cccccccd 	.word	0xcccccccd
 800408c:	080042a5 	.word	0x080042a5
 8004090:	40003800 	.word	0x40003800
 8004094:	40003400 	.word	0x40003400

08004098 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	881a      	ldrh	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	1c9a      	adds	r2, r3, #2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10e      	bne.n	8004128 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004118:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff ffb8 	bl	8004098 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	b292      	uxth	r2, r2
 8004144:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	1c9a      	adds	r2, r3, #2
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10e      	bne.n	8004186 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004176:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ff93 	bl	80040ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d13a      	bne.n	8004220 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d109      	bne.n	80041c8 <I2S_IRQHandler+0x3a>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b40      	cmp	r3, #64	; 0x40
 80041c0:	d102      	bne.n	80041c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ffb4 	bl	8004130 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d126      	bne.n	8004220 <I2S_IRQHandler+0x92>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d11f      	bne.n	8004220 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	f043 0202 	orr.w	r2, r3, #2
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff50 	bl	80040c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b03      	cmp	r3, #3
 800422a:	d136      	bne.n	800429a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b02      	cmp	r3, #2
 8004234:	d109      	bne.n	800424a <I2S_IRQHandler+0xbc>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d102      	bne.n	800424a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff45 	bl	80040d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b08      	cmp	r3, #8
 8004252:	d122      	bne.n	800429a <I2S_IRQHandler+0x10c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b20      	cmp	r3, #32
 8004260:	d11b      	bne.n	800429a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004270:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	f043 0204 	orr.w	r2, r3, #4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff13 	bl	80040c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a92      	ldr	r2, [pc, #584]	; (8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d101      	bne.n	80042c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80042be:	4b92      	ldr	r3, [pc, #584]	; (8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042c0:	e001      	b.n	80042c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80042c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a8b      	ldr	r2, [pc, #556]	; (8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d101      	bne.n	80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80042dc:	4b8a      	ldr	r3, [pc, #552]	; (8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042de:	e001      	b.n	80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80042e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f0:	d004      	beq.n	80042fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 8099 	bne.w	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b02      	cmp	r3, #2
 8004304:	d107      	bne.n	8004316 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f925 	bl	8004560 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d107      	bne.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f9c8 	bl	80046c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d13a      	bne.n	80043b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d035      	beq.n	80043b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a6e      	ldr	r2, [pc, #440]	; (8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800434e:	4b6e      	ldr	r3, [pc, #440]	; (8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004350:	e001      	b.n	8004356 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004352:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4969      	ldr	r1, [pc, #420]	; (8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800435e:	428b      	cmp	r3, r1
 8004360:	d101      	bne.n	8004366 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004362:	4b69      	ldr	r3, [pc, #420]	; (8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004364:	e001      	b.n	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800436a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800436e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800437e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	f043 0202 	orr.w	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff fe88 	bl	80040c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	f040 80c3 	bne.w	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 80bd 	beq.w	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a49      	ldr	r2, [pc, #292]	; (8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d101      	bne.n	80043e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80043e2:	4b49      	ldr	r3, [pc, #292]	; (8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043e4:	e001      	b.n	80043ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80043e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4944      	ldr	r1, [pc, #272]	; (8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043f2:	428b      	cmp	r3, r1
 80043f4:	d101      	bne.n	80043fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80043f6:	4b44      	ldr	r3, [pc, #272]	; (8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043f8:	e001      	b.n	80043fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80043fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004402:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004404:	2300      	movs	r3, #0
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f043 0204 	orr.w	r2, r3, #4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff fe4a 	bl	80040c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800442c:	e089      	b.n	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d107      	bne.n	8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f8be 	bl	80045c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d107      	bne.n	8004462 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f8fd 	bl	800465c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d12f      	bne.n	80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02a      	beq.n	80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004484:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d101      	bne.n	8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004490:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004492:	e001      	b.n	8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4919      	ldr	r1, [pc, #100]	; (8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044a0:	428b      	cmp	r3, r1
 80044a2:	d101      	bne.n	80044a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80044a4:	4b18      	ldr	r3, [pc, #96]	; (8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044a6:	e001      	b.n	80044ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80044a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f043 0202 	orr.w	r2, r3, #2
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff fdfa 	bl	80040c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d136      	bne.n	8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d031      	beq.n	8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a07      	ldr	r2, [pc, #28]	; (8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044ec:	e001      	b.n	80044f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80044ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4902      	ldr	r1, [pc, #8]	; (8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044fa:	428b      	cmp	r3, r1
 80044fc:	d106      	bne.n	800450c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80044fe:	4b02      	ldr	r3, [pc, #8]	; (8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004500:	e006      	b.n	8004510 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004502:	bf00      	nop
 8004504:	40003800 	.word	0x40003800
 8004508:	40003400 	.word	0x40003400
 800450c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004510:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004514:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004524:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	f043 0204 	orr.w	r2, r3, #4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fdc0 	bl	80040c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004540:	e000      	b.n	8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004542:	bf00      	nop
}
 8004544:	bf00      	nop
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	1c99      	adds	r1, r3, #2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6251      	str	r1, [r2, #36]	; 0x24
 8004572:	881a      	ldrh	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d113      	bne.n	80045ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ffc9 	bl	800454c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	1c99      	adds	r1, r3, #2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6251      	str	r1, [r2, #36]	; 0x24
 80045d6:	8819      	ldrh	r1, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <I2SEx_TxISR_I2SExt+0x90>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <I2SEx_TxISR_I2SExt+0x22>
 80045e2:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <I2SEx_TxISR_I2SExt+0x94>)
 80045e4:	e001      	b.n	80045ea <I2SEx_TxISR_I2SExt+0x26>
 80045e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ea:	460a      	mov	r2, r1
 80045ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d121      	bne.n	800464a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a12      	ldr	r2, [pc, #72]	; (8004654 <I2SEx_TxISR_I2SExt+0x90>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d101      	bne.n	8004614 <I2SEx_TxISR_I2SExt+0x50>
 8004610:	4b11      	ldr	r3, [pc, #68]	; (8004658 <I2SEx_TxISR_I2SExt+0x94>)
 8004612:	e001      	b.n	8004618 <I2SEx_TxISR_I2SExt+0x54>
 8004614:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	490d      	ldr	r1, [pc, #52]	; (8004654 <I2SEx_TxISR_I2SExt+0x90>)
 8004620:	428b      	cmp	r3, r1
 8004622:	d101      	bne.n	8004628 <I2SEx_TxISR_I2SExt+0x64>
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <I2SEx_TxISR_I2SExt+0x94>)
 8004626:	e001      	b.n	800462c <I2SEx_TxISR_I2SExt+0x68>
 8004628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800462c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004630:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ff81 	bl	800454c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40003800 	.word	0x40003800
 8004658:	40003400 	.word	0x40003400

0800465c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68d8      	ldr	r0, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	1c99      	adds	r1, r3, #2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004674:	b282      	uxth	r2, r0
 8004676:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d113      	bne.n	80046b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800469e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff ff4a 	bl	800454c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a20      	ldr	r2, [pc, #128]	; (8004750 <I2SEx_RxISR_I2SExt+0x90>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <I2SEx_RxISR_I2SExt+0x16>
 80046d2:	4b20      	ldr	r3, [pc, #128]	; (8004754 <I2SEx_RxISR_I2SExt+0x94>)
 80046d4:	e001      	b.n	80046da <I2SEx_RxISR_I2SExt+0x1a>
 80046d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046da:	68d8      	ldr	r0, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	1c99      	adds	r1, r3, #2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80046e6:	b282      	uxth	r2, r0
 80046e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d121      	bne.n	8004746 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a12      	ldr	r2, [pc, #72]	; (8004750 <I2SEx_RxISR_I2SExt+0x90>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d101      	bne.n	8004710 <I2SEx_RxISR_I2SExt+0x50>
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <I2SEx_RxISR_I2SExt+0x94>)
 800470e:	e001      	b.n	8004714 <I2SEx_RxISR_I2SExt+0x54>
 8004710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	490d      	ldr	r1, [pc, #52]	; (8004750 <I2SEx_RxISR_I2SExt+0x90>)
 800471c:	428b      	cmp	r3, r1
 800471e:	d101      	bne.n	8004724 <I2SEx_RxISR_I2SExt+0x64>
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <I2SEx_RxISR_I2SExt+0x94>)
 8004722:	e001      	b.n	8004728 <I2SEx_RxISR_I2SExt+0x68>
 8004724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004728:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800472c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff03 	bl	800454c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40003800 	.word	0x40003800
 8004754:	40003400 	.word	0x40003400

08004758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e267      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d075      	beq.n	8004862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004776:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	2b04      	cmp	r3, #4
 8004780:	d00c      	beq.n	800479c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004782:	4b85      	ldr	r3, [pc, #532]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800478a:	2b08      	cmp	r3, #8
 800478c:	d112      	bne.n	80047b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800478e:	4b82      	ldr	r3, [pc, #520]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479a:	d10b      	bne.n	80047b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	4b7e      	ldr	r3, [pc, #504]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05b      	beq.n	8004860 <HAL_RCC_OscConfig+0x108>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d157      	bne.n	8004860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e242      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047bc:	d106      	bne.n	80047cc <HAL_RCC_OscConfig+0x74>
 80047be:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a75      	ldr	r2, [pc, #468]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e01d      	b.n	8004808 <HAL_RCC_OscConfig+0xb0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x98>
 80047d6:	4b70      	ldr	r3, [pc, #448]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6f      	ldr	r2, [pc, #444]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b6d      	ldr	r3, [pc, #436]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a6c      	ldr	r2, [pc, #432]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0xb0>
 80047f0:	4b69      	ldr	r3, [pc, #420]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a68      	ldr	r2, [pc, #416]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	4b66      	ldr	r3, [pc, #408]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a65      	ldr	r2, [pc, #404]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d013      	beq.n	8004838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fc fd1a 	bl	8001248 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004818:	f7fc fd16 	bl	8001248 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b64      	cmp	r3, #100	; 0x64
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e207      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0xc0>
 8004836:	e014      	b.n	8004862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fc fd06 	bl	8001248 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004840:	f7fc fd02 	bl	8001248 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e1f3      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004852:	4b51      	ldr	r3, [pc, #324]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0xe8>
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d063      	beq.n	8004936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800486e:	4b4a      	ldr	r3, [pc, #296]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800487a:	4b47      	ldr	r3, [pc, #284]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004882:	2b08      	cmp	r3, #8
 8004884:	d11c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004886:	4b44      	ldr	r3, [pc, #272]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d116      	bne.n	80048c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004892:	4b41      	ldr	r3, [pc, #260]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <HAL_RCC_OscConfig+0x152>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d001      	beq.n	80048aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e1c7      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048aa:	4b3b      	ldr	r3, [pc, #236]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4937      	ldr	r1, [pc, #220]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048be:	e03a      	b.n	8004936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d020      	beq.n	800490a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c8:	4b34      	ldr	r3, [pc, #208]	; (800499c <HAL_RCC_OscConfig+0x244>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fc fcbb 	bl	8001248 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d6:	f7fc fcb7 	bl	8001248 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e1a8      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f4:	4b28      	ldr	r3, [pc, #160]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4925      	ldr	r1, [pc, #148]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004904:	4313      	orrs	r3, r2
 8004906:	600b      	str	r3, [r1, #0]
 8004908:	e015      	b.n	8004936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <HAL_RCC_OscConfig+0x244>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fc fc9a 	bl	8001248 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004918:	f7fc fc96 	bl	8001248 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e187      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492a:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d036      	beq.n	80049b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d016      	beq.n	8004978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <HAL_RCC_OscConfig+0x248>)
 800494c:	2201      	movs	r2, #1
 800494e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fc fc7a 	bl	8001248 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004958:	f7fc fc76 	bl	8001248 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e167      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 800496c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x200>
 8004976:	e01b      	b.n	80049b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCC_OscConfig+0x248>)
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497e:	f7fc fc63 	bl	8001248 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004984:	e00e      	b.n	80049a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004986:	f7fc fc5f 	bl	8001248 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d907      	bls.n	80049a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e150      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
 8004998:	40023800 	.word	0x40023800
 800499c:	42470000 	.word	0x42470000
 80049a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a4:	4b88      	ldr	r3, [pc, #544]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 80049a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ea      	bne.n	8004986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8097 	beq.w	8004aec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c2:	4b81      	ldr	r3, [pc, #516]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10f      	bne.n	80049ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	4b7d      	ldr	r3, [pc, #500]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	4a7c      	ldr	r2, [pc, #496]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 80049d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049dc:	6413      	str	r3, [r2, #64]	; 0x40
 80049de:	4b7a      	ldr	r3, [pc, #488]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ea:	2301      	movs	r3, #1
 80049ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ee:	4b77      	ldr	r3, [pc, #476]	; (8004bcc <HAL_RCC_OscConfig+0x474>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d118      	bne.n	8004a2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049fa:	4b74      	ldr	r3, [pc, #464]	; (8004bcc <HAL_RCC_OscConfig+0x474>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a73      	ldr	r2, [pc, #460]	; (8004bcc <HAL_RCC_OscConfig+0x474>)
 8004a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a06:	f7fc fc1f 	bl	8001248 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0e:	f7fc fc1b 	bl	8001248 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e10c      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a20:	4b6a      	ldr	r3, [pc, #424]	; (8004bcc <HAL_RCC_OscConfig+0x474>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x2ea>
 8004a34:	4b64      	ldr	r3, [pc, #400]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	4a63      	ldr	r2, [pc, #396]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a40:	e01c      	b.n	8004a7c <HAL_RCC_OscConfig+0x324>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x30c>
 8004a4a:	4b5f      	ldr	r3, [pc, #380]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	4a5e      	ldr	r2, [pc, #376]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a50:	f043 0304 	orr.w	r3, r3, #4
 8004a54:	6713      	str	r3, [r2, #112]	; 0x70
 8004a56:	4b5c      	ldr	r3, [pc, #368]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	4a5b      	ldr	r2, [pc, #364]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6713      	str	r3, [r2, #112]	; 0x70
 8004a62:	e00b      	b.n	8004a7c <HAL_RCC_OscConfig+0x324>
 8004a64:	4b58      	ldr	r3, [pc, #352]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	4a57      	ldr	r2, [pc, #348]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a70:	4b55      	ldr	r3, [pc, #340]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	4a54      	ldr	r2, [pc, #336]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a76:	f023 0304 	bic.w	r3, r3, #4
 8004a7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d015      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fc fbe0 	bl	8001248 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8c:	f7fc fbdc 	bl	8001248 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0cb      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa2:	4b49      	ldr	r3, [pc, #292]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0ee      	beq.n	8004a8c <HAL_RCC_OscConfig+0x334>
 8004aae:	e014      	b.n	8004ada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab0:	f7fc fbca 	bl	8001248 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab8:	f7fc fbc6 	bl	8001248 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e0b5      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ace:	4b3e      	ldr	r3, [pc, #248]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1ee      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d105      	bne.n	8004aec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae0:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	4a38      	ldr	r2, [pc, #224]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80a1 	beq.w	8004c38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004af6:	4b34      	ldr	r3, [pc, #208]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d05c      	beq.n	8004bbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d141      	bne.n	8004b8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0a:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <HAL_RCC_OscConfig+0x478>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b10:	f7fc fb9a 	bl	8001248 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b18:	f7fc fb96 	bl	8001248 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e087      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2a:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	019b      	lsls	r3, r3, #6
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	041b      	lsls	r3, r3, #16
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	491b      	ldr	r1, [pc, #108]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b60:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <HAL_RCC_OscConfig+0x478>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b66:	f7fc fb6f 	bl	8001248 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b6e:	f7fc fb6b 	bl	8001248 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e05c      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b80:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x416>
 8004b8c:	e054      	b.n	8004c38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8e:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <HAL_RCC_OscConfig+0x478>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fc fb58 	bl	8001248 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fc fb54 	bl	8001248 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e045      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x444>
 8004bba:	e03d      	b.n	8004c38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d107      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e038      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40007000 	.word	0x40007000
 8004bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCC_OscConfig+0x4ec>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d028      	beq.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d121      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d11a      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c04:	4013      	ands	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d111      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40023800 	.word	0x40023800

08004c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0cc      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b68      	ldr	r3, [pc, #416]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d90c      	bls.n	8004c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b65      	ldr	r3, [pc, #404]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b63      	ldr	r3, [pc, #396]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0b8      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d020      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c9c:	4b59      	ldr	r3, [pc, #356]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4a58      	ldr	r2, [pc, #352]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cb4:	4b53      	ldr	r3, [pc, #332]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	4a52      	ldr	r2, [pc, #328]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc0:	4b50      	ldr	r3, [pc, #320]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	494d      	ldr	r1, [pc, #308]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d044      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	4b47      	ldr	r3, [pc, #284]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d119      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e07f      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d06:	4b3f      	ldr	r3, [pc, #252]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e06f      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d16:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e067      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d26:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f023 0203 	bic.w	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4934      	ldr	r1, [pc, #208]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d38:	f7fc fa86 	bl	8001248 <HAL_GetTick>
 8004d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d40:	f7fc fa82 	bl	8001248 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e04f      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 020c 	and.w	r2, r3, #12
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d1eb      	bne.n	8004d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d68:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d20c      	bcs.n	8004d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b22      	ldr	r3, [pc, #136]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e032      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d9c:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4916      	ldr	r1, [pc, #88]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	490e      	ldr	r1, [pc, #56]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dce:	f000 f821 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	490a      	ldr	r1, [pc, #40]	; (8004e08 <HAL_RCC_ClockConfig+0x1c0>)
 8004de0:	5ccb      	ldrb	r3, [r1, r3]
 8004de2:	fa22 f303 	lsr.w	r3, r2, r3
 8004de6:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_ClockConfig+0x1c8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fc f9e6 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023c00 	.word	0x40023c00
 8004e04:	40023800 	.word	0x40023800
 8004e08:	0800af90 	.word	0x0800af90
 8004e0c:	20000000 	.word	0x20000000
 8004e10:	20000004 	.word	0x20000004

08004e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e18:	b094      	sub	sp, #80	; 0x50
 8004e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e20:	2300      	movs	r3, #0
 8004e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e24:	2300      	movs	r3, #0
 8004e26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e2c:	4b79      	ldr	r3, [pc, #484]	; (8005014 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d00d      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0x40>
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	f200 80e1 	bhi.w	8005000 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0x34>
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d003      	beq.n	8004e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e46:	e0db      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e48:	4b73      	ldr	r3, [pc, #460]	; (8005018 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e4c:	e0db      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e4e:	4b73      	ldr	r3, [pc, #460]	; (800501c <HAL_RCC_GetSysClockFreq+0x208>)
 8004e50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e52:	e0d8      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e54:	4b6f      	ldr	r3, [pc, #444]	; (8005014 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e5e:	4b6d      	ldr	r3, [pc, #436]	; (8005014 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d063      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6a:	4b6a      	ldr	r3, [pc, #424]	; (8005014 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	2200      	movs	r2, #0
 8004e72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e7e:	2300      	movs	r3, #0
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
 8004e82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e86:	4622      	mov	r2, r4
 8004e88:	462b      	mov	r3, r5
 8004e8a:	f04f 0000 	mov.w	r0, #0
 8004e8e:	f04f 0100 	mov.w	r1, #0
 8004e92:	0159      	lsls	r1, r3, #5
 8004e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e98:	0150      	lsls	r0, r2, #5
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	1a51      	subs	r1, r2, r1
 8004ea2:	6139      	str	r1, [r7, #16]
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004eb8:	4659      	mov	r1, fp
 8004eba:	018b      	lsls	r3, r1, #6
 8004ebc:	4651      	mov	r1, sl
 8004ebe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ec2:	4651      	mov	r1, sl
 8004ec4:	018a      	lsls	r2, r1, #6
 8004ec6:	4651      	mov	r1, sl
 8004ec8:	ebb2 0801 	subs.w	r8, r2, r1
 8004ecc:	4659      	mov	r1, fp
 8004ece:	eb63 0901 	sbc.w	r9, r3, r1
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ee6:	4690      	mov	r8, r2
 8004ee8:	4699      	mov	r9, r3
 8004eea:	4623      	mov	r3, r4
 8004eec:	eb18 0303 	adds.w	r3, r8, r3
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	462b      	mov	r3, r5
 8004ef4:	eb49 0303 	adc.w	r3, r9, r3
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f06:	4629      	mov	r1, r5
 8004f08:	024b      	lsls	r3, r1, #9
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f10:	4621      	mov	r1, r4
 8004f12:	024a      	lsls	r2, r1, #9
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f24:	f7fb f950 	bl	80001c8 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f30:	e058      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f32:	4b38      	ldr	r3, [pc, #224]	; (8005014 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	2200      	movs	r2, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f42:	623b      	str	r3, [r7, #32]
 8004f44:	2300      	movs	r3, #0
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
 8004f48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	f04f 0000 	mov.w	r0, #0
 8004f54:	f04f 0100 	mov.w	r1, #0
 8004f58:	0159      	lsls	r1, r3, #5
 8004f5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f5e:	0150      	lsls	r0, r2, #5
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4641      	mov	r1, r8
 8004f66:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f84:	ebb2 040a 	subs.w	r4, r2, sl
 8004f88:	eb63 050b 	sbc.w	r5, r3, fp
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	00eb      	lsls	r3, r5, #3
 8004f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f9a:	00e2      	lsls	r2, r4, #3
 8004f9c:	4614      	mov	r4, r2
 8004f9e:	461d      	mov	r5, r3
 8004fa0:	4643      	mov	r3, r8
 8004fa2:	18e3      	adds	r3, r4, r3
 8004fa4:	603b      	str	r3, [r7, #0]
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	eb45 0303 	adc.w	r3, r5, r3
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fba:	4629      	mov	r1, r5
 8004fbc:	028b      	lsls	r3, r1, #10
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	028a      	lsls	r2, r1, #10
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fce:	2200      	movs	r2, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	61fa      	str	r2, [r7, #28]
 8004fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fd8:	f7fb f8f6 	bl	80001c8 <__aeabi_uldivmod>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	3301      	adds	r3, #1
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ff4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ffe:	e002      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_RCC_GetSysClockFreq+0x204>)
 8005002:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005008:	4618      	mov	r0, r3
 800500a:	3750      	adds	r7, #80	; 0x50
 800500c:	46bd      	mov	sp, r7
 800500e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005012:	bf00      	nop
 8005014:	40023800 	.word	0x40023800
 8005018:	00f42400 	.word	0x00f42400
 800501c:	007a1200 	.word	0x007a1200

08005020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <HAL_RCC_GetHCLKFreq+0x14>)
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20000000 	.word	0x20000000

08005038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800503c:	f7ff fff0 	bl	8005020 <HAL_RCC_GetHCLKFreq>
 8005040:	4602      	mov	r2, r0
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	0a9b      	lsrs	r3, r3, #10
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	4903      	ldr	r1, [pc, #12]	; (800505c <HAL_RCC_GetPCLK1Freq+0x24>)
 800504e:	5ccb      	ldrb	r3, [r1, r3]
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005054:	4618      	mov	r0, r3
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40023800 	.word	0x40023800
 800505c:	0800afa0 	.word	0x0800afa0

08005060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005064:	f7ff ffdc 	bl	8005020 <HAL_RCC_GetHCLKFreq>
 8005068:	4602      	mov	r2, r0
 800506a:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	0b5b      	lsrs	r3, r3, #13
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	4903      	ldr	r1, [pc, #12]	; (8005084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005076:	5ccb      	ldrb	r3, [r1, r3]
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800507c:	4618      	mov	r0, r3
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40023800 	.word	0x40023800
 8005084:	0800afa0 	.word	0x0800afa0

08005088 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d035      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050b0:	4b62      	ldr	r3, [pc, #392]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050b6:	f7fc f8c7 	bl	8001248 <HAL_GetTick>
 80050ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050be:	f7fc f8c3 	bl	8001248 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e0b0      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050d0:	4b5b      	ldr	r3, [pc, #364]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f0      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	019a      	lsls	r2, r3, #6
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	071b      	lsls	r3, r3, #28
 80050e8:	4955      	ldr	r1, [pc, #340]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050f0:	4b52      	ldr	r3, [pc, #328]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050f6:	f7fc f8a7 	bl	8001248 <HAL_GetTick>
 80050fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050fe:	f7fc f8a3 	bl	8001248 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e090      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005110:	4b4b      	ldr	r3, [pc, #300]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8083 	beq.w	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	4b44      	ldr	r3, [pc, #272]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	4a43      	ldr	r2, [pc, #268]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005138:	6413      	str	r3, [r2, #64]	; 0x40
 800513a:	4b41      	ldr	r3, [pc, #260]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005146:	4b3f      	ldr	r3, [pc, #252]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a3e      	ldr	r2, [pc, #248]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800514c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005150:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005152:	f7fc f879 	bl	8001248 <HAL_GetTick>
 8005156:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005158:	e008      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800515a:	f7fc f875 	bl	8001248 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e062      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800516c:	4b35      	ldr	r3, [pc, #212]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005178:	4b31      	ldr	r3, [pc, #196]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005180:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d02f      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	429a      	cmp	r2, r3
 8005194:	d028      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005196:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051a0:	4b29      	ldr	r3, [pc, #164]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051a6:	4b28      	ldr	r3, [pc, #160]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051ac:	4a24      	ldr	r2, [pc, #144]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051b2:	4b23      	ldr	r3, [pc, #140]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d114      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80051be:	f7fc f843 	bl	8001248 <HAL_GetTick>
 80051c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c4:	e00a      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c6:	f7fc f83f 	bl	8001248 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d901      	bls.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e02a      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051dc:	4b18      	ldr	r3, [pc, #96]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ee      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051f4:	d10d      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80051f6:	4b12      	ldr	r3, [pc, #72]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520a:	490d      	ldr	r1, [pc, #52]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800520c:	4313      	orrs	r3, r2
 800520e:	608b      	str	r3, [r1, #8]
 8005210:	e005      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005212:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005218:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800521c:	6093      	str	r3, [r2, #8]
 800521e:	4b08      	ldr	r3, [pc, #32]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005220:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522a:	4905      	ldr	r1, [pc, #20]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800522c:	4313      	orrs	r3, r2
 800522e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	42470068 	.word	0x42470068
 8005240:	40023800 	.word	0x40023800
 8005244:	40007000 	.word	0x40007000
 8005248:	42470e40 	.word	0x42470e40

0800524c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d13f      	bne.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800526a:	4b24      	ldr	r3, [pc, #144]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d006      	beq.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005280:	d12f      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005282:	4b1f      	ldr	r3, [pc, #124]	; (8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005284:	617b      	str	r3, [r7, #20]
          break;
 8005286:	e02f      	b.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005288:	4b1c      	ldr	r3, [pc, #112]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005294:	d108      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005296:	4b19      	ldr	r3, [pc, #100]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800529e:	4a19      	ldr	r2, [pc, #100]	; (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	e007      	b.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80052a8:	4b14      	ldr	r3, [pc, #80]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b0:	4a15      	ldr	r2, [pc, #84]	; (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80052b8:	4b10      	ldr	r3, [pc, #64]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80052ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052be:	099b      	lsrs	r3, r3, #6
 80052c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80052ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d2:	0f1b      	lsrs	r3, r3, #28
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	fbb2 f3f3 	udiv	r3, r2, r3
 80052de:	617b      	str	r3, [r7, #20]
          break;
 80052e0:	e002      	b.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
          break;
 80052e6:	bf00      	nop
        }
      }
      break;
 80052e8:	e000      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80052ea:	bf00      	nop
    }
  }
  return frequency;
 80052ec:	697b      	ldr	r3, [r7, #20]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40023800 	.word	0x40023800
 8005300:	00bb8000 	.word	0x00bb8000
 8005304:	007a1200 	.word	0x007a1200
 8005308:	00f42400 	.word	0x00f42400

0800530c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e07b      	b.n	8005416 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d108      	bne.n	8005338 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800532e:	d009      	beq.n	8005344 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	61da      	str	r2, [r3, #28]
 8005336:	e005      	b.n	8005344 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fb fd10 	bl	8000d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800537a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c8:	ea42 0103 	orr.w	r1, r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	0c1b      	lsrs	r3, r3, #16
 80053e2:	f003 0104 	and.w	r1, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	f003 0210 	and.w	r2, r3, #16
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005404:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e041      	b.n	80054b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7fb fce5 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3304      	adds	r3, #4
 800545a:	4619      	mov	r1, r3
 800545c:	4610      	mov	r0, r2
 800545e:	f000 fad9 	bl	8005a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e041      	b.n	8005552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f839 	bl	800555a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4619      	mov	r1, r3
 80054fa:	4610      	mov	r0, r2
 80054fc:	f000 fa8a 	bl	8005a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d109      	bne.n	8005594 <HAL_TIM_PWM_Start+0x24>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	e022      	b.n	80055da <HAL_TIM_PWM_Start+0x6a>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b04      	cmp	r3, #4
 8005598:	d109      	bne.n	80055ae <HAL_TIM_PWM_Start+0x3e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	bf14      	ite	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	2300      	moveq	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	e015      	b.n	80055da <HAL_TIM_PWM_Start+0x6a>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d109      	bne.n	80055c8 <HAL_TIM_PWM_Start+0x58>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b01      	cmp	r3, #1
 80055be:	bf14      	ite	ne
 80055c0:	2301      	movne	r3, #1
 80055c2:	2300      	moveq	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	e008      	b.n	80055da <HAL_TIM_PWM_Start+0x6a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	bf14      	ite	ne
 80055d4:	2301      	movne	r3, #1
 80055d6:	2300      	moveq	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e07c      	b.n	80056dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_PWM_Start+0x82>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f0:	e013      	b.n	800561a <HAL_TIM_PWM_Start+0xaa>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_PWM_Start+0x92>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005600:	e00b      	b.n	800561a <HAL_TIM_PWM_Start+0xaa>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b08      	cmp	r3, #8
 8005606:	d104      	bne.n	8005612 <HAL_TIM_PWM_Start+0xa2>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005610:	e003      	b.n	800561a <HAL_TIM_PWM_Start+0xaa>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2201      	movs	r2, #1
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fcec 	bl	8006000 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2d      	ldr	r2, [pc, #180]	; (80056e4 <HAL_TIM_PWM_Start+0x174>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIM_PWM_Start+0xcc>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2c      	ldr	r2, [pc, #176]	; (80056e8 <HAL_TIM_PWM_Start+0x178>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d101      	bne.n	8005640 <HAL_TIM_PWM_Start+0xd0>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_TIM_PWM_Start+0xd2>
 8005640:	2300      	movs	r3, #0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <HAL_TIM_PWM_Start+0x174>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d022      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005668:	d01d      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1f      	ldr	r2, [pc, #124]	; (80056ec <HAL_TIM_PWM_Start+0x17c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d018      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <HAL_TIM_PWM_Start+0x180>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <HAL_TIM_PWM_Start+0x184>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00e      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <HAL_TIM_PWM_Start+0x178>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_TIM_PWM_Start+0x188>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x136>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a16      	ldr	r2, [pc, #88]	; (80056fc <HAL_TIM_PWM_Start+0x18c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d111      	bne.n	80056ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d010      	beq.n	80056da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c8:	e007      	b.n	80056da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40010400 	.word	0x40010400
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40000c00 	.word	0x40000c00
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40001800 	.word	0x40001800

08005700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800571a:	2302      	movs	r3, #2
 800571c:	e0ae      	b.n	800587c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b0c      	cmp	r3, #12
 800572a:	f200 809f 	bhi.w	800586c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800572e:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	08005769 	.word	0x08005769
 8005738:	0800586d 	.word	0x0800586d
 800573c:	0800586d 	.word	0x0800586d
 8005740:	0800586d 	.word	0x0800586d
 8005744:	080057a9 	.word	0x080057a9
 8005748:	0800586d 	.word	0x0800586d
 800574c:	0800586d 	.word	0x0800586d
 8005750:	0800586d 	.word	0x0800586d
 8005754:	080057eb 	.word	0x080057eb
 8005758:	0800586d 	.word	0x0800586d
 800575c:	0800586d 	.word	0x0800586d
 8005760:	0800586d 	.word	0x0800586d
 8005764:	0800582b 	.word	0x0800582b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f9fc 	bl	8005b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0208 	orr.w	r2, r2, #8
 8005782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0204 	bic.w	r2, r2, #4
 8005792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6999      	ldr	r1, [r3, #24]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	619a      	str	r2, [r3, #24]
      break;
 80057a6:	e064      	b.n	8005872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fa4c 	bl	8005c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6999      	ldr	r1, [r3, #24]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	021a      	lsls	r2, r3, #8
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	619a      	str	r2, [r3, #24]
      break;
 80057e8:	e043      	b.n	8005872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 faa1 	bl	8005d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0208 	orr.w	r2, r2, #8
 8005804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0204 	bic.w	r2, r2, #4
 8005814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69d9      	ldr	r1, [r3, #28]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	61da      	str	r2, [r3, #28]
      break;
 8005828:	e023      	b.n	8005872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	4618      	mov	r0, r3
 8005832:	f000 faf5 	bl	8005e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69d9      	ldr	r1, [r3, #28]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	021a      	lsls	r2, r3, #8
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	61da      	str	r2, [r3, #28]
      break;
 800586a:	e002      	b.n	8005872 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	75fb      	strb	r3, [r7, #23]
      break;
 8005870:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800587a:	7dfb      	ldrb	r3, [r7, #23]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_TIM_ConfigClockSource+0x1c>
 800589c:	2302      	movs	r3, #2
 800589e:	e0b4      	b.n	8005a0a <HAL_TIM_ConfigClockSource+0x186>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d8:	d03e      	beq.n	8005958 <HAL_TIM_ConfigClockSource+0xd4>
 80058da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058de:	f200 8087 	bhi.w	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 80058e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e6:	f000 8086 	beq.w	80059f6 <HAL_TIM_ConfigClockSource+0x172>
 80058ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ee:	d87f      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 80058f0:	2b70      	cmp	r3, #112	; 0x70
 80058f2:	d01a      	beq.n	800592a <HAL_TIM_ConfigClockSource+0xa6>
 80058f4:	2b70      	cmp	r3, #112	; 0x70
 80058f6:	d87b      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 80058f8:	2b60      	cmp	r3, #96	; 0x60
 80058fa:	d050      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x11a>
 80058fc:	2b60      	cmp	r3, #96	; 0x60
 80058fe:	d877      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005900:	2b50      	cmp	r3, #80	; 0x50
 8005902:	d03c      	beq.n	800597e <HAL_TIM_ConfigClockSource+0xfa>
 8005904:	2b50      	cmp	r3, #80	; 0x50
 8005906:	d873      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d058      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x13a>
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	d86f      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005910:	2b30      	cmp	r3, #48	; 0x30
 8005912:	d064      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x15a>
 8005914:	2b30      	cmp	r3, #48	; 0x30
 8005916:	d86b      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d060      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x15a>
 800591c:	2b20      	cmp	r3, #32
 800591e:	d867      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d05c      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x15a>
 8005924:	2b10      	cmp	r3, #16
 8005926:	d05a      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x15a>
 8005928:	e062      	b.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800593a:	f000 fb41 	bl	8005fc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800594c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	609a      	str	r2, [r3, #8]
      break;
 8005956:	e04f      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005968:	f000 fb2a 	bl	8005fc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800597a:	609a      	str	r2, [r3, #8]
      break;
 800597c:	e03c      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800598a:	461a      	mov	r2, r3
 800598c:	f000 fa9e 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2150      	movs	r1, #80	; 0x50
 8005996:	4618      	mov	r0, r3
 8005998:	f000 faf7 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 800599c:	e02c      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059aa:	461a      	mov	r2, r3
 80059ac:	f000 fabd 	bl	8005f2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2160      	movs	r1, #96	; 0x60
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fae7 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 80059bc:	e01c      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ca:	461a      	mov	r2, r3
 80059cc:	f000 fa7e 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2140      	movs	r1, #64	; 0x40
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fad7 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 80059dc:	e00c      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f000 face 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 80059ee:	e003      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	73fb      	strb	r3, [r7, #15]
      break;
 80059f4:	e000      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a46      	ldr	r2, [pc, #280]	; (8005b40 <TIM_Base_SetConfig+0x12c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d00f      	beq.n	8005a54 <TIM_Base_SetConfig+0x40>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a43      	ldr	r2, [pc, #268]	; (8005b44 <TIM_Base_SetConfig+0x130>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00b      	beq.n	8005a54 <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a42      	ldr	r2, [pc, #264]	; (8005b48 <TIM_Base_SetConfig+0x134>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d007      	beq.n	8005a54 <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a41      	ldr	r2, [pc, #260]	; (8005b4c <TIM_Base_SetConfig+0x138>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d003      	beq.n	8005a54 <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a40      	ldr	r2, [pc, #256]	; (8005b50 <TIM_Base_SetConfig+0x13c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d108      	bne.n	8005a66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a35      	ldr	r2, [pc, #212]	; (8005b40 <TIM_Base_SetConfig+0x12c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d02b      	beq.n	8005ac6 <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a74:	d027      	beq.n	8005ac6 <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a32      	ldr	r2, [pc, #200]	; (8005b44 <TIM_Base_SetConfig+0x130>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d023      	beq.n	8005ac6 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a31      	ldr	r2, [pc, #196]	; (8005b48 <TIM_Base_SetConfig+0x134>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01f      	beq.n	8005ac6 <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a30      	ldr	r2, [pc, #192]	; (8005b4c <TIM_Base_SetConfig+0x138>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d01b      	beq.n	8005ac6 <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2f      	ldr	r2, [pc, #188]	; (8005b50 <TIM_Base_SetConfig+0x13c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d017      	beq.n	8005ac6 <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2e      	ldr	r2, [pc, #184]	; (8005b54 <TIM_Base_SetConfig+0x140>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a2d      	ldr	r2, [pc, #180]	; (8005b58 <TIM_Base_SetConfig+0x144>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00f      	beq.n	8005ac6 <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a2c      	ldr	r2, [pc, #176]	; (8005b5c <TIM_Base_SetConfig+0x148>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00b      	beq.n	8005ac6 <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2b      	ldr	r2, [pc, #172]	; (8005b60 <TIM_Base_SetConfig+0x14c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d007      	beq.n	8005ac6 <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <TIM_Base_SetConfig+0x150>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d003      	beq.n	8005ac6 <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a29      	ldr	r2, [pc, #164]	; (8005b68 <TIM_Base_SetConfig+0x154>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d108      	bne.n	8005ad8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a10      	ldr	r2, [pc, #64]	; (8005b40 <TIM_Base_SetConfig+0x12c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_Base_SetConfig+0xf8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a12      	ldr	r2, [pc, #72]	; (8005b50 <TIM_Base_SetConfig+0x13c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d103      	bne.n	8005b14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d105      	bne.n	8005b32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	611a      	str	r2, [r3, #16]
  }
}
 8005b32:	bf00      	nop
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40010000 	.word	0x40010000
 8005b44:	40000400 	.word	0x40000400
 8005b48:	40000800 	.word	0x40000800
 8005b4c:	40000c00 	.word	0x40000c00
 8005b50:	40010400 	.word	0x40010400
 8005b54:	40014000 	.word	0x40014000
 8005b58:	40014400 	.word	0x40014400
 8005b5c:	40014800 	.word	0x40014800
 8005b60:	40001800 	.word	0x40001800
 8005b64:	40001c00 	.word	0x40001c00
 8005b68:	40002000 	.word	0x40002000

08005b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f023 0201 	bic.w	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f023 0302 	bic.w	r3, r3, #2
 8005bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <TIM_OC1_SetConfig+0xd8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d003      	beq.n	8005bd0 <TIM_OC1_SetConfig+0x64>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <TIM_OC1_SetConfig+0xdc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d10c      	bne.n	8005bea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f023 0308 	bic.w	r3, r3, #8
 8005bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f023 0304 	bic.w	r3, r3, #4
 8005be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a15      	ldr	r2, [pc, #84]	; (8005c44 <TIM_OC1_SetConfig+0xd8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <TIM_OC1_SetConfig+0x8e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a14      	ldr	r2, [pc, #80]	; (8005c48 <TIM_OC1_SetConfig+0xdc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d111      	bne.n	8005c1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	621a      	str	r2, [r3, #32]
}
 8005c38:	bf00      	nop
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40010000 	.word	0x40010000
 8005c48:	40010400 	.word	0x40010400

08005c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	f023 0210 	bic.w	r2, r3, #16
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 0320 	bic.w	r3, r3, #32
 8005c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <TIM_OC2_SetConfig+0xe4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d003      	beq.n	8005cb4 <TIM_OC2_SetConfig+0x68>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <TIM_OC2_SetConfig+0xe8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d10d      	bne.n	8005cd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a17      	ldr	r2, [pc, #92]	; (8005d30 <TIM_OC2_SetConfig+0xe4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_OC2_SetConfig+0x94>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a16      	ldr	r2, [pc, #88]	; (8005d34 <TIM_OC2_SetConfig+0xe8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d113      	bne.n	8005d08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40010400 	.word	0x40010400

08005d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <TIM_OC3_SetConfig+0xe0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_OC3_SetConfig+0x66>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a20      	ldr	r2, [pc, #128]	; (8005e1c <TIM_OC3_SetConfig+0xe4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d10d      	bne.n	8005dba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a16      	ldr	r2, [pc, #88]	; (8005e18 <TIM_OC3_SetConfig+0xe0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_OC3_SetConfig+0x92>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <TIM_OC3_SetConfig+0xe4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d113      	bne.n	8005df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	621a      	str	r2, [r3, #32]
}
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	40010000 	.word	0x40010000
 8005e1c:	40010400 	.word	0x40010400

08005e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	031b      	lsls	r3, r3, #12
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a12      	ldr	r2, [pc, #72]	; (8005ec4 <TIM_OC4_SetConfig+0xa4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d003      	beq.n	8005e88 <TIM_OC4_SetConfig+0x68>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a11      	ldr	r2, [pc, #68]	; (8005ec8 <TIM_OC4_SetConfig+0xa8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d109      	bne.n	8005e9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	019b      	lsls	r3, r3, #6
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40010400 	.word	0x40010400

08005ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 030a 	bic.w	r3, r3, #10
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b087      	sub	sp, #28
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f023 0210 	bic.w	r2, r3, #16
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f043 0307 	orr.w	r3, r3, #7
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	021a      	lsls	r2, r3, #8
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	2201      	movs	r2, #1
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	43db      	mvns	r3, r3
 8006022:	401a      	ands	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1a      	ldr	r2, [r3, #32]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	431a      	orrs	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e05a      	b.n	800611a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a21      	ldr	r2, [pc, #132]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d022      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b0:	d01d      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1d      	ldr	r2, [pc, #116]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d018      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1b      	ldr	r2, [pc, #108]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1a      	ldr	r2, [pc, #104]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00e      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a18      	ldr	r2, [pc, #96]	; (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d009      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a17      	ldr	r2, [pc, #92]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d004      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a15      	ldr	r2, [pc, #84]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d10c      	bne.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40010000 	.word	0x40010000
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800
 8006134:	40000c00 	.word	0x40000c00
 8006138:	40010400 	.word	0x40010400
 800613c:	40014000 	.word	0x40014000
 8006140:	40001800 	.word	0x40001800

08006144 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800615c:	2302      	movs	r3, #2
 800615e:	e03d      	b.n	80061dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e042      	b.n	8006280 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fa fe5c 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2224      	movs	r2, #36	; 0x24
 8006218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800622a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fdbd 	bl	8006dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695a      	ldr	r2, [r3, #20]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	4613      	mov	r3, r2
 8006296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d175      	bne.n	8006394 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_UART_Transmit+0x2c>
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e06e      	b.n	8006396 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2221      	movs	r2, #33	; 0x21
 80062c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062c6:	f7fa ffbf 	bl	8001248 <HAL_GetTick>
 80062ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	88fa      	ldrh	r2, [r7, #6]
 80062d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	88fa      	ldrh	r2, [r7, #6]
 80062d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e0:	d108      	bne.n	80062f4 <HAL_UART_Transmit+0x6c>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d104      	bne.n	80062f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	61bb      	str	r3, [r7, #24]
 80062f2:	e003      	b.n	80062fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062f8:	2300      	movs	r3, #0
 80062fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062fc:	e02e      	b.n	800635c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2200      	movs	r2, #0
 8006306:	2180      	movs	r1, #128	; 0x80
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fb1f 	bl	800694c <UART_WaitOnFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e03a      	b.n	8006396 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006334:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	3302      	adds	r3, #2
 800633a:	61bb      	str	r3, [r7, #24]
 800633c:	e007      	b.n	800634e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	781a      	ldrb	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	3301      	adds	r3, #1
 800634c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1cb      	bne.n	80062fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2200      	movs	r2, #0
 800636e:	2140      	movs	r1, #64	; 0x40
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 faeb 	bl	800694c <UART_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e006      	b.n	8006396 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e000      	b.n	8006396 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	4618      	mov	r0, r3
 8006398:	3720      	adds	r7, #32
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	4613      	mov	r3, r2
 80063aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d112      	bne.n	80063de <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_UART_Receive_IT+0x26>
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e00b      	b.n	80063e0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	461a      	mov	r2, r3
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fb12 	bl	80069fe <UART_Start_Receive_IT>
 80063da:	4603      	mov	r3, r0
 80063dc:	e000      	b.n	80063e0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b0ba      	sub	sp, #232	; 0xe8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800640e:	2300      	movs	r3, #0
 8006410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006414:	2300      	movs	r3, #0
 8006416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800641a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10f      	bne.n	800644e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_UART_IRQHandler+0x66>
 800643a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fbf2 	bl	8006c30 <UART_Receive_IT>
      return;
 800644c:	e25b      	b.n	8006906 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800644e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80de 	beq.w	8006614 <HAL_UART_IRQHandler+0x22c>
 8006458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d106      	bne.n	8006472 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006468:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80d1 	beq.w	8006614 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <HAL_UART_IRQHandler+0xae>
 800647e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648e:	f043 0201 	orr.w	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00b      	beq.n	80064ba <HAL_UART_IRQHandler+0xd2>
 80064a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b2:	f043 0202 	orr.w	r2, r3, #2
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00b      	beq.n	80064de <HAL_UART_IRQHandler+0xf6>
 80064c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d6:	f043 0204 	orr.w	r2, r3, #4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d011      	beq.n	800650e <HAL_UART_IRQHandler+0x126>
 80064ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d105      	bne.n	8006502 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	f043 0208 	orr.w	r2, r3, #8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 81f2 	beq.w	80068fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d008      	beq.n	8006536 <HAL_UART_IRQHandler+0x14e>
 8006524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fb7d 	bl	8006c30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d103      	bne.n	8006562 <HAL_UART_IRQHandler+0x17a>
 800655a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800655e:	2b00      	cmp	r3, #0
 8006560:	d04f      	beq.n	8006602 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa85 	bl	8006a72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d141      	bne.n	80065fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3314      	adds	r3, #20
 800657c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800658c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3314      	adds	r3, #20
 800659e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1d9      	bne.n	8006576 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d013      	beq.n	80065f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ce:	4a7e      	ldr	r2, [pc, #504]	; (80067c8 <HAL_UART_IRQHandler+0x3e0>)
 80065d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fa ffe7 	bl	80015aa <HAL_DMA_Abort_IT>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d016      	beq.n	8006610 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80065ec:	4610      	mov	r0, r2
 80065ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f0:	e00e      	b.n	8006610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f994 	bl	8006920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f8:	e00a      	b.n	8006610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f990 	bl	8006920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006600:	e006      	b.n	8006610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f98c 	bl	8006920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800660e:	e175      	b.n	80068fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006610:	bf00      	nop
    return;
 8006612:	e173      	b.n	80068fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	2b01      	cmp	r3, #1
 800661a:	f040 814f 	bne.w	80068bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800661e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006622:	f003 0310 	and.w	r3, r3, #16
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 8148 	beq.w	80068bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006630:	f003 0310 	and.w	r3, r3, #16
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 8141 	beq.w	80068bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800663a:	2300      	movs	r3, #0
 800663c:	60bb      	str	r3, [r7, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	f040 80b6 	bne.w	80067cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800666c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8145 	beq.w	8006900 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800667a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800667e:	429a      	cmp	r2, r3
 8006680:	f080 813e 	bcs.w	8006900 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800668a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006696:	f000 8088 	beq.w	80067aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	330c      	adds	r3, #12
 80066c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1d9      	bne.n	800669a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3314      	adds	r3, #20
 80066ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066f8:	f023 0301 	bic.w	r3, r3, #1
 80066fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3314      	adds	r3, #20
 8006706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800670a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800670e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006712:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800671c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e1      	bne.n	80066e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3314      	adds	r3, #20
 8006728:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3314      	adds	r3, #20
 8006742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006746:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006748:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800674c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e3      	bne.n	8006722 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	330c      	adds	r3, #12
 800676e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677a:	f023 0310 	bic.w	r3, r3, #16
 800677e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	330c      	adds	r3, #12
 8006788:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800678c:	65ba      	str	r2, [r7, #88]	; 0x58
 800678e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006792:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800679a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e3      	bne.n	8006768 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fa fe90 	bl	80014ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	b29b      	uxth	r3, r3
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f8b7 	bl	8006934 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067c6:	e09b      	b.n	8006900 <HAL_UART_IRQHandler+0x518>
 80067c8:	08006b39 	.word	0x08006b39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 808e 	beq.w	8006904 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80067e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 8089 	beq.w	8006904 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	330c      	adds	r3, #12
 80067f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006816:	647a      	str	r2, [r7, #68]	; 0x44
 8006818:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800681c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e3      	bne.n	80067f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3314      	adds	r3, #20
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	623b      	str	r3, [r7, #32]
   return(result);
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	f023 0301 	bic.w	r3, r3, #1
 8006840:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3314      	adds	r3, #20
 800684a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800684e:	633a      	str	r2, [r7, #48]	; 0x30
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e3      	bne.n	800682a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0310 	bic.w	r3, r3, #16
 8006886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	330c      	adds	r3, #12
 8006890:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006894:	61fa      	str	r2, [r7, #28]
 8006896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	69b9      	ldr	r1, [r7, #24]
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	617b      	str	r3, [r7, #20]
   return(result);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e3      	bne.n	8006870 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f83d 	bl	8006934 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068ba:	e023      	b.n	8006904 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d009      	beq.n	80068dc <HAL_UART_IRQHandler+0x4f4>
 80068c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f943 	bl	8006b60 <UART_Transmit_IT>
    return;
 80068da:	e014      	b.n	8006906 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00e      	beq.n	8006906 <HAL_UART_IRQHandler+0x51e>
 80068e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d008      	beq.n	8006906 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f983 	bl	8006c00 <UART_EndTransmit_IT>
    return;
 80068fa:	e004      	b.n	8006906 <HAL_UART_IRQHandler+0x51e>
    return;
 80068fc:	bf00      	nop
 80068fe:	e002      	b.n	8006906 <HAL_UART_IRQHandler+0x51e>
      return;
 8006900:	bf00      	nop
 8006902:	e000      	b.n	8006906 <HAL_UART_IRQHandler+0x51e>
      return;
 8006904:	bf00      	nop
  }
}
 8006906:	37e8      	adds	r7, #232	; 0xe8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800695c:	e03b      	b.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006964:	d037      	beq.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006966:	f7fa fc6f 	bl	8001248 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	6a3a      	ldr	r2, [r7, #32]
 8006972:	429a      	cmp	r2, r3
 8006974:	d302      	bcc.n	800697c <UART_WaitOnFlagUntilTimeout+0x30>
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e03a      	b.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d023      	beq.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b80      	cmp	r3, #128	; 0x80
 8006992:	d020      	beq.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b40      	cmp	r3, #64	; 0x40
 8006998:	d01d      	beq.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d116      	bne.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 f857 	bl	8006a72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2208      	movs	r2, #8
 80069c8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e00f      	b.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4013      	ands	r3, r2
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	bf0c      	ite	eq
 80069e6:	2301      	moveq	r3, #1
 80069e8:	2300      	movne	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d0b4      	beq.n	800695e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b085      	sub	sp, #20
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	88fa      	ldrh	r2, [r7, #6]
 8006a16:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	88fa      	ldrh	r2, [r7, #6]
 8006a1c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2222      	movs	r2, #34	; 0x22
 8006a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d007      	beq.n	8006a44 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a42:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695a      	ldr	r2, [r3, #20]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0220 	orr.w	r2, r2, #32
 8006a62:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b095      	sub	sp, #84	; 0x54
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	330c      	adds	r3, #12
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a9a:	643a      	str	r2, [r7, #64]	; 0x40
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e5      	bne.n	8006a7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3314      	adds	r3, #20
 8006ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3314      	adds	r3, #20
 8006acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e5      	bne.n	8006aae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d119      	bne.n	8006b1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	330c      	adds	r3, #12
 8006af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f023 0310 	bic.w	r3, r3, #16
 8006b00:	647b      	str	r3, [r7, #68]	; 0x44
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b0a:	61ba      	str	r2, [r7, #24]
 8006b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6979      	ldr	r1, [r7, #20]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	613b      	str	r3, [r7, #16]
   return(result);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e5      	bne.n	8006aea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b2c:	bf00      	nop
 8006b2e:	3754      	adds	r7, #84	; 0x54
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7ff fee4 	bl	8006920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b21      	cmp	r3, #33	; 0x21
 8006b72:	d13e      	bne.n	8006bf2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7c:	d114      	bne.n	8006ba8 <UART_Transmit_IT+0x48>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d110      	bne.n	8006ba8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	1c9a      	adds	r2, r3, #2
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	621a      	str	r2, [r3, #32]
 8006ba6:	e008      	b.n	8006bba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	1c59      	adds	r1, r3, #1
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6211      	str	r1, [r2, #32]
 8006bb2:	781a      	ldrb	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10f      	bne.n	8006bee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e000      	b.n	8006bf4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bf2:	2302      	movs	r3, #2
  }
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff fe73 	bl	800690c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08c      	sub	sp, #48	; 0x30
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b22      	cmp	r3, #34	; 0x22
 8006c42:	f040 80ae 	bne.w	8006da2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4e:	d117      	bne.n	8006c80 <UART_Receive_IT+0x50>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d113      	bne.n	8006c80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c60:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c78:	1c9a      	adds	r2, r3, #2
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	629a      	str	r2, [r3, #40]	; 0x28
 8006c7e:	e026      	b.n	8006cce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c92:	d007      	beq.n	8006ca4 <UART_Receive_IT+0x74>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <UART_Receive_IT+0x82>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	701a      	strb	r2, [r3, #0]
 8006cb0:	e008      	b.n	8006cc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d15d      	bne.n	8006d9e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0220 	bic.w	r2, r2, #32
 8006cf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695a      	ldr	r2, [r3, #20]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0201 	bic.w	r2, r2, #1
 8006d10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d135      	bne.n	8006d94 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	330c      	adds	r3, #12
 8006d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f023 0310 	bic.w	r3, r3, #16
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4e:	623a      	str	r2, [r7, #32]
 8006d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	69f9      	ldr	r1, [r7, #28]
 8006d54:	6a3a      	ldr	r2, [r7, #32]
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e5      	bne.n	8006d2e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d10a      	bne.n	8006d86 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fdd1 	bl	8006934 <HAL_UARTEx_RxEventCallback>
 8006d92:	e002      	b.n	8006d9a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7f9 fb95 	bl	80004c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e002      	b.n	8006da4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e000      	b.n	8006da4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006da2:	2302      	movs	r3, #2
  }
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3730      	adds	r7, #48	; 0x30
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db0:	b0c0      	sub	sp, #256	; 0x100
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc8:	68d9      	ldr	r1, [r3, #12]
 8006dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	ea40 0301 	orr.w	r3, r0, r1
 8006dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e04:	f021 010c 	bic.w	r1, r1, #12
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e12:	430b      	orrs	r3, r1
 8006e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e26:	6999      	ldr	r1, [r3, #24]
 8006e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	ea40 0301 	orr.w	r3, r0, r1
 8006e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4b8f      	ldr	r3, [pc, #572]	; (8007078 <UART_SetConfig+0x2cc>)
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d005      	beq.n	8006e4c <UART_SetConfig+0xa0>
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	4b8d      	ldr	r3, [pc, #564]	; (800707c <UART_SetConfig+0x2d0>)
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d104      	bne.n	8006e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e4c:	f7fe f908 	bl	8005060 <HAL_RCC_GetPCLK2Freq>
 8006e50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e54:	e003      	b.n	8006e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e56:	f7fe f8ef 	bl	8005038 <HAL_RCC_GetPCLK1Freq>
 8006e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e68:	f040 810c 	bne.w	8007084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e7e:	4622      	mov	r2, r4
 8006e80:	462b      	mov	r3, r5
 8006e82:	1891      	adds	r1, r2, r2
 8006e84:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e86:	415b      	adcs	r3, r3
 8006e88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e8e:	4621      	mov	r1, r4
 8006e90:	eb12 0801 	adds.w	r8, r2, r1
 8006e94:	4629      	mov	r1, r5
 8006e96:	eb43 0901 	adc.w	r9, r3, r1
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	f04f 0300 	mov.w	r3, #0
 8006ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eae:	4690      	mov	r8, r2
 8006eb0:	4699      	mov	r9, r3
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	eb18 0303 	adds.w	r3, r8, r3
 8006eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ebc:	462b      	mov	r3, r5
 8006ebe:	eb49 0303 	adc.w	r3, r9, r3
 8006ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006eda:	460b      	mov	r3, r1
 8006edc:	18db      	adds	r3, r3, r3
 8006ede:	653b      	str	r3, [r7, #80]	; 0x50
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	eb42 0303 	adc.w	r3, r2, r3
 8006ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ef0:	f7f9 f96a 	bl	80001c8 <__aeabi_uldivmod>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4b61      	ldr	r3, [pc, #388]	; (8007080 <UART_SetConfig+0x2d4>)
 8006efa:	fba3 2302 	umull	r2, r3, r3, r2
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	011c      	lsls	r4, r3, #4
 8006f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f14:	4642      	mov	r2, r8
 8006f16:	464b      	mov	r3, r9
 8006f18:	1891      	adds	r1, r2, r2
 8006f1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f1c:	415b      	adcs	r3, r3
 8006f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f24:	4641      	mov	r1, r8
 8006f26:	eb12 0a01 	adds.w	sl, r2, r1
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8006f30:	f04f 0200 	mov.w	r2, #0
 8006f34:	f04f 0300 	mov.w	r3, #0
 8006f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f44:	4692      	mov	sl, r2
 8006f46:	469b      	mov	fp, r3
 8006f48:	4643      	mov	r3, r8
 8006f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8006f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f52:	464b      	mov	r3, r9
 8006f54:	eb4b 0303 	adc.w	r3, fp, r3
 8006f58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f70:	460b      	mov	r3, r1
 8006f72:	18db      	adds	r3, r3, r3
 8006f74:	643b      	str	r3, [r7, #64]	; 0x40
 8006f76:	4613      	mov	r3, r2
 8006f78:	eb42 0303 	adc.w	r3, r2, r3
 8006f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f86:	f7f9 f91f 	bl	80001c8 <__aeabi_uldivmod>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4b3b      	ldr	r3, [pc, #236]	; (8007080 <UART_SetConfig+0x2d4>)
 8006f92:	fba3 2301 	umull	r2, r3, r3, r1
 8006f96:	095b      	lsrs	r3, r3, #5
 8006f98:	2264      	movs	r2, #100	; 0x64
 8006f9a:	fb02 f303 	mul.w	r3, r2, r3
 8006f9e:	1acb      	subs	r3, r1, r3
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fa6:	4b36      	ldr	r3, [pc, #216]	; (8007080 <UART_SetConfig+0x2d4>)
 8006fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fb4:	441c      	add	r4, r3
 8006fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006fc8:	4642      	mov	r2, r8
 8006fca:	464b      	mov	r3, r9
 8006fcc:	1891      	adds	r1, r2, r2
 8006fce:	63b9      	str	r1, [r7, #56]	; 0x38
 8006fd0:	415b      	adcs	r3, r3
 8006fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006fd8:	4641      	mov	r1, r8
 8006fda:	1851      	adds	r1, r2, r1
 8006fdc:	6339      	str	r1, [r7, #48]	; 0x30
 8006fde:	4649      	mov	r1, r9
 8006fe0:	414b      	adcs	r3, r1
 8006fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	f04f 0300 	mov.w	r3, #0
 8006fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ff0:	4659      	mov	r1, fp
 8006ff2:	00cb      	lsls	r3, r1, #3
 8006ff4:	4651      	mov	r1, sl
 8006ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ffa:	4651      	mov	r1, sl
 8006ffc:	00ca      	lsls	r2, r1, #3
 8006ffe:	4610      	mov	r0, r2
 8007000:	4619      	mov	r1, r3
 8007002:	4603      	mov	r3, r0
 8007004:	4642      	mov	r2, r8
 8007006:	189b      	adds	r3, r3, r2
 8007008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800700c:	464b      	mov	r3, r9
 800700e:	460a      	mov	r2, r1
 8007010:	eb42 0303 	adc.w	r3, r2, r3
 8007014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007024:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800702c:	460b      	mov	r3, r1
 800702e:	18db      	adds	r3, r3, r3
 8007030:	62bb      	str	r3, [r7, #40]	; 0x28
 8007032:	4613      	mov	r3, r2
 8007034:	eb42 0303 	adc.w	r3, r2, r3
 8007038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800703a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800703e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007042:	f7f9 f8c1 	bl	80001c8 <__aeabi_uldivmod>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <UART_SetConfig+0x2d4>)
 800704c:	fba3 1302 	umull	r1, r3, r3, r2
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	2164      	movs	r1, #100	; 0x64
 8007054:	fb01 f303 	mul.w	r3, r1, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	3332      	adds	r3, #50	; 0x32
 800705e:	4a08      	ldr	r2, [pc, #32]	; (8007080 <UART_SetConfig+0x2d4>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	f003 0207 	and.w	r2, r3, #7
 800706a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4422      	add	r2, r4
 8007072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007074:	e106      	b.n	8007284 <UART_SetConfig+0x4d8>
 8007076:	bf00      	nop
 8007078:	40011000 	.word	0x40011000
 800707c:	40011400 	.word	0x40011400
 8007080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007088:	2200      	movs	r2, #0
 800708a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800708e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007096:	4642      	mov	r2, r8
 8007098:	464b      	mov	r3, r9
 800709a:	1891      	adds	r1, r2, r2
 800709c:	6239      	str	r1, [r7, #32]
 800709e:	415b      	adcs	r3, r3
 80070a0:	627b      	str	r3, [r7, #36]	; 0x24
 80070a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070a6:	4641      	mov	r1, r8
 80070a8:	1854      	adds	r4, r2, r1
 80070aa:	4649      	mov	r1, r9
 80070ac:	eb43 0501 	adc.w	r5, r3, r1
 80070b0:	f04f 0200 	mov.w	r2, #0
 80070b4:	f04f 0300 	mov.w	r3, #0
 80070b8:	00eb      	lsls	r3, r5, #3
 80070ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070be:	00e2      	lsls	r2, r4, #3
 80070c0:	4614      	mov	r4, r2
 80070c2:	461d      	mov	r5, r3
 80070c4:	4643      	mov	r3, r8
 80070c6:	18e3      	adds	r3, r4, r3
 80070c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070cc:	464b      	mov	r3, r9
 80070ce:	eb45 0303 	adc.w	r3, r5, r3
 80070d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80070f2:	4629      	mov	r1, r5
 80070f4:	008b      	lsls	r3, r1, #2
 80070f6:	4621      	mov	r1, r4
 80070f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070fc:	4621      	mov	r1, r4
 80070fe:	008a      	lsls	r2, r1, #2
 8007100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007104:	f7f9 f860 	bl	80001c8 <__aeabi_uldivmod>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4b60      	ldr	r3, [pc, #384]	; (8007290 <UART_SetConfig+0x4e4>)
 800710e:	fba3 2302 	umull	r2, r3, r3, r2
 8007112:	095b      	lsrs	r3, r3, #5
 8007114:	011c      	lsls	r4, r3, #4
 8007116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800711a:	2200      	movs	r2, #0
 800711c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007120:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007128:	4642      	mov	r2, r8
 800712a:	464b      	mov	r3, r9
 800712c:	1891      	adds	r1, r2, r2
 800712e:	61b9      	str	r1, [r7, #24]
 8007130:	415b      	adcs	r3, r3
 8007132:	61fb      	str	r3, [r7, #28]
 8007134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007138:	4641      	mov	r1, r8
 800713a:	1851      	adds	r1, r2, r1
 800713c:	6139      	str	r1, [r7, #16]
 800713e:	4649      	mov	r1, r9
 8007140:	414b      	adcs	r3, r1
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007150:	4659      	mov	r1, fp
 8007152:	00cb      	lsls	r3, r1, #3
 8007154:	4651      	mov	r1, sl
 8007156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800715a:	4651      	mov	r1, sl
 800715c:	00ca      	lsls	r2, r1, #3
 800715e:	4610      	mov	r0, r2
 8007160:	4619      	mov	r1, r3
 8007162:	4603      	mov	r3, r0
 8007164:	4642      	mov	r2, r8
 8007166:	189b      	adds	r3, r3, r2
 8007168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800716c:	464b      	mov	r3, r9
 800716e:	460a      	mov	r2, r1
 8007170:	eb42 0303 	adc.w	r3, r2, r3
 8007174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	67bb      	str	r3, [r7, #120]	; 0x78
 8007182:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007184:	f04f 0200 	mov.w	r2, #0
 8007188:	f04f 0300 	mov.w	r3, #0
 800718c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007190:	4649      	mov	r1, r9
 8007192:	008b      	lsls	r3, r1, #2
 8007194:	4641      	mov	r1, r8
 8007196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800719a:	4641      	mov	r1, r8
 800719c:	008a      	lsls	r2, r1, #2
 800719e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071a2:	f7f9 f811 	bl	80001c8 <__aeabi_uldivmod>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	4611      	mov	r1, r2
 80071ac:	4b38      	ldr	r3, [pc, #224]	; (8007290 <UART_SetConfig+0x4e4>)
 80071ae:	fba3 2301 	umull	r2, r3, r3, r1
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	2264      	movs	r2, #100	; 0x64
 80071b6:	fb02 f303 	mul.w	r3, r2, r3
 80071ba:	1acb      	subs	r3, r1, r3
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	3332      	adds	r3, #50	; 0x32
 80071c0:	4a33      	ldr	r2, [pc, #204]	; (8007290 <UART_SetConfig+0x4e4>)
 80071c2:	fba2 2303 	umull	r2, r3, r2, r3
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071cc:	441c      	add	r4, r3
 80071ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071d2:	2200      	movs	r2, #0
 80071d4:	673b      	str	r3, [r7, #112]	; 0x70
 80071d6:	677a      	str	r2, [r7, #116]	; 0x74
 80071d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80071dc:	4642      	mov	r2, r8
 80071de:	464b      	mov	r3, r9
 80071e0:	1891      	adds	r1, r2, r2
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	415b      	adcs	r3, r3
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071ec:	4641      	mov	r1, r8
 80071ee:	1851      	adds	r1, r2, r1
 80071f0:	6039      	str	r1, [r7, #0]
 80071f2:	4649      	mov	r1, r9
 80071f4:	414b      	adcs	r3, r1
 80071f6:	607b      	str	r3, [r7, #4]
 80071f8:	f04f 0200 	mov.w	r2, #0
 80071fc:	f04f 0300 	mov.w	r3, #0
 8007200:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007204:	4659      	mov	r1, fp
 8007206:	00cb      	lsls	r3, r1, #3
 8007208:	4651      	mov	r1, sl
 800720a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800720e:	4651      	mov	r1, sl
 8007210:	00ca      	lsls	r2, r1, #3
 8007212:	4610      	mov	r0, r2
 8007214:	4619      	mov	r1, r3
 8007216:	4603      	mov	r3, r0
 8007218:	4642      	mov	r2, r8
 800721a:	189b      	adds	r3, r3, r2
 800721c:	66bb      	str	r3, [r7, #104]	; 0x68
 800721e:	464b      	mov	r3, r9
 8007220:	460a      	mov	r2, r1
 8007222:	eb42 0303 	adc.w	r3, r2, r3
 8007226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	663b      	str	r3, [r7, #96]	; 0x60
 8007232:	667a      	str	r2, [r7, #100]	; 0x64
 8007234:	f04f 0200 	mov.w	r2, #0
 8007238:	f04f 0300 	mov.w	r3, #0
 800723c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007240:	4649      	mov	r1, r9
 8007242:	008b      	lsls	r3, r1, #2
 8007244:	4641      	mov	r1, r8
 8007246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800724a:	4641      	mov	r1, r8
 800724c:	008a      	lsls	r2, r1, #2
 800724e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007252:	f7f8 ffb9 	bl	80001c8 <__aeabi_uldivmod>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <UART_SetConfig+0x4e4>)
 800725c:	fba3 1302 	umull	r1, r3, r3, r2
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	2164      	movs	r1, #100	; 0x64
 8007264:	fb01 f303 	mul.w	r3, r1, r3
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	3332      	adds	r3, #50	; 0x32
 800726e:	4a08      	ldr	r2, [pc, #32]	; (8007290 <UART_SetConfig+0x4e4>)
 8007270:	fba2 2303 	umull	r2, r3, r2, r3
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	f003 020f 	and.w	r2, r3, #15
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4422      	add	r2, r4
 8007282:	609a      	str	r2, [r3, #8]
}
 8007284:	bf00      	nop
 8007286:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800728a:	46bd      	mov	sp, r7
 800728c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007290:	51eb851f 	.word	0x51eb851f

08007294 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007294:	b084      	sub	sp, #16
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	f107 001c 	add.w	r0, r7, #28
 80072a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d123      	bne.n	80072f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80072c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d105      	bne.n	80072ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f9dc 	bl	80076a8 <USB_CoreReset>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73fb      	strb	r3, [r7, #15]
 80072f4:	e01b      	b.n	800732e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f9d0 	bl	80076a8 <USB_CoreReset>
 8007308:	4603      	mov	r3, r0
 800730a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800730c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007310:	2b00      	cmp	r3, #0
 8007312:	d106      	bne.n	8007322 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
 8007320:	e005      	b.n	800732e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800732e:	7fbb      	ldrb	r3, [r7, #30]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d10b      	bne.n	800734c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f043 0206 	orr.w	r2, r3, #6
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f043 0220 	orr.w	r2, r3, #32
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007358:	b004      	add	sp, #16
 800735a:	4770      	bx	lr

0800735c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f043 0201 	orr.w	r2, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f023 0201 	bic.w	r2, r3, #1
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073bc:	78fb      	ldrb	r3, [r7, #3]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d115      	bne.n	80073ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073ce:	200a      	movs	r0, #10
 80073d0:	f7f9 ff46 	bl	8001260 <HAL_Delay>
      ms += 10U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	330a      	adds	r3, #10
 80073d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f956 	bl	800768c <USB_GetMode>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d01e      	beq.n	8007424 <USB_SetCurrentMode+0x84>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2bc7      	cmp	r3, #199	; 0xc7
 80073ea:	d9f0      	bls.n	80073ce <USB_SetCurrentMode+0x2e>
 80073ec:	e01a      	b.n	8007424 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d115      	bne.n	8007420 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007400:	200a      	movs	r0, #10
 8007402:	f7f9 ff2d 	bl	8001260 <HAL_Delay>
      ms += 10U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	330a      	adds	r3, #10
 800740a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f93d 	bl	800768c <USB_GetMode>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d005      	beq.n	8007424 <USB_SetCurrentMode+0x84>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2bc7      	cmp	r3, #199	; 0xc7
 800741c:	d9f0      	bls.n	8007400 <USB_SetCurrentMode+0x60>
 800741e:	e001      	b.n	8007424 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e005      	b.n	8007430 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2bc8      	cmp	r3, #200	; 0xc8
 8007428:	d101      	bne.n	800742e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007452:	d901      	bls.n	8007458 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e01b      	b.n	8007490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	daf2      	bge.n	8007446 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	019b      	lsls	r3, r3, #6
 8007468:	f043 0220 	orr.w	r2, r3, #32
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3301      	adds	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800747c:	d901      	bls.n	8007482 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e006      	b.n	8007490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b20      	cmp	r3, #32
 800748c:	d0f0      	beq.n	8007470 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80074b4:	d901      	bls.n	80074ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e018      	b.n	80074ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	daf2      	bge.n	80074a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2210      	movs	r2, #16
 80074ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3301      	adds	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80074d8:	d901      	bls.n	80074de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e006      	b.n	80074ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d0f0      	beq.n	80074cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b089      	sub	sp, #36	; 0x24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4611      	mov	r1, r2
 8007504:	461a      	mov	r2, r3
 8007506:	460b      	mov	r3, r1
 8007508:	71fb      	strb	r3, [r7, #7]
 800750a:	4613      	mov	r3, r2
 800750c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007516:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800751a:	2b00      	cmp	r3, #0
 800751c:	d123      	bne.n	8007566 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800751e:	88bb      	ldrh	r3, [r7, #4]
 8007520:	3303      	adds	r3, #3
 8007522:	089b      	lsrs	r3, r3, #2
 8007524:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007526:	2300      	movs	r3, #0
 8007528:	61bb      	str	r3, [r7, #24]
 800752a:	e018      	b.n	800755e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800752c:	79fb      	ldrb	r3, [r7, #7]
 800752e:	031a      	lsls	r2, r3, #12
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	4413      	add	r3, r2
 8007534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007538:	461a      	mov	r2, r3
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	3301      	adds	r3, #1
 8007544:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	3301      	adds	r3, #1
 800754a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	3301      	adds	r3, #1
 8007550:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	3301      	adds	r3, #1
 8007556:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	3301      	adds	r3, #1
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	429a      	cmp	r2, r3
 8007564:	d3e2      	bcc.n	800752c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3724      	adds	r7, #36	; 0x24
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007574:	b480      	push	{r7}
 8007576:	b08b      	sub	sp, #44	; 0x2c
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	4613      	mov	r3, r2
 8007580:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800758a:	88fb      	ldrh	r3, [r7, #6]
 800758c:	089b      	lsrs	r3, r3, #2
 800758e:	b29b      	uxth	r3, r3
 8007590:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	f003 0303 	and.w	r3, r3, #3
 8007598:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800759a:	2300      	movs	r3, #0
 800759c:	623b      	str	r3, [r7, #32]
 800759e:	e014      	b.n	80075ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	3301      	adds	r3, #1
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	3301      	adds	r3, #1
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	3301      	adds	r3, #1
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	3301      	adds	r3, #1
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	3301      	adds	r3, #1
 80075c8:	623b      	str	r3, [r7, #32]
 80075ca:	6a3a      	ldr	r2, [r7, #32]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d3e6      	bcc.n	80075a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075d2:	8bfb      	ldrh	r3, [r7, #30]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d01e      	beq.n	8007616 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e2:	461a      	mov	r2, r3
 80075e4:	f107 0310 	add.w	r3, r7, #16
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	fa22 f303 	lsr.w	r3, r2, r3
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	701a      	strb	r2, [r3, #0]
      i++;
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	3301      	adds	r3, #1
 8007602:	623b      	str	r3, [r7, #32]
      pDest++;
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	3301      	adds	r3, #1
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800760a:	8bfb      	ldrh	r3, [r7, #30]
 800760c:	3b01      	subs	r3, #1
 800760e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007610:	8bfb      	ldrh	r3, [r7, #30]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1ea      	bne.n	80075ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007618:	4618      	mov	r0, r3
 800761a:	372c      	adds	r7, #44	; 0x2c
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4013      	ands	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800763c:	68fb      	ldr	r3, [r7, #12]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800765a:	78fb      	ldrb	r3, [r7, #3]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	4013      	ands	r3, r2
 800767c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800767e:	68bb      	ldr	r3, [r7, #8]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	f003 0301 	and.w	r3, r3, #1
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80076c0:	d901      	bls.n	80076c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e01b      	b.n	80076fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	daf2      	bge.n	80076b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f043 0201 	orr.w	r2, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3301      	adds	r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80076ea:	d901      	bls.n	80076f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e006      	b.n	80076fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d0f0      	beq.n	80076de <USB_CoreReset+0x36>

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
	...

0800770c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800770c:	b084      	sub	sp, #16
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800771a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800772c:	461a      	mov	r2, r3
 800772e:	2300      	movs	r3, #0
 8007730:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d119      	bne.n	8007796 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007766:	2b01      	cmp	r3, #1
 8007768:	d10a      	bne.n	8007780 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007778:	f043 0304 	orr.w	r3, r3, #4
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	e014      	b.n	80077aa <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800778e:	f023 0304 	bic.w	r3, r3, #4
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	e009      	b.n	80077aa <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077a4:	f023 0304 	bic.w	r3, r3, #4
 80077a8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077aa:	2110      	movs	r1, #16
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff fe43 	bl	8007438 <USB_FlushTxFifo>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff fe6d 	bl	800749c <USB_FlushRxFifo>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80077cc:	2300      	movs	r3, #0
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	e015      	b.n	80077fe <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077de:	461a      	mov	r2, r3
 80077e0:	f04f 33ff 	mov.w	r3, #4294967295
 80077e4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f2:	461a      	mov	r2, r3
 80077f4:	2300      	movs	r3, #0
 80077f6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	3301      	adds	r3, #1
 80077fc:	613b      	str	r3, [r7, #16]
 80077fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007802:	461a      	mov	r2, r3
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	4293      	cmp	r3, r2
 8007808:	d3e3      	bcc.n	80077d2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f04f 32ff 	mov.w	r2, #4294967295
 8007816:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a18      	ldr	r2, [pc, #96]	; (800787c <USB_HostInit+0x170>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d10b      	bne.n	8007838 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007826:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a15      	ldr	r2, [pc, #84]	; (8007880 <USB_HostInit+0x174>)
 800782c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a14      	ldr	r2, [pc, #80]	; (8007884 <USB_HostInit+0x178>)
 8007832:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007836:	e009      	b.n	800784c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2280      	movs	r2, #128	; 0x80
 800783c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a11      	ldr	r2, [pc, #68]	; (8007888 <USB_HostInit+0x17c>)
 8007842:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a11      	ldr	r2, [pc, #68]	; (800788c <USB_HostInit+0x180>)
 8007848:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800784c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007850:	2b00      	cmp	r3, #0
 8007852:	d105      	bne.n	8007860 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	f043 0210 	orr.w	r2, r3, #16
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	699a      	ldr	r2, [r3, #24]
 8007864:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <USB_HostInit+0x184>)
 8007866:	4313      	orrs	r3, r2
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800786c:	7dfb      	ldrb	r3, [r7, #23]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007878:	b004      	add	sp, #16
 800787a:	4770      	bx	lr
 800787c:	40040000 	.word	0x40040000
 8007880:	01000200 	.word	0x01000200
 8007884:	00e00300 	.word	0x00e00300
 8007888:	00600080 	.word	0x00600080
 800788c:	004000e0 	.word	0x004000e0
 8007890:	a3200008 	.word	0xa3200008

08007894 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078b2:	f023 0303 	bic.w	r3, r3, #3
 80078b6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80078cc:	4313      	orrs	r3, r2
 80078ce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d107      	bne.n	80078e6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078dc:	461a      	mov	r2, r3
 80078de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80078e2:	6053      	str	r3, [r2, #4]
 80078e4:	e00c      	b.n	8007900 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80078e6:	78fb      	ldrb	r3, [r7, #3]
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d107      	bne.n	80078fc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f2:	461a      	mov	r2, r3
 80078f4:	f241 7370 	movw	r3, #6000	; 0x1770
 80078f8:	6053      	str	r3, [r2, #4]
 80078fa:	e001      	b.n	8007900 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e000      	b.n	8007902 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800792e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800793c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800793e:	2064      	movs	r0, #100	; 0x64
 8007940:	f7f9 fc8e 	bl	8001260 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800794c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007950:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007952:	200a      	movs	r0, #10
 8007954:	f7f9 fc84 	bl	8001260 <HAL_Delay>

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007986:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d109      	bne.n	80079a6 <USB_DriveVbus+0x44>
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d106      	bne.n	80079a6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079a4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b0:	d109      	bne.n	80079c6 <USB_DriveVbus+0x64>
 80079b2:	78fb      	ldrb	r3, [r7, #3]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d106      	bne.n	80079c6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	0c5b      	lsrs	r3, r3, #17
 80079f2:	f003 0303 	and.w	r3, r3, #3
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b085      	sub	sp, #20
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	b29b      	uxth	r3, r3
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	4611      	mov	r1, r2
 8007a30:	461a      	mov	r2, r3
 8007a32:	4603      	mov	r3, r0
 8007a34:	70fb      	strb	r3, [r7, #3]
 8007a36:	460b      	mov	r3, r1
 8007a38:	70bb      	strb	r3, [r7, #2]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a52:	461a      	mov	r2, r3
 8007a54:	f04f 33ff 	mov.w	r3, #4294967295
 8007a58:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007a5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d87c      	bhi.n	8007b5c <USB_HC_Init+0x138>
 8007a62:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <USB_HC_Init+0x44>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a79 	.word	0x08007a79
 8007a6c:	08007b1f 	.word	0x08007b1f
 8007a70:	08007a79 	.word	0x08007a79
 8007a74:	08007ae1 	.word	0x08007ae1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a84:	461a      	mov	r2, r3
 8007a86:	f240 439d 	movw	r3, #1181	; 0x49d
 8007a8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007a8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	da10      	bge.n	8007ab6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	78fa      	ldrb	r2, [r7, #3]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007ab4:	e055      	b.n	8007b62 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a6f      	ldr	r2, [pc, #444]	; (8007c78 <USB_HC_Init+0x254>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d151      	bne.n	8007b62 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007abe:	78fb      	ldrb	r3, [r7, #3]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	78fa      	ldrb	r2, [r7, #3]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ad8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007adc:	60d3      	str	r3, [r2, #12]
      break;
 8007ade:	e040      	b.n	8007b62 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aec:	461a      	mov	r2, r3
 8007aee:	f240 639d 	movw	r3, #1693	; 0x69d
 8007af2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007af4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	da34      	bge.n	8007b66 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	0151      	lsls	r1, r2, #5
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	440a      	add	r2, r1
 8007b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b1a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007b1c:	e023      	b.n	8007b66 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	f240 2325 	movw	r3, #549	; 0x225
 8007b30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	da17      	bge.n	8007b6a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	0151      	lsls	r1, r2, #5
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	440a      	add	r2, r1
 8007b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b54:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007b58:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b5a:	e006      	b.n	8007b6a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	77fb      	strb	r3, [r7, #31]
      break;
 8007b60:	e004      	b.n	8007b6c <USB_HC_Init+0x148>
      break;
 8007b62:	bf00      	nop
 8007b64:	e002      	b.n	8007b6c <USB_HC_Init+0x148>
      break;
 8007b66:	bf00      	nop
 8007b68:	e000      	b.n	8007b6c <USB_HC_Init+0x148>
      break;
 8007b6a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b98:	f043 0302 	orr.w	r3, r3, #2
 8007b9c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	78fb      	ldrb	r3, [r7, #3]
 8007ba8:	f003 030f 	and.w	r3, r3, #15
 8007bac:	2101      	movs	r1, #1
 8007bae:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb2:	6939      	ldr	r1, [r7, #16]
 8007bb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007bc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	da03      	bge.n	8007bd8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd4:	61bb      	str	r3, [r7, #24]
 8007bd6:	e001      	b.n	8007bdc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff fef9 	bl	80079d4 <USB_GetHostSpeed>
 8007be2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007be4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d106      	bne.n	8007bfa <USB_HC_Init+0x1d6>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d003      	beq.n	8007bfa <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	e001      	b.n	8007bfe <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bfe:	787b      	ldrb	r3, [r7, #1]
 8007c00:	059b      	lsls	r3, r3, #22
 8007c02:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c06:	78bb      	ldrb	r3, [r7, #2]
 8007c08:	02db      	lsls	r3, r3, #11
 8007c0a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c0e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c14:	049b      	lsls	r3, r3, #18
 8007c16:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c1a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007c1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007c1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c22:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	431a      	orrs	r2, r3
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c3c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007c3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d003      	beq.n	8007c4e <USB_HC_Init+0x22a>
 8007c46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d10f      	bne.n	8007c6e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007c4e:	78fb      	ldrb	r3, [r7, #3]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	78fa      	ldrb	r2, [r7, #3]
 8007c5e:	0151      	lsls	r1, r2, #5
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	440a      	add	r2, r1
 8007c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c6c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007c6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3720      	adds	r7, #32
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40040000 	.word	0x40040000

08007c7c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08c      	sub	sp, #48	; 0x30
 8007c80:	af02      	add	r7, sp, #8
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	4613      	mov	r3, r2
 8007c88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	785b      	ldrb	r3, [r3, #1]
 8007c92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c98:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4a5d      	ldr	r2, [pc, #372]	; (8007e14 <USB_HC_StartXfer+0x198>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d12f      	bne.n	8007d02 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d11c      	bne.n	8007ce2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	7c9b      	ldrb	r3, [r3, #18]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <USB_HC_StartXfer+0x3c>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	7c9b      	ldrb	r3, [r3, #18]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d124      	bne.n	8007d02 <USB_HC_StartXfer+0x86>
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	799b      	ldrb	r3, [r3, #6]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d120      	bne.n	8007d02 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	0151      	lsls	r1, r2, #5
 8007cd2:	6a3a      	ldr	r2, [r7, #32]
 8007cd4:	440a      	add	r2, r1
 8007cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cde:	60d3      	str	r3, [r2, #12]
 8007ce0:	e00f      	b.n	8007d02 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	791b      	ldrb	r3, [r3, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10b      	bne.n	8007d02 <USB_HC_StartXfer+0x86>
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	795b      	ldrb	r3, [r3, #5]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d107      	bne.n	8007d02 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 fb6b 	bl	80083d4 <USB_DoPing>
        return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e232      	b.n	8008168 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	799b      	ldrb	r3, [r3, #6]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d158      	bne.n	8007dbc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	78db      	ldrb	r3, [r3, #3]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	8a92      	ldrh	r2, [r2, #20]
 8007d1c:	fb03 f202 	mul.w	r2, r3, r2
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	61da      	str	r2, [r3, #28]
 8007d24:	e07c      	b.n	8007e20 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	7c9b      	ldrb	r3, [r3, #18]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d130      	bne.n	8007d90 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	2bbc      	cmp	r3, #188	; 0xbc
 8007d34:	d918      	bls.n	8007d68 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	8a9b      	ldrh	r3, [r3, #20]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	69da      	ldr	r2, [r3, #28]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d003      	beq.n	8007d58 <USB_HC_StartXfer+0xdc>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d103      	bne.n	8007d60 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	60da      	str	r2, [r3, #12]
 8007d5e:	e05f      	b.n	8007e20 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2201      	movs	r2, #1
 8007d64:	60da      	str	r2, [r3, #12]
 8007d66:	e05b      	b.n	8007e20 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	6a1a      	ldr	r2, [r3, #32]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d007      	beq.n	8007d88 <USB_HC_StartXfer+0x10c>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d003      	beq.n	8007d88 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2204      	movs	r2, #4
 8007d84:	60da      	str	r2, [r3, #12]
 8007d86:	e04b      	b.n	8007e20 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	60da      	str	r2, [r3, #12]
 8007d8e:	e047      	b.n	8007e20 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007d90:	79fb      	ldrb	r3, [r7, #7]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d10d      	bne.n	8007db2 <USB_HC_StartXfer+0x136>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	8a92      	ldrh	r2, [r2, #20]
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d907      	bls.n	8007db2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007da2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	8a92      	ldrh	r2, [r2, #20]
 8007da8:	fb03 f202 	mul.w	r2, r3, r2
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	61da      	str	r2, [r3, #28]
 8007db0:	e036      	b.n	8007e20 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	6a1a      	ldr	r2, [r3, #32]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	61da      	str	r2, [r3, #28]
 8007dba:	e031      	b.n	8007e20 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d018      	beq.n	8007df6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	8a92      	ldrh	r2, [r2, #20]
 8007dcc:	4413      	add	r3, r2
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	8a92      	ldrh	r2, [r2, #20]
 8007dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dd8:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8007dda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ddc:	8b7b      	ldrh	r3, [r7, #26]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d90b      	bls.n	8007dfa <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007de2:	8b7b      	ldrh	r3, [r7, #26]
 8007de4:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007de6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	8a92      	ldrh	r2, [r2, #20]
 8007dec:	fb03 f202 	mul.w	r2, r3, r2
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	61da      	str	r2, [r3, #28]
 8007df4:	e001      	b.n	8007dfa <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007df6:	2301      	movs	r3, #1
 8007df8:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	78db      	ldrb	r3, [r3, #3]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	8a92      	ldrh	r2, [r2, #20]
 8007e08:	fb03 f202 	mul.w	r2, r3, r2
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	61da      	str	r2, [r3, #28]
 8007e10:	e006      	b.n	8007e20 <USB_HC_StartXfer+0x1a4>
 8007e12:	bf00      	nop
 8007e14:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	6a1a      	ldr	r2, [r3, #32]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e2a:	04d9      	lsls	r1, r3, #19
 8007e2c:	4ba3      	ldr	r3, [pc, #652]	; (80080bc <USB_HC_StartXfer+0x440>)
 8007e2e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e30:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	7d9b      	ldrb	r3, [r3, #22]
 8007e36:	075b      	lsls	r3, r3, #29
 8007e38:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e3c:	69f9      	ldr	r1, [r7, #28]
 8007e3e:	0148      	lsls	r0, r1, #5
 8007e40:	6a39      	ldr	r1, [r7, #32]
 8007e42:	4401      	add	r1, r0
 8007e44:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e48:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e4a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d009      	beq.n	8007e66 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6999      	ldr	r1, [r3, #24]
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e62:	460a      	mov	r2, r1
 8007e64:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bf0c      	ite	eq
 8007e76:	2301      	moveq	r3, #1
 8007e78:	2300      	movne	r3, #0
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	6a3a      	ldr	r2, [r7, #32]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e9c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	7e7b      	ldrb	r3, [r7, #25]
 8007eae:	075b      	lsls	r3, r3, #29
 8007eb0:	69f9      	ldr	r1, [r7, #28]
 8007eb2:	0148      	lsls	r0, r1, #5
 8007eb4:	6a39      	ldr	r1, [r7, #32]
 8007eb6:	4401      	add	r1, r0
 8007eb8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	799b      	ldrb	r3, [r3, #6]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	f040 80c3 	bne.w	8008050 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	7c5b      	ldrb	r3, [r3, #17]
 8007ece:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	69fa      	ldr	r2, [r7, #28]
 8007ed8:	0151      	lsls	r1, r2, #5
 8007eda:	6a3a      	ldr	r2, [r7, #32]
 8007edc:	440a      	add	r2, r1
 8007ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007ee6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	0151      	lsls	r1, r2, #5
 8007efa:	6a3a      	ldr	r2, [r7, #32]
 8007efc:	440a      	add	r2, r1
 8007efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	79db      	ldrb	r3, [r3, #7]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d123      	bne.n	8007f58 <USB_HC_StartXfer+0x2dc>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	78db      	ldrb	r3, [r3, #3]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d11f      	bne.n	8007f58 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	0151      	lsls	r1, r2, #5
 8007f2a:	6a3a      	ldr	r2, [r7, #32]
 8007f2c:	440a      	add	r2, r1
 8007f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f36:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	0151      	lsls	r1, r2, #5
 8007f4a:	6a3a      	ldr	r2, [r7, #32]
 8007f4c:	440a      	add	r2, r1
 8007f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f56:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	7c9b      	ldrb	r3, [r3, #18]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d003      	beq.n	8007f68 <USB_HC_StartXfer+0x2ec>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	7c9b      	ldrb	r3, [r3, #18]
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d117      	bne.n	8007f98 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d113      	bne.n	8007f98 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	78db      	ldrb	r3, [r3, #3]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d10f      	bne.n	8007f98 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	6a3a      	ldr	r2, [r7, #32]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f96:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	7c9b      	ldrb	r3, [r3, #18]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d162      	bne.n	8008066 <USB_HC_StartXfer+0x3ea>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	78db      	ldrb	r3, [r3, #3]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d15e      	bne.n	8008066 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d858      	bhi.n	8008064 <USB_HC_StartXfer+0x3e8>
 8007fb2:	a201      	add	r2, pc, #4	; (adr r2, 8007fb8 <USB_HC_StartXfer+0x33c>)
 8007fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb8:	08007fc9 	.word	0x08007fc9
 8007fbc:	08007feb 	.word	0x08007feb
 8007fc0:	0800800d 	.word	0x0800800d
 8007fc4:	0800802f 	.word	0x0800802f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	0151      	lsls	r1, r2, #5
 8007fda:	6a3a      	ldr	r2, [r7, #32]
 8007fdc:	440a      	add	r2, r1
 8007fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe6:	6053      	str	r3, [r2, #4]
          break;
 8007fe8:	e03d      	b.n	8008066 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	6a3a      	ldr	r2, [r7, #32]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008004:	f043 030e 	orr.w	r3, r3, #14
 8008008:	6053      	str	r3, [r2, #4]
          break;
 800800a:	e02c      	b.n	8008066 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	4413      	add	r3, r2
 8008014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	0151      	lsls	r1, r2, #5
 800801e:	6a3a      	ldr	r2, [r7, #32]
 8008020:	440a      	add	r2, r1
 8008022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800802a:	6053      	str	r3, [r2, #4]
          break;
 800802c:	e01b      	b.n	8008066 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	4413      	add	r3, r2
 8008036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	0151      	lsls	r1, r2, #5
 8008040:	6a3a      	ldr	r2, [r7, #32]
 8008042:	440a      	add	r2, r1
 8008044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800804c:	6053      	str	r3, [r2, #4]
          break;
 800804e:	e00a      	b.n	8008066 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	4413      	add	r3, r2
 8008058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800805c:	461a      	mov	r2, r3
 800805e:	2300      	movs	r3, #0
 8008060:	6053      	str	r3, [r2, #4]
 8008062:	e000      	b.n	8008066 <USB_HC_StartXfer+0x3ea>
          break;
 8008064:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	4413      	add	r3, r2
 800806e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800807c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	78db      	ldrb	r3, [r3, #3]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	e003      	b.n	8008098 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008096:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800809e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ac:	461a      	mov	r2, r3
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d003      	beq.n	80080c0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	e055      	b.n	8008168 <USB_HC_StartXfer+0x4ec>
 80080bc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	78db      	ldrb	r3, [r3, #3]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d14e      	bne.n	8008166 <USB_HC_StartXfer+0x4ea>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d04a      	beq.n	8008166 <USB_HC_StartXfer+0x4ea>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	79db      	ldrb	r3, [r3, #7]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d146      	bne.n	8008166 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	7c9b      	ldrb	r3, [r3, #18]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d831      	bhi.n	8008144 <USB_HC_StartXfer+0x4c8>
 80080e0:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <USB_HC_StartXfer+0x46c>)
 80080e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e6:	bf00      	nop
 80080e8:	080080f9 	.word	0x080080f9
 80080ec:	0800811d 	.word	0x0800811d
 80080f0:	080080f9 	.word	0x080080f9
 80080f4:	0800811d 	.word	0x0800811d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	3303      	adds	r3, #3
 80080fe:	089b      	lsrs	r3, r3, #2
 8008100:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008102:	8afa      	ldrh	r2, [r7, #22]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	b29b      	uxth	r3, r3
 800810a:	429a      	cmp	r2, r3
 800810c:	d91c      	bls.n	8008148 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	f043 0220 	orr.w	r2, r3, #32
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	619a      	str	r2, [r3, #24]
        }
        break;
 800811a:	e015      	b.n	8008148 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	3303      	adds	r3, #3
 8008122:	089b      	lsrs	r3, r3, #2
 8008124:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008126:	8afa      	ldrh	r2, [r7, #22]
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	b29b      	uxth	r3, r3
 8008132:	429a      	cmp	r2, r3
 8008134:	d90a      	bls.n	800814c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	619a      	str	r2, [r3, #24]
        }
        break;
 8008142:	e003      	b.n	800814c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008144:	bf00      	nop
 8008146:	e002      	b.n	800814e <USB_HC_StartXfer+0x4d2>
        break;
 8008148:	bf00      	nop
 800814a:	e000      	b.n	800814e <USB_HC_StartXfer+0x4d2>
        break;
 800814c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	6999      	ldr	r1, [r3, #24]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	785a      	ldrb	r2, [r3, #1]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	b29b      	uxth	r3, r3
 800815c:	2000      	movs	r0, #0
 800815e:	9000      	str	r0, [sp, #0]
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f7ff f9c9 	bl	80074f8 <USB_WritePacket>
  }

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3728      	adds	r7, #40	; 0x28
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	b29b      	uxth	r3, r3
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008192:	b480      	push	{r7}
 8008194:	b089      	sub	sp, #36	; 0x24
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	460b      	mov	r3, r1
 800819c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80081a2:	78fb      	ldrb	r3, [r7, #3]
 80081a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	0c9b      	lsrs	r3, r3, #18
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	0fdb      	lsrs	r3, r3, #31
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	0fdb      	lsrs	r3, r3, #31
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f003 0320 	and.w	r3, r3, #32
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	d10d      	bne.n	8008214 <USB_HC_Halt+0x82>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10a      	bne.n	8008214 <USB_HC_Halt+0x82>
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d002      	beq.n	8008210 <USB_HC_Halt+0x7e>
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b03      	cmp	r3, #3
 800820e:	d101      	bne.n	8008214 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	e0d8      	b.n	80083c6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <USB_HC_Halt+0x8e>
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d173      	bne.n	8008308 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	4413      	add	r3, r2
 8008228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	69fa      	ldr	r2, [r7, #28]
 8008234:	440a      	add	r2, r1
 8008236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800823a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800823e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0320 	and.w	r3, r3, #32
 8008248:	2b00      	cmp	r3, #0
 800824a:	d14a      	bne.n	80082e2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d133      	bne.n	80082c0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	0151      	lsls	r1, r2, #5
 800826a:	69fa      	ldr	r2, [r7, #28]
 800826c:	440a      	add	r2, r1
 800826e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008272:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008276:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	4413      	add	r3, r2
 8008280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69ba      	ldr	r2, [r7, #24]
 8008288:	0151      	lsls	r1, r2, #5
 800828a:	69fa      	ldr	r2, [r7, #28]
 800828c:	440a      	add	r2, r1
 800828e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008296:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	3301      	adds	r3, #1
 800829c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082a4:	d82e      	bhi.n	8008304 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082bc:	d0ec      	beq.n	8008298 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082be:	e081      	b.n	80083c4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	0151      	lsls	r1, r2, #5
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	440a      	add	r2, r1
 80082d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082de:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082e0:	e070      	b.n	80083c4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	69fa      	ldr	r2, [r7, #28]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008300:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008302:	e05f      	b.n	80083c4 <USB_HC_Halt+0x232>
            break;
 8008304:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008306:	e05d      	b.n	80083c4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	4413      	add	r3, r2
 8008310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	0151      	lsls	r1, r2, #5
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	440a      	add	r2, r1
 800831e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008326:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d133      	bne.n	80083a0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	0151      	lsls	r1, r2, #5
 800834a:	69fa      	ldr	r2, [r7, #28]
 800834c:	440a      	add	r2, r1
 800834e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008352:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008356:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	4413      	add	r3, r2
 8008360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	0151      	lsls	r1, r2, #5
 800836a:	69fa      	ldr	r2, [r7, #28]
 800836c:	440a      	add	r2, r1
 800836e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008372:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008376:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	3301      	adds	r3, #1
 800837c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008384:	d81d      	bhi.n	80083c2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	4413      	add	r3, r2
 800838e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800839c:	d0ec      	beq.n	8008378 <USB_HC_Halt+0x1e6>
 800839e:	e011      	b.n	80083c4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69ba      	ldr	r2, [r7, #24]
 80083b0:	0151      	lsls	r1, r2, #5
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	440a      	add	r2, r1
 80083b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083be:	6013      	str	r3, [r2, #0]
 80083c0:	e000      	b.n	80083c4 <USB_HC_Halt+0x232>
          break;
 80083c2:	bf00      	nop
    }
  }

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3724      	adds	r7, #36	; 0x24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80083e8:	2301      	movs	r3, #1
 80083ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	04da      	lsls	r2, r3, #19
 80083f0:	4b15      	ldr	r3, [pc, #84]	; (8008448 <USB_DoPing+0x74>)
 80083f2:	4013      	ands	r3, r2
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008404:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	4413      	add	r3, r2
 800840e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800841c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008424:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	4413      	add	r3, r2
 800842e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008432:	461a      	mov	r2, r3
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	1ff80000 	.word	0x1ff80000

0800844c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800845c:	2300      	movs	r3, #0
 800845e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7fe ff8c 	bl	800737e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008466:	2110      	movs	r1, #16
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7fe ffe5 	bl	8007438 <USB_FlushTxFifo>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff f80f 	bl	800749c <USB_FlushRxFifo>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008488:	2300      	movs	r3, #0
 800848a:	61bb      	str	r3, [r7, #24]
 800848c:	e01f      	b.n	80084ce <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	4413      	add	r3, r2
 8008496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c2:	461a      	mov	r2, r3
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	3301      	adds	r3, #1
 80084cc:	61bb      	str	r3, [r7, #24]
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b0f      	cmp	r3, #15
 80084d2:	d9dc      	bls.n	800848e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80084d4:	2300      	movs	r3, #0
 80084d6:	61bb      	str	r3, [r7, #24]
 80084d8:	e034      	b.n	8008544 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008500:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	4413      	add	r3, r2
 800850a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850e:	461a      	mov	r2, r3
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008520:	d80c      	bhi.n	800853c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	4413      	add	r3, r2
 800852a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008538:	d0ec      	beq.n	8008514 <USB_StopHost+0xc8>
 800853a:	e000      	b.n	800853e <USB_StopHost+0xf2>
        break;
 800853c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	3301      	adds	r3, #1
 8008542:	61bb      	str	r3, [r7, #24]
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	2b0f      	cmp	r3, #15
 8008548:	d9c7      	bls.n	80084da <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008550:	461a      	mov	r2, r3
 8008552:	f04f 33ff 	mov.w	r3, #4294967295
 8008556:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f04f 32ff 	mov.w	r2, #4294967295
 800855e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7fe fefb 	bl	800735c <USB_EnableGlobalInt>

  return ret;
 8008566:	7ffb      	ldrb	r3, [r7, #31]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3720      	adds	r7, #32
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008570:	b590      	push	{r4, r7, lr}
 8008572:	b089      	sub	sp, #36	; 0x24
 8008574:	af04      	add	r7, sp, #16
 8008576:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008578:	2301      	movs	r3, #1
 800857a:	2202      	movs	r2, #2
 800857c:	2102      	movs	r1, #2
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fc85 	bl	8008e8e <USBH_FindInterface>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	2bff      	cmp	r3, #255	; 0xff
 800858c:	d002      	beq.n	8008594 <USBH_CDC_InterfaceInit+0x24>
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d901      	bls.n	8008598 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008594:	2302      	movs	r3, #2
 8008596:	e13d      	b.n	8008814 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fc5a 	bl	8008e56 <USBH_SelectInterface>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80085ac:	2302      	movs	r3, #2
 80085ae:	e131      	b.n	8008814 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80085b6:	2050      	movs	r0, #80	; 0x50
 80085b8:	f002 fb74 	bl	800aca4 <malloc>
 80085bc:	4603      	mov	r3, r0
 80085be:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80085d0:	2302      	movs	r3, #2
 80085d2:	e11f      	b.n	8008814 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80085d4:	2250      	movs	r2, #80	; 0x50
 80085d6:	2100      	movs	r1, #0
 80085d8:	68b8      	ldr	r0, [r7, #8]
 80085da:	f002 fc1f 	bl	800ae1c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	211a      	movs	r1, #26
 80085e4:	fb01 f303 	mul.w	r3, r1, r3
 80085e8:	4413      	add	r3, r2
 80085ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	b25b      	sxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	da15      	bge.n	8008622 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	211a      	movs	r1, #26
 80085fc:	fb01 f303 	mul.w	r3, r1, r3
 8008600:	4413      	add	r3, r2
 8008602:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008606:	781a      	ldrb	r2, [r3, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	211a      	movs	r1, #26
 8008612:	fb01 f303 	mul.w	r3, r1, r3
 8008616:	4413      	add	r3, r2
 8008618:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800861c:	881a      	ldrh	r2, [r3, #0]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 ffce 	bl	800a5ca <USBH_AllocPipe>
 800862e:	4603      	mov	r3, r0
 8008630:	461a      	mov	r2, r3
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	7819      	ldrb	r1, [r3, #0]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	7858      	ldrb	r0, [r3, #1]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	8952      	ldrh	r2, [r2, #10]
 800864e:	9202      	str	r2, [sp, #8]
 8008650:	2203      	movs	r2, #3
 8008652:	9201      	str	r2, [sp, #4]
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	4623      	mov	r3, r4
 8008658:	4602      	mov	r2, r0
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 ff86 	bl	800a56c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2200      	movs	r2, #0
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f002 fa95 	bl	800ab98 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800866e:	2300      	movs	r3, #0
 8008670:	2200      	movs	r2, #0
 8008672:	210a      	movs	r1, #10
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fc0a 	bl	8008e8e <USBH_FindInterface>
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	2bff      	cmp	r3, #255	; 0xff
 8008682:	d002      	beq.n	800868a <USBH_CDC_InterfaceInit+0x11a>
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d901      	bls.n	800868e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800868a:	2302      	movs	r3, #2
 800868c:	e0c2      	b.n	8008814 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800868e:	7bfb      	ldrb	r3, [r7, #15]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	211a      	movs	r1, #26
 8008694:	fb01 f303 	mul.w	r3, r1, r3
 8008698:	4413      	add	r3, r2
 800869a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b25b      	sxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	da16      	bge.n	80086d4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	211a      	movs	r1, #26
 80086ac:	fb01 f303 	mul.w	r3, r1, r3
 80086b0:	4413      	add	r3, r2
 80086b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086b6:	781a      	ldrb	r2, [r3, #0]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	211a      	movs	r1, #26
 80086c2:	fb01 f303 	mul.w	r3, r1, r3
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80086cc:	881a      	ldrh	r2, [r3, #0]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	835a      	strh	r2, [r3, #26]
 80086d2:	e015      	b.n	8008700 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	211a      	movs	r1, #26
 80086da:	fb01 f303 	mul.w	r3, r1, r3
 80086de:	4413      	add	r3, r2
 80086e0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086e4:	781a      	ldrb	r2, [r3, #0]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	211a      	movs	r1, #26
 80086f0:	fb01 f303 	mul.w	r3, r1, r3
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80086fa:	881a      	ldrh	r2, [r3, #0]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	211a      	movs	r1, #26
 8008706:	fb01 f303 	mul.w	r3, r1, r3
 800870a:	4413      	add	r3, r2
 800870c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	b25b      	sxtb	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	da16      	bge.n	8008746 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	211a      	movs	r1, #26
 800871e:	fb01 f303 	mul.w	r3, r1, r3
 8008722:	4413      	add	r3, r2
 8008724:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008728:	781a      	ldrb	r2, [r3, #0]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	211a      	movs	r1, #26
 8008734:	fb01 f303 	mul.w	r3, r1, r3
 8008738:	4413      	add	r3, r2
 800873a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800873e:	881a      	ldrh	r2, [r3, #0]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	835a      	strh	r2, [r3, #26]
 8008744:	e015      	b.n	8008772 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	211a      	movs	r1, #26
 800874c:	fb01 f303 	mul.w	r3, r1, r3
 8008750:	4413      	add	r3, r2
 8008752:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008756:	781a      	ldrb	r2, [r3, #0]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	211a      	movs	r1, #26
 8008762:	fb01 f303 	mul.w	r3, r1, r3
 8008766:	4413      	add	r3, r2
 8008768:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800876c:	881a      	ldrh	r2, [r3, #0]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	7b9b      	ldrb	r3, [r3, #14]
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 ff26 	bl	800a5ca <USBH_AllocPipe>
 800877e:	4603      	mov	r3, r0
 8008780:	461a      	mov	r2, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	7bdb      	ldrb	r3, [r3, #15]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 ff1c 	bl	800a5ca <USBH_AllocPipe>
 8008792:	4603      	mov	r3, r0
 8008794:	461a      	mov	r2, r3
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	7b59      	ldrb	r1, [r3, #13]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	7b98      	ldrb	r0, [r3, #14]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	8b12      	ldrh	r2, [r2, #24]
 80087b2:	9202      	str	r2, [sp, #8]
 80087b4:	2202      	movs	r2, #2
 80087b6:	9201      	str	r2, [sp, #4]
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	4623      	mov	r3, r4
 80087bc:	4602      	mov	r2, r0
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 fed4 	bl	800a56c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	7b19      	ldrb	r1, [r3, #12]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	7bd8      	ldrb	r0, [r3, #15]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	8b52      	ldrh	r2, [r2, #26]
 80087dc:	9202      	str	r2, [sp, #8]
 80087de:	2202      	movs	r2, #2
 80087e0:	9201      	str	r2, [sp, #4]
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	4623      	mov	r3, r4
 80087e6:	4602      	mov	r2, r0
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f001 febf 	bl	800a56c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	7b5b      	ldrb	r3, [r3, #13]
 80087fa:	2200      	movs	r2, #0
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f002 f9ca 	bl	800ab98 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	7b1b      	ldrb	r3, [r3, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f002 f9c3 	bl	800ab98 <USBH_LL_SetToggle>

  return USBH_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	bd90      	pop	{r4, r7, pc}

0800881c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800882a:	69db      	ldr	r3, [r3, #28]
 800882c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00e      	beq.n	8008854 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 feb4 	bl	800a5aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f001 fedf 	bl	800a60c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	7b1b      	ldrb	r3, [r3, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00e      	beq.n	800887a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	7b1b      	ldrb	r3, [r3, #12]
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fea1 	bl	800a5aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	7b1b      	ldrb	r3, [r3, #12]
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 fecc 	bl	800a60c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	7b5b      	ldrb	r3, [r3, #13]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00e      	beq.n	80088a0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	7b5b      	ldrb	r3, [r3, #13]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 fe8e 	bl	800a5aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	7b5b      	ldrb	r3, [r3, #13]
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 feb9 	bl	800a60c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f002 f9fd 	bl	800acb4 <free>
    phost->pActiveClass->pData = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088c0:	2200      	movs	r2, #0
 80088c2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3340      	adds	r3, #64	; 0x40
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f8b1 	bl	8008a4e <GetLineCoding>
 80088ec:	4603      	mov	r3, r0
 80088ee:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80088f0:	7afb      	ldrb	r3, [r7, #11]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d105      	bne.n	8008902 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088fc:	2102      	movs	r1, #2
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008902:	7afb      	ldrb	r3, [r7, #11]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800892c:	2b04      	cmp	r3, #4
 800892e:	d877      	bhi.n	8008a20 <USBH_CDC_Process+0x114>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <USBH_CDC_Process+0x2c>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	0800894d 	.word	0x0800894d
 800893c:	08008953 	.word	0x08008953
 8008940:	08008983 	.word	0x08008983
 8008944:	080089f7 	.word	0x080089f7
 8008948:	08008a05 	.word	0x08008a05
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73fb      	strb	r3, [r7, #15]
      break;
 8008950:	e06d      	b.n	8008a2e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f897 	bl	8008a8c <SetLineCoding>
 800895e:	4603      	mov	r3, r0
 8008960:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d104      	bne.n	8008972 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008970:	e058      	b.n	8008a24 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d055      	beq.n	8008a24 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2204      	movs	r2, #4
 800897c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008980:	e050      	b.n	8008a24 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	3340      	adds	r3, #64	; 0x40
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f860 	bl	8008a4e <GetLineCoding>
 800898e:	4603      	mov	r3, r0
 8008990:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d126      	bne.n	80089e6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089aa:	791b      	ldrb	r3, [r3, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d13b      	bne.n	8008a28 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ba:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80089bc:	429a      	cmp	r2, r3
 80089be:	d133      	bne.n	8008a28 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ca:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d12b      	bne.n	8008a28 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80089da:	429a      	cmp	r2, r3
 80089dc:	d124      	bne.n	8008a28 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f958 	bl	8008c94 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80089e4:	e020      	b.n	8008a28 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d01d      	beq.n	8008a28 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2204      	movs	r2, #4
 80089f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80089f4:	e018      	b.n	8008a28 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f867 	bl	8008aca <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f8da 	bl	8008bb6 <CDC_ProcessReception>
      break;
 8008a02:	e014      	b.n	8008a2e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008a04:	2100      	movs	r1, #0
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 f822 	bl	8009a50 <USBH_ClrFeature>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10a      	bne.n	8008a2c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008a1e:	e005      	b.n	8008a2c <USBH_CDC_Process+0x120>

    default:
      break;
 8008a20:	bf00      	nop
 8008a22:	e004      	b.n	8008a2e <USBH_CDC_Process+0x122>
      break;
 8008a24:	bf00      	nop
 8008a26:	e002      	b.n	8008a2e <USBH_CDC_Process+0x122>
      break;
 8008a28:	bf00      	nop
 8008a2a:	e000      	b.n	8008a2e <USBH_CDC_Process+0x122>
      break;
 8008a2c:	bf00      	nop

  }

  return status;
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	22a1      	movs	r2, #161	; 0xa1
 8008a5c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2221      	movs	r2, #33	; 0x21
 8008a62:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2207      	movs	r2, #7
 8008a74:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2207      	movs	r2, #7
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 fb23 	bl	800a0c8 <USBH_CtlReq>
 8008a82:	4603      	mov	r3, r0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2221      	movs	r2, #33	; 0x21
 8008a9a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2207      	movs	r2, #7
 8008ab2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2207      	movs	r2, #7
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 fb04 	bl	800a0c8 <USBH_CtlReq>
 8008ac0:	4603      	mov	r3, r0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b086      	sub	sp, #24
 8008ace:	af02      	add	r7, sp, #8
 8008ad0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008adc:	2300      	movs	r3, #0
 8008ade:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d002      	beq.n	8008af0 <CDC_ProcessTransmission+0x26>
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d023      	beq.n	8008b36 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008aee:	e05e      	b.n	8008bae <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	8b12      	ldrh	r2, [r2, #24]
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d90b      	bls.n	8008b14 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	69d9      	ldr	r1, [r3, #28]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	8b1a      	ldrh	r2, [r3, #24]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	7b5b      	ldrb	r3, [r3, #13]
 8008b08:	2001      	movs	r0, #1
 8008b0a:	9000      	str	r0, [sp, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 fcea 	bl	800a4e6 <USBH_BulkSendData>
 8008b12:	e00b      	b.n	8008b2c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	7b5b      	ldrb	r3, [r3, #13]
 8008b22:	2001      	movs	r0, #1
 8008b24:	9000      	str	r0, [sp, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 fcdd 	bl	800a4e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008b34:	e03b      	b.n	8008bae <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	7b5b      	ldrb	r3, [r3, #13]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f002 f801 	bl	800ab44 <USBH_LL_GetURBState>
 8008b42:	4603      	mov	r3, r0
 8008b44:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008b46:	7afb      	ldrb	r3, [r7, #11]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d128      	bne.n	8008b9e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	8b12      	ldrh	r2, [r2, #24]
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d90e      	bls.n	8008b76 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	8b12      	ldrh	r2, [r2, #24]
 8008b60:	1a9a      	subs	r2, r3, r2
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	8b12      	ldrh	r2, [r2, #24]
 8008b6e:	441a      	add	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	61da      	str	r2, [r3, #28]
 8008b74:	e002      	b.n	8008b7c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008b8c:	e00e      	b.n	8008bac <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f868 	bl	8008c6c <USBH_CDC_TransmitCallback>
      break;
 8008b9c:	e006      	b.n	8008bac <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d103      	bne.n	8008bac <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008bac:	bf00      	nop
  }
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b086      	sub	sp, #24
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d002      	beq.n	8008bdc <CDC_ProcessReception+0x26>
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	d00e      	beq.n	8008bf8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008bda:	e043      	b.n	8008c64 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	6a19      	ldr	r1, [r3, #32]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	8b5a      	ldrh	r2, [r3, #26]
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	7b1b      	ldrb	r3, [r3, #12]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 fca1 	bl	800a530 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	2204      	movs	r2, #4
 8008bf2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008bf6:	e035      	b.n	8008c64 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	7b1b      	ldrb	r3, [r3, #12]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f001 ffa0 	bl	800ab44 <USBH_LL_GetURBState>
 8008c04:	4603      	mov	r3, r0
 8008c06:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008c08:	7cfb      	ldrb	r3, [r7, #19]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d129      	bne.n	8008c62 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	7b1b      	ldrb	r3, [r3, #12]
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 ff03 	bl	800aa20 <USBH_LL_GetLastXferSize>
 8008c1a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d016      	beq.n	8008c54 <CDC_ProcessReception+0x9e>
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	8b5b      	ldrh	r3, [r3, #26]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d910      	bls.n	8008c54 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	1ad2      	subs	r2, r2, r3
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	6a1a      	ldr	r2, [r3, #32]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	441a      	add	r2, r3
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008c52:	e006      	b.n	8008c62 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f80f 	bl	8008c80 <USBH_CDC_ReceiveCallback>
      break;
 8008c62:	bf00      	nop
  }
}
 8008c64:	bf00      	nop
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e029      	b.n	8008d14 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	79fa      	ldrb	r2, [r7, #7]
 8008cc4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 f81f 	bl	8008d1c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d003      	beq.n	8008d0c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f001 fdd3 	bl	800a8b8 <USBH_LL_Init>

  return USBH_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	e009      	b.n	8008d42 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	33e0      	adds	r3, #224	; 0xe0
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	2200      	movs	r2, #0
 8008d3a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b0f      	cmp	r3, #15
 8008d46:	d9f2      	bls.n	8008d2e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	e009      	b.n	8008d62 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d58:	2200      	movs	r2, #0
 8008d5a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	60fb      	str	r3, [r7, #12]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d68:	d3f1      	bcc.n	8008d4e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2240      	movs	r2, #64	; 0x40
 8008d8e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	331c      	adds	r3, #28
 8008dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f002 f82b 	bl	800ae1c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f002 f822 	bl	800ae1c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008dde:	2212      	movs	r2, #18
 8008de0:	2100      	movs	r1, #0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f002 f81a 	bl	800ae1c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008dee:	223e      	movs	r2, #62	; 0x3e
 8008df0:	2100      	movs	r1, #0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f002 f812 	bl	800ae1c <memset>

  return USBH_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b085      	sub	sp, #20
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d016      	beq.n	8008e44 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10e      	bne.n	8008e3e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008e26:	1c59      	adds	r1, r3, #1
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	33de      	adds	r3, #222	; 0xde
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73fb      	strb	r3, [r7, #15]
 8008e3c:	e004      	b.n	8008e48 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008e3e:	2302      	movs	r3, #2
 8008e40:	73fb      	strb	r3, [r7, #15]
 8008e42:	e001      	b.n	8008e48 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008e44:	2302      	movs	r3, #2
 8008e46:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b085      	sub	sp, #20
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008e6c:	78fa      	ldrb	r2, [r7, #3]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d204      	bcs.n	8008e7c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	78fa      	ldrb	r2, [r7, #3]
 8008e76:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008e7a:	e001      	b.n	8008e80 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b087      	sub	sp, #28
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	4608      	mov	r0, r1
 8008e98:	4611      	mov	r1, r2
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	70fb      	strb	r3, [r7, #3]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70bb      	strb	r3, [r7, #2]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008eac:	2300      	movs	r3, #0
 8008eae:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008eb6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008eb8:	e025      	b.n	8008f06 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	221a      	movs	r2, #26
 8008ebe:	fb02 f303 	mul.w	r3, r2, r3
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3302      	adds	r3, #2
 8008eca:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	795b      	ldrb	r3, [r3, #5]
 8008ed0:	78fa      	ldrb	r2, [r7, #3]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d002      	beq.n	8008edc <USBH_FindInterface+0x4e>
 8008ed6:	78fb      	ldrb	r3, [r7, #3]
 8008ed8:	2bff      	cmp	r3, #255	; 0xff
 8008eda:	d111      	bne.n	8008f00 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ee0:	78ba      	ldrb	r2, [r7, #2]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d002      	beq.n	8008eec <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ee6:	78bb      	ldrb	r3, [r7, #2]
 8008ee8:	2bff      	cmp	r3, #255	; 0xff
 8008eea:	d109      	bne.n	8008f00 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ef0:	787a      	ldrb	r2, [r7, #1]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d002      	beq.n	8008efc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ef6:	787b      	ldrb	r3, [r7, #1]
 8008ef8:	2bff      	cmp	r3, #255	; 0xff
 8008efa:	d101      	bne.n	8008f00 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	e006      	b.n	8008f0e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	3301      	adds	r3, #1
 8008f04:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d9d6      	bls.n	8008eba <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008f0c:	23ff      	movs	r3, #255	; 0xff
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	371c      	adds	r7, #28
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fd04 	bl	800a930 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008f28:	2101      	movs	r1, #1
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f001 fe1d 	bl	800ab6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af04      	add	r7, sp, #16
 8008f42:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008f44:	2302      	movs	r3, #2
 8008f46:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d102      	bne.n	8008f5e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2203      	movs	r2, #3
 8008f5c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b0b      	cmp	r3, #11
 8008f66:	f200 81be 	bhi.w	80092e6 <USBH_Process+0x3aa>
 8008f6a:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <USBH_Process+0x34>)
 8008f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f70:	08008fa1 	.word	0x08008fa1
 8008f74:	08008fd3 	.word	0x08008fd3
 8008f78:	0800903b 	.word	0x0800903b
 8008f7c:	08009281 	.word	0x08009281
 8008f80:	080092e7 	.word	0x080092e7
 8008f84:	080090df 	.word	0x080090df
 8008f88:	08009227 	.word	0x08009227
 8008f8c:	08009115 	.word	0x08009115
 8008f90:	08009135 	.word	0x08009135
 8008f94:	08009155 	.word	0x08009155
 8008f98:	08009199 	.word	0x08009199
 8008f9c:	08009269 	.word	0x08009269
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 819e 	beq.w	80092ea <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008fb4:	20c8      	movs	r0, #200	; 0xc8
 8008fb6:	f001 fe22 	bl	800abfe <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 fd15 	bl	800a9ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008fd0:	e18b      	b.n	80092ea <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d107      	bne.n	8008fec <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fea:	e18d      	b.n	8009308 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ff6:	d914      	bls.n	8009022 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008ffe:	3301      	adds	r3, #1
 8009000:	b2da      	uxtb	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800900e:	2b03      	cmp	r3, #3
 8009010:	d903      	bls.n	800901a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	220d      	movs	r2, #13
 8009016:	701a      	strb	r2, [r3, #0]
      break;
 8009018:	e176      	b.n	8009308 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	701a      	strb	r2, [r3, #0]
      break;
 8009020:	e172      	b.n	8009308 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009028:	f103 020a 	add.w	r2, r3, #10
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009032:	200a      	movs	r0, #10
 8009034:	f001 fde3 	bl	800abfe <USBH_Delay>
      break;
 8009038:	e166      	b.n	8009308 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009040:	2b00      	cmp	r3, #0
 8009042:	d005      	beq.n	8009050 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800904a:	2104      	movs	r1, #4
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009050:	2064      	movs	r0, #100	; 0x64
 8009052:	f001 fdd4 	bl	800abfe <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 fca0 	bl	800a99c <USBH_LL_GetSpeed>
 800905c:	4603      	mov	r3, r0
 800905e:	461a      	mov	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2205      	movs	r2, #5
 800906a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800906c:	2100      	movs	r1, #0
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 faab 	bl	800a5ca <USBH_AllocPipe>
 8009074:	4603      	mov	r3, r0
 8009076:	461a      	mov	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800907c:	2180      	movs	r1, #128	; 0x80
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 faa3 	bl	800a5ca <USBH_AllocPipe>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	7919      	ldrb	r1, [r3, #4]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80090a0:	b292      	uxth	r2, r2
 80090a2:	9202      	str	r2, [sp, #8]
 80090a4:	2200      	movs	r2, #0
 80090a6:	9201      	str	r2, [sp, #4]
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	4603      	mov	r3, r0
 80090ac:	2280      	movs	r2, #128	; 0x80
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 fa5c 	bl	800a56c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	7959      	ldrb	r1, [r3, #5]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80090c8:	b292      	uxth	r2, r2
 80090ca:	9202      	str	r2, [sp, #8]
 80090cc:	2200      	movs	r2, #0
 80090ce:	9201      	str	r2, [sp, #4]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	4603      	mov	r3, r0
 80090d4:	2200      	movs	r2, #0
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 fa48 	bl	800a56c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090dc:	e114      	b.n	8009308 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f918 	bl	8009314 <USBH_HandleEnum>
 80090e4:	4603      	mov	r3, r0
 80090e6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 80fe 	bne.w	80092ee <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009100:	2b01      	cmp	r3, #1
 8009102:	d103      	bne.n	800910c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2208      	movs	r2, #8
 8009108:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800910a:	e0f0      	b.n	80092ee <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2207      	movs	r2, #7
 8009110:	701a      	strb	r2, [r3, #0]
      break;
 8009112:	e0ec      	b.n	80092ee <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 80e9 	beq.w	80092f2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009126:	2101      	movs	r1, #1
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2208      	movs	r2, #8
 8009130:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009132:	e0de      	b.n	80092f2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800913a:	b29b      	uxth	r3, r3
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fc3f 	bl	80099c2 <USBH_SetCfg>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	f040 80d5 	bne.w	80092f6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2209      	movs	r2, #9
 8009150:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009152:	e0d0      	b.n	80092f6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800915a:	f003 0320 	and.w	r3, r3, #32
 800915e:	2b00      	cmp	r3, #0
 8009160:	d016      	beq.n	8009190 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009162:	2101      	movs	r1, #1
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fc4f 	bl	8009a08 <USBH_SetFeature>
 800916a:	4603      	mov	r3, r0
 800916c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800916e:	7bbb      	ldrb	r3, [r7, #14]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	220a      	movs	r2, #10
 800917a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800917c:	e0bd      	b.n	80092fa <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b03      	cmp	r3, #3
 8009184:	f040 80b9 	bne.w	80092fa <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	220a      	movs	r2, #10
 800918c:	701a      	strb	r2, [r3, #0]
      break;
 800918e:	e0b4      	b.n	80092fa <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	220a      	movs	r2, #10
 8009194:	701a      	strb	r2, [r3, #0]
      break;
 8009196:	e0b0      	b.n	80092fa <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 80ad 	beq.w	80092fe <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
 80091b0:	e016      	b.n	80091e0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80091b2:	7bfa      	ldrb	r2, [r7, #15]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	32de      	adds	r2, #222	; 0xde
 80091b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091bc:	791a      	ldrb	r2, [r3, #4]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d108      	bne.n	80091da <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80091c8:	7bfa      	ldrb	r2, [r7, #15]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	32de      	adds	r2, #222	; 0xde
 80091ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80091d8:	e005      	b.n	80091e6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	3301      	adds	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0e5      	beq.n	80091b2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d016      	beq.n	800921e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	4798      	blx	r3
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d109      	bne.n	8009216 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2206      	movs	r2, #6
 8009206:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800920e:	2103      	movs	r1, #3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009214:	e073      	b.n	80092fe <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	220d      	movs	r2, #13
 800921a:	701a      	strb	r2, [r3, #0]
      break;
 800921c:	e06f      	b.n	80092fe <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	220d      	movs	r2, #13
 8009222:	701a      	strb	r2, [r3, #0]
      break;
 8009224:	e06b      	b.n	80092fe <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800922c:	2b00      	cmp	r3, #0
 800922e:	d017      	beq.n	8009260 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	4798      	blx	r3
 800923c:	4603      	mov	r3, r0
 800923e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d103      	bne.n	8009250 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	220b      	movs	r2, #11
 800924c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800924e:	e058      	b.n	8009302 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b02      	cmp	r3, #2
 8009256:	d154      	bne.n	8009302 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	220d      	movs	r2, #13
 800925c:	701a      	strb	r2, [r3, #0]
      break;
 800925e:	e050      	b.n	8009302 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	220d      	movs	r2, #13
 8009264:	701a      	strb	r2, [r3, #0]
      break;
 8009266:	e04c      	b.n	8009302 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d049      	beq.n	8009306 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	4798      	blx	r3
      }
      break;
 800927e:	e042      	b.n	8009306 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7ff fd47 	bl	8008d1c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d009      	beq.n	80092ac <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d005      	beq.n	80092c2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092bc:	2105      	movs	r1, #5
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d107      	bne.n	80092de <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7ff fe1f 	bl	8008f1a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092dc:	e014      	b.n	8009308 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 fb26 	bl	800a930 <USBH_LL_Start>
      break;
 80092e4:	e010      	b.n	8009308 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80092e6:	bf00      	nop
 80092e8:	e00e      	b.n	8009308 <USBH_Process+0x3cc>
      break;
 80092ea:	bf00      	nop
 80092ec:	e00c      	b.n	8009308 <USBH_Process+0x3cc>
      break;
 80092ee:	bf00      	nop
 80092f0:	e00a      	b.n	8009308 <USBH_Process+0x3cc>
    break;
 80092f2:	bf00      	nop
 80092f4:	e008      	b.n	8009308 <USBH_Process+0x3cc>
      break;
 80092f6:	bf00      	nop
 80092f8:	e006      	b.n	8009308 <USBH_Process+0x3cc>
      break;
 80092fa:	bf00      	nop
 80092fc:	e004      	b.n	8009308 <USBH_Process+0x3cc>
      break;
 80092fe:	bf00      	nop
 8009300:	e002      	b.n	8009308 <USBH_Process+0x3cc>
      break;
 8009302:	bf00      	nop
 8009304:	e000      	b.n	8009308 <USBH_Process+0x3cc>
      break;
 8009306:	bf00      	nop
  }
  return USBH_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop

08009314 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b088      	sub	sp, #32
 8009318:	af04      	add	r7, sp, #16
 800931a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800931c:	2301      	movs	r3, #1
 800931e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009320:	2301      	movs	r3, #1
 8009322:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	785b      	ldrb	r3, [r3, #1]
 8009328:	2b07      	cmp	r3, #7
 800932a:	f200 81c1 	bhi.w	80096b0 <USBH_HandleEnum+0x39c>
 800932e:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <USBH_HandleEnum+0x20>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	08009355 	.word	0x08009355
 8009338:	08009413 	.word	0x08009413
 800933c:	0800947d 	.word	0x0800947d
 8009340:	0800950b 	.word	0x0800950b
 8009344:	08009575 	.word	0x08009575
 8009348:	080095e5 	.word	0x080095e5
 800934c:	0800962b 	.word	0x0800962b
 8009350:	08009671 	.word	0x08009671
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009354:	2108      	movs	r1, #8
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fa50 	bl	80097fc <USBH_Get_DevDesc>
 800935c:	4603      	mov	r3, r0
 800935e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d130      	bne.n	80093c8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	7919      	ldrb	r1, [r3, #4]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800938a:	b292      	uxth	r2, r2
 800938c:	9202      	str	r2, [sp, #8]
 800938e:	2200      	movs	r2, #0
 8009390:	9201      	str	r2, [sp, #4]
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	4603      	mov	r3, r0
 8009396:	2280      	movs	r2, #128	; 0x80
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 f8e7 	bl	800a56c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	7959      	ldrb	r1, [r3, #5]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093b2:	b292      	uxth	r2, r2
 80093b4:	9202      	str	r2, [sp, #8]
 80093b6:	2200      	movs	r2, #0
 80093b8:	9201      	str	r2, [sp, #4]
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	4603      	mov	r3, r0
 80093be:	2200      	movs	r2, #0
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f8d3 	bl	800a56c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80093c6:	e175      	b.n	80096b4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	f040 8172 	bne.w	80096b4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093d6:	3301      	adds	r3, #1
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d903      	bls.n	80093f2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	220d      	movs	r2, #13
 80093ee:	701a      	strb	r2, [r3, #0]
      break;
 80093f0:	e160      	b.n	80096b4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	795b      	ldrb	r3, [r3, #5]
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f001 f907 	bl	800a60c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	791b      	ldrb	r3, [r3, #4]
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 f901 	bl	800a60c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	701a      	strb	r2, [r3, #0]
      break;
 8009410:	e150      	b.n	80096b4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009412:	2112      	movs	r1, #18
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f9f1 	bl	80097fc <USBH_Get_DevDesc>
 800941a:	4603      	mov	r3, r0
 800941c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d103      	bne.n	800942c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2202      	movs	r2, #2
 8009428:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800942a:	e145      	b.n	80096b8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	2b03      	cmp	r3, #3
 8009430:	f040 8142 	bne.w	80096b8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800943a:	3301      	adds	r3, #1
 800943c:	b2da      	uxtb	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800944a:	2b03      	cmp	r3, #3
 800944c:	d903      	bls.n	8009456 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	220d      	movs	r2, #13
 8009452:	701a      	strb	r2, [r3, #0]
      break;
 8009454:	e130      	b.n	80096b8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	795b      	ldrb	r3, [r3, #5]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f001 f8d5 	bl	800a60c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	791b      	ldrb	r3, [r3, #4]
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f001 f8cf 	bl	800a60c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	701a      	strb	r2, [r3, #0]
      break;
 800947a:	e11d      	b.n	80096b8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800947c:	2101      	movs	r1, #1
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fa7b 	bl	800997a <USBH_SetAddress>
 8009484:	4603      	mov	r3, r0
 8009486:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d132      	bne.n	80094f4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800948e:	2002      	movs	r0, #2
 8009490:	f001 fbb5 	bl	800abfe <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2203      	movs	r2, #3
 80094a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	7919      	ldrb	r1, [r3, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80094b6:	b292      	uxth	r2, r2
 80094b8:	9202      	str	r2, [sp, #8]
 80094ba:	2200      	movs	r2, #0
 80094bc:	9201      	str	r2, [sp, #4]
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	4603      	mov	r3, r0
 80094c2:	2280      	movs	r2, #128	; 0x80
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 f851 	bl	800a56c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	7959      	ldrb	r1, [r3, #5]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094de:	b292      	uxth	r2, r2
 80094e0:	9202      	str	r2, [sp, #8]
 80094e2:	2200      	movs	r2, #0
 80094e4:	9201      	str	r2, [sp, #4]
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	4603      	mov	r3, r0
 80094ea:	2200      	movs	r2, #0
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 f83d 	bl	800a56c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80094f2:	e0e3      	b.n	80096bc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	f040 80e0 	bne.w	80096bc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	220d      	movs	r2, #13
 8009500:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	705a      	strb	r2, [r3, #1]
      break;
 8009508:	e0d8      	b.n	80096bc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800950a:	2109      	movs	r1, #9
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f9a1 	bl	8009854 <USBH_Get_CfgDesc>
 8009512:	4603      	mov	r3, r0
 8009514:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009516:	7bbb      	ldrb	r3, [r7, #14]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d103      	bne.n	8009524 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2204      	movs	r2, #4
 8009520:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009522:	e0cd      	b.n	80096c0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2b03      	cmp	r3, #3
 8009528:	f040 80ca 	bne.w	80096c0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009532:	3301      	adds	r3, #1
 8009534:	b2da      	uxtb	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009542:	2b03      	cmp	r3, #3
 8009544:	d903      	bls.n	800954e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	220d      	movs	r2, #13
 800954a:	701a      	strb	r2, [r3, #0]
      break;
 800954c:	e0b8      	b.n	80096c0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	795b      	ldrb	r3, [r3, #5]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 f859 	bl	800a60c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	791b      	ldrb	r3, [r3, #4]
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 f853 	bl	800a60c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	701a      	strb	r2, [r3, #0]
      break;
 8009572:	e0a5      	b.n	80096c0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f969 	bl	8009854 <USBH_Get_CfgDesc>
 8009582:	4603      	mov	r3, r0
 8009584:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d103      	bne.n	8009594 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2205      	movs	r2, #5
 8009590:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009592:	e097      	b.n	80096c4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009594:	7bbb      	ldrb	r3, [r7, #14]
 8009596:	2b03      	cmp	r3, #3
 8009598:	f040 8094 	bne.w	80096c4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095a2:	3301      	adds	r3, #1
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095b2:	2b03      	cmp	r3, #3
 80095b4:	d903      	bls.n	80095be <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	220d      	movs	r2, #13
 80095ba:	701a      	strb	r2, [r3, #0]
      break;
 80095bc:	e082      	b.n	80096c4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	795b      	ldrb	r3, [r3, #5]
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 f821 	bl	800a60c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	791b      	ldrb	r3, [r3, #4]
 80095ce:	4619      	mov	r1, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f001 f81b 	bl	800a60c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
      break;
 80095e2:	e06f      	b.n	80096c4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d019      	beq.n	8009622 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80095fa:	23ff      	movs	r3, #255	; 0xff
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f953 	bl	80098a8 <USBH_Get_StringDesc>
 8009602:	4603      	mov	r3, r0
 8009604:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d103      	bne.n	8009614 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2206      	movs	r2, #6
 8009610:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009612:	e059      	b.n	80096c8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	2b03      	cmp	r3, #3
 8009618:	d156      	bne.n	80096c8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2206      	movs	r2, #6
 800961e:	705a      	strb	r2, [r3, #1]
      break;
 8009620:	e052      	b.n	80096c8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2206      	movs	r2, #6
 8009626:	705a      	strb	r2, [r3, #1]
      break;
 8009628:	e04e      	b.n	80096c8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009630:	2b00      	cmp	r3, #0
 8009632:	d019      	beq.n	8009668 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009640:	23ff      	movs	r3, #255	; 0xff
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f930 	bl	80098a8 <USBH_Get_StringDesc>
 8009648:	4603      	mov	r3, r0
 800964a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2207      	movs	r2, #7
 8009656:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009658:	e038      	b.n	80096cc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	2b03      	cmp	r3, #3
 800965e:	d135      	bne.n	80096cc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2207      	movs	r2, #7
 8009664:	705a      	strb	r2, [r3, #1]
      break;
 8009666:	e031      	b.n	80096cc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2207      	movs	r2, #7
 800966c:	705a      	strb	r2, [r3, #1]
      break;
 800966e:	e02d      	b.n	80096cc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009676:	2b00      	cmp	r3, #0
 8009678:	d017      	beq.n	80096aa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009686:	23ff      	movs	r3, #255	; 0xff
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f90d 	bl	80098a8 <USBH_Get_StringDesc>
 800968e:	4603      	mov	r3, r0
 8009690:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009692:	7bbb      	ldrb	r3, [r7, #14]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d102      	bne.n	800969e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800969c:	e018      	b.n	80096d0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800969e:	7bbb      	ldrb	r3, [r7, #14]
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d115      	bne.n	80096d0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	73fb      	strb	r3, [r7, #15]
      break;
 80096a8:	e012      	b.n	80096d0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]
      break;
 80096ae:	e00f      	b.n	80096d0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80096b0:	bf00      	nop
 80096b2:	e00e      	b.n	80096d2 <USBH_HandleEnum+0x3be>
      break;
 80096b4:	bf00      	nop
 80096b6:	e00c      	b.n	80096d2 <USBH_HandleEnum+0x3be>
      break;
 80096b8:	bf00      	nop
 80096ba:	e00a      	b.n	80096d2 <USBH_HandleEnum+0x3be>
      break;
 80096bc:	bf00      	nop
 80096be:	e008      	b.n	80096d2 <USBH_HandleEnum+0x3be>
      break;
 80096c0:	bf00      	nop
 80096c2:	e006      	b.n	80096d2 <USBH_HandleEnum+0x3be>
      break;
 80096c4:	bf00      	nop
 80096c6:	e004      	b.n	80096d2 <USBH_HandleEnum+0x3be>
      break;
 80096c8:	bf00      	nop
 80096ca:	e002      	b.n	80096d2 <USBH_HandleEnum+0x3be>
      break;
 80096cc:	bf00      	nop
 80096ce:	e000      	b.n	80096d2 <USBH_HandleEnum+0x3be>
      break;
 80096d0:	bf00      	nop
  }
  return Status;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	683a      	ldr	r2, [r7, #0]
 80096ea:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f804 	bl	800971e <USBH_HandleSof>
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b0b      	cmp	r3, #11
 800972e:	d10a      	bne.n	8009746 <USBH_HandleSof+0x28>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009736:	2b00      	cmp	r3, #0
 8009738:	d005      	beq.n	8009746 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	4798      	blx	r3
  }
}
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800975e:	bf00      	nop
}
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800977a:	bf00      	nop
}
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f001 f8c6 	bl	800a966 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	791b      	ldrb	r3, [r3, #4]
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 ff13 	bl	800a60c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	795b      	ldrb	r3, [r3, #5]
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 ff0d 	bl	800a60c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af02      	add	r7, sp, #8
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009808:	887b      	ldrh	r3, [r7, #2]
 800980a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800980e:	d901      	bls.n	8009814 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009810:	2303      	movs	r3, #3
 8009812:	e01b      	b.n	800984c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800981a:	887b      	ldrh	r3, [r7, #2]
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	4613      	mov	r3, r2
 8009820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009824:	2100      	movs	r1, #0
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f872 	bl	8009910 <USBH_GetDescriptor>
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800983c:	887a      	ldrh	r2, [r7, #2]
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f929 	bl	8009a98 <USBH_ParseDevDesc>
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800984a:	7bfb      	ldrb	r3, [r7, #15]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b086      	sub	sp, #24
 8009858:	af02      	add	r7, sp, #8
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	331c      	adds	r3, #28
 8009864:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009866:	887b      	ldrh	r3, [r7, #2]
 8009868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800986c:	d901      	bls.n	8009872 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800986e:	2303      	movs	r3, #3
 8009870:	e016      	b.n	80098a0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009872:	887b      	ldrh	r3, [r7, #2]
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800987c:	2100      	movs	r1, #0
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f846 	bl	8009910 <USBH_GetDescriptor>
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d107      	bne.n	800989e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800988e:	887b      	ldrh	r3, [r7, #2]
 8009890:	461a      	mov	r2, r3
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f9b3 	bl	8009c00 <USBH_ParseCfgDesc>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af02      	add	r7, sp, #8
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	607a      	str	r2, [r7, #4]
 80098b2:	461a      	mov	r2, r3
 80098b4:	460b      	mov	r3, r1
 80098b6:	72fb      	strb	r3, [r7, #11]
 80098b8:	4613      	mov	r3, r2
 80098ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80098bc:	893b      	ldrh	r3, [r7, #8]
 80098be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098c2:	d802      	bhi.n	80098ca <USBH_Get_StringDesc+0x22>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e01c      	b.n	8009908 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80098ce:	7afb      	ldrb	r3, [r7, #11]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80098d6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80098de:	893b      	ldrh	r3, [r7, #8]
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	460b      	mov	r3, r1
 80098e4:	2100      	movs	r1, #0
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 f812 	bl	8009910 <USBH_GetDescriptor>
 80098ec:	4603      	mov	r3, r0
 80098ee:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d107      	bne.n	8009906 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80098fc:	893a      	ldrh	r2, [r7, #8]
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	4618      	mov	r0, r3
 8009902:	f000 fb93 	bl	800a02c <USBH_ParseStringDesc>
  }

  return status;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	607b      	str	r3, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	72fb      	strb	r3, [r7, #11]
 800991e:	4613      	mov	r3, r2
 8009920:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	789b      	ldrb	r3, [r3, #2]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d11c      	bne.n	8009964 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800992a:	7afb      	ldrb	r3, [r7, #11]
 800992c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009930:	b2da      	uxtb	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2206      	movs	r2, #6
 800993a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	893a      	ldrh	r2, [r7, #8]
 8009940:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009942:	893b      	ldrh	r3, [r7, #8]
 8009944:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800994c:	d104      	bne.n	8009958 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f240 4209 	movw	r2, #1033	; 0x409
 8009954:	829a      	strh	r2, [r3, #20]
 8009956:	e002      	b.n	800995e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8b3a      	ldrh	r2, [r7, #24]
 8009962:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009964:	8b3b      	ldrh	r3, [r7, #24]
 8009966:	461a      	mov	r2, r3
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fbac 	bl	800a0c8 <USBH_CtlReq>
 8009970:	4603      	mov	r3, r0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	789b      	ldrb	r3, [r3, #2]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d10f      	bne.n	80099ae <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2205      	movs	r2, #5
 8009998:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	b29a      	uxth	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099ae:	2200      	movs	r2, #0
 80099b0:	2100      	movs	r1, #0
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fb88 	bl	800a0c8 <USBH_CtlReq>
 80099b8:	4603      	mov	r3, r0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	789b      	ldrb	r3, [r3, #2]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d10e      	bne.n	80099f4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2209      	movs	r2, #9
 80099e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	887a      	ldrh	r2, [r7, #2]
 80099e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099f4:	2200      	movs	r2, #0
 80099f6:	2100      	movs	r1, #0
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fb65 	bl	800a0c8 <USBH_CtlReq>
 80099fe:	4603      	mov	r3, r0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	789b      	ldrb	r3, [r3, #2]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10f      	bne.n	8009a3c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2203      	movs	r2, #3
 8009a26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009a28:	78fb      	ldrb	r3, [r7, #3]
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2100      	movs	r1, #0
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fb41 	bl	800a0c8 <USBH_CtlReq>
 8009a46:	4603      	mov	r3, r0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	789b      	ldrb	r3, [r3, #2]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d10f      	bne.n	8009a84 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a84:	2200      	movs	r2, #0
 8009a86:	2100      	movs	r1, #0
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fb1d 	bl	800a0c8 <USBH_CtlReq>
 8009a8e:	4603      	mov	r3, r0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f203 3326 	addw	r3, r3, #806	; 0x326
 8009aac:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e098      	b.n	8009bee <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	781a      	ldrb	r2, [r3, #0]
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	785a      	ldrb	r2, [r3, #1]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	3302      	adds	r3, #2
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	3303      	adds	r3, #3
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	791a      	ldrb	r2, [r3, #4]
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	795a      	ldrb	r2, [r3, #5]
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	799a      	ldrb	r2, [r3, #6]
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	79da      	ldrb	r2, [r3, #7]
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d004      	beq.n	8009b1c <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d11b      	bne.n	8009b54 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	79db      	ldrb	r3, [r3, #7]
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	dc0f      	bgt.n	8009b44 <USBH_ParseDevDesc+0xac>
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	db0f      	blt.n	8009b48 <USBH_ParseDevDesc+0xb0>
 8009b28:	3b08      	subs	r3, #8
 8009b2a:	4a34      	ldr	r2, [pc, #208]	; (8009bfc <USBH_ParseDevDesc+0x164>)
 8009b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	bf14      	ite	ne
 8009b38:	2301      	movne	r3, #1
 8009b3a:	2300      	moveq	r3, #0
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <USBH_ParseDevDesc+0xb8>
 8009b42:	e001      	b.n	8009b48 <USBH_ParseDevDesc+0xb0>
 8009b44:	2b40      	cmp	r3, #64	; 0x40
 8009b46:	d003      	beq.n	8009b50 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	71da      	strb	r2, [r3, #7]
        break;
 8009b4e:	e000      	b.n	8009b52 <USBH_ParseDevDesc+0xba>
        break;
 8009b50:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009b52:	e00e      	b.n	8009b72 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d107      	bne.n	8009b6e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	79db      	ldrb	r3, [r3, #7]
 8009b62:	2b08      	cmp	r3, #8
 8009b64:	d005      	beq.n	8009b72 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	2208      	movs	r2, #8
 8009b6a:	71da      	strb	r2, [r3, #7]
 8009b6c:	e001      	b.n	8009b72 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009b72:	88fb      	ldrh	r3, [r7, #6]
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d939      	bls.n	8009bec <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	3308      	adds	r3, #8
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	3309      	adds	r3, #9
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	021b      	lsls	r3, r3, #8
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	330a      	adds	r3, #10
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	330b      	adds	r3, #11
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	021b      	lsls	r3, r3, #8
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	330c      	adds	r3, #12
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	330d      	adds	r3, #13
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	021b      	lsls	r3, r3, #8
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	7b9a      	ldrb	r2, [r3, #14]
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	7bda      	ldrb	r2, [r3, #15]
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	7c1a      	ldrb	r2, [r3, #16]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	7c5a      	ldrb	r2, [r3, #17]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	371c      	adds	r7, #28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	01000101 	.word	0x01000101

08009c00 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b08c      	sub	sp, #48	; 0x30
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009c14:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d101      	bne.n	8009c32 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009c2e:	2302      	movs	r3, #2
 8009c30:	e0db      	b.n	8009dea <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	781a      	ldrb	r2, [r3, #0]
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	785a      	ldrb	r2, [r3, #1]
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	3302      	adds	r3, #2
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	3303      	adds	r3, #3
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	021b      	lsls	r3, r3, #8
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c62:	bf28      	it	cs
 8009c64:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	791a      	ldrb	r2, [r3, #4]
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	795a      	ldrb	r2, [r3, #5]
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	799a      	ldrb	r2, [r3, #6]
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	79da      	ldrb	r2, [r3, #7]
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
 8009c8c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	7a1a      	ldrb	r2, [r3, #8]
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2b09      	cmp	r3, #9
 8009c9c:	d002      	beq.n	8009ca4 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	2209      	movs	r2, #9
 8009ca2:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009ca4:	88fb      	ldrh	r3, [r7, #6]
 8009ca6:	2b09      	cmp	r3, #9
 8009ca8:	f240 809d 	bls.w	8009de6 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8009cac:	2309      	movs	r3, #9
 8009cae:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009cb4:	e081      	b.n	8009dba <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009cb6:	f107 0316 	add.w	r3, r7, #22
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cbe:	f000 f9e8 	bl	800a092 <USBH_GetNextDesc>
 8009cc2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc6:	785b      	ldrb	r3, [r3, #1]
 8009cc8:	2b04      	cmp	r3, #4
 8009cca:	d176      	bne.n	8009dba <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	2b09      	cmp	r3, #9
 8009cd2:	d002      	beq.n	8009cda <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	2209      	movs	r2, #9
 8009cd8:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009cda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cde:	221a      	movs	r2, #26
 8009ce0:	fb02 f303 	mul.w	r3, r2, r3
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	6a3a      	ldr	r2, [r7, #32]
 8009ce8:	4413      	add	r3, r2
 8009cea:	3302      	adds	r3, #2
 8009cec:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cf0:	69f8      	ldr	r0, [r7, #28]
 8009cf2:	f000 f87e 	bl	8009df2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d00:	e043      	b.n	8009d8a <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d02:	f107 0316 	add.w	r3, r7, #22
 8009d06:	4619      	mov	r1, r3
 8009d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d0a:	f000 f9c2 	bl	800a092 <USBH_GetNextDesc>
 8009d0e:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	785b      	ldrb	r3, [r3, #1]
 8009d14:	2b05      	cmp	r3, #5
 8009d16:	d138      	bne.n	8009d8a <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	795b      	ldrb	r3, [r3, #5]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d113      	bne.n	8009d48 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d003      	beq.n	8009d30 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	799b      	ldrb	r3, [r3, #6]
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d10b      	bne.n	8009d48 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	79db      	ldrb	r3, [r3, #7]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10b      	bne.n	8009d50 <USBH_ParseCfgDesc+0x150>
 8009d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	2b09      	cmp	r3, #9
 8009d3e:	d007      	beq.n	8009d50 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	2209      	movs	r2, #9
 8009d44:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d46:	e003      	b.n	8009d50 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	2207      	movs	r2, #7
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	e000      	b.n	8009d52 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d50:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009d5a:	3201      	adds	r2, #1
 8009d5c:	00d2      	lsls	r2, r2, #3
 8009d5e:	211a      	movs	r1, #26
 8009d60:	fb01 f303 	mul.w	r3, r1, r3
 8009d64:	4413      	add	r3, r2
 8009d66:	3308      	adds	r3, #8
 8009d68:	6a3a      	ldr	r2, [r7, #32]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d72:	69b9      	ldr	r1, [r7, #24]
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f000 f870 	bl	8009e5a <USBH_ParseEPDesc>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009d80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d84:	3301      	adds	r3, #1
 8009d86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	791b      	ldrb	r3, [r3, #4]
 8009d8e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d204      	bcs.n	8009da0 <USBH_ParseCfgDesc+0x1a0>
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	885a      	ldrh	r2, [r3, #2]
 8009d9a:	8afb      	ldrh	r3, [r7, #22]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d8b0      	bhi.n	8009d02 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	791b      	ldrb	r3, [r3, #4]
 8009da4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d201      	bcs.n	8009db0 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e01c      	b.n	8009dea <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8009db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009db4:	3301      	adds	r3, #1
 8009db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d805      	bhi.n	8009dce <USBH_ParseCfgDesc+0x1ce>
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	885a      	ldrh	r2, [r3, #2]
 8009dc6:	8afb      	ldrh	r3, [r7, #22]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	f63f af74 	bhi.w	8009cb6 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	791b      	ldrb	r3, [r3, #4]
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	bf28      	it	cs
 8009dd6:	2302      	movcs	r3, #2
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d201      	bcs.n	8009de6 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e001      	b.n	8009dea <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8009de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3730      	adds	r7, #48	; 0x30
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	781a      	ldrb	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	785a      	ldrb	r2, [r3, #1]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	789a      	ldrb	r2, [r3, #2]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	78da      	ldrb	r2, [r3, #3]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	bf28      	it	cs
 8009e26:	2302      	movcs	r3, #2
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	795a      	ldrb	r2, [r3, #5]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	799a      	ldrb	r2, [r3, #6]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	79da      	ldrb	r2, [r3, #7]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	7a1a      	ldrb	r2, [r3, #8]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	721a      	strb	r2, [r3, #8]
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b087      	sub	sp, #28
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	781a      	ldrb	r2, [r3, #0]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	785a      	ldrb	r2, [r3, #1]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	789a      	ldrb	r2, [r3, #2]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	78da      	ldrb	r2, [r3, #3]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	3305      	adds	r3, #5
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	021b      	lsls	r3, r3, #8
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	799a      	ldrb	r2, [r3, #6]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	889b      	ldrh	r3, [r3, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d009      	beq.n	8009eca <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ebe:	d804      	bhi.n	8009eca <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ec8:	d901      	bls.n	8009ece <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d136      	bne.n	8009f46 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	78db      	ldrb	r3, [r3, #3]
 8009edc:	f003 0303 	and.w	r3, r3, #3
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d108      	bne.n	8009ef6 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	889b      	ldrh	r3, [r3, #4]
 8009ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eec:	f240 8097 	bls.w	800a01e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	75fb      	strb	r3, [r7, #23]
 8009ef4:	e093      	b.n	800a01e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	78db      	ldrb	r3, [r3, #3]
 8009efa:	f003 0303 	and.w	r3, r3, #3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d107      	bne.n	8009f12 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	889b      	ldrh	r3, [r3, #4]
 8009f06:	2b40      	cmp	r3, #64	; 0x40
 8009f08:	f240 8089 	bls.w	800a01e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	75fb      	strb	r3, [r7, #23]
 8009f10:	e085      	b.n	800a01e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	78db      	ldrb	r3, [r3, #3]
 8009f16:	f003 0303 	and.w	r3, r3, #3
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d005      	beq.n	8009f2a <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	78db      	ldrb	r3, [r3, #3]
 8009f22:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d10a      	bne.n	8009f40 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	799b      	ldrb	r3, [r3, #6]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <USBH_ParseEPDesc+0xe0>
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	799b      	ldrb	r3, [r3, #6]
 8009f36:	2b10      	cmp	r3, #16
 8009f38:	d970      	bls.n	800a01c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f3e:	e06d      	b.n	800a01c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f40:	2303      	movs	r3, #3
 8009f42:	75fb      	strb	r3, [r7, #23]
 8009f44:	e06b      	b.n	800a01e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d13c      	bne.n	8009fca <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	78db      	ldrb	r3, [r3, #3]
 8009f54:	f003 0303 	and.w	r3, r3, #3
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	d005      	beq.n	8009f68 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	78db      	ldrb	r3, [r3, #3]
 8009f60:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d106      	bne.n	8009f76 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	889b      	ldrh	r3, [r3, #4]
 8009f6c:	2b40      	cmp	r3, #64	; 0x40
 8009f6e:	d956      	bls.n	800a01e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009f70:	2303      	movs	r3, #3
 8009f72:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f74:	e053      	b.n	800a01e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	78db      	ldrb	r3, [r3, #3]
 8009f7a:	f003 0303 	and.w	r3, r3, #3
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d10e      	bne.n	8009fa0 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	799b      	ldrb	r3, [r3, #6]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d007      	beq.n	8009f9a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009f8e:	2b10      	cmp	r3, #16
 8009f90:	d803      	bhi.n	8009f9a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009f96:	2b40      	cmp	r3, #64	; 0x40
 8009f98:	d941      	bls.n	800a01e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	75fb      	strb	r3, [r7, #23]
 8009f9e:	e03e      	b.n	800a01e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	78db      	ldrb	r3, [r3, #3]
 8009fa4:	f003 0303 	and.w	r3, r3, #3
 8009fa8:	2b03      	cmp	r3, #3
 8009faa:	d10b      	bne.n	8009fc4 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	799b      	ldrb	r3, [r3, #6]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d004      	beq.n	8009fbe <USBH_ParseEPDesc+0x164>
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	889b      	ldrh	r3, [r3, #4]
 8009fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fbc:	d32f      	bcc.n	800a01e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	75fb      	strb	r3, [r7, #23]
 8009fc2:	e02c      	b.n	800a01e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	75fb      	strb	r3, [r7, #23]
 8009fc8:	e029      	b.n	800a01e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d120      	bne.n	800a016 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	78db      	ldrb	r3, [r3, #3]
 8009fd8:	f003 0303 	and.w	r3, r3, #3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d106      	bne.n	8009fee <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	889b      	ldrh	r3, [r3, #4]
 8009fe4:	2b08      	cmp	r3, #8
 8009fe6:	d01a      	beq.n	800a01e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	75fb      	strb	r3, [r7, #23]
 8009fec:	e017      	b.n	800a01e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	78db      	ldrb	r3, [r3, #3]
 8009ff2:	f003 0303 	and.w	r3, r3, #3
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d10a      	bne.n	800a010 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	799b      	ldrb	r3, [r3, #6]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <USBH_ParseEPDesc+0x1b0>
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	889b      	ldrh	r3, [r3, #4]
 800a006:	2b08      	cmp	r3, #8
 800a008:	d909      	bls.n	800a01e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a00a:	2303      	movs	r3, #3
 800a00c:	75fb      	strb	r3, [r7, #23]
 800a00e:	e006      	b.n	800a01e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a010:	2303      	movs	r3, #3
 800a012:	75fb      	strb	r3, [r7, #23]
 800a014:	e003      	b.n	800a01e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a016:	2303      	movs	r3, #3
 800a018:	75fb      	strb	r3, [r7, #23]
 800a01a:	e000      	b.n	800a01e <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a01c:	bf00      	nop
  }

  return status;
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a020:	4618      	mov	r0, r3
 800a022:	371c      	adds	r7, #28
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b087      	sub	sp, #28
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	4613      	mov	r3, r2
 800a038:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3301      	adds	r3, #1
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	2b03      	cmp	r3, #3
 800a042:	d120      	bne.n	800a086 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	1e9a      	subs	r2, r3, #2
 800a04a:	88fb      	ldrh	r3, [r7, #6]
 800a04c:	4293      	cmp	r3, r2
 800a04e:	bf28      	it	cs
 800a050:	4613      	movcs	r3, r2
 800a052:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3302      	adds	r3, #2
 800a058:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a05a:	2300      	movs	r3, #0
 800a05c:	82fb      	strh	r3, [r7, #22]
 800a05e:	e00b      	b.n	800a078 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a060:	8afb      	ldrh	r3, [r7, #22]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	4413      	add	r3, r2
 800a066:	781a      	ldrb	r2, [r3, #0]
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	3301      	adds	r3, #1
 800a070:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a072:	8afb      	ldrh	r3, [r7, #22]
 800a074:	3302      	adds	r3, #2
 800a076:	82fb      	strh	r3, [r7, #22]
 800a078:	8afa      	ldrh	r2, [r7, #22]
 800a07a:	8abb      	ldrh	r3, [r7, #20]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d3ef      	bcc.n	800a060 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2200      	movs	r2, #0
 800a084:	701a      	strb	r2, [r3, #0]
  }
}
 800a086:	bf00      	nop
 800a088:	371c      	adds	r7, #28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a092:	b480      	push	{r7}
 800a094:	b085      	sub	sp, #20
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	881a      	ldrh	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	4413      	add	r3, r2
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	789b      	ldrb	r3, [r3, #2]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d002      	beq.n	800a0e8 <USBH_CtlReq+0x20>
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d00f      	beq.n	800a106 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a0e6:	e027      	b.n	800a138 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	88fa      	ldrh	r2, [r7, #6]
 800a0f2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a100:	2301      	movs	r3, #1
 800a102:	75fb      	strb	r3, [r7, #23]
      break;
 800a104:	e018      	b.n	800a138 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f000 f81c 	bl	800a144 <USBH_HandleControl>
 800a10c:	4603      	mov	r3, r0
 800a10e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <USBH_CtlReq+0x54>
 800a116:	7dfb      	ldrb	r3, [r7, #23]
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d106      	bne.n	800a12a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2201      	movs	r2, #1
 800a120:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	761a      	strb	r2, [r3, #24]
      break;
 800a128:	e005      	b.n	800a136 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d102      	bne.n	800a136 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2201      	movs	r2, #1
 800a134:	709a      	strb	r2, [r3, #2]
      break;
 800a136:	bf00      	nop
  }
  return status;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af02      	add	r7, sp, #8
 800a14a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a14c:	2301      	movs	r3, #1
 800a14e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a150:	2300      	movs	r3, #0
 800a152:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	7e1b      	ldrb	r3, [r3, #24]
 800a158:	3b01      	subs	r3, #1
 800a15a:	2b0a      	cmp	r3, #10
 800a15c:	f200 8156 	bhi.w	800a40c <USBH_HandleControl+0x2c8>
 800a160:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <USBH_HandleControl+0x24>)
 800a162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a166:	bf00      	nop
 800a168:	0800a195 	.word	0x0800a195
 800a16c:	0800a1af 	.word	0x0800a1af
 800a170:	0800a219 	.word	0x0800a219
 800a174:	0800a23f 	.word	0x0800a23f
 800a178:	0800a277 	.word	0x0800a277
 800a17c:	0800a2a1 	.word	0x0800a2a1
 800a180:	0800a2f3 	.word	0x0800a2f3
 800a184:	0800a315 	.word	0x0800a315
 800a188:	0800a351 	.word	0x0800a351
 800a18c:	0800a377 	.word	0x0800a377
 800a190:	0800a3b5 	.word	0x0800a3b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f103 0110 	add.w	r1, r3, #16
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	795b      	ldrb	r3, [r3, #5]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f943 	bl	800a42c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	761a      	strb	r2, [r3, #24]
      break;
 800a1ac:	e139      	b.n	800a422 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	795b      	ldrb	r3, [r3, #5]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fcc5 	bl	800ab44 <USBH_LL_GetURBState>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d11e      	bne.n	800a202 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	7c1b      	ldrb	r3, [r3, #16]
 800a1c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	8adb      	ldrh	r3, [r3, #22]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00a      	beq.n	800a1ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a1d6:	7b7b      	ldrb	r3, [r7, #13]
 800a1d8:	2b80      	cmp	r3, #128	; 0x80
 800a1da:	d103      	bne.n	800a1e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2203      	movs	r2, #3
 800a1e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1e2:	e115      	b.n	800a410 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2205      	movs	r2, #5
 800a1e8:	761a      	strb	r2, [r3, #24]
      break;
 800a1ea:	e111      	b.n	800a410 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a1ec:	7b7b      	ldrb	r3, [r7, #13]
 800a1ee:	2b80      	cmp	r3, #128	; 0x80
 800a1f0:	d103      	bne.n	800a1fa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2209      	movs	r2, #9
 800a1f6:	761a      	strb	r2, [r3, #24]
      break;
 800a1f8:	e10a      	b.n	800a410 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2207      	movs	r2, #7
 800a1fe:	761a      	strb	r2, [r3, #24]
      break;
 800a200:	e106      	b.n	800a410 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a202:	7bbb      	ldrb	r3, [r7, #14]
 800a204:	2b04      	cmp	r3, #4
 800a206:	d003      	beq.n	800a210 <USBH_HandleControl+0xcc>
 800a208:	7bbb      	ldrb	r3, [r7, #14]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	f040 8100 	bne.w	800a410 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	220b      	movs	r2, #11
 800a214:	761a      	strb	r2, [r3, #24]
      break;
 800a216:	e0fb      	b.n	800a410 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6899      	ldr	r1, [r3, #8]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	899a      	ldrh	r2, [r3, #12]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	791b      	ldrb	r3, [r3, #4]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f93a 	bl	800a4aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2204      	movs	r2, #4
 800a23a:	761a      	strb	r2, [r3, #24]
      break;
 800a23c:	e0f1      	b.n	800a422 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	791b      	ldrb	r3, [r3, #4]
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fc7d 	bl	800ab44 <USBH_LL_GetURBState>
 800a24a:	4603      	mov	r3, r0
 800a24c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d102      	bne.n	800a25a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2209      	movs	r2, #9
 800a258:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a25a:	7bbb      	ldrb	r3, [r7, #14]
 800a25c:	2b05      	cmp	r3, #5
 800a25e:	d102      	bne.n	800a266 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a260:	2303      	movs	r3, #3
 800a262:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a264:	e0d6      	b.n	800a414 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a266:	7bbb      	ldrb	r3, [r7, #14]
 800a268:	2b04      	cmp	r3, #4
 800a26a:	f040 80d3 	bne.w	800a414 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	220b      	movs	r2, #11
 800a272:	761a      	strb	r2, [r3, #24]
      break;
 800a274:	e0ce      	b.n	800a414 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6899      	ldr	r1, [r3, #8]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	899a      	ldrh	r2, [r3, #12]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	795b      	ldrb	r3, [r3, #5]
 800a282:	2001      	movs	r0, #1
 800a284:	9000      	str	r0, [sp, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f8ea 	bl	800a460 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a292:	b29a      	uxth	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2206      	movs	r2, #6
 800a29c:	761a      	strb	r2, [r3, #24]
      break;
 800a29e:	e0c0      	b.n	800a422 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	795b      	ldrb	r3, [r3, #5]
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fc4c 	bl	800ab44 <USBH_LL_GetURBState>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d103      	bne.n	800a2be <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2207      	movs	r2, #7
 800a2ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2bc:	e0ac      	b.n	800a418 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	2b05      	cmp	r3, #5
 800a2c2:	d105      	bne.n	800a2d0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	220c      	movs	r2, #12
 800a2c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ce:	e0a3      	b.n	800a418 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a2d0:	7bbb      	ldrb	r3, [r7, #14]
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d103      	bne.n	800a2de <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2205      	movs	r2, #5
 800a2da:	761a      	strb	r2, [r3, #24]
      break;
 800a2dc:	e09c      	b.n	800a418 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	2b04      	cmp	r3, #4
 800a2e2:	f040 8099 	bne.w	800a418 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	220b      	movs	r2, #11
 800a2ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a2f0:	e092      	b.n	800a418 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	791b      	ldrb	r3, [r3, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f8d5 	bl	800a4aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a306:	b29a      	uxth	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2208      	movs	r2, #8
 800a310:	761a      	strb	r2, [r3, #24]

      break;
 800a312:	e086      	b.n	800a422 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	791b      	ldrb	r3, [r3, #4]
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fc12 	bl	800ab44 <USBH_LL_GetURBState>
 800a320:	4603      	mov	r3, r0
 800a322:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a324:	7bbb      	ldrb	r3, [r7, #14]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d105      	bne.n	800a336 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	220d      	movs	r2, #13
 800a32e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a334:	e072      	b.n	800a41c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a336:	7bbb      	ldrb	r3, [r7, #14]
 800a338:	2b04      	cmp	r3, #4
 800a33a:	d103      	bne.n	800a344 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	220b      	movs	r2, #11
 800a340:	761a      	strb	r2, [r3, #24]
      break;
 800a342:	e06b      	b.n	800a41c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a344:	7bbb      	ldrb	r3, [r7, #14]
 800a346:	2b05      	cmp	r3, #5
 800a348:	d168      	bne.n	800a41c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a34a:	2303      	movs	r3, #3
 800a34c:	73fb      	strb	r3, [r7, #15]
      break;
 800a34e:	e065      	b.n	800a41c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	795b      	ldrb	r3, [r3, #5]
 800a354:	2201      	movs	r2, #1
 800a356:	9200      	str	r2, [sp, #0]
 800a358:	2200      	movs	r2, #0
 800a35a:	2100      	movs	r1, #0
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f87f 	bl	800a460 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a368:	b29a      	uxth	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	220a      	movs	r2, #10
 800a372:	761a      	strb	r2, [r3, #24]
      break;
 800a374:	e055      	b.n	800a422 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	795b      	ldrb	r3, [r3, #5]
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fbe1 	bl	800ab44 <USBH_LL_GetURBState>
 800a382:	4603      	mov	r3, r0
 800a384:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a386:	7bbb      	ldrb	r3, [r7, #14]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d105      	bne.n	800a398 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	220d      	movs	r2, #13
 800a394:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a396:	e043      	b.n	800a420 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a398:	7bbb      	ldrb	r3, [r7, #14]
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d103      	bne.n	800a3a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2209      	movs	r2, #9
 800a3a2:	761a      	strb	r2, [r3, #24]
      break;
 800a3a4:	e03c      	b.n	800a420 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	d139      	bne.n	800a420 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	220b      	movs	r2, #11
 800a3b0:	761a      	strb	r2, [r3, #24]
      break;
 800a3b2:	e035      	b.n	800a420 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	7e5b      	ldrb	r3, [r3, #25]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	765a      	strb	r2, [r3, #25]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	7e5b      	ldrb	r3, [r3, #25]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d806      	bhi.n	800a3d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a3d4:	e025      	b.n	800a422 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3dc:	2106      	movs	r1, #6
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	795b      	ldrb	r3, [r3, #5]
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f90c 	bl	800a60c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	791b      	ldrb	r3, [r3, #4]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f906 	bl	800a60c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a406:	2302      	movs	r3, #2
 800a408:	73fb      	strb	r3, [r7, #15]
      break;
 800a40a:	e00a      	b.n	800a422 <USBH_HandleControl+0x2de>

    default:
      break;
 800a40c:	bf00      	nop
 800a40e:	e008      	b.n	800a422 <USBH_HandleControl+0x2de>
      break;
 800a410:	bf00      	nop
 800a412:	e006      	b.n	800a422 <USBH_HandleControl+0x2de>
      break;
 800a414:	bf00      	nop
 800a416:	e004      	b.n	800a422 <USBH_HandleControl+0x2de>
      break;
 800a418:	bf00      	nop
 800a41a:	e002      	b.n	800a422 <USBH_HandleControl+0x2de>
      break;
 800a41c:	bf00      	nop
 800a41e:	e000      	b.n	800a422 <USBH_HandleControl+0x2de>
      break;
 800a420:	bf00      	nop
  }

  return status;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b088      	sub	sp, #32
 800a430:	af04      	add	r7, sp, #16
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	4613      	mov	r3, r2
 800a438:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a43a:	79f9      	ldrb	r1, [r7, #7]
 800a43c:	2300      	movs	r3, #0
 800a43e:	9303      	str	r3, [sp, #12]
 800a440:	2308      	movs	r3, #8
 800a442:	9302      	str	r3, [sp, #8]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	9301      	str	r3, [sp, #4]
 800a448:	2300      	movs	r3, #0
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	2300      	movs	r3, #0
 800a44e:	2200      	movs	r2, #0
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 fb46 	bl	800aae2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af04      	add	r7, sp, #16
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	4611      	mov	r1, r2
 800a46c:	461a      	mov	r2, r3
 800a46e:	460b      	mov	r3, r1
 800a470:	80fb      	strh	r3, [r7, #6]
 800a472:	4613      	mov	r3, r2
 800a474:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a480:	2300      	movs	r3, #0
 800a482:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a484:	7979      	ldrb	r1, [r7, #5]
 800a486:	7e3b      	ldrb	r3, [r7, #24]
 800a488:	9303      	str	r3, [sp, #12]
 800a48a:	88fb      	ldrh	r3, [r7, #6]
 800a48c:	9302      	str	r3, [sp, #8]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	9301      	str	r3, [sp, #4]
 800a492:	2301      	movs	r3, #1
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	2300      	movs	r3, #0
 800a498:	2200      	movs	r2, #0
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f000 fb21 	bl	800aae2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b088      	sub	sp, #32
 800a4ae:	af04      	add	r7, sp, #16
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	80fb      	strh	r3, [r7, #6]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4c0:	7979      	ldrb	r1, [r7, #5]
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9303      	str	r3, [sp, #12]
 800a4c6:	88fb      	ldrh	r3, [r7, #6]
 800a4c8:	9302      	str	r3, [sp, #8]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 fb03 	bl	800aae2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a4dc:	2300      	movs	r3, #0

}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b088      	sub	sp, #32
 800a4ea:	af04      	add	r7, sp, #16
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	80fb      	strh	r3, [r7, #6]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a506:	2300      	movs	r3, #0
 800a508:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a50a:	7979      	ldrb	r1, [r7, #5]
 800a50c:	7e3b      	ldrb	r3, [r7, #24]
 800a50e:	9303      	str	r3, [sp, #12]
 800a510:	88fb      	ldrh	r3, [r7, #6]
 800a512:	9302      	str	r3, [sp, #8]
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	2301      	movs	r3, #1
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	2302      	movs	r3, #2
 800a51e:	2200      	movs	r2, #0
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f000 fade 	bl	800aae2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b088      	sub	sp, #32
 800a534:	af04      	add	r7, sp, #16
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	4611      	mov	r1, r2
 800a53c:	461a      	mov	r2, r3
 800a53e:	460b      	mov	r3, r1
 800a540:	80fb      	strh	r3, [r7, #6]
 800a542:	4613      	mov	r3, r2
 800a544:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a546:	7979      	ldrb	r1, [r7, #5]
 800a548:	2300      	movs	r3, #0
 800a54a:	9303      	str	r3, [sp, #12]
 800a54c:	88fb      	ldrh	r3, [r7, #6]
 800a54e:	9302      	str	r3, [sp, #8]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	9301      	str	r3, [sp, #4]
 800a554:	2301      	movs	r3, #1
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	2302      	movs	r3, #2
 800a55a:	2201      	movs	r2, #1
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 fac0 	bl	800aae2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af04      	add	r7, sp, #16
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	4608      	mov	r0, r1
 800a576:	4611      	mov	r1, r2
 800a578:	461a      	mov	r2, r3
 800a57a:	4603      	mov	r3, r0
 800a57c:	70fb      	strb	r3, [r7, #3]
 800a57e:	460b      	mov	r3, r1
 800a580:	70bb      	strb	r3, [r7, #2]
 800a582:	4613      	mov	r3, r2
 800a584:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a586:	7878      	ldrb	r0, [r7, #1]
 800a588:	78ba      	ldrb	r2, [r7, #2]
 800a58a:	78f9      	ldrb	r1, [r7, #3]
 800a58c:	8b3b      	ldrh	r3, [r7, #24]
 800a58e:	9302      	str	r3, [sp, #8]
 800a590:	7d3b      	ldrb	r3, [r7, #20]
 800a592:	9301      	str	r3, [sp, #4]
 800a594:	7c3b      	ldrb	r3, [r7, #16]
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	4603      	mov	r3, r0
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fa53 	bl	800aa46 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a5b6:	78fb      	ldrb	r3, [r7, #3]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fa72 	bl	800aaa4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f836 	bl	800a648 <USBH_GetFreePipe>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a5e0:	89fb      	ldrh	r3, [r7, #14]
 800a5e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d00a      	beq.n	800a600 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a5ea:	78fa      	ldrb	r2, [r7, #3]
 800a5ec:	89fb      	ldrh	r3, [r7, #14]
 800a5ee:	f003 030f 	and.w	r3, r3, #15
 800a5f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	33e0      	adds	r3, #224	; 0xe0
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	440b      	add	r3, r1
 800a5fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a600:	89fb      	ldrh	r3, [r7, #14]
 800a602:	b2db      	uxtb	r3, r3
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a618:	78fb      	ldrb	r3, [r7, #3]
 800a61a:	2b0f      	cmp	r3, #15
 800a61c:	d80d      	bhi.n	800a63a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a61e:	78fb      	ldrb	r3, [r7, #3]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	33e0      	adds	r3, #224	; 0xe0
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a630:	6879      	ldr	r1, [r7, #4]
 800a632:	33e0      	adds	r3, #224	; 0xe0
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	440b      	add	r3, r1
 800a638:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
 800a658:	e00f      	b.n	800a67a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	33e0      	adds	r3, #224	; 0xe0
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d102      	bne.n	800a674 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	b29b      	uxth	r3, r3
 800a672:	e007      	b.n	800a684 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	3301      	adds	r3, #1
 800a678:	73fb      	strb	r3, [r7, #15]
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
 800a67c:	2b0f      	cmp	r3, #15
 800a67e:	d9ec      	bls.n	800a65a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a680:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a684:	4618      	mov	r0, r3
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a694:	2201      	movs	r2, #1
 800a696:	490e      	ldr	r1, [pc, #56]	; (800a6d0 <MX_USB_HOST_Init+0x40>)
 800a698:	480e      	ldr	r0, [pc, #56]	; (800a6d4 <MX_USB_HOST_Init+0x44>)
 800a69a:	f7fe fb05 	bl	8008ca8 <USBH_Init>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a6a4:	f7f6 fa78 	bl	8000b98 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a6a8:	490b      	ldr	r1, [pc, #44]	; (800a6d8 <MX_USB_HOST_Init+0x48>)
 800a6aa:	480a      	ldr	r0, [pc, #40]	; (800a6d4 <MX_USB_HOST_Init+0x44>)
 800a6ac:	f7fe fba9 	bl	8008e02 <USBH_RegisterClass>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a6b6:	f7f6 fa6f 	bl	8000b98 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a6ba:	4806      	ldr	r0, [pc, #24]	; (800a6d4 <MX_USB_HOST_Init+0x44>)
 800a6bc:	f7fe fc2d 	bl	8008f1a <USBH_Start>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a6c6:	f7f6 fa67 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a6ca:	bf00      	nop
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	0800a6f1 	.word	0x0800a6f1
 800a6d4:	200002d8 	.word	0x200002d8
 800a6d8:	2000000c 	.word	0x2000000c

0800a6dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a6e0:	4802      	ldr	r0, [pc, #8]	; (800a6ec <MX_USB_HOST_Process+0x10>)
 800a6e2:	f7fe fc2b 	bl	8008f3c <USBH_Process>
}
 800a6e6:	bf00      	nop
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	200002d8 	.word	0x200002d8

0800a6f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	2b04      	cmp	r3, #4
 800a702:	d819      	bhi.n	800a738 <USBH_UserProcess+0x48>
 800a704:	a201      	add	r2, pc, #4	; (adr r2, 800a70c <USBH_UserProcess+0x1c>)
 800a706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70a:	bf00      	nop
 800a70c:	0800a739 	.word	0x0800a739
 800a710:	0800a729 	.word	0x0800a729
 800a714:	0800a739 	.word	0x0800a739
 800a718:	0800a731 	.word	0x0800a731
 800a71c:	0800a721 	.word	0x0800a721
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a720:	4b09      	ldr	r3, [pc, #36]	; (800a748 <USBH_UserProcess+0x58>)
 800a722:	2203      	movs	r2, #3
 800a724:	701a      	strb	r2, [r3, #0]
  break;
 800a726:	e008      	b.n	800a73a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a728:	4b07      	ldr	r3, [pc, #28]	; (800a748 <USBH_UserProcess+0x58>)
 800a72a:	2202      	movs	r2, #2
 800a72c:	701a      	strb	r2, [r3, #0]
  break;
 800a72e:	e004      	b.n	800a73a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a730:	4b05      	ldr	r3, [pc, #20]	; (800a748 <USBH_UserProcess+0x58>)
 800a732:	2201      	movs	r2, #1
 800a734:	701a      	strb	r2, [r3, #0]
  break;
 800a736:	e000      	b.n	800a73a <USBH_UserProcess+0x4a>

  default:
  break;
 800a738:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a73a:	bf00      	nop
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	200006b0 	.word	0x200006b0

0800a74c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b08a      	sub	sp, #40	; 0x28
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a754:	f107 0314 	add.w	r3, r7, #20
 800a758:	2200      	movs	r2, #0
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	605a      	str	r2, [r3, #4]
 800a75e:	609a      	str	r2, [r3, #8]
 800a760:	60da      	str	r2, [r3, #12]
 800a762:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a76c:	d147      	bne.n	800a7fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a76e:	2300      	movs	r3, #0
 800a770:	613b      	str	r3, [r7, #16]
 800a772:	4b25      	ldr	r3, [pc, #148]	; (800a808 <HAL_HCD_MspInit+0xbc>)
 800a774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a776:	4a24      	ldr	r2, [pc, #144]	; (800a808 <HAL_HCD_MspInit+0xbc>)
 800a778:	f043 0301 	orr.w	r3, r3, #1
 800a77c:	6313      	str	r3, [r2, #48]	; 0x30
 800a77e:	4b22      	ldr	r3, [pc, #136]	; (800a808 <HAL_HCD_MspInit+0xbc>)
 800a780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	613b      	str	r3, [r7, #16]
 800a788:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a78a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a78e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a790:	2300      	movs	r3, #0
 800a792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a794:	2300      	movs	r3, #0
 800a796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a798:	f107 0314 	add.w	r3, r7, #20
 800a79c:	4619      	mov	r1, r3
 800a79e:	481b      	ldr	r0, [pc, #108]	; (800a80c <HAL_HCD_MspInit+0xc0>)
 800a7a0:	f7f6 ff26 	bl	80015f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a7a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a7a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a7b6:	230a      	movs	r3, #10
 800a7b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7ba:	f107 0314 	add.w	r3, r7, #20
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4812      	ldr	r0, [pc, #72]	; (800a80c <HAL_HCD_MspInit+0xc0>)
 800a7c2:	f7f6 ff15 	bl	80015f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a7c6:	4b10      	ldr	r3, [pc, #64]	; (800a808 <HAL_HCD_MspInit+0xbc>)
 800a7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ca:	4a0f      	ldr	r2, [pc, #60]	; (800a808 <HAL_HCD_MspInit+0xbc>)
 800a7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d0:	6353      	str	r3, [r2, #52]	; 0x34
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	4b0c      	ldr	r3, [pc, #48]	; (800a808 <HAL_HCD_MspInit+0xbc>)
 800a7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7da:	4a0b      	ldr	r2, [pc, #44]	; (800a808 <HAL_HCD_MspInit+0xbc>)
 800a7dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a7e2:	4b09      	ldr	r3, [pc, #36]	; (800a808 <HAL_HCD_MspInit+0xbc>)
 800a7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	2043      	movs	r0, #67	; 0x43
 800a7f4:	f7f6 fe33 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a7f8:	2043      	movs	r0, #67	; 0x43
 800a7fa:	f7f6 fe4c 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a7fe:	bf00      	nop
 800a800:	3728      	adds	r7, #40	; 0x28
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	40023800 	.word	0x40023800
 800a80c:	40020000 	.word	0x40020000

0800a810 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe ff6b 	bl	80096fa <USBH_LL_IncTimer>
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe ffa3 	bl	8009786 <USBH_LL_Connect>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe ffac 	bl	80097b4 <USBH_LL_Disconnect>
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
 800a870:	4613      	mov	r3, r2
 800a872:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe ff5d 	bl	800974e <USBH_LL_PortEnabled>
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe ff5d 	bl	800976a <USBH_LL_PortDisabled>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d12a      	bne.n	800a920 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a8ca:	4a18      	ldr	r2, [pc, #96]	; (800a92c <USBH_LL_Init+0x74>)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a15      	ldr	r2, [pc, #84]	; (800a92c <USBH_LL_Init+0x74>)
 800a8d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8da:	4b14      	ldr	r3, [pc, #80]	; (800a92c <USBH_LL_Init+0x74>)
 800a8dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a8e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a8e2:	4b12      	ldr	r3, [pc, #72]	; (800a92c <USBH_LL_Init+0x74>)
 800a8e4:	2208      	movs	r2, #8
 800a8e6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a8e8:	4b10      	ldr	r3, [pc, #64]	; (800a92c <USBH_LL_Init+0x74>)
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8ee:	4b0f      	ldr	r3, [pc, #60]	; (800a92c <USBH_LL_Init+0x74>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a8f4:	4b0d      	ldr	r3, [pc, #52]	; (800a92c <USBH_LL_Init+0x74>)
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8fa:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <USBH_LL_Init+0x74>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a900:	480a      	ldr	r0, [pc, #40]	; (800a92c <USBH_LL_Init+0x74>)
 800a902:	f7f7 f82a 	bl	800195a <HAL_HCD_Init>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a90c:	f7f6 f944 	bl	8000b98 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a910:	4806      	ldr	r0, [pc, #24]	; (800a92c <USBH_LL_Init+0x74>)
 800a912:	f7f7 fc8b 	bl	800222c <HAL_HCD_GetCurrentFrame>
 800a916:	4603      	mov	r3, r0
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7fe fede 	bl	80096dc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	200006b4 	.word	0x200006b4

0800a930 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a946:	4618      	mov	r0, r3
 800a948:	f7f7 fbf8 	bl	800213c <HAL_HCD_Start>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 f95e 	bl	800ac14 <USBH_Get_USB_Status>
 800a958:	4603      	mov	r3, r0
 800a95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7f7 fc00 	bl	8002182 <HAL_HCD_Stop>
 800a982:	4603      	mov	r3, r0
 800a984:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a986:	7bfb      	ldrb	r3, [r7, #15]
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 f943 	bl	800ac14 <USBH_Get_USB_Status>
 800a98e:	4603      	mov	r3, r0
 800a990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a992:	7bbb      	ldrb	r3, [r7, #14]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f7 fc4a 	bl	8002248 <HAL_HCD_GetCurrentSpeed>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d00c      	beq.n	800a9d4 <USBH_LL_GetSpeed+0x38>
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d80d      	bhi.n	800a9da <USBH_LL_GetSpeed+0x3e>
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <USBH_LL_GetSpeed+0x2c>
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d003      	beq.n	800a9ce <USBH_LL_GetSpeed+0x32>
 800a9c6:	e008      	b.n	800a9da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a9cc:	e008      	b.n	800a9e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d2:	e005      	b.n	800a9e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d8:	e002      	b.n	800a9e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9de:	bf00      	nop
  }
  return  speed;
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7f7 fbdb 	bl	80021bc <HAL_HCD_ResetPort>
 800aa06:	4603      	mov	r3, r0
 800aa08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 f901 	bl	800ac14 <USBH_Get_USB_Status>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa16:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa32:	78fa      	ldrb	r2, [r7, #3]
 800aa34:	4611      	mov	r1, r2
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7f7 fbe3 	bl	8002202 <HAL_HCD_HC_GetXferCount>
 800aa3c:	4603      	mov	r3, r0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aa46:	b590      	push	{r4, r7, lr}
 800aa48:	b089      	sub	sp, #36	; 0x24
 800aa4a:	af04      	add	r7, sp, #16
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	4608      	mov	r0, r1
 800aa50:	4611      	mov	r1, r2
 800aa52:	461a      	mov	r2, r3
 800aa54:	4603      	mov	r3, r0
 800aa56:	70fb      	strb	r3, [r7, #3]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70bb      	strb	r3, [r7, #2]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa6e:	787c      	ldrb	r4, [r7, #1]
 800aa70:	78ba      	ldrb	r2, [r7, #2]
 800aa72:	78f9      	ldrb	r1, [r7, #3]
 800aa74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa76:	9302      	str	r3, [sp, #8]
 800aa78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	4623      	mov	r3, r4
 800aa86:	f7f6 ffcf 	bl	8001a28 <HAL_HCD_HC_Init>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 f8bf 	bl	800ac14 <USBH_Get_USB_Status>
 800aa96:	4603      	mov	r3, r0
 800aa98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd90      	pop	{r4, r7, pc}

0800aaa4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aabe:	78fa      	ldrb	r2, [r7, #3]
 800aac0:	4611      	mov	r1, r2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7f7 f868 	bl	8001b98 <HAL_HCD_HC_Halt>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 f8a0 	bl	800ac14 <USBH_Get_USB_Status>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aae2:	b590      	push	{r4, r7, lr}
 800aae4:	b089      	sub	sp, #36	; 0x24
 800aae6:	af04      	add	r7, sp, #16
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	4608      	mov	r0, r1
 800aaec:	4611      	mov	r1, r2
 800aaee:	461a      	mov	r2, r3
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	70fb      	strb	r3, [r7, #3]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	70bb      	strb	r3, [r7, #2]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ab0a:	787c      	ldrb	r4, [r7, #1]
 800ab0c:	78ba      	ldrb	r2, [r7, #2]
 800ab0e:	78f9      	ldrb	r1, [r7, #3]
 800ab10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ab14:	9303      	str	r3, [sp, #12]
 800ab16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab18:	9302      	str	r3, [sp, #8]
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	4623      	mov	r3, r4
 800ab26:	f7f7 f85b 	bl	8001be0 <HAL_HCD_HC_SubmitRequest>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ab2e:	7bfb      	ldrb	r3, [r7, #15]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f000 f86f 	bl	800ac14 <USBH_Get_USB_Status>
 800ab36:	4603      	mov	r3, r0
 800ab38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd90      	pop	{r4, r7, pc}

0800ab44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab56:	78fa      	ldrb	r2, [r7, #3]
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7f7 fb3c 	bl	80021d8 <HAL_HCD_HC_GetURBState>
 800ab60:	4603      	mov	r3, r0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	460b      	mov	r3, r1
 800ab74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d103      	bne.n	800ab88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 f872 	bl	800ac6c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ab88:	20c8      	movs	r0, #200	; 0xc8
 800ab8a:	f7f6 fb69 	bl	8001260 <HAL_Delay>
  return USBH_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
 800aba4:	4613      	mov	r3, r2
 800aba6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800abb0:	78fa      	ldrb	r2, [r7, #3]
 800abb2:	68f9      	ldr	r1, [r7, #12]
 800abb4:	4613      	mov	r3, r2
 800abb6:	011b      	lsls	r3, r3, #4
 800abb8:	1a9b      	subs	r3, r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	440b      	add	r3, r1
 800abbe:	3317      	adds	r3, #23
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00a      	beq.n	800abdc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800abc6:	78fa      	ldrb	r2, [r7, #3]
 800abc8:	68f9      	ldr	r1, [r7, #12]
 800abca:	4613      	mov	r3, r2
 800abcc:	011b      	lsls	r3, r3, #4
 800abce:	1a9b      	subs	r3, r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	440b      	add	r3, r1
 800abd4:	333c      	adds	r3, #60	; 0x3c
 800abd6:	78ba      	ldrb	r2, [r7, #2]
 800abd8:	701a      	strb	r2, [r3, #0]
 800abda:	e009      	b.n	800abf0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800abdc:	78fa      	ldrb	r2, [r7, #3]
 800abde:	68f9      	ldr	r1, [r7, #12]
 800abe0:	4613      	mov	r3, r2
 800abe2:	011b      	lsls	r3, r3, #4
 800abe4:	1a9b      	subs	r3, r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	440b      	add	r3, r1
 800abea:	333d      	adds	r3, #61	; 0x3d
 800abec:	78ba      	ldrb	r2, [r7, #2]
 800abee:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b082      	sub	sp, #8
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7f6 fb2a 	bl	8001260 <HAL_Delay>
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac22:	79fb      	ldrb	r3, [r7, #7]
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	d817      	bhi.n	800ac58 <USBH_Get_USB_Status+0x44>
 800ac28:	a201      	add	r2, pc, #4	; (adr r2, 800ac30 <USBH_Get_USB_Status+0x1c>)
 800ac2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2e:	bf00      	nop
 800ac30:	0800ac41 	.word	0x0800ac41
 800ac34:	0800ac47 	.word	0x0800ac47
 800ac38:	0800ac4d 	.word	0x0800ac4d
 800ac3c:	0800ac53 	.word	0x0800ac53
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]
    break;
 800ac44:	e00b      	b.n	800ac5e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ac46:	2302      	movs	r3, #2
 800ac48:	73fb      	strb	r3, [r7, #15]
    break;
 800ac4a:	e008      	b.n	800ac5e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac50:	e005      	b.n	800ac5e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ac52:	2302      	movs	r3, #2
 800ac54:	73fb      	strb	r3, [r7, #15]
    break;
 800ac56:	e002      	b.n	800ac5e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ac58:	2302      	movs	r3, #2
 800ac5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac5c:	bf00      	nop
  }
  return usb_status;
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	4603      	mov	r3, r0
 800ac74:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ac76:	79fb      	ldrb	r3, [r7, #7]
 800ac78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ac7a:	79fb      	ldrb	r3, [r7, #7]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d102      	bne.n	800ac86 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73fb      	strb	r3, [r7, #15]
 800ac84:	e001      	b.n	800ac8a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ac86:	2301      	movs	r3, #1
 800ac88:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	2101      	movs	r1, #1
 800ac90:	4803      	ldr	r0, [pc, #12]	; (800aca0 <MX_DriverVbusFS+0x34>)
 800ac92:	f7f6 fe49 	bl	8001928 <HAL_GPIO_WritePin>
}
 800ac96:	bf00      	nop
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	40020800 	.word	0x40020800

0800aca4 <malloc>:
 800aca4:	4b02      	ldr	r3, [pc, #8]	; (800acb0 <malloc+0xc>)
 800aca6:	4601      	mov	r1, r0
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	f000 b82b 	b.w	800ad04 <_malloc_r>
 800acae:	bf00      	nop
 800acb0:	20000078 	.word	0x20000078

0800acb4 <free>:
 800acb4:	4b02      	ldr	r3, [pc, #8]	; (800acc0 <free+0xc>)
 800acb6:	4601      	mov	r1, r0
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	f000 b905 	b.w	800aec8 <_free_r>
 800acbe:	bf00      	nop
 800acc0:	20000078 	.word	0x20000078

0800acc4 <sbrk_aligned>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	4e0e      	ldr	r6, [pc, #56]	; (800ad00 <sbrk_aligned+0x3c>)
 800acc8:	460c      	mov	r4, r1
 800acca:	6831      	ldr	r1, [r6, #0]
 800accc:	4605      	mov	r5, r0
 800acce:	b911      	cbnz	r1, 800acd6 <sbrk_aligned+0x12>
 800acd0:	f000 f8be 	bl	800ae50 <_sbrk_r>
 800acd4:	6030      	str	r0, [r6, #0]
 800acd6:	4621      	mov	r1, r4
 800acd8:	4628      	mov	r0, r5
 800acda:	f000 f8b9 	bl	800ae50 <_sbrk_r>
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	d00a      	beq.n	800acf8 <sbrk_aligned+0x34>
 800ace2:	1cc4      	adds	r4, r0, #3
 800ace4:	f024 0403 	bic.w	r4, r4, #3
 800ace8:	42a0      	cmp	r0, r4
 800acea:	d007      	beq.n	800acfc <sbrk_aligned+0x38>
 800acec:	1a21      	subs	r1, r4, r0
 800acee:	4628      	mov	r0, r5
 800acf0:	f000 f8ae 	bl	800ae50 <_sbrk_r>
 800acf4:	3001      	adds	r0, #1
 800acf6:	d101      	bne.n	800acfc <sbrk_aligned+0x38>
 800acf8:	f04f 34ff 	mov.w	r4, #4294967295
 800acfc:	4620      	mov	r0, r4
 800acfe:	bd70      	pop	{r4, r5, r6, pc}
 800ad00:	20000a98 	.word	0x20000a98

0800ad04 <_malloc_r>:
 800ad04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad08:	1ccd      	adds	r5, r1, #3
 800ad0a:	f025 0503 	bic.w	r5, r5, #3
 800ad0e:	3508      	adds	r5, #8
 800ad10:	2d0c      	cmp	r5, #12
 800ad12:	bf38      	it	cc
 800ad14:	250c      	movcc	r5, #12
 800ad16:	2d00      	cmp	r5, #0
 800ad18:	4607      	mov	r7, r0
 800ad1a:	db01      	blt.n	800ad20 <_malloc_r+0x1c>
 800ad1c:	42a9      	cmp	r1, r5
 800ad1e:	d905      	bls.n	800ad2c <_malloc_r+0x28>
 800ad20:	230c      	movs	r3, #12
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	2600      	movs	r6, #0
 800ad26:	4630      	mov	r0, r6
 800ad28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ae00 <_malloc_r+0xfc>
 800ad30:	f000 f868 	bl	800ae04 <__malloc_lock>
 800ad34:	f8d8 3000 	ldr.w	r3, [r8]
 800ad38:	461c      	mov	r4, r3
 800ad3a:	bb5c      	cbnz	r4, 800ad94 <_malloc_r+0x90>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4638      	mov	r0, r7
 800ad40:	f7ff ffc0 	bl	800acc4 <sbrk_aligned>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	4604      	mov	r4, r0
 800ad48:	d155      	bne.n	800adf6 <_malloc_r+0xf2>
 800ad4a:	f8d8 4000 	ldr.w	r4, [r8]
 800ad4e:	4626      	mov	r6, r4
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	d145      	bne.n	800ade0 <_malloc_r+0xdc>
 800ad54:	2c00      	cmp	r4, #0
 800ad56:	d048      	beq.n	800adea <_malloc_r+0xe6>
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	eb04 0903 	add.w	r9, r4, r3
 800ad62:	f000 f875 	bl	800ae50 <_sbrk_r>
 800ad66:	4581      	cmp	r9, r0
 800ad68:	d13f      	bne.n	800adea <_malloc_r+0xe6>
 800ad6a:	6821      	ldr	r1, [r4, #0]
 800ad6c:	1a6d      	subs	r5, r5, r1
 800ad6e:	4629      	mov	r1, r5
 800ad70:	4638      	mov	r0, r7
 800ad72:	f7ff ffa7 	bl	800acc4 <sbrk_aligned>
 800ad76:	3001      	adds	r0, #1
 800ad78:	d037      	beq.n	800adea <_malloc_r+0xe6>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	442b      	add	r3, r5
 800ad7e:	6023      	str	r3, [r4, #0]
 800ad80:	f8d8 3000 	ldr.w	r3, [r8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d038      	beq.n	800adfa <_malloc_r+0xf6>
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	42a2      	cmp	r2, r4
 800ad8c:	d12b      	bne.n	800ade6 <_malloc_r+0xe2>
 800ad8e:	2200      	movs	r2, #0
 800ad90:	605a      	str	r2, [r3, #4]
 800ad92:	e00f      	b.n	800adb4 <_malloc_r+0xb0>
 800ad94:	6822      	ldr	r2, [r4, #0]
 800ad96:	1b52      	subs	r2, r2, r5
 800ad98:	d41f      	bmi.n	800adda <_malloc_r+0xd6>
 800ad9a:	2a0b      	cmp	r2, #11
 800ad9c:	d917      	bls.n	800adce <_malloc_r+0xca>
 800ad9e:	1961      	adds	r1, r4, r5
 800ada0:	42a3      	cmp	r3, r4
 800ada2:	6025      	str	r5, [r4, #0]
 800ada4:	bf18      	it	ne
 800ada6:	6059      	strne	r1, [r3, #4]
 800ada8:	6863      	ldr	r3, [r4, #4]
 800adaa:	bf08      	it	eq
 800adac:	f8c8 1000 	streq.w	r1, [r8]
 800adb0:	5162      	str	r2, [r4, r5]
 800adb2:	604b      	str	r3, [r1, #4]
 800adb4:	4638      	mov	r0, r7
 800adb6:	f104 060b 	add.w	r6, r4, #11
 800adba:	f000 f829 	bl	800ae10 <__malloc_unlock>
 800adbe:	f026 0607 	bic.w	r6, r6, #7
 800adc2:	1d23      	adds	r3, r4, #4
 800adc4:	1af2      	subs	r2, r6, r3
 800adc6:	d0ae      	beq.n	800ad26 <_malloc_r+0x22>
 800adc8:	1b9b      	subs	r3, r3, r6
 800adca:	50a3      	str	r3, [r4, r2]
 800adcc:	e7ab      	b.n	800ad26 <_malloc_r+0x22>
 800adce:	42a3      	cmp	r3, r4
 800add0:	6862      	ldr	r2, [r4, #4]
 800add2:	d1dd      	bne.n	800ad90 <_malloc_r+0x8c>
 800add4:	f8c8 2000 	str.w	r2, [r8]
 800add8:	e7ec      	b.n	800adb4 <_malloc_r+0xb0>
 800adda:	4623      	mov	r3, r4
 800addc:	6864      	ldr	r4, [r4, #4]
 800adde:	e7ac      	b.n	800ad3a <_malloc_r+0x36>
 800ade0:	4634      	mov	r4, r6
 800ade2:	6876      	ldr	r6, [r6, #4]
 800ade4:	e7b4      	b.n	800ad50 <_malloc_r+0x4c>
 800ade6:	4613      	mov	r3, r2
 800ade8:	e7cc      	b.n	800ad84 <_malloc_r+0x80>
 800adea:	230c      	movs	r3, #12
 800adec:	603b      	str	r3, [r7, #0]
 800adee:	4638      	mov	r0, r7
 800adf0:	f000 f80e 	bl	800ae10 <__malloc_unlock>
 800adf4:	e797      	b.n	800ad26 <_malloc_r+0x22>
 800adf6:	6025      	str	r5, [r4, #0]
 800adf8:	e7dc      	b.n	800adb4 <_malloc_r+0xb0>
 800adfa:	605b      	str	r3, [r3, #4]
 800adfc:	deff      	udf	#255	; 0xff
 800adfe:	bf00      	nop
 800ae00:	20000a94 	.word	0x20000a94

0800ae04 <__malloc_lock>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__malloc_lock+0x8>)
 800ae06:	f000 b85d 	b.w	800aec4 <__retarget_lock_acquire_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	20000bd8 	.word	0x20000bd8

0800ae10 <__malloc_unlock>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__malloc_unlock+0x8>)
 800ae12:	f000 b858 	b.w	800aec6 <__retarget_lock_release_recursive>
 800ae16:	bf00      	nop
 800ae18:	20000bd8 	.word	0x20000bd8

0800ae1c <memset>:
 800ae1c:	4402      	add	r2, r0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d100      	bne.n	800ae26 <memset+0xa>
 800ae24:	4770      	bx	lr
 800ae26:	f803 1b01 	strb.w	r1, [r3], #1
 800ae2a:	e7f9      	b.n	800ae20 <memset+0x4>

0800ae2c <strncmp>:
 800ae2c:	b510      	push	{r4, lr}
 800ae2e:	b16a      	cbz	r2, 800ae4c <strncmp+0x20>
 800ae30:	3901      	subs	r1, #1
 800ae32:	1884      	adds	r4, r0, r2
 800ae34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae38:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d103      	bne.n	800ae48 <strncmp+0x1c>
 800ae40:	42a0      	cmp	r0, r4
 800ae42:	d001      	beq.n	800ae48 <strncmp+0x1c>
 800ae44:	2a00      	cmp	r2, #0
 800ae46:	d1f5      	bne.n	800ae34 <strncmp+0x8>
 800ae48:	1ad0      	subs	r0, r2, r3
 800ae4a:	bd10      	pop	{r4, pc}
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	e7fc      	b.n	800ae4a <strncmp+0x1e>

0800ae50 <_sbrk_r>:
 800ae50:	b538      	push	{r3, r4, r5, lr}
 800ae52:	4d06      	ldr	r5, [pc, #24]	; (800ae6c <_sbrk_r+0x1c>)
 800ae54:	2300      	movs	r3, #0
 800ae56:	4604      	mov	r4, r0
 800ae58:	4608      	mov	r0, r1
 800ae5a:	602b      	str	r3, [r5, #0]
 800ae5c:	f7f6 f91c 	bl	8001098 <_sbrk>
 800ae60:	1c43      	adds	r3, r0, #1
 800ae62:	d102      	bne.n	800ae6a <_sbrk_r+0x1a>
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	b103      	cbz	r3, 800ae6a <_sbrk_r+0x1a>
 800ae68:	6023      	str	r3, [r4, #0]
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
 800ae6c:	20000bd4 	.word	0x20000bd4

0800ae70 <__errno>:
 800ae70:	4b01      	ldr	r3, [pc, #4]	; (800ae78 <__errno+0x8>)
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	20000078 	.word	0x20000078

0800ae7c <__libc_init_array>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	4d0d      	ldr	r5, [pc, #52]	; (800aeb4 <__libc_init_array+0x38>)
 800ae80:	4c0d      	ldr	r4, [pc, #52]	; (800aeb8 <__libc_init_array+0x3c>)
 800ae82:	1b64      	subs	r4, r4, r5
 800ae84:	10a4      	asrs	r4, r4, #2
 800ae86:	2600      	movs	r6, #0
 800ae88:	42a6      	cmp	r6, r4
 800ae8a:	d109      	bne.n	800aea0 <__libc_init_array+0x24>
 800ae8c:	4d0b      	ldr	r5, [pc, #44]	; (800aebc <__libc_init_array+0x40>)
 800ae8e:	4c0c      	ldr	r4, [pc, #48]	; (800aec0 <__libc_init_array+0x44>)
 800ae90:	f000 f866 	bl	800af60 <_init>
 800ae94:	1b64      	subs	r4, r4, r5
 800ae96:	10a4      	asrs	r4, r4, #2
 800ae98:	2600      	movs	r6, #0
 800ae9a:	42a6      	cmp	r6, r4
 800ae9c:	d105      	bne.n	800aeaa <__libc_init_array+0x2e>
 800ae9e:	bd70      	pop	{r4, r5, r6, pc}
 800aea0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aea4:	4798      	blx	r3
 800aea6:	3601      	adds	r6, #1
 800aea8:	e7ee      	b.n	800ae88 <__libc_init_array+0xc>
 800aeaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeae:	4798      	blx	r3
 800aeb0:	3601      	adds	r6, #1
 800aeb2:	e7f2      	b.n	800ae9a <__libc_init_array+0x1e>
 800aeb4:	0800afb0 	.word	0x0800afb0
 800aeb8:	0800afb0 	.word	0x0800afb0
 800aebc:	0800afb0 	.word	0x0800afb0
 800aec0:	0800afb4 	.word	0x0800afb4

0800aec4 <__retarget_lock_acquire_recursive>:
 800aec4:	4770      	bx	lr

0800aec6 <__retarget_lock_release_recursive>:
 800aec6:	4770      	bx	lr

0800aec8 <_free_r>:
 800aec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeca:	2900      	cmp	r1, #0
 800aecc:	d044      	beq.n	800af58 <_free_r+0x90>
 800aece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed2:	9001      	str	r0, [sp, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f1a1 0404 	sub.w	r4, r1, #4
 800aeda:	bfb8      	it	lt
 800aedc:	18e4      	addlt	r4, r4, r3
 800aede:	f7ff ff91 	bl	800ae04 <__malloc_lock>
 800aee2:	4a1e      	ldr	r2, [pc, #120]	; (800af5c <_free_r+0x94>)
 800aee4:	9801      	ldr	r0, [sp, #4]
 800aee6:	6813      	ldr	r3, [r2, #0]
 800aee8:	b933      	cbnz	r3, 800aef8 <_free_r+0x30>
 800aeea:	6063      	str	r3, [r4, #4]
 800aeec:	6014      	str	r4, [r2, #0]
 800aeee:	b003      	add	sp, #12
 800aef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aef4:	f7ff bf8c 	b.w	800ae10 <__malloc_unlock>
 800aef8:	42a3      	cmp	r3, r4
 800aefa:	d908      	bls.n	800af0e <_free_r+0x46>
 800aefc:	6825      	ldr	r5, [r4, #0]
 800aefe:	1961      	adds	r1, r4, r5
 800af00:	428b      	cmp	r3, r1
 800af02:	bf01      	itttt	eq
 800af04:	6819      	ldreq	r1, [r3, #0]
 800af06:	685b      	ldreq	r3, [r3, #4]
 800af08:	1949      	addeq	r1, r1, r5
 800af0a:	6021      	streq	r1, [r4, #0]
 800af0c:	e7ed      	b.n	800aeea <_free_r+0x22>
 800af0e:	461a      	mov	r2, r3
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	b10b      	cbz	r3, 800af18 <_free_r+0x50>
 800af14:	42a3      	cmp	r3, r4
 800af16:	d9fa      	bls.n	800af0e <_free_r+0x46>
 800af18:	6811      	ldr	r1, [r2, #0]
 800af1a:	1855      	adds	r5, r2, r1
 800af1c:	42a5      	cmp	r5, r4
 800af1e:	d10b      	bne.n	800af38 <_free_r+0x70>
 800af20:	6824      	ldr	r4, [r4, #0]
 800af22:	4421      	add	r1, r4
 800af24:	1854      	adds	r4, r2, r1
 800af26:	42a3      	cmp	r3, r4
 800af28:	6011      	str	r1, [r2, #0]
 800af2a:	d1e0      	bne.n	800aeee <_free_r+0x26>
 800af2c:	681c      	ldr	r4, [r3, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	6053      	str	r3, [r2, #4]
 800af32:	440c      	add	r4, r1
 800af34:	6014      	str	r4, [r2, #0]
 800af36:	e7da      	b.n	800aeee <_free_r+0x26>
 800af38:	d902      	bls.n	800af40 <_free_r+0x78>
 800af3a:	230c      	movs	r3, #12
 800af3c:	6003      	str	r3, [r0, #0]
 800af3e:	e7d6      	b.n	800aeee <_free_r+0x26>
 800af40:	6825      	ldr	r5, [r4, #0]
 800af42:	1961      	adds	r1, r4, r5
 800af44:	428b      	cmp	r3, r1
 800af46:	bf04      	itt	eq
 800af48:	6819      	ldreq	r1, [r3, #0]
 800af4a:	685b      	ldreq	r3, [r3, #4]
 800af4c:	6063      	str	r3, [r4, #4]
 800af4e:	bf04      	itt	eq
 800af50:	1949      	addeq	r1, r1, r5
 800af52:	6021      	streq	r1, [r4, #0]
 800af54:	6054      	str	r4, [r2, #4]
 800af56:	e7ca      	b.n	800aeee <_free_r+0x26>
 800af58:	b003      	add	sp, #12
 800af5a:	bd30      	pop	{r4, r5, pc}
 800af5c:	20000a94 	.word	0x20000a94

0800af60 <_init>:
 800af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af62:	bf00      	nop
 800af64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af66:	bc08      	pop	{r3}
 800af68:	469e      	mov	lr, r3
 800af6a:	4770      	bx	lr

0800af6c <_fini>:
 800af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af6e:	bf00      	nop
 800af70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af72:	bc08      	pop	{r3}
 800af74:	469e      	mov	lr, r3
 800af76:	4770      	bx	lr
