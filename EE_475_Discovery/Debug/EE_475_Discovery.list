
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010310  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  080104a0  080104a0  000204a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010948  08010948  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08010948  08010948  00020948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010950  08010950  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010950  08010950  00020950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010954  08010954  00020954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08010958  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
 10 .bss          00000ee4  200001f4  200001f4  000301f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200010d8  200010d8  000301f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e148  00000000  00000000  00030267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000045b3  00000000  00000000  0004e3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a08  00000000  00000000  00052968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001443  00000000  00000000  00054370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026358  00000000  00000000  000557b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000221e1  00000000  00000000  0007bb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8bb1  00000000  00000000  0009dcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008460  00000000  00000000  001768a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0017ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010488 	.word	0x08010488

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08010488 	.word	0x08010488

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	Rx_Data_Ready_Flag = 1;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_UART_RxCpltCallback+0x1c>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200003dc 	.word	0x200003dc

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f000 feac 	bl	8001d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f836 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 fa28 	bl	8001470 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001020:	f000 f89c 	bl	800115c <MX_I2C1_Init>
  MX_I2S3_Init();
 8001024:	f000 f8c8 	bl	80011b8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001028:	f000 f8f6 	bl	8001218 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800102c:	f00a fb42 	bl	800b6b4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001030:	f000 f9ca 	bl	80013c8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001034:	f000 f926 	bl	8001284 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001038:	f000 f9f0 	bl	800141c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800103c:	2100      	movs	r1, #0
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <main+0x64>)
 8001040:	f005 f916 	bl	8006270 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_DMA(&huart3, UART3_Rx_buf, 700);
 8001044:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001048:	490b      	ldr	r1, [pc, #44]	; (8001078 <main+0x68>)
 800104a:	480c      	ldr	r0, [pc, #48]	; (800107c <main+0x6c>)
 800104c:	f006 f827 	bl	800709e <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart2, (uint8_t*) "Hello!\r\n", 8, 100);
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	2208      	movs	r2, #8
 8001054:	490a      	ldr	r1, [pc, #40]	; (8001080 <main+0x70>)
 8001056:	480b      	ldr	r0, [pc, #44]	; (8001084 <main+0x74>)
 8001058:	f005 ff96 	bl	8006f88 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800105c:	f00a fb50 	bl	800b700 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // int p = 1500 + 500*sin(i/100.0);

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <main+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(10);
 800106a:	200a      	movs	r0, #10
 800106c:	f000 fef2 	bl	8001e54 <HAL_Delay>
    MX_USB_HOST_Process();
 8001070:	e7f4      	b.n	800105c <main+0x4c>
 8001072:	bf00      	nop
 8001074:	20000304 	.word	0x20000304
 8001078:	200003e0 	.word	0x200003e0
 800107c:	20000394 	.word	0x20000394
 8001080:	080104f4 	.word	0x080104f4
 8001084:	2000034c 	.word	0x2000034c

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b094      	sub	sp, #80	; 0x50
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	2230      	movs	r2, #48	; 0x30
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00b fe6d 	bl	800cd76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <SystemClock_Config+0xcc>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	4a27      	ldr	r2, [pc, #156]	; (8001154 <SystemClock_Config+0xcc>)
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ba:	6413      	str	r3, [r2, #64]	; 0x40
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <SystemClock_Config+0xcc>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SystemClock_Config+0xd0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <SystemClock_Config+0xd0>)
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <SystemClock_Config+0xd0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f8:	2308      	movs	r3, #8
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001100:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001102:	2302      	movs	r3, #2
 8001104:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001106:	2307      	movs	r3, #7
 8001108:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	4618      	mov	r0, r3
 8001110:	f004 f9a2 	bl	8005458 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800111a:	f000 faa7 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800112a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800112e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001134:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	2105      	movs	r1, #5
 800113c:	4618      	mov	r0, r3
 800113e:	f004 fc03 	bl	8005948 <HAL_RCC_ClockConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001148:	f000 fa90 	bl	800166c <Error_Handler>
  }
}
 800114c:	bf00      	nop
 800114e:	3750      	adds	r7, #80	; 0x50
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x50>)
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <MX_I2C1_Init+0x54>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C1_Init+0x50>)
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_I2C1_Init+0x58>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_I2C1_Init+0x50>)
 800117a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_I2C1_Init+0x50>)
 800119a:	f003 fb79 	bl	8004890 <HAL_I2C_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 fa62 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000210 	.word	0x20000210
 80011b0:	40005400 	.word	0x40005400
 80011b4:	000186a0 	.word	0x000186a0

080011b8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_I2S3_Init+0x54>)
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <MX_I2S3_Init+0x58>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_I2S3_Init+0x54>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_I2S3_Init+0x54>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_I2S3_Init+0x54>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <MX_I2S3_Init+0x54>)
 80011d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_I2S3_Init+0x54>)
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <MX_I2S3_Init+0x5c>)
 80011e2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_I2S3_Init+0x54>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_I2S3_Init+0x54>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_I2S3_Init+0x54>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_I2S3_Init+0x54>)
 80011f8:	f003 fc8e 	bl	8004b18 <HAL_I2S_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001202:	f000 fa33 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000264 	.word	0x20000264
 8001210:	40003c00 	.word	0x40003c00
 8001214:	00017700 	.word	0x00017700

08001218 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_SPI1_Init+0x64>)
 800121e:	4a18      	ldr	r2, [pc, #96]	; (8001280 <MX_SPI1_Init+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_SPI1_Init+0x64>)
 8001224:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001228:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_SPI1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_SPI1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_SPI1_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_SPI1_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_SPI1_Init+0x64>)
 8001244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001248:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_SPI1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <MX_SPI1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_SPI1_Init+0x64>)
 8001264:	220a      	movs	r2, #10
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_SPI1_Init+0x64>)
 800126a:	f004 fecf 	bl	800600c <HAL_SPI_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001274:	f000 f9fa 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200002ac 	.word	0x200002ac
 8001280:	40013000 	.word	0x40013000

08001284 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b096      	sub	sp, #88	; 0x58
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2220      	movs	r2, #32
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f00b fd5a 	bl	800cd76 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <MX_TIM1_Init+0x13c>)
 80012c4:	4a3f      	ldr	r2, [pc, #252]	; (80013c4 <MX_TIM1_Init+0x140>)
 80012c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 80012c8:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <MX_TIM1_Init+0x13c>)
 80012ca:	22a8      	movs	r2, #168	; 0xa8
 80012cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <MX_TIM1_Init+0x13c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <MX_TIM1_Init+0x13c>)
 80012d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80012da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <MX_TIM1_Init+0x13c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e2:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <MX_TIM1_Init+0x13c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <MX_TIM1_Init+0x13c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ee:	4834      	ldr	r0, [pc, #208]	; (80013c0 <MX_TIM1_Init+0x13c>)
 80012f0:	f004 ff15 	bl	800611e <HAL_TIM_Base_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012fa:	f000 f9b7 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001302:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001304:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001308:	4619      	mov	r1, r3
 800130a:	482d      	ldr	r0, [pc, #180]	; (80013c0 <MX_TIM1_Init+0x13c>)
 800130c:	f005 f93a 	bl	8006584 <HAL_TIM_ConfigClockSource>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001316:	f000 f9a9 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800131a:	4829      	ldr	r0, [pc, #164]	; (80013c0 <MX_TIM1_Init+0x13c>)
 800131c:	f004 ff4e 	bl	80061bc <HAL_TIM_PWM_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001326:	f000 f9a1 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001332:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001336:	4619      	mov	r1, r3
 8001338:	4821      	ldr	r0, [pc, #132]	; (80013c0 <MX_TIM1_Init+0x13c>)
 800133a:	f005 fd07 	bl	8006d4c <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001344:	f000 f992 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001348:	2360      	movs	r3, #96	; 0x60
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 800134c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	2200      	movs	r2, #0
 800136c:	4619      	mov	r1, r3
 800136e:	4814      	ldr	r0, [pc, #80]	; (80013c0 <MX_TIM1_Init+0x13c>)
 8001370:	f005 f846 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800137a:	f000 f977 	bl	800166c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001396:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	; (80013c0 <MX_TIM1_Init+0x13c>)
 80013a2:	f005 fd4f 	bl	8006e44 <HAL_TIMEx_ConfigBreakDeadTime>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80013ac:	f000 f95e 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <MX_TIM1_Init+0x13c>)
 80013b2:	f000 fabb 	bl	800192c <HAL_TIM_MspPostInit>

}
 80013b6:	bf00      	nop
 80013b8:	3758      	adds	r7, #88	; 0x58
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000304 	.word	0x20000304
 80013c4:	40010000 	.word	0x40010000

080013c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <MX_USART2_UART_Init+0x50>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 8001400:	f005 fd72 	bl	8006ee8 <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140a:	f000 f92f 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000034c 	.word	0x2000034c
 8001418:	40004400 	.word	0x40004400

0800141c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_USART3_UART_Init+0x4c>)
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <MX_USART3_UART_Init+0x50>)
 8001424:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <MX_USART3_UART_Init+0x4c>)
 8001428:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800142c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_USART3_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_USART3_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_USART3_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_USART3_UART_Init+0x4c>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MX_USART3_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_USART3_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_USART3_UART_Init+0x4c>)
 8001454:	f005 fd48 	bl	8006ee8 <HAL_UART_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800145e:	f000 f905 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000394 	.word	0x20000394
 800146c:	40004800 	.word	0x40004800

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	4b72      	ldr	r3, [pc, #456]	; (8001654 <MX_GPIO_Init+0x1e4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a71      	ldr	r2, [pc, #452]	; (8001654 <MX_GPIO_Init+0x1e4>)
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b6f      	ldr	r3, [pc, #444]	; (8001654 <MX_GPIO_Init+0x1e4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	4b6b      	ldr	r3, [pc, #428]	; (8001654 <MX_GPIO_Init+0x1e4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a6a      	ldr	r2, [pc, #424]	; (8001654 <MX_GPIO_Init+0x1e4>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b68      	ldr	r3, [pc, #416]	; (8001654 <MX_GPIO_Init+0x1e4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b64      	ldr	r3, [pc, #400]	; (8001654 <MX_GPIO_Init+0x1e4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a63      	ldr	r2, [pc, #396]	; (8001654 <MX_GPIO_Init+0x1e4>)
 80014c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b61      	ldr	r3, [pc, #388]	; (8001654 <MX_GPIO_Init+0x1e4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b5d      	ldr	r3, [pc, #372]	; (8001654 <MX_GPIO_Init+0x1e4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a5c      	ldr	r2, [pc, #368]	; (8001654 <MX_GPIO_Init+0x1e4>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b5a      	ldr	r3, [pc, #360]	; (8001654 <MX_GPIO_Init+0x1e4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b56      	ldr	r3, [pc, #344]	; (8001654 <MX_GPIO_Init+0x1e4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a55      	ldr	r2, [pc, #340]	; (8001654 <MX_GPIO_Init+0x1e4>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b53      	ldr	r3, [pc, #332]	; (8001654 <MX_GPIO_Init+0x1e4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b4f      	ldr	r3, [pc, #316]	; (8001654 <MX_GPIO_Init+0x1e4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a4e      	ldr	r2, [pc, #312]	; (8001654 <MX_GPIO_Init+0x1e4>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <MX_GPIO_Init+0x1e4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2108      	movs	r1, #8
 8001532:	4849      	ldr	r0, [pc, #292]	; (8001658 <MX_GPIO_Init+0x1e8>)
 8001534:	f001 f878 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	2101      	movs	r1, #1
 800153c:	4847      	ldr	r0, [pc, #284]	; (800165c <MX_GPIO_Init+0x1ec>)
 800153e:	f001 f873 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001542:	2200      	movs	r2, #0
 8001544:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001548:	4845      	ldr	r0, [pc, #276]	; (8001660 <MX_GPIO_Init+0x1f0>)
 800154a:	f001 f86d 	bl	8002628 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800154e:	2308      	movs	r3, #8
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	483c      	ldr	r0, [pc, #240]	; (8001658 <MX_GPIO_Init+0x1e8>)
 8001566:	f000 fec3 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800156a:	2301      	movs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	4836      	ldr	r0, [pc, #216]	; (800165c <MX_GPIO_Init+0x1ec>)
 8001582:	f000 feb5 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001586:	2308      	movs	r3, #8
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001596:	2305      	movs	r3, #5
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	482e      	ldr	r0, [pc, #184]	; (800165c <MX_GPIO_Init+0x1ec>)
 80015a2:	f000 fea5 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015aa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4619      	mov	r1, r3
 80015ba:	482a      	ldr	r0, [pc, #168]	; (8001664 <MX_GPIO_Init+0x1f4>)
 80015bc:	f000 fe98 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015c0:	2304      	movs	r3, #4
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4619      	mov	r1, r3
 80015d2:	4825      	ldr	r0, [pc, #148]	; (8001668 <MX_GPIO_Init+0x1f8>)
 80015d4:	f000 fe8c 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ea:	2305      	movs	r3, #5
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	481c      	ldr	r0, [pc, #112]	; (8001668 <MX_GPIO_Init+0x1f8>)
 80015f6:	f000 fe7b 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015fa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4813      	ldr	r0, [pc, #76]	; (8001660 <MX_GPIO_Init+0x1f0>)
 8001614:	f000 fe6c 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001618:	2320      	movs	r3, #32
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	480d      	ldr	r0, [pc, #52]	; (8001660 <MX_GPIO_Init+0x1f0>)
 800162c:	f000 fe60 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001630:	2302      	movs	r3, #2
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001634:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_GPIO_Init+0x1e8>)
 8001646:	f000 fe53 	bl	80022f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800164a:	bf00      	nop
 800164c:	3730      	adds	r7, #48	; 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40021000 	.word	0x40021000
 800165c:	40020800 	.word	0x40020800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40020000 	.word	0x40020000
 8001668:	40020400 	.word	0x40020400

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_MspInit+0x4c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016b6:	2007      	movs	r0, #7
 80016b8:	f000 fcc0 	bl	800203c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_I2C_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12c      	bne.n	8001744 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001706:	f44f 7310 	mov.w	r3, #576	; 0x240
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170c:	2312      	movs	r3, #18
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001710:	2301      	movs	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001718:	2304      	movs	r3, #4
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	480c      	ldr	r0, [pc, #48]	; (8001754 <HAL_I2C_MspInit+0x8c>)
 8001724:	f000 fde4 	bl	80022f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_I2C_MspInit+0x88>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_I2C_MspInit+0x88>)
 8001732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_I2C_MspInit+0x88>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40005400 	.word	0x40005400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400

08001758 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08e      	sub	sp, #56	; 0x38
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a31      	ldr	r2, [pc, #196]	; (8001848 <HAL_I2S_MspInit+0xf0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d15a      	bne.n	800183e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001788:	2301      	movs	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800178c:	23c0      	movs	r3, #192	; 0xc0
 800178e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001790:	2302      	movs	r3, #2
 8001792:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4618      	mov	r0, r3
 800179a:	f004 faf5 	bl	8005d88 <HAL_RCCEx_PeriphCLKConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80017a4:	f7ff ff62 	bl	800166c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a26      	ldr	r2, [pc, #152]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	4a1f      	ldr	r2, [pc, #124]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6313      	str	r3, [r2, #48]	; 0x30
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	4a18      	ldr	r2, [pc, #96]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6313      	str	r3, [r2, #48]	; 0x30
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_I2S_MspInit+0xf4>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017fc:	2310      	movs	r3, #16
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800180c:	2306      	movs	r3, #6
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	480e      	ldr	r0, [pc, #56]	; (8001850 <HAL_I2S_MspInit+0xf8>)
 8001818:	f000 fd6a 	bl	80022f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800181c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800182e:	2306      	movs	r3, #6
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	4806      	ldr	r0, [pc, #24]	; (8001854 <HAL_I2S_MspInit+0xfc>)
 800183a:	f000 fd59 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3738      	adds	r7, #56	; 0x38
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40003c00 	.word	0x40003c00
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020800 	.word	0x40020800

08001858 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a19      	ldr	r2, [pc, #100]	; (80018dc <HAL_SPI_MspInit+0x84>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d12b      	bne.n	80018d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_SPI_MspInit+0x88>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <HAL_SPI_MspInit+0x88>)
 8001884:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_SPI_MspInit+0x88>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_SPI_MspInit+0x88>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_SPI_MspInit+0x88>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_SPI_MspInit+0x88>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018b2:	23e0      	movs	r3, #224	; 0xe0
 80018b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018c2:	2305      	movs	r3, #5
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_SPI_MspInit+0x8c>)
 80018ce:	f000 fd0f 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40013000 	.word	0x40013000
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020000 	.word	0x40020000

080018e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <HAL_TIM_Base_MspInit+0x3c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10d      	bne.n	8001916 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_TIM_Base_MspInit+0x40>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_TIM_Base_MspInit+0x40>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <HAL_TIM_Base_MspInit+0x40>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40010000 	.word	0x40010000
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a12      	ldr	r2, [pc, #72]	; (8001994 <HAL_TIM_MspPostInit+0x68>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d11e      	bne.n	800198c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_TIM_MspPostInit+0x6c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_TIM_MspPostInit+0x6c>)
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_TIM_MspPostInit+0x6c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800196a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800197c:	2301      	movs	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_TIM_MspPostInit+0x70>)
 8001988:	f000 fcb2 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40010000 	.word	0x40010000
 8001998:	40023800 	.word	0x40023800
 800199c:	40021000 	.word	0x40021000

080019a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08c      	sub	sp, #48	; 0x30
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a46      	ldr	r2, [pc, #280]	; (8001ad8 <HAL_UART_MspInit+0x138>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12c      	bne.n	8001a1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	4b45      	ldr	r3, [pc, #276]	; (8001adc <HAL_UART_MspInit+0x13c>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a44      	ldr	r2, [pc, #272]	; (8001adc <HAL_UART_MspInit+0x13c>)
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b42      	ldr	r3, [pc, #264]	; (8001adc <HAL_UART_MspInit+0x13c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <HAL_UART_MspInit+0x13c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a3d      	ldr	r2, [pc, #244]	; (8001adc <HAL_UART_MspInit+0x13c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_UART_MspInit+0x13c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019fa:	230c      	movs	r3, #12
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4832      	ldr	r0, [pc, #200]	; (8001ae0 <HAL_UART_MspInit+0x140>)
 8001a16:	f000 fc6b 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a1a:	e058      	b.n	8001ace <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a30      	ldr	r2, [pc, #192]	; (8001ae4 <HAL_UART_MspInit+0x144>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d153      	bne.n	8001ace <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <HAL_UART_MspInit+0x13c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <HAL_UART_MspInit+0x13c>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b29      	ldr	r3, [pc, #164]	; (8001adc <HAL_UART_MspInit+0x13c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b25      	ldr	r3, [pc, #148]	; (8001adc <HAL_UART_MspInit+0x13c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a24      	ldr	r2, [pc, #144]	; (8001adc <HAL_UART_MspInit+0x13c>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <HAL_UART_MspInit+0x13c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <HAL_UART_MspInit+0x13c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <HAL_UART_MspInit+0x13c>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_UART_MspInit+0x13c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	4814      	ldr	r0, [pc, #80]	; (8001ae8 <HAL_UART_MspInit+0x148>)
 8001a98:	f000 fc2a 	bl	80022f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aae:	2307      	movs	r3, #7
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <HAL_UART_MspInit+0x14c>)
 8001aba:	f000 fc19 	bl	80022f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2027      	movs	r0, #39	; 0x27
 8001ac4:	f000 fac5 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ac8:	2027      	movs	r0, #39	; 0x27
 8001aca:	f000 fade 	bl	800208a <HAL_NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3730      	adds	r7, #48	; 0x30
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40004400 	.word	0x40004400
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40004800 	.word	0x40004800
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020c00 	.word	0x40020c00

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af4:	e7fe      	b.n	8001af4 <NMI_Handler+0x4>

08001af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <HardFault_Handler+0x4>

08001afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <MemManage_Handler+0x4>

08001b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3c:	f000 f96a 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <USART3_IRQHandler+0x10>)
 8001b4a:	f005 facd 	bl	80070e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000394 	.word	0x20000394

08001b58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <OTG_FS_IRQHandler+0x10>)
 8001b5e:	f001 f85d 	bl	8002c1c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000bac 	.word	0x20000bac

08001b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_kill>:

int _kill(int pid, int sig)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b86:	f00b f959 	bl	800ce3c <__errno>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2216      	movs	r2, #22
 8001b8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_exit>:

void _exit (int status)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ffe7 	bl	8001b7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bae:	e7fe      	b.n	8001bae <_exit+0x12>

08001bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e00a      	b.n	8001bd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc2:	f3af 8000 	nop.w
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf0      	blt.n	8001bc2 <_read+0x12>
  }

  return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e009      	b.n	8001c10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60ba      	str	r2, [r7, #8]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbf1      	blt.n	8001bfc <_write+0x12>
  }
  return len;
 8001c18:	687b      	ldr	r3, [r7, #4]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_close>:

int _close(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_isatty>:

int _isatty(int file)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <_sbrk+0x5c>)
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <_sbrk+0x60>)
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <_sbrk+0x64>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <_sbrk+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d207      	bcs.n	8001ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cbc:	f00b f8be 	bl	800ce3c <__errno>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	e009      	b.n	8001ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <_sbrk+0x64>)
 8001cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20020000 	.word	0x20020000
 8001cec:	00000400 	.word	0x00000400
 8001cf0:	200007c8 	.word	0x200007c8
 8001cf4:	200010d8 	.word	0x200010d8

08001cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <SystemInit+0x20>)
 8001cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <SystemInit+0x20>)
 8001d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d20:	f7ff ffea 	bl	8001cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d26:	490d      	ldr	r1, [pc, #52]	; (8001d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d28:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d3c:	4c0a      	ldr	r4, [pc, #40]	; (8001d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f00b f87d 	bl	800ce48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4e:	f7ff f95f 	bl	8001010 <main>
  bx  lr    
 8001d52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d5c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001d60:	08010958 	.word	0x08010958
  ldr r2, =_sbss
 8001d64:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001d68:	200010d8 	.word	0x200010d8

08001d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC_IRQHandler>
	...

08001d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <HAL_Init+0x40>)
 8001d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <HAL_Init+0x40>)
 8001d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_Init+0x40>)
 8001d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 f94f 	bl	800203c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f000 f808 	bl	8001db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da4:	f7ff fc68 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023c00 	.word	0x40023c00

08001db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x54>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_InitTick+0x58>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f967 	bl	80020a6 <HAL_SYSTICK_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00e      	b.n	8001e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b0f      	cmp	r3, #15
 8001de6:	d80a      	bhi.n	8001dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f000 f92f 	bl	8002052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df4:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <HAL_InitTick+0x5c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000008 	.word	0x20000008
 8001e38:	200007cc 	.word	0x200007cc

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200007cc 	.word	0x200007cc

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff ffee 	bl	8001e3c <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e7a:	bf00      	nop
 8001e7c:	f7ff ffde 	bl	8001e3c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000008 	.word	0x20000008

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <__NVIC_EnableIRQ+0x38>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100

08001f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db0a      	blt.n	8001f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	490c      	ldr	r1, [pc, #48]	; (8001f88 <__NVIC_SetPriority+0x4c>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f64:	e00a      	b.n	8001f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4908      	ldr	r1, [pc, #32]	; (8001f8c <__NVIC_SetPriority+0x50>)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3b04      	subs	r3, #4
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	440b      	add	r3, r1
 8001f7a:	761a      	strb	r2, [r3, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f1c3 0307 	rsb	r3, r3, #7
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	bf28      	it	cs
 8001fae:	2304      	movcs	r3, #4
 8001fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d902      	bls.n	8001fc0 <NVIC_EncodePriority+0x30>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3b03      	subs	r3, #3
 8001fbe:	e000      	b.n	8001fc2 <NVIC_EncodePriority+0x32>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	43d9      	mvns	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	4313      	orrs	r3, r2
         );
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002008:	d301      	bcc.n	800200e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200a:	2301      	movs	r3, #1
 800200c:	e00f      	b.n	800202e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <SysTick_Config+0x40>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002016:	210f      	movs	r1, #15
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f7ff ff8e 	bl	8001f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <SysTick_Config+0x40>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <SysTick_Config+0x40>)
 8002028:	2207      	movs	r2, #7
 800202a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010

0800203c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff29 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff3e 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ff8e 	bl	8001f90 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5d 	bl	8001f3c <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff31 	bl	8001f00 <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa2 	bl	8001ff8 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_DMA_Start_IT+0x26>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e040      	b.n	8002166 <HAL_DMA_Start_IT+0xa8>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d12f      	bne.n	8002158 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f8c0 	bl	8002292 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	223f      	movs	r2, #63	; 0x3f
 8002118:	409a      	lsls	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0216 	orr.w	r2, r2, #22
 800212c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0208 	orr.w	r2, r2, #8
 8002144:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e005      	b.n	8002164 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002160:	2302      	movs	r3, #2
 8002162:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002164:	7dfb      	ldrb	r3, [r7, #23]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff fe5e 	bl	8001e3c <HAL_GetTick>
 8002180:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d008      	beq.n	80021a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2280      	movs	r2, #128	; 0x80
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e052      	b.n	8002246 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0216 	bic.w	r2, r2, #22
 80021ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d103      	bne.n	80021d0 <HAL_DMA_Abort+0x62>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0208 	bic.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f0:	e013      	b.n	800221a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f2:	f7ff fe23 	bl	8001e3c <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d90c      	bls.n	800221a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e015      	b.n	8002246 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1e4      	bne.n	80021f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	223f      	movs	r2, #63	; 0x3f
 800222e:	409a      	lsls	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d004      	beq.n	800226c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e00c      	b.n	8002286 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2205      	movs	r2, #5
 8002270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002292:	b480      	push	{r7}
 8002294:	b085      	sub	sp, #20
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022ae:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b40      	cmp	r3, #64	; 0x40
 80022be:	d108      	bne.n	80022d2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022d0:	e007      	b.n	80022e2 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	60da      	str	r2, [r3, #12]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e16b      	b.n	80025e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800230c:	2201      	movs	r2, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	f040 815a 	bne.w	80025de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d005      	beq.n	8002342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233e:	2b02      	cmp	r3, #2
 8002340:	d130      	bne.n	80023a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002378:	2201      	movs	r2, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 0201 	and.w	r2, r3, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d017      	beq.n	80023e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d123      	bne.n	8002434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	08da      	lsrs	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3208      	adds	r2, #8
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	08da      	lsrs	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	69b9      	ldr	r1, [r7, #24]
 8002430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0203 	and.w	r2, r3, #3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80b4 	beq.w	80025de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b60      	ldr	r3, [pc, #384]	; (80025fc <HAL_GPIO_Init+0x30c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a5f      	ldr	r2, [pc, #380]	; (80025fc <HAL_GPIO_Init+0x30c>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <HAL_GPIO_Init+0x30c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002492:	4a5b      	ldr	r2, [pc, #364]	; (8002600 <HAL_GPIO_Init+0x310>)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3302      	adds	r3, #2
 800249a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_GPIO_Init+0x314>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d02b      	beq.n	8002516 <HAL_GPIO_Init+0x226>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a51      	ldr	r2, [pc, #324]	; (8002608 <HAL_GPIO_Init+0x318>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d025      	beq.n	8002512 <HAL_GPIO_Init+0x222>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a50      	ldr	r2, [pc, #320]	; (800260c <HAL_GPIO_Init+0x31c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01f      	beq.n	800250e <HAL_GPIO_Init+0x21e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4f      	ldr	r2, [pc, #316]	; (8002610 <HAL_GPIO_Init+0x320>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d019      	beq.n	800250a <HAL_GPIO_Init+0x21a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4e      	ldr	r2, [pc, #312]	; (8002614 <HAL_GPIO_Init+0x324>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_GPIO_Init+0x216>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4d      	ldr	r2, [pc, #308]	; (8002618 <HAL_GPIO_Init+0x328>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00d      	beq.n	8002502 <HAL_GPIO_Init+0x212>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4c      	ldr	r2, [pc, #304]	; (800261c <HAL_GPIO_Init+0x32c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <HAL_GPIO_Init+0x20e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4b      	ldr	r2, [pc, #300]	; (8002620 <HAL_GPIO_Init+0x330>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_GPIO_Init+0x20a>
 80024f6:	2307      	movs	r3, #7
 80024f8:	e00e      	b.n	8002518 <HAL_GPIO_Init+0x228>
 80024fa:	2308      	movs	r3, #8
 80024fc:	e00c      	b.n	8002518 <HAL_GPIO_Init+0x228>
 80024fe:	2306      	movs	r3, #6
 8002500:	e00a      	b.n	8002518 <HAL_GPIO_Init+0x228>
 8002502:	2305      	movs	r3, #5
 8002504:	e008      	b.n	8002518 <HAL_GPIO_Init+0x228>
 8002506:	2304      	movs	r3, #4
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x228>
 800250a:	2303      	movs	r3, #3
 800250c:	e004      	b.n	8002518 <HAL_GPIO_Init+0x228>
 800250e:	2302      	movs	r3, #2
 8002510:	e002      	b.n	8002518 <HAL_GPIO_Init+0x228>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_GPIO_Init+0x228>
 8002516:	2300      	movs	r3, #0
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	f002 0203 	and.w	r2, r2, #3
 800251e:	0092      	lsls	r2, r2, #2
 8002520:	4093      	lsls	r3, r2
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002528:	4935      	ldr	r1, [pc, #212]	; (8002600 <HAL_GPIO_Init+0x310>)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002536:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_GPIO_Init+0x334>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255a:	4a32      	ldr	r2, [pc, #200]	; (8002624 <HAL_GPIO_Init+0x334>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002560:	4b30      	ldr	r3, [pc, #192]	; (8002624 <HAL_GPIO_Init+0x334>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002584:	4a27      	ldr	r2, [pc, #156]	; (8002624 <HAL_GPIO_Init+0x334>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800258a:	4b26      	ldr	r3, [pc, #152]	; (8002624 <HAL_GPIO_Init+0x334>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ae:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <HAL_GPIO_Init+0x334>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_GPIO_Init+0x334>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_GPIO_Init+0x334>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	f67f ae90 	bls.w	800230c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40013800 	.word	0x40013800
 8002604:	40020000 	.word	0x40020000
 8002608:	40020400 	.word	0x40020400
 800260c:	40020800 	.word	0x40020800
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40021000 	.word	0x40021000
 8002618:	40021400 	.word	0x40021400
 800261c:	40021800 	.word	0x40021800
 8002620:	40021c00 	.word	0x40021c00
 8002624:	40013c00 	.word	0x40013c00

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002638:	787b      	ldrb	r3, [r7, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002644:	e003      	b.n	800264e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	041a      	lsls	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	619a      	str	r2, [r3, #24]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af02      	add	r7, sp, #8
 8002660:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e059      	b.n	8002720 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f009 f872 	bl	800b770 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2203      	movs	r2, #3
 8002690:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269a:	d102      	bne.n	80026a2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f005 fe7b 	bl	80083a2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7c1a      	ldrb	r2, [r3, #16]
 80026b4:	f88d 2000 	strb.w	r2, [sp]
 80026b8:	3304      	adds	r3, #4
 80026ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026bc:	f005 fdfc 	bl	80082b8 <USB_CoreInit>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e026      	b.n	8002720 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2101      	movs	r1, #1
 80026d8:	4618      	mov	r0, r3
 80026da:	f005 fe73 	bl	80083c4 <USB_SetCurrentMode>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e017      	b.n	8002720 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7c1a      	ldrb	r2, [r3, #16]
 80026f8:	f88d 2000 	strb.w	r2, [sp]
 80026fc:	3304      	adds	r3, #4
 80026fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002700:	f006 f816 	bl	8008730 <USB_HostInit>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e004      	b.n	8002720 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b08b      	sub	sp, #44	; 0x2c
 800272c:	af04      	add	r7, sp, #16
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4603      	mov	r3, r0
 8002738:	70fb      	strb	r3, [r7, #3]
 800273a:	460b      	mov	r3, r1
 800273c:	70bb      	strb	r3, [r7, #2]
 800273e:	4613      	mov	r3, r2
 8002740:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002742:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002744:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_HCD_HC_Init+0x2c>
 8002750:	2302      	movs	r3, #2
 8002752:	e09d      	b.n	8002890 <HAL_HCD_HC_Init+0x168>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3319      	adds	r3, #25
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3314      	adds	r3, #20
 8002780:	787a      	ldrb	r2, [r7, #1]
 8002782:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3315      	adds	r3, #21
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	3326      	adds	r3, #38	; 0x26
 80027a8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80027ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	78bb      	ldrb	r3, [r7, #2]
 80027b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027b6:	b2d8      	uxtb	r0, r3
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	3316      	adds	r3, #22
 80027c6:	4602      	mov	r2, r0
 80027c8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fbc8 	bl	8002f64 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80027d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	da0a      	bge.n	80027f2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3317      	adds	r3, #23
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e009      	b.n	8002806 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	3317      	adds	r3, #23
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f006 f8f4 	bl	80089f8 <USB_GetHostSpeed>
 8002810:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002812:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002816:	2b01      	cmp	r3, #1
 8002818:	d10b      	bne.n	8002832 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800281a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800281e:	2b01      	cmp	r3, #1
 8002820:	d107      	bne.n	8002832 <HAL_HCD_HC_Init+0x10a>
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d104      	bne.n	8002832 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2bbc      	cmp	r3, #188	; 0xbc
 800282c:	d901      	bls.n	8002832 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800282e:	23bc      	movs	r3, #188	; 0xbc
 8002830:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	3318      	adds	r3, #24
 8002842:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002846:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	b298      	uxth	r0, r3
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	3328      	adds	r3, #40	; 0x28
 800285c:	4602      	mov	r2, r0
 800285e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	b29b      	uxth	r3, r3
 8002868:	787c      	ldrb	r4, [r7, #1]
 800286a:	78ba      	ldrb	r2, [r7, #2]
 800286c:	78f9      	ldrb	r1, [r7, #3]
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	4623      	mov	r3, r4
 800287e:	f006 f8e3 	bl	8008a48 <USB_HC_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd90      	pop	{r4, r7, pc}

08002898 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_HCD_HC_Halt+0x1e>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e00f      	b.n	80028d6 <HAL_HCD_HC_Halt+0x3e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f006 fc75 	bl	80091b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	70fb      	strb	r3, [r7, #3]
 80028f2:	460b      	mov	r3, r1
 80028f4:	70bb      	strb	r3, [r7, #2]
 80028f6:	4613      	mov	r3, r2
 80028f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	3317      	adds	r3, #23
 800290a:	78ba      	ldrb	r2, [r7, #2]
 800290c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3326      	adds	r3, #38	; 0x26
 800291e:	787a      	ldrb	r2, [r7, #1]
 8002920:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002922:	7c3b      	ldrb	r3, [r7, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d114      	bne.n	8002952 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	332a      	adds	r3, #42	; 0x2a
 8002938:	2203      	movs	r2, #3
 800293a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3319      	adds	r3, #25
 800294c:	7f3a      	ldrb	r2, [r7, #28]
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e009      	b.n	8002966 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	332a      	adds	r3, #42	; 0x2a
 8002962:	2202      	movs	r2, #2
 8002964:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002966:	787b      	ldrb	r3, [r7, #1]
 8002968:	2b03      	cmp	r3, #3
 800296a:	f200 8102 	bhi.w	8002b72 <HAL_HCD_HC_SubmitRequest+0x292>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	08002985 	.word	0x08002985
 8002978:	08002b5d 	.word	0x08002b5d
 800297c:	08002a49 	.word	0x08002a49
 8002980:	08002ad3 	.word	0x08002ad3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002984:	7c3b      	ldrb	r3, [r7, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	f040 80f5 	bne.w	8002b76 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800298c:	78bb      	ldrb	r3, [r7, #2]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d12d      	bne.n	80029ee <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002992:	8b3b      	ldrh	r3, [r7, #24]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	333d      	adds	r3, #61	; 0x3d
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	333d      	adds	r3, #61	; 0x3d
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	332a      	adds	r3, #42	; 0x2a
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80029d6:	e0ce      	b.n	8002b76 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	332a      	adds	r3, #42	; 0x2a
 80029e8:	2202      	movs	r2, #2
 80029ea:	701a      	strb	r2, [r3, #0]
      break;
 80029ec:	e0c3      	b.n	8002b76 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	331a      	adds	r3, #26
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	f040 80b8 	bne.w	8002b76 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	333c      	adds	r3, #60	; 0x3c
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	332a      	adds	r3, #42	; 0x2a
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
      break;
 8002a30:	e0a1      	b.n	8002b76 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	332a      	adds	r3, #42	; 0x2a
 8002a42:	2202      	movs	r2, #2
 8002a44:	701a      	strb	r2, [r3, #0]
      break;
 8002a46:	e096      	b.n	8002b76 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a48:	78bb      	ldrb	r3, [r7, #2]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d120      	bne.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	333d      	adds	r3, #61	; 0x3d
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	332a      	adds	r3, #42	; 0x2a
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a78:	e07e      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	332a      	adds	r3, #42	; 0x2a
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	701a      	strb	r2, [r3, #0]
      break;
 8002a8e:	e073      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	333c      	adds	r3, #60	; 0x3c
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	332a      	adds	r3, #42	; 0x2a
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
      break;
 8002aba:	e05d      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	332a      	adds	r3, #42	; 0x2a
 8002acc:	2202      	movs	r2, #2
 8002ace:	701a      	strb	r2, [r3, #0]
      break;
 8002ad0:	e052      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002ad2:	78bb      	ldrb	r3, [r7, #2]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d120      	bne.n	8002b1a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	333d      	adds	r3, #61	; 0x3d
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10a      	bne.n	8002b04 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	332a      	adds	r3, #42	; 0x2a
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b02:	e039      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	332a      	adds	r3, #42	; 0x2a
 8002b14:	2202      	movs	r2, #2
 8002b16:	701a      	strb	r2, [r3, #0]
      break;
 8002b18:	e02e      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	333c      	adds	r3, #60	; 0x3c
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	332a      	adds	r3, #42	; 0x2a
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
      break;
 8002b44:	e018      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	332a      	adds	r3, #42	; 0x2a
 8002b56:	2202      	movs	r2, #2
 8002b58:	701a      	strb	r2, [r3, #0]
      break;
 8002b5a:	e00d      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	332a      	adds	r3, #42	; 0x2a
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
      break;
 8002b70:	e002      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002b76:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	332c      	adds	r3, #44	; 0x2c
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	8b39      	ldrh	r1, [r7, #24]
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4403      	add	r3, r0
 8002b9c:	3334      	adds	r3, #52	; 0x34
 8002b9e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	334c      	adds	r3, #76	; 0x4c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3338      	adds	r3, #56	; 0x38
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3315      	adds	r3, #21
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	334d      	adds	r3, #77	; 0x4d
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	3310      	adds	r3, #16
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4413      	add	r3, r2
 8002c04:	1d19      	adds	r1, r3, #4
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	799b      	ldrb	r3, [r3, #6]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f006 f848 	bl	8008ca0 <USB_HC_StartXfer>
 8002c10:	4603      	mov	r3, r0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop

08002c1c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f005 fd3c 	bl	80086b0 <USB_GetMode>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	f040 80fb 	bne.w	8002e36 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f005 fcff 	bl	8008648 <USB_ReadInterrupts>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80f1 	beq.w	8002e34 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f005 fcf6 	bl	8008648 <USB_ReadInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c66:	d104      	bne.n	8002c72 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f005 fce6 	bl	8008648 <USB_ReadInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c86:	d104      	bne.n	8002c92 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 fcd6 	bl	8008648 <USB_ReadInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ca2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ca6:	d104      	bne.n	8002cb2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f005 fcc6 	bl	8008648 <USB_ReadInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d103      	bne.n	8002cce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f005 fcb8 	bl	8008648 <USB_ReadInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce2:	d120      	bne.n	8002d26 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002cec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d113      	bne.n	8002d26 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002cfe:	2110      	movs	r1, #16
 8002d00:	6938      	ldr	r0, [r7, #16]
 8002d02:	f005 fbab 	bl	800845c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d06:	6938      	ldr	r0, [r7, #16]
 8002d08:	f005 fbda 	bl	80084c0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7a5b      	ldrb	r3, [r3, #9]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d105      	bne.n	8002d20 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f005 fdcc 	bl	80088b8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f008 fda3 	bl	800b86c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f005 fc8c 	bl	8008648 <USB_ReadInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d3a:	d102      	bne.n	8002d42 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f001 fd33 	bl	80047a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f005 fc7e 	bl	8008648 <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d106      	bne.n	8002d64 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f008 fd6c 	bl	800b834 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2208      	movs	r2, #8
 8002d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f005 fc6d 	bl	8008648 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d78:	d139      	bne.n	8002dee <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f006 fa08 	bl	8009194 <USB_HC_ReadInterrupt>
 8002d84:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e025      	b.n	8002dd8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d018      	beq.n	8002dd2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db6:	d106      	bne.n	8002dc6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f905 	bl	8002fce <HCD_HC_IN_IRQHandler>
 8002dc4:	e005      	b.n	8002dd2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 ff67 	bl	8003ca0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	795b      	ldrb	r3, [r3, #5]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d3d3      	bcc.n	8002d8c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f005 fc28 	bl	8008648 <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d101      	bne.n	8002e06 <HAL_HCD_IRQHandler+0x1ea>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_HCD_IRQHandler+0x1ec>
 8002e06:	2300      	movs	r3, #0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d014      	beq.n	8002e36 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0210 	bic.w	r2, r2, #16
 8002e1a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f001 fbe4 	bl	80045ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0210 	orr.w	r2, r2, #16
 8002e30:	619a      	str	r2, [r3, #24]
 8002e32:	e000      	b.n	8002e36 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002e34:	bf00      	nop
    }
  }
}
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_HCD_Start+0x16>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e013      	b.n	8002e7a <HAL_HCD_Start+0x3e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4618      	mov	r0, r3
 8002e62:	f005 fd90 	bl	8008986 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f005 fa88 	bl	8008380 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_HCD_Stop+0x16>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e00d      	b.n	8002eb4 <HAL_HCD_Stop+0x32>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f006 fae3 	bl	8009470 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f005 fd32 	bl	8008932 <USB_ResetPort>
 8002ece:	4603      	mov	r3, r0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	334c      	adds	r3, #76	; 0x4c
 8002ef4:	781b      	ldrb	r3, [r3, #0]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3338      	adds	r3, #56	; 0x38
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f005 fd74 	bl	8008a26 <USB_GetCurrentFrame>
 8002f3e:	4603      	mov	r3, r0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f005 fd4f 	bl	80089f8 <USB_GetHostSpeed>
 8002f5a:	4603      	mov	r3, r0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	331a      	adds	r3, #26
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	331b      	adds	r3, #27
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3325      	adds	r3, #37	; 0x25
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	3324      	adds	r3, #36	; 0x24
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	78fa      	ldrb	r2, [r7, #3]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f005 fb3e 	bl	800866e <USB_ReadChInterrupts>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d11a      	bne.n	8003032 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003008:	461a      	mov	r2, r3
 800300a:	2304      	movs	r3, #4
 800300c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	334d      	adds	r3, #77	; 0x4d
 800301e:	2207      	movs	r2, #7
 8003020:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f006 f8c3 	bl	80091b6 <USB_HC_Halt>
 8003030:	e09e      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f005 fb17 	bl	800866e <USB_ReadChInterrupts>
 8003040:	4603      	mov	r3, r0
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304a:	d11b      	bne.n	8003084 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003058:	461a      	mov	r2, r3
 800305a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800305e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	334d      	adds	r3, #77	; 0x4d
 8003070:	2208      	movs	r2, #8
 8003072:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f006 f89a 	bl	80091b6 <USB_HC_Halt>
 8003082:	e075      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f005 faee 	bl	800866e <USB_ReadChInterrupts>
 8003092:	4603      	mov	r3, r0
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b08      	cmp	r3, #8
 800309a:	d11a      	bne.n	80030d2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a8:	461a      	mov	r2, r3
 80030aa:	2308      	movs	r3, #8
 80030ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	334d      	adds	r3, #77	; 0x4d
 80030be:	2206      	movs	r2, #6
 80030c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f006 f873 	bl	80091b6 <USB_HC_Halt>
 80030d0:	e04e      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f005 fac7 	bl	800866e <USB_ReadChInterrupts>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ea:	d11b      	bne.n	8003124 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	461a      	mov	r2, r3
 80030fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	334d      	adds	r3, #77	; 0x4d
 8003110:	2209      	movs	r2, #9
 8003112:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f006 f84a 	bl	80091b6 <USB_HC_Halt>
 8003122:	e025      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f005 fa9e 	bl	800866e <USB_ReadChInterrupts>
 8003132:	4603      	mov	r3, r0
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d119      	bne.n	8003170 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	334d      	adds	r3, #77	; 0x4d
 800315e:	2207      	movs	r2, #7
 8003160:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f006 f823 	bl	80091b6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f005 fa78 	bl	800866e <USB_ReadChInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003188:	d112      	bne.n	80031b0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f006 f80f 	bl	80091b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a4:	461a      	mov	r2, r3
 80031a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031aa:	6093      	str	r3, [r2, #8]
 80031ac:	f000 bd75 	b.w	8003c9a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f005 fa58 	bl	800866e <USB_ReadChInterrupts>
 80031be:	4603      	mov	r3, r0
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	f040 8128 	bne.w	800341a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d6:	461a      	mov	r2, r3
 80031d8:	2320      	movs	r3, #32
 80031da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	331b      	adds	r3, #27
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d119      	bne.n	8003226 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	331b      	adds	r3, #27
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	0151      	lsls	r1, r2, #5
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	440a      	add	r2, r1
 800321c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003224:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	799b      	ldrb	r3, [r3, #6]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01b      	beq.n	8003266 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3330      	adds	r3, #48	; 0x30
 800323e:	6819      	ldr	r1, [r3, #0]
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	1ac9      	subs	r1, r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4403      	add	r3, r0
 8003262:	3338      	adds	r3, #56	; 0x38
 8003264:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334d      	adds	r3, #77	; 0x4d
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3344      	adds	r3, #68	; 0x44
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329a:	461a      	mov	r2, r3
 800329c:	2301      	movs	r3, #1
 800329e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	3326      	adds	r3, #38	; 0x26
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	3326      	adds	r3, #38	; 0x26
 80032c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d110      	bne.n	80032ee <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f005 ff6e 	bl	80091b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e6:	461a      	mov	r2, r3
 80032e8:	2310      	movs	r3, #16
 80032ea:	6093      	str	r3, [r2, #8]
 80032ec:	e03d      	b.n	800336a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3326      	adds	r3, #38	; 0x26
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d00a      	beq.n	800331a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	3326      	adds	r3, #38	; 0x26
 8003314:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003316:	2b01      	cmp	r3, #1
 8003318:	d127      	bne.n	800336a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	0151      	lsls	r1, r2, #5
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	440a      	add	r2, r1
 8003330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003338:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334c      	adds	r3, #76	; 0x4c
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334c      	adds	r3, #76	; 0x4c
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	4619      	mov	r1, r3
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f008 fa8f 	bl	800b888 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	799b      	ldrb	r3, [r3, #6]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d13b      	bne.n	80033ea <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3338      	adds	r3, #56	; 0x38
 8003382:	6819      	ldr	r1, [r3, #0]
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4403      	add	r3, r0
 8003392:	3328      	adds	r3, #40	; 0x28
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	440b      	add	r3, r1
 8003398:	1e59      	subs	r1, r3, #1
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4403      	add	r3, r0
 80033a8:	3328      	adds	r3, #40	; 0x28
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8470 	beq.w	8003c9a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	333c      	adds	r3, #60	; 0x3c
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	f083 0301 	eor.w	r3, r3, #1
 80033d2:	b2d8      	uxtb	r0, r3
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	333c      	adds	r3, #60	; 0x3c
 80033e2:	4602      	mov	r2, r0
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	f000 bc58 	b.w	8003c9a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	333c      	adds	r3, #60	; 0x3c
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	f083 0301 	eor.w	r3, r3, #1
 8003402:	b2d8      	uxtb	r0, r3
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	333c      	adds	r3, #60	; 0x3c
 8003412:	4602      	mov	r2, r0
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	f000 bc40 	b.w	8003c9a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f005 f923 	bl	800866e <USB_ReadChInterrupts>
 8003428:	4603      	mov	r3, r0
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b20      	cmp	r3, #32
 8003430:	d131      	bne.n	8003496 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343e:	461a      	mov	r2, r3
 8003440:	2320      	movs	r3, #32
 8003442:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	331a      	adds	r3, #26
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	f040 841f 	bne.w	8003c9a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	331b      	adds	r3, #27
 800346c:	2201      	movs	r2, #1
 800346e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	; 0x4d
 8003480:	2203      	movs	r2, #3
 8003482:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f005 fe92 	bl	80091b6 <USB_HC_Halt>
 8003492:	f000 bc02 	b.w	8003c9a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f005 f8e5 	bl	800866e <USB_ReadChInterrupts>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	f040 8305 	bne.w	8003aba <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034bc:	461a      	mov	r2, r3
 80034be:	2302      	movs	r3, #2
 80034c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	334d      	adds	r3, #77	; 0x4d
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d114      	bne.n	8003502 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	334d      	adds	r3, #77	; 0x4d
 80034e8:	2202      	movs	r2, #2
 80034ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	334c      	adds	r3, #76	; 0x4c
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e2cc      	b.n	8003a9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	334d      	adds	r3, #77	; 0x4d
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b06      	cmp	r3, #6
 8003516:	d114      	bne.n	8003542 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	334d      	adds	r3, #77	; 0x4d
 8003528:	2202      	movs	r2, #2
 800352a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	334c      	adds	r3, #76	; 0x4c
 800353c:	2205      	movs	r2, #5
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e2ac      	b.n	8003a9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	334d      	adds	r3, #77	; 0x4d
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b07      	cmp	r3, #7
 8003556:	d00b      	beq.n	8003570 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	334d      	adds	r3, #77	; 0x4d
 8003568:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800356a:	2b09      	cmp	r3, #9
 800356c:	f040 80a6 	bne.w	80036bc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334d      	adds	r3, #77	; 0x4d
 8003580:	2202      	movs	r2, #2
 8003582:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	3344      	adds	r3, #68	; 0x44
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4403      	add	r3, r0
 80035a4:	3344      	adds	r3, #68	; 0x44
 80035a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3344      	adds	r3, #68	; 0x44
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d943      	bls.n	8003646 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	3344      	adds	r3, #68	; 0x44
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	331a      	adds	r3, #26
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d123      	bne.n	8003630 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	331b      	adds	r3, #27
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	331c      	adds	r3, #28
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	0151      	lsls	r1, r2, #5
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	440a      	add	r2, r1
 8003626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	334c      	adds	r3, #76	; 0x4c
 8003640:	2204      	movs	r2, #4
 8003642:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003644:	e229      	b.n	8003a9a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	334c      	adds	r3, #76	; 0x4c
 8003656:	2202      	movs	r2, #2
 8003658:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	3326      	adds	r3, #38	; 0x26
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	3326      	adds	r3, #38	; 0x26
 8003680:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003682:	2b02      	cmp	r3, #2
 8003684:	f040 8209 	bne.w	8003a9a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800369e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b4:	461a      	mov	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036ba:	e1ee      	b.n	8003a9a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	334d      	adds	r3, #77	; 0x4d
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	f040 80c8 	bne.w	8003864 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	334d      	adds	r3, #77	; 0x4d
 80036e4:	2202      	movs	r2, #2
 80036e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	331b      	adds	r3, #27
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	f040 81ce 	bne.w	8003a9c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	3326      	adds	r3, #38	; 0x26
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d16b      	bne.n	80037ee <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	3348      	adds	r3, #72	; 0x48
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1c59      	adds	r1, r3, #1
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4403      	add	r3, r0
 8003736:	3348      	adds	r3, #72	; 0x48
 8003738:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	3348      	adds	r3, #72	; 0x48
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d943      	bls.n	80037d8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3348      	adds	r3, #72	; 0x48
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	331b      	adds	r3, #27
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3344      	adds	r3, #68	; 0x44
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d809      	bhi.n	80037a2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	331c      	adds	r3, #28
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	0151      	lsls	r1, r2, #5
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	440a      	add	r2, r1
 80037b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	334c      	adds	r3, #76	; 0x4c
 80037d2:	2204      	movs	r2, #4
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e014      	b.n	8003802 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	334c      	adds	r3, #76	; 0x4c
 80037e8:	2202      	movs	r2, #2
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e009      	b.n	8003802 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	334c      	adds	r3, #76	; 0x4c
 80037fe:	2202      	movs	r2, #2
 8003800:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3326      	adds	r3, #38	; 0x26
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3326      	adds	r3, #38	; 0x26
 8003828:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800382a:	2b02      	cmp	r3, #2
 800382c:	f040 8136 	bne.w	8003a9c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003846:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800384e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4413      	add	r3, r2
 8003858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385c:	461a      	mov	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e11b      	b.n	8003a9c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	334d      	adds	r3, #77	; 0x4d
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b03      	cmp	r3, #3
 8003878:	f040 8081 	bne.w	800397e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	334d      	adds	r3, #77	; 0x4d
 800388c:	2202      	movs	r2, #2
 800388e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	331b      	adds	r3, #27
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	f040 80fa 	bne.w	8003a9c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	334c      	adds	r3, #76	; 0x4c
 80038b8:	2202      	movs	r2, #2
 80038ba:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	0151      	lsls	r1, r2, #5
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	440a      	add	r2, r1
 80038d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038da:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	0151      	lsls	r1, r2, #5
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	440a      	add	r2, r1
 80038f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038fa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4413      	add	r3, r2
 8003904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	0151      	lsls	r1, r2, #5
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	440a      	add	r2, r1
 8003912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003916:	f023 0320 	bic.w	r3, r3, #32
 800391a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3326      	adds	r3, #38	; 0x26
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	3326      	adds	r3, #38	; 0x26
 8003942:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003944:	2b02      	cmp	r3, #2
 8003946:	f040 80a9 	bne.w	8003a9c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003960:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003968:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	e08e      	b.n	8003a9c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	334d      	adds	r3, #77	; 0x4d
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b04      	cmp	r3, #4
 8003992:	d143      	bne.n	8003a1c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	334d      	adds	r3, #77	; 0x4d
 80039a4:	2202      	movs	r2, #2
 80039a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	334c      	adds	r3, #76	; 0x4c
 80039b8:	2202      	movs	r2, #2
 80039ba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	3326      	adds	r3, #38	; 0x26
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	3326      	adds	r3, #38	; 0x26
 80039e2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d159      	bne.n	8003a9c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a06:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	461a      	mov	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e03f      	b.n	8003a9c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	334d      	adds	r3, #77	; 0x4d
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d126      	bne.n	8003a80 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	334d      	adds	r3, #77	; 0x4d
 8003a42:	2202      	movs	r2, #2
 8003a44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3344      	adds	r3, #68	; 0x44
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	1c59      	adds	r1, r3, #1
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4403      	add	r3, r0
 8003a66:	3344      	adds	r3, #68	; 0x44
 8003a68:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	334c      	adds	r3, #76	; 0x4c
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e00d      	b.n	8003a9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	334d      	adds	r3, #77	; 0x4d
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	f000 8100 	beq.w	8003c98 <HCD_HC_IN_IRQHandler+0xcca>
 8003a98:	e000      	b.n	8003a9c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a9a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	334c      	adds	r3, #76	; 0x4c
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f007 fee8 	bl	800b888 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ab8:	e0ef      	b.n	8003c9a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f004 fdd3 	bl	800866e <USB_ReadChInterrupts>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d12f      	bne.n	8003b32 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2340      	movs	r3, #64	; 0x40
 8003ae2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	334d      	adds	r3, #77	; 0x4d
 8003af4:	2205      	movs	r2, #5
 8003af6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	331a      	adds	r3, #26
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3344      	adds	r3, #68	; 0x44
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f005 fb43 	bl	80091b6 <USB_HC_Halt>
 8003b30:	e0b3      	b.n	8003c9a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 fd97 	bl	800866e <USB_ReadChInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	f040 80a7 	bne.w	8003c9a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3326      	adds	r3, #38	; 0x26
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d11b      	bne.n	8003b9a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	3344      	adds	r3, #68	; 0x44
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	334d      	adds	r3, #77	; 0x4d
 8003b86:	2204      	movs	r2, #4
 8003b88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f005 fb0f 	bl	80091b6 <USB_HC_Halt>
 8003b98:	e03f      	b.n	8003c1a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3326      	adds	r3, #38	; 0x26
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3326      	adds	r3, #38	; 0x26
 8003bc0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d129      	bne.n	8003c1a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3344      	adds	r3, #68	; 0x44
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	799b      	ldrb	r3, [r3, #6]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HCD_HC_IN_IRQHandler+0xc2a>
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	331b      	adds	r3, #27
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d110      	bne.n	8003c1a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	; 0x4d
 8003c08:	2204      	movs	r2, #4
 8003c0a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f005 face 	bl	80091b6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	331b      	adds	r3, #27
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d129      	bne.n	8003c84 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	331b      	adds	r3, #27
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c62:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	0151      	lsls	r1, r2, #5
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	440a      	add	r2, r1
 8003c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c7e:	f043 0320 	orr.w	r3, r3, #32
 8003c82:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c90:	461a      	mov	r2, r3
 8003c92:	2310      	movs	r3, #16
 8003c94:	6093      	str	r3, [r2, #8]
 8003c96:	e000      	b.n	8003c9a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003c98:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f004 fcd5 	bl	800866e <USB_ReadChInterrupts>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d11b      	bne.n	8003d06 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2304      	movs	r3, #4
 8003cde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	334d      	adds	r3, #77	; 0x4d
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f005 fa5a 	bl	80091b6 <USB_HC_Halt>
 8003d02:	f000 bc6f 	b.w	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f004 fcad 	bl	800866e <USB_ReadChInterrupts>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	f040 8082 	bne.w	8003e24 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2320      	movs	r3, #32
 8003d30:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	3319      	adds	r3, #25
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d124      	bne.n	8003d92 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	3319      	adds	r3, #25
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	334c      	adds	r3, #76	; 0x4c
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	334d      	adds	r3, #77	; 0x4d
 8003d80:	2203      	movs	r2, #3
 8003d82:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	78fa      	ldrb	r2, [r7, #3]
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f005 fa12 	bl	80091b6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	331a      	adds	r3, #26
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 841d 	bne.w	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	331b      	adds	r3, #27
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 8411 	bne.w	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3326      	adds	r3, #38	; 0x26
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d009      	beq.n	8003dec <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	331b      	adds	r3, #27
 8003de8:	2201      	movs	r2, #1
 8003dea:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	334d      	adds	r3, #77	; 0x4d
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f005 f9d4 	bl	80091b6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	3344      	adds	r3, #68	; 0x44
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e3df      	b.n	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f004 fc1e 	bl	800866e <USB_ReadChInterrupts>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d111      	bne.n	8003e62 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f005 f9ab 	bl	80091b6 <USB_HC_Halt>
 8003e60:	e3c0      	b.n	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	4611      	mov	r1, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f004 fbff 	bl	800866e <USB_ReadChInterrupts>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d168      	bne.n	8003f4c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3344      	adds	r3, #68	; 0x44
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f004 fbe9 	bl	800866e <USB_ReadChInterrupts>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d112      	bne.n	8003ecc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3319      	adds	r3, #25
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2340      	movs	r3, #64	; 0x40
 8003eca:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	331b      	adds	r3, #27
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d019      	beq.n	8003f16 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	331b      	adds	r3, #27
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	0151      	lsls	r1, r2, #5
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	440a      	add	r2, r1
 8003f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f14:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f22:	461a      	mov	r2, r3
 8003f24:	2301      	movs	r3, #1
 8003f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334d      	adds	r3, #77	; 0x4d
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	78fa      	ldrb	r2, [r7, #3]
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f005 f936 	bl	80091b6 <USB_HC_Halt>
 8003f4a:	e34b      	b.n	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f004 fb8a 	bl	800866e <USB_ReadChInterrupts>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d139      	bne.n	8003fd8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003f64:	78fa      	ldrb	r2, [r7, #3]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	334d      	adds	r3, #77	; 0x4d
 8003f74:	2205      	movs	r2, #5
 8003f76:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	331a      	adds	r3, #26
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3319      	adds	r3, #25
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	3344      	adds	r3, #68	; 0x44
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f005 f8f9 	bl	80091b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2340      	movs	r3, #64	; 0x40
 8003fd4:	6093      	str	r3, [r2, #8]
 8003fd6:	e305      	b.n	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f004 fb44 	bl	800866e <USB_ReadChInterrupts>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d11a      	bne.n	8004026 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2308      	movs	r3, #8
 8004000:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	334d      	adds	r3, #77	; 0x4d
 8004012:	2206      	movs	r2, #6
 8004014:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f005 f8c9 	bl	80091b6 <USB_HC_Halt>
 8004024:	e2de      	b.n	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f004 fb1d 	bl	800866e <USB_ReadChInterrupts>
 8004034:	4603      	mov	r3, r0
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b10      	cmp	r3, #16
 800403c:	d144      	bne.n	80040c8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	3344      	adds	r3, #68	; 0x44
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	334d      	adds	r3, #77	; 0x4d
 8004062:	2204      	movs	r2, #4
 8004064:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004066:	78fa      	ldrb	r2, [r7, #3]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3319      	adds	r3, #25
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d114      	bne.n	80040a6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	3318      	adds	r3, #24
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	3319      	adds	r3, #25
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	4611      	mov	r1, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f005 f881 	bl	80091b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	461a      	mov	r2, r3
 80040c2:	2310      	movs	r3, #16
 80040c4:	6093      	str	r3, [r2, #8]
 80040c6:	e28d      	b.n	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f004 facc 	bl	800866e <USB_ReadChInterrupts>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	2b80      	cmp	r3, #128	; 0x80
 80040de:	d169      	bne.n	80041b4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	799b      	ldrb	r3, [r3, #6]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d111      	bne.n	800410c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	334d      	adds	r3, #77	; 0x4d
 80040f8:	2207      	movs	r2, #7
 80040fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f005 f856 	bl	80091b6 <USB_HC_Halt>
 800410a:	e049      	b.n	80041a0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	3344      	adds	r3, #68	; 0x44
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4403      	add	r3, r0
 800412c:	3344      	adds	r3, #68	; 0x44
 800412e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	3344      	adds	r3, #68	; 0x44
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d922      	bls.n	800418c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	3344      	adds	r3, #68	; 0x44
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	334c      	adds	r3, #76	; 0x4c
 800416a:	2204      	movs	r2, #4
 800416c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	334c      	adds	r3, #76	; 0x4c
 800417e:	781a      	ldrb	r2, [r3, #0]
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	4619      	mov	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f007 fb7f 	bl	800b888 <HAL_HCD_HC_NotifyURBChange_Callback>
 800418a:	e009      	b.n	80041a0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	4613      	mov	r3, r2
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	334c      	adds	r3, #76	; 0x4c
 800419c:	2202      	movs	r2, #2
 800419e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ac:	461a      	mov	r2, r3
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	6093      	str	r3, [r2, #8]
 80041b2:	e217      	b.n	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 fa56 	bl	800866e <USB_ReadChInterrupts>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041cc:	d11b      	bne.n	8004206 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	334d      	adds	r3, #77	; 0x4d
 80041de:	2209      	movs	r2, #9
 80041e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	78fa      	ldrb	r2, [r7, #3]
 80041e8:	4611      	mov	r1, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f004 ffe3 	bl	80091b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fc:	461a      	mov	r2, r3
 80041fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004202:	6093      	str	r3, [r2, #8]
 8004204:	e1ee      	b.n	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f004 fa2d 	bl	800866e <USB_ReadChInterrupts>
 8004214:	4603      	mov	r3, r0
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b02      	cmp	r3, #2
 800421c:	f040 81df 	bne.w	80045de <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422c:	461a      	mov	r2, r3
 800422e:	2302      	movs	r3, #2
 8004230:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	334d      	adds	r3, #77	; 0x4d
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b01      	cmp	r3, #1
 8004246:	f040 8093 	bne.w	8004370 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	334d      	adds	r3, #77	; 0x4d
 800425a:	2202      	movs	r2, #2
 800425c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	334c      	adds	r3, #76	; 0x4c
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	3326      	adds	r3, #38	; 0x26
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d00b      	beq.n	80042a0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3326      	adds	r3, #38	; 0x26
 8004298:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800429a:	2b03      	cmp	r3, #3
 800429c:	f040 8190 	bne.w	80045c0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	799b      	ldrb	r3, [r3, #6]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d115      	bne.n	80042d4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	333d      	adds	r3, #61	; 0x3d
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	f083 0301 	eor.w	r3, r3, #1
 80042c0:	b2d8      	uxtb	r0, r3
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	333d      	adds	r3, #61	; 0x3d
 80042d0:	4602      	mov	r2, r0
 80042d2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	799b      	ldrb	r3, [r3, #6]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	f040 8171 	bne.w	80045c0 <HCD_HC_OUT_IRQHandler+0x920>
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	3334      	adds	r3, #52	; 0x34
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8165 	beq.w	80045c0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	3334      	adds	r3, #52	; 0x34
 8004306:	6819      	ldr	r1, [r3, #0]
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4403      	add	r3, r0
 8004316:	3328      	adds	r3, #40	; 0x28
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	440b      	add	r3, r1
 800431c:	1e59      	subs	r1, r3, #1
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4403      	add	r3, r0
 800432c:	3328      	adds	r3, #40	; 0x28
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	fbb1 f3f3 	udiv	r3, r1, r3
 8004334:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 813f 	beq.w	80045c0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	333d      	adds	r3, #61	; 0x3d
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	f083 0301 	eor.w	r3, r3, #1
 800435a:	b2d8      	uxtb	r0, r3
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	333d      	adds	r3, #61	; 0x3d
 800436a:	4602      	mov	r2, r0
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	e127      	b.n	80045c0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	334d      	adds	r3, #77	; 0x4d
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b03      	cmp	r3, #3
 8004384:	d120      	bne.n	80043c8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	334d      	adds	r3, #77	; 0x4d
 8004396:	2202      	movs	r2, #2
 8004398:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	331b      	adds	r3, #27
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f040 8107 	bne.w	80045c0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	334c      	adds	r3, #76	; 0x4c
 80043c2:	2202      	movs	r2, #2
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e0fb      	b.n	80045c0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	334d      	adds	r3, #77	; 0x4d
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d13a      	bne.n	8004454 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	334d      	adds	r3, #77	; 0x4d
 80043ee:	2202      	movs	r2, #2
 80043f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	334c      	adds	r3, #76	; 0x4c
 8004402:	2202      	movs	r2, #2
 8004404:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	331b      	adds	r3, #27
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b01      	cmp	r3, #1
 800441a:	f040 80d1 	bne.w	80045c0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	331b      	adds	r3, #27
 800442e:	2200      	movs	r2, #0
 8004430:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	440a      	add	r2, r1
 8004448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800444c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004450:	6053      	str	r3, [r2, #4]
 8004452:	e0b5      	b.n	80045c0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	334d      	adds	r3, #77	; 0x4d
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b05      	cmp	r3, #5
 8004468:	d114      	bne.n	8004494 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	334d      	adds	r3, #77	; 0x4d
 800447a:	2202      	movs	r2, #2
 800447c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	334c      	adds	r3, #76	; 0x4c
 800448e:	2202      	movs	r2, #2
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	e095      	b.n	80045c0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004494:	78fa      	ldrb	r2, [r7, #3]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	334d      	adds	r3, #77	; 0x4d
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d114      	bne.n	80044d4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	334d      	adds	r3, #77	; 0x4d
 80044ba:	2202      	movs	r2, #2
 80044bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	334c      	adds	r3, #76	; 0x4c
 80044ce:	2205      	movs	r2, #5
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	e075      	b.n	80045c0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	334d      	adds	r3, #77	; 0x4d
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b07      	cmp	r3, #7
 80044e8:	d00a      	beq.n	8004500 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80044ea:	78fa      	ldrb	r2, [r7, #3]
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	334d      	adds	r3, #77	; 0x4d
 80044fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80044fc:	2b09      	cmp	r3, #9
 80044fe:	d170      	bne.n	80045e2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	334d      	adds	r3, #77	; 0x4d
 8004510:	2202      	movs	r2, #2
 8004512:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	3344      	adds	r3, #68	; 0x44
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	1c59      	adds	r1, r3, #1
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4403      	add	r3, r0
 8004534:	3344      	adds	r3, #68	; 0x44
 8004536:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	3344      	adds	r3, #68	; 0x44
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d914      	bls.n	8004578 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	3344      	adds	r3, #68	; 0x44
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004562:	78fa      	ldrb	r2, [r7, #3]
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	1a9b      	subs	r3, r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	334c      	adds	r3, #76	; 0x4c
 8004572:	2204      	movs	r2, #4
 8004574:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004576:	e022      	b.n	80045be <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	334c      	adds	r3, #76	; 0x4c
 8004588:	2202      	movs	r2, #2
 800458a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045a2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045aa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b8:	461a      	mov	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	334c      	adds	r3, #76	; 0x4c
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	4619      	mov	r1, r3
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f007 f956 	bl	800b888 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045dc:	e002      	b.n	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80045e2:	bf00      	nop
  }
}
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b08a      	sub	sp, #40	; 0x28
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	0c5b      	lsrs	r3, r3, #17
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800461e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d004      	beq.n	8004630 <HCD_RXQLVL_IRQHandler+0x46>
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b05      	cmp	r3, #5
 800462a:	f000 80b6 	beq.w	800479a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800462e:	e0b7      	b.n	80047a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 80b3 	beq.w	800479e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	332c      	adds	r3, #44	; 0x2c
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 80a7 	beq.w	800479e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3338      	adds	r3, #56	; 0x38
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	18d1      	adds	r1, r2, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4403      	add	r3, r0
 8004674:	3334      	adds	r3, #52	; 0x34
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4299      	cmp	r1, r3
 800467a:	f200 8083 	bhi.w	8004784 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	332c      	adds	r3, #44	; 0x2c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	b292      	uxth	r2, r2
 8004698:	4619      	mov	r1, r3
 800469a:	f003 ff7d 	bl	8008598 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	332c      	adds	r3, #44	; 0x2c
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	18d1      	adds	r1, r2, r3
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4403      	add	r3, r0
 80046c2:	332c      	adds	r3, #44	; 0x2c
 80046c4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3338      	adds	r3, #56	; 0x38
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	18d1      	adds	r1, r2, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4403      	add	r3, r0
 80046ea:	3338      	adds	r3, #56	; 0x38
 80046ec:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	0cdb      	lsrs	r3, r3, #19
 80046fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004702:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4613      	mov	r3, r2
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	3328      	adds	r3, #40	; 0x28
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4293      	cmp	r3, r2
 800471c:	d13f      	bne.n	800479e <HCD_RXQLVL_IRQHandler+0x1b4>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d03c      	beq.n	800479e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	4413      	add	r3, r2
 800472c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800473a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004742:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	4413      	add	r3, r2
 800474c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004750:	461a      	mov	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	333c      	adds	r3, #60	; 0x3c
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	f083 0301 	eor.w	r3, r3, #1
 800476c:	b2d8      	uxtb	r0, r3
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4613      	mov	r3, r2
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	333c      	adds	r3, #60	; 0x3c
 800477e:	4602      	mov	r2, r0
 8004780:	701a      	strb	r2, [r3, #0]
      break;
 8004782:	e00c      	b.n	800479e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4613      	mov	r3, r2
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	334c      	adds	r3, #76	; 0x4c
 8004794:	2204      	movs	r2, #4
 8004796:	701a      	strb	r2, [r3, #0]
      break;
 8004798:	e001      	b.n	800479e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800479e:	bf00      	nop
  }
}
 80047a0:	bf00      	nop
 80047a2:	3728      	adds	r7, #40	; 0x28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d10b      	bne.n	80047f8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d102      	bne.n	80047f0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f007 f830 	bl	800b850 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f043 0302 	orr.w	r3, r3, #2
 80047f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d132      	bne.n	8004868 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f043 0308 	orr.w	r3, r3, #8
 8004808:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b04      	cmp	r3, #4
 8004812:	d126      	bne.n	8004862 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	7a5b      	ldrb	r3, [r3, #9]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d113      	bne.n	8004844 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004822:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004826:	d106      	bne.n	8004836 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f004 f842 	bl	80088b8 <USB_InitFSLSPClkSel>
 8004834:	e011      	b.n	800485a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2101      	movs	r1, #1
 800483c:	4618      	mov	r0, r3
 800483e:	f004 f83b 	bl	80088b8 <USB_InitFSLSPClkSel>
 8004842:	e00a      	b.n	800485a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	79db      	ldrb	r3, [r3, #7]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d106      	bne.n	800485a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004852:	461a      	mov	r2, r3
 8004854:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004858:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f007 f822 	bl	800b8a4 <HAL_HCD_PortEnabled_Callback>
 8004860:	e002      	b.n	8004868 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f007 f82c 	bl	800b8c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b20      	cmp	r3, #32
 8004870:	d103      	bne.n	800487a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f043 0320 	orr.w	r3, r3, #32
 8004878:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004880:	461a      	mov	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6013      	str	r3, [r2, #0]
}
 8004886:	bf00      	nop
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e12b      	b.n	8004afa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fc ff06 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2224      	movs	r2, #36	; 0x24
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0201 	bic.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048f4:	f001 fa20 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 80048f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4a81      	ldr	r2, [pc, #516]	; (8004b04 <HAL_I2C_Init+0x274>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d807      	bhi.n	8004914 <HAL_I2C_Init+0x84>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a80      	ldr	r2, [pc, #512]	; (8004b08 <HAL_I2C_Init+0x278>)
 8004908:	4293      	cmp	r3, r2
 800490a:	bf94      	ite	ls
 800490c:	2301      	movls	r3, #1
 800490e:	2300      	movhi	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	e006      	b.n	8004922 <HAL_I2C_Init+0x92>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4a7d      	ldr	r2, [pc, #500]	; (8004b0c <HAL_I2C_Init+0x27c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	bf94      	ite	ls
 800491c:	2301      	movls	r3, #1
 800491e:	2300      	movhi	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e0e7      	b.n	8004afa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a78      	ldr	r2, [pc, #480]	; (8004b10 <HAL_I2C_Init+0x280>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	0c9b      	lsrs	r3, r3, #18
 8004934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4a6a      	ldr	r2, [pc, #424]	; (8004b04 <HAL_I2C_Init+0x274>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d802      	bhi.n	8004964 <HAL_I2C_Init+0xd4>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	3301      	adds	r3, #1
 8004962:	e009      	b.n	8004978 <HAL_I2C_Init+0xe8>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	4a69      	ldr	r2, [pc, #420]	; (8004b14 <HAL_I2C_Init+0x284>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	099b      	lsrs	r3, r3, #6
 8004976:	3301      	adds	r3, #1
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	430b      	orrs	r3, r1
 800497e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800498a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	495c      	ldr	r1, [pc, #368]	; (8004b04 <HAL_I2C_Init+0x274>)
 8004994:	428b      	cmp	r3, r1
 8004996:	d819      	bhi.n	80049cc <HAL_I2C_Init+0x13c>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1e59      	subs	r1, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049a6:	1c59      	adds	r1, r3, #1
 80049a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049ac:	400b      	ands	r3, r1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_I2C_Init+0x138>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1e59      	subs	r1, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80049c0:	3301      	adds	r3, #1
 80049c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c6:	e051      	b.n	8004a6c <HAL_I2C_Init+0x1dc>
 80049c8:	2304      	movs	r3, #4
 80049ca:	e04f      	b.n	8004a6c <HAL_I2C_Init+0x1dc>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d111      	bne.n	80049f8 <HAL_I2C_Init+0x168>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1e58      	subs	r0, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6859      	ldr	r1, [r3, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	440b      	add	r3, r1
 80049e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e6:	3301      	adds	r3, #1
 80049e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e012      	b.n	8004a1e <HAL_I2C_Init+0x18e>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1e58      	subs	r0, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6859      	ldr	r1, [r3, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	0099      	lsls	r1, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_I2C_Init+0x196>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e022      	b.n	8004a6c <HAL_I2C_Init+0x1dc>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10e      	bne.n	8004a4c <HAL_I2C_Init+0x1bc>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1e58      	subs	r0, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6859      	ldr	r1, [r3, #4]
 8004a36:	460b      	mov	r3, r1
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	440b      	add	r3, r1
 8004a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a40:	3301      	adds	r3, #1
 8004a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4a:	e00f      	b.n	8004a6c <HAL_I2C_Init+0x1dc>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1e58      	subs	r0, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	0099      	lsls	r1, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a62:	3301      	adds	r3, #1
 8004a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	6809      	ldr	r1, [r1, #0]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69da      	ldr	r2, [r3, #28]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6911      	ldr	r1, [r2, #16]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68d2      	ldr	r2, [r2, #12]
 8004aa6:	4311      	orrs	r1, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	000186a0 	.word	0x000186a0
 8004b08:	001e847f 	.word	0x001e847f
 8004b0c:	003d08ff 	.word	0x003d08ff
 8004b10:	431bde83 	.word	0x431bde83
 8004b14:	10624dd3 	.word	0x10624dd3

08004b18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e128      	b.n	8004d7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a90      	ldr	r2, [pc, #576]	; (8004d84 <HAL_I2S_Init+0x26c>)
 8004b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7fc fe07 	bl	8001758 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b60:	f023 030f 	bic.w	r3, r3, #15
 8004b64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d060      	beq.n	8004c38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d102      	bne.n	8004b84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b7e:	2310      	movs	r3, #16
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e001      	b.n	8004b88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b84:	2320      	movs	r3, #32
 8004b86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d802      	bhi.n	8004b96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004b96:	2001      	movs	r0, #1
 8004b98:	f001 f9d8 	bl	8005f4c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b9c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba6:	d125      	bne.n	8004bf4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d010      	beq.n	8004bd2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	3305      	adds	r3, #5
 8004bce:	613b      	str	r3, [r7, #16]
 8004bd0:	e01f      	b.n	8004c12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	461a      	mov	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	3305      	adds	r3, #5
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	e00e      	b.n	8004c12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	3305      	adds	r3, #5
 8004c10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4a5c      	ldr	r2, [pc, #368]	; (8004d88 <HAL_I2S_Init+0x270>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	08db      	lsrs	r3, r3, #3
 8004c1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	e003      	b.n	8004c40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d902      	bls.n	8004c4c <HAL_I2S_Init+0x134>
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2bff      	cmp	r3, #255	; 0xff
 8004c4a:	d907      	bls.n	8004c5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c50:	f043 0210 	orr.w	r2, r3, #16
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e08f      	b.n	8004d7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	ea42 0103 	orr.w	r1, r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c7a:	f023 030f 	bic.w	r3, r3, #15
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6851      	ldr	r1, [r2, #4]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6892      	ldr	r2, [r2, #8]
 8004c86:	4311      	orrs	r1, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68d2      	ldr	r2, [r2, #12]
 8004c8c:	4311      	orrs	r1, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6992      	ldr	r2, [r2, #24]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d161      	bne.n	8004d6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a38      	ldr	r2, [pc, #224]	; (8004d8c <HAL_I2S_Init+0x274>)
 8004cac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a37      	ldr	r2, [pc, #220]	; (8004d90 <HAL_I2S_Init+0x278>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d101      	bne.n	8004cbc <HAL_I2S_Init+0x1a4>
 8004cb8:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <HAL_I2S_Init+0x27c>)
 8004cba:	e001      	b.n	8004cc0 <HAL_I2S_Init+0x1a8>
 8004cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	4932      	ldr	r1, [pc, #200]	; (8004d90 <HAL_I2S_Init+0x278>)
 8004cc8:	428a      	cmp	r2, r1
 8004cca:	d101      	bne.n	8004cd0 <HAL_I2S_Init+0x1b8>
 8004ccc:	4a31      	ldr	r2, [pc, #196]	; (8004d94 <HAL_I2S_Init+0x27c>)
 8004cce:	e001      	b.n	8004cd4 <HAL_I2S_Init+0x1bc>
 8004cd0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004cd4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004cd8:	f023 030f 	bic.w	r3, r3, #15
 8004cdc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2b      	ldr	r2, [pc, #172]	; (8004d90 <HAL_I2S_Init+0x278>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d101      	bne.n	8004cec <HAL_I2S_Init+0x1d4>
 8004ce8:	4b2a      	ldr	r3, [pc, #168]	; (8004d94 <HAL_I2S_Init+0x27c>)
 8004cea:	e001      	b.n	8004cf0 <HAL_I2S_Init+0x1d8>
 8004cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a25      	ldr	r2, [pc, #148]	; (8004d90 <HAL_I2S_Init+0x278>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d101      	bne.n	8004d02 <HAL_I2S_Init+0x1ea>
 8004cfe:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <HAL_I2S_Init+0x27c>)
 8004d00:	e001      	b.n	8004d06 <HAL_I2S_Init+0x1ee>
 8004d02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d12:	d003      	beq.n	8004d1c <HAL_I2S_Init+0x204>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d103      	bne.n	8004d24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	e001      	b.n	8004d28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d24:	2300      	movs	r3, #0
 8004d26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d32:	4313      	orrs	r3, r2
 8004d34:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d46:	4313      	orrs	r3, r2
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	897b      	ldrh	r3, [r7, #10]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <HAL_I2S_Init+0x278>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d101      	bne.n	8004d64 <HAL_I2S_Init+0x24c>
 8004d60:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <HAL_I2S_Init+0x27c>)
 8004d62:	e001      	b.n	8004d68 <HAL_I2S_Init+0x250>
 8004d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d68:	897a      	ldrh	r2, [r7, #10]
 8004d6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	08004e8f 	.word	0x08004e8f
 8004d88:	cccccccd 	.word	0xcccccccd
 8004d8c:	08004fa5 	.word	0x08004fa5
 8004d90:	40003800 	.word	0x40003800
 8004d94:	40003400 	.word	0x40003400

08004d98 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	881a      	ldrh	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	1c9a      	adds	r2, r3, #2
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10e      	bne.n	8004e28 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e18:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff ffb8 	bl	8004d98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	b292      	uxth	r2, r2
 8004e44:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	1c9a      	adds	r2, r3, #2
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10e      	bne.n	8004e86 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e76:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff93 	bl	8004dac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d13a      	bne.n	8004f20 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d109      	bne.n	8004ec8 <I2S_IRQHandler+0x3a>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebe:	2b40      	cmp	r3, #64	; 0x40
 8004ec0:	d102      	bne.n	8004ec8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff ffb4 	bl	8004e30 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d126      	bne.n	8004f20 <I2S_IRQHandler+0x92>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d11f      	bne.n	8004f20 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004eee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f043 0202 	orr.w	r2, r3, #2
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ff50 	bl	8004dc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d136      	bne.n	8004f9a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d109      	bne.n	8004f4a <I2S_IRQHandler+0xbc>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f40:	2b80      	cmp	r3, #128	; 0x80
 8004f42:	d102      	bne.n	8004f4a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff ff45 	bl	8004dd4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d122      	bne.n	8004f9a <I2S_IRQHandler+0x10c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	d11b      	bne.n	8004f9a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f70:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8c:	f043 0204 	orr.w	r2, r3, #4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff ff13 	bl	8004dc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a92      	ldr	r2, [pc, #584]	; (8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d101      	bne.n	8004fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004fbe:	4b92      	ldr	r3, [pc, #584]	; (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fc0:	e001      	b.n	8004fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004fc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a8b      	ldr	r2, [pc, #556]	; (8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004fdc:	4b8a      	ldr	r3, [pc, #552]	; (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fde:	e001      	b.n	8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004fe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff0:	d004      	beq.n	8004ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f040 8099 	bne.w	800512e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d107      	bne.n	8005016 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f925 	bl	8005260 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b01      	cmp	r3, #1
 800501e:	d107      	bne.n	8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f9c8 	bl	80053c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d13a      	bne.n	80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d035      	beq.n	80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a6e      	ldr	r2, [pc, #440]	; (8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d101      	bne.n	8005052 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800504e:	4b6e      	ldr	r3, [pc, #440]	; (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005050:	e001      	b.n	8005056 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4969      	ldr	r1, [pc, #420]	; (8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800505e:	428b      	cmp	r3, r1
 8005060:	d101      	bne.n	8005066 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005062:	4b69      	ldr	r3, [pc, #420]	; (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005064:	e001      	b.n	800506a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005066:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800506a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800506e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800507e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	f043 0202 	orr.w	r2, r3, #2
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff fe88 	bl	8004dc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	f040 80c3 	bne.w	8005242 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80bd 	beq.w	8005242 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a49      	ldr	r2, [pc, #292]	; (8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d101      	bne.n	80050e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80050e2:	4b49      	ldr	r3, [pc, #292]	; (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050e4:	e001      	b.n	80050ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80050e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4944      	ldr	r1, [pc, #272]	; (8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050f2:	428b      	cmp	r3, r1
 80050f4:	d101      	bne.n	80050fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80050f6:	4b44      	ldr	r3, [pc, #272]	; (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050f8:	e001      	b.n	80050fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80050fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005102:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005104:	2300      	movs	r3, #0
 8005106:	60bb      	str	r3, [r7, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	f043 0204 	orr.w	r2, r3, #4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff fe4a 	bl	8004dc0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800512c:	e089      	b.n	8005242 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b02      	cmp	r3, #2
 8005136:	d107      	bne.n	8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f8be 	bl	80052c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d107      	bne.n	8005162 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f8fd 	bl	800535c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d12f      	bne.n	80051cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d02a      	beq.n	80051cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005184:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d101      	bne.n	8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005190:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005192:	e001      	b.n	8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4919      	ldr	r1, [pc, #100]	; (8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051a0:	428b      	cmp	r3, r1
 80051a2:	d101      	bne.n	80051a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80051a4:	4b18      	ldr	r3, [pc, #96]	; (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051a6:	e001      	b.n	80051ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80051a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	f043 0202 	orr.w	r2, r3, #2
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff fdfa 	bl	8004dc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d136      	bne.n	8005244 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d031      	beq.n	8005244 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a07      	ldr	r2, [pc, #28]	; (8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d101      	bne.n	80051ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80051ea:	4b07      	ldr	r3, [pc, #28]	; (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051ec:	e001      	b.n	80051f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80051ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4902      	ldr	r1, [pc, #8]	; (8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051fa:	428b      	cmp	r3, r1
 80051fc:	d106      	bne.n	800520c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80051fe:	4b02      	ldr	r3, [pc, #8]	; (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005200:	e006      	b.n	8005210 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005202:	bf00      	nop
 8005204:	40003800 	.word	0x40003800
 8005208:	40003400 	.word	0x40003400
 800520c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005214:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005224:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	f043 0204 	orr.w	r2, r3, #4
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff fdc0 	bl	8004dc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005240:	e000      	b.n	8005244 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005242:	bf00      	nop
}
 8005244:	bf00      	nop
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	1c99      	adds	r1, r3, #2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6251      	str	r1, [r2, #36]	; 0x24
 8005272:	881a      	ldrh	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d113      	bne.n	80052ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff ffc9 	bl	800524c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	1c99      	adds	r1, r3, #2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6251      	str	r1, [r2, #36]	; 0x24
 80052d6:	8819      	ldrh	r1, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1d      	ldr	r2, [pc, #116]	; (8005354 <I2SEx_TxISR_I2SExt+0x90>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d101      	bne.n	80052e6 <I2SEx_TxISR_I2SExt+0x22>
 80052e2:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <I2SEx_TxISR_I2SExt+0x94>)
 80052e4:	e001      	b.n	80052ea <I2SEx_TxISR_I2SExt+0x26>
 80052e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ea:	460a      	mov	r2, r1
 80052ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d121      	bne.n	800534a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a12      	ldr	r2, [pc, #72]	; (8005354 <I2SEx_TxISR_I2SExt+0x90>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d101      	bne.n	8005314 <I2SEx_TxISR_I2SExt+0x50>
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <I2SEx_TxISR_I2SExt+0x94>)
 8005312:	e001      	b.n	8005318 <I2SEx_TxISR_I2SExt+0x54>
 8005314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	490d      	ldr	r1, [pc, #52]	; (8005354 <I2SEx_TxISR_I2SExt+0x90>)
 8005320:	428b      	cmp	r3, r1
 8005322:	d101      	bne.n	8005328 <I2SEx_TxISR_I2SExt+0x64>
 8005324:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <I2SEx_TxISR_I2SExt+0x94>)
 8005326:	e001      	b.n	800532c <I2SEx_TxISR_I2SExt+0x68>
 8005328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800532c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005330:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d106      	bne.n	800534a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff ff81 	bl	800524c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40003800 	.word	0x40003800
 8005358:	40003400 	.word	0x40003400

0800535c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68d8      	ldr	r0, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	1c99      	adds	r1, r3, #2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005374:	b282      	uxth	r2, r0
 8005376:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d113      	bne.n	80053b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800539e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff ff4a 	bl	800524c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a20      	ldr	r2, [pc, #128]	; (8005450 <I2SEx_RxISR_I2SExt+0x90>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d101      	bne.n	80053d6 <I2SEx_RxISR_I2SExt+0x16>
 80053d2:	4b20      	ldr	r3, [pc, #128]	; (8005454 <I2SEx_RxISR_I2SExt+0x94>)
 80053d4:	e001      	b.n	80053da <I2SEx_RxISR_I2SExt+0x1a>
 80053d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053da:	68d8      	ldr	r0, [r3, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	1c99      	adds	r1, r3, #2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80053e6:	b282      	uxth	r2, r0
 80053e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d121      	bne.n	8005446 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a12      	ldr	r2, [pc, #72]	; (8005450 <I2SEx_RxISR_I2SExt+0x90>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d101      	bne.n	8005410 <I2SEx_RxISR_I2SExt+0x50>
 800540c:	4b11      	ldr	r3, [pc, #68]	; (8005454 <I2SEx_RxISR_I2SExt+0x94>)
 800540e:	e001      	b.n	8005414 <I2SEx_RxISR_I2SExt+0x54>
 8005410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	490d      	ldr	r1, [pc, #52]	; (8005450 <I2SEx_RxISR_I2SExt+0x90>)
 800541c:	428b      	cmp	r3, r1
 800541e:	d101      	bne.n	8005424 <I2SEx_RxISR_I2SExt+0x64>
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <I2SEx_RxISR_I2SExt+0x94>)
 8005422:	e001      	b.n	8005428 <I2SEx_RxISR_I2SExt+0x68>
 8005424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005428:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800542c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d106      	bne.n	8005446 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff ff03 	bl	800524c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40003800 	.word	0x40003800
 8005454:	40003400 	.word	0x40003400

08005458 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e267      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d075      	beq.n	8005562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005476:	4b88      	ldr	r3, [pc, #544]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b04      	cmp	r3, #4
 8005480:	d00c      	beq.n	800549c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005482:	4b85      	ldr	r3, [pc, #532]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800548a:	2b08      	cmp	r3, #8
 800548c:	d112      	bne.n	80054b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800548e:	4b82      	ldr	r3, [pc, #520]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549a:	d10b      	bne.n	80054b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549c:	4b7e      	ldr	r3, [pc, #504]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d05b      	beq.n	8005560 <HAL_RCC_OscConfig+0x108>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d157      	bne.n	8005560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e242      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d106      	bne.n	80054cc <HAL_RCC_OscConfig+0x74>
 80054be:	4b76      	ldr	r3, [pc, #472]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a75      	ldr	r2, [pc, #468]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	e01d      	b.n	8005508 <HAL_RCC_OscConfig+0xb0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054d4:	d10c      	bne.n	80054f0 <HAL_RCC_OscConfig+0x98>
 80054d6:	4b70      	ldr	r3, [pc, #448]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a6f      	ldr	r2, [pc, #444]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	4b6d      	ldr	r3, [pc, #436]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a6c      	ldr	r2, [pc, #432]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e00b      	b.n	8005508 <HAL_RCC_OscConfig+0xb0>
 80054f0:	4b69      	ldr	r3, [pc, #420]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a68      	ldr	r2, [pc, #416]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	4b66      	ldr	r3, [pc, #408]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a65      	ldr	r2, [pc, #404]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d013      	beq.n	8005538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005510:	f7fc fc94 	bl	8001e3c <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005518:	f7fc fc90 	bl	8001e3c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b64      	cmp	r3, #100	; 0x64
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e207      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552a:	4b5b      	ldr	r3, [pc, #364]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCC_OscConfig+0xc0>
 8005536:	e014      	b.n	8005562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005538:	f7fc fc80 	bl	8001e3c <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005540:	f7fc fc7c 	bl	8001e3c <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b64      	cmp	r3, #100	; 0x64
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e1f3      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005552:	4b51      	ldr	r3, [pc, #324]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0xe8>
 800555e:	e000      	b.n	8005562 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d063      	beq.n	8005636 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800556e:	4b4a      	ldr	r3, [pc, #296]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 030c 	and.w	r3, r3, #12
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800557a:	4b47      	ldr	r3, [pc, #284]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005582:	2b08      	cmp	r3, #8
 8005584:	d11c      	bne.n	80055c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005586:	4b44      	ldr	r3, [pc, #272]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d116      	bne.n	80055c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005592:	4b41      	ldr	r3, [pc, #260]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_RCC_OscConfig+0x152>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d001      	beq.n	80055aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e1c7      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055aa:	4b3b      	ldr	r3, [pc, #236]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4937      	ldr	r1, [pc, #220]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055be:	e03a      	b.n	8005636 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d020      	beq.n	800560a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055c8:	4b34      	ldr	r3, [pc, #208]	; (800569c <HAL_RCC_OscConfig+0x244>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ce:	f7fc fc35 	bl	8001e3c <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055d6:	f7fc fc31 	bl	8001e3c <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e1a8      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e8:	4b2b      	ldr	r3, [pc, #172]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f4:	4b28      	ldr	r3, [pc, #160]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	4925      	ldr	r1, [pc, #148]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005604:	4313      	orrs	r3, r2
 8005606:	600b      	str	r3, [r1, #0]
 8005608:	e015      	b.n	8005636 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800560a:	4b24      	ldr	r3, [pc, #144]	; (800569c <HAL_RCC_OscConfig+0x244>)
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fc fc14 	bl	8001e3c <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005618:	f7fc fc10 	bl	8001e3c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e187      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d036      	beq.n	80056b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d016      	beq.n	8005678 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800564a:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <HAL_RCC_OscConfig+0x248>)
 800564c:	2201      	movs	r2, #1
 800564e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005650:	f7fc fbf4 	bl	8001e3c <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005658:	f7fc fbf0 	bl	8001e3c <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e167      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800566a:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 800566c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f0      	beq.n	8005658 <HAL_RCC_OscConfig+0x200>
 8005676:	e01b      	b.n	80056b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005678:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_RCC_OscConfig+0x248>)
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567e:	f7fc fbdd 	bl	8001e3c <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005684:	e00e      	b.n	80056a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005686:	f7fc fbd9 	bl	8001e3c <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d907      	bls.n	80056a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e150      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
 8005698:	40023800 	.word	0x40023800
 800569c:	42470000 	.word	0x42470000
 80056a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a4:	4b88      	ldr	r3, [pc, #544]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80056a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1ea      	bne.n	8005686 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 8097 	beq.w	80057ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056be:	2300      	movs	r3, #0
 80056c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056c2:	4b81      	ldr	r3, [pc, #516]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10f      	bne.n	80056ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ce:	2300      	movs	r3, #0
 80056d0:	60bb      	str	r3, [r7, #8]
 80056d2:	4b7d      	ldr	r3, [pc, #500]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	4a7c      	ldr	r2, [pc, #496]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80056d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056dc:	6413      	str	r3, [r2, #64]	; 0x40
 80056de:	4b7a      	ldr	r3, [pc, #488]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	60bb      	str	r3, [r7, #8]
 80056e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ea:	2301      	movs	r3, #1
 80056ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ee:	4b77      	ldr	r3, [pc, #476]	; (80058cc <HAL_RCC_OscConfig+0x474>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d118      	bne.n	800572c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056fa:	4b74      	ldr	r3, [pc, #464]	; (80058cc <HAL_RCC_OscConfig+0x474>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a73      	ldr	r2, [pc, #460]	; (80058cc <HAL_RCC_OscConfig+0x474>)
 8005700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005706:	f7fc fb99 	bl	8001e3c <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800570e:	f7fc fb95 	bl	8001e3c <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e10c      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005720:	4b6a      	ldr	r3, [pc, #424]	; (80058cc <HAL_RCC_OscConfig+0x474>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d106      	bne.n	8005742 <HAL_RCC_OscConfig+0x2ea>
 8005734:	4b64      	ldr	r3, [pc, #400]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	4a63      	ldr	r2, [pc, #396]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	6713      	str	r3, [r2, #112]	; 0x70
 8005740:	e01c      	b.n	800577c <HAL_RCC_OscConfig+0x324>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b05      	cmp	r3, #5
 8005748:	d10c      	bne.n	8005764 <HAL_RCC_OscConfig+0x30c>
 800574a:	4b5f      	ldr	r3, [pc, #380]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	4a5e      	ldr	r2, [pc, #376]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005750:	f043 0304 	orr.w	r3, r3, #4
 8005754:	6713      	str	r3, [r2, #112]	; 0x70
 8005756:	4b5c      	ldr	r3, [pc, #368]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	4a5b      	ldr	r2, [pc, #364]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	6713      	str	r3, [r2, #112]	; 0x70
 8005762:	e00b      	b.n	800577c <HAL_RCC_OscConfig+0x324>
 8005764:	4b58      	ldr	r3, [pc, #352]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	4a57      	ldr	r2, [pc, #348]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800576a:	f023 0301 	bic.w	r3, r3, #1
 800576e:	6713      	str	r3, [r2, #112]	; 0x70
 8005770:	4b55      	ldr	r3, [pc, #340]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005774:	4a54      	ldr	r2, [pc, #336]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005776:	f023 0304 	bic.w	r3, r3, #4
 800577a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d015      	beq.n	80057b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005784:	f7fc fb5a 	bl	8001e3c <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578a:	e00a      	b.n	80057a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800578c:	f7fc fb56 	bl	8001e3c <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	f241 3288 	movw	r2, #5000	; 0x1388
 800579a:	4293      	cmp	r3, r2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e0cb      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a2:	4b49      	ldr	r3, [pc, #292]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80057a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0ee      	beq.n	800578c <HAL_RCC_OscConfig+0x334>
 80057ae:	e014      	b.n	80057da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b0:	f7fc fb44 	bl	8001e3c <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b6:	e00a      	b.n	80057ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b8:	f7fc fb40 	bl	8001e3c <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e0b5      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ce:	4b3e      	ldr	r3, [pc, #248]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1ee      	bne.n	80057b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d105      	bne.n	80057ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e0:	4b39      	ldr	r3, [pc, #228]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	4a38      	ldr	r2, [pc, #224]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80057e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80a1 	beq.w	8005938 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057f6:	4b34      	ldr	r3, [pc, #208]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d05c      	beq.n	80058bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d141      	bne.n	800588e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580a:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <HAL_RCC_OscConfig+0x478>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005810:	f7fc fb14 	bl	8001e3c <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005818:	f7fc fb10 	bl	8001e3c <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e087      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582a:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	019b      	lsls	r3, r3, #6
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	3b01      	subs	r3, #1
 8005850:	041b      	lsls	r3, r3, #16
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	061b      	lsls	r3, r3, #24
 800585a:	491b      	ldr	r1, [pc, #108]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800585c:	4313      	orrs	r3, r2
 800585e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <HAL_RCC_OscConfig+0x478>)
 8005862:	2201      	movs	r2, #1
 8005864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005866:	f7fc fae9 	bl	8001e3c <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800586e:	f7fc fae5 	bl	8001e3c <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e05c      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0f0      	beq.n	800586e <HAL_RCC_OscConfig+0x416>
 800588c:	e054      	b.n	8005938 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588e:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <HAL_RCC_OscConfig+0x478>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005894:	f7fc fad2 	bl	8001e3c <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589c:	f7fc face 	bl	8001e3c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e045      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ae:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0x444>
 80058ba:	e03d      	b.n	8005938 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d107      	bne.n	80058d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e038      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
 80058c8:	40023800 	.word	0x40023800
 80058cc:	40007000 	.word	0x40007000
 80058d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058d4:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <HAL_RCC_OscConfig+0x4ec>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d028      	beq.n	8005934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d121      	bne.n	8005934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d11a      	bne.n	8005934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005904:	4013      	ands	r3, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800590a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800590c:	4293      	cmp	r3, r2
 800590e:	d111      	bne.n	8005934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	3b01      	subs	r3, #1
 800591e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d107      	bne.n	8005934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d001      	beq.n	8005938 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	40023800 	.word	0x40023800

08005948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0cc      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800595c:	4b68      	ldr	r3, [pc, #416]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d90c      	bls.n	8005984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596a:	4b65      	ldr	r3, [pc, #404]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005972:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e0b8      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d020      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800599c:	4b59      	ldr	r3, [pc, #356]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	4a58      	ldr	r2, [pc, #352]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b4:	4b53      	ldr	r3, [pc, #332]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	4a52      	ldr	r2, [pc, #328]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c0:	4b50      	ldr	r3, [pc, #320]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	494d      	ldr	r1, [pc, #308]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d044      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e6:	4b47      	ldr	r3, [pc, #284]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d119      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e07f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d003      	beq.n	8005a06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d107      	bne.n	8005a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a06:	4b3f      	ldr	r3, [pc, #252]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e06f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a16:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e067      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a26:	4b37      	ldr	r3, [pc, #220]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f023 0203 	bic.w	r2, r3, #3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4934      	ldr	r1, [pc, #208]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a38:	f7fc fa00 	bl	8001e3c <HAL_GetTick>
 8005a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3e:	e00a      	b.n	8005a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a40:	f7fc f9fc 	bl	8001e3c <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e04f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a56:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 020c 	and.w	r2, r3, #12
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d1eb      	bne.n	8005a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a68:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d20c      	bcs.n	8005a90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a76:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7e:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d001      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e032      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a9c:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4916      	ldr	r1, [pc, #88]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aba:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	490e      	ldr	r1, [pc, #56]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ace:	f000 f821 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	490a      	ldr	r1, [pc, #40]	; (8005b08 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae0:	5ccb      	ldrb	r3, [r1, r3]
 8005ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae6:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aea:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fc f960 	bl	8001db4 <HAL_InitTick>

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40023c00 	.word	0x40023c00
 8005b04:	40023800 	.word	0x40023800
 8005b08:	08010504 	.word	0x08010504
 8005b0c:	20000000 	.word	0x20000000
 8005b10:	20000004 	.word	0x20000004

08005b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b18:	b094      	sub	sp, #80	; 0x50
 8005b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b20:	2300      	movs	r3, #0
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b24:	2300      	movs	r3, #0
 8005b26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b2c:	4b79      	ldr	r3, [pc, #484]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 030c 	and.w	r3, r3, #12
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d00d      	beq.n	8005b54 <HAL_RCC_GetSysClockFreq+0x40>
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	f200 80e1 	bhi.w	8005d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x34>
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d003      	beq.n	8005b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005b46:	e0db      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b48:	4b73      	ldr	r3, [pc, #460]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b4c:	e0db      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b4e:	4b73      	ldr	r3, [pc, #460]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x208>)
 8005b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b52:	e0d8      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b54:	4b6f      	ldr	r3, [pc, #444]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b5e:	4b6d      	ldr	r3, [pc, #436]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d063      	beq.n	8005c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b6a:	4b6a      	ldr	r3, [pc, #424]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	099b      	lsrs	r3, r3, #6
 8005b70:	2200      	movs	r2, #0
 8005b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b7e:	2300      	movs	r3, #0
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
 8005b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b86:	4622      	mov	r2, r4
 8005b88:	462b      	mov	r3, r5
 8005b8a:	f04f 0000 	mov.w	r0, #0
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	0159      	lsls	r1, r3, #5
 8005b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b98:	0150      	lsls	r0, r2, #5
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	1a51      	subs	r1, r2, r1
 8005ba2:	6139      	str	r1, [r7, #16]
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bb8:	4659      	mov	r1, fp
 8005bba:	018b      	lsls	r3, r1, #6
 8005bbc:	4651      	mov	r1, sl
 8005bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bc2:	4651      	mov	r1, sl
 8005bc4:	018a      	lsls	r2, r1, #6
 8005bc6:	4651      	mov	r1, sl
 8005bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8005bcc:	4659      	mov	r1, fp
 8005bce:	eb63 0901 	sbc.w	r9, r3, r1
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005be6:	4690      	mov	r8, r2
 8005be8:	4699      	mov	r9, r3
 8005bea:	4623      	mov	r3, r4
 8005bec:	eb18 0303 	adds.w	r3, r8, r3
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	462b      	mov	r3, r5
 8005bf4:	eb49 0303 	adc.w	r3, r9, r3
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c06:	4629      	mov	r1, r5
 8005c08:	024b      	lsls	r3, r1, #9
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c10:	4621      	mov	r1, r4
 8005c12:	024a      	lsls	r2, r1, #9
 8005c14:	4610      	mov	r0, r2
 8005c16:	4619      	mov	r1, r3
 8005c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c24:	f7fb f830 	bl	8000c88 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c30:	e058      	b.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c32:	4b38      	ldr	r3, [pc, #224]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	099b      	lsrs	r3, r3, #6
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c42:	623b      	str	r3, [r7, #32]
 8005c44:	2300      	movs	r3, #0
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
 8005c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	f04f 0000 	mov.w	r0, #0
 8005c54:	f04f 0100 	mov.w	r1, #0
 8005c58:	0159      	lsls	r1, r3, #5
 8005c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c5e:	0150      	lsls	r0, r2, #5
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4641      	mov	r1, r8
 8005c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c84:	ebb2 040a 	subs.w	r4, r2, sl
 8005c88:	eb63 050b 	sbc.w	r5, r3, fp
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	00eb      	lsls	r3, r5, #3
 8005c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c9a:	00e2      	lsls	r2, r4, #3
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	461d      	mov	r5, r3
 8005ca0:	4643      	mov	r3, r8
 8005ca2:	18e3      	adds	r3, r4, r3
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	eb45 0303 	adc.w	r3, r5, r3
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	f04f 0300 	mov.w	r3, #0
 8005cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cba:	4629      	mov	r1, r5
 8005cbc:	028b      	lsls	r3, r1, #10
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	028a      	lsls	r2, r1, #10
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cce:	2200      	movs	r2, #0
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	61fa      	str	r2, [r7, #28]
 8005cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cd8:	f7fa ffd6 	bl	8000c88 <__aeabi_uldivmod>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	3301      	adds	r3, #1
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cfe:	e002      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3750      	adds	r7, #80	; 0x50
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d12:	bf00      	nop
 8005d14:	40023800 	.word	0x40023800
 8005d18:	00f42400 	.word	0x00f42400
 8005d1c:	007a1200 	.word	0x007a1200

08005d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d26:	681b      	ldr	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20000000 	.word	0x20000000

08005d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d3c:	f7ff fff0 	bl	8005d20 <HAL_RCC_GetHCLKFreq>
 8005d40:	4602      	mov	r2, r0
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	0a9b      	lsrs	r3, r3, #10
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	4903      	ldr	r1, [pc, #12]	; (8005d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d4e:	5ccb      	ldrb	r3, [r1, r3]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	08010514 	.word	0x08010514

08005d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d64:	f7ff ffdc 	bl	8005d20 <HAL_RCC_GetHCLKFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	0b5b      	lsrs	r3, r3, #13
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4903      	ldr	r1, [pc, #12]	; (8005d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40023800 	.word	0x40023800
 8005d84:	08010514 	.word	0x08010514

08005d88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d035      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005db0:	4b62      	ldr	r3, [pc, #392]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005db6:	f7fc f841 	bl	8001e3c <HAL_GetTick>
 8005dba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dbe:	f7fc f83d 	bl	8001e3c <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e0b0      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dd0:	4b5b      	ldr	r3, [pc, #364]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f0      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	019a      	lsls	r2, r3, #6
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	071b      	lsls	r3, r3, #28
 8005de8:	4955      	ldr	r1, [pc, #340]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005df0:	4b52      	ldr	r3, [pc, #328]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005df6:	f7fc f821 	bl	8001e3c <HAL_GetTick>
 8005dfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dfe:	f7fc f81d 	bl	8001e3c <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e090      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e10:	4b4b      	ldr	r3, [pc, #300]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f0      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8083 	beq.w	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	4b44      	ldr	r3, [pc, #272]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	4a43      	ldr	r2, [pc, #268]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e38:	6413      	str	r3, [r2, #64]	; 0x40
 8005e3a:	4b41      	ldr	r3, [pc, #260]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e46:	4b3f      	ldr	r3, [pc, #252]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a3e      	ldr	r2, [pc, #248]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e52:	f7fb fff3 	bl	8001e3c <HAL_GetTick>
 8005e56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e58:	e008      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e5a:	f7fb ffef 	bl	8001e3c <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e062      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e6c:	4b35      	ldr	r3, [pc, #212]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e78:	4b31      	ldr	r3, [pc, #196]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d02f      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d028      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e96:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ea0:	4b29      	ldr	r3, [pc, #164]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ea6:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005eac:	4a24      	ldr	r2, [pc, #144]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005eb2:	4b23      	ldr	r3, [pc, #140]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d114      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ebe:	f7fb ffbd 	bl	8001e3c <HAL_GetTick>
 8005ec2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec4:	e00a      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ec6:	f7fb ffb9 	bl	8001e3c <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d901      	bls.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e02a      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005edc:	4b18      	ldr	r3, [pc, #96]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0ee      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ef4:	d10d      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005ef6:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0a:	490d      	ldr	r1, [pc, #52]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	608b      	str	r3, [r1, #8]
 8005f10:	e005      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	4a0a      	ldr	r2, [pc, #40]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f1c:	6093      	str	r3, [r2, #8]
 8005f1e:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f2a:	4905      	ldr	r1, [pc, #20]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	42470068 	.word	0x42470068
 8005f40:	40023800 	.word	0x40023800
 8005f44:	40007000 	.word	0x40007000
 8005f48:	42470e40 	.word	0x42470e40

08005f4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d13f      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005f6a:	4b24      	ldr	r3, [pc, #144]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d006      	beq.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f80:	d12f      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f82:	4b1f      	ldr	r3, [pc, #124]	; (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f84:	617b      	str	r3, [r7, #20]
          break;
 8005f86:	e02f      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f88:	4b1c      	ldr	r3, [pc, #112]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f94:	d108      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f96:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f9e:	4a19      	ldr	r2, [pc, #100]	; (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	e007      	b.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fa8:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb0:	4a15      	ldr	r2, [pc, #84]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005fb8:	4b10      	ldr	r3, [pc, #64]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fbe:	099b      	lsrs	r3, r3, #6
 8005fc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd2:	0f1b      	lsrs	r3, r3, #28
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fde:	617b      	str	r3, [r7, #20]
          break;
 8005fe0:	e002      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]
          break;
 8005fe6:	bf00      	nop
        }
      }
      break;
 8005fe8:	e000      	b.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8005fea:	bf00      	nop
    }
  }
  return frequency;
 8005fec:	697b      	ldr	r3, [r7, #20]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40023800 	.word	0x40023800
 8006000:	00bb8000 	.word	0x00bb8000
 8006004:	007a1200 	.word	0x007a1200
 8006008:	00f42400 	.word	0x00f42400

0800600c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e07b      	b.n	8006116 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	d108      	bne.n	8006038 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800602e:	d009      	beq.n	8006044 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	61da      	str	r2, [r3, #28]
 8006036:	e005      	b.n	8006044 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fb fbfa 	bl	8001858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c8:	ea42 0103 	orr.w	r1, r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	0c1b      	lsrs	r3, r3, #16
 80060e2:	f003 0104 	and.w	r1, r3, #4
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	f003 0210 	and.w	r2, r3, #16
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69da      	ldr	r2, [r3, #28]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006104:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e041      	b.n	80061b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7fb fbcf 	bl	80018e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2202      	movs	r2, #2
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3304      	adds	r3, #4
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f000 fad9 	bl	8006714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e041      	b.n	8006252 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f839 	bl	800625a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3304      	adds	r3, #4
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f000 fa8a 	bl	8006714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <HAL_TIM_PWM_Start+0x24>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	bf14      	ite	ne
 800628c:	2301      	movne	r3, #1
 800628e:	2300      	moveq	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	e022      	b.n	80062da <HAL_TIM_PWM_Start+0x6a>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b04      	cmp	r3, #4
 8006298:	d109      	bne.n	80062ae <HAL_TIM_PWM_Start+0x3e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	bf14      	ite	ne
 80062a6:	2301      	movne	r3, #1
 80062a8:	2300      	moveq	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	e015      	b.n	80062da <HAL_TIM_PWM_Start+0x6a>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d109      	bne.n	80062c8 <HAL_TIM_PWM_Start+0x58>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	bf14      	ite	ne
 80062c0:	2301      	movne	r3, #1
 80062c2:	2300      	moveq	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	e008      	b.n	80062da <HAL_TIM_PWM_Start+0x6a>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e07c      	b.n	80063dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x82>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f0:	e013      	b.n	800631a <HAL_TIM_PWM_Start+0xaa>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_PWM_Start+0x92>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006300:	e00b      	b.n	800631a <HAL_TIM_PWM_Start+0xaa>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b08      	cmp	r3, #8
 8006306:	d104      	bne.n	8006312 <HAL_TIM_PWM_Start+0xa2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006310:	e003      	b.n	800631a <HAL_TIM_PWM_Start+0xaa>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2201      	movs	r2, #1
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fcec 	bl	8006d00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a2d      	ldr	r2, [pc, #180]	; (80063e4 <HAL_TIM_PWM_Start+0x174>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <HAL_TIM_PWM_Start+0xcc>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a2c      	ldr	r2, [pc, #176]	; (80063e8 <HAL_TIM_PWM_Start+0x178>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d101      	bne.n	8006340 <HAL_TIM_PWM_Start+0xd0>
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <HAL_TIM_PWM_Start+0xd2>
 8006340:	2300      	movs	r3, #0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006354:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a22      	ldr	r2, [pc, #136]	; (80063e4 <HAL_TIM_PWM_Start+0x174>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d022      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x136>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d01d      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x136>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1f      	ldr	r2, [pc, #124]	; (80063ec <HAL_TIM_PWM_Start+0x17c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d018      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x136>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <HAL_TIM_PWM_Start+0x180>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d013      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x136>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1c      	ldr	r2, [pc, #112]	; (80063f4 <HAL_TIM_PWM_Start+0x184>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00e      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x136>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <HAL_TIM_PWM_Start+0x178>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d009      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x136>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <HAL_TIM_PWM_Start+0x188>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d004      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x136>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a16      	ldr	r2, [pc, #88]	; (80063fc <HAL_TIM_PWM_Start+0x18c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d111      	bne.n	80063ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b06      	cmp	r3, #6
 80063b6:	d010      	beq.n	80063da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0201 	orr.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c8:	e007      	b.n	80063da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0201 	orr.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40010400 	.word	0x40010400
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	40014000 	.word	0x40014000
 80063fc:	40001800 	.word	0x40001800

08006400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800641a:	2302      	movs	r3, #2
 800641c:	e0ae      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b0c      	cmp	r3, #12
 800642a:	f200 809f 	bhi.w	800656c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006469 	.word	0x08006469
 8006438:	0800656d 	.word	0x0800656d
 800643c:	0800656d 	.word	0x0800656d
 8006440:	0800656d 	.word	0x0800656d
 8006444:	080064a9 	.word	0x080064a9
 8006448:	0800656d 	.word	0x0800656d
 800644c:	0800656d 	.word	0x0800656d
 8006450:	0800656d 	.word	0x0800656d
 8006454:	080064eb 	.word	0x080064eb
 8006458:	0800656d 	.word	0x0800656d
 800645c:	0800656d 	.word	0x0800656d
 8006460:	0800656d 	.word	0x0800656d
 8006464:	0800652b 	.word	0x0800652b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 f9fc 	bl	800686c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0208 	orr.w	r2, r2, #8
 8006482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0204 	bic.w	r2, r2, #4
 8006492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6999      	ldr	r1, [r3, #24]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	619a      	str	r2, [r3, #24]
      break;
 80064a6:	e064      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68b9      	ldr	r1, [r7, #8]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fa4c 	bl	800694c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6999      	ldr	r1, [r3, #24]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	021a      	lsls	r2, r3, #8
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	619a      	str	r2, [r3, #24]
      break;
 80064e8:	e043      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 faa1 	bl	8006a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0208 	orr.w	r2, r2, #8
 8006504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0204 	bic.w	r2, r2, #4
 8006514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69d9      	ldr	r1, [r3, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	61da      	str	r2, [r3, #28]
      break;
 8006528:	e023      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 faf5 	bl	8006b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69d9      	ldr	r1, [r3, #28]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	021a      	lsls	r2, r3, #8
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	61da      	str	r2, [r3, #28]
      break;
 800656a:	e002      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	75fb      	strb	r3, [r7, #23]
      break;
 8006570:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_TIM_ConfigClockSource+0x1c>
 800659c:	2302      	movs	r3, #2
 800659e:	e0b4      	b.n	800670a <HAL_TIM_ConfigClockSource+0x186>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d8:	d03e      	beq.n	8006658 <HAL_TIM_ConfigClockSource+0xd4>
 80065da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065de:	f200 8087 	bhi.w	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e6:	f000 8086 	beq.w	80066f6 <HAL_TIM_ConfigClockSource+0x172>
 80065ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ee:	d87f      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 80065f0:	2b70      	cmp	r3, #112	; 0x70
 80065f2:	d01a      	beq.n	800662a <HAL_TIM_ConfigClockSource+0xa6>
 80065f4:	2b70      	cmp	r3, #112	; 0x70
 80065f6:	d87b      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 80065f8:	2b60      	cmp	r3, #96	; 0x60
 80065fa:	d050      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x11a>
 80065fc:	2b60      	cmp	r3, #96	; 0x60
 80065fe:	d877      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006600:	2b50      	cmp	r3, #80	; 0x50
 8006602:	d03c      	beq.n	800667e <HAL_TIM_ConfigClockSource+0xfa>
 8006604:	2b50      	cmp	r3, #80	; 0x50
 8006606:	d873      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006608:	2b40      	cmp	r3, #64	; 0x40
 800660a:	d058      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x13a>
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d86f      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006610:	2b30      	cmp	r3, #48	; 0x30
 8006612:	d064      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15a>
 8006614:	2b30      	cmp	r3, #48	; 0x30
 8006616:	d86b      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006618:	2b20      	cmp	r3, #32
 800661a:	d060      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15a>
 800661c:	2b20      	cmp	r3, #32
 800661e:	d867      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d05c      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15a>
 8006624:	2b10      	cmp	r3, #16
 8006626:	d05a      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15a>
 8006628:	e062      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800663a:	f000 fb41 	bl	8006cc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800664c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	609a      	str	r2, [r3, #8]
      break;
 8006656:	e04f      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006668:	f000 fb2a 	bl	8006cc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800667a:	609a      	str	r2, [r3, #8]
      break;
 800667c:	e03c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800668a:	461a      	mov	r2, r3
 800668c:	f000 fa9e 	bl	8006bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2150      	movs	r1, #80	; 0x50
 8006696:	4618      	mov	r0, r3
 8006698:	f000 faf7 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 800669c:	e02c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066aa:	461a      	mov	r2, r3
 80066ac:	f000 fabd 	bl	8006c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2160      	movs	r1, #96	; 0x60
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fae7 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 80066bc:	e01c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ca:	461a      	mov	r2, r3
 80066cc:	f000 fa7e 	bl	8006bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2140      	movs	r1, #64	; 0x40
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fad7 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 80066dc:	e00c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f000 face 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 80066ee:	e003      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
      break;
 80066f4:	e000      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a46      	ldr	r2, [pc, #280]	; (8006840 <TIM_Base_SetConfig+0x12c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d013      	beq.n	8006754 <TIM_Base_SetConfig+0x40>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006732:	d00f      	beq.n	8006754 <TIM_Base_SetConfig+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a43      	ldr	r2, [pc, #268]	; (8006844 <TIM_Base_SetConfig+0x130>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00b      	beq.n	8006754 <TIM_Base_SetConfig+0x40>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a42      	ldr	r2, [pc, #264]	; (8006848 <TIM_Base_SetConfig+0x134>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d007      	beq.n	8006754 <TIM_Base_SetConfig+0x40>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a41      	ldr	r2, [pc, #260]	; (800684c <TIM_Base_SetConfig+0x138>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_Base_SetConfig+0x40>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a40      	ldr	r2, [pc, #256]	; (8006850 <TIM_Base_SetConfig+0x13c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d108      	bne.n	8006766 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a35      	ldr	r2, [pc, #212]	; (8006840 <TIM_Base_SetConfig+0x12c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d02b      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006774:	d027      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a32      	ldr	r2, [pc, #200]	; (8006844 <TIM_Base_SetConfig+0x130>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d023      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a31      	ldr	r2, [pc, #196]	; (8006848 <TIM_Base_SetConfig+0x134>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01f      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a30      	ldr	r2, [pc, #192]	; (800684c <TIM_Base_SetConfig+0x138>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d01b      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2f      	ldr	r2, [pc, #188]	; (8006850 <TIM_Base_SetConfig+0x13c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d017      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a2e      	ldr	r2, [pc, #184]	; (8006854 <TIM_Base_SetConfig+0x140>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a2d      	ldr	r2, [pc, #180]	; (8006858 <TIM_Base_SetConfig+0x144>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00f      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a2c      	ldr	r2, [pc, #176]	; (800685c <TIM_Base_SetConfig+0x148>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00b      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a2b      	ldr	r2, [pc, #172]	; (8006860 <TIM_Base_SetConfig+0x14c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d007      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a2a      	ldr	r2, [pc, #168]	; (8006864 <TIM_Base_SetConfig+0x150>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d003      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a29      	ldr	r2, [pc, #164]	; (8006868 <TIM_Base_SetConfig+0x154>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d108      	bne.n	80067d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a10      	ldr	r2, [pc, #64]	; (8006840 <TIM_Base_SetConfig+0x12c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_Base_SetConfig+0xf8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a12      	ldr	r2, [pc, #72]	; (8006850 <TIM_Base_SetConfig+0x13c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d103      	bne.n	8006814 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b01      	cmp	r3, #1
 8006824:	d105      	bne.n	8006832 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f023 0201 	bic.w	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	611a      	str	r2, [r3, #16]
  }
}
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40010000 	.word	0x40010000
 8006844:	40000400 	.word	0x40000400
 8006848:	40000800 	.word	0x40000800
 800684c:	40000c00 	.word	0x40000c00
 8006850:	40010400 	.word	0x40010400
 8006854:	40014000 	.word	0x40014000
 8006858:	40014400 	.word	0x40014400
 800685c:	40014800 	.word	0x40014800
 8006860:	40001800 	.word	0x40001800
 8006864:	40001c00 	.word	0x40001c00
 8006868:	40002000 	.word	0x40002000

0800686c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f023 0201 	bic.w	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f023 0302 	bic.w	r3, r3, #2
 80068b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a20      	ldr	r2, [pc, #128]	; (8006944 <TIM_OC1_SetConfig+0xd8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_OC1_SetConfig+0x64>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a1f      	ldr	r2, [pc, #124]	; (8006948 <TIM_OC1_SetConfig+0xdc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10c      	bne.n	80068ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f023 0308 	bic.w	r3, r3, #8
 80068d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f023 0304 	bic.w	r3, r3, #4
 80068e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a15      	ldr	r2, [pc, #84]	; (8006944 <TIM_OC1_SetConfig+0xd8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d003      	beq.n	80068fa <TIM_OC1_SetConfig+0x8e>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a14      	ldr	r2, [pc, #80]	; (8006948 <TIM_OC1_SetConfig+0xdc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d111      	bne.n	800691e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40010000 	.word	0x40010000
 8006948:	40010400 	.word	0x40010400

0800694c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f023 0210 	bic.w	r2, r3, #16
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f023 0320 	bic.w	r3, r3, #32
 8006996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a22      	ldr	r2, [pc, #136]	; (8006a30 <TIM_OC2_SetConfig+0xe4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d003      	beq.n	80069b4 <TIM_OC2_SetConfig+0x68>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a21      	ldr	r2, [pc, #132]	; (8006a34 <TIM_OC2_SetConfig+0xe8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d10d      	bne.n	80069d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a17      	ldr	r2, [pc, #92]	; (8006a30 <TIM_OC2_SetConfig+0xe4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_OC2_SetConfig+0x94>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a16      	ldr	r2, [pc, #88]	; (8006a34 <TIM_OC2_SetConfig+0xe8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d113      	bne.n	8006a08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40010400 	.word	0x40010400

08006a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0303 	bic.w	r3, r3, #3
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a21      	ldr	r2, [pc, #132]	; (8006b18 <TIM_OC3_SetConfig+0xe0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d003      	beq.n	8006a9e <TIM_OC3_SetConfig+0x66>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a20      	ldr	r2, [pc, #128]	; (8006b1c <TIM_OC3_SetConfig+0xe4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d10d      	bne.n	8006aba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <TIM_OC3_SetConfig+0xe0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d003      	beq.n	8006aca <TIM_OC3_SetConfig+0x92>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <TIM_OC3_SetConfig+0xe4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d113      	bne.n	8006af2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	621a      	str	r2, [r3, #32]
}
 8006b0c:	bf00      	nop
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	40010000 	.word	0x40010000
 8006b1c:	40010400 	.word	0x40010400

08006b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	031b      	lsls	r3, r3, #12
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <TIM_OC4_SetConfig+0xa4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d003      	beq.n	8006b88 <TIM_OC4_SetConfig+0x68>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a11      	ldr	r2, [pc, #68]	; (8006bc8 <TIM_OC4_SetConfig+0xa8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d109      	bne.n	8006b9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	019b      	lsls	r3, r3, #6
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40010000 	.word	0x40010000
 8006bc8:	40010400 	.word	0x40010400

08006bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f023 0201 	bic.w	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f023 030a 	bic.w	r3, r3, #10
 8006c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b087      	sub	sp, #28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f023 0210 	bic.w	r2, r3, #16
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	031b      	lsls	r3, r3, #12
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f043 0307 	orr.w	r3, r3, #7
 8006cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	609a      	str	r2, [r3, #8]
}
 8006cb4:	bf00      	nop
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	021a      	lsls	r2, r3, #8
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	609a      	str	r2, [r3, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f003 031f 	and.w	r3, r3, #31
 8006d12:	2201      	movs	r2, #1
 8006d14:	fa02 f303 	lsl.w	r3, r2, r3
 8006d18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1a      	ldr	r2, [r3, #32]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	43db      	mvns	r3, r3
 8006d22:	401a      	ands	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a1a      	ldr	r2, [r3, #32]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f003 031f 	and.w	r3, r3, #31
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	fa01 f303 	lsl.w	r3, r1, r3
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	621a      	str	r2, [r3, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
	...

08006d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e05a      	b.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a21      	ldr	r2, [pc, #132]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d022      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db0:	d01d      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1d      	ldr	r2, [pc, #116]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d018      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a1b      	ldr	r2, [pc, #108]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d013      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a1a      	ldr	r2, [pc, #104]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00e      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a18      	ldr	r2, [pc, #96]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d009      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d004      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10c      	bne.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40010000 	.word	0x40010000
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40000800 	.word	0x40000800
 8006e34:	40000c00 	.word	0x40000c00
 8006e38:	40010400 	.word	0x40010400
 8006e3c:	40014000 	.word	0x40014000
 8006e40:	40001800 	.word	0x40001800

08006e44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e03d      	b.n	8006edc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e042      	b.n	8006f80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fa fd46 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2224      	movs	r2, #36	; 0x24
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 ff4f 	bl	8007dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695a      	ldr	r2, [r3, #20]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08a      	sub	sp, #40	; 0x28
 8006f8c:	af02      	add	r7, sp, #8
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d175      	bne.n	8007094 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_UART_Transmit+0x2c>
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e06e      	b.n	8007096 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2221      	movs	r2, #33	; 0x21
 8006fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fc6:	f7fa ff39 	bl	8001e3c <HAL_GetTick>
 8006fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	88fa      	ldrh	r2, [r7, #6]
 8006fd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	88fa      	ldrh	r2, [r7, #6]
 8006fd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe0:	d108      	bne.n	8006ff4 <HAL_UART_Transmit+0x6c>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d104      	bne.n	8006ff4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e003      	b.n	8006ffc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ffc:	e02e      	b.n	800705c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2200      	movs	r2, #0
 8007006:	2180      	movs	r1, #128	; 0x80
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 fc27 	bl	800785c <UART_WaitOnFlagUntilTimeout>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e03a      	b.n	8007096 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10b      	bne.n	800703e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007034:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	3302      	adds	r3, #2
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	e007      	b.n	800704e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3301      	adds	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1cb      	bne.n	8006ffe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2200      	movs	r2, #0
 800706e:	2140      	movs	r1, #64	; 0x40
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 fbf3 	bl	800785c <UART_WaitOnFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e006      	b.n	8007096 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	e000      	b.n	8007096 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007094:	2302      	movs	r3, #2
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	4613      	mov	r3, r2
 80070aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d112      	bne.n	80070de <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <HAL_UART_Receive_DMA+0x26>
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e00b      	b.n	80070e0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	461a      	mov	r2, r3
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fc1b 	bl	8007910 <UART_Start_Receive_DMA>
 80070da:	4603      	mov	r3, r0
 80070dc:	e000      	b.n	80070e0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80070de:	2302      	movs	r3, #2
  }
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b0ba      	sub	sp, #232	; 0xe8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800710e:	2300      	movs	r3, #0
 8007110:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007114:	2300      	movs	r3, #0
 8007116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10f      	bne.n	800714e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <HAL_UART_IRQHandler+0x66>
 800713a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713e:	f003 0320 	and.w	r3, r3, #32
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fd83 	bl	8007c52 <UART_Receive_IT>
      return;
 800714c:	e25b      	b.n	8007606 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800714e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80de 	beq.w	8007314 <HAL_UART_IRQHandler+0x22c>
 8007158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	d106      	bne.n	8007172 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007168:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80d1 	beq.w	8007314 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <HAL_UART_IRQHandler+0xae>
 800717e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718e:	f043 0201 	orr.w	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <HAL_UART_IRQHandler+0xd2>
 80071a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	f043 0202 	orr.w	r2, r3, #2
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <HAL_UART_IRQHandler+0xf6>
 80071c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d6:	f043 0204 	orr.w	r2, r3, #4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e2:	f003 0308 	and.w	r3, r3, #8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d011      	beq.n	800720e <HAL_UART_IRQHandler+0x126>
 80071ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d105      	bne.n	8007202 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	f043 0208 	orr.w	r2, r3, #8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 81f2 	beq.w	80075fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	d008      	beq.n	8007236 <HAL_UART_IRQHandler+0x14e>
 8007224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fd0e 	bl	8007c52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	bf0c      	ite	eq
 8007244:	2301      	moveq	r3, #1
 8007246:	2300      	movne	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d103      	bne.n	8007262 <HAL_UART_IRQHandler+0x17a>
 800725a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800725e:	2b00      	cmp	r3, #0
 8007260:	d04f      	beq.n	8007302 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fc16 	bl	8007a94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007272:	2b40      	cmp	r3, #64	; 0x40
 8007274:	d141      	bne.n	80072fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3314      	adds	r3, #20
 800727c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800728c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3314      	adds	r3, #20
 800729e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1d9      	bne.n	8007276 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d013      	beq.n	80072f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ce:	4a7e      	ldr	r2, [pc, #504]	; (80074c8 <HAL_UART_IRQHandler+0x3e0>)
 80072d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fa ffb9 	bl	800224e <HAL_DMA_Abort_IT>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d016      	beq.n	8007310 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f0:	e00e      	b.n	8007310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f99e 	bl	8007634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f8:	e00a      	b.n	8007310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f99a 	bl	8007634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007300:	e006      	b.n	8007310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f996 	bl	8007634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800730e:	e175      	b.n	80075fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007310:	bf00      	nop
    return;
 8007312:	e173      	b.n	80075fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007318:	2b01      	cmp	r3, #1
 800731a:	f040 814f 	bne.w	80075bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800731e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007322:	f003 0310 	and.w	r3, r3, #16
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8148 	beq.w	80075bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007330:	f003 0310 	and.w	r3, r3, #16
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8141 	beq.w	80075bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800733a:	2300      	movs	r3, #0
 800733c:	60bb      	str	r3, [r7, #8]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	60bb      	str	r3, [r7, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	60bb      	str	r3, [r7, #8]
 800734e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	f040 80b6 	bne.w	80074cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800736c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 8145 	beq.w	8007600 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800737a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800737e:	429a      	cmp	r2, r3
 8007380:	f080 813e 	bcs.w	8007600 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800738a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007396:	f000 8088 	beq.w	80074aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	330c      	adds	r3, #12
 80073a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	330c      	adds	r3, #12
 80073c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1d9      	bne.n	800739a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3314      	adds	r3, #20
 80073ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073f8:	f023 0301 	bic.w	r3, r3, #1
 80073fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3314      	adds	r3, #20
 8007406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800740a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800740e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007412:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800741c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e1      	bne.n	80073e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3314      	adds	r3, #20
 8007428:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3314      	adds	r3, #20
 8007442:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007446:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007448:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800744c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e3      	bne.n	8007422 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	330c      	adds	r3, #12
 800746e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800747a:	f023 0310 	bic.w	r3, r3, #16
 800747e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	330c      	adds	r3, #12
 8007488:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800748c:	65ba      	str	r2, [r7, #88]	; 0x58
 800748e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007492:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800749a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e3      	bne.n	8007468 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fa fe62 	bl	800216e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	b29b      	uxth	r3, r3
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f8c1 	bl	8007648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074c6:	e09b      	b.n	8007600 <HAL_UART_IRQHandler+0x518>
 80074c8:	08007b5b 	.word	0x08007b5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 808e 	beq.w	8007604 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80074e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8089 	beq.w	8007604 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	330c      	adds	r3, #12
 80074f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	330c      	adds	r3, #12
 8007512:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007516:	647a      	str	r2, [r7, #68]	; 0x44
 8007518:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800751c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e3      	bne.n	80074f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3314      	adds	r3, #20
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	623b      	str	r3, [r7, #32]
   return(result);
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	f023 0301 	bic.w	r3, r3, #1
 8007540:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3314      	adds	r3, #20
 800754a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800754e:	633a      	str	r2, [r7, #48]	; 0x30
 8007550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e3      	bne.n	800752a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0310 	bic.w	r3, r3, #16
 8007586:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007594:	61fa      	str	r2, [r7, #28]
 8007596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	69b9      	ldr	r1, [r7, #24]
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	617b      	str	r3, [r7, #20]
   return(result);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e3      	bne.n	8007570 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f847 	bl	8007648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075ba:	e023      	b.n	8007604 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d009      	beq.n	80075dc <HAL_UART_IRQHandler+0x4f4>
 80075c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fad4 	bl	8007b82 <UART_Transmit_IT>
    return;
 80075da:	e014      	b.n	8007606 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00e      	beq.n	8007606 <HAL_UART_IRQHandler+0x51e>
 80075e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d008      	beq.n	8007606 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fb14 	bl	8007c22 <UART_EndTransmit_IT>
    return;
 80075fa:	e004      	b.n	8007606 <HAL_UART_IRQHandler+0x51e>
    return;
 80075fc:	bf00      	nop
 80075fe:	e002      	b.n	8007606 <HAL_UART_IRQHandler+0x51e>
      return;
 8007600:	bf00      	nop
 8007602:	e000      	b.n	8007606 <HAL_UART_IRQHandler+0x51e>
      return;
 8007604:	bf00      	nop
  }
}
 8007606:	37e8      	adds	r7, #232	; 0xe8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b09c      	sub	sp, #112	; 0x70
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007678:	2b00      	cmp	r3, #0
 800767a:	d172      	bne.n	8007762 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800767c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767e:	2200      	movs	r2, #0
 8007680:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	330c      	adds	r3, #12
 8007688:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007698:	66bb      	str	r3, [r7, #104]	; 0x68
 800769a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	330c      	adds	r3, #12
 80076a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80076a4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e5      	bne.n	8007682 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3314      	adds	r3, #20
 80076bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	667b      	str	r3, [r7, #100]	; 0x64
 80076ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3314      	adds	r3, #20
 80076d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076d6:	647a      	str	r2, [r7, #68]	; 0x44
 80076d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e5      	bne.n	80076b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3314      	adds	r3, #20
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	623b      	str	r3, [r7, #32]
   return(result);
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007700:	663b      	str	r3, [r7, #96]	; 0x60
 8007702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3314      	adds	r3, #20
 8007708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800770a:	633a      	str	r2, [r7, #48]	; 0x30
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e5      	bne.n	80076ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800771e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007720:	2220      	movs	r2, #32
 8007722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	2b01      	cmp	r3, #1
 800772c:	d119      	bne.n	8007762 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	60fb      	str	r3, [r7, #12]
   return(result);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f023 0310 	bic.w	r3, r3, #16
 8007744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330c      	adds	r3, #12
 800774c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800774e:	61fa      	str	r2, [r7, #28]
 8007750:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	69b9      	ldr	r1, [r7, #24]
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	617b      	str	r3, [r7, #20]
   return(result);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e5      	bne.n	800772e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007764:	2200      	movs	r2, #0
 8007766:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	2b01      	cmp	r3, #1
 800776e:	d106      	bne.n	800777e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007772:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007774:	4619      	mov	r1, r3
 8007776:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007778:	f7ff ff66 	bl	8007648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800777c:	e002      	b.n	8007784 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800777e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007780:	f7f9 fc36 	bl	8000ff0 <HAL_UART_RxCpltCallback>
}
 8007784:	bf00      	nop
 8007786:	3770      	adds	r7, #112	; 0x70
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007798:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2201      	movs	r2, #1
 800779e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d108      	bne.n	80077ba <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077ac:	085b      	lsrs	r3, r3, #1
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	4619      	mov	r1, r3
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff ff48 	bl	8007648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077b8:	e002      	b.n	80077c0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff ff30 	bl	8007620 <HAL_UART_RxHalfCpltCallback>
}
 80077c0:	bf00      	nop
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e4:	2b80      	cmp	r3, #128	; 0x80
 80077e6:	bf0c      	ite	eq
 80077e8:	2301      	moveq	r3, #1
 80077ea:	2300      	movne	r3, #0
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b21      	cmp	r3, #33	; 0x21
 80077fa:	d108      	bne.n	800780e <UART_DMAError+0x46>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d005      	beq.n	800780e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2200      	movs	r2, #0
 8007806:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007808:	68b8      	ldr	r0, [r7, #8]
 800780a:	f000 f91b 	bl	8007a44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007818:	2b40      	cmp	r3, #64	; 0x40
 800781a:	bf0c      	ite	eq
 800781c:	2301      	moveq	r3, #1
 800781e:	2300      	movne	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b22      	cmp	r3, #34	; 0x22
 800782e:	d108      	bne.n	8007842 <UART_DMAError+0x7a>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2200      	movs	r2, #0
 800783a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800783c:	68b8      	ldr	r0, [r7, #8]
 800783e:	f000 f929 	bl	8007a94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007846:	f043 0210 	orr.w	r2, r3, #16
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800784e:	68b8      	ldr	r0, [r7, #8]
 8007850:	f7ff fef0 	bl	8007634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007854:	bf00      	nop
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	4613      	mov	r3, r2
 800786a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800786c:	e03b      	b.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d037      	beq.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007876:	f7fa fae1 	bl	8001e3c <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	6a3a      	ldr	r2, [r7, #32]
 8007882:	429a      	cmp	r2, r3
 8007884:	d302      	bcc.n	800788c <UART_WaitOnFlagUntilTimeout+0x30>
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e03a      	b.n	8007906 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d023      	beq.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b80      	cmp	r3, #128	; 0x80
 80078a2:	d020      	beq.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d01d      	beq.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d116      	bne.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80078b8:	2300      	movs	r3, #0
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 f8e0 	bl	8007a94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2208      	movs	r2, #8
 80078d8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e00f      	b.n	8007906 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4013      	ands	r3, r2
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	bf0c      	ite	eq
 80078f6:	2301      	moveq	r3, #1
 80078f8:	2300      	movne	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	429a      	cmp	r2, r3
 8007902:	d0b4      	beq.n	800786e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b098      	sub	sp, #96	; 0x60
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2222      	movs	r2, #34	; 0x22
 8007934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793c:	4a3e      	ldr	r2, [pc, #248]	; (8007a38 <UART_Start_Receive_DMA+0x128>)
 800793e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007944:	4a3d      	ldr	r2, [pc, #244]	; (8007a3c <UART_Start_Receive_DMA+0x12c>)
 8007946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794c:	4a3c      	ldr	r2, [pc, #240]	; (8007a40 <UART_Start_Receive_DMA+0x130>)
 800794e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007954:	2200      	movs	r2, #0
 8007956:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007958:	f107 0308 	add.w	r3, r7, #8
 800795c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3304      	adds	r3, #4
 8007968:	4619      	mov	r1, r3
 800796a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	88fb      	ldrh	r3, [r7, #6]
 8007970:	f7fa fba5 	bl	80020be <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007974:	2300      	movs	r3, #0
 8007976:	613b      	str	r3, [r7, #16]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d019      	beq.n	80079c6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	330c      	adds	r3, #12
 8007998:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	330c      	adds	r3, #12
 80079b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80079b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80079b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80079c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e5      	bne.n	8007992 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3314      	adds	r3, #20
 80079cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	f043 0301 	orr.w	r3, r3, #1
 80079dc:	657b      	str	r3, [r7, #84]	; 0x54
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3314      	adds	r3, #20
 80079e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e5      	bne.n	80079c6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3314      	adds	r3, #20
 8007a00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	617b      	str	r3, [r7, #20]
   return(result);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a10:	653b      	str	r3, [r7, #80]	; 0x50
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3314      	adds	r3, #20
 8007a18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a1a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6a39      	ldr	r1, [r7, #32]
 8007a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e5      	bne.n	80079fa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3760      	adds	r7, #96	; 0x60
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	08007661 	.word	0x08007661
 8007a3c:	0800778d 	.word	0x0800778d
 8007a40:	080077c9 	.word	0x080077c9

08007a44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b089      	sub	sp, #36	; 0x24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	330c      	adds	r3, #12
 8007a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a62:	61fb      	str	r3, [r7, #28]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	330c      	adds	r3, #12
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	61ba      	str	r2, [r7, #24]
 8007a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6979      	ldr	r1, [r7, #20]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	613b      	str	r3, [r7, #16]
   return(result);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e5      	bne.n	8007a4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007a88:	bf00      	nop
 8007a8a:	3724      	adds	r7, #36	; 0x24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b095      	sub	sp, #84	; 0x54
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	330c      	adds	r3, #12
 8007aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	330c      	adds	r3, #12
 8007aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007abc:	643a      	str	r2, [r7, #64]	; 0x40
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e5      	bne.n	8007a9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3314      	adds	r3, #20
 8007ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3314      	adds	r3, #20
 8007aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d119      	bne.n	8007b40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	330c      	adds	r3, #12
 8007b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	e853 3f00 	ldrex	r3, [r3]
 8007b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f023 0310 	bic.w	r3, r3, #16
 8007b22:	647b      	str	r3, [r7, #68]	; 0x44
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	330c      	adds	r3, #12
 8007b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b2c:	61ba      	str	r2, [r7, #24]
 8007b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	6979      	ldr	r1, [r7, #20]
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	613b      	str	r3, [r7, #16]
   return(result);
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e5      	bne.n	8007b0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b4e:	bf00      	nop
 8007b50:	3754      	adds	r7, #84	; 0x54
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff fd5d 	bl	8007634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b7a:	bf00      	nop
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b085      	sub	sp, #20
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b21      	cmp	r3, #33	; 0x21
 8007b94:	d13e      	bne.n	8007c14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9e:	d114      	bne.n	8007bca <UART_Transmit_IT+0x48>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d110      	bne.n	8007bca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	1c9a      	adds	r2, r3, #2
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	621a      	str	r2, [r3, #32]
 8007bc8:	e008      	b.n	8007bdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	1c59      	adds	r1, r3, #1
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6211      	str	r1, [r2, #32]
 8007bd4:	781a      	ldrb	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4619      	mov	r1, r3
 8007bea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10f      	bne.n	8007c10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	e000      	b.n	8007c16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c14:	2302      	movs	r3, #2
  }
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff fce2 	bl	800760c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b08c      	sub	sp, #48	; 0x30
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b22      	cmp	r3, #34	; 0x22
 8007c64:	f040 80ae 	bne.w	8007dc4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c70:	d117      	bne.n	8007ca2 <UART_Receive_IT+0x50>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d113      	bne.n	8007ca2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	1c9a      	adds	r2, r3, #2
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8007ca0:	e026      	b.n	8007cf0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb4:	d007      	beq.n	8007cc6 <UART_Receive_IT+0x74>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <UART_Receive_IT+0x82>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e008      	b.n	8007ce6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d15d      	bne.n	8007dc0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0220 	bic.w	r2, r2, #32
 8007d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	695a      	ldr	r2, [r3, #20]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0201 	bic.w	r2, r2, #1
 8007d32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d135      	bne.n	8007db6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	330c      	adds	r3, #12
 8007d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f023 0310 	bic.w	r3, r3, #16
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d70:	623a      	str	r2, [r7, #32]
 8007d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	69f9      	ldr	r1, [r7, #28]
 8007d76:	6a3a      	ldr	r2, [r7, #32]
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e5      	bne.n	8007d50 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0310 	and.w	r3, r3, #16
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d10a      	bne.n	8007da8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff fc4a 	bl	8007648 <HAL_UARTEx_RxEventCallback>
 8007db4:	e002      	b.n	8007dbc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7f9 f91a 	bl	8000ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e002      	b.n	8007dc6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	e000      	b.n	8007dc6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007dc4:	2302      	movs	r3, #2
  }
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3730      	adds	r7, #48	; 0x30
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dd4:	b0c0      	sub	sp, #256	; 0x100
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dec:	68d9      	ldr	r1, [r3, #12]
 8007dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	ea40 0301 	orr.w	r3, r0, r1
 8007df8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	431a      	orrs	r2, r3
 8007e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e28:	f021 010c 	bic.w	r1, r1, #12
 8007e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e36:	430b      	orrs	r3, r1
 8007e38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e4a:	6999      	ldr	r1, [r3, #24]
 8007e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	ea40 0301 	orr.w	r3, r0, r1
 8007e56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b8f      	ldr	r3, [pc, #572]	; (800809c <UART_SetConfig+0x2cc>)
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d005      	beq.n	8007e70 <UART_SetConfig+0xa0>
 8007e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	4b8d      	ldr	r3, [pc, #564]	; (80080a0 <UART_SetConfig+0x2d0>)
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d104      	bne.n	8007e7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e70:	f7fd ff76 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 8007e74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e78:	e003      	b.n	8007e82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e7a:	f7fd ff5d 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8007e7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e8c:	f040 810c 	bne.w	80080a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	462b      	mov	r3, r5
 8007ea6:	1891      	adds	r1, r2, r2
 8007ea8:	65b9      	str	r1, [r7, #88]	; 0x58
 8007eaa:	415b      	adcs	r3, r3
 8007eac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	eb12 0801 	adds.w	r8, r2, r1
 8007eb8:	4629      	mov	r1, r5
 8007eba:	eb43 0901 	adc.w	r9, r3, r1
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ed2:	4690      	mov	r8, r2
 8007ed4:	4699      	mov	r9, r3
 8007ed6:	4623      	mov	r3, r4
 8007ed8:	eb18 0303 	adds.w	r3, r8, r3
 8007edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ee0:	462b      	mov	r3, r5
 8007ee2:	eb49 0303 	adc.w	r3, r9, r3
 8007ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ef6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007efa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007efe:	460b      	mov	r3, r1
 8007f00:	18db      	adds	r3, r3, r3
 8007f02:	653b      	str	r3, [r7, #80]	; 0x50
 8007f04:	4613      	mov	r3, r2
 8007f06:	eb42 0303 	adc.w	r3, r2, r3
 8007f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f14:	f7f8 feb8 	bl	8000c88 <__aeabi_uldivmod>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4b61      	ldr	r3, [pc, #388]	; (80080a4 <UART_SetConfig+0x2d4>)
 8007f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	011c      	lsls	r4, r3, #4
 8007f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007f38:	4642      	mov	r2, r8
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	1891      	adds	r1, r2, r2
 8007f3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f40:	415b      	adcs	r3, r3
 8007f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f48:	4641      	mov	r1, r8
 8007f4a:	eb12 0a01 	adds.w	sl, r2, r1
 8007f4e:	4649      	mov	r1, r9
 8007f50:	eb43 0b01 	adc.w	fp, r3, r1
 8007f54:	f04f 0200 	mov.w	r2, #0
 8007f58:	f04f 0300 	mov.w	r3, #0
 8007f5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f68:	4692      	mov	sl, r2
 8007f6a:	469b      	mov	fp, r3
 8007f6c:	4643      	mov	r3, r8
 8007f6e:	eb1a 0303 	adds.w	r3, sl, r3
 8007f72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f76:	464b      	mov	r3, r9
 8007f78:	eb4b 0303 	adc.w	r3, fp, r3
 8007f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f94:	460b      	mov	r3, r1
 8007f96:	18db      	adds	r3, r3, r3
 8007f98:	643b      	str	r3, [r7, #64]	; 0x40
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	eb42 0303 	adc.w	r3, r2, r3
 8007fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8007fa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007faa:	f7f8 fe6d 	bl	8000c88 <__aeabi_uldivmod>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4b3b      	ldr	r3, [pc, #236]	; (80080a4 <UART_SetConfig+0x2d4>)
 8007fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8007fba:	095b      	lsrs	r3, r3, #5
 8007fbc:	2264      	movs	r2, #100	; 0x64
 8007fbe:	fb02 f303 	mul.w	r3, r2, r3
 8007fc2:	1acb      	subs	r3, r1, r3
 8007fc4:	00db      	lsls	r3, r3, #3
 8007fc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007fca:	4b36      	ldr	r3, [pc, #216]	; (80080a4 <UART_SetConfig+0x2d4>)
 8007fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd0:	095b      	lsrs	r3, r3, #5
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fd8:	441c      	add	r4, r3
 8007fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fe4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007fe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007fec:	4642      	mov	r2, r8
 8007fee:	464b      	mov	r3, r9
 8007ff0:	1891      	adds	r1, r2, r2
 8007ff2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ff4:	415b      	adcs	r3, r3
 8007ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	1851      	adds	r1, r2, r1
 8008000:	6339      	str	r1, [r7, #48]	; 0x30
 8008002:	4649      	mov	r1, r9
 8008004:	414b      	adcs	r3, r1
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
 8008008:	f04f 0200 	mov.w	r2, #0
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008014:	4659      	mov	r1, fp
 8008016:	00cb      	lsls	r3, r1, #3
 8008018:	4651      	mov	r1, sl
 800801a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800801e:	4651      	mov	r1, sl
 8008020:	00ca      	lsls	r2, r1, #3
 8008022:	4610      	mov	r0, r2
 8008024:	4619      	mov	r1, r3
 8008026:	4603      	mov	r3, r0
 8008028:	4642      	mov	r2, r8
 800802a:	189b      	adds	r3, r3, r2
 800802c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008030:	464b      	mov	r3, r9
 8008032:	460a      	mov	r2, r1
 8008034:	eb42 0303 	adc.w	r3, r2, r3
 8008038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800803c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008048:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800804c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008050:	460b      	mov	r3, r1
 8008052:	18db      	adds	r3, r3, r3
 8008054:	62bb      	str	r3, [r7, #40]	; 0x28
 8008056:	4613      	mov	r3, r2
 8008058:	eb42 0303 	adc.w	r3, r2, r3
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800805e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008062:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008066:	f7f8 fe0f 	bl	8000c88 <__aeabi_uldivmod>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4b0d      	ldr	r3, [pc, #52]	; (80080a4 <UART_SetConfig+0x2d4>)
 8008070:	fba3 1302 	umull	r1, r3, r3, r2
 8008074:	095b      	lsrs	r3, r3, #5
 8008076:	2164      	movs	r1, #100	; 0x64
 8008078:	fb01 f303 	mul.w	r3, r1, r3
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	3332      	adds	r3, #50	; 0x32
 8008082:	4a08      	ldr	r2, [pc, #32]	; (80080a4 <UART_SetConfig+0x2d4>)
 8008084:	fba2 2303 	umull	r2, r3, r2, r3
 8008088:	095b      	lsrs	r3, r3, #5
 800808a:	f003 0207 	and.w	r2, r3, #7
 800808e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4422      	add	r2, r4
 8008096:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008098:	e106      	b.n	80082a8 <UART_SetConfig+0x4d8>
 800809a:	bf00      	nop
 800809c:	40011000 	.word	0x40011000
 80080a0:	40011400 	.word	0x40011400
 80080a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ac:	2200      	movs	r2, #0
 80080ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80080b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80080ba:	4642      	mov	r2, r8
 80080bc:	464b      	mov	r3, r9
 80080be:	1891      	adds	r1, r2, r2
 80080c0:	6239      	str	r1, [r7, #32]
 80080c2:	415b      	adcs	r3, r3
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
 80080c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080ca:	4641      	mov	r1, r8
 80080cc:	1854      	adds	r4, r2, r1
 80080ce:	4649      	mov	r1, r9
 80080d0:	eb43 0501 	adc.w	r5, r3, r1
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	f04f 0300 	mov.w	r3, #0
 80080dc:	00eb      	lsls	r3, r5, #3
 80080de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080e2:	00e2      	lsls	r2, r4, #3
 80080e4:	4614      	mov	r4, r2
 80080e6:	461d      	mov	r5, r3
 80080e8:	4643      	mov	r3, r8
 80080ea:	18e3      	adds	r3, r4, r3
 80080ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080f0:	464b      	mov	r3, r9
 80080f2:	eb45 0303 	adc.w	r3, r5, r3
 80080f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800810a:	f04f 0200 	mov.w	r2, #0
 800810e:	f04f 0300 	mov.w	r3, #0
 8008112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008116:	4629      	mov	r1, r5
 8008118:	008b      	lsls	r3, r1, #2
 800811a:	4621      	mov	r1, r4
 800811c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008120:	4621      	mov	r1, r4
 8008122:	008a      	lsls	r2, r1, #2
 8008124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008128:	f7f8 fdae 	bl	8000c88 <__aeabi_uldivmod>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	4b60      	ldr	r3, [pc, #384]	; (80082b4 <UART_SetConfig+0x4e4>)
 8008132:	fba3 2302 	umull	r2, r3, r3, r2
 8008136:	095b      	lsrs	r3, r3, #5
 8008138:	011c      	lsls	r4, r3, #4
 800813a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800813e:	2200      	movs	r2, #0
 8008140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008144:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008148:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800814c:	4642      	mov	r2, r8
 800814e:	464b      	mov	r3, r9
 8008150:	1891      	adds	r1, r2, r2
 8008152:	61b9      	str	r1, [r7, #24]
 8008154:	415b      	adcs	r3, r3
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800815c:	4641      	mov	r1, r8
 800815e:	1851      	adds	r1, r2, r1
 8008160:	6139      	str	r1, [r7, #16]
 8008162:	4649      	mov	r1, r9
 8008164:	414b      	adcs	r3, r1
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008174:	4659      	mov	r1, fp
 8008176:	00cb      	lsls	r3, r1, #3
 8008178:	4651      	mov	r1, sl
 800817a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800817e:	4651      	mov	r1, sl
 8008180:	00ca      	lsls	r2, r1, #3
 8008182:	4610      	mov	r0, r2
 8008184:	4619      	mov	r1, r3
 8008186:	4603      	mov	r3, r0
 8008188:	4642      	mov	r2, r8
 800818a:	189b      	adds	r3, r3, r2
 800818c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008190:	464b      	mov	r3, r9
 8008192:	460a      	mov	r2, r1
 8008194:	eb42 0303 	adc.w	r3, r2, r3
 8008198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800819c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80081a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80081a8:	f04f 0200 	mov.w	r2, #0
 80081ac:	f04f 0300 	mov.w	r3, #0
 80081b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80081b4:	4649      	mov	r1, r9
 80081b6:	008b      	lsls	r3, r1, #2
 80081b8:	4641      	mov	r1, r8
 80081ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081be:	4641      	mov	r1, r8
 80081c0:	008a      	lsls	r2, r1, #2
 80081c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80081c6:	f7f8 fd5f 	bl	8000c88 <__aeabi_uldivmod>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4611      	mov	r1, r2
 80081d0:	4b38      	ldr	r3, [pc, #224]	; (80082b4 <UART_SetConfig+0x4e4>)
 80081d2:	fba3 2301 	umull	r2, r3, r3, r1
 80081d6:	095b      	lsrs	r3, r3, #5
 80081d8:	2264      	movs	r2, #100	; 0x64
 80081da:	fb02 f303 	mul.w	r3, r2, r3
 80081de:	1acb      	subs	r3, r1, r3
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	3332      	adds	r3, #50	; 0x32
 80081e4:	4a33      	ldr	r2, [pc, #204]	; (80082b4 <UART_SetConfig+0x4e4>)
 80081e6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081f0:	441c      	add	r4, r3
 80081f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081f6:	2200      	movs	r2, #0
 80081f8:	673b      	str	r3, [r7, #112]	; 0x70
 80081fa:	677a      	str	r2, [r7, #116]	; 0x74
 80081fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	1891      	adds	r1, r2, r2
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	415b      	adcs	r3, r3
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008210:	4641      	mov	r1, r8
 8008212:	1851      	adds	r1, r2, r1
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	4649      	mov	r1, r9
 8008218:	414b      	adcs	r3, r1
 800821a:	607b      	str	r3, [r7, #4]
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008228:	4659      	mov	r1, fp
 800822a:	00cb      	lsls	r3, r1, #3
 800822c:	4651      	mov	r1, sl
 800822e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008232:	4651      	mov	r1, sl
 8008234:	00ca      	lsls	r2, r1, #3
 8008236:	4610      	mov	r0, r2
 8008238:	4619      	mov	r1, r3
 800823a:	4603      	mov	r3, r0
 800823c:	4642      	mov	r2, r8
 800823e:	189b      	adds	r3, r3, r2
 8008240:	66bb      	str	r3, [r7, #104]	; 0x68
 8008242:	464b      	mov	r3, r9
 8008244:	460a      	mov	r2, r1
 8008246:	eb42 0303 	adc.w	r3, r2, r3
 800824a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	663b      	str	r3, [r7, #96]	; 0x60
 8008256:	667a      	str	r2, [r7, #100]	; 0x64
 8008258:	f04f 0200 	mov.w	r2, #0
 800825c:	f04f 0300 	mov.w	r3, #0
 8008260:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008264:	4649      	mov	r1, r9
 8008266:	008b      	lsls	r3, r1, #2
 8008268:	4641      	mov	r1, r8
 800826a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800826e:	4641      	mov	r1, r8
 8008270:	008a      	lsls	r2, r1, #2
 8008272:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008276:	f7f8 fd07 	bl	8000c88 <__aeabi_uldivmod>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <UART_SetConfig+0x4e4>)
 8008280:	fba3 1302 	umull	r1, r3, r3, r2
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	2164      	movs	r1, #100	; 0x64
 8008288:	fb01 f303 	mul.w	r3, r1, r3
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	3332      	adds	r3, #50	; 0x32
 8008292:	4a08      	ldr	r2, [pc, #32]	; (80082b4 <UART_SetConfig+0x4e4>)
 8008294:	fba2 2303 	umull	r2, r3, r2, r3
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	f003 020f 	and.w	r2, r3, #15
 800829e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4422      	add	r2, r4
 80082a6:	609a      	str	r2, [r3, #8]
}
 80082a8:	bf00      	nop
 80082aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80082ae:	46bd      	mov	sp, r7
 80082b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082b4:	51eb851f 	.word	0x51eb851f

080082b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082b8:	b084      	sub	sp, #16
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	f107 001c 	add.w	r0, r7, #28
 80082c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d123      	bne.n	800831a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80082e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d105      	bne.n	800830e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f9dc 	bl	80086cc <USB_CoreReset>
 8008314:	4603      	mov	r3, r0
 8008316:	73fb      	strb	r3, [r7, #15]
 8008318:	e01b      	b.n	8008352 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f9d0 	bl	80086cc <USB_CoreReset>
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008330:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008334:	2b00      	cmp	r3, #0
 8008336:	d106      	bne.n	8008346 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	639a      	str	r2, [r3, #56]	; 0x38
 8008344:	e005      	b.n	8008352 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008352:	7fbb      	ldrb	r3, [r7, #30]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d10b      	bne.n	8008370 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f043 0206 	orr.w	r2, r3, #6
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f043 0220 	orr.w	r2, r3, #32
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008370:	7bfb      	ldrb	r3, [r7, #15]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800837c:	b004      	add	sp, #16
 800837e:	4770      	bx	lr

08008380 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f043 0201 	orr.w	r2, r3, #1
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f023 0201 	bic.w	r2, r3, #1
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d115      	bne.n	8008412 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80083f2:	200a      	movs	r0, #10
 80083f4:	f7f9 fd2e 	bl	8001e54 <HAL_Delay>
      ms += 10U;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	330a      	adds	r3, #10
 80083fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f956 	bl	80086b0 <USB_GetMode>
 8008404:	4603      	mov	r3, r0
 8008406:	2b01      	cmp	r3, #1
 8008408:	d01e      	beq.n	8008448 <USB_SetCurrentMode+0x84>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2bc7      	cmp	r3, #199	; 0xc7
 800840e:	d9f0      	bls.n	80083f2 <USB_SetCurrentMode+0x2e>
 8008410:	e01a      	b.n	8008448 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d115      	bne.n	8008444 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008424:	200a      	movs	r0, #10
 8008426:	f7f9 fd15 	bl	8001e54 <HAL_Delay>
      ms += 10U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	330a      	adds	r3, #10
 800842e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f93d 	bl	80086b0 <USB_GetMode>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <USB_SetCurrentMode+0x84>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2bc7      	cmp	r3, #199	; 0xc7
 8008440:	d9f0      	bls.n	8008424 <USB_SetCurrentMode+0x60>
 8008442:	e001      	b.n	8008448 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e005      	b.n	8008454 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2bc8      	cmp	r3, #200	; 0xc8
 800844c:	d101      	bne.n	8008452 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3301      	adds	r3, #1
 800846e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008476:	d901      	bls.n	800847c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e01b      	b.n	80084b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	daf2      	bge.n	800846a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	019b      	lsls	r3, r3, #6
 800848c:	f043 0220 	orr.w	r2, r3, #32
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3301      	adds	r3, #1
 8008498:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80084a0:	d901      	bls.n	80084a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e006      	b.n	80084b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	d0f0      	beq.n	8008494 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3301      	adds	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80084d8:	d901      	bls.n	80084de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e018      	b.n	8008510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	daf2      	bge.n	80084cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2210      	movs	r2, #16
 80084ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80084fc:	d901      	bls.n	8008502 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e006      	b.n	8008510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b10      	cmp	r3, #16
 800850c:	d0f0      	beq.n	80084f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800851c:	b480      	push	{r7}
 800851e:	b089      	sub	sp, #36	; 0x24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	4611      	mov	r1, r2
 8008528:	461a      	mov	r2, r3
 800852a:	460b      	mov	r3, r1
 800852c:	71fb      	strb	r3, [r7, #7]
 800852e:	4613      	mov	r3, r2
 8008530:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800853a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800853e:	2b00      	cmp	r3, #0
 8008540:	d123      	bne.n	800858a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008542:	88bb      	ldrh	r3, [r7, #4]
 8008544:	3303      	adds	r3, #3
 8008546:	089b      	lsrs	r3, r3, #2
 8008548:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800854a:	2300      	movs	r3, #0
 800854c:	61bb      	str	r3, [r7, #24]
 800854e:	e018      	b.n	8008582 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	031a      	lsls	r2, r3, #12
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	4413      	add	r3, r2
 8008558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800855c:	461a      	mov	r2, r3
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	3301      	adds	r3, #1
 8008568:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	3301      	adds	r3, #1
 800856e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	3301      	adds	r3, #1
 8008574:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	3301      	adds	r3, #1
 800857a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	3301      	adds	r3, #1
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	429a      	cmp	r2, r3
 8008588:	d3e2      	bcc.n	8008550 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3724      	adds	r7, #36	; 0x24
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008598:	b480      	push	{r7}
 800859a:	b08b      	sub	sp, #44	; 0x2c
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	4613      	mov	r3, r2
 80085a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	089b      	lsrs	r3, r3, #2
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80085b6:	88fb      	ldrh	r3, [r7, #6]
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80085be:	2300      	movs	r3, #0
 80085c0:	623b      	str	r3, [r7, #32]
 80085c2:	e014      	b.n	80085ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	3301      	adds	r3, #1
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	3301      	adds	r3, #1
 80085da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	3301      	adds	r3, #1
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	3301      	adds	r3, #1
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	3301      	adds	r3, #1
 80085ec:	623b      	str	r3, [r7, #32]
 80085ee:	6a3a      	ldr	r2, [r7, #32]
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d3e6      	bcc.n	80085c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80085f6:	8bfb      	ldrh	r3, [r7, #30]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01e      	beq.n	800863a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008606:	461a      	mov	r2, r3
 8008608:	f107 0310 	add.w	r3, r7, #16
 800860c:	6812      	ldr	r2, [r2, #0]
 800860e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	b2db      	uxtb	r3, r3
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	fa22 f303 	lsr.w	r3, r2, r3
 800861c:	b2da      	uxtb	r2, r3
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	701a      	strb	r2, [r3, #0]
      i++;
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	3301      	adds	r3, #1
 8008626:	623b      	str	r3, [r7, #32]
      pDest++;
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	3301      	adds	r3, #1
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800862e:	8bfb      	ldrh	r3, [r7, #30]
 8008630:	3b01      	subs	r3, #1
 8008632:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008634:	8bfb      	ldrh	r3, [r7, #30]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1ea      	bne.n	8008610 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800863c:	4618      	mov	r0, r3
 800863e:	372c      	adds	r7, #44	; 0x2c
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4013      	ands	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008660:	68fb      	ldr	r3, [r7, #12]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800866e:	b480      	push	{r7}
 8008670:	b085      	sub	sp, #20
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4413      	add	r3, r2
 8008686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800868e:	78fb      	ldrb	r3, [r7, #3]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4413      	add	r3, r2
 8008696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	4013      	ands	r3, r2
 80086a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086a2:	68bb      	ldr	r3, [r7, #8]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	f003 0301 	and.w	r3, r3, #1
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3301      	adds	r3, #1
 80086dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80086e4:	d901      	bls.n	80086ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e01b      	b.n	8008722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	daf2      	bge.n	80086d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	f043 0201 	orr.w	r2, r3, #1
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3301      	adds	r3, #1
 8008706:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800870e:	d901      	bls.n	8008714 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e006      	b.n	8008722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b01      	cmp	r3, #1
 800871e:	d0f0      	beq.n	8008702 <USB_CoreReset+0x36>

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
	...

08008730 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008730:	b084      	sub	sp, #16
 8008732:	b580      	push	{r7, lr}
 8008734:	b086      	sub	sp, #24
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800873e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008750:	461a      	mov	r2, r3
 8008752:	2300      	movs	r3, #0
 8008754:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008766:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	d119      	bne.n	80087ba <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800878a:	2b01      	cmp	r3, #1
 800878c:	d10a      	bne.n	80087a4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800879c:	f043 0304 	orr.w	r3, r3, #4
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	e014      	b.n	80087ce <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087b2:	f023 0304 	bic.w	r3, r3, #4
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	e009      	b.n	80087ce <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087c8:	f023 0304 	bic.w	r3, r3, #4
 80087cc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087ce:	2110      	movs	r1, #16
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff fe43 	bl	800845c <USB_FlushTxFifo>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff fe6d 	bl	80084c0 <USB_FlushRxFifo>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80087f0:	2300      	movs	r3, #0
 80087f2:	613b      	str	r3, [r7, #16]
 80087f4:	e015      	b.n	8008822 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008802:	461a      	mov	r2, r3
 8008804:	f04f 33ff 	mov.w	r3, #4294967295
 8008808:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008816:	461a      	mov	r2, r3
 8008818:	2300      	movs	r3, #0
 800881a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	3301      	adds	r3, #1
 8008820:	613b      	str	r3, [r7, #16]
 8008822:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008826:	461a      	mov	r2, r3
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	4293      	cmp	r3, r2
 800882c:	d3e3      	bcc.n	80087f6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f04f 32ff 	mov.w	r2, #4294967295
 800883a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a18      	ldr	r2, [pc, #96]	; (80088a0 <USB_HostInit+0x170>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d10b      	bne.n	800885c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800884a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a15      	ldr	r2, [pc, #84]	; (80088a4 <USB_HostInit+0x174>)
 8008850:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a14      	ldr	r2, [pc, #80]	; (80088a8 <USB_HostInit+0x178>)
 8008856:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800885a:	e009      	b.n	8008870 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2280      	movs	r2, #128	; 0x80
 8008860:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a11      	ldr	r2, [pc, #68]	; (80088ac <USB_HostInit+0x17c>)
 8008866:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a11      	ldr	r2, [pc, #68]	; (80088b0 <USB_HostInit+0x180>)
 800886c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008870:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008874:	2b00      	cmp	r3, #0
 8008876:	d105      	bne.n	8008884 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	f043 0210 	orr.w	r2, r3, #16
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	699a      	ldr	r2, [r3, #24]
 8008888:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <USB_HostInit+0x184>)
 800888a:	4313      	orrs	r3, r2
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008890:	7dfb      	ldrb	r3, [r7, #23]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800889c:	b004      	add	sp, #16
 800889e:	4770      	bx	lr
 80088a0:	40040000 	.word	0x40040000
 80088a4:	01000200 	.word	0x01000200
 80088a8:	00e00300 	.word	0x00e00300
 80088ac:	00600080 	.word	0x00600080
 80088b0:	004000e0 	.word	0x004000e0
 80088b4:	a3200008 	.word	0xa3200008

080088b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088d6:	f023 0303 	bic.w	r3, r3, #3
 80088da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	f003 0303 	and.w	r3, r3, #3
 80088ea:	68f9      	ldr	r1, [r7, #12]
 80088ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088f0:	4313      	orrs	r3, r2
 80088f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d107      	bne.n	800890a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008900:	461a      	mov	r2, r3
 8008902:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008906:	6053      	str	r3, [r2, #4]
 8008908:	e00c      	b.n	8008924 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d107      	bne.n	8008920 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008916:	461a      	mov	r2, r3
 8008918:	f241 7370 	movw	r3, #6000	; 0x1770
 800891c:	6053      	str	r3, [r2, #4]
 800891e:	e001      	b.n	8008924 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e000      	b.n	8008926 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008952:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800895c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008960:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008962:	2064      	movs	r0, #100	; 0x64
 8008964:	f7f9 fa76 	bl	8001e54 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008974:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008976:	200a      	movs	r0, #10
 8008978:	f7f9 fa6c 	bl	8001e54 <HAL_Delay>

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008986:	b480      	push	{r7}
 8008988:	b085      	sub	sp, #20
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	460b      	mov	r3, r1
 8008990:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80089aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d109      	bne.n	80089ca <USB_DriveVbus+0x44>
 80089b6:	78fb      	ldrb	r3, [r7, #3]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d106      	bne.n	80089ca <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80089c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089c8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d4:	d109      	bne.n	80089ea <USB_DriveVbus+0x64>
 80089d6:	78fb      	ldrb	r3, [r7, #3]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80089e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089e8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	0c5b      	lsrs	r3, r3, #17
 8008a16:	f003 0303 	and.w	r3, r3, #3
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b085      	sub	sp, #20
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	b29b      	uxth	r3, r3
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b088      	sub	sp, #32
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	4608      	mov	r0, r1
 8008a52:	4611      	mov	r1, r2
 8008a54:	461a      	mov	r2, r3
 8008a56:	4603      	mov	r3, r0
 8008a58:	70fb      	strb	r3, [r7, #3]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70bb      	strb	r3, [r7, #2]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a76:	461a      	mov	r2, r3
 8008a78:	f04f 33ff 	mov.w	r3, #4294967295
 8008a7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008a7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d87c      	bhi.n	8008b80 <USB_HC_Init+0x138>
 8008a86:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <USB_HC_Init+0x44>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008a9d 	.word	0x08008a9d
 8008a90:	08008b43 	.word	0x08008b43
 8008a94:	08008a9d 	.word	0x08008a9d
 8008a98:	08008b05 	.word	0x08008b05
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	f240 439d 	movw	r3, #1181	; 0x49d
 8008aae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008ab0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	da10      	bge.n	8008ada <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	0151      	lsls	r1, r2, #5
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	440a      	add	r2, r1
 8008ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ad6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008ad8:	e055      	b.n	8008b86 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a6f      	ldr	r2, [pc, #444]	; (8008c9c <USB_HC_Init+0x254>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d151      	bne.n	8008b86 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	78fa      	ldrb	r2, [r7, #3]
 8008af2:	0151      	lsls	r1, r2, #5
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	440a      	add	r2, r1
 8008af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008afc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008b00:	60d3      	str	r3, [r2, #12]
      break;
 8008b02:	e040      	b.n	8008b86 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b10:	461a      	mov	r2, r3
 8008b12:	f240 639d 	movw	r3, #1693	; 0x69d
 8008b16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	da34      	bge.n	8008b8a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	0151      	lsls	r1, r2, #5
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	440a      	add	r2, r1
 8008b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b3e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008b40:	e023      	b.n	8008b8a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f240 2325 	movw	r3, #549	; 0x225
 8008b54:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da17      	bge.n	8008b8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008b5e:	78fb      	ldrb	r3, [r7, #3]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	78fa      	ldrb	r2, [r7, #3]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b78:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008b7c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008b7e:	e006      	b.n	8008b8e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	77fb      	strb	r3, [r7, #31]
      break;
 8008b84:	e004      	b.n	8008b90 <USB_HC_Init+0x148>
      break;
 8008b86:	bf00      	nop
 8008b88:	e002      	b.n	8008b90 <USB_HC_Init+0x148>
      break;
 8008b8a:	bf00      	nop
 8008b8c:	e000      	b.n	8008b90 <USB_HC_Init+0x148>
      break;
 8008b8e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008b90:	78fb      	ldrb	r3, [r7, #3]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008ba2:	78fb      	ldrb	r3, [r7, #3]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	78fa      	ldrb	r2, [r7, #3]
 8008bb2:	0151      	lsls	r1, r2, #5
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	440a      	add	r2, r1
 8008bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bbc:	f043 0302 	orr.w	r3, r3, #2
 8008bc0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bc8:	699a      	ldr	r2, [r3, #24]
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	f003 030f 	and.w	r3, r3, #15
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd6:	6939      	ldr	r1, [r7, #16]
 8008bd8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008bec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	da03      	bge.n	8008bfc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bf8:	61bb      	str	r3, [r7, #24]
 8008bfa:	e001      	b.n	8008c00 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff fef9 	bl	80089f8 <USB_GetHostSpeed>
 8008c06:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008c08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d106      	bne.n	8008c1e <USB_HC_Init+0x1d6>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d003      	beq.n	8008c1e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e001      	b.n	8008c22 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c22:	787b      	ldrb	r3, [r7, #1]
 8008c24:	059b      	lsls	r3, r3, #22
 8008c26:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c2a:	78bb      	ldrb	r3, [r7, #2]
 8008c2c:	02db      	lsls	r3, r3, #11
 8008c2e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c32:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c38:	049b      	lsls	r3, r3, #18
 8008c3a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c3e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008c40:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c46:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c50:	78fa      	ldrb	r2, [r7, #3]
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c60:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008c62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d003      	beq.n	8008c72 <USB_HC_Init+0x22a>
 8008c6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d10f      	bne.n	8008c92 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	015a      	lsls	r2, r3, #5
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	4413      	add	r3, r2
 8008c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	78fa      	ldrb	r2, [r7, #3]
 8008c82:	0151      	lsls	r1, r2, #5
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	440a      	add	r2, r1
 8008c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c90:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3720      	adds	r7, #32
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	40040000 	.word	0x40040000

08008ca0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08c      	sub	sp, #48	; 0x30
 8008ca4:	af02      	add	r7, sp, #8
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	4613      	mov	r3, r2
 8008cac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	785b      	ldrb	r3, [r3, #1]
 8008cb6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cbc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4a5d      	ldr	r2, [pc, #372]	; (8008e38 <USB_HC_StartXfer+0x198>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d12f      	bne.n	8008d26 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008cc6:	79fb      	ldrb	r3, [r7, #7]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d11c      	bne.n	8008d06 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	7c9b      	ldrb	r3, [r3, #18]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d003      	beq.n	8008cdc <USB_HC_StartXfer+0x3c>
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	7c9b      	ldrb	r3, [r3, #18]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d124      	bne.n	8008d26 <USB_HC_StartXfer+0x86>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	799b      	ldrb	r3, [r3, #6]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d120      	bne.n	8008d26 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	69fa      	ldr	r2, [r7, #28]
 8008cf4:	0151      	lsls	r1, r2, #5
 8008cf6:	6a3a      	ldr	r2, [r7, #32]
 8008cf8:	440a      	add	r2, r1
 8008cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d02:	60d3      	str	r3, [r2, #12]
 8008d04:	e00f      	b.n	8008d26 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	791b      	ldrb	r3, [r3, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10b      	bne.n	8008d26 <USB_HC_StartXfer+0x86>
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	795b      	ldrb	r3, [r3, #5]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d107      	bne.n	8008d26 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	785b      	ldrb	r3, [r3, #1]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 fb6b 	bl	80093f8 <USB_DoPing>
        return HAL_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	e232      	b.n	800918c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	799b      	ldrb	r3, [r3, #6]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d158      	bne.n	8008de0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	78db      	ldrb	r3, [r3, #3]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d007      	beq.n	8008d4a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	8a92      	ldrh	r2, [r2, #20]
 8008d40:	fb03 f202 	mul.w	r2, r3, r2
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	61da      	str	r2, [r3, #28]
 8008d48:	e07c      	b.n	8008e44 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	7c9b      	ldrb	r3, [r3, #18]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d130      	bne.n	8008db4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	2bbc      	cmp	r3, #188	; 0xbc
 8008d58:	d918      	bls.n	8008d8c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	8a9b      	ldrh	r3, [r3, #20]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	69da      	ldr	r2, [r3, #28]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d003      	beq.n	8008d7c <USB_HC_StartXfer+0xdc>
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d103      	bne.n	8008d84 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	60da      	str	r2, [r3, #12]
 8008d82:	e05f      	b.n	8008e44 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2201      	movs	r2, #1
 8008d88:	60da      	str	r2, [r3, #12]
 8008d8a:	e05b      	b.n	8008e44 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	6a1a      	ldr	r2, [r3, #32]
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d007      	beq.n	8008dac <USB_HC_StartXfer+0x10c>
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d003      	beq.n	8008dac <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2204      	movs	r2, #4
 8008da8:	60da      	str	r2, [r3, #12]
 8008daa:	e04b      	b.n	8008e44 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2203      	movs	r2, #3
 8008db0:	60da      	str	r2, [r3, #12]
 8008db2:	e047      	b.n	8008e44 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d10d      	bne.n	8008dd6 <USB_HC_StartXfer+0x136>
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	8a92      	ldrh	r2, [r2, #20]
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d907      	bls.n	8008dd6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008dc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	8a92      	ldrh	r2, [r2, #20]
 8008dcc:	fb03 f202 	mul.w	r2, r3, r2
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	61da      	str	r2, [r3, #28]
 8008dd4:	e036      	b.n	8008e44 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6a1a      	ldr	r2, [r3, #32]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	61da      	str	r2, [r3, #28]
 8008dde:	e031      	b.n	8008e44 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d018      	beq.n	8008e1a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	8a92      	ldrh	r2, [r2, #20]
 8008df0:	4413      	add	r3, r2
 8008df2:	3b01      	subs	r3, #1
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	8a92      	ldrh	r2, [r2, #20]
 8008df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dfc:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8008dfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008e00:	8b7b      	ldrh	r3, [r7, #26]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d90b      	bls.n	8008e1e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008e06:	8b7b      	ldrh	r3, [r7, #26]
 8008e08:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	8a92      	ldrh	r2, [r2, #20]
 8008e10:	fb03 f202 	mul.w	r2, r3, r2
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	61da      	str	r2, [r3, #28]
 8008e18:	e001      	b.n	8008e1e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	78db      	ldrb	r3, [r3, #3]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008e26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	8a92      	ldrh	r2, [r2, #20]
 8008e2c:	fb03 f202 	mul.w	r2, r3, r2
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	61da      	str	r2, [r3, #28]
 8008e34:	e006      	b.n	8008e44 <USB_HC_StartXfer+0x1a4>
 8008e36:	bf00      	nop
 8008e38:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	6a1a      	ldr	r2, [r3, #32]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e4e:	04d9      	lsls	r1, r3, #19
 8008e50:	4ba3      	ldr	r3, [pc, #652]	; (80090e0 <USB_HC_StartXfer+0x440>)
 8008e52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	7d9b      	ldrb	r3, [r3, #22]
 8008e5a:	075b      	lsls	r3, r3, #29
 8008e5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e60:	69f9      	ldr	r1, [r7, #28]
 8008e62:	0148      	lsls	r0, r1, #5
 8008e64:	6a39      	ldr	r1, [r7, #32]
 8008e66:	4401      	add	r1, r0
 8008e68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d009      	beq.n	8008e8a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	6999      	ldr	r1, [r3, #24]
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e86:	460a      	mov	r2, r1
 8008e88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bf0c      	ite	eq
 8008e9a:	2301      	moveq	r3, #1
 8008e9c:	2300      	movne	r3, #0
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	0151      	lsls	r1, r2, #5
 8008eb4:	6a3a      	ldr	r2, [r7, #32]
 8008eb6:	440a      	add	r2, r1
 8008eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ebc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ec0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	7e7b      	ldrb	r3, [r7, #25]
 8008ed2:	075b      	lsls	r3, r3, #29
 8008ed4:	69f9      	ldr	r1, [r7, #28]
 8008ed6:	0148      	lsls	r0, r1, #5
 8008ed8:	6a39      	ldr	r1, [r7, #32]
 8008eda:	4401      	add	r1, r0
 8008edc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	799b      	ldrb	r3, [r3, #6]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	f040 80c3 	bne.w	8009074 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	7c5b      	ldrb	r3, [r3, #17]
 8008ef2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	69fa      	ldr	r2, [r7, #28]
 8008efc:	0151      	lsls	r1, r2, #5
 8008efe:	6a3a      	ldr	r2, [r7, #32]
 8008f00:	440a      	add	r2, r1
 8008f02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008f0a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	0151      	lsls	r1, r2, #5
 8008f1e:	6a3a      	ldr	r2, [r7, #32]
 8008f20:	440a      	add	r2, r1
 8008f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	79db      	ldrb	r3, [r3, #7]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d123      	bne.n	8008f7c <USB_HC_StartXfer+0x2dc>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	78db      	ldrb	r3, [r3, #3]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d11f      	bne.n	8008f7c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	0151      	lsls	r1, r2, #5
 8008f4e:	6a3a      	ldr	r2, [r7, #32]
 8008f50:	440a      	add	r2, r1
 8008f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f5a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	0151      	lsls	r1, r2, #5
 8008f6e:	6a3a      	ldr	r2, [r7, #32]
 8008f70:	440a      	add	r2, r1
 8008f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f7a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	7c9b      	ldrb	r3, [r3, #18]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d003      	beq.n	8008f8c <USB_HC_StartXfer+0x2ec>
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	7c9b      	ldrb	r3, [r3, #18]
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	d117      	bne.n	8008fbc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d113      	bne.n	8008fbc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	78db      	ldrb	r3, [r3, #3]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d10f      	bne.n	8008fbc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	0151      	lsls	r1, r2, #5
 8008fae:	6a3a      	ldr	r2, [r7, #32]
 8008fb0:	440a      	add	r2, r1
 8008fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fba:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	7c9b      	ldrb	r3, [r3, #18]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d162      	bne.n	800908a <USB_HC_StartXfer+0x3ea>
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	78db      	ldrb	r3, [r3, #3]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d15e      	bne.n	800908a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d858      	bhi.n	8009088 <USB_HC_StartXfer+0x3e8>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <USB_HC_StartXfer+0x33c>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	08008fed 	.word	0x08008fed
 8008fe0:	0800900f 	.word	0x0800900f
 8008fe4:	08009031 	.word	0x08009031
 8008fe8:	08009053 	.word	0x08009053
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	0151      	lsls	r1, r2, #5
 8008ffe:	6a3a      	ldr	r2, [r7, #32]
 8009000:	440a      	add	r2, r1
 8009002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800900a:	6053      	str	r3, [r2, #4]
          break;
 800900c:	e03d      	b.n	800908a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	4413      	add	r3, r2
 8009016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	0151      	lsls	r1, r2, #5
 8009020:	6a3a      	ldr	r2, [r7, #32]
 8009022:	440a      	add	r2, r1
 8009024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009028:	f043 030e 	orr.w	r3, r3, #14
 800902c:	6053      	str	r3, [r2, #4]
          break;
 800902e:	e02c      	b.n	800908a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	015a      	lsls	r2, r3, #5
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	4413      	add	r3, r2
 8009038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	0151      	lsls	r1, r2, #5
 8009042:	6a3a      	ldr	r2, [r7, #32]
 8009044:	440a      	add	r2, r1
 8009046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800904a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800904e:	6053      	str	r3, [r2, #4]
          break;
 8009050:	e01b      	b.n	800908a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	4413      	add	r3, r2
 800905a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	0151      	lsls	r1, r2, #5
 8009064:	6a3a      	ldr	r2, [r7, #32]
 8009066:	440a      	add	r2, r1
 8009068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800906c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009070:	6053      	str	r3, [r2, #4]
          break;
 8009072:	e00a      	b.n	800908a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	4413      	add	r3, r2
 800907c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009080:	461a      	mov	r2, r3
 8009082:	2300      	movs	r3, #0
 8009084:	6053      	str	r3, [r2, #4]
 8009086:	e000      	b.n	800908a <USB_HC_StartXfer+0x3ea>
          break;
 8009088:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	4413      	add	r3, r2
 8009092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80090a0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	78db      	ldrb	r3, [r3, #3]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d004      	beq.n	80090b4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090b0:	613b      	str	r3, [r7, #16]
 80090b2:	e003      	b.n	80090bc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090ba:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090c2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d0:	461a      	mov	r2, r3
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80090d6:	79fb      	ldrb	r3, [r7, #7]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d003      	beq.n	80090e4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	e055      	b.n	800918c <USB_HC_StartXfer+0x4ec>
 80090e0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	78db      	ldrb	r3, [r3, #3]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d14e      	bne.n	800918a <USB_HC_StartXfer+0x4ea>
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6a1b      	ldr	r3, [r3, #32]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d04a      	beq.n	800918a <USB_HC_StartXfer+0x4ea>
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	79db      	ldrb	r3, [r3, #7]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d146      	bne.n	800918a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	7c9b      	ldrb	r3, [r3, #18]
 8009100:	2b03      	cmp	r3, #3
 8009102:	d831      	bhi.n	8009168 <USB_HC_StartXfer+0x4c8>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <USB_HC_StartXfer+0x46c>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	0800911d 	.word	0x0800911d
 8009110:	08009141 	.word	0x08009141
 8009114:	0800911d 	.word	0x0800911d
 8009118:	08009141 	.word	0x08009141
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	3303      	adds	r3, #3
 8009122:	089b      	lsrs	r3, r3, #2
 8009124:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009126:	8afa      	ldrh	r2, [r7, #22]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912c:	b29b      	uxth	r3, r3
 800912e:	429a      	cmp	r2, r3
 8009130:	d91c      	bls.n	800916c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f043 0220 	orr.w	r2, r3, #32
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	619a      	str	r2, [r3, #24]
        }
        break;
 800913e:	e015      	b.n	800916c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	3303      	adds	r3, #3
 8009146:	089b      	lsrs	r3, r3, #2
 8009148:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800914a:	8afa      	ldrh	r2, [r7, #22]
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	b29b      	uxth	r3, r3
 8009156:	429a      	cmp	r2, r3
 8009158:	d90a      	bls.n	8009170 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	619a      	str	r2, [r3, #24]
        }
        break;
 8009166:	e003      	b.n	8009170 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009168:	bf00      	nop
 800916a:	e002      	b.n	8009172 <USB_HC_StartXfer+0x4d2>
        break;
 800916c:	bf00      	nop
 800916e:	e000      	b.n	8009172 <USB_HC_StartXfer+0x4d2>
        break;
 8009170:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	6999      	ldr	r1, [r3, #24]
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	785a      	ldrb	r2, [r3, #1]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	b29b      	uxth	r3, r3
 8009180:	2000      	movs	r0, #0
 8009182:	9000      	str	r0, [sp, #0]
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f7ff f9c9 	bl	800851c <USB_WritePacket>
  }

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3728      	adds	r7, #40	; 0x28
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	b29b      	uxth	r3, r3
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b089      	sub	sp, #36	; 0x24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80091c6:	78fb      	ldrb	r3, [r7, #3]
 80091c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	0c9b      	lsrs	r3, r3, #18
 80091de:	f003 0303 	and.w	r3, r3, #3
 80091e2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	015a      	lsls	r2, r3, #5
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	0fdb      	lsrs	r3, r3, #31
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4413      	add	r3, r2
 8009202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	0fdb      	lsrs	r3, r3, #31
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b20      	cmp	r3, #32
 800921a:	d10d      	bne.n	8009238 <USB_HC_Halt+0x82>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10a      	bne.n	8009238 <USB_HC_Halt+0x82>
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d005      	beq.n	8009234 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d002      	beq.n	8009234 <USB_HC_Halt+0x7e>
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b03      	cmp	r3, #3
 8009232:	d101      	bne.n	8009238 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	e0d8      	b.n	80093ea <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <USB_HC_Halt+0x8e>
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2b02      	cmp	r3, #2
 8009242:	d173      	bne.n	800932c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	015a      	lsls	r2, r3, #5
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	4413      	add	r3, r2
 800924c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	0151      	lsls	r1, r2, #5
 8009256:	69fa      	ldr	r2, [r7, #28]
 8009258:	440a      	add	r2, r1
 800925a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800925e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009262:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	2b00      	cmp	r3, #0
 800926e:	d14a      	bne.n	8009306 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d133      	bne.n	80092e4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	4413      	add	r3, r2
 8009284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	69ba      	ldr	r2, [r7, #24]
 800928c:	0151      	lsls	r1, r2, #5
 800928e:	69fa      	ldr	r2, [r7, #28]
 8009290:	440a      	add	r2, r1
 8009292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800929a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	0151      	lsls	r1, r2, #5
 80092ae:	69fa      	ldr	r2, [r7, #28]
 80092b0:	440a      	add	r2, r1
 80092b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092ba:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	3301      	adds	r3, #1
 80092c0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092c8:	d82e      	bhi.n	8009328 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092e0:	d0ec      	beq.n	80092bc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80092e2:	e081      	b.n	80093e8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	0151      	lsls	r1, r2, #5
 80092f6:	69fa      	ldr	r2, [r7, #28]
 80092f8:	440a      	add	r2, r1
 80092fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009302:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009304:	e070      	b.n	80093e8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	4413      	add	r3, r2
 800930e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	0151      	lsls	r1, r2, #5
 8009318:	69fa      	ldr	r2, [r7, #28]
 800931a:	440a      	add	r2, r1
 800931c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009324:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009326:	e05f      	b.n	80093e8 <USB_HC_Halt+0x232>
            break;
 8009328:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800932a:	e05d      	b.n	80093e8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	4413      	add	r3, r2
 8009334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	440a      	add	r2, r1
 8009342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009346:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800934a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d133      	bne.n	80093c4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	4413      	add	r3, r2
 8009364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	69ba      	ldr	r2, [r7, #24]
 800936c:	0151      	lsls	r1, r2, #5
 800936e:	69fa      	ldr	r2, [r7, #28]
 8009370:	440a      	add	r2, r1
 8009372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800937a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	4413      	add	r3, r2
 8009384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	0151      	lsls	r1, r2, #5
 800938e:	69fa      	ldr	r2, [r7, #28]
 8009390:	440a      	add	r2, r1
 8009392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009396:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800939a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	3301      	adds	r3, #1
 80093a0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093a8:	d81d      	bhi.n	80093e6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093c0:	d0ec      	beq.n	800939c <USB_HC_Halt+0x1e6>
 80093c2:	e011      	b.n	80093e8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	0151      	lsls	r1, r2, #5
 80093d6:	69fa      	ldr	r2, [r7, #28]
 80093d8:	440a      	add	r2, r1
 80093da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	e000      	b.n	80093e8 <USB_HC_Halt+0x232>
          break;
 80093e6:	bf00      	nop
    }
  }

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3724      	adds	r7, #36	; 0x24
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
	...

080093f8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009408:	78fb      	ldrb	r3, [r7, #3]
 800940a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800940c:	2301      	movs	r3, #1
 800940e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	04da      	lsls	r2, r3, #19
 8009414:	4b15      	ldr	r3, [pc, #84]	; (800946c <USB_DoPing+0x74>)
 8009416:	4013      	ands	r3, r2
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	0151      	lsls	r1, r2, #5
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	440a      	add	r2, r1
 8009420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009428:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	4413      	add	r3, r2
 8009432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009440:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009448:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	4413      	add	r3, r2
 8009452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009456:	461a      	mov	r2, r3
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	371c      	adds	r7, #28
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	1ff80000 	.word	0x1ff80000

08009470 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b088      	sub	sp, #32
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7fe ff8c 	bl	80083a2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800948a:	2110      	movs	r1, #16
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7fe ffe5 	bl	800845c <USB_FlushTxFifo>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff f80f 	bl	80084c0 <USB_FlushRxFifo>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80094ac:	2300      	movs	r3, #0
 80094ae:	61bb      	str	r3, [r7, #24]
 80094b0:	e01f      	b.n	80094f2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	015a      	lsls	r2, r3, #5
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e6:	461a      	mov	r2, r3
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	3301      	adds	r3, #1
 80094f0:	61bb      	str	r3, [r7, #24]
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	2b0f      	cmp	r3, #15
 80094f6:	d9dc      	bls.n	80094b2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80094f8:	2300      	movs	r3, #0
 80094fa:	61bb      	str	r3, [r7, #24]
 80094fc:	e034      	b.n	8009568 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	4413      	add	r3, r2
 8009506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009514:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800951c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009524:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	4413      	add	r3, r2
 800952e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009532:	461a      	mov	r2, r3
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3301      	adds	r3, #1
 800953c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009544:	d80c      	bhi.n	8009560 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	4413      	add	r3, r2
 800954e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800955c:	d0ec      	beq.n	8009538 <USB_StopHost+0xc8>
 800955e:	e000      	b.n	8009562 <USB_StopHost+0xf2>
        break;
 8009560:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	3301      	adds	r3, #1
 8009566:	61bb      	str	r3, [r7, #24]
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	2b0f      	cmp	r3, #15
 800956c:	d9c7      	bls.n	80094fe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009574:	461a      	mov	r2, r3
 8009576:	f04f 33ff 	mov.w	r3, #4294967295
 800957a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f04f 32ff 	mov.w	r2, #4294967295
 8009582:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7fe fefb 	bl	8008380 <USB_EnableGlobalInt>

  return ret;
 800958a:	7ffb      	ldrb	r3, [r7, #31]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3720      	adds	r7, #32
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009594:	b590      	push	{r4, r7, lr}
 8009596:	b089      	sub	sp, #36	; 0x24
 8009598:	af04      	add	r7, sp, #16
 800959a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800959c:	2301      	movs	r3, #1
 800959e:	2202      	movs	r2, #2
 80095a0:	2102      	movs	r1, #2
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fc85 	bl	8009eb2 <USBH_FindInterface>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	2bff      	cmp	r3, #255	; 0xff
 80095b0:	d002      	beq.n	80095b8 <USBH_CDC_InterfaceInit+0x24>
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d901      	bls.n	80095bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80095b8:	2302      	movs	r3, #2
 80095ba:	e13d      	b.n	8009838 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fc5a 	bl	8009e7a <USBH_SelectInterface>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80095ca:	7bbb      	ldrb	r3, [r7, #14]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80095d0:	2302      	movs	r3, #2
 80095d2:	e131      	b.n	8009838 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80095da:	2050      	movs	r0, #80	; 0x50
 80095dc:	f002 fb74 	bl	800bcc8 <malloc>
 80095e0:	4603      	mov	r3, r0
 80095e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ea:	69db      	ldr	r3, [r3, #28]
 80095ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80095f4:	2302      	movs	r3, #2
 80095f6:	e11f      	b.n	8009838 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80095f8:	2250      	movs	r2, #80	; 0x50
 80095fa:	2100      	movs	r1, #0
 80095fc:	68b8      	ldr	r0, [r7, #8]
 80095fe:	f003 fbba 	bl	800cd76 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	211a      	movs	r1, #26
 8009608:	fb01 f303 	mul.w	r3, r1, r3
 800960c:	4413      	add	r3, r2
 800960e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	b25b      	sxtb	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	da15      	bge.n	8009646 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	211a      	movs	r1, #26
 8009620:	fb01 f303 	mul.w	r3, r1, r3
 8009624:	4413      	add	r3, r2
 8009626:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800962a:	781a      	ldrb	r2, [r3, #0]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	211a      	movs	r1, #26
 8009636:	fb01 f303 	mul.w	r3, r1, r3
 800963a:	4413      	add	r3, r2
 800963c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009640:	881a      	ldrh	r2, [r3, #0]
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	785b      	ldrb	r3, [r3, #1]
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 ffce 	bl	800b5ee <USBH_AllocPipe>
 8009652:	4603      	mov	r3, r0
 8009654:	461a      	mov	r2, r3
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	7819      	ldrb	r1, [r3, #0]
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	7858      	ldrb	r0, [r3, #1]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	8952      	ldrh	r2, [r2, #10]
 8009672:	9202      	str	r2, [sp, #8]
 8009674:	2203      	movs	r2, #3
 8009676:	9201      	str	r2, [sp, #4]
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	4623      	mov	r3, r4
 800967c:	4602      	mov	r2, r0
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 ff86 	bl	800b590 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	2200      	movs	r2, #0
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f002 fa95 	bl	800bbbc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009692:	2300      	movs	r3, #0
 8009694:	2200      	movs	r2, #0
 8009696:	210a      	movs	r1, #10
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fc0a 	bl	8009eb2 <USBH_FindInterface>
 800969e:	4603      	mov	r3, r0
 80096a0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
 80096a4:	2bff      	cmp	r3, #255	; 0xff
 80096a6:	d002      	beq.n	80096ae <USBH_CDC_InterfaceInit+0x11a>
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d901      	bls.n	80096b2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80096ae:	2302      	movs	r3, #2
 80096b0:	e0c2      	b.n	8009838 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	211a      	movs	r1, #26
 80096b8:	fb01 f303 	mul.w	r3, r1, r3
 80096bc:	4413      	add	r3, r2
 80096be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	b25b      	sxtb	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	da16      	bge.n	80096f8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	211a      	movs	r1, #26
 80096d0:	fb01 f303 	mul.w	r3, r1, r3
 80096d4:	4413      	add	r3, r2
 80096d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80096da:	781a      	ldrb	r2, [r3, #0]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	211a      	movs	r1, #26
 80096e6:	fb01 f303 	mul.w	r3, r1, r3
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80096f0:	881a      	ldrh	r2, [r3, #0]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	835a      	strh	r2, [r3, #26]
 80096f6:	e015      	b.n	8009724 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	211a      	movs	r1, #26
 80096fe:	fb01 f303 	mul.w	r3, r1, r3
 8009702:	4413      	add	r3, r2
 8009704:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009708:	781a      	ldrb	r2, [r3, #0]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800970e:	7bfb      	ldrb	r3, [r7, #15]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	211a      	movs	r1, #26
 8009714:	fb01 f303 	mul.w	r3, r1, r3
 8009718:	4413      	add	r3, r2
 800971a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800971e:	881a      	ldrh	r2, [r3, #0]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	211a      	movs	r1, #26
 800972a:	fb01 f303 	mul.w	r3, r1, r3
 800972e:	4413      	add	r3, r2
 8009730:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	b25b      	sxtb	r3, r3
 8009738:	2b00      	cmp	r3, #0
 800973a:	da16      	bge.n	800976a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	211a      	movs	r1, #26
 8009742:	fb01 f303 	mul.w	r3, r1, r3
 8009746:	4413      	add	r3, r2
 8009748:	f203 3356 	addw	r3, r3, #854	; 0x356
 800974c:	781a      	ldrb	r2, [r3, #0]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009752:	7bfb      	ldrb	r3, [r7, #15]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	211a      	movs	r1, #26
 8009758:	fb01 f303 	mul.w	r3, r1, r3
 800975c:	4413      	add	r3, r2
 800975e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009762:	881a      	ldrh	r2, [r3, #0]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	835a      	strh	r2, [r3, #26]
 8009768:	e015      	b.n	8009796 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	211a      	movs	r1, #26
 8009770:	fb01 f303 	mul.w	r3, r1, r3
 8009774:	4413      	add	r3, r2
 8009776:	f203 3356 	addw	r3, r3, #854	; 0x356
 800977a:	781a      	ldrb	r2, [r3, #0]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	211a      	movs	r1, #26
 8009786:	fb01 f303 	mul.w	r3, r1, r3
 800978a:	4413      	add	r3, r2
 800978c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009790:	881a      	ldrh	r2, [r3, #0]
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	7b9b      	ldrb	r3, [r3, #14]
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f001 ff26 	bl	800b5ee <USBH_AllocPipe>
 80097a2:	4603      	mov	r3, r0
 80097a4:	461a      	mov	r2, r3
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	7bdb      	ldrb	r3, [r3, #15]
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f001 ff1c 	bl	800b5ee <USBH_AllocPipe>
 80097b6:	4603      	mov	r3, r0
 80097b8:	461a      	mov	r2, r3
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	7b59      	ldrb	r1, [r3, #13]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	7b98      	ldrb	r0, [r3, #14]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	8b12      	ldrh	r2, [r2, #24]
 80097d6:	9202      	str	r2, [sp, #8]
 80097d8:	2202      	movs	r2, #2
 80097da:	9201      	str	r2, [sp, #4]
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	4623      	mov	r3, r4
 80097e0:	4602      	mov	r2, r0
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f001 fed4 	bl	800b590 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	7b19      	ldrb	r1, [r3, #12]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	7bd8      	ldrb	r0, [r3, #15]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	8b52      	ldrh	r2, [r2, #26]
 8009800:	9202      	str	r2, [sp, #8]
 8009802:	2202      	movs	r2, #2
 8009804:	9201      	str	r2, [sp, #4]
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	4623      	mov	r3, r4
 800980a:	4602      	mov	r2, r0
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f001 febf 	bl	800b590 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	7b5b      	ldrb	r3, [r3, #13]
 800981e:	2200      	movs	r2, #0
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f002 f9ca 	bl	800bbbc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	7b1b      	ldrb	r3, [r3, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f002 f9c3 	bl	800bbbc <USBH_LL_SetToggle>

  return USBH_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	bd90      	pop	{r4, r7, pc}

08009840 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00e      	beq.n	8009878 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f001 feb4 	bl	800b5ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 fedf 	bl	800b630 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	7b1b      	ldrb	r3, [r3, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00e      	beq.n	800989e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	7b1b      	ldrb	r3, [r3, #12]
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 fea1 	bl	800b5ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	7b1b      	ldrb	r3, [r3, #12]
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f001 fecc 	bl	800b630 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	7b5b      	ldrb	r3, [r3, #13]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00e      	beq.n	80098c4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	7b5b      	ldrb	r3, [r3, #13]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f001 fe8e 	bl	800b5ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	7b5b      	ldrb	r3, [r3, #13]
 80098b6:	4619      	mov	r1, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f001 feb9 	bl	800b630 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00b      	beq.n	80098e8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	4618      	mov	r0, r3
 80098da:	f002 f9fd 	bl	800bcd8 <free>
    phost->pActiveClass->pData = 0U;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098e4:	2200      	movs	r2, #0
 80098e6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	3340      	adds	r3, #64	; 0x40
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f8b1 	bl	8009a72 <GetLineCoding>
 8009910:	4603      	mov	r3, r0
 8009912:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009914:	7afb      	ldrb	r3, [r7, #11]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d105      	bne.n	8009926 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009920:	2102      	movs	r1, #2
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009926:	7afb      	ldrb	r3, [r7, #11]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009938:	2301      	movs	r3, #1
 800993a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009950:	2b04      	cmp	r3, #4
 8009952:	d877      	bhi.n	8009a44 <USBH_CDC_Process+0x114>
 8009954:	a201      	add	r2, pc, #4	; (adr r2, 800995c <USBH_CDC_Process+0x2c>)
 8009956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995a:	bf00      	nop
 800995c:	08009971 	.word	0x08009971
 8009960:	08009977 	.word	0x08009977
 8009964:	080099a7 	.word	0x080099a7
 8009968:	08009a1b 	.word	0x08009a1b
 800996c:	08009a29 	.word	0x08009a29
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009970:	2300      	movs	r3, #0
 8009972:	73fb      	strb	r3, [r7, #15]
      break;
 8009974:	e06d      	b.n	8009a52 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f897 	bl	8009ab0 <SetLineCoding>
 8009982:	4603      	mov	r3, r0
 8009984:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009986:	7bbb      	ldrb	r3, [r7, #14]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d104      	bne.n	8009996 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009994:	e058      	b.n	8009a48 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d055      	beq.n	8009a48 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2204      	movs	r2, #4
 80099a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80099a4:	e050      	b.n	8009a48 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	3340      	adds	r3, #64	; 0x40
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f860 	bl	8009a72 <GetLineCoding>
 80099b2:	4603      	mov	r3, r0
 80099b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d126      	bne.n	8009a0a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099ce:	791b      	ldrb	r3, [r3, #4]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d13b      	bne.n	8009a4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099de:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d133      	bne.n	8009a4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099ee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d12b      	bne.n	8009a4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099fc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d124      	bne.n	8009a4c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f958 	bl	8009cb8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009a08:	e020      	b.n	8009a4c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d01d      	beq.n	8009a4c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2204      	movs	r2, #4
 8009a14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009a18:	e018      	b.n	8009a4c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f867 	bl	8009aee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f8da 	bl	8009bda <CDC_ProcessReception>
      break;
 8009a26:	e014      	b.n	8009a52 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009a28:	2100      	movs	r1, #0
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 f822 	bl	800aa74 <USBH_ClrFeature>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10a      	bne.n	8009a50 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009a42:	e005      	b.n	8009a50 <USBH_CDC_Process+0x120>

    default:
      break;
 8009a44:	bf00      	nop
 8009a46:	e004      	b.n	8009a52 <USBH_CDC_Process+0x122>
      break;
 8009a48:	bf00      	nop
 8009a4a:	e002      	b.n	8009a52 <USBH_CDC_Process+0x122>
      break;
 8009a4c:	bf00      	nop
 8009a4e:	e000      	b.n	8009a52 <USBH_CDC_Process+0x122>
      break;
 8009a50:	bf00      	nop

  }

  return status;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	22a1      	movs	r2, #161	; 0xa1
 8009a80:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2221      	movs	r2, #33	; 0x21
 8009a86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2207      	movs	r2, #7
 8009a98:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2207      	movs	r2, #7
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f001 fb23 	bl	800b0ec <USBH_CtlReq>
 8009aa6:	4603      	mov	r3, r0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2221      	movs	r2, #33	; 0x21
 8009abe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2207      	movs	r2, #7
 8009ad6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2207      	movs	r2, #7
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 fb04 	bl	800b0ec <USBH_CtlReq>
 8009ae4:	4603      	mov	r3, r0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b086      	sub	sp, #24
 8009af2:	af02      	add	r7, sp, #8
 8009af4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009b00:	2300      	movs	r3, #0
 8009b02:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d002      	beq.n	8009b14 <CDC_ProcessTransmission+0x26>
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d023      	beq.n	8009b5a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009b12:	e05e      	b.n	8009bd2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	8b12      	ldrh	r2, [r2, #24]
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d90b      	bls.n	8009b38 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	69d9      	ldr	r1, [r3, #28]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8b1a      	ldrh	r2, [r3, #24]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	7b5b      	ldrb	r3, [r3, #13]
 8009b2c:	2001      	movs	r0, #1
 8009b2e:	9000      	str	r0, [sp, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 fcea 	bl	800b50a <USBH_BulkSendData>
 8009b36:	e00b      	b.n	8009b50 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	7b5b      	ldrb	r3, [r3, #13]
 8009b46:	2001      	movs	r0, #1
 8009b48:	9000      	str	r0, [sp, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f001 fcdd 	bl	800b50a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2202      	movs	r2, #2
 8009b54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009b58:	e03b      	b.n	8009bd2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	7b5b      	ldrb	r3, [r3, #13]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f002 f801 	bl	800bb68 <USBH_LL_GetURBState>
 8009b66:	4603      	mov	r3, r0
 8009b68:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009b6a:	7afb      	ldrb	r3, [r7, #11]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d128      	bne.n	8009bc2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	8b12      	ldrh	r2, [r2, #24]
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d90e      	bls.n	8009b9a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	8b12      	ldrh	r2, [r2, #24]
 8009b84:	1a9a      	subs	r2, r3, r2
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	8b12      	ldrh	r2, [r2, #24]
 8009b92:	441a      	add	r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	61da      	str	r2, [r3, #28]
 8009b98:	e002      	b.n	8009ba0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d004      	beq.n	8009bb2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009bb0:	e00e      	b.n	8009bd0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f868 	bl	8009c90 <USBH_CDC_TransmitCallback>
      break;
 8009bc0:	e006      	b.n	8009bd0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009bc2:	7afb      	ldrb	r3, [r7, #11]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d103      	bne.n	8009bd0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009bd0:	bf00      	nop
  }
}
 8009bd2:	bf00      	nop
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b086      	sub	sp, #24
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009bec:	2300      	movs	r3, #0
 8009bee:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d002      	beq.n	8009c00 <CDC_ProcessReception+0x26>
 8009bfa:	2b04      	cmp	r3, #4
 8009bfc:	d00e      	beq.n	8009c1c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009bfe:	e043      	b.n	8009c88 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	6a19      	ldr	r1, [r3, #32]
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	8b5a      	ldrh	r2, [r3, #26]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	7b1b      	ldrb	r3, [r3, #12]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 fca1 	bl	800b554 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2204      	movs	r2, #4
 8009c16:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009c1a:	e035      	b.n	8009c88 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	7b1b      	ldrb	r3, [r3, #12]
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 ffa0 	bl	800bb68 <USBH_LL_GetURBState>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009c2c:	7cfb      	ldrb	r3, [r7, #19]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d129      	bne.n	8009c86 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	7b1b      	ldrb	r3, [r3, #12]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 ff03 	bl	800ba44 <USBH_LL_GetLastXferSize>
 8009c3e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d016      	beq.n	8009c78 <CDC_ProcessReception+0x9e>
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	8b5b      	ldrh	r3, [r3, #26]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d910      	bls.n	8009c78 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	1ad2      	subs	r2, r2, r3
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	6a1a      	ldr	r2, [r3, #32]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	441a      	add	r2, r3
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2203      	movs	r2, #3
 8009c72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009c76:	e006      	b.n	8009c86 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f80f 	bl	8009ca4 <USBH_CDC_ReceiveCallback>
      break;
 8009c86:	bf00      	nop
  }
}
 8009c88:	bf00      	nop
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e029      	b.n	8009d38 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	79fa      	ldrb	r2, [r7, #7]
 8009ce8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f000 f81f 	bl	8009d40 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d003      	beq.n	8009d30 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f001 fdd3 	bl	800b8dc <USBH_LL_Init>

  return USBH_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	e009      	b.n	8009d66 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	33e0      	adds	r3, #224	; 0xe0
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3301      	adds	r3, #1
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b0f      	cmp	r3, #15
 8009d6a:	d9f2      	bls.n	8009d52 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	e009      	b.n	8009d86 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4413      	add	r3, r2
 8009d78:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	3301      	adds	r3, #1
 8009d84:	60fb      	str	r3, [r7, #12]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d8c:	d3f1      	bcc.n	8009d72 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2240      	movs	r2, #64	; 0x40
 8009db2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	331c      	adds	r3, #28
 8009dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009de2:	2100      	movs	r1, #0
 8009de4:	4618      	mov	r0, r3
 8009de6:	f002 ffc6 	bl	800cd76 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009df4:	2100      	movs	r1, #0
 8009df6:	4618      	mov	r0, r3
 8009df8:	f002 ffbd 	bl	800cd76 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f203 3326 	addw	r3, r3, #806	; 0x326
 8009e02:	2212      	movs	r2, #18
 8009e04:	2100      	movs	r1, #0
 8009e06:	4618      	mov	r0, r3
 8009e08:	f002 ffb5 	bl	800cd76 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009e12:	223e      	movs	r2, #62	; 0x3e
 8009e14:	2100      	movs	r1, #0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f002 ffad 	bl	800cd76 <memset>

  return USBH_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b085      	sub	sp, #20
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d016      	beq.n	8009e68 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10e      	bne.n	8009e62 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e4a:	1c59      	adds	r1, r3, #1
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	33de      	adds	r3, #222	; 0xde
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
 8009e60:	e004      	b.n	8009e6c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009e62:	2302      	movs	r3, #2
 8009e64:	73fb      	strb	r3, [r7, #15]
 8009e66:	e001      	b.n	8009e6c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009e68:	2302      	movs	r3, #2
 8009e6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b085      	sub	sp, #20
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	460b      	mov	r3, r1
 8009e84:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009e90:	78fa      	ldrb	r2, [r7, #3]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d204      	bcs.n	8009ea0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	78fa      	ldrb	r2, [r7, #3]
 8009e9a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009e9e:	e001      	b.n	8009ea4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b087      	sub	sp, #28
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	4608      	mov	r0, r1
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	70fb      	strb	r3, [r7, #3]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	70bb      	strb	r3, [r7, #2]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009eda:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009edc:	e025      	b.n	8009f2a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
 8009ee0:	221a      	movs	r2, #26
 8009ee2:	fb02 f303 	mul.w	r3, r2, r3
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	4413      	add	r3, r2
 8009eec:	3302      	adds	r3, #2
 8009eee:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	795b      	ldrb	r3, [r3, #5]
 8009ef4:	78fa      	ldrb	r2, [r7, #3]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d002      	beq.n	8009f00 <USBH_FindInterface+0x4e>
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	2bff      	cmp	r3, #255	; 0xff
 8009efe:	d111      	bne.n	8009f24 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f04:	78ba      	ldrb	r2, [r7, #2]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d002      	beq.n	8009f10 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f0a:	78bb      	ldrb	r3, [r7, #2]
 8009f0c:	2bff      	cmp	r3, #255	; 0xff
 8009f0e:	d109      	bne.n	8009f24 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f14:	787a      	ldrb	r2, [r7, #1]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d002      	beq.n	8009f20 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f1a:	787b      	ldrb	r3, [r7, #1]
 8009f1c:	2bff      	cmp	r3, #255	; 0xff
 8009f1e:	d101      	bne.n	8009f24 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009f20:	7dfb      	ldrb	r3, [r7, #23]
 8009f22:	e006      	b.n	8009f32 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	3301      	adds	r3, #1
 8009f28:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d9d6      	bls.n	8009ede <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009f30:	23ff      	movs	r3, #255	; 0xff
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b082      	sub	sp, #8
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f001 fd04 	bl	800b954 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 fe1d 	bl	800bb8e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
	...

08009f60 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b088      	sub	sp, #32
 8009f64:	af04      	add	r7, sp, #16
 8009f66:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d102      	bne.n	8009f82 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2203      	movs	r2, #3
 8009f80:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	2b0b      	cmp	r3, #11
 8009f8a:	f200 81be 	bhi.w	800a30a <USBH_Process+0x3aa>
 8009f8e:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <USBH_Process+0x34>)
 8009f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f94:	08009fc5 	.word	0x08009fc5
 8009f98:	08009ff7 	.word	0x08009ff7
 8009f9c:	0800a05f 	.word	0x0800a05f
 8009fa0:	0800a2a5 	.word	0x0800a2a5
 8009fa4:	0800a30b 	.word	0x0800a30b
 8009fa8:	0800a103 	.word	0x0800a103
 8009fac:	0800a24b 	.word	0x0800a24b
 8009fb0:	0800a139 	.word	0x0800a139
 8009fb4:	0800a159 	.word	0x0800a159
 8009fb8:	0800a179 	.word	0x0800a179
 8009fbc:	0800a1bd 	.word	0x0800a1bd
 8009fc0:	0800a28d 	.word	0x0800a28d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 819e 	beq.w	800a30e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009fd8:	20c8      	movs	r0, #200	; 0xc8
 8009fda:	f001 fe22 	bl	800bc22 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f001 fd15 	bl	800ba0e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ff4:	e18b      	b.n	800a30e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d107      	bne.n	800a010 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2202      	movs	r2, #2
 800a00c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a00e:	e18d      	b.n	800a32c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a01a:	d914      	bls.n	800a046 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a022:	3301      	adds	r3, #1
 800a024:	b2da      	uxtb	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a032:	2b03      	cmp	r3, #3
 800a034:	d903      	bls.n	800a03e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	220d      	movs	r2, #13
 800a03a:	701a      	strb	r2, [r3, #0]
      break;
 800a03c:	e176      	b.n	800a32c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	701a      	strb	r2, [r3, #0]
      break;
 800a044:	e172      	b.n	800a32c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a04c:	f103 020a 	add.w	r2, r3, #10
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a056:	200a      	movs	r0, #10
 800a058:	f001 fde3 	bl	800bc22 <USBH_Delay>
      break;
 800a05c:	e166      	b.n	800a32c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a064:	2b00      	cmp	r3, #0
 800a066:	d005      	beq.n	800a074 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a06e:	2104      	movs	r1, #4
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a074:	2064      	movs	r0, #100	; 0x64
 800a076:	f001 fdd4 	bl	800bc22 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 fca0 	bl	800b9c0 <USBH_LL_GetSpeed>
 800a080:	4603      	mov	r3, r0
 800a082:	461a      	mov	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2205      	movs	r2, #5
 800a08e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a090:	2100      	movs	r1, #0
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 faab 	bl	800b5ee <USBH_AllocPipe>
 800a098:	4603      	mov	r3, r0
 800a09a:	461a      	mov	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a0a0:	2180      	movs	r1, #128	; 0x80
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f001 faa3 	bl	800b5ee <USBH_AllocPipe>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7919      	ldrb	r1, [r3, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a0c4:	b292      	uxth	r2, r2
 800a0c6:	9202      	str	r2, [sp, #8]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	9201      	str	r2, [sp, #4]
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2280      	movs	r2, #128	; 0x80
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f001 fa5c 	bl	800b590 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	7959      	ldrb	r1, [r3, #5]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a0ec:	b292      	uxth	r2, r2
 800a0ee:	9202      	str	r2, [sp, #8]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	9201      	str	r2, [sp, #4]
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f001 fa48 	bl	800b590 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a100:	e114      	b.n	800a32c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f918 	bl	800a338 <USBH_HandleEnum>
 800a108:	4603      	mov	r3, r0
 800a10a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a10c:	7bbb      	ldrb	r3, [r7, #14]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b00      	cmp	r3, #0
 800a112:	f040 80fe 	bne.w	800a312 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a124:	2b01      	cmp	r3, #1
 800a126:	d103      	bne.n	800a130 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2208      	movs	r2, #8
 800a12c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a12e:	e0f0      	b.n	800a312 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2207      	movs	r2, #7
 800a134:	701a      	strb	r2, [r3, #0]
      break;
 800a136:	e0ec      	b.n	800a312 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f000 80e9 	beq.w	800a316 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a14a:	2101      	movs	r1, #1
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2208      	movs	r2, #8
 800a154:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a156:	e0de      	b.n	800a316 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a15e:	b29b      	uxth	r3, r3
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fc3f 	bl	800a9e6 <USBH_SetCfg>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f040 80d5 	bne.w	800a31a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2209      	movs	r2, #9
 800a174:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a176:	e0d0      	b.n	800a31a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a17e:	f003 0320 	and.w	r3, r3, #32
 800a182:	2b00      	cmp	r3, #0
 800a184:	d016      	beq.n	800a1b4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a186:	2101      	movs	r1, #1
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fc4f 	bl	800aa2c <USBH_SetFeature>
 800a18e:	4603      	mov	r3, r0
 800a190:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a192:	7bbb      	ldrb	r3, [r7, #14]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d103      	bne.n	800a1a2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	220a      	movs	r2, #10
 800a19e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a1a0:	e0bd      	b.n	800a31e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a1a2:	7bbb      	ldrb	r3, [r7, #14]
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	f040 80b9 	bne.w	800a31e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	220a      	movs	r2, #10
 800a1b0:	701a      	strb	r2, [r3, #0]
      break;
 800a1b2:	e0b4      	b.n	800a31e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	220a      	movs	r2, #10
 800a1b8:	701a      	strb	r2, [r3, #0]
      break;
 800a1ba:	e0b0      	b.n	800a31e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 80ad 	beq.w	800a322 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]
 800a1d4:	e016      	b.n	800a204 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a1d6:	7bfa      	ldrb	r2, [r7, #15]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	32de      	adds	r2, #222	; 0xde
 800a1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e0:	791a      	ldrb	r2, [r3, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d108      	bne.n	800a1fe <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a1ec:	7bfa      	ldrb	r2, [r7, #15]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	32de      	adds	r2, #222	; 0xde
 800a1f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a1fc:	e005      	b.n	800a20a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
 800a200:	3301      	adds	r3, #1
 800a202:	73fb      	strb	r3, [r7, #15]
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d0e5      	beq.n	800a1d6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a210:	2b00      	cmp	r3, #0
 800a212:	d016      	beq.n	800a242 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d109      	bne.n	800a23a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2206      	movs	r2, #6
 800a22a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a232:	2103      	movs	r1, #3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a238:	e073      	b.n	800a322 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	220d      	movs	r2, #13
 800a23e:	701a      	strb	r2, [r3, #0]
      break;
 800a240:	e06f      	b.n	800a322 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	220d      	movs	r2, #13
 800a246:	701a      	strb	r2, [r3, #0]
      break;
 800a248:	e06b      	b.n	800a322 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a250:	2b00      	cmp	r3, #0
 800a252:	d017      	beq.n	800a284 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	4798      	blx	r3
 800a260:	4603      	mov	r3, r0
 800a262:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a264:	7bbb      	ldrb	r3, [r7, #14]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d103      	bne.n	800a274 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	220b      	movs	r2, #11
 800a270:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a272:	e058      	b.n	800a326 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	b2db      	uxtb	r3, r3
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d154      	bne.n	800a326 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	220d      	movs	r2, #13
 800a280:	701a      	strb	r2, [r3, #0]
      break;
 800a282:	e050      	b.n	800a326 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	220d      	movs	r2, #13
 800a288:	701a      	strb	r2, [r3, #0]
      break;
 800a28a:	e04c      	b.n	800a326 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a292:	2b00      	cmp	r3, #0
 800a294:	d049      	beq.n	800a32a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	4798      	blx	r3
      }
      break;
 800a2a2:	e042      	b.n	800a32a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7ff fd47 	bl	8009d40 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d009      	beq.n	800a2d0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d005      	beq.n	800a2e6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2e0:	2105      	movs	r1, #5
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d107      	bne.n	800a302 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7ff fe1f 	bl	8009f3e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a300:	e014      	b.n	800a32c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f001 fb26 	bl	800b954 <USBH_LL_Start>
      break;
 800a308:	e010      	b.n	800a32c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a30a:	bf00      	nop
 800a30c:	e00e      	b.n	800a32c <USBH_Process+0x3cc>
      break;
 800a30e:	bf00      	nop
 800a310:	e00c      	b.n	800a32c <USBH_Process+0x3cc>
      break;
 800a312:	bf00      	nop
 800a314:	e00a      	b.n	800a32c <USBH_Process+0x3cc>
    break;
 800a316:	bf00      	nop
 800a318:	e008      	b.n	800a32c <USBH_Process+0x3cc>
      break;
 800a31a:	bf00      	nop
 800a31c:	e006      	b.n	800a32c <USBH_Process+0x3cc>
      break;
 800a31e:	bf00      	nop
 800a320:	e004      	b.n	800a32c <USBH_Process+0x3cc>
      break;
 800a322:	bf00      	nop
 800a324:	e002      	b.n	800a32c <USBH_Process+0x3cc>
      break;
 800a326:	bf00      	nop
 800a328:	e000      	b.n	800a32c <USBH_Process+0x3cc>
      break;
 800a32a:	bf00      	nop
  }
  return USBH_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop

0800a338 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b088      	sub	sp, #32
 800a33c:	af04      	add	r7, sp, #16
 800a33e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a340:	2301      	movs	r3, #1
 800a342:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a344:	2301      	movs	r3, #1
 800a346:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	785b      	ldrb	r3, [r3, #1]
 800a34c:	2b07      	cmp	r3, #7
 800a34e:	f200 81c1 	bhi.w	800a6d4 <USBH_HandleEnum+0x39c>
 800a352:	a201      	add	r2, pc, #4	; (adr r2, 800a358 <USBH_HandleEnum+0x20>)
 800a354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a358:	0800a379 	.word	0x0800a379
 800a35c:	0800a437 	.word	0x0800a437
 800a360:	0800a4a1 	.word	0x0800a4a1
 800a364:	0800a52f 	.word	0x0800a52f
 800a368:	0800a599 	.word	0x0800a599
 800a36c:	0800a609 	.word	0x0800a609
 800a370:	0800a64f 	.word	0x0800a64f
 800a374:	0800a695 	.word	0x0800a695
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a378:	2108      	movs	r1, #8
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fa50 	bl	800a820 <USBH_Get_DevDesc>
 800a380:	4603      	mov	r3, r0
 800a382:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d130      	bne.n	800a3ec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	7919      	ldrb	r1, [r3, #4]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a3ae:	b292      	uxth	r2, r2
 800a3b0:	9202      	str	r2, [sp, #8]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	9201      	str	r2, [sp, #4]
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2280      	movs	r2, #128	; 0x80
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 f8e7 	bl	800b590 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	7959      	ldrb	r1, [r3, #5]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3d6:	b292      	uxth	r2, r2
 800a3d8:	9202      	str	r2, [sp, #8]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	9201      	str	r2, [sp, #4]
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 f8d3 	bl	800b590 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a3ea:	e175      	b.n	800a6d8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3ec:	7bbb      	ldrb	r3, [r7, #14]
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	f040 8172 	bne.w	800a6d8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d903      	bls.n	800a416 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	220d      	movs	r2, #13
 800a412:	701a      	strb	r2, [r3, #0]
      break;
 800a414:	e160      	b.n	800a6d8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	795b      	ldrb	r3, [r3, #5]
 800a41a:	4619      	mov	r1, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f001 f907 	bl	800b630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	791b      	ldrb	r3, [r3, #4]
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f001 f901 	bl	800b630 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	701a      	strb	r2, [r3, #0]
      break;
 800a434:	e150      	b.n	800a6d8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a436:	2112      	movs	r1, #18
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f9f1 	bl	800a820 <USBH_Get_DevDesc>
 800a43e:	4603      	mov	r3, r0
 800a440:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a442:	7bbb      	ldrb	r3, [r7, #14]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d103      	bne.n	800a450 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a44e:	e145      	b.n	800a6dc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a450:	7bbb      	ldrb	r3, [r7, #14]
 800a452:	2b03      	cmp	r3, #3
 800a454:	f040 8142 	bne.w	800a6dc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a45e:	3301      	adds	r3, #1
 800a460:	b2da      	uxtb	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d903      	bls.n	800a47a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	220d      	movs	r2, #13
 800a476:	701a      	strb	r2, [r3, #0]
      break;
 800a478:	e130      	b.n	800a6dc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	795b      	ldrb	r3, [r3, #5]
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 f8d5 	bl	800b630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	791b      	ldrb	r3, [r3, #4]
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 f8cf 	bl	800b630 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	701a      	strb	r2, [r3, #0]
      break;
 800a49e:	e11d      	b.n	800a6dc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fa7b 	bl	800a99e <USBH_SetAddress>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d132      	bne.n	800a518 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a4b2:	2002      	movs	r0, #2
 800a4b4:	f001 fbb5 	bl	800bc22 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	7919      	ldrb	r1, [r3, #4]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a4da:	b292      	uxth	r2, r2
 800a4dc:	9202      	str	r2, [sp, #8]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	9201      	str	r2, [sp, #4]
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2280      	movs	r2, #128	; 0x80
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 f851 	bl	800b590 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	7959      	ldrb	r1, [r3, #5]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a502:	b292      	uxth	r2, r2
 800a504:	9202      	str	r2, [sp, #8]
 800a506:	2200      	movs	r2, #0
 800a508:	9201      	str	r2, [sp, #4]
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	4603      	mov	r3, r0
 800a50e:	2200      	movs	r2, #0
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f001 f83d 	bl	800b590 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a516:	e0e3      	b.n	800a6e0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	f040 80e0 	bne.w	800a6e0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	220d      	movs	r2, #13
 800a524:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	705a      	strb	r2, [r3, #1]
      break;
 800a52c:	e0d8      	b.n	800a6e0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a52e:	2109      	movs	r1, #9
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f9a1 	bl	800a878 <USBH_Get_CfgDesc>
 800a536:	4603      	mov	r3, r0
 800a538:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a53a:	7bbb      	ldrb	r3, [r7, #14]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2204      	movs	r2, #4
 800a544:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a546:	e0cd      	b.n	800a6e4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a548:	7bbb      	ldrb	r3, [r7, #14]
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	f040 80ca 	bne.w	800a6e4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a556:	3301      	adds	r3, #1
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a566:	2b03      	cmp	r3, #3
 800a568:	d903      	bls.n	800a572 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	220d      	movs	r2, #13
 800a56e:	701a      	strb	r2, [r3, #0]
      break;
 800a570:	e0b8      	b.n	800a6e4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	795b      	ldrb	r3, [r3, #5]
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 f859 	bl	800b630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	791b      	ldrb	r3, [r3, #4]
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 f853 	bl	800b630 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	701a      	strb	r2, [r3, #0]
      break;
 800a596:	e0a5      	b.n	800a6e4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 f969 	bl	800a878 <USBH_Get_CfgDesc>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5aa:	7bbb      	ldrb	r3, [r7, #14]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d103      	bne.n	800a5b8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2205      	movs	r2, #5
 800a5b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a5b6:	e097      	b.n	800a6e8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	f040 8094 	bne.w	800a6e8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d903      	bls.n	800a5e2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	220d      	movs	r2, #13
 800a5de:	701a      	strb	r2, [r3, #0]
      break;
 800a5e0:	e082      	b.n	800a6e8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	795b      	ldrb	r3, [r3, #5]
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 f821 	bl	800b630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	791b      	ldrb	r3, [r3, #4]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f001 f81b 	bl	800b630 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	701a      	strb	r2, [r3, #0]
      break;
 800a606:	e06f      	b.n	800a6e8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d019      	beq.n	800a646 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a61e:	23ff      	movs	r3, #255	; 0xff
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f953 	bl	800a8cc <USBH_Get_StringDesc>
 800a626:	4603      	mov	r3, r0
 800a628:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a62a:	7bbb      	ldrb	r3, [r7, #14]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d103      	bne.n	800a638 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2206      	movs	r2, #6
 800a634:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a636:	e059      	b.n	800a6ec <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d156      	bne.n	800a6ec <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2206      	movs	r2, #6
 800a642:	705a      	strb	r2, [r3, #1]
      break;
 800a644:	e052      	b.n	800a6ec <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2206      	movs	r2, #6
 800a64a:	705a      	strb	r2, [r3, #1]
      break;
 800a64c:	e04e      	b.n	800a6ec <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a654:	2b00      	cmp	r3, #0
 800a656:	d019      	beq.n	800a68c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a664:	23ff      	movs	r3, #255	; 0xff
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f930 	bl	800a8cc <USBH_Get_StringDesc>
 800a66c:	4603      	mov	r3, r0
 800a66e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d103      	bne.n	800a67e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2207      	movs	r2, #7
 800a67a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a67c:	e038      	b.n	800a6f0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	2b03      	cmp	r3, #3
 800a682:	d135      	bne.n	800a6f0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2207      	movs	r2, #7
 800a688:	705a      	strb	r2, [r3, #1]
      break;
 800a68a:	e031      	b.n	800a6f0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2207      	movs	r2, #7
 800a690:	705a      	strb	r2, [r3, #1]
      break;
 800a692:	e02d      	b.n	800a6f0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d017      	beq.n	800a6ce <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a6aa:	23ff      	movs	r3, #255	; 0xff
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f90d 	bl	800a8cc <USBH_Get_StringDesc>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a6c0:	e018      	b.n	800a6f4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6c2:	7bbb      	ldrb	r3, [r7, #14]
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d115      	bne.n	800a6f4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a6cc:	e012      	b.n	800a6f4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d2:	e00f      	b.n	800a6f4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a6d4:	bf00      	nop
 800a6d6:	e00e      	b.n	800a6f6 <USBH_HandleEnum+0x3be>
      break;
 800a6d8:	bf00      	nop
 800a6da:	e00c      	b.n	800a6f6 <USBH_HandleEnum+0x3be>
      break;
 800a6dc:	bf00      	nop
 800a6de:	e00a      	b.n	800a6f6 <USBH_HandleEnum+0x3be>
      break;
 800a6e0:	bf00      	nop
 800a6e2:	e008      	b.n	800a6f6 <USBH_HandleEnum+0x3be>
      break;
 800a6e4:	bf00      	nop
 800a6e6:	e006      	b.n	800a6f6 <USBH_HandleEnum+0x3be>
      break;
 800a6e8:	bf00      	nop
 800a6ea:	e004      	b.n	800a6f6 <USBH_HandleEnum+0x3be>
      break;
 800a6ec:	bf00      	nop
 800a6ee:	e002      	b.n	800a6f6 <USBH_HandleEnum+0x3be>
      break;
 800a6f0:	bf00      	nop
 800a6f2:	e000      	b.n	800a6f6 <USBH_HandleEnum+0x3be>
      break;
 800a6f4:	bf00      	nop
  }
  return Status;
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f804 	bl	800a742 <USBH_HandleSof>
}
 800a73a:	bf00      	nop
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b082      	sub	sp, #8
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b0b      	cmp	r3, #11
 800a752:	d10a      	bne.n	800a76a <USBH_HandleSof+0x28>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d005      	beq.n	800a76a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
  }
}
 800a76a:	bf00      	nop
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a772:	b480      	push	{r7}
 800a774:	b083      	sub	sp, #12
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a782:	bf00      	nop
}
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr

0800a78e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a79e:	bf00      	nop
}
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f001 f8c6 	bl	800b98a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	791b      	ldrb	r3, [r3, #4]
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 ff13 	bl	800b630 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	795b      	ldrb	r3, [r3, #5]
 800a80e:	4619      	mov	r1, r3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 ff0d 	bl	800b630 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af02      	add	r7, sp, #8
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a82c:	887b      	ldrh	r3, [r7, #2]
 800a82e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a832:	d901      	bls.n	800a838 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a834:	2303      	movs	r3, #3
 800a836:	e01b      	b.n	800a870 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a83e:	887b      	ldrh	r3, [r7, #2]
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	4613      	mov	r3, r2
 800a844:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a848:	2100      	movs	r1, #0
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f872 	bl	800a934 <USBH_GetDescriptor>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a854:	7bfb      	ldrb	r3, [r7, #15]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d109      	bne.n	800a86e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a860:	887a      	ldrh	r2, [r7, #2]
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 f929 	bl	800aabc <USBH_ParseDevDesc>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af02      	add	r7, sp, #8
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	331c      	adds	r3, #28
 800a888:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a88a:	887b      	ldrh	r3, [r7, #2]
 800a88c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a890:	d901      	bls.n	800a896 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a892:	2303      	movs	r3, #3
 800a894:	e016      	b.n	800a8c4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a896:	887b      	ldrh	r3, [r7, #2]
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f846 	bl	800a934 <USBH_GetDescriptor>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d107      	bne.n	800a8c2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a8b2:	887b      	ldrh	r3, [r7, #2]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	68b9      	ldr	r1, [r7, #8]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f9b3 	bl	800ac24 <USBH_ParseCfgDesc>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b088      	sub	sp, #32
 800a8d0:	af02      	add	r7, sp, #8
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	607a      	str	r2, [r7, #4]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	460b      	mov	r3, r1
 800a8da:	72fb      	strb	r3, [r7, #11]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a8e0:	893b      	ldrh	r3, [r7, #8]
 800a8e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e6:	d802      	bhi.n	800a8ee <USBH_Get_StringDesc+0x22>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d101      	bne.n	800a8f2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e01c      	b.n	800a92c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a8f2:	7afb      	ldrb	r3, [r7, #11]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a8fa:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a902:	893b      	ldrh	r3, [r7, #8]
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	460b      	mov	r3, r1
 800a908:	2100      	movs	r1, #0
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 f812 	bl	800a934 <USBH_GetDescriptor>
 800a910:	4603      	mov	r3, r0
 800a912:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a914:	7dfb      	ldrb	r3, [r7, #23]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d107      	bne.n	800a92a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a920:	893a      	ldrh	r2, [r7, #8]
 800a922:	6879      	ldr	r1, [r7, #4]
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fb93 	bl	800b050 <USBH_ParseStringDesc>
  }

  return status;
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	607b      	str	r3, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	72fb      	strb	r3, [r7, #11]
 800a942:	4613      	mov	r3, r2
 800a944:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	789b      	ldrb	r3, [r3, #2]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d11c      	bne.n	800a988 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a94e:	7afb      	ldrb	r3, [r7, #11]
 800a950:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a954:	b2da      	uxtb	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2206      	movs	r2, #6
 800a95e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	893a      	ldrh	r2, [r7, #8]
 800a964:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a966:	893b      	ldrh	r3, [r7, #8]
 800a968:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a96c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a970:	d104      	bne.n	800a97c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f240 4209 	movw	r2, #1033	; 0x409
 800a978:	829a      	strh	r2, [r3, #20]
 800a97a:	e002      	b.n	800a982 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	8b3a      	ldrh	r2, [r7, #24]
 800a986:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a988:	8b3b      	ldrh	r3, [r7, #24]
 800a98a:	461a      	mov	r2, r3
 800a98c:	6879      	ldr	r1, [r7, #4]
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f000 fbac 	bl	800b0ec <USBH_CtlReq>
 800a994:	4603      	mov	r3, r0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	789b      	ldrb	r3, [r3, #2]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d10f      	bne.n	800a9d2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2205      	movs	r2, #5
 800a9bc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fb88 	bl	800b0ec <USBH_CtlReq>
 800a9dc:	4603      	mov	r3, r0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	789b      	ldrb	r3, [r3, #2]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d10e      	bne.n	800aa18 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2209      	movs	r2, #9
 800aa04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	887a      	ldrh	r2, [r7, #2]
 800aa0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fb65 	bl	800b0ec <USBH_CtlReq>
 800aa22:	4603      	mov	r3, r0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	460b      	mov	r3, r1
 800aa36:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	789b      	ldrb	r3, [r3, #2]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d10f      	bne.n	800aa60 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2203      	movs	r2, #3
 800aa4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800aa4c:	78fb      	ldrb	r3, [r7, #3]
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aa60:	2200      	movs	r2, #0
 800aa62:	2100      	movs	r1, #0
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fb41 	bl	800b0ec <USBH_CtlReq>
 800aa6a:	4603      	mov	r3, r0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	789b      	ldrb	r3, [r3, #2]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d10f      	bne.n	800aaa8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2201      	movs	r2, #1
 800aa92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800aa9a:	78fb      	ldrb	r3, [r7, #3]
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	2100      	movs	r1, #0
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fb1d 	bl	800b0ec <USBH_CtlReq>
 800aab2:	4603      	mov	r3, r0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b087      	sub	sp, #28
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	4613      	mov	r3, r2
 800aac8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f203 3326 	addw	r3, r3, #806	; 0x326
 800aad0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800aadc:	2302      	movs	r3, #2
 800aade:	e098      	b.n	800ac12 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	781a      	ldrb	r2, [r3, #0]
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	785a      	ldrb	r2, [r3, #1]
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	3302      	adds	r3, #2
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	3303      	adds	r3, #3
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	021b      	lsls	r3, r3, #8
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	4313      	orrs	r3, r2
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	791a      	ldrb	r2, [r3, #4]
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	795a      	ldrb	r2, [r3, #5]
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	799a      	ldrb	r2, [r3, #6]
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	79da      	ldrb	r2, [r3, #7]
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d004      	beq.n	800ab40 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d11b      	bne.n	800ab78 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	79db      	ldrb	r3, [r3, #7]
 800ab44:	2b20      	cmp	r3, #32
 800ab46:	dc0f      	bgt.n	800ab68 <USBH_ParseDevDesc+0xac>
 800ab48:	2b08      	cmp	r3, #8
 800ab4a:	db0f      	blt.n	800ab6c <USBH_ParseDevDesc+0xb0>
 800ab4c:	3b08      	subs	r3, #8
 800ab4e:	4a34      	ldr	r2, [pc, #208]	; (800ac20 <USBH_ParseDevDesc+0x164>)
 800ab50:	fa22 f303 	lsr.w	r3, r2, r3
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bf14      	ite	ne
 800ab5c:	2301      	movne	r3, #1
 800ab5e:	2300      	moveq	r3, #0
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d106      	bne.n	800ab74 <USBH_ParseDevDesc+0xb8>
 800ab66:	e001      	b.n	800ab6c <USBH_ParseDevDesc+0xb0>
 800ab68:	2b40      	cmp	r3, #64	; 0x40
 800ab6a:	d003      	beq.n	800ab74 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	2208      	movs	r2, #8
 800ab70:	71da      	strb	r2, [r3, #7]
        break;
 800ab72:	e000      	b.n	800ab76 <USBH_ParseDevDesc+0xba>
        break;
 800ab74:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ab76:	e00e      	b.n	800ab96 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d107      	bne.n	800ab92 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	79db      	ldrb	r3, [r3, #7]
 800ab86:	2b08      	cmp	r3, #8
 800ab88:	d005      	beq.n	800ab96 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2208      	movs	r2, #8
 800ab8e:	71da      	strb	r2, [r3, #7]
 800ab90:	e001      	b.n	800ab96 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ab92:	2303      	movs	r3, #3
 800ab94:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ab96:	88fb      	ldrh	r3, [r7, #6]
 800ab98:	2b08      	cmp	r3, #8
 800ab9a:	d939      	bls.n	800ac10 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	3309      	adds	r3, #9
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	021b      	lsls	r3, r3, #8
 800abae:	b29b      	uxth	r3, r3
 800abb0:	4313      	orrs	r3, r2
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	330a      	adds	r3, #10
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	330b      	adds	r3, #11
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	021b      	lsls	r3, r3, #8
 800abca:	b29b      	uxth	r3, r3
 800abcc:	4313      	orrs	r3, r2
 800abce:	b29a      	uxth	r2, r3
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	330c      	adds	r3, #12
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	b29a      	uxth	r2, r3
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	330d      	adds	r3, #13
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	021b      	lsls	r3, r3, #8
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	4313      	orrs	r3, r2
 800abea:	b29a      	uxth	r2, r3
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	7b9a      	ldrb	r2, [r3, #14]
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	7bda      	ldrb	r2, [r3, #15]
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	7c1a      	ldrb	r2, [r3, #16]
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	7c5a      	ldrb	r2, [r3, #17]
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	371c      	adds	r7, #28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	01000101 	.word	0x01000101

0800ac24 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b08c      	sub	sp, #48	; 0x30
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ac38:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ac40:	2300      	movs	r3, #0
 800ac42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ac46:	2300      	movs	r3, #0
 800ac48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800ac52:	2302      	movs	r3, #2
 800ac54:	e0db      	b.n	800ae0e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	781a      	ldrb	r2, [r3, #0]
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	785a      	ldrb	r2, [r3, #1]
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	3302      	adds	r3, #2
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	3303      	adds	r3, #3
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	021b      	lsls	r3, r3, #8
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac86:	bf28      	it	cs
 800ac88:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	791a      	ldrb	r2, [r3, #4]
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	795a      	ldrb	r2, [r3, #5]
 800ac9e:	6a3b      	ldr	r3, [r7, #32]
 800aca0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	799a      	ldrb	r2, [r3, #6]
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	79da      	ldrb	r2, [r3, #7]
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	7a1a      	ldrb	r2, [r3, #8]
 800acb6:	6a3b      	ldr	r3, [r7, #32]
 800acb8:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	2b09      	cmp	r3, #9
 800acc0:	d002      	beq.n	800acc8 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	2209      	movs	r2, #9
 800acc6:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800acc8:	88fb      	ldrh	r3, [r7, #6]
 800acca:	2b09      	cmp	r3, #9
 800accc:	f240 809d 	bls.w	800ae0a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800acd0:	2309      	movs	r3, #9
 800acd2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800acd4:	2300      	movs	r3, #0
 800acd6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800acd8:	e081      	b.n	800adde <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800acda:	f107 0316 	add.w	r3, r7, #22
 800acde:	4619      	mov	r1, r3
 800ace0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ace2:	f000 f9e8 	bl	800b0b6 <USBH_GetNextDesc>
 800ace6:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acea:	785b      	ldrb	r3, [r3, #1]
 800acec:	2b04      	cmp	r3, #4
 800acee:	d176      	bne.n	800adde <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	2b09      	cmp	r3, #9
 800acf6:	d002      	beq.n	800acfe <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800acf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfa:	2209      	movs	r2, #9
 800acfc:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800acfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad02:	221a      	movs	r2, #26
 800ad04:	fb02 f303 	mul.w	r3, r2, r3
 800ad08:	3308      	adds	r3, #8
 800ad0a:	6a3a      	ldr	r2, [r7, #32]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	3302      	adds	r3, #2
 800ad10:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ad12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad14:	69f8      	ldr	r0, [r7, #28]
 800ad16:	f000 f87e 	bl	800ae16 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ad20:	2300      	movs	r3, #0
 800ad22:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ad24:	e043      	b.n	800adae <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ad26:	f107 0316 	add.w	r3, r7, #22
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad2e:	f000 f9c2 	bl	800b0b6 <USBH_GetNextDesc>
 800ad32:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad36:	785b      	ldrb	r3, [r3, #1]
 800ad38:	2b05      	cmp	r3, #5
 800ad3a:	d138      	bne.n	800adae <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	795b      	ldrb	r3, [r3, #5]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d113      	bne.n	800ad6c <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d003      	beq.n	800ad54 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	799b      	ldrb	r3, [r3, #6]
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	d10b      	bne.n	800ad6c <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	79db      	ldrb	r3, [r3, #7]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10b      	bne.n	800ad74 <USBH_ParseCfgDesc+0x150>
 800ad5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	2b09      	cmp	r3, #9
 800ad62:	d007      	beq.n	800ad74 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800ad64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad66:	2209      	movs	r2, #9
 800ad68:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ad6a:	e003      	b.n	800ad74 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	2207      	movs	r2, #7
 800ad70:	701a      	strb	r2, [r3, #0]
 800ad72:	e000      	b.n	800ad76 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ad74:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ad76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad7a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ad7e:	3201      	adds	r2, #1
 800ad80:	00d2      	lsls	r2, r2, #3
 800ad82:	211a      	movs	r1, #26
 800ad84:	fb01 f303 	mul.w	r3, r1, r3
 800ad88:	4413      	add	r3, r2
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	6a3a      	ldr	r2, [r7, #32]
 800ad8e:	4413      	add	r3, r2
 800ad90:	3304      	adds	r3, #4
 800ad92:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ad94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad96:	69b9      	ldr	r1, [r7, #24]
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 f870 	bl	800ae7e <USBH_ParseEPDesc>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ada4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ada8:	3301      	adds	r3, #1
 800adaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	791b      	ldrb	r3, [r3, #4]
 800adb2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d204      	bcs.n	800adc4 <USBH_ParseCfgDesc+0x1a0>
 800adba:	6a3b      	ldr	r3, [r7, #32]
 800adbc:	885a      	ldrh	r2, [r3, #2]
 800adbe:	8afb      	ldrh	r3, [r7, #22]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d8b0      	bhi.n	800ad26 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	791b      	ldrb	r3, [r3, #4]
 800adc8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800adcc:	429a      	cmp	r2, r3
 800adce:	d201      	bcs.n	800add4 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800add0:	2303      	movs	r3, #3
 800add2:	e01c      	b.n	800ae0e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800add4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800add8:	3301      	adds	r3, #1
 800adda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800adde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d805      	bhi.n	800adf2 <USBH_ParseCfgDesc+0x1ce>
 800ade6:	6a3b      	ldr	r3, [r7, #32]
 800ade8:	885a      	ldrh	r2, [r3, #2]
 800adea:	8afb      	ldrh	r3, [r7, #22]
 800adec:	429a      	cmp	r2, r3
 800adee:	f63f af74 	bhi.w	800acda <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	791b      	ldrb	r3, [r3, #4]
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	bf28      	it	cs
 800adfa:	2302      	movcs	r3, #2
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d201      	bcs.n	800ae0a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e001      	b.n	800ae0e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800ae0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3730      	adds	r7, #48	; 0x30
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b083      	sub	sp, #12
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	781a      	ldrb	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	785a      	ldrb	r2, [r3, #1]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	789a      	ldrb	r2, [r3, #2]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	78da      	ldrb	r2, [r3, #3]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	3304      	adds	r3, #4
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	bf28      	it	cs
 800ae4a:	2302      	movcs	r3, #2
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	795a      	ldrb	r2, [r3, #5]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	799a      	ldrb	r2, [r3, #6]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	79da      	ldrb	r2, [r3, #7]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	7a1a      	ldrb	r2, [r3, #8]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	721a      	strb	r2, [r3, #8]
}
 800ae72:	bf00      	nop
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ae7e:	b480      	push	{r7}
 800ae80:	b087      	sub	sp, #28
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	60f8      	str	r0, [r7, #12]
 800ae86:	60b9      	str	r1, [r7, #8]
 800ae88:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	781a      	ldrb	r2, [r3, #0]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	785a      	ldrb	r2, [r3, #1]
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	789a      	ldrb	r2, [r3, #2]
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	78da      	ldrb	r2, [r3, #3]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	3305      	adds	r3, #5
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	021b      	lsls	r3, r3, #8
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	4313      	orrs	r3, r2
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	799a      	ldrb	r2, [r3, #6]
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	889b      	ldrh	r3, [r3, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d009      	beq.n	800aeee <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800aede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aee2:	d804      	bhi.n	800aeee <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800aee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeec:	d901      	bls.n	800aef2 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800aeee:	2303      	movs	r3, #3
 800aef0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d136      	bne.n	800af6a <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	78db      	ldrb	r3, [r3, #3]
 800af00:	f003 0303 	and.w	r3, r3, #3
 800af04:	2b02      	cmp	r3, #2
 800af06:	d108      	bne.n	800af1a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	889b      	ldrh	r3, [r3, #4]
 800af0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af10:	f240 8097 	bls.w	800b042 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800af14:	2303      	movs	r3, #3
 800af16:	75fb      	strb	r3, [r7, #23]
 800af18:	e093      	b.n	800b042 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	78db      	ldrb	r3, [r3, #3]
 800af1e:	f003 0303 	and.w	r3, r3, #3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d107      	bne.n	800af36 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	889b      	ldrh	r3, [r3, #4]
 800af2a:	2b40      	cmp	r3, #64	; 0x40
 800af2c:	f240 8089 	bls.w	800b042 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800af30:	2303      	movs	r3, #3
 800af32:	75fb      	strb	r3, [r7, #23]
 800af34:	e085      	b.n	800b042 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	78db      	ldrb	r3, [r3, #3]
 800af3a:	f003 0303 	and.w	r3, r3, #3
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d005      	beq.n	800af4e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	78db      	ldrb	r3, [r3, #3]
 800af46:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800af4a:	2b03      	cmp	r3, #3
 800af4c:	d10a      	bne.n	800af64 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	799b      	ldrb	r3, [r3, #6]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d003      	beq.n	800af5e <USBH_ParseEPDesc+0xe0>
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	799b      	ldrb	r3, [r3, #6]
 800af5a:	2b10      	cmp	r3, #16
 800af5c:	d970      	bls.n	800b040 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800af5e:	2303      	movs	r3, #3
 800af60:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800af62:	e06d      	b.n	800b040 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800af64:	2303      	movs	r3, #3
 800af66:	75fb      	strb	r3, [r7, #23]
 800af68:	e06b      	b.n	800b042 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800af70:	2b01      	cmp	r3, #1
 800af72:	d13c      	bne.n	800afee <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	78db      	ldrb	r3, [r3, #3]
 800af78:	f003 0303 	and.w	r3, r3, #3
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d005      	beq.n	800af8c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	78db      	ldrb	r3, [r3, #3]
 800af84:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d106      	bne.n	800af9a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	889b      	ldrh	r3, [r3, #4]
 800af90:	2b40      	cmp	r3, #64	; 0x40
 800af92:	d956      	bls.n	800b042 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800af94:	2303      	movs	r3, #3
 800af96:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800af98:	e053      	b.n	800b042 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	78db      	ldrb	r3, [r3, #3]
 800af9e:	f003 0303 	and.w	r3, r3, #3
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d10e      	bne.n	800afc4 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	799b      	ldrb	r3, [r3, #6]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d007      	beq.n	800afbe <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800afb2:	2b10      	cmp	r3, #16
 800afb4:	d803      	bhi.n	800afbe <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800afba:	2b40      	cmp	r3, #64	; 0x40
 800afbc:	d941      	bls.n	800b042 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800afbe:	2303      	movs	r3, #3
 800afc0:	75fb      	strb	r3, [r7, #23]
 800afc2:	e03e      	b.n	800b042 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	78db      	ldrb	r3, [r3, #3]
 800afc8:	f003 0303 	and.w	r3, r3, #3
 800afcc:	2b03      	cmp	r3, #3
 800afce:	d10b      	bne.n	800afe8 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	799b      	ldrb	r3, [r3, #6]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d004      	beq.n	800afe2 <USBH_ParseEPDesc+0x164>
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	889b      	ldrh	r3, [r3, #4]
 800afdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afe0:	d32f      	bcc.n	800b042 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800afe2:	2303      	movs	r3, #3
 800afe4:	75fb      	strb	r3, [r7, #23]
 800afe6:	e02c      	b.n	800b042 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800afe8:	2303      	movs	r3, #3
 800afea:	75fb      	strb	r3, [r7, #23]
 800afec:	e029      	b.n	800b042 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d120      	bne.n	800b03a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	78db      	ldrb	r3, [r3, #3]
 800affc:	f003 0303 	and.w	r3, r3, #3
 800b000:	2b00      	cmp	r3, #0
 800b002:	d106      	bne.n	800b012 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	889b      	ldrh	r3, [r3, #4]
 800b008:	2b08      	cmp	r3, #8
 800b00a:	d01a      	beq.n	800b042 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b00c:	2303      	movs	r3, #3
 800b00e:	75fb      	strb	r3, [r7, #23]
 800b010:	e017      	b.n	800b042 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	78db      	ldrb	r3, [r3, #3]
 800b016:	f003 0303 	and.w	r3, r3, #3
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d10a      	bne.n	800b034 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	799b      	ldrb	r3, [r3, #6]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <USBH_ParseEPDesc+0x1b0>
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	889b      	ldrh	r3, [r3, #4]
 800b02a:	2b08      	cmp	r3, #8
 800b02c:	d909      	bls.n	800b042 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800b02e:	2303      	movs	r3, #3
 800b030:	75fb      	strb	r3, [r7, #23]
 800b032:	e006      	b.n	800b042 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b034:	2303      	movs	r3, #3
 800b036:	75fb      	strb	r3, [r7, #23]
 800b038:	e003      	b.n	800b042 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b03a:	2303      	movs	r3, #3
 800b03c:	75fb      	strb	r3, [r7, #23]
 800b03e:	e000      	b.n	800b042 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b040:	bf00      	nop
  }

  return status;
 800b042:	7dfb      	ldrb	r3, [r7, #23]
}
 800b044:	4618      	mov	r0, r3
 800b046:	371c      	adds	r7, #28
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	4613      	mov	r3, r2
 800b05c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3301      	adds	r3, #1
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	2b03      	cmp	r3, #3
 800b066:	d120      	bne.n	800b0aa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	1e9a      	subs	r2, r3, #2
 800b06e:	88fb      	ldrh	r3, [r7, #6]
 800b070:	4293      	cmp	r3, r2
 800b072:	bf28      	it	cs
 800b074:	4613      	movcs	r3, r2
 800b076:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3302      	adds	r3, #2
 800b07c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b07e:	2300      	movs	r3, #0
 800b080:	82fb      	strh	r3, [r7, #22]
 800b082:	e00b      	b.n	800b09c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b084:	8afb      	ldrh	r3, [r7, #22]
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	4413      	add	r3, r2
 800b08a:	781a      	ldrb	r2, [r3, #0]
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	3301      	adds	r3, #1
 800b094:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b096:	8afb      	ldrh	r3, [r7, #22]
 800b098:	3302      	adds	r3, #2
 800b09a:	82fb      	strh	r3, [r7, #22]
 800b09c:	8afa      	ldrh	r2, [r7, #22]
 800b09e:	8abb      	ldrh	r3, [r7, #20]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d3ef      	bcc.n	800b084 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	701a      	strb	r2, [r3, #0]
  }
}
 800b0aa:	bf00      	nop
 800b0ac:	371c      	adds	r7, #28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b085      	sub	sp, #20
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	881a      	ldrh	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	4413      	add	r3, r2
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4413      	add	r3, r2
 800b0dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b0de:	68fb      	ldr	r3, [r7, #12]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	789b      	ldrb	r3, [r3, #2]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d002      	beq.n	800b10c <USBH_CtlReq+0x20>
 800b106:	2b02      	cmp	r3, #2
 800b108:	d00f      	beq.n	800b12a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b10a:	e027      	b.n	800b15c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	88fa      	ldrh	r2, [r7, #6]
 800b116:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2201      	movs	r2, #1
 800b11c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2202      	movs	r2, #2
 800b122:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b124:	2301      	movs	r3, #1
 800b126:	75fb      	strb	r3, [r7, #23]
      break;
 800b128:	e018      	b.n	800b15c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f000 f81c 	bl	800b168 <USBH_HandleControl>
 800b130:	4603      	mov	r3, r0
 800b132:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d002      	beq.n	800b140 <USBH_CtlReq+0x54>
 800b13a:	7dfb      	ldrb	r3, [r7, #23]
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d106      	bne.n	800b14e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2201      	movs	r2, #1
 800b144:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	761a      	strb	r2, [r3, #24]
      break;
 800b14c:	e005      	b.n	800b15a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
 800b150:	2b02      	cmp	r3, #2
 800b152:	d102      	bne.n	800b15a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2201      	movs	r2, #1
 800b158:	709a      	strb	r2, [r3, #2]
      break;
 800b15a:	bf00      	nop
  }
  return status;
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af02      	add	r7, sp, #8
 800b16e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b170:	2301      	movs	r3, #1
 800b172:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b174:	2300      	movs	r3, #0
 800b176:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	7e1b      	ldrb	r3, [r3, #24]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	2b0a      	cmp	r3, #10
 800b180:	f200 8156 	bhi.w	800b430 <USBH_HandleControl+0x2c8>
 800b184:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <USBH_HandleControl+0x24>)
 800b186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18a:	bf00      	nop
 800b18c:	0800b1b9 	.word	0x0800b1b9
 800b190:	0800b1d3 	.word	0x0800b1d3
 800b194:	0800b23d 	.word	0x0800b23d
 800b198:	0800b263 	.word	0x0800b263
 800b19c:	0800b29b 	.word	0x0800b29b
 800b1a0:	0800b2c5 	.word	0x0800b2c5
 800b1a4:	0800b317 	.word	0x0800b317
 800b1a8:	0800b339 	.word	0x0800b339
 800b1ac:	0800b375 	.word	0x0800b375
 800b1b0:	0800b39b 	.word	0x0800b39b
 800b1b4:	0800b3d9 	.word	0x0800b3d9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f103 0110 	add.w	r1, r3, #16
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	795b      	ldrb	r3, [r3, #5]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f943 	bl	800b450 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2202      	movs	r2, #2
 800b1ce:	761a      	strb	r2, [r3, #24]
      break;
 800b1d0:	e139      	b.n	800b446 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	795b      	ldrb	r3, [r3, #5]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fcc5 	bl	800bb68 <USBH_LL_GetURBState>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b1e2:	7bbb      	ldrb	r3, [r7, #14]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d11e      	bne.n	800b226 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	7c1b      	ldrb	r3, [r3, #16]
 800b1ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	8adb      	ldrh	r3, [r3, #22]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00a      	beq.n	800b210 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b1fa:	7b7b      	ldrb	r3, [r7, #13]
 800b1fc:	2b80      	cmp	r3, #128	; 0x80
 800b1fe:	d103      	bne.n	800b208 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2203      	movs	r2, #3
 800b204:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b206:	e115      	b.n	800b434 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2205      	movs	r2, #5
 800b20c:	761a      	strb	r2, [r3, #24]
      break;
 800b20e:	e111      	b.n	800b434 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b210:	7b7b      	ldrb	r3, [r7, #13]
 800b212:	2b80      	cmp	r3, #128	; 0x80
 800b214:	d103      	bne.n	800b21e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2209      	movs	r2, #9
 800b21a:	761a      	strb	r2, [r3, #24]
      break;
 800b21c:	e10a      	b.n	800b434 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2207      	movs	r2, #7
 800b222:	761a      	strb	r2, [r3, #24]
      break;
 800b224:	e106      	b.n	800b434 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b226:	7bbb      	ldrb	r3, [r7, #14]
 800b228:	2b04      	cmp	r3, #4
 800b22a:	d003      	beq.n	800b234 <USBH_HandleControl+0xcc>
 800b22c:	7bbb      	ldrb	r3, [r7, #14]
 800b22e:	2b02      	cmp	r3, #2
 800b230:	f040 8100 	bne.w	800b434 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	220b      	movs	r2, #11
 800b238:	761a      	strb	r2, [r3, #24]
      break;
 800b23a:	e0fb      	b.n	800b434 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b242:	b29a      	uxth	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6899      	ldr	r1, [r3, #8]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	899a      	ldrh	r2, [r3, #12]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	791b      	ldrb	r3, [r3, #4]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f93a 	bl	800b4ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2204      	movs	r2, #4
 800b25e:	761a      	strb	r2, [r3, #24]
      break;
 800b260:	e0f1      	b.n	800b446 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	791b      	ldrb	r3, [r3, #4]
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fc7d 	bl	800bb68 <USBH_LL_GetURBState>
 800b26e:	4603      	mov	r3, r0
 800b270:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d102      	bne.n	800b27e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2209      	movs	r2, #9
 800b27c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b27e:	7bbb      	ldrb	r3, [r7, #14]
 800b280:	2b05      	cmp	r3, #5
 800b282:	d102      	bne.n	800b28a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b284:	2303      	movs	r3, #3
 800b286:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b288:	e0d6      	b.n	800b438 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	2b04      	cmp	r3, #4
 800b28e:	f040 80d3 	bne.w	800b438 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	220b      	movs	r2, #11
 800b296:	761a      	strb	r2, [r3, #24]
      break;
 800b298:	e0ce      	b.n	800b438 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6899      	ldr	r1, [r3, #8]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	899a      	ldrh	r2, [r3, #12]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	795b      	ldrb	r3, [r3, #5]
 800b2a6:	2001      	movs	r0, #1
 800b2a8:	9000      	str	r0, [sp, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f8ea 	bl	800b484 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2206      	movs	r2, #6
 800b2c0:	761a      	strb	r2, [r3, #24]
      break;
 800b2c2:	e0c0      	b.n	800b446 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	795b      	ldrb	r3, [r3, #5]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fc4c 	bl	800bb68 <USBH_LL_GetURBState>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d103      	bne.n	800b2e2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2207      	movs	r2, #7
 800b2de:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b2e0:	e0ac      	b.n	800b43c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	2b05      	cmp	r3, #5
 800b2e6:	d105      	bne.n	800b2f4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	220c      	movs	r2, #12
 800b2ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2f2:	e0a3      	b.n	800b43c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b2f4:	7bbb      	ldrb	r3, [r7, #14]
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d103      	bne.n	800b302 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2205      	movs	r2, #5
 800b2fe:	761a      	strb	r2, [r3, #24]
      break;
 800b300:	e09c      	b.n	800b43c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	2b04      	cmp	r3, #4
 800b306:	f040 8099 	bne.w	800b43c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	220b      	movs	r2, #11
 800b30e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b310:	2302      	movs	r3, #2
 800b312:	73fb      	strb	r3, [r7, #15]
      break;
 800b314:	e092      	b.n	800b43c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	791b      	ldrb	r3, [r3, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	2100      	movs	r1, #0
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f8d5 	bl	800b4ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2208      	movs	r2, #8
 800b334:	761a      	strb	r2, [r3, #24]

      break;
 800b336:	e086      	b.n	800b446 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	791b      	ldrb	r3, [r3, #4]
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fc12 	bl	800bb68 <USBH_LL_GetURBState>
 800b344:	4603      	mov	r3, r0
 800b346:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d105      	bne.n	800b35a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	220d      	movs	r2, #13
 800b352:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b354:	2300      	movs	r3, #0
 800b356:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b358:	e072      	b.n	800b440 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	2b04      	cmp	r3, #4
 800b35e:	d103      	bne.n	800b368 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	220b      	movs	r2, #11
 800b364:	761a      	strb	r2, [r3, #24]
      break;
 800b366:	e06b      	b.n	800b440 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b368:	7bbb      	ldrb	r3, [r7, #14]
 800b36a:	2b05      	cmp	r3, #5
 800b36c:	d168      	bne.n	800b440 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b36e:	2303      	movs	r3, #3
 800b370:	73fb      	strb	r3, [r7, #15]
      break;
 800b372:	e065      	b.n	800b440 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	795b      	ldrb	r3, [r3, #5]
 800b378:	2201      	movs	r2, #1
 800b37a:	9200      	str	r2, [sp, #0]
 800b37c:	2200      	movs	r2, #0
 800b37e:	2100      	movs	r1, #0
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f87f 	bl	800b484 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	220a      	movs	r2, #10
 800b396:	761a      	strb	r2, [r3, #24]
      break;
 800b398:	e055      	b.n	800b446 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	795b      	ldrb	r3, [r3, #5]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fbe1 	bl	800bb68 <USBH_LL_GetURBState>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b3aa:	7bbb      	ldrb	r3, [r7, #14]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d105      	bne.n	800b3bc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	220d      	movs	r2, #13
 800b3b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b3ba:	e043      	b.n	800b444 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d103      	bne.n	800b3ca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2209      	movs	r2, #9
 800b3c6:	761a      	strb	r2, [r3, #24]
      break;
 800b3c8:	e03c      	b.n	800b444 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b3ca:	7bbb      	ldrb	r3, [r7, #14]
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d139      	bne.n	800b444 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	220b      	movs	r2, #11
 800b3d4:	761a      	strb	r2, [r3, #24]
      break;
 800b3d6:	e035      	b.n	800b444 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	7e5b      	ldrb	r3, [r3, #25]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	765a      	strb	r2, [r3, #25]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	7e5b      	ldrb	r3, [r3, #25]
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d806      	bhi.n	800b3fa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b3f8:	e025      	b.n	800b446 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b400:	2106      	movs	r1, #6
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	795b      	ldrb	r3, [r3, #5]
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f90c 	bl	800b630 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	791b      	ldrb	r3, [r3, #4]
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f906 	bl	800b630 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b42a:	2302      	movs	r3, #2
 800b42c:	73fb      	strb	r3, [r7, #15]
      break;
 800b42e:	e00a      	b.n	800b446 <USBH_HandleControl+0x2de>

    default:
      break;
 800b430:	bf00      	nop
 800b432:	e008      	b.n	800b446 <USBH_HandleControl+0x2de>
      break;
 800b434:	bf00      	nop
 800b436:	e006      	b.n	800b446 <USBH_HandleControl+0x2de>
      break;
 800b438:	bf00      	nop
 800b43a:	e004      	b.n	800b446 <USBH_HandleControl+0x2de>
      break;
 800b43c:	bf00      	nop
 800b43e:	e002      	b.n	800b446 <USBH_HandleControl+0x2de>
      break;
 800b440:	bf00      	nop
 800b442:	e000      	b.n	800b446 <USBH_HandleControl+0x2de>
      break;
 800b444:	bf00      	nop
  }

  return status;
 800b446:	7bfb      	ldrb	r3, [r7, #15]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af04      	add	r7, sp, #16
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	4613      	mov	r3, r2
 800b45c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b45e:	79f9      	ldrb	r1, [r7, #7]
 800b460:	2300      	movs	r3, #0
 800b462:	9303      	str	r3, [sp, #12]
 800b464:	2308      	movs	r3, #8
 800b466:	9302      	str	r3, [sp, #8]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	9301      	str	r3, [sp, #4]
 800b46c:	2300      	movs	r3, #0
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	2300      	movs	r3, #0
 800b472:	2200      	movs	r2, #0
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f000 fb46 	bl	800bb06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af04      	add	r7, sp, #16
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	4611      	mov	r1, r2
 800b490:	461a      	mov	r2, r3
 800b492:	460b      	mov	r3, r1
 800b494:	80fb      	strh	r3, [r7, #6]
 800b496:	4613      	mov	r3, r2
 800b498:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b4a8:	7979      	ldrb	r1, [r7, #5]
 800b4aa:	7e3b      	ldrb	r3, [r7, #24]
 800b4ac:	9303      	str	r3, [sp, #12]
 800b4ae:	88fb      	ldrh	r3, [r7, #6]
 800b4b0:	9302      	str	r3, [sp, #8]
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	9301      	str	r3, [sp, #4]
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	2200      	movs	r2, #0
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f000 fb21 	bl	800bb06 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b088      	sub	sp, #32
 800b4d2:	af04      	add	r7, sp, #16
 800b4d4:	60f8      	str	r0, [r7, #12]
 800b4d6:	60b9      	str	r1, [r7, #8]
 800b4d8:	4611      	mov	r1, r2
 800b4da:	461a      	mov	r2, r3
 800b4dc:	460b      	mov	r3, r1
 800b4de:	80fb      	strh	r3, [r7, #6]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b4e4:	7979      	ldrb	r1, [r7, #5]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	9303      	str	r3, [sp, #12]
 800b4ea:	88fb      	ldrh	r3, [r7, #6]
 800b4ec:	9302      	str	r3, [sp, #8]
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f000 fb03 	bl	800bb06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b500:	2300      	movs	r3, #0

}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b088      	sub	sp, #32
 800b50e:	af04      	add	r7, sp, #16
 800b510:	60f8      	str	r0, [r7, #12]
 800b512:	60b9      	str	r1, [r7, #8]
 800b514:	4611      	mov	r1, r2
 800b516:	461a      	mov	r2, r3
 800b518:	460b      	mov	r3, r1
 800b51a:	80fb      	strh	r3, [r7, #6]
 800b51c:	4613      	mov	r3, r2
 800b51e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b52a:	2300      	movs	r3, #0
 800b52c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b52e:	7979      	ldrb	r1, [r7, #5]
 800b530:	7e3b      	ldrb	r3, [r7, #24]
 800b532:	9303      	str	r3, [sp, #12]
 800b534:	88fb      	ldrh	r3, [r7, #6]
 800b536:	9302      	str	r3, [sp, #8]
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	9301      	str	r3, [sp, #4]
 800b53c:	2301      	movs	r3, #1
 800b53e:	9300      	str	r3, [sp, #0]
 800b540:	2302      	movs	r3, #2
 800b542:	2200      	movs	r2, #0
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 fade 	bl	800bb06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b088      	sub	sp, #32
 800b558:	af04      	add	r7, sp, #16
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	4611      	mov	r1, r2
 800b560:	461a      	mov	r2, r3
 800b562:	460b      	mov	r3, r1
 800b564:	80fb      	strh	r3, [r7, #6]
 800b566:	4613      	mov	r3, r2
 800b568:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b56a:	7979      	ldrb	r1, [r7, #5]
 800b56c:	2300      	movs	r3, #0
 800b56e:	9303      	str	r3, [sp, #12]
 800b570:	88fb      	ldrh	r3, [r7, #6]
 800b572:	9302      	str	r3, [sp, #8]
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	2301      	movs	r3, #1
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	2302      	movs	r3, #2
 800b57e:	2201      	movs	r2, #1
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 fac0 	bl	800bb06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af04      	add	r7, sp, #16
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	4608      	mov	r0, r1
 800b59a:	4611      	mov	r1, r2
 800b59c:	461a      	mov	r2, r3
 800b59e:	4603      	mov	r3, r0
 800b5a0:	70fb      	strb	r3, [r7, #3]
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	70bb      	strb	r3, [r7, #2]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b5aa:	7878      	ldrb	r0, [r7, #1]
 800b5ac:	78ba      	ldrb	r2, [r7, #2]
 800b5ae:	78f9      	ldrb	r1, [r7, #3]
 800b5b0:	8b3b      	ldrh	r3, [r7, #24]
 800b5b2:	9302      	str	r3, [sp, #8]
 800b5b4:	7d3b      	ldrb	r3, [r7, #20]
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	7c3b      	ldrb	r3, [r7, #16]
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	4603      	mov	r3, r0
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fa53 	bl	800ba6a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b5da:	78fb      	ldrb	r3, [r7, #3]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fa72 	bl	800bac8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f836 	bl	800b66c <USBH_GetFreePipe>
 800b600:	4603      	mov	r3, r0
 800b602:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b604:	89fb      	ldrh	r3, [r7, #14]
 800b606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d00a      	beq.n	800b624 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b60e:	78fa      	ldrb	r2, [r7, #3]
 800b610:	89fb      	ldrh	r3, [r7, #14]
 800b612:	f003 030f 	and.w	r3, r3, #15
 800b616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	33e0      	adds	r3, #224	; 0xe0
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	440b      	add	r3, r1
 800b622:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b624:	89fb      	ldrh	r3, [r7, #14]
 800b626:	b2db      	uxtb	r3, r3
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b63c:	78fb      	ldrb	r3, [r7, #3]
 800b63e:	2b0f      	cmp	r3, #15
 800b640:	d80d      	bhi.n	800b65e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b642:	78fb      	ldrb	r3, [r7, #3]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	33e0      	adds	r3, #224	; 0xe0
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	78fb      	ldrb	r3, [r7, #3]
 800b650:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b654:	6879      	ldr	r1, [r7, #4]
 800b656:	33e0      	adds	r3, #224	; 0xe0
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	440b      	add	r3, r1
 800b65c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b674:	2300      	movs	r3, #0
 800b676:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b678:	2300      	movs	r3, #0
 800b67a:	73fb      	strb	r3, [r7, #15]
 800b67c:	e00f      	b.n	800b69e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	33e0      	adds	r3, #224	; 0xe0
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d102      	bne.n	800b698 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	b29b      	uxth	r3, r3
 800b696:	e007      	b.n	800b6a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b698:	7bfb      	ldrb	r3, [r7, #15]
 800b69a:	3301      	adds	r3, #1
 800b69c:	73fb      	strb	r3, [r7, #15]
 800b69e:	7bfb      	ldrb	r3, [r7, #15]
 800b6a0:	2b0f      	cmp	r3, #15
 800b6a2:	d9ec      	bls.n	800b67e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b6a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	490e      	ldr	r1, [pc, #56]	; (800b6f4 <MX_USB_HOST_Init+0x40>)
 800b6bc:	480e      	ldr	r0, [pc, #56]	; (800b6f8 <MX_USB_HOST_Init+0x44>)
 800b6be:	f7fe fb05 	bl	8009ccc <USBH_Init>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b6c8:	f7f5 ffd0 	bl	800166c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b6cc:	490b      	ldr	r1, [pc, #44]	; (800b6fc <MX_USB_HOST_Init+0x48>)
 800b6ce:	480a      	ldr	r0, [pc, #40]	; (800b6f8 <MX_USB_HOST_Init+0x44>)
 800b6d0:	f7fe fba9 	bl	8009e26 <USBH_RegisterClass>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b6da:	f7f5 ffc7 	bl	800166c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b6de:	4806      	ldr	r0, [pc, #24]	; (800b6f8 <MX_USB_HOST_Init+0x44>)
 800b6e0:	f7fe fc2d 	bl	8009f3e <USBH_Start>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b6ea:	f7f5 ffbf 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b6ee:	bf00      	nop
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	0800b715 	.word	0x0800b715
 800b6f8:	200007d0 	.word	0x200007d0
 800b6fc:	2000000c 	.word	0x2000000c

0800b700 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b704:	4802      	ldr	r0, [pc, #8]	; (800b710 <MX_USB_HOST_Process+0x10>)
 800b706:	f7fe fc2b 	bl	8009f60 <USBH_Process>
}
 800b70a:	bf00      	nop
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	200007d0 	.word	0x200007d0

0800b714 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	3b01      	subs	r3, #1
 800b724:	2b04      	cmp	r3, #4
 800b726:	d819      	bhi.n	800b75c <USBH_UserProcess+0x48>
 800b728:	a201      	add	r2, pc, #4	; (adr r2, 800b730 <USBH_UserProcess+0x1c>)
 800b72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72e:	bf00      	nop
 800b730:	0800b75d 	.word	0x0800b75d
 800b734:	0800b74d 	.word	0x0800b74d
 800b738:	0800b75d 	.word	0x0800b75d
 800b73c:	0800b755 	.word	0x0800b755
 800b740:	0800b745 	.word	0x0800b745
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b744:	4b09      	ldr	r3, [pc, #36]	; (800b76c <USBH_UserProcess+0x58>)
 800b746:	2203      	movs	r2, #3
 800b748:	701a      	strb	r2, [r3, #0]
  break;
 800b74a:	e008      	b.n	800b75e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b74c:	4b07      	ldr	r3, [pc, #28]	; (800b76c <USBH_UserProcess+0x58>)
 800b74e:	2202      	movs	r2, #2
 800b750:	701a      	strb	r2, [r3, #0]
  break;
 800b752:	e004      	b.n	800b75e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <USBH_UserProcess+0x58>)
 800b756:	2201      	movs	r2, #1
 800b758:	701a      	strb	r2, [r3, #0]
  break;
 800b75a:	e000      	b.n	800b75e <USBH_UserProcess+0x4a>

  default:
  break;
 800b75c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b75e:	bf00      	nop
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	20000ba8 	.word	0x20000ba8

0800b770 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08a      	sub	sp, #40	; 0x28
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b778:	f107 0314 	add.w	r3, r7, #20
 800b77c:	2200      	movs	r2, #0
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	605a      	str	r2, [r3, #4]
 800b782:	609a      	str	r2, [r3, #8]
 800b784:	60da      	str	r2, [r3, #12]
 800b786:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b790:	d147      	bne.n	800b822 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b792:	2300      	movs	r3, #0
 800b794:	613b      	str	r3, [r7, #16]
 800b796:	4b25      	ldr	r3, [pc, #148]	; (800b82c <HAL_HCD_MspInit+0xbc>)
 800b798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79a:	4a24      	ldr	r2, [pc, #144]	; (800b82c <HAL_HCD_MspInit+0xbc>)
 800b79c:	f043 0301 	orr.w	r3, r3, #1
 800b7a0:	6313      	str	r3, [r2, #48]	; 0x30
 800b7a2:	4b22      	ldr	r3, [pc, #136]	; (800b82c <HAL_HCD_MspInit+0xbc>)
 800b7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	613b      	str	r3, [r7, #16]
 800b7ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b7ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b7bc:	f107 0314 	add.w	r3, r7, #20
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	481b      	ldr	r0, [pc, #108]	; (800b830 <HAL_HCD_MspInit+0xc0>)
 800b7c4:	f7f6 fd94 	bl	80022f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b7c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b7cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b7da:	230a      	movs	r3, #10
 800b7dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7de:	f107 0314 	add.w	r3, r7, #20
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	4812      	ldr	r0, [pc, #72]	; (800b830 <HAL_HCD_MspInit+0xc0>)
 800b7e6:	f7f6 fd83 	bl	80022f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b7ea:	4b10      	ldr	r3, [pc, #64]	; (800b82c <HAL_HCD_MspInit+0xbc>)
 800b7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ee:	4a0f      	ldr	r2, [pc, #60]	; (800b82c <HAL_HCD_MspInit+0xbc>)
 800b7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7f4:	6353      	str	r3, [r2, #52]	; 0x34
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	4b0c      	ldr	r3, [pc, #48]	; (800b82c <HAL_HCD_MspInit+0xbc>)
 800b7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fe:	4a0b      	ldr	r2, [pc, #44]	; (800b82c <HAL_HCD_MspInit+0xbc>)
 800b800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b804:	6453      	str	r3, [r2, #68]	; 0x44
 800b806:	4b09      	ldr	r3, [pc, #36]	; (800b82c <HAL_HCD_MspInit+0xbc>)
 800b808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b80a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b812:	2200      	movs	r2, #0
 800b814:	2100      	movs	r1, #0
 800b816:	2043      	movs	r0, #67	; 0x43
 800b818:	f7f6 fc1b 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b81c:	2043      	movs	r0, #67	; 0x43
 800b81e:	f7f6 fc34 	bl	800208a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b822:	bf00      	nop
 800b824:	3728      	adds	r7, #40	; 0x28
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	40023800 	.word	0x40023800
 800b830:	40020000 	.word	0x40020000

0800b834 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b842:	4618      	mov	r0, r3
 800b844:	f7fe ff6b 	bl	800a71e <USBH_LL_IncTimer>
}
 800b848:	bf00      	nop
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fe ffa3 	bl	800a7aa <USBH_LL_Connect>
}
 800b864:	bf00      	nop
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe ffac 	bl	800a7d8 <USBH_LL_Disconnect>
}
 800b880:	bf00      	nop
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	460b      	mov	r3, r1
 800b892:	70fb      	strb	r3, [r7, #3]
 800b894:	4613      	mov	r3, r2
 800b896:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fe ff5d 	bl	800a772 <USBH_LL_PortEnabled>
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe ff5d 	bl	800a78e <USBH_LL_PortDisabled>
}
 800b8d4:	bf00      	nop
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d12a      	bne.n	800b944 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b8ee:	4a18      	ldr	r2, [pc, #96]	; (800b950 <USBH_LL_Init+0x74>)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a15      	ldr	r2, [pc, #84]	; (800b950 <USBH_LL_Init+0x74>)
 800b8fa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8fe:	4b14      	ldr	r3, [pc, #80]	; (800b950 <USBH_LL_Init+0x74>)
 800b900:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b904:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b906:	4b12      	ldr	r3, [pc, #72]	; (800b950 <USBH_LL_Init+0x74>)
 800b908:	2208      	movs	r2, #8
 800b90a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b90c:	4b10      	ldr	r3, [pc, #64]	; (800b950 <USBH_LL_Init+0x74>)
 800b90e:	2201      	movs	r2, #1
 800b910:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b912:	4b0f      	ldr	r3, [pc, #60]	; (800b950 <USBH_LL_Init+0x74>)
 800b914:	2200      	movs	r2, #0
 800b916:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b918:	4b0d      	ldr	r3, [pc, #52]	; (800b950 <USBH_LL_Init+0x74>)
 800b91a:	2202      	movs	r2, #2
 800b91c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b91e:	4b0c      	ldr	r3, [pc, #48]	; (800b950 <USBH_LL_Init+0x74>)
 800b920:	2200      	movs	r2, #0
 800b922:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b924:	480a      	ldr	r0, [pc, #40]	; (800b950 <USBH_LL_Init+0x74>)
 800b926:	f7f6 fe98 	bl	800265a <HAL_HCD_Init>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b930:	f7f5 fe9c 	bl	800166c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b934:	4806      	ldr	r0, [pc, #24]	; (800b950 <USBH_LL_Init+0x74>)
 800b936:	f7f7 faf9 	bl	8002f2c <HAL_HCD_GetCurrentFrame>
 800b93a:	4603      	mov	r3, r0
 800b93c:	4619      	mov	r1, r3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7fe fede 	bl	800a700 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20000bac 	.word	0x20000bac

0800b954 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7f7 fa66 	bl	8002e3c <HAL_HCD_Start>
 800b970:	4603      	mov	r3, r0
 800b972:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b974:	7bfb      	ldrb	r3, [r7, #15]
 800b976:	4618      	mov	r0, r3
 800b978:	f000 f95e 	bl	800bc38 <USBH_Get_USB_Status>
 800b97c:	4603      	mov	r3, r0
 800b97e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b980:	7bbb      	ldrb	r3, [r7, #14]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b084      	sub	sp, #16
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7f7 fa6e 	bl	8002e82 <HAL_HCD_Stop>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 f943 	bl	800bc38 <USBH_Get_USB_Status>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7f7 fab8 	bl	8002f48 <HAL_HCD_GetCurrentSpeed>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d00c      	beq.n	800b9f8 <USBH_LL_GetSpeed+0x38>
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d80d      	bhi.n	800b9fe <USBH_LL_GetSpeed+0x3e>
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d002      	beq.n	800b9ec <USBH_LL_GetSpeed+0x2c>
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d003      	beq.n	800b9f2 <USBH_LL_GetSpeed+0x32>
 800b9ea:	e008      	b.n	800b9fe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f0:	e008      	b.n	800ba04 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f6:	e005      	b.n	800ba04 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b9fc:	e002      	b.n	800ba04 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	73fb      	strb	r3, [r7, #15]
    break;
 800ba02:	bf00      	nop
  }
  return  speed;
 800ba04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b084      	sub	sp, #16
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f7 fa49 	bl	8002ebc <HAL_HCD_ResetPort>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba2e:	7bfb      	ldrb	r3, [r7, #15]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f000 f901 	bl	800bc38 <USBH_Get_USB_Status>
 800ba36:	4603      	mov	r3, r0
 800ba38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba56:	78fa      	ldrb	r2, [r7, #3]
 800ba58:	4611      	mov	r1, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7f7 fa51 	bl	8002f02 <HAL_HCD_HC_GetXferCount>
 800ba60:	4603      	mov	r3, r0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ba6a:	b590      	push	{r4, r7, lr}
 800ba6c:	b089      	sub	sp, #36	; 0x24
 800ba6e:	af04      	add	r7, sp, #16
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	4608      	mov	r0, r1
 800ba74:	4611      	mov	r1, r2
 800ba76:	461a      	mov	r2, r3
 800ba78:	4603      	mov	r3, r0
 800ba7a:	70fb      	strb	r3, [r7, #3]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	70bb      	strb	r3, [r7, #2]
 800ba80:	4613      	mov	r3, r2
 800ba82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ba92:	787c      	ldrb	r4, [r7, #1]
 800ba94:	78ba      	ldrb	r2, [r7, #2]
 800ba96:	78f9      	ldrb	r1, [r7, #3]
 800ba98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ba9a:	9302      	str	r3, [sp, #8]
 800ba9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	4623      	mov	r3, r4
 800baaa:	f7f6 fe3d 	bl	8002728 <HAL_HCD_HC_Init>
 800baae:	4603      	mov	r3, r0
 800bab0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f000 f8bf 	bl	800bc38 <USBH_Get_USB_Status>
 800baba:	4603      	mov	r3, r0
 800babc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800babe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3714      	adds	r7, #20
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd90      	pop	{r4, r7, pc}

0800bac8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bae2:	78fa      	ldrb	r2, [r7, #3]
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7f6 fed6 	bl	8002898 <HAL_HCD_HC_Halt>
 800baec:	4603      	mov	r3, r0
 800baee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 f8a0 	bl	800bc38 <USBH_Get_USB_Status>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bb06:	b590      	push	{r4, r7, lr}
 800bb08:	b089      	sub	sp, #36	; 0x24
 800bb0a:	af04      	add	r7, sp, #16
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	4608      	mov	r0, r1
 800bb10:	4611      	mov	r1, r2
 800bb12:	461a      	mov	r2, r3
 800bb14:	4603      	mov	r3, r0
 800bb16:	70fb      	strb	r3, [r7, #3]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	70bb      	strb	r3, [r7, #2]
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bb2e:	787c      	ldrb	r4, [r7, #1]
 800bb30:	78ba      	ldrb	r2, [r7, #2]
 800bb32:	78f9      	ldrb	r1, [r7, #3]
 800bb34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bb38:	9303      	str	r3, [sp, #12]
 800bb3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb3c:	9302      	str	r3, [sp, #8]
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	9301      	str	r3, [sp, #4]
 800bb42:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	4623      	mov	r3, r4
 800bb4a:	f7f6 fec9 	bl	80028e0 <HAL_HCD_HC_SubmitRequest>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
 800bb54:	4618      	mov	r0, r3
 800bb56:	f000 f86f 	bl	800bc38 <USBH_Get_USB_Status>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd90      	pop	{r4, r7, pc}

0800bb68 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb7a:	78fa      	ldrb	r2, [r7, #3]
 800bb7c:	4611      	mov	r1, r2
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7f7 f9aa 	bl	8002ed8 <HAL_HCD_HC_GetURBState>
 800bb84:	4603      	mov	r3, r0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b082      	sub	sp, #8
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
 800bb96:	460b      	mov	r3, r1
 800bb98:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d103      	bne.n	800bbac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bba4:	78fb      	ldrb	r3, [r7, #3]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 f872 	bl	800bc90 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bbac:	20c8      	movs	r0, #200	; 0xc8
 800bbae:	f7f6 f951 	bl	8001e54 <HAL_Delay>
  return USBH_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70fb      	strb	r3, [r7, #3]
 800bbc8:	4613      	mov	r3, r2
 800bbca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bbd2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bbd4:	78fa      	ldrb	r2, [r7, #3]
 800bbd6:	68f9      	ldr	r1, [r7, #12]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	011b      	lsls	r3, r3, #4
 800bbdc:	1a9b      	subs	r3, r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	440b      	add	r3, r1
 800bbe2:	3317      	adds	r3, #23
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00a      	beq.n	800bc00 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bbea:	78fa      	ldrb	r2, [r7, #3]
 800bbec:	68f9      	ldr	r1, [r7, #12]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	011b      	lsls	r3, r3, #4
 800bbf2:	1a9b      	subs	r3, r3, r2
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	440b      	add	r3, r1
 800bbf8:	333c      	adds	r3, #60	; 0x3c
 800bbfa:	78ba      	ldrb	r2, [r7, #2]
 800bbfc:	701a      	strb	r2, [r3, #0]
 800bbfe:	e009      	b.n	800bc14 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bc00:	78fa      	ldrb	r2, [r7, #3]
 800bc02:	68f9      	ldr	r1, [r7, #12]
 800bc04:	4613      	mov	r3, r2
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	1a9b      	subs	r3, r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	440b      	add	r3, r1
 800bc0e:	333d      	adds	r3, #61	; 0x3d
 800bc10:	78ba      	ldrb	r2, [r7, #2]
 800bc12:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f7f6 f912 	bl	8001e54 <HAL_Delay>
}
 800bc30:	bf00      	nop
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc46:	79fb      	ldrb	r3, [r7, #7]
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	d817      	bhi.n	800bc7c <USBH_Get_USB_Status+0x44>
 800bc4c:	a201      	add	r2, pc, #4	; (adr r2, 800bc54 <USBH_Get_USB_Status+0x1c>)
 800bc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc52:	bf00      	nop
 800bc54:	0800bc65 	.word	0x0800bc65
 800bc58:	0800bc6b 	.word	0x0800bc6b
 800bc5c:	0800bc71 	.word	0x0800bc71
 800bc60:	0800bc77 	.word	0x0800bc77
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]
    break;
 800bc68:	e00b      	b.n	800bc82 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bc6a:	2302      	movs	r3, #2
 800bc6c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc6e:	e008      	b.n	800bc82 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bc70:	2301      	movs	r3, #1
 800bc72:	73fb      	strb	r3, [r7, #15]
    break;
 800bc74:	e005      	b.n	800bc82 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bc76:	2302      	movs	r3, #2
 800bc78:	73fb      	strb	r3, [r7, #15]
    break;
 800bc7a:	e002      	b.n	800bc82 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc80:	bf00      	nop
  }
  return usb_status;
 800bc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bc9a:	79fb      	ldrb	r3, [r7, #7]
 800bc9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d102      	bne.n	800bcaa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bca4:	2300      	movs	r3, #0
 800bca6:	73fb      	strb	r3, [r7, #15]
 800bca8:	e001      	b.n	800bcae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	2101      	movs	r1, #1
 800bcb4:	4803      	ldr	r0, [pc, #12]	; (800bcc4 <MX_DriverVbusFS+0x34>)
 800bcb6:	f7f6 fcb7 	bl	8002628 <HAL_GPIO_WritePin>
}
 800bcba:	bf00      	nop
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	40020800 	.word	0x40020800

0800bcc8 <malloc>:
 800bcc8:	4b02      	ldr	r3, [pc, #8]	; (800bcd4 <malloc+0xc>)
 800bcca:	4601      	mov	r1, r0
 800bccc:	6818      	ldr	r0, [r3, #0]
 800bcce:	f000 b82b 	b.w	800bd28 <_malloc_r>
 800bcd2:	bf00      	nop
 800bcd4:	20000084 	.word	0x20000084

0800bcd8 <free>:
 800bcd8:	4b02      	ldr	r3, [pc, #8]	; (800bce4 <free+0xc>)
 800bcda:	4601      	mov	r1, r0
 800bcdc:	6818      	ldr	r0, [r3, #0]
 800bcde:	f001 bf5d 	b.w	800db9c <_free_r>
 800bce2:	bf00      	nop
 800bce4:	20000084 	.word	0x20000084

0800bce8 <sbrk_aligned>:
 800bce8:	b570      	push	{r4, r5, r6, lr}
 800bcea:	4e0e      	ldr	r6, [pc, #56]	; (800bd24 <sbrk_aligned+0x3c>)
 800bcec:	460c      	mov	r4, r1
 800bcee:	6831      	ldr	r1, [r6, #0]
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	b911      	cbnz	r1, 800bcfa <sbrk_aligned+0x12>
 800bcf4:	f001 f880 	bl	800cdf8 <_sbrk_r>
 800bcf8:	6030      	str	r0, [r6, #0]
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f001 f87b 	bl	800cdf8 <_sbrk_r>
 800bd02:	1c43      	adds	r3, r0, #1
 800bd04:	d00a      	beq.n	800bd1c <sbrk_aligned+0x34>
 800bd06:	1cc4      	adds	r4, r0, #3
 800bd08:	f024 0403 	bic.w	r4, r4, #3
 800bd0c:	42a0      	cmp	r0, r4
 800bd0e:	d007      	beq.n	800bd20 <sbrk_aligned+0x38>
 800bd10:	1a21      	subs	r1, r4, r0
 800bd12:	4628      	mov	r0, r5
 800bd14:	f001 f870 	bl	800cdf8 <_sbrk_r>
 800bd18:	3001      	adds	r0, #1
 800bd1a:	d101      	bne.n	800bd20 <sbrk_aligned+0x38>
 800bd1c:	f04f 34ff 	mov.w	r4, #4294967295
 800bd20:	4620      	mov	r0, r4
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
 800bd24:	20000f90 	.word	0x20000f90

0800bd28 <_malloc_r>:
 800bd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd2c:	1ccd      	adds	r5, r1, #3
 800bd2e:	f025 0503 	bic.w	r5, r5, #3
 800bd32:	3508      	adds	r5, #8
 800bd34:	2d0c      	cmp	r5, #12
 800bd36:	bf38      	it	cc
 800bd38:	250c      	movcc	r5, #12
 800bd3a:	2d00      	cmp	r5, #0
 800bd3c:	4607      	mov	r7, r0
 800bd3e:	db01      	blt.n	800bd44 <_malloc_r+0x1c>
 800bd40:	42a9      	cmp	r1, r5
 800bd42:	d905      	bls.n	800bd50 <_malloc_r+0x28>
 800bd44:	230c      	movs	r3, #12
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	2600      	movs	r6, #0
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be24 <_malloc_r+0xfc>
 800bd54:	f000 f868 	bl	800be28 <__malloc_lock>
 800bd58:	f8d8 3000 	ldr.w	r3, [r8]
 800bd5c:	461c      	mov	r4, r3
 800bd5e:	bb5c      	cbnz	r4, 800bdb8 <_malloc_r+0x90>
 800bd60:	4629      	mov	r1, r5
 800bd62:	4638      	mov	r0, r7
 800bd64:	f7ff ffc0 	bl	800bce8 <sbrk_aligned>
 800bd68:	1c43      	adds	r3, r0, #1
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	d155      	bne.n	800be1a <_malloc_r+0xf2>
 800bd6e:	f8d8 4000 	ldr.w	r4, [r8]
 800bd72:	4626      	mov	r6, r4
 800bd74:	2e00      	cmp	r6, #0
 800bd76:	d145      	bne.n	800be04 <_malloc_r+0xdc>
 800bd78:	2c00      	cmp	r4, #0
 800bd7a:	d048      	beq.n	800be0e <_malloc_r+0xe6>
 800bd7c:	6823      	ldr	r3, [r4, #0]
 800bd7e:	4631      	mov	r1, r6
 800bd80:	4638      	mov	r0, r7
 800bd82:	eb04 0903 	add.w	r9, r4, r3
 800bd86:	f001 f837 	bl	800cdf8 <_sbrk_r>
 800bd8a:	4581      	cmp	r9, r0
 800bd8c:	d13f      	bne.n	800be0e <_malloc_r+0xe6>
 800bd8e:	6821      	ldr	r1, [r4, #0]
 800bd90:	1a6d      	subs	r5, r5, r1
 800bd92:	4629      	mov	r1, r5
 800bd94:	4638      	mov	r0, r7
 800bd96:	f7ff ffa7 	bl	800bce8 <sbrk_aligned>
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	d037      	beq.n	800be0e <_malloc_r+0xe6>
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	442b      	add	r3, r5
 800bda2:	6023      	str	r3, [r4, #0]
 800bda4:	f8d8 3000 	ldr.w	r3, [r8]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d038      	beq.n	800be1e <_malloc_r+0xf6>
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	42a2      	cmp	r2, r4
 800bdb0:	d12b      	bne.n	800be0a <_malloc_r+0xe2>
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	605a      	str	r2, [r3, #4]
 800bdb6:	e00f      	b.n	800bdd8 <_malloc_r+0xb0>
 800bdb8:	6822      	ldr	r2, [r4, #0]
 800bdba:	1b52      	subs	r2, r2, r5
 800bdbc:	d41f      	bmi.n	800bdfe <_malloc_r+0xd6>
 800bdbe:	2a0b      	cmp	r2, #11
 800bdc0:	d917      	bls.n	800bdf2 <_malloc_r+0xca>
 800bdc2:	1961      	adds	r1, r4, r5
 800bdc4:	42a3      	cmp	r3, r4
 800bdc6:	6025      	str	r5, [r4, #0]
 800bdc8:	bf18      	it	ne
 800bdca:	6059      	strne	r1, [r3, #4]
 800bdcc:	6863      	ldr	r3, [r4, #4]
 800bdce:	bf08      	it	eq
 800bdd0:	f8c8 1000 	streq.w	r1, [r8]
 800bdd4:	5162      	str	r2, [r4, r5]
 800bdd6:	604b      	str	r3, [r1, #4]
 800bdd8:	4638      	mov	r0, r7
 800bdda:	f104 060b 	add.w	r6, r4, #11
 800bdde:	f000 f829 	bl	800be34 <__malloc_unlock>
 800bde2:	f026 0607 	bic.w	r6, r6, #7
 800bde6:	1d23      	adds	r3, r4, #4
 800bde8:	1af2      	subs	r2, r6, r3
 800bdea:	d0ae      	beq.n	800bd4a <_malloc_r+0x22>
 800bdec:	1b9b      	subs	r3, r3, r6
 800bdee:	50a3      	str	r3, [r4, r2]
 800bdf0:	e7ab      	b.n	800bd4a <_malloc_r+0x22>
 800bdf2:	42a3      	cmp	r3, r4
 800bdf4:	6862      	ldr	r2, [r4, #4]
 800bdf6:	d1dd      	bne.n	800bdb4 <_malloc_r+0x8c>
 800bdf8:	f8c8 2000 	str.w	r2, [r8]
 800bdfc:	e7ec      	b.n	800bdd8 <_malloc_r+0xb0>
 800bdfe:	4623      	mov	r3, r4
 800be00:	6864      	ldr	r4, [r4, #4]
 800be02:	e7ac      	b.n	800bd5e <_malloc_r+0x36>
 800be04:	4634      	mov	r4, r6
 800be06:	6876      	ldr	r6, [r6, #4]
 800be08:	e7b4      	b.n	800bd74 <_malloc_r+0x4c>
 800be0a:	4613      	mov	r3, r2
 800be0c:	e7cc      	b.n	800bda8 <_malloc_r+0x80>
 800be0e:	230c      	movs	r3, #12
 800be10:	603b      	str	r3, [r7, #0]
 800be12:	4638      	mov	r0, r7
 800be14:	f000 f80e 	bl	800be34 <__malloc_unlock>
 800be18:	e797      	b.n	800bd4a <_malloc_r+0x22>
 800be1a:	6025      	str	r5, [r4, #0]
 800be1c:	e7dc      	b.n	800bdd8 <_malloc_r+0xb0>
 800be1e:	605b      	str	r3, [r3, #4]
 800be20:	deff      	udf	#255	; 0xff
 800be22:	bf00      	nop
 800be24:	20000f8c 	.word	0x20000f8c

0800be28 <__malloc_lock>:
 800be28:	4801      	ldr	r0, [pc, #4]	; (800be30 <__malloc_lock+0x8>)
 800be2a:	f001 b832 	b.w	800ce92 <__retarget_lock_acquire_recursive>
 800be2e:	bf00      	nop
 800be30:	200010d4 	.word	0x200010d4

0800be34 <__malloc_unlock>:
 800be34:	4801      	ldr	r0, [pc, #4]	; (800be3c <__malloc_unlock+0x8>)
 800be36:	f001 b82d 	b.w	800ce94 <__retarget_lock_release_recursive>
 800be3a:	bf00      	nop
 800be3c:	200010d4 	.word	0x200010d4

0800be40 <__cvt>:
 800be40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be44:	ec55 4b10 	vmov	r4, r5, d0
 800be48:	2d00      	cmp	r5, #0
 800be4a:	460e      	mov	r6, r1
 800be4c:	4619      	mov	r1, r3
 800be4e:	462b      	mov	r3, r5
 800be50:	bfbb      	ittet	lt
 800be52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800be56:	461d      	movlt	r5, r3
 800be58:	2300      	movge	r3, #0
 800be5a:	232d      	movlt	r3, #45	; 0x2d
 800be5c:	700b      	strb	r3, [r1, #0]
 800be5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800be64:	4691      	mov	r9, r2
 800be66:	f023 0820 	bic.w	r8, r3, #32
 800be6a:	bfbc      	itt	lt
 800be6c:	4622      	movlt	r2, r4
 800be6e:	4614      	movlt	r4, r2
 800be70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be74:	d005      	beq.n	800be82 <__cvt+0x42>
 800be76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800be7a:	d100      	bne.n	800be7e <__cvt+0x3e>
 800be7c:	3601      	adds	r6, #1
 800be7e:	2102      	movs	r1, #2
 800be80:	e000      	b.n	800be84 <__cvt+0x44>
 800be82:	2103      	movs	r1, #3
 800be84:	ab03      	add	r3, sp, #12
 800be86:	9301      	str	r3, [sp, #4]
 800be88:	ab02      	add	r3, sp, #8
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	ec45 4b10 	vmov	d0, r4, r5
 800be90:	4653      	mov	r3, sl
 800be92:	4632      	mov	r2, r6
 800be94:	f001 f890 	bl	800cfb8 <_dtoa_r>
 800be98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800be9c:	4607      	mov	r7, r0
 800be9e:	d102      	bne.n	800bea6 <__cvt+0x66>
 800bea0:	f019 0f01 	tst.w	r9, #1
 800bea4:	d022      	beq.n	800beec <__cvt+0xac>
 800bea6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800beaa:	eb07 0906 	add.w	r9, r7, r6
 800beae:	d110      	bne.n	800bed2 <__cvt+0x92>
 800beb0:	783b      	ldrb	r3, [r7, #0]
 800beb2:	2b30      	cmp	r3, #48	; 0x30
 800beb4:	d10a      	bne.n	800becc <__cvt+0x8c>
 800beb6:	2200      	movs	r2, #0
 800beb8:	2300      	movs	r3, #0
 800beba:	4620      	mov	r0, r4
 800bebc:	4629      	mov	r1, r5
 800bebe:	f7f4 fe03 	bl	8000ac8 <__aeabi_dcmpeq>
 800bec2:	b918      	cbnz	r0, 800becc <__cvt+0x8c>
 800bec4:	f1c6 0601 	rsb	r6, r6, #1
 800bec8:	f8ca 6000 	str.w	r6, [sl]
 800becc:	f8da 3000 	ldr.w	r3, [sl]
 800bed0:	4499      	add	r9, r3
 800bed2:	2200      	movs	r2, #0
 800bed4:	2300      	movs	r3, #0
 800bed6:	4620      	mov	r0, r4
 800bed8:	4629      	mov	r1, r5
 800beda:	f7f4 fdf5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bede:	b108      	cbz	r0, 800bee4 <__cvt+0xa4>
 800bee0:	f8cd 900c 	str.w	r9, [sp, #12]
 800bee4:	2230      	movs	r2, #48	; 0x30
 800bee6:	9b03      	ldr	r3, [sp, #12]
 800bee8:	454b      	cmp	r3, r9
 800beea:	d307      	bcc.n	800befc <__cvt+0xbc>
 800beec:	9b03      	ldr	r3, [sp, #12]
 800beee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bef0:	1bdb      	subs	r3, r3, r7
 800bef2:	4638      	mov	r0, r7
 800bef4:	6013      	str	r3, [r2, #0]
 800bef6:	b004      	add	sp, #16
 800bef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800befc:	1c59      	adds	r1, r3, #1
 800befe:	9103      	str	r1, [sp, #12]
 800bf00:	701a      	strb	r2, [r3, #0]
 800bf02:	e7f0      	b.n	800bee6 <__cvt+0xa6>

0800bf04 <__exponent>:
 800bf04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf06:	4603      	mov	r3, r0
 800bf08:	2900      	cmp	r1, #0
 800bf0a:	bfb8      	it	lt
 800bf0c:	4249      	neglt	r1, r1
 800bf0e:	f803 2b02 	strb.w	r2, [r3], #2
 800bf12:	bfb4      	ite	lt
 800bf14:	222d      	movlt	r2, #45	; 0x2d
 800bf16:	222b      	movge	r2, #43	; 0x2b
 800bf18:	2909      	cmp	r1, #9
 800bf1a:	7042      	strb	r2, [r0, #1]
 800bf1c:	dd2a      	ble.n	800bf74 <__exponent+0x70>
 800bf1e:	f10d 0207 	add.w	r2, sp, #7
 800bf22:	4617      	mov	r7, r2
 800bf24:	260a      	movs	r6, #10
 800bf26:	4694      	mov	ip, r2
 800bf28:	fb91 f5f6 	sdiv	r5, r1, r6
 800bf2c:	fb06 1415 	mls	r4, r6, r5, r1
 800bf30:	3430      	adds	r4, #48	; 0x30
 800bf32:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bf36:	460c      	mov	r4, r1
 800bf38:	2c63      	cmp	r4, #99	; 0x63
 800bf3a:	f102 32ff 	add.w	r2, r2, #4294967295
 800bf3e:	4629      	mov	r1, r5
 800bf40:	dcf1      	bgt.n	800bf26 <__exponent+0x22>
 800bf42:	3130      	adds	r1, #48	; 0x30
 800bf44:	f1ac 0402 	sub.w	r4, ip, #2
 800bf48:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bf4c:	1c41      	adds	r1, r0, #1
 800bf4e:	4622      	mov	r2, r4
 800bf50:	42ba      	cmp	r2, r7
 800bf52:	d30a      	bcc.n	800bf6a <__exponent+0x66>
 800bf54:	f10d 0209 	add.w	r2, sp, #9
 800bf58:	eba2 020c 	sub.w	r2, r2, ip
 800bf5c:	42bc      	cmp	r4, r7
 800bf5e:	bf88      	it	hi
 800bf60:	2200      	movhi	r2, #0
 800bf62:	4413      	add	r3, r2
 800bf64:	1a18      	subs	r0, r3, r0
 800bf66:	b003      	add	sp, #12
 800bf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf6a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bf6e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bf72:	e7ed      	b.n	800bf50 <__exponent+0x4c>
 800bf74:	2330      	movs	r3, #48	; 0x30
 800bf76:	3130      	adds	r1, #48	; 0x30
 800bf78:	7083      	strb	r3, [r0, #2]
 800bf7a:	70c1      	strb	r1, [r0, #3]
 800bf7c:	1d03      	adds	r3, r0, #4
 800bf7e:	e7f1      	b.n	800bf64 <__exponent+0x60>

0800bf80 <_printf_float>:
 800bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	ed2d 8b02 	vpush	{d8}
 800bf88:	b08d      	sub	sp, #52	; 0x34
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bf90:	4616      	mov	r6, r2
 800bf92:	461f      	mov	r7, r3
 800bf94:	4605      	mov	r5, r0
 800bf96:	f000 fef7 	bl	800cd88 <_localeconv_r>
 800bf9a:	f8d0 a000 	ldr.w	sl, [r0]
 800bf9e:	4650      	mov	r0, sl
 800bfa0:	f7f4 f966 	bl	8000270 <strlen>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	930a      	str	r3, [sp, #40]	; 0x28
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	9305      	str	r3, [sp, #20]
 800bfac:	f8d8 3000 	ldr.w	r3, [r8]
 800bfb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bfb4:	3307      	adds	r3, #7
 800bfb6:	f023 0307 	bic.w	r3, r3, #7
 800bfba:	f103 0208 	add.w	r2, r3, #8
 800bfbe:	f8c8 2000 	str.w	r2, [r8]
 800bfc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bfc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bfca:	9307      	str	r3, [sp, #28]
 800bfcc:	f8cd 8018 	str.w	r8, [sp, #24]
 800bfd0:	ee08 0a10 	vmov	s16, r0
 800bfd4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bfd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfdc:	4b9e      	ldr	r3, [pc, #632]	; (800c258 <_printf_float+0x2d8>)
 800bfde:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe2:	f7f4 fda3 	bl	8000b2c <__aeabi_dcmpun>
 800bfe6:	bb88      	cbnz	r0, 800c04c <_printf_float+0xcc>
 800bfe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfec:	4b9a      	ldr	r3, [pc, #616]	; (800c258 <_printf_float+0x2d8>)
 800bfee:	f04f 32ff 	mov.w	r2, #4294967295
 800bff2:	f7f4 fd7d 	bl	8000af0 <__aeabi_dcmple>
 800bff6:	bb48      	cbnz	r0, 800c04c <_printf_float+0xcc>
 800bff8:	2200      	movs	r2, #0
 800bffa:	2300      	movs	r3, #0
 800bffc:	4640      	mov	r0, r8
 800bffe:	4649      	mov	r1, r9
 800c000:	f7f4 fd6c 	bl	8000adc <__aeabi_dcmplt>
 800c004:	b110      	cbz	r0, 800c00c <_printf_float+0x8c>
 800c006:	232d      	movs	r3, #45	; 0x2d
 800c008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c00c:	4a93      	ldr	r2, [pc, #588]	; (800c25c <_printf_float+0x2dc>)
 800c00e:	4b94      	ldr	r3, [pc, #592]	; (800c260 <_printf_float+0x2e0>)
 800c010:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c014:	bf94      	ite	ls
 800c016:	4690      	movls	r8, r2
 800c018:	4698      	movhi	r8, r3
 800c01a:	2303      	movs	r3, #3
 800c01c:	6123      	str	r3, [r4, #16]
 800c01e:	9b05      	ldr	r3, [sp, #20]
 800c020:	f023 0304 	bic.w	r3, r3, #4
 800c024:	6023      	str	r3, [r4, #0]
 800c026:	f04f 0900 	mov.w	r9, #0
 800c02a:	9700      	str	r7, [sp, #0]
 800c02c:	4633      	mov	r3, r6
 800c02e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c030:	4621      	mov	r1, r4
 800c032:	4628      	mov	r0, r5
 800c034:	f000 f9da 	bl	800c3ec <_printf_common>
 800c038:	3001      	adds	r0, #1
 800c03a:	f040 8090 	bne.w	800c15e <_printf_float+0x1de>
 800c03e:	f04f 30ff 	mov.w	r0, #4294967295
 800c042:	b00d      	add	sp, #52	; 0x34
 800c044:	ecbd 8b02 	vpop	{d8}
 800c048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04c:	4642      	mov	r2, r8
 800c04e:	464b      	mov	r3, r9
 800c050:	4640      	mov	r0, r8
 800c052:	4649      	mov	r1, r9
 800c054:	f7f4 fd6a 	bl	8000b2c <__aeabi_dcmpun>
 800c058:	b140      	cbz	r0, 800c06c <_printf_float+0xec>
 800c05a:	464b      	mov	r3, r9
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	bfbc      	itt	lt
 800c060:	232d      	movlt	r3, #45	; 0x2d
 800c062:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c066:	4a7f      	ldr	r2, [pc, #508]	; (800c264 <_printf_float+0x2e4>)
 800c068:	4b7f      	ldr	r3, [pc, #508]	; (800c268 <_printf_float+0x2e8>)
 800c06a:	e7d1      	b.n	800c010 <_printf_float+0x90>
 800c06c:	6863      	ldr	r3, [r4, #4]
 800c06e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c072:	9206      	str	r2, [sp, #24]
 800c074:	1c5a      	adds	r2, r3, #1
 800c076:	d13f      	bne.n	800c0f8 <_printf_float+0x178>
 800c078:	2306      	movs	r3, #6
 800c07a:	6063      	str	r3, [r4, #4]
 800c07c:	9b05      	ldr	r3, [sp, #20]
 800c07e:	6861      	ldr	r1, [r4, #4]
 800c080:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c084:	2300      	movs	r3, #0
 800c086:	9303      	str	r3, [sp, #12]
 800c088:	ab0a      	add	r3, sp, #40	; 0x28
 800c08a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c08e:	ab09      	add	r3, sp, #36	; 0x24
 800c090:	ec49 8b10 	vmov	d0, r8, r9
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	6022      	str	r2, [r4, #0]
 800c098:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c09c:	4628      	mov	r0, r5
 800c09e:	f7ff fecf 	bl	800be40 <__cvt>
 800c0a2:	9b06      	ldr	r3, [sp, #24]
 800c0a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0a6:	2b47      	cmp	r3, #71	; 0x47
 800c0a8:	4680      	mov	r8, r0
 800c0aa:	d108      	bne.n	800c0be <_printf_float+0x13e>
 800c0ac:	1cc8      	adds	r0, r1, #3
 800c0ae:	db02      	blt.n	800c0b6 <_printf_float+0x136>
 800c0b0:	6863      	ldr	r3, [r4, #4]
 800c0b2:	4299      	cmp	r1, r3
 800c0b4:	dd41      	ble.n	800c13a <_printf_float+0x1ba>
 800c0b6:	f1ab 0302 	sub.w	r3, fp, #2
 800c0ba:	fa5f fb83 	uxtb.w	fp, r3
 800c0be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c0c2:	d820      	bhi.n	800c106 <_printf_float+0x186>
 800c0c4:	3901      	subs	r1, #1
 800c0c6:	465a      	mov	r2, fp
 800c0c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c0cc:	9109      	str	r1, [sp, #36]	; 0x24
 800c0ce:	f7ff ff19 	bl	800bf04 <__exponent>
 800c0d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0d4:	1813      	adds	r3, r2, r0
 800c0d6:	2a01      	cmp	r2, #1
 800c0d8:	4681      	mov	r9, r0
 800c0da:	6123      	str	r3, [r4, #16]
 800c0dc:	dc02      	bgt.n	800c0e4 <_printf_float+0x164>
 800c0de:	6822      	ldr	r2, [r4, #0]
 800c0e0:	07d2      	lsls	r2, r2, #31
 800c0e2:	d501      	bpl.n	800c0e8 <_printf_float+0x168>
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	6123      	str	r3, [r4, #16]
 800c0e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d09c      	beq.n	800c02a <_printf_float+0xaa>
 800c0f0:	232d      	movs	r3, #45	; 0x2d
 800c0f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0f6:	e798      	b.n	800c02a <_printf_float+0xaa>
 800c0f8:	9a06      	ldr	r2, [sp, #24]
 800c0fa:	2a47      	cmp	r2, #71	; 0x47
 800c0fc:	d1be      	bne.n	800c07c <_printf_float+0xfc>
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1bc      	bne.n	800c07c <_printf_float+0xfc>
 800c102:	2301      	movs	r3, #1
 800c104:	e7b9      	b.n	800c07a <_printf_float+0xfa>
 800c106:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c10a:	d118      	bne.n	800c13e <_printf_float+0x1be>
 800c10c:	2900      	cmp	r1, #0
 800c10e:	6863      	ldr	r3, [r4, #4]
 800c110:	dd0b      	ble.n	800c12a <_printf_float+0x1aa>
 800c112:	6121      	str	r1, [r4, #16]
 800c114:	b913      	cbnz	r3, 800c11c <_printf_float+0x19c>
 800c116:	6822      	ldr	r2, [r4, #0]
 800c118:	07d0      	lsls	r0, r2, #31
 800c11a:	d502      	bpl.n	800c122 <_printf_float+0x1a2>
 800c11c:	3301      	adds	r3, #1
 800c11e:	440b      	add	r3, r1
 800c120:	6123      	str	r3, [r4, #16]
 800c122:	65a1      	str	r1, [r4, #88]	; 0x58
 800c124:	f04f 0900 	mov.w	r9, #0
 800c128:	e7de      	b.n	800c0e8 <_printf_float+0x168>
 800c12a:	b913      	cbnz	r3, 800c132 <_printf_float+0x1b2>
 800c12c:	6822      	ldr	r2, [r4, #0]
 800c12e:	07d2      	lsls	r2, r2, #31
 800c130:	d501      	bpl.n	800c136 <_printf_float+0x1b6>
 800c132:	3302      	adds	r3, #2
 800c134:	e7f4      	b.n	800c120 <_printf_float+0x1a0>
 800c136:	2301      	movs	r3, #1
 800c138:	e7f2      	b.n	800c120 <_printf_float+0x1a0>
 800c13a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c140:	4299      	cmp	r1, r3
 800c142:	db05      	blt.n	800c150 <_printf_float+0x1d0>
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	6121      	str	r1, [r4, #16]
 800c148:	07d8      	lsls	r0, r3, #31
 800c14a:	d5ea      	bpl.n	800c122 <_printf_float+0x1a2>
 800c14c:	1c4b      	adds	r3, r1, #1
 800c14e:	e7e7      	b.n	800c120 <_printf_float+0x1a0>
 800c150:	2900      	cmp	r1, #0
 800c152:	bfd4      	ite	le
 800c154:	f1c1 0202 	rsble	r2, r1, #2
 800c158:	2201      	movgt	r2, #1
 800c15a:	4413      	add	r3, r2
 800c15c:	e7e0      	b.n	800c120 <_printf_float+0x1a0>
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	055a      	lsls	r2, r3, #21
 800c162:	d407      	bmi.n	800c174 <_printf_float+0x1f4>
 800c164:	6923      	ldr	r3, [r4, #16]
 800c166:	4642      	mov	r2, r8
 800c168:	4631      	mov	r1, r6
 800c16a:	4628      	mov	r0, r5
 800c16c:	47b8      	blx	r7
 800c16e:	3001      	adds	r0, #1
 800c170:	d12c      	bne.n	800c1cc <_printf_float+0x24c>
 800c172:	e764      	b.n	800c03e <_printf_float+0xbe>
 800c174:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c178:	f240 80e0 	bls.w	800c33c <_printf_float+0x3bc>
 800c17c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c180:	2200      	movs	r2, #0
 800c182:	2300      	movs	r3, #0
 800c184:	f7f4 fca0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d034      	beq.n	800c1f6 <_printf_float+0x276>
 800c18c:	4a37      	ldr	r2, [pc, #220]	; (800c26c <_printf_float+0x2ec>)
 800c18e:	2301      	movs	r3, #1
 800c190:	4631      	mov	r1, r6
 800c192:	4628      	mov	r0, r5
 800c194:	47b8      	blx	r7
 800c196:	3001      	adds	r0, #1
 800c198:	f43f af51 	beq.w	800c03e <_printf_float+0xbe>
 800c19c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	db02      	blt.n	800c1aa <_printf_float+0x22a>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	07d8      	lsls	r0, r3, #31
 800c1a8:	d510      	bpl.n	800c1cc <_printf_float+0x24c>
 800c1aa:	ee18 3a10 	vmov	r3, s16
 800c1ae:	4652      	mov	r2, sl
 800c1b0:	4631      	mov	r1, r6
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	47b8      	blx	r7
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	f43f af41 	beq.w	800c03e <_printf_float+0xbe>
 800c1bc:	f04f 0800 	mov.w	r8, #0
 800c1c0:	f104 091a 	add.w	r9, r4, #26
 800c1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	4543      	cmp	r3, r8
 800c1ca:	dc09      	bgt.n	800c1e0 <_printf_float+0x260>
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	079b      	lsls	r3, r3, #30
 800c1d0:	f100 8107 	bmi.w	800c3e2 <_printf_float+0x462>
 800c1d4:	68e0      	ldr	r0, [r4, #12]
 800c1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1d8:	4298      	cmp	r0, r3
 800c1da:	bfb8      	it	lt
 800c1dc:	4618      	movlt	r0, r3
 800c1de:	e730      	b.n	800c042 <_printf_float+0xc2>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	464a      	mov	r2, r9
 800c1e4:	4631      	mov	r1, r6
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	47b8      	blx	r7
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	f43f af27 	beq.w	800c03e <_printf_float+0xbe>
 800c1f0:	f108 0801 	add.w	r8, r8, #1
 800c1f4:	e7e6      	b.n	800c1c4 <_printf_float+0x244>
 800c1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	dc39      	bgt.n	800c270 <_printf_float+0x2f0>
 800c1fc:	4a1b      	ldr	r2, [pc, #108]	; (800c26c <_printf_float+0x2ec>)
 800c1fe:	2301      	movs	r3, #1
 800c200:	4631      	mov	r1, r6
 800c202:	4628      	mov	r0, r5
 800c204:	47b8      	blx	r7
 800c206:	3001      	adds	r0, #1
 800c208:	f43f af19 	beq.w	800c03e <_printf_float+0xbe>
 800c20c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c210:	4313      	orrs	r3, r2
 800c212:	d102      	bne.n	800c21a <_printf_float+0x29a>
 800c214:	6823      	ldr	r3, [r4, #0]
 800c216:	07d9      	lsls	r1, r3, #31
 800c218:	d5d8      	bpl.n	800c1cc <_printf_float+0x24c>
 800c21a:	ee18 3a10 	vmov	r3, s16
 800c21e:	4652      	mov	r2, sl
 800c220:	4631      	mov	r1, r6
 800c222:	4628      	mov	r0, r5
 800c224:	47b8      	blx	r7
 800c226:	3001      	adds	r0, #1
 800c228:	f43f af09 	beq.w	800c03e <_printf_float+0xbe>
 800c22c:	f04f 0900 	mov.w	r9, #0
 800c230:	f104 0a1a 	add.w	sl, r4, #26
 800c234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c236:	425b      	negs	r3, r3
 800c238:	454b      	cmp	r3, r9
 800c23a:	dc01      	bgt.n	800c240 <_printf_float+0x2c0>
 800c23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c23e:	e792      	b.n	800c166 <_printf_float+0x1e6>
 800c240:	2301      	movs	r3, #1
 800c242:	4652      	mov	r2, sl
 800c244:	4631      	mov	r1, r6
 800c246:	4628      	mov	r0, r5
 800c248:	47b8      	blx	r7
 800c24a:	3001      	adds	r0, #1
 800c24c:	f43f aef7 	beq.w	800c03e <_printf_float+0xbe>
 800c250:	f109 0901 	add.w	r9, r9, #1
 800c254:	e7ee      	b.n	800c234 <_printf_float+0x2b4>
 800c256:	bf00      	nop
 800c258:	7fefffff 	.word	0x7fefffff
 800c25c:	0801051c 	.word	0x0801051c
 800c260:	08010520 	.word	0x08010520
 800c264:	08010524 	.word	0x08010524
 800c268:	08010528 	.word	0x08010528
 800c26c:	0801052c 	.word	0x0801052c
 800c270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c274:	429a      	cmp	r2, r3
 800c276:	bfa8      	it	ge
 800c278:	461a      	movge	r2, r3
 800c27a:	2a00      	cmp	r2, #0
 800c27c:	4691      	mov	r9, r2
 800c27e:	dc37      	bgt.n	800c2f0 <_printf_float+0x370>
 800c280:	f04f 0b00 	mov.w	fp, #0
 800c284:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c288:	f104 021a 	add.w	r2, r4, #26
 800c28c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c28e:	9305      	str	r3, [sp, #20]
 800c290:	eba3 0309 	sub.w	r3, r3, r9
 800c294:	455b      	cmp	r3, fp
 800c296:	dc33      	bgt.n	800c300 <_printf_float+0x380>
 800c298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c29c:	429a      	cmp	r2, r3
 800c29e:	db3b      	blt.n	800c318 <_printf_float+0x398>
 800c2a0:	6823      	ldr	r3, [r4, #0]
 800c2a2:	07da      	lsls	r2, r3, #31
 800c2a4:	d438      	bmi.n	800c318 <_printf_float+0x398>
 800c2a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c2aa:	eba2 0903 	sub.w	r9, r2, r3
 800c2ae:	9b05      	ldr	r3, [sp, #20]
 800c2b0:	1ad2      	subs	r2, r2, r3
 800c2b2:	4591      	cmp	r9, r2
 800c2b4:	bfa8      	it	ge
 800c2b6:	4691      	movge	r9, r2
 800c2b8:	f1b9 0f00 	cmp.w	r9, #0
 800c2bc:	dc35      	bgt.n	800c32a <_printf_float+0x3aa>
 800c2be:	f04f 0800 	mov.w	r8, #0
 800c2c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2c6:	f104 0a1a 	add.w	sl, r4, #26
 800c2ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2ce:	1a9b      	subs	r3, r3, r2
 800c2d0:	eba3 0309 	sub.w	r3, r3, r9
 800c2d4:	4543      	cmp	r3, r8
 800c2d6:	f77f af79 	ble.w	800c1cc <_printf_float+0x24c>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	4652      	mov	r2, sl
 800c2de:	4631      	mov	r1, r6
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b8      	blx	r7
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	f43f aeaa 	beq.w	800c03e <_printf_float+0xbe>
 800c2ea:	f108 0801 	add.w	r8, r8, #1
 800c2ee:	e7ec      	b.n	800c2ca <_printf_float+0x34a>
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4642      	mov	r2, r8
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	47b8      	blx	r7
 800c2fa:	3001      	adds	r0, #1
 800c2fc:	d1c0      	bne.n	800c280 <_printf_float+0x300>
 800c2fe:	e69e      	b.n	800c03e <_printf_float+0xbe>
 800c300:	2301      	movs	r3, #1
 800c302:	4631      	mov	r1, r6
 800c304:	4628      	mov	r0, r5
 800c306:	9205      	str	r2, [sp, #20]
 800c308:	47b8      	blx	r7
 800c30a:	3001      	adds	r0, #1
 800c30c:	f43f ae97 	beq.w	800c03e <_printf_float+0xbe>
 800c310:	9a05      	ldr	r2, [sp, #20]
 800c312:	f10b 0b01 	add.w	fp, fp, #1
 800c316:	e7b9      	b.n	800c28c <_printf_float+0x30c>
 800c318:	ee18 3a10 	vmov	r3, s16
 800c31c:	4652      	mov	r2, sl
 800c31e:	4631      	mov	r1, r6
 800c320:	4628      	mov	r0, r5
 800c322:	47b8      	blx	r7
 800c324:	3001      	adds	r0, #1
 800c326:	d1be      	bne.n	800c2a6 <_printf_float+0x326>
 800c328:	e689      	b.n	800c03e <_printf_float+0xbe>
 800c32a:	9a05      	ldr	r2, [sp, #20]
 800c32c:	464b      	mov	r3, r9
 800c32e:	4442      	add	r2, r8
 800c330:	4631      	mov	r1, r6
 800c332:	4628      	mov	r0, r5
 800c334:	47b8      	blx	r7
 800c336:	3001      	adds	r0, #1
 800c338:	d1c1      	bne.n	800c2be <_printf_float+0x33e>
 800c33a:	e680      	b.n	800c03e <_printf_float+0xbe>
 800c33c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c33e:	2a01      	cmp	r2, #1
 800c340:	dc01      	bgt.n	800c346 <_printf_float+0x3c6>
 800c342:	07db      	lsls	r3, r3, #31
 800c344:	d53a      	bpl.n	800c3bc <_printf_float+0x43c>
 800c346:	2301      	movs	r3, #1
 800c348:	4642      	mov	r2, r8
 800c34a:	4631      	mov	r1, r6
 800c34c:	4628      	mov	r0, r5
 800c34e:	47b8      	blx	r7
 800c350:	3001      	adds	r0, #1
 800c352:	f43f ae74 	beq.w	800c03e <_printf_float+0xbe>
 800c356:	ee18 3a10 	vmov	r3, s16
 800c35a:	4652      	mov	r2, sl
 800c35c:	4631      	mov	r1, r6
 800c35e:	4628      	mov	r0, r5
 800c360:	47b8      	blx	r7
 800c362:	3001      	adds	r0, #1
 800c364:	f43f ae6b 	beq.w	800c03e <_printf_float+0xbe>
 800c368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c36c:	2200      	movs	r2, #0
 800c36e:	2300      	movs	r3, #0
 800c370:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c374:	f7f4 fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c378:	b9d8      	cbnz	r0, 800c3b2 <_printf_float+0x432>
 800c37a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c37e:	f108 0201 	add.w	r2, r8, #1
 800c382:	4631      	mov	r1, r6
 800c384:	4628      	mov	r0, r5
 800c386:	47b8      	blx	r7
 800c388:	3001      	adds	r0, #1
 800c38a:	d10e      	bne.n	800c3aa <_printf_float+0x42a>
 800c38c:	e657      	b.n	800c03e <_printf_float+0xbe>
 800c38e:	2301      	movs	r3, #1
 800c390:	4652      	mov	r2, sl
 800c392:	4631      	mov	r1, r6
 800c394:	4628      	mov	r0, r5
 800c396:	47b8      	blx	r7
 800c398:	3001      	adds	r0, #1
 800c39a:	f43f ae50 	beq.w	800c03e <_printf_float+0xbe>
 800c39e:	f108 0801 	add.w	r8, r8, #1
 800c3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	4543      	cmp	r3, r8
 800c3a8:	dcf1      	bgt.n	800c38e <_printf_float+0x40e>
 800c3aa:	464b      	mov	r3, r9
 800c3ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c3b0:	e6da      	b.n	800c168 <_printf_float+0x1e8>
 800c3b2:	f04f 0800 	mov.w	r8, #0
 800c3b6:	f104 0a1a 	add.w	sl, r4, #26
 800c3ba:	e7f2      	b.n	800c3a2 <_printf_float+0x422>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	4642      	mov	r2, r8
 800c3c0:	e7df      	b.n	800c382 <_printf_float+0x402>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	464a      	mov	r2, r9
 800c3c6:	4631      	mov	r1, r6
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	47b8      	blx	r7
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	f43f ae36 	beq.w	800c03e <_printf_float+0xbe>
 800c3d2:	f108 0801 	add.w	r8, r8, #1
 800c3d6:	68e3      	ldr	r3, [r4, #12]
 800c3d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c3da:	1a5b      	subs	r3, r3, r1
 800c3dc:	4543      	cmp	r3, r8
 800c3de:	dcf0      	bgt.n	800c3c2 <_printf_float+0x442>
 800c3e0:	e6f8      	b.n	800c1d4 <_printf_float+0x254>
 800c3e2:	f04f 0800 	mov.w	r8, #0
 800c3e6:	f104 0919 	add.w	r9, r4, #25
 800c3ea:	e7f4      	b.n	800c3d6 <_printf_float+0x456>

0800c3ec <_printf_common>:
 800c3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f0:	4616      	mov	r6, r2
 800c3f2:	4699      	mov	r9, r3
 800c3f4:	688a      	ldr	r2, [r1, #8]
 800c3f6:	690b      	ldr	r3, [r1, #16]
 800c3f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	bfb8      	it	lt
 800c400:	4613      	movlt	r3, r2
 800c402:	6033      	str	r3, [r6, #0]
 800c404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c408:	4607      	mov	r7, r0
 800c40a:	460c      	mov	r4, r1
 800c40c:	b10a      	cbz	r2, 800c412 <_printf_common+0x26>
 800c40e:	3301      	adds	r3, #1
 800c410:	6033      	str	r3, [r6, #0]
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	0699      	lsls	r1, r3, #26
 800c416:	bf42      	ittt	mi
 800c418:	6833      	ldrmi	r3, [r6, #0]
 800c41a:	3302      	addmi	r3, #2
 800c41c:	6033      	strmi	r3, [r6, #0]
 800c41e:	6825      	ldr	r5, [r4, #0]
 800c420:	f015 0506 	ands.w	r5, r5, #6
 800c424:	d106      	bne.n	800c434 <_printf_common+0x48>
 800c426:	f104 0a19 	add.w	sl, r4, #25
 800c42a:	68e3      	ldr	r3, [r4, #12]
 800c42c:	6832      	ldr	r2, [r6, #0]
 800c42e:	1a9b      	subs	r3, r3, r2
 800c430:	42ab      	cmp	r3, r5
 800c432:	dc26      	bgt.n	800c482 <_printf_common+0x96>
 800c434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c438:	1e13      	subs	r3, r2, #0
 800c43a:	6822      	ldr	r2, [r4, #0]
 800c43c:	bf18      	it	ne
 800c43e:	2301      	movne	r3, #1
 800c440:	0692      	lsls	r2, r2, #26
 800c442:	d42b      	bmi.n	800c49c <_printf_common+0xb0>
 800c444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c448:	4649      	mov	r1, r9
 800c44a:	4638      	mov	r0, r7
 800c44c:	47c0      	blx	r8
 800c44e:	3001      	adds	r0, #1
 800c450:	d01e      	beq.n	800c490 <_printf_common+0xa4>
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	6922      	ldr	r2, [r4, #16]
 800c456:	f003 0306 	and.w	r3, r3, #6
 800c45a:	2b04      	cmp	r3, #4
 800c45c:	bf02      	ittt	eq
 800c45e:	68e5      	ldreq	r5, [r4, #12]
 800c460:	6833      	ldreq	r3, [r6, #0]
 800c462:	1aed      	subeq	r5, r5, r3
 800c464:	68a3      	ldr	r3, [r4, #8]
 800c466:	bf0c      	ite	eq
 800c468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c46c:	2500      	movne	r5, #0
 800c46e:	4293      	cmp	r3, r2
 800c470:	bfc4      	itt	gt
 800c472:	1a9b      	subgt	r3, r3, r2
 800c474:	18ed      	addgt	r5, r5, r3
 800c476:	2600      	movs	r6, #0
 800c478:	341a      	adds	r4, #26
 800c47a:	42b5      	cmp	r5, r6
 800c47c:	d11a      	bne.n	800c4b4 <_printf_common+0xc8>
 800c47e:	2000      	movs	r0, #0
 800c480:	e008      	b.n	800c494 <_printf_common+0xa8>
 800c482:	2301      	movs	r3, #1
 800c484:	4652      	mov	r2, sl
 800c486:	4649      	mov	r1, r9
 800c488:	4638      	mov	r0, r7
 800c48a:	47c0      	blx	r8
 800c48c:	3001      	adds	r0, #1
 800c48e:	d103      	bne.n	800c498 <_printf_common+0xac>
 800c490:	f04f 30ff 	mov.w	r0, #4294967295
 800c494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c498:	3501      	adds	r5, #1
 800c49a:	e7c6      	b.n	800c42a <_printf_common+0x3e>
 800c49c:	18e1      	adds	r1, r4, r3
 800c49e:	1c5a      	adds	r2, r3, #1
 800c4a0:	2030      	movs	r0, #48	; 0x30
 800c4a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4a6:	4422      	add	r2, r4
 800c4a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4b0:	3302      	adds	r3, #2
 800c4b2:	e7c7      	b.n	800c444 <_printf_common+0x58>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	4649      	mov	r1, r9
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	47c0      	blx	r8
 800c4be:	3001      	adds	r0, #1
 800c4c0:	d0e6      	beq.n	800c490 <_printf_common+0xa4>
 800c4c2:	3601      	adds	r6, #1
 800c4c4:	e7d9      	b.n	800c47a <_printf_common+0x8e>
	...

0800c4c8 <_printf_i>:
 800c4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4cc:	7e0f      	ldrb	r7, [r1, #24]
 800c4ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c4d0:	2f78      	cmp	r7, #120	; 0x78
 800c4d2:	4691      	mov	r9, r2
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	469a      	mov	sl, r3
 800c4da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c4de:	d807      	bhi.n	800c4f0 <_printf_i+0x28>
 800c4e0:	2f62      	cmp	r7, #98	; 0x62
 800c4e2:	d80a      	bhi.n	800c4fa <_printf_i+0x32>
 800c4e4:	2f00      	cmp	r7, #0
 800c4e6:	f000 80d4 	beq.w	800c692 <_printf_i+0x1ca>
 800c4ea:	2f58      	cmp	r7, #88	; 0x58
 800c4ec:	f000 80c0 	beq.w	800c670 <_printf_i+0x1a8>
 800c4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c4f8:	e03a      	b.n	800c570 <_printf_i+0xa8>
 800c4fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4fe:	2b15      	cmp	r3, #21
 800c500:	d8f6      	bhi.n	800c4f0 <_printf_i+0x28>
 800c502:	a101      	add	r1, pc, #4	; (adr r1, 800c508 <_printf_i+0x40>)
 800c504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c508:	0800c561 	.word	0x0800c561
 800c50c:	0800c575 	.word	0x0800c575
 800c510:	0800c4f1 	.word	0x0800c4f1
 800c514:	0800c4f1 	.word	0x0800c4f1
 800c518:	0800c4f1 	.word	0x0800c4f1
 800c51c:	0800c4f1 	.word	0x0800c4f1
 800c520:	0800c575 	.word	0x0800c575
 800c524:	0800c4f1 	.word	0x0800c4f1
 800c528:	0800c4f1 	.word	0x0800c4f1
 800c52c:	0800c4f1 	.word	0x0800c4f1
 800c530:	0800c4f1 	.word	0x0800c4f1
 800c534:	0800c679 	.word	0x0800c679
 800c538:	0800c5a1 	.word	0x0800c5a1
 800c53c:	0800c633 	.word	0x0800c633
 800c540:	0800c4f1 	.word	0x0800c4f1
 800c544:	0800c4f1 	.word	0x0800c4f1
 800c548:	0800c69b 	.word	0x0800c69b
 800c54c:	0800c4f1 	.word	0x0800c4f1
 800c550:	0800c5a1 	.word	0x0800c5a1
 800c554:	0800c4f1 	.word	0x0800c4f1
 800c558:	0800c4f1 	.word	0x0800c4f1
 800c55c:	0800c63b 	.word	0x0800c63b
 800c560:	682b      	ldr	r3, [r5, #0]
 800c562:	1d1a      	adds	r2, r3, #4
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	602a      	str	r2, [r5, #0]
 800c568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c56c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c570:	2301      	movs	r3, #1
 800c572:	e09f      	b.n	800c6b4 <_printf_i+0x1ec>
 800c574:	6820      	ldr	r0, [r4, #0]
 800c576:	682b      	ldr	r3, [r5, #0]
 800c578:	0607      	lsls	r7, r0, #24
 800c57a:	f103 0104 	add.w	r1, r3, #4
 800c57e:	6029      	str	r1, [r5, #0]
 800c580:	d501      	bpl.n	800c586 <_printf_i+0xbe>
 800c582:	681e      	ldr	r6, [r3, #0]
 800c584:	e003      	b.n	800c58e <_printf_i+0xc6>
 800c586:	0646      	lsls	r6, r0, #25
 800c588:	d5fb      	bpl.n	800c582 <_printf_i+0xba>
 800c58a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c58e:	2e00      	cmp	r6, #0
 800c590:	da03      	bge.n	800c59a <_printf_i+0xd2>
 800c592:	232d      	movs	r3, #45	; 0x2d
 800c594:	4276      	negs	r6, r6
 800c596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c59a:	485a      	ldr	r0, [pc, #360]	; (800c704 <_printf_i+0x23c>)
 800c59c:	230a      	movs	r3, #10
 800c59e:	e012      	b.n	800c5c6 <_printf_i+0xfe>
 800c5a0:	682b      	ldr	r3, [r5, #0]
 800c5a2:	6820      	ldr	r0, [r4, #0]
 800c5a4:	1d19      	adds	r1, r3, #4
 800c5a6:	6029      	str	r1, [r5, #0]
 800c5a8:	0605      	lsls	r5, r0, #24
 800c5aa:	d501      	bpl.n	800c5b0 <_printf_i+0xe8>
 800c5ac:	681e      	ldr	r6, [r3, #0]
 800c5ae:	e002      	b.n	800c5b6 <_printf_i+0xee>
 800c5b0:	0641      	lsls	r1, r0, #25
 800c5b2:	d5fb      	bpl.n	800c5ac <_printf_i+0xe4>
 800c5b4:	881e      	ldrh	r6, [r3, #0]
 800c5b6:	4853      	ldr	r0, [pc, #332]	; (800c704 <_printf_i+0x23c>)
 800c5b8:	2f6f      	cmp	r7, #111	; 0x6f
 800c5ba:	bf0c      	ite	eq
 800c5bc:	2308      	moveq	r3, #8
 800c5be:	230a      	movne	r3, #10
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5c6:	6865      	ldr	r5, [r4, #4]
 800c5c8:	60a5      	str	r5, [r4, #8]
 800c5ca:	2d00      	cmp	r5, #0
 800c5cc:	bfa2      	ittt	ge
 800c5ce:	6821      	ldrge	r1, [r4, #0]
 800c5d0:	f021 0104 	bicge.w	r1, r1, #4
 800c5d4:	6021      	strge	r1, [r4, #0]
 800c5d6:	b90e      	cbnz	r6, 800c5dc <_printf_i+0x114>
 800c5d8:	2d00      	cmp	r5, #0
 800c5da:	d04b      	beq.n	800c674 <_printf_i+0x1ac>
 800c5dc:	4615      	mov	r5, r2
 800c5de:	fbb6 f1f3 	udiv	r1, r6, r3
 800c5e2:	fb03 6711 	mls	r7, r3, r1, r6
 800c5e6:	5dc7      	ldrb	r7, [r0, r7]
 800c5e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c5ec:	4637      	mov	r7, r6
 800c5ee:	42bb      	cmp	r3, r7
 800c5f0:	460e      	mov	r6, r1
 800c5f2:	d9f4      	bls.n	800c5de <_printf_i+0x116>
 800c5f4:	2b08      	cmp	r3, #8
 800c5f6:	d10b      	bne.n	800c610 <_printf_i+0x148>
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	07de      	lsls	r6, r3, #31
 800c5fc:	d508      	bpl.n	800c610 <_printf_i+0x148>
 800c5fe:	6923      	ldr	r3, [r4, #16]
 800c600:	6861      	ldr	r1, [r4, #4]
 800c602:	4299      	cmp	r1, r3
 800c604:	bfde      	ittt	le
 800c606:	2330      	movle	r3, #48	; 0x30
 800c608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c60c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c610:	1b52      	subs	r2, r2, r5
 800c612:	6122      	str	r2, [r4, #16]
 800c614:	f8cd a000 	str.w	sl, [sp]
 800c618:	464b      	mov	r3, r9
 800c61a:	aa03      	add	r2, sp, #12
 800c61c:	4621      	mov	r1, r4
 800c61e:	4640      	mov	r0, r8
 800c620:	f7ff fee4 	bl	800c3ec <_printf_common>
 800c624:	3001      	adds	r0, #1
 800c626:	d14a      	bne.n	800c6be <_printf_i+0x1f6>
 800c628:	f04f 30ff 	mov.w	r0, #4294967295
 800c62c:	b004      	add	sp, #16
 800c62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	f043 0320 	orr.w	r3, r3, #32
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	4833      	ldr	r0, [pc, #204]	; (800c708 <_printf_i+0x240>)
 800c63c:	2778      	movs	r7, #120	; 0x78
 800c63e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c642:	6823      	ldr	r3, [r4, #0]
 800c644:	6829      	ldr	r1, [r5, #0]
 800c646:	061f      	lsls	r7, r3, #24
 800c648:	f851 6b04 	ldr.w	r6, [r1], #4
 800c64c:	d402      	bmi.n	800c654 <_printf_i+0x18c>
 800c64e:	065f      	lsls	r7, r3, #25
 800c650:	bf48      	it	mi
 800c652:	b2b6      	uxthmi	r6, r6
 800c654:	07df      	lsls	r7, r3, #31
 800c656:	bf48      	it	mi
 800c658:	f043 0320 	orrmi.w	r3, r3, #32
 800c65c:	6029      	str	r1, [r5, #0]
 800c65e:	bf48      	it	mi
 800c660:	6023      	strmi	r3, [r4, #0]
 800c662:	b91e      	cbnz	r6, 800c66c <_printf_i+0x1a4>
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	f023 0320 	bic.w	r3, r3, #32
 800c66a:	6023      	str	r3, [r4, #0]
 800c66c:	2310      	movs	r3, #16
 800c66e:	e7a7      	b.n	800c5c0 <_printf_i+0xf8>
 800c670:	4824      	ldr	r0, [pc, #144]	; (800c704 <_printf_i+0x23c>)
 800c672:	e7e4      	b.n	800c63e <_printf_i+0x176>
 800c674:	4615      	mov	r5, r2
 800c676:	e7bd      	b.n	800c5f4 <_printf_i+0x12c>
 800c678:	682b      	ldr	r3, [r5, #0]
 800c67a:	6826      	ldr	r6, [r4, #0]
 800c67c:	6961      	ldr	r1, [r4, #20]
 800c67e:	1d18      	adds	r0, r3, #4
 800c680:	6028      	str	r0, [r5, #0]
 800c682:	0635      	lsls	r5, r6, #24
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	d501      	bpl.n	800c68c <_printf_i+0x1c4>
 800c688:	6019      	str	r1, [r3, #0]
 800c68a:	e002      	b.n	800c692 <_printf_i+0x1ca>
 800c68c:	0670      	lsls	r0, r6, #25
 800c68e:	d5fb      	bpl.n	800c688 <_printf_i+0x1c0>
 800c690:	8019      	strh	r1, [r3, #0]
 800c692:	2300      	movs	r3, #0
 800c694:	6123      	str	r3, [r4, #16]
 800c696:	4615      	mov	r5, r2
 800c698:	e7bc      	b.n	800c614 <_printf_i+0x14c>
 800c69a:	682b      	ldr	r3, [r5, #0]
 800c69c:	1d1a      	adds	r2, r3, #4
 800c69e:	602a      	str	r2, [r5, #0]
 800c6a0:	681d      	ldr	r5, [r3, #0]
 800c6a2:	6862      	ldr	r2, [r4, #4]
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	f7f3 fd92 	bl	80001d0 <memchr>
 800c6ac:	b108      	cbz	r0, 800c6b2 <_printf_i+0x1ea>
 800c6ae:	1b40      	subs	r0, r0, r5
 800c6b0:	6060      	str	r0, [r4, #4]
 800c6b2:	6863      	ldr	r3, [r4, #4]
 800c6b4:	6123      	str	r3, [r4, #16]
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6bc:	e7aa      	b.n	800c614 <_printf_i+0x14c>
 800c6be:	6923      	ldr	r3, [r4, #16]
 800c6c0:	462a      	mov	r2, r5
 800c6c2:	4649      	mov	r1, r9
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	47d0      	blx	sl
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	d0ad      	beq.n	800c628 <_printf_i+0x160>
 800c6cc:	6823      	ldr	r3, [r4, #0]
 800c6ce:	079b      	lsls	r3, r3, #30
 800c6d0:	d413      	bmi.n	800c6fa <_printf_i+0x232>
 800c6d2:	68e0      	ldr	r0, [r4, #12]
 800c6d4:	9b03      	ldr	r3, [sp, #12]
 800c6d6:	4298      	cmp	r0, r3
 800c6d8:	bfb8      	it	lt
 800c6da:	4618      	movlt	r0, r3
 800c6dc:	e7a6      	b.n	800c62c <_printf_i+0x164>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	4649      	mov	r1, r9
 800c6e4:	4640      	mov	r0, r8
 800c6e6:	47d0      	blx	sl
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	d09d      	beq.n	800c628 <_printf_i+0x160>
 800c6ec:	3501      	adds	r5, #1
 800c6ee:	68e3      	ldr	r3, [r4, #12]
 800c6f0:	9903      	ldr	r1, [sp, #12]
 800c6f2:	1a5b      	subs	r3, r3, r1
 800c6f4:	42ab      	cmp	r3, r5
 800c6f6:	dcf2      	bgt.n	800c6de <_printf_i+0x216>
 800c6f8:	e7eb      	b.n	800c6d2 <_printf_i+0x20a>
 800c6fa:	2500      	movs	r5, #0
 800c6fc:	f104 0619 	add.w	r6, r4, #25
 800c700:	e7f5      	b.n	800c6ee <_printf_i+0x226>
 800c702:	bf00      	nop
 800c704:	0801052e 	.word	0x0801052e
 800c708:	0801053f 	.word	0x0801053f

0800c70c <_scanf_float>:
 800c70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c710:	b087      	sub	sp, #28
 800c712:	4617      	mov	r7, r2
 800c714:	9303      	str	r3, [sp, #12]
 800c716:	688b      	ldr	r3, [r1, #8]
 800c718:	1e5a      	subs	r2, r3, #1
 800c71a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c71e:	bf83      	ittte	hi
 800c720:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c724:	195b      	addhi	r3, r3, r5
 800c726:	9302      	strhi	r3, [sp, #8]
 800c728:	2300      	movls	r3, #0
 800c72a:	bf86      	itte	hi
 800c72c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c730:	608b      	strhi	r3, [r1, #8]
 800c732:	9302      	strls	r3, [sp, #8]
 800c734:	680b      	ldr	r3, [r1, #0]
 800c736:	468b      	mov	fp, r1
 800c738:	2500      	movs	r5, #0
 800c73a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c73e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c742:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c746:	4680      	mov	r8, r0
 800c748:	460c      	mov	r4, r1
 800c74a:	465e      	mov	r6, fp
 800c74c:	46aa      	mov	sl, r5
 800c74e:	46a9      	mov	r9, r5
 800c750:	9501      	str	r5, [sp, #4]
 800c752:	68a2      	ldr	r2, [r4, #8]
 800c754:	b152      	cbz	r2, 800c76c <_scanf_float+0x60>
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	2b4e      	cmp	r3, #78	; 0x4e
 800c75c:	d864      	bhi.n	800c828 <_scanf_float+0x11c>
 800c75e:	2b40      	cmp	r3, #64	; 0x40
 800c760:	d83c      	bhi.n	800c7dc <_scanf_float+0xd0>
 800c762:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c766:	b2c8      	uxtb	r0, r1
 800c768:	280e      	cmp	r0, #14
 800c76a:	d93a      	bls.n	800c7e2 <_scanf_float+0xd6>
 800c76c:	f1b9 0f00 	cmp.w	r9, #0
 800c770:	d003      	beq.n	800c77a <_scanf_float+0x6e>
 800c772:	6823      	ldr	r3, [r4, #0]
 800c774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c77e:	f1ba 0f01 	cmp.w	sl, #1
 800c782:	f200 8113 	bhi.w	800c9ac <_scanf_float+0x2a0>
 800c786:	455e      	cmp	r6, fp
 800c788:	f200 8105 	bhi.w	800c996 <_scanf_float+0x28a>
 800c78c:	2501      	movs	r5, #1
 800c78e:	4628      	mov	r0, r5
 800c790:	b007      	add	sp, #28
 800c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c796:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c79a:	2a0d      	cmp	r2, #13
 800c79c:	d8e6      	bhi.n	800c76c <_scanf_float+0x60>
 800c79e:	a101      	add	r1, pc, #4	; (adr r1, 800c7a4 <_scanf_float+0x98>)
 800c7a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c7a4:	0800c8e3 	.word	0x0800c8e3
 800c7a8:	0800c76d 	.word	0x0800c76d
 800c7ac:	0800c76d 	.word	0x0800c76d
 800c7b0:	0800c76d 	.word	0x0800c76d
 800c7b4:	0800c943 	.word	0x0800c943
 800c7b8:	0800c91b 	.word	0x0800c91b
 800c7bc:	0800c76d 	.word	0x0800c76d
 800c7c0:	0800c76d 	.word	0x0800c76d
 800c7c4:	0800c8f1 	.word	0x0800c8f1
 800c7c8:	0800c76d 	.word	0x0800c76d
 800c7cc:	0800c76d 	.word	0x0800c76d
 800c7d0:	0800c76d 	.word	0x0800c76d
 800c7d4:	0800c76d 	.word	0x0800c76d
 800c7d8:	0800c8a9 	.word	0x0800c8a9
 800c7dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c7e0:	e7db      	b.n	800c79a <_scanf_float+0x8e>
 800c7e2:	290e      	cmp	r1, #14
 800c7e4:	d8c2      	bhi.n	800c76c <_scanf_float+0x60>
 800c7e6:	a001      	add	r0, pc, #4	; (adr r0, 800c7ec <_scanf_float+0xe0>)
 800c7e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c7ec:	0800c89b 	.word	0x0800c89b
 800c7f0:	0800c76d 	.word	0x0800c76d
 800c7f4:	0800c89b 	.word	0x0800c89b
 800c7f8:	0800c92f 	.word	0x0800c92f
 800c7fc:	0800c76d 	.word	0x0800c76d
 800c800:	0800c849 	.word	0x0800c849
 800c804:	0800c885 	.word	0x0800c885
 800c808:	0800c885 	.word	0x0800c885
 800c80c:	0800c885 	.word	0x0800c885
 800c810:	0800c885 	.word	0x0800c885
 800c814:	0800c885 	.word	0x0800c885
 800c818:	0800c885 	.word	0x0800c885
 800c81c:	0800c885 	.word	0x0800c885
 800c820:	0800c885 	.word	0x0800c885
 800c824:	0800c885 	.word	0x0800c885
 800c828:	2b6e      	cmp	r3, #110	; 0x6e
 800c82a:	d809      	bhi.n	800c840 <_scanf_float+0x134>
 800c82c:	2b60      	cmp	r3, #96	; 0x60
 800c82e:	d8b2      	bhi.n	800c796 <_scanf_float+0x8a>
 800c830:	2b54      	cmp	r3, #84	; 0x54
 800c832:	d077      	beq.n	800c924 <_scanf_float+0x218>
 800c834:	2b59      	cmp	r3, #89	; 0x59
 800c836:	d199      	bne.n	800c76c <_scanf_float+0x60>
 800c838:	2d07      	cmp	r5, #7
 800c83a:	d197      	bne.n	800c76c <_scanf_float+0x60>
 800c83c:	2508      	movs	r5, #8
 800c83e:	e029      	b.n	800c894 <_scanf_float+0x188>
 800c840:	2b74      	cmp	r3, #116	; 0x74
 800c842:	d06f      	beq.n	800c924 <_scanf_float+0x218>
 800c844:	2b79      	cmp	r3, #121	; 0x79
 800c846:	e7f6      	b.n	800c836 <_scanf_float+0x12a>
 800c848:	6821      	ldr	r1, [r4, #0]
 800c84a:	05c8      	lsls	r0, r1, #23
 800c84c:	d51a      	bpl.n	800c884 <_scanf_float+0x178>
 800c84e:	9b02      	ldr	r3, [sp, #8]
 800c850:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c854:	6021      	str	r1, [r4, #0]
 800c856:	f109 0901 	add.w	r9, r9, #1
 800c85a:	b11b      	cbz	r3, 800c864 <_scanf_float+0x158>
 800c85c:	3b01      	subs	r3, #1
 800c85e:	3201      	adds	r2, #1
 800c860:	9302      	str	r3, [sp, #8]
 800c862:	60a2      	str	r2, [r4, #8]
 800c864:	68a3      	ldr	r3, [r4, #8]
 800c866:	3b01      	subs	r3, #1
 800c868:	60a3      	str	r3, [r4, #8]
 800c86a:	6923      	ldr	r3, [r4, #16]
 800c86c:	3301      	adds	r3, #1
 800c86e:	6123      	str	r3, [r4, #16]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	3b01      	subs	r3, #1
 800c874:	2b00      	cmp	r3, #0
 800c876:	607b      	str	r3, [r7, #4]
 800c878:	f340 8084 	ble.w	800c984 <_scanf_float+0x278>
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	3301      	adds	r3, #1
 800c880:	603b      	str	r3, [r7, #0]
 800c882:	e766      	b.n	800c752 <_scanf_float+0x46>
 800c884:	eb1a 0f05 	cmn.w	sl, r5
 800c888:	f47f af70 	bne.w	800c76c <_scanf_float+0x60>
 800c88c:	6822      	ldr	r2, [r4, #0]
 800c88e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c892:	6022      	str	r2, [r4, #0]
 800c894:	f806 3b01 	strb.w	r3, [r6], #1
 800c898:	e7e4      	b.n	800c864 <_scanf_float+0x158>
 800c89a:	6822      	ldr	r2, [r4, #0]
 800c89c:	0610      	lsls	r0, r2, #24
 800c89e:	f57f af65 	bpl.w	800c76c <_scanf_float+0x60>
 800c8a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c8a6:	e7f4      	b.n	800c892 <_scanf_float+0x186>
 800c8a8:	f1ba 0f00 	cmp.w	sl, #0
 800c8ac:	d10e      	bne.n	800c8cc <_scanf_float+0x1c0>
 800c8ae:	f1b9 0f00 	cmp.w	r9, #0
 800c8b2:	d10e      	bne.n	800c8d2 <_scanf_float+0x1c6>
 800c8b4:	6822      	ldr	r2, [r4, #0]
 800c8b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c8ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c8be:	d108      	bne.n	800c8d2 <_scanf_float+0x1c6>
 800c8c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c8c4:	6022      	str	r2, [r4, #0]
 800c8c6:	f04f 0a01 	mov.w	sl, #1
 800c8ca:	e7e3      	b.n	800c894 <_scanf_float+0x188>
 800c8cc:	f1ba 0f02 	cmp.w	sl, #2
 800c8d0:	d055      	beq.n	800c97e <_scanf_float+0x272>
 800c8d2:	2d01      	cmp	r5, #1
 800c8d4:	d002      	beq.n	800c8dc <_scanf_float+0x1d0>
 800c8d6:	2d04      	cmp	r5, #4
 800c8d8:	f47f af48 	bne.w	800c76c <_scanf_float+0x60>
 800c8dc:	3501      	adds	r5, #1
 800c8de:	b2ed      	uxtb	r5, r5
 800c8e0:	e7d8      	b.n	800c894 <_scanf_float+0x188>
 800c8e2:	f1ba 0f01 	cmp.w	sl, #1
 800c8e6:	f47f af41 	bne.w	800c76c <_scanf_float+0x60>
 800c8ea:	f04f 0a02 	mov.w	sl, #2
 800c8ee:	e7d1      	b.n	800c894 <_scanf_float+0x188>
 800c8f0:	b97d      	cbnz	r5, 800c912 <_scanf_float+0x206>
 800c8f2:	f1b9 0f00 	cmp.w	r9, #0
 800c8f6:	f47f af3c 	bne.w	800c772 <_scanf_float+0x66>
 800c8fa:	6822      	ldr	r2, [r4, #0]
 800c8fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c900:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c904:	f47f af39 	bne.w	800c77a <_scanf_float+0x6e>
 800c908:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c90c:	6022      	str	r2, [r4, #0]
 800c90e:	2501      	movs	r5, #1
 800c910:	e7c0      	b.n	800c894 <_scanf_float+0x188>
 800c912:	2d03      	cmp	r5, #3
 800c914:	d0e2      	beq.n	800c8dc <_scanf_float+0x1d0>
 800c916:	2d05      	cmp	r5, #5
 800c918:	e7de      	b.n	800c8d8 <_scanf_float+0x1cc>
 800c91a:	2d02      	cmp	r5, #2
 800c91c:	f47f af26 	bne.w	800c76c <_scanf_float+0x60>
 800c920:	2503      	movs	r5, #3
 800c922:	e7b7      	b.n	800c894 <_scanf_float+0x188>
 800c924:	2d06      	cmp	r5, #6
 800c926:	f47f af21 	bne.w	800c76c <_scanf_float+0x60>
 800c92a:	2507      	movs	r5, #7
 800c92c:	e7b2      	b.n	800c894 <_scanf_float+0x188>
 800c92e:	6822      	ldr	r2, [r4, #0]
 800c930:	0591      	lsls	r1, r2, #22
 800c932:	f57f af1b 	bpl.w	800c76c <_scanf_float+0x60>
 800c936:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c93a:	6022      	str	r2, [r4, #0]
 800c93c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c940:	e7a8      	b.n	800c894 <_scanf_float+0x188>
 800c942:	6822      	ldr	r2, [r4, #0]
 800c944:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c948:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c94c:	d006      	beq.n	800c95c <_scanf_float+0x250>
 800c94e:	0550      	lsls	r0, r2, #21
 800c950:	f57f af0c 	bpl.w	800c76c <_scanf_float+0x60>
 800c954:	f1b9 0f00 	cmp.w	r9, #0
 800c958:	f43f af0f 	beq.w	800c77a <_scanf_float+0x6e>
 800c95c:	0591      	lsls	r1, r2, #22
 800c95e:	bf58      	it	pl
 800c960:	9901      	ldrpl	r1, [sp, #4]
 800c962:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c966:	bf58      	it	pl
 800c968:	eba9 0101 	subpl.w	r1, r9, r1
 800c96c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c970:	bf58      	it	pl
 800c972:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c976:	6022      	str	r2, [r4, #0]
 800c978:	f04f 0900 	mov.w	r9, #0
 800c97c:	e78a      	b.n	800c894 <_scanf_float+0x188>
 800c97e:	f04f 0a03 	mov.w	sl, #3
 800c982:	e787      	b.n	800c894 <_scanf_float+0x188>
 800c984:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c988:	4639      	mov	r1, r7
 800c98a:	4640      	mov	r0, r8
 800c98c:	4798      	blx	r3
 800c98e:	2800      	cmp	r0, #0
 800c990:	f43f aedf 	beq.w	800c752 <_scanf_float+0x46>
 800c994:	e6ea      	b.n	800c76c <_scanf_float+0x60>
 800c996:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c99a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c99e:	463a      	mov	r2, r7
 800c9a0:	4640      	mov	r0, r8
 800c9a2:	4798      	blx	r3
 800c9a4:	6923      	ldr	r3, [r4, #16]
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	6123      	str	r3, [r4, #16]
 800c9aa:	e6ec      	b.n	800c786 <_scanf_float+0x7a>
 800c9ac:	1e6b      	subs	r3, r5, #1
 800c9ae:	2b06      	cmp	r3, #6
 800c9b0:	d825      	bhi.n	800c9fe <_scanf_float+0x2f2>
 800c9b2:	2d02      	cmp	r5, #2
 800c9b4:	d836      	bhi.n	800ca24 <_scanf_float+0x318>
 800c9b6:	455e      	cmp	r6, fp
 800c9b8:	f67f aee8 	bls.w	800c78c <_scanf_float+0x80>
 800c9bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c9c4:	463a      	mov	r2, r7
 800c9c6:	4640      	mov	r0, r8
 800c9c8:	4798      	blx	r3
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	6123      	str	r3, [r4, #16]
 800c9d0:	e7f1      	b.n	800c9b6 <_scanf_float+0x2aa>
 800c9d2:	9802      	ldr	r0, [sp, #8]
 800c9d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c9dc:	9002      	str	r0, [sp, #8]
 800c9de:	463a      	mov	r2, r7
 800c9e0:	4640      	mov	r0, r8
 800c9e2:	4798      	blx	r3
 800c9e4:	6923      	ldr	r3, [r4, #16]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	6123      	str	r3, [r4, #16]
 800c9ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9ee:	fa5f fa8a 	uxtb.w	sl, sl
 800c9f2:	f1ba 0f02 	cmp.w	sl, #2
 800c9f6:	d1ec      	bne.n	800c9d2 <_scanf_float+0x2c6>
 800c9f8:	3d03      	subs	r5, #3
 800c9fa:	b2ed      	uxtb	r5, r5
 800c9fc:	1b76      	subs	r6, r6, r5
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	05da      	lsls	r2, r3, #23
 800ca02:	d52f      	bpl.n	800ca64 <_scanf_float+0x358>
 800ca04:	055b      	lsls	r3, r3, #21
 800ca06:	d510      	bpl.n	800ca2a <_scanf_float+0x31e>
 800ca08:	455e      	cmp	r6, fp
 800ca0a:	f67f aebf 	bls.w	800c78c <_scanf_float+0x80>
 800ca0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca16:	463a      	mov	r2, r7
 800ca18:	4640      	mov	r0, r8
 800ca1a:	4798      	blx	r3
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	6123      	str	r3, [r4, #16]
 800ca22:	e7f1      	b.n	800ca08 <_scanf_float+0x2fc>
 800ca24:	46aa      	mov	sl, r5
 800ca26:	9602      	str	r6, [sp, #8]
 800ca28:	e7df      	b.n	800c9ea <_scanf_float+0x2de>
 800ca2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ca2e:	6923      	ldr	r3, [r4, #16]
 800ca30:	2965      	cmp	r1, #101	; 0x65
 800ca32:	f103 33ff 	add.w	r3, r3, #4294967295
 800ca36:	f106 35ff 	add.w	r5, r6, #4294967295
 800ca3a:	6123      	str	r3, [r4, #16]
 800ca3c:	d00c      	beq.n	800ca58 <_scanf_float+0x34c>
 800ca3e:	2945      	cmp	r1, #69	; 0x45
 800ca40:	d00a      	beq.n	800ca58 <_scanf_float+0x34c>
 800ca42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca46:	463a      	mov	r2, r7
 800ca48:	4640      	mov	r0, r8
 800ca4a:	4798      	blx	r3
 800ca4c:	6923      	ldr	r3, [r4, #16]
 800ca4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ca52:	3b01      	subs	r3, #1
 800ca54:	1eb5      	subs	r5, r6, #2
 800ca56:	6123      	str	r3, [r4, #16]
 800ca58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca5c:	463a      	mov	r2, r7
 800ca5e:	4640      	mov	r0, r8
 800ca60:	4798      	blx	r3
 800ca62:	462e      	mov	r6, r5
 800ca64:	6825      	ldr	r5, [r4, #0]
 800ca66:	f015 0510 	ands.w	r5, r5, #16
 800ca6a:	d158      	bne.n	800cb1e <_scanf_float+0x412>
 800ca6c:	7035      	strb	r5, [r6, #0]
 800ca6e:	6823      	ldr	r3, [r4, #0]
 800ca70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ca74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca78:	d11c      	bne.n	800cab4 <_scanf_float+0x3a8>
 800ca7a:	9b01      	ldr	r3, [sp, #4]
 800ca7c:	454b      	cmp	r3, r9
 800ca7e:	eba3 0209 	sub.w	r2, r3, r9
 800ca82:	d124      	bne.n	800cace <_scanf_float+0x3c2>
 800ca84:	2200      	movs	r2, #0
 800ca86:	4659      	mov	r1, fp
 800ca88:	4640      	mov	r0, r8
 800ca8a:	f002 fb8d 	bl	800f1a8 <_strtod_r>
 800ca8e:	9b03      	ldr	r3, [sp, #12]
 800ca90:	6821      	ldr	r1, [r4, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f011 0f02 	tst.w	r1, #2
 800ca98:	ec57 6b10 	vmov	r6, r7, d0
 800ca9c:	f103 0204 	add.w	r2, r3, #4
 800caa0:	d020      	beq.n	800cae4 <_scanf_float+0x3d8>
 800caa2:	9903      	ldr	r1, [sp, #12]
 800caa4:	600a      	str	r2, [r1, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	e9c3 6700 	strd	r6, r7, [r3]
 800caac:	68e3      	ldr	r3, [r4, #12]
 800caae:	3301      	adds	r3, #1
 800cab0:	60e3      	str	r3, [r4, #12]
 800cab2:	e66c      	b.n	800c78e <_scanf_float+0x82>
 800cab4:	9b04      	ldr	r3, [sp, #16]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0e4      	beq.n	800ca84 <_scanf_float+0x378>
 800caba:	9905      	ldr	r1, [sp, #20]
 800cabc:	230a      	movs	r3, #10
 800cabe:	462a      	mov	r2, r5
 800cac0:	3101      	adds	r1, #1
 800cac2:	4640      	mov	r0, r8
 800cac4:	f002 fbf8 	bl	800f2b8 <_strtol_r>
 800cac8:	9b04      	ldr	r3, [sp, #16]
 800caca:	9e05      	ldr	r6, [sp, #20]
 800cacc:	1ac2      	subs	r2, r0, r3
 800cace:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cad2:	429e      	cmp	r6, r3
 800cad4:	bf28      	it	cs
 800cad6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cada:	4912      	ldr	r1, [pc, #72]	; (800cb24 <_scanf_float+0x418>)
 800cadc:	4630      	mov	r0, r6
 800cade:	f000 f8e7 	bl	800ccb0 <siprintf>
 800cae2:	e7cf      	b.n	800ca84 <_scanf_float+0x378>
 800cae4:	f011 0f04 	tst.w	r1, #4
 800cae8:	9903      	ldr	r1, [sp, #12]
 800caea:	600a      	str	r2, [r1, #0]
 800caec:	d1db      	bne.n	800caa6 <_scanf_float+0x39a>
 800caee:	f8d3 8000 	ldr.w	r8, [r3]
 800caf2:	ee10 2a10 	vmov	r2, s0
 800caf6:	ee10 0a10 	vmov	r0, s0
 800cafa:	463b      	mov	r3, r7
 800cafc:	4639      	mov	r1, r7
 800cafe:	f7f4 f815 	bl	8000b2c <__aeabi_dcmpun>
 800cb02:	b128      	cbz	r0, 800cb10 <_scanf_float+0x404>
 800cb04:	4808      	ldr	r0, [pc, #32]	; (800cb28 <_scanf_float+0x41c>)
 800cb06:	f000 f9c7 	bl	800ce98 <nanf>
 800cb0a:	ed88 0a00 	vstr	s0, [r8]
 800cb0e:	e7cd      	b.n	800caac <_scanf_float+0x3a0>
 800cb10:	4630      	mov	r0, r6
 800cb12:	4639      	mov	r1, r7
 800cb14:	f7f4 f868 	bl	8000be8 <__aeabi_d2f>
 800cb18:	f8c8 0000 	str.w	r0, [r8]
 800cb1c:	e7c6      	b.n	800caac <_scanf_float+0x3a0>
 800cb1e:	2500      	movs	r5, #0
 800cb20:	e635      	b.n	800c78e <_scanf_float+0x82>
 800cb22:	bf00      	nop
 800cb24:	08010550 	.word	0x08010550
 800cb28:	080108e5 	.word	0x080108e5

0800cb2c <std>:
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	b510      	push	{r4, lr}
 800cb30:	4604      	mov	r4, r0
 800cb32:	e9c0 3300 	strd	r3, r3, [r0]
 800cb36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb3a:	6083      	str	r3, [r0, #8]
 800cb3c:	8181      	strh	r1, [r0, #12]
 800cb3e:	6643      	str	r3, [r0, #100]	; 0x64
 800cb40:	81c2      	strh	r2, [r0, #14]
 800cb42:	6183      	str	r3, [r0, #24]
 800cb44:	4619      	mov	r1, r3
 800cb46:	2208      	movs	r2, #8
 800cb48:	305c      	adds	r0, #92	; 0x5c
 800cb4a:	f000 f914 	bl	800cd76 <memset>
 800cb4e:	4b0d      	ldr	r3, [pc, #52]	; (800cb84 <std+0x58>)
 800cb50:	6263      	str	r3, [r4, #36]	; 0x24
 800cb52:	4b0d      	ldr	r3, [pc, #52]	; (800cb88 <std+0x5c>)
 800cb54:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb56:	4b0d      	ldr	r3, [pc, #52]	; (800cb8c <std+0x60>)
 800cb58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb5a:	4b0d      	ldr	r3, [pc, #52]	; (800cb90 <std+0x64>)
 800cb5c:	6323      	str	r3, [r4, #48]	; 0x30
 800cb5e:	4b0d      	ldr	r3, [pc, #52]	; (800cb94 <std+0x68>)
 800cb60:	6224      	str	r4, [r4, #32]
 800cb62:	429c      	cmp	r4, r3
 800cb64:	d006      	beq.n	800cb74 <std+0x48>
 800cb66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cb6a:	4294      	cmp	r4, r2
 800cb6c:	d002      	beq.n	800cb74 <std+0x48>
 800cb6e:	33d0      	adds	r3, #208	; 0xd0
 800cb70:	429c      	cmp	r4, r3
 800cb72:	d105      	bne.n	800cb80 <std+0x54>
 800cb74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb7c:	f000 b988 	b.w	800ce90 <__retarget_lock_init_recursive>
 800cb80:	bd10      	pop	{r4, pc}
 800cb82:	bf00      	nop
 800cb84:	0800ccf1 	.word	0x0800ccf1
 800cb88:	0800cd13 	.word	0x0800cd13
 800cb8c:	0800cd4b 	.word	0x0800cd4b
 800cb90:	0800cd6f 	.word	0x0800cd6f
 800cb94:	20000f94 	.word	0x20000f94

0800cb98 <stdio_exit_handler>:
 800cb98:	4a02      	ldr	r2, [pc, #8]	; (800cba4 <stdio_exit_handler+0xc>)
 800cb9a:	4903      	ldr	r1, [pc, #12]	; (800cba8 <stdio_exit_handler+0x10>)
 800cb9c:	4803      	ldr	r0, [pc, #12]	; (800cbac <stdio_exit_handler+0x14>)
 800cb9e:	f000 b869 	b.w	800cc74 <_fwalk_sglue>
 800cba2:	bf00      	nop
 800cba4:	2000002c 	.word	0x2000002c
 800cba8:	0800f679 	.word	0x0800f679
 800cbac:	20000038 	.word	0x20000038

0800cbb0 <cleanup_stdio>:
 800cbb0:	6841      	ldr	r1, [r0, #4]
 800cbb2:	4b0c      	ldr	r3, [pc, #48]	; (800cbe4 <cleanup_stdio+0x34>)
 800cbb4:	4299      	cmp	r1, r3
 800cbb6:	b510      	push	{r4, lr}
 800cbb8:	4604      	mov	r4, r0
 800cbba:	d001      	beq.n	800cbc0 <cleanup_stdio+0x10>
 800cbbc:	f002 fd5c 	bl	800f678 <_fflush_r>
 800cbc0:	68a1      	ldr	r1, [r4, #8]
 800cbc2:	4b09      	ldr	r3, [pc, #36]	; (800cbe8 <cleanup_stdio+0x38>)
 800cbc4:	4299      	cmp	r1, r3
 800cbc6:	d002      	beq.n	800cbce <cleanup_stdio+0x1e>
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f002 fd55 	bl	800f678 <_fflush_r>
 800cbce:	68e1      	ldr	r1, [r4, #12]
 800cbd0:	4b06      	ldr	r3, [pc, #24]	; (800cbec <cleanup_stdio+0x3c>)
 800cbd2:	4299      	cmp	r1, r3
 800cbd4:	d004      	beq.n	800cbe0 <cleanup_stdio+0x30>
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbdc:	f002 bd4c 	b.w	800f678 <_fflush_r>
 800cbe0:	bd10      	pop	{r4, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20000f94 	.word	0x20000f94
 800cbe8:	20000ffc 	.word	0x20000ffc
 800cbec:	20001064 	.word	0x20001064

0800cbf0 <global_stdio_init.part.0>:
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	4b0b      	ldr	r3, [pc, #44]	; (800cc20 <global_stdio_init.part.0+0x30>)
 800cbf4:	4c0b      	ldr	r4, [pc, #44]	; (800cc24 <global_stdio_init.part.0+0x34>)
 800cbf6:	4a0c      	ldr	r2, [pc, #48]	; (800cc28 <global_stdio_init.part.0+0x38>)
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	2104      	movs	r1, #4
 800cc00:	f7ff ff94 	bl	800cb2c <std>
 800cc04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cc08:	2201      	movs	r2, #1
 800cc0a:	2109      	movs	r1, #9
 800cc0c:	f7ff ff8e 	bl	800cb2c <std>
 800cc10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cc14:	2202      	movs	r2, #2
 800cc16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc1a:	2112      	movs	r1, #18
 800cc1c:	f7ff bf86 	b.w	800cb2c <std>
 800cc20:	200010cc 	.word	0x200010cc
 800cc24:	20000f94 	.word	0x20000f94
 800cc28:	0800cb99 	.word	0x0800cb99

0800cc2c <__sfp_lock_acquire>:
 800cc2c:	4801      	ldr	r0, [pc, #4]	; (800cc34 <__sfp_lock_acquire+0x8>)
 800cc2e:	f000 b930 	b.w	800ce92 <__retarget_lock_acquire_recursive>
 800cc32:	bf00      	nop
 800cc34:	200010d5 	.word	0x200010d5

0800cc38 <__sfp_lock_release>:
 800cc38:	4801      	ldr	r0, [pc, #4]	; (800cc40 <__sfp_lock_release+0x8>)
 800cc3a:	f000 b92b 	b.w	800ce94 <__retarget_lock_release_recursive>
 800cc3e:	bf00      	nop
 800cc40:	200010d5 	.word	0x200010d5

0800cc44 <__sinit>:
 800cc44:	b510      	push	{r4, lr}
 800cc46:	4604      	mov	r4, r0
 800cc48:	f7ff fff0 	bl	800cc2c <__sfp_lock_acquire>
 800cc4c:	6a23      	ldr	r3, [r4, #32]
 800cc4e:	b11b      	cbz	r3, 800cc58 <__sinit+0x14>
 800cc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc54:	f7ff bff0 	b.w	800cc38 <__sfp_lock_release>
 800cc58:	4b04      	ldr	r3, [pc, #16]	; (800cc6c <__sinit+0x28>)
 800cc5a:	6223      	str	r3, [r4, #32]
 800cc5c:	4b04      	ldr	r3, [pc, #16]	; (800cc70 <__sinit+0x2c>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1f5      	bne.n	800cc50 <__sinit+0xc>
 800cc64:	f7ff ffc4 	bl	800cbf0 <global_stdio_init.part.0>
 800cc68:	e7f2      	b.n	800cc50 <__sinit+0xc>
 800cc6a:	bf00      	nop
 800cc6c:	0800cbb1 	.word	0x0800cbb1
 800cc70:	200010cc 	.word	0x200010cc

0800cc74 <_fwalk_sglue>:
 800cc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc78:	4607      	mov	r7, r0
 800cc7a:	4688      	mov	r8, r1
 800cc7c:	4614      	mov	r4, r2
 800cc7e:	2600      	movs	r6, #0
 800cc80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc84:	f1b9 0901 	subs.w	r9, r9, #1
 800cc88:	d505      	bpl.n	800cc96 <_fwalk_sglue+0x22>
 800cc8a:	6824      	ldr	r4, [r4, #0]
 800cc8c:	2c00      	cmp	r4, #0
 800cc8e:	d1f7      	bne.n	800cc80 <_fwalk_sglue+0xc>
 800cc90:	4630      	mov	r0, r6
 800cc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc96:	89ab      	ldrh	r3, [r5, #12]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d907      	bls.n	800ccac <_fwalk_sglue+0x38>
 800cc9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cca0:	3301      	adds	r3, #1
 800cca2:	d003      	beq.n	800ccac <_fwalk_sglue+0x38>
 800cca4:	4629      	mov	r1, r5
 800cca6:	4638      	mov	r0, r7
 800cca8:	47c0      	blx	r8
 800ccaa:	4306      	orrs	r6, r0
 800ccac:	3568      	adds	r5, #104	; 0x68
 800ccae:	e7e9      	b.n	800cc84 <_fwalk_sglue+0x10>

0800ccb0 <siprintf>:
 800ccb0:	b40e      	push	{r1, r2, r3}
 800ccb2:	b500      	push	{lr}
 800ccb4:	b09c      	sub	sp, #112	; 0x70
 800ccb6:	ab1d      	add	r3, sp, #116	; 0x74
 800ccb8:	9002      	str	r0, [sp, #8]
 800ccba:	9006      	str	r0, [sp, #24]
 800ccbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ccc0:	4809      	ldr	r0, [pc, #36]	; (800cce8 <siprintf+0x38>)
 800ccc2:	9107      	str	r1, [sp, #28]
 800ccc4:	9104      	str	r1, [sp, #16]
 800ccc6:	4909      	ldr	r1, [pc, #36]	; (800ccec <siprintf+0x3c>)
 800ccc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cccc:	9105      	str	r1, [sp, #20]
 800ccce:	6800      	ldr	r0, [r0, #0]
 800ccd0:	9301      	str	r3, [sp, #4]
 800ccd2:	a902      	add	r1, sp, #8
 800ccd4:	f002 fb4c 	bl	800f370 <_svfiprintf_r>
 800ccd8:	9b02      	ldr	r3, [sp, #8]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	701a      	strb	r2, [r3, #0]
 800ccde:	b01c      	add	sp, #112	; 0x70
 800cce0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cce4:	b003      	add	sp, #12
 800cce6:	4770      	bx	lr
 800cce8:	20000084 	.word	0x20000084
 800ccec:	ffff0208 	.word	0xffff0208

0800ccf0 <__sread>:
 800ccf0:	b510      	push	{r4, lr}
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf8:	f000 f86c 	bl	800cdd4 <_read_r>
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	bfab      	itete	ge
 800cd00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd02:	89a3      	ldrhlt	r3, [r4, #12]
 800cd04:	181b      	addge	r3, r3, r0
 800cd06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd0a:	bfac      	ite	ge
 800cd0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd0e:	81a3      	strhlt	r3, [r4, #12]
 800cd10:	bd10      	pop	{r4, pc}

0800cd12 <__swrite>:
 800cd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd16:	461f      	mov	r7, r3
 800cd18:	898b      	ldrh	r3, [r1, #12]
 800cd1a:	05db      	lsls	r3, r3, #23
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	460c      	mov	r4, r1
 800cd20:	4616      	mov	r6, r2
 800cd22:	d505      	bpl.n	800cd30 <__swrite+0x1e>
 800cd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd28:	2302      	movs	r3, #2
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f000 f840 	bl	800cdb0 <_lseek_r>
 800cd30:	89a3      	ldrh	r3, [r4, #12]
 800cd32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd3a:	81a3      	strh	r3, [r4, #12]
 800cd3c:	4632      	mov	r2, r6
 800cd3e:	463b      	mov	r3, r7
 800cd40:	4628      	mov	r0, r5
 800cd42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd46:	f000 b867 	b.w	800ce18 <_write_r>

0800cd4a <__sseek>:
 800cd4a:	b510      	push	{r4, lr}
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd52:	f000 f82d 	bl	800cdb0 <_lseek_r>
 800cd56:	1c43      	adds	r3, r0, #1
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	bf15      	itete	ne
 800cd5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd66:	81a3      	strheq	r3, [r4, #12]
 800cd68:	bf18      	it	ne
 800cd6a:	81a3      	strhne	r3, [r4, #12]
 800cd6c:	bd10      	pop	{r4, pc}

0800cd6e <__sclose>:
 800cd6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd72:	f000 b80d 	b.w	800cd90 <_close_r>

0800cd76 <memset>:
 800cd76:	4402      	add	r2, r0
 800cd78:	4603      	mov	r3, r0
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d100      	bne.n	800cd80 <memset+0xa>
 800cd7e:	4770      	bx	lr
 800cd80:	f803 1b01 	strb.w	r1, [r3], #1
 800cd84:	e7f9      	b.n	800cd7a <memset+0x4>
	...

0800cd88 <_localeconv_r>:
 800cd88:	4800      	ldr	r0, [pc, #0]	; (800cd8c <_localeconv_r+0x4>)
 800cd8a:	4770      	bx	lr
 800cd8c:	20000178 	.word	0x20000178

0800cd90 <_close_r>:
 800cd90:	b538      	push	{r3, r4, r5, lr}
 800cd92:	4d06      	ldr	r5, [pc, #24]	; (800cdac <_close_r+0x1c>)
 800cd94:	2300      	movs	r3, #0
 800cd96:	4604      	mov	r4, r0
 800cd98:	4608      	mov	r0, r1
 800cd9a:	602b      	str	r3, [r5, #0]
 800cd9c:	f7f4 ff41 	bl	8001c22 <_close>
 800cda0:	1c43      	adds	r3, r0, #1
 800cda2:	d102      	bne.n	800cdaa <_close_r+0x1a>
 800cda4:	682b      	ldr	r3, [r5, #0]
 800cda6:	b103      	cbz	r3, 800cdaa <_close_r+0x1a>
 800cda8:	6023      	str	r3, [r4, #0]
 800cdaa:	bd38      	pop	{r3, r4, r5, pc}
 800cdac:	200010d0 	.word	0x200010d0

0800cdb0 <_lseek_r>:
 800cdb0:	b538      	push	{r3, r4, r5, lr}
 800cdb2:	4d07      	ldr	r5, [pc, #28]	; (800cdd0 <_lseek_r+0x20>)
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	4608      	mov	r0, r1
 800cdb8:	4611      	mov	r1, r2
 800cdba:	2200      	movs	r2, #0
 800cdbc:	602a      	str	r2, [r5, #0]
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	f7f4 ff56 	bl	8001c70 <_lseek>
 800cdc4:	1c43      	adds	r3, r0, #1
 800cdc6:	d102      	bne.n	800cdce <_lseek_r+0x1e>
 800cdc8:	682b      	ldr	r3, [r5, #0]
 800cdca:	b103      	cbz	r3, 800cdce <_lseek_r+0x1e>
 800cdcc:	6023      	str	r3, [r4, #0]
 800cdce:	bd38      	pop	{r3, r4, r5, pc}
 800cdd0:	200010d0 	.word	0x200010d0

0800cdd4 <_read_r>:
 800cdd4:	b538      	push	{r3, r4, r5, lr}
 800cdd6:	4d07      	ldr	r5, [pc, #28]	; (800cdf4 <_read_r+0x20>)
 800cdd8:	4604      	mov	r4, r0
 800cdda:	4608      	mov	r0, r1
 800cddc:	4611      	mov	r1, r2
 800cdde:	2200      	movs	r2, #0
 800cde0:	602a      	str	r2, [r5, #0]
 800cde2:	461a      	mov	r2, r3
 800cde4:	f7f4 fee4 	bl	8001bb0 <_read>
 800cde8:	1c43      	adds	r3, r0, #1
 800cdea:	d102      	bne.n	800cdf2 <_read_r+0x1e>
 800cdec:	682b      	ldr	r3, [r5, #0]
 800cdee:	b103      	cbz	r3, 800cdf2 <_read_r+0x1e>
 800cdf0:	6023      	str	r3, [r4, #0]
 800cdf2:	bd38      	pop	{r3, r4, r5, pc}
 800cdf4:	200010d0 	.word	0x200010d0

0800cdf8 <_sbrk_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4d06      	ldr	r5, [pc, #24]	; (800ce14 <_sbrk_r+0x1c>)
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	4604      	mov	r4, r0
 800ce00:	4608      	mov	r0, r1
 800ce02:	602b      	str	r3, [r5, #0]
 800ce04:	f7f4 ff42 	bl	8001c8c <_sbrk>
 800ce08:	1c43      	adds	r3, r0, #1
 800ce0a:	d102      	bne.n	800ce12 <_sbrk_r+0x1a>
 800ce0c:	682b      	ldr	r3, [r5, #0]
 800ce0e:	b103      	cbz	r3, 800ce12 <_sbrk_r+0x1a>
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	bd38      	pop	{r3, r4, r5, pc}
 800ce14:	200010d0 	.word	0x200010d0

0800ce18 <_write_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4d07      	ldr	r5, [pc, #28]	; (800ce38 <_write_r+0x20>)
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	4608      	mov	r0, r1
 800ce20:	4611      	mov	r1, r2
 800ce22:	2200      	movs	r2, #0
 800ce24:	602a      	str	r2, [r5, #0]
 800ce26:	461a      	mov	r2, r3
 800ce28:	f7f4 fedf 	bl	8001bea <_write>
 800ce2c:	1c43      	adds	r3, r0, #1
 800ce2e:	d102      	bne.n	800ce36 <_write_r+0x1e>
 800ce30:	682b      	ldr	r3, [r5, #0]
 800ce32:	b103      	cbz	r3, 800ce36 <_write_r+0x1e>
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	bd38      	pop	{r3, r4, r5, pc}
 800ce38:	200010d0 	.word	0x200010d0

0800ce3c <__errno>:
 800ce3c:	4b01      	ldr	r3, [pc, #4]	; (800ce44 <__errno+0x8>)
 800ce3e:	6818      	ldr	r0, [r3, #0]
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	20000084 	.word	0x20000084

0800ce48 <__libc_init_array>:
 800ce48:	b570      	push	{r4, r5, r6, lr}
 800ce4a:	4d0d      	ldr	r5, [pc, #52]	; (800ce80 <__libc_init_array+0x38>)
 800ce4c:	4c0d      	ldr	r4, [pc, #52]	; (800ce84 <__libc_init_array+0x3c>)
 800ce4e:	1b64      	subs	r4, r4, r5
 800ce50:	10a4      	asrs	r4, r4, #2
 800ce52:	2600      	movs	r6, #0
 800ce54:	42a6      	cmp	r6, r4
 800ce56:	d109      	bne.n	800ce6c <__libc_init_array+0x24>
 800ce58:	4d0b      	ldr	r5, [pc, #44]	; (800ce88 <__libc_init_array+0x40>)
 800ce5a:	4c0c      	ldr	r4, [pc, #48]	; (800ce8c <__libc_init_array+0x44>)
 800ce5c:	f003 fb14 	bl	8010488 <_init>
 800ce60:	1b64      	subs	r4, r4, r5
 800ce62:	10a4      	asrs	r4, r4, #2
 800ce64:	2600      	movs	r6, #0
 800ce66:	42a6      	cmp	r6, r4
 800ce68:	d105      	bne.n	800ce76 <__libc_init_array+0x2e>
 800ce6a:	bd70      	pop	{r4, r5, r6, pc}
 800ce6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce70:	4798      	blx	r3
 800ce72:	3601      	adds	r6, #1
 800ce74:	e7ee      	b.n	800ce54 <__libc_init_array+0xc>
 800ce76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce7a:	4798      	blx	r3
 800ce7c:	3601      	adds	r6, #1
 800ce7e:	e7f2      	b.n	800ce66 <__libc_init_array+0x1e>
 800ce80:	08010950 	.word	0x08010950
 800ce84:	08010950 	.word	0x08010950
 800ce88:	08010950 	.word	0x08010950
 800ce8c:	08010954 	.word	0x08010954

0800ce90 <__retarget_lock_init_recursive>:
 800ce90:	4770      	bx	lr

0800ce92 <__retarget_lock_acquire_recursive>:
 800ce92:	4770      	bx	lr

0800ce94 <__retarget_lock_release_recursive>:
 800ce94:	4770      	bx	lr
	...

0800ce98 <nanf>:
 800ce98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cea0 <nanf+0x8>
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	7fc00000 	.word	0x7fc00000

0800cea4 <quorem>:
 800cea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea8:	6903      	ldr	r3, [r0, #16]
 800ceaa:	690c      	ldr	r4, [r1, #16]
 800ceac:	42a3      	cmp	r3, r4
 800ceae:	4607      	mov	r7, r0
 800ceb0:	db7e      	blt.n	800cfb0 <quorem+0x10c>
 800ceb2:	3c01      	subs	r4, #1
 800ceb4:	f101 0814 	add.w	r8, r1, #20
 800ceb8:	f100 0514 	add.w	r5, r0, #20
 800cebc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ceca:	3301      	adds	r3, #1
 800cecc:	429a      	cmp	r2, r3
 800cece:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ced2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ced6:	fbb2 f6f3 	udiv	r6, r2, r3
 800ceda:	d331      	bcc.n	800cf40 <quorem+0x9c>
 800cedc:	f04f 0e00 	mov.w	lr, #0
 800cee0:	4640      	mov	r0, r8
 800cee2:	46ac      	mov	ip, r5
 800cee4:	46f2      	mov	sl, lr
 800cee6:	f850 2b04 	ldr.w	r2, [r0], #4
 800ceea:	b293      	uxth	r3, r2
 800ceec:	fb06 e303 	mla	r3, r6, r3, lr
 800cef0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cef4:	0c1a      	lsrs	r2, r3, #16
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	ebaa 0303 	sub.w	r3, sl, r3
 800cefc:	f8dc a000 	ldr.w	sl, [ip]
 800cf00:	fa13 f38a 	uxtah	r3, r3, sl
 800cf04:	fb06 220e 	mla	r2, r6, lr, r2
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	9b00      	ldr	r3, [sp, #0]
 800cf0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf10:	b292      	uxth	r2, r2
 800cf12:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cf16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf1a:	f8bd 3000 	ldrh.w	r3, [sp]
 800cf1e:	4581      	cmp	r9, r0
 800cf20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf24:	f84c 3b04 	str.w	r3, [ip], #4
 800cf28:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf2c:	d2db      	bcs.n	800cee6 <quorem+0x42>
 800cf2e:	f855 300b 	ldr.w	r3, [r5, fp]
 800cf32:	b92b      	cbnz	r3, 800cf40 <quorem+0x9c>
 800cf34:	9b01      	ldr	r3, [sp, #4]
 800cf36:	3b04      	subs	r3, #4
 800cf38:	429d      	cmp	r5, r3
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	d32c      	bcc.n	800cf98 <quorem+0xf4>
 800cf3e:	613c      	str	r4, [r7, #16]
 800cf40:	4638      	mov	r0, r7
 800cf42:	f001 f93d 	bl	800e1c0 <__mcmp>
 800cf46:	2800      	cmp	r0, #0
 800cf48:	db22      	blt.n	800cf90 <quorem+0xec>
 800cf4a:	3601      	adds	r6, #1
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	2000      	movs	r0, #0
 800cf50:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf54:	f8d1 c000 	ldr.w	ip, [r1]
 800cf58:	b293      	uxth	r3, r2
 800cf5a:	1ac3      	subs	r3, r0, r3
 800cf5c:	0c12      	lsrs	r2, r2, #16
 800cf5e:	fa13 f38c 	uxtah	r3, r3, ip
 800cf62:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cf66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf70:	45c1      	cmp	r9, r8
 800cf72:	f841 3b04 	str.w	r3, [r1], #4
 800cf76:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cf7a:	d2e9      	bcs.n	800cf50 <quorem+0xac>
 800cf7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf84:	b922      	cbnz	r2, 800cf90 <quorem+0xec>
 800cf86:	3b04      	subs	r3, #4
 800cf88:	429d      	cmp	r5, r3
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	d30a      	bcc.n	800cfa4 <quorem+0x100>
 800cf8e:	613c      	str	r4, [r7, #16]
 800cf90:	4630      	mov	r0, r6
 800cf92:	b003      	add	sp, #12
 800cf94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf98:	6812      	ldr	r2, [r2, #0]
 800cf9a:	3b04      	subs	r3, #4
 800cf9c:	2a00      	cmp	r2, #0
 800cf9e:	d1ce      	bne.n	800cf3e <quorem+0x9a>
 800cfa0:	3c01      	subs	r4, #1
 800cfa2:	e7c9      	b.n	800cf38 <quorem+0x94>
 800cfa4:	6812      	ldr	r2, [r2, #0]
 800cfa6:	3b04      	subs	r3, #4
 800cfa8:	2a00      	cmp	r2, #0
 800cfaa:	d1f0      	bne.n	800cf8e <quorem+0xea>
 800cfac:	3c01      	subs	r4, #1
 800cfae:	e7eb      	b.n	800cf88 <quorem+0xe4>
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	e7ee      	b.n	800cf92 <quorem+0xee>
 800cfb4:	0000      	movs	r0, r0
	...

0800cfb8 <_dtoa_r>:
 800cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	ed2d 8b04 	vpush	{d8-d9}
 800cfc0:	69c5      	ldr	r5, [r0, #28]
 800cfc2:	b093      	sub	sp, #76	; 0x4c
 800cfc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cfc8:	ec57 6b10 	vmov	r6, r7, d0
 800cfcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cfd0:	9107      	str	r1, [sp, #28]
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	920a      	str	r2, [sp, #40]	; 0x28
 800cfd6:	930d      	str	r3, [sp, #52]	; 0x34
 800cfd8:	b975      	cbnz	r5, 800cff8 <_dtoa_r+0x40>
 800cfda:	2010      	movs	r0, #16
 800cfdc:	f7fe fe74 	bl	800bcc8 <malloc>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	61e0      	str	r0, [r4, #28]
 800cfe4:	b920      	cbnz	r0, 800cff0 <_dtoa_r+0x38>
 800cfe6:	4bae      	ldr	r3, [pc, #696]	; (800d2a0 <_dtoa_r+0x2e8>)
 800cfe8:	21ef      	movs	r1, #239	; 0xef
 800cfea:	48ae      	ldr	r0, [pc, #696]	; (800d2a4 <_dtoa_r+0x2ec>)
 800cfec:	f002 fbb0 	bl	800f750 <__assert_func>
 800cff0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cff4:	6005      	str	r5, [r0, #0]
 800cff6:	60c5      	str	r5, [r0, #12]
 800cff8:	69e3      	ldr	r3, [r4, #28]
 800cffa:	6819      	ldr	r1, [r3, #0]
 800cffc:	b151      	cbz	r1, 800d014 <_dtoa_r+0x5c>
 800cffe:	685a      	ldr	r2, [r3, #4]
 800d000:	604a      	str	r2, [r1, #4]
 800d002:	2301      	movs	r3, #1
 800d004:	4093      	lsls	r3, r2
 800d006:	608b      	str	r3, [r1, #8]
 800d008:	4620      	mov	r0, r4
 800d00a:	f000 fe53 	bl	800dcb4 <_Bfree>
 800d00e:	69e3      	ldr	r3, [r4, #28]
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	1e3b      	subs	r3, r7, #0
 800d016:	bfbb      	ittet	lt
 800d018:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d01c:	9303      	strlt	r3, [sp, #12]
 800d01e:	2300      	movge	r3, #0
 800d020:	2201      	movlt	r2, #1
 800d022:	bfac      	ite	ge
 800d024:	f8c8 3000 	strge.w	r3, [r8]
 800d028:	f8c8 2000 	strlt.w	r2, [r8]
 800d02c:	4b9e      	ldr	r3, [pc, #632]	; (800d2a8 <_dtoa_r+0x2f0>)
 800d02e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d032:	ea33 0308 	bics.w	r3, r3, r8
 800d036:	d11b      	bne.n	800d070 <_dtoa_r+0xb8>
 800d038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d03a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d03e:	6013      	str	r3, [r2, #0]
 800d040:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d044:	4333      	orrs	r3, r6
 800d046:	f000 8593 	beq.w	800db70 <_dtoa_r+0xbb8>
 800d04a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d04c:	b963      	cbnz	r3, 800d068 <_dtoa_r+0xb0>
 800d04e:	4b97      	ldr	r3, [pc, #604]	; (800d2ac <_dtoa_r+0x2f4>)
 800d050:	e027      	b.n	800d0a2 <_dtoa_r+0xea>
 800d052:	4b97      	ldr	r3, [pc, #604]	; (800d2b0 <_dtoa_r+0x2f8>)
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	3308      	adds	r3, #8
 800d058:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d05a:	6013      	str	r3, [r2, #0]
 800d05c:	9800      	ldr	r0, [sp, #0]
 800d05e:	b013      	add	sp, #76	; 0x4c
 800d060:	ecbd 8b04 	vpop	{d8-d9}
 800d064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d068:	4b90      	ldr	r3, [pc, #576]	; (800d2ac <_dtoa_r+0x2f4>)
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	3303      	adds	r3, #3
 800d06e:	e7f3      	b.n	800d058 <_dtoa_r+0xa0>
 800d070:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d074:	2200      	movs	r2, #0
 800d076:	ec51 0b17 	vmov	r0, r1, d7
 800d07a:	eeb0 8a47 	vmov.f32	s16, s14
 800d07e:	eef0 8a67 	vmov.f32	s17, s15
 800d082:	2300      	movs	r3, #0
 800d084:	f7f3 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 800d088:	4681      	mov	r9, r0
 800d08a:	b160      	cbz	r0, 800d0a6 <_dtoa_r+0xee>
 800d08c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d08e:	2301      	movs	r3, #1
 800d090:	6013      	str	r3, [r2, #0]
 800d092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d094:	2b00      	cmp	r3, #0
 800d096:	f000 8568 	beq.w	800db6a <_dtoa_r+0xbb2>
 800d09a:	4b86      	ldr	r3, [pc, #536]	; (800d2b4 <_dtoa_r+0x2fc>)
 800d09c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d09e:	6013      	str	r3, [r2, #0]
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	e7da      	b.n	800d05c <_dtoa_r+0xa4>
 800d0a6:	aa10      	add	r2, sp, #64	; 0x40
 800d0a8:	a911      	add	r1, sp, #68	; 0x44
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	eeb0 0a48 	vmov.f32	s0, s16
 800d0b0:	eef0 0a68 	vmov.f32	s1, s17
 800d0b4:	f001 f99a 	bl	800e3ec <__d2b>
 800d0b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d0bc:	4682      	mov	sl, r0
 800d0be:	2d00      	cmp	r5, #0
 800d0c0:	d07f      	beq.n	800d1c2 <_dtoa_r+0x20a>
 800d0c2:	ee18 3a90 	vmov	r3, s17
 800d0c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d0ce:	ec51 0b18 	vmov	r0, r1, d8
 800d0d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d0d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d0da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d0de:	4619      	mov	r1, r3
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	4b75      	ldr	r3, [pc, #468]	; (800d2b8 <_dtoa_r+0x300>)
 800d0e4:	f7f3 f8d0 	bl	8000288 <__aeabi_dsub>
 800d0e8:	a367      	add	r3, pc, #412	; (adr r3, 800d288 <_dtoa_r+0x2d0>)
 800d0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ee:	f7f3 fa83 	bl	80005f8 <__aeabi_dmul>
 800d0f2:	a367      	add	r3, pc, #412	; (adr r3, 800d290 <_dtoa_r+0x2d8>)
 800d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f8:	f7f3 f8c8 	bl	800028c <__adddf3>
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	4628      	mov	r0, r5
 800d100:	460f      	mov	r7, r1
 800d102:	f7f3 fa0f 	bl	8000524 <__aeabi_i2d>
 800d106:	a364      	add	r3, pc, #400	; (adr r3, 800d298 <_dtoa_r+0x2e0>)
 800d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10c:	f7f3 fa74 	bl	80005f8 <__aeabi_dmul>
 800d110:	4602      	mov	r2, r0
 800d112:	460b      	mov	r3, r1
 800d114:	4630      	mov	r0, r6
 800d116:	4639      	mov	r1, r7
 800d118:	f7f3 f8b8 	bl	800028c <__adddf3>
 800d11c:	4606      	mov	r6, r0
 800d11e:	460f      	mov	r7, r1
 800d120:	f7f3 fd1a 	bl	8000b58 <__aeabi_d2iz>
 800d124:	2200      	movs	r2, #0
 800d126:	4683      	mov	fp, r0
 800d128:	2300      	movs	r3, #0
 800d12a:	4630      	mov	r0, r6
 800d12c:	4639      	mov	r1, r7
 800d12e:	f7f3 fcd5 	bl	8000adc <__aeabi_dcmplt>
 800d132:	b148      	cbz	r0, 800d148 <_dtoa_r+0x190>
 800d134:	4658      	mov	r0, fp
 800d136:	f7f3 f9f5 	bl	8000524 <__aeabi_i2d>
 800d13a:	4632      	mov	r2, r6
 800d13c:	463b      	mov	r3, r7
 800d13e:	f7f3 fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d142:	b908      	cbnz	r0, 800d148 <_dtoa_r+0x190>
 800d144:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d148:	f1bb 0f16 	cmp.w	fp, #22
 800d14c:	d857      	bhi.n	800d1fe <_dtoa_r+0x246>
 800d14e:	4b5b      	ldr	r3, [pc, #364]	; (800d2bc <_dtoa_r+0x304>)
 800d150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d158:	ec51 0b18 	vmov	r0, r1, d8
 800d15c:	f7f3 fcbe 	bl	8000adc <__aeabi_dcmplt>
 800d160:	2800      	cmp	r0, #0
 800d162:	d04e      	beq.n	800d202 <_dtoa_r+0x24a>
 800d164:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d168:	2300      	movs	r3, #0
 800d16a:	930c      	str	r3, [sp, #48]	; 0x30
 800d16c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d16e:	1b5b      	subs	r3, r3, r5
 800d170:	1e5a      	subs	r2, r3, #1
 800d172:	bf45      	ittet	mi
 800d174:	f1c3 0301 	rsbmi	r3, r3, #1
 800d178:	9305      	strmi	r3, [sp, #20]
 800d17a:	2300      	movpl	r3, #0
 800d17c:	2300      	movmi	r3, #0
 800d17e:	9206      	str	r2, [sp, #24]
 800d180:	bf54      	ite	pl
 800d182:	9305      	strpl	r3, [sp, #20]
 800d184:	9306      	strmi	r3, [sp, #24]
 800d186:	f1bb 0f00 	cmp.w	fp, #0
 800d18a:	db3c      	blt.n	800d206 <_dtoa_r+0x24e>
 800d18c:	9b06      	ldr	r3, [sp, #24]
 800d18e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d192:	445b      	add	r3, fp
 800d194:	9306      	str	r3, [sp, #24]
 800d196:	2300      	movs	r3, #0
 800d198:	9308      	str	r3, [sp, #32]
 800d19a:	9b07      	ldr	r3, [sp, #28]
 800d19c:	2b09      	cmp	r3, #9
 800d19e:	d868      	bhi.n	800d272 <_dtoa_r+0x2ba>
 800d1a0:	2b05      	cmp	r3, #5
 800d1a2:	bfc4      	itt	gt
 800d1a4:	3b04      	subgt	r3, #4
 800d1a6:	9307      	strgt	r3, [sp, #28]
 800d1a8:	9b07      	ldr	r3, [sp, #28]
 800d1aa:	f1a3 0302 	sub.w	r3, r3, #2
 800d1ae:	bfcc      	ite	gt
 800d1b0:	2500      	movgt	r5, #0
 800d1b2:	2501      	movle	r5, #1
 800d1b4:	2b03      	cmp	r3, #3
 800d1b6:	f200 8085 	bhi.w	800d2c4 <_dtoa_r+0x30c>
 800d1ba:	e8df f003 	tbb	[pc, r3]
 800d1be:	3b2e      	.short	0x3b2e
 800d1c0:	5839      	.short	0x5839
 800d1c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d1c6:	441d      	add	r5, r3
 800d1c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d1cc:	2b20      	cmp	r3, #32
 800d1ce:	bfc1      	itttt	gt
 800d1d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d1d4:	fa08 f803 	lslgt.w	r8, r8, r3
 800d1d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d1dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d1e0:	bfd6      	itet	le
 800d1e2:	f1c3 0320 	rsble	r3, r3, #32
 800d1e6:	ea48 0003 	orrgt.w	r0, r8, r3
 800d1ea:	fa06 f003 	lslle.w	r0, r6, r3
 800d1ee:	f7f3 f989 	bl	8000504 <__aeabi_ui2d>
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d1f8:	3d01      	subs	r5, #1
 800d1fa:	920e      	str	r2, [sp, #56]	; 0x38
 800d1fc:	e76f      	b.n	800d0de <_dtoa_r+0x126>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e7b3      	b.n	800d16a <_dtoa_r+0x1b2>
 800d202:	900c      	str	r0, [sp, #48]	; 0x30
 800d204:	e7b2      	b.n	800d16c <_dtoa_r+0x1b4>
 800d206:	9b05      	ldr	r3, [sp, #20]
 800d208:	eba3 030b 	sub.w	r3, r3, fp
 800d20c:	9305      	str	r3, [sp, #20]
 800d20e:	f1cb 0300 	rsb	r3, fp, #0
 800d212:	9308      	str	r3, [sp, #32]
 800d214:	2300      	movs	r3, #0
 800d216:	930b      	str	r3, [sp, #44]	; 0x2c
 800d218:	e7bf      	b.n	800d19a <_dtoa_r+0x1e2>
 800d21a:	2300      	movs	r3, #0
 800d21c:	9309      	str	r3, [sp, #36]	; 0x24
 800d21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d220:	2b00      	cmp	r3, #0
 800d222:	dc52      	bgt.n	800d2ca <_dtoa_r+0x312>
 800d224:	2301      	movs	r3, #1
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	9304      	str	r3, [sp, #16]
 800d22a:	461a      	mov	r2, r3
 800d22c:	920a      	str	r2, [sp, #40]	; 0x28
 800d22e:	e00b      	b.n	800d248 <_dtoa_r+0x290>
 800d230:	2301      	movs	r3, #1
 800d232:	e7f3      	b.n	800d21c <_dtoa_r+0x264>
 800d234:	2300      	movs	r3, #0
 800d236:	9309      	str	r3, [sp, #36]	; 0x24
 800d238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d23a:	445b      	add	r3, fp
 800d23c:	9301      	str	r3, [sp, #4]
 800d23e:	3301      	adds	r3, #1
 800d240:	2b01      	cmp	r3, #1
 800d242:	9304      	str	r3, [sp, #16]
 800d244:	bfb8      	it	lt
 800d246:	2301      	movlt	r3, #1
 800d248:	69e0      	ldr	r0, [r4, #28]
 800d24a:	2100      	movs	r1, #0
 800d24c:	2204      	movs	r2, #4
 800d24e:	f102 0614 	add.w	r6, r2, #20
 800d252:	429e      	cmp	r6, r3
 800d254:	d93d      	bls.n	800d2d2 <_dtoa_r+0x31a>
 800d256:	6041      	str	r1, [r0, #4]
 800d258:	4620      	mov	r0, r4
 800d25a:	f000 fceb 	bl	800dc34 <_Balloc>
 800d25e:	9000      	str	r0, [sp, #0]
 800d260:	2800      	cmp	r0, #0
 800d262:	d139      	bne.n	800d2d8 <_dtoa_r+0x320>
 800d264:	4b16      	ldr	r3, [pc, #88]	; (800d2c0 <_dtoa_r+0x308>)
 800d266:	4602      	mov	r2, r0
 800d268:	f240 11af 	movw	r1, #431	; 0x1af
 800d26c:	e6bd      	b.n	800cfea <_dtoa_r+0x32>
 800d26e:	2301      	movs	r3, #1
 800d270:	e7e1      	b.n	800d236 <_dtoa_r+0x27e>
 800d272:	2501      	movs	r5, #1
 800d274:	2300      	movs	r3, #0
 800d276:	9307      	str	r3, [sp, #28]
 800d278:	9509      	str	r5, [sp, #36]	; 0x24
 800d27a:	f04f 33ff 	mov.w	r3, #4294967295
 800d27e:	9301      	str	r3, [sp, #4]
 800d280:	9304      	str	r3, [sp, #16]
 800d282:	2200      	movs	r2, #0
 800d284:	2312      	movs	r3, #18
 800d286:	e7d1      	b.n	800d22c <_dtoa_r+0x274>
 800d288:	636f4361 	.word	0x636f4361
 800d28c:	3fd287a7 	.word	0x3fd287a7
 800d290:	8b60c8b3 	.word	0x8b60c8b3
 800d294:	3fc68a28 	.word	0x3fc68a28
 800d298:	509f79fb 	.word	0x509f79fb
 800d29c:	3fd34413 	.word	0x3fd34413
 800d2a0:	08010562 	.word	0x08010562
 800d2a4:	08010579 	.word	0x08010579
 800d2a8:	7ff00000 	.word	0x7ff00000
 800d2ac:	0801055e 	.word	0x0801055e
 800d2b0:	08010555 	.word	0x08010555
 800d2b4:	0801052d 	.word	0x0801052d
 800d2b8:	3ff80000 	.word	0x3ff80000
 800d2bc:	08010668 	.word	0x08010668
 800d2c0:	080105d1 	.word	0x080105d1
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c8:	e7d7      	b.n	800d27a <_dtoa_r+0x2c2>
 800d2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2cc:	9301      	str	r3, [sp, #4]
 800d2ce:	9304      	str	r3, [sp, #16]
 800d2d0:	e7ba      	b.n	800d248 <_dtoa_r+0x290>
 800d2d2:	3101      	adds	r1, #1
 800d2d4:	0052      	lsls	r2, r2, #1
 800d2d6:	e7ba      	b.n	800d24e <_dtoa_r+0x296>
 800d2d8:	69e3      	ldr	r3, [r4, #28]
 800d2da:	9a00      	ldr	r2, [sp, #0]
 800d2dc:	601a      	str	r2, [r3, #0]
 800d2de:	9b04      	ldr	r3, [sp, #16]
 800d2e0:	2b0e      	cmp	r3, #14
 800d2e2:	f200 80a8 	bhi.w	800d436 <_dtoa_r+0x47e>
 800d2e6:	2d00      	cmp	r5, #0
 800d2e8:	f000 80a5 	beq.w	800d436 <_dtoa_r+0x47e>
 800d2ec:	f1bb 0f00 	cmp.w	fp, #0
 800d2f0:	dd38      	ble.n	800d364 <_dtoa_r+0x3ac>
 800d2f2:	4bc0      	ldr	r3, [pc, #768]	; (800d5f4 <_dtoa_r+0x63c>)
 800d2f4:	f00b 020f 	and.w	r2, fp, #15
 800d2f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d300:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d304:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d308:	d019      	beq.n	800d33e <_dtoa_r+0x386>
 800d30a:	4bbb      	ldr	r3, [pc, #748]	; (800d5f8 <_dtoa_r+0x640>)
 800d30c:	ec51 0b18 	vmov	r0, r1, d8
 800d310:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d314:	f7f3 fa9a 	bl	800084c <__aeabi_ddiv>
 800d318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d31c:	f008 080f 	and.w	r8, r8, #15
 800d320:	2503      	movs	r5, #3
 800d322:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d5f8 <_dtoa_r+0x640>
 800d326:	f1b8 0f00 	cmp.w	r8, #0
 800d32a:	d10a      	bne.n	800d342 <_dtoa_r+0x38a>
 800d32c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d330:	4632      	mov	r2, r6
 800d332:	463b      	mov	r3, r7
 800d334:	f7f3 fa8a 	bl	800084c <__aeabi_ddiv>
 800d338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d33c:	e02b      	b.n	800d396 <_dtoa_r+0x3de>
 800d33e:	2502      	movs	r5, #2
 800d340:	e7ef      	b.n	800d322 <_dtoa_r+0x36a>
 800d342:	f018 0f01 	tst.w	r8, #1
 800d346:	d008      	beq.n	800d35a <_dtoa_r+0x3a2>
 800d348:	4630      	mov	r0, r6
 800d34a:	4639      	mov	r1, r7
 800d34c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d350:	f7f3 f952 	bl	80005f8 <__aeabi_dmul>
 800d354:	3501      	adds	r5, #1
 800d356:	4606      	mov	r6, r0
 800d358:	460f      	mov	r7, r1
 800d35a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d35e:	f109 0908 	add.w	r9, r9, #8
 800d362:	e7e0      	b.n	800d326 <_dtoa_r+0x36e>
 800d364:	f000 809f 	beq.w	800d4a6 <_dtoa_r+0x4ee>
 800d368:	f1cb 0600 	rsb	r6, fp, #0
 800d36c:	4ba1      	ldr	r3, [pc, #644]	; (800d5f4 <_dtoa_r+0x63c>)
 800d36e:	4fa2      	ldr	r7, [pc, #648]	; (800d5f8 <_dtoa_r+0x640>)
 800d370:	f006 020f 	and.w	r2, r6, #15
 800d374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37c:	ec51 0b18 	vmov	r0, r1, d8
 800d380:	f7f3 f93a 	bl	80005f8 <__aeabi_dmul>
 800d384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d388:	1136      	asrs	r6, r6, #4
 800d38a:	2300      	movs	r3, #0
 800d38c:	2502      	movs	r5, #2
 800d38e:	2e00      	cmp	r6, #0
 800d390:	d17e      	bne.n	800d490 <_dtoa_r+0x4d8>
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1d0      	bne.n	800d338 <_dtoa_r+0x380>
 800d396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d398:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f000 8084 	beq.w	800d4aa <_dtoa_r+0x4f2>
 800d3a2:	4b96      	ldr	r3, [pc, #600]	; (800d5fc <_dtoa_r+0x644>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	4640      	mov	r0, r8
 800d3a8:	4649      	mov	r1, r9
 800d3aa:	f7f3 fb97 	bl	8000adc <__aeabi_dcmplt>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d07b      	beq.n	800d4aa <_dtoa_r+0x4f2>
 800d3b2:	9b04      	ldr	r3, [sp, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d078      	beq.n	800d4aa <_dtoa_r+0x4f2>
 800d3b8:	9b01      	ldr	r3, [sp, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	dd39      	ble.n	800d432 <_dtoa_r+0x47a>
 800d3be:	4b90      	ldr	r3, [pc, #576]	; (800d600 <_dtoa_r+0x648>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	4640      	mov	r0, r8
 800d3c4:	4649      	mov	r1, r9
 800d3c6:	f7f3 f917 	bl	80005f8 <__aeabi_dmul>
 800d3ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3ce:	9e01      	ldr	r6, [sp, #4]
 800d3d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d3d4:	3501      	adds	r5, #1
 800d3d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d3da:	4628      	mov	r0, r5
 800d3dc:	f7f3 f8a2 	bl	8000524 <__aeabi_i2d>
 800d3e0:	4642      	mov	r2, r8
 800d3e2:	464b      	mov	r3, r9
 800d3e4:	f7f3 f908 	bl	80005f8 <__aeabi_dmul>
 800d3e8:	4b86      	ldr	r3, [pc, #536]	; (800d604 <_dtoa_r+0x64c>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f7f2 ff4e 	bl	800028c <__adddf3>
 800d3f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3f8:	9303      	str	r3, [sp, #12]
 800d3fa:	2e00      	cmp	r6, #0
 800d3fc:	d158      	bne.n	800d4b0 <_dtoa_r+0x4f8>
 800d3fe:	4b82      	ldr	r3, [pc, #520]	; (800d608 <_dtoa_r+0x650>)
 800d400:	2200      	movs	r2, #0
 800d402:	4640      	mov	r0, r8
 800d404:	4649      	mov	r1, r9
 800d406:	f7f2 ff3f 	bl	8000288 <__aeabi_dsub>
 800d40a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d40e:	4680      	mov	r8, r0
 800d410:	4689      	mov	r9, r1
 800d412:	f7f3 fb81 	bl	8000b18 <__aeabi_dcmpgt>
 800d416:	2800      	cmp	r0, #0
 800d418:	f040 8296 	bne.w	800d948 <_dtoa_r+0x990>
 800d41c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d420:	4640      	mov	r0, r8
 800d422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d426:	4649      	mov	r1, r9
 800d428:	f7f3 fb58 	bl	8000adc <__aeabi_dcmplt>
 800d42c:	2800      	cmp	r0, #0
 800d42e:	f040 8289 	bne.w	800d944 <_dtoa_r+0x98c>
 800d432:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f2c0 814e 	blt.w	800d6da <_dtoa_r+0x722>
 800d43e:	f1bb 0f0e 	cmp.w	fp, #14
 800d442:	f300 814a 	bgt.w	800d6da <_dtoa_r+0x722>
 800d446:	4b6b      	ldr	r3, [pc, #428]	; (800d5f4 <_dtoa_r+0x63c>)
 800d448:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d44c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d452:	2b00      	cmp	r3, #0
 800d454:	f280 80dc 	bge.w	800d610 <_dtoa_r+0x658>
 800d458:	9b04      	ldr	r3, [sp, #16]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f300 80d8 	bgt.w	800d610 <_dtoa_r+0x658>
 800d460:	f040 826f 	bne.w	800d942 <_dtoa_r+0x98a>
 800d464:	4b68      	ldr	r3, [pc, #416]	; (800d608 <_dtoa_r+0x650>)
 800d466:	2200      	movs	r2, #0
 800d468:	4640      	mov	r0, r8
 800d46a:	4649      	mov	r1, r9
 800d46c:	f7f3 f8c4 	bl	80005f8 <__aeabi_dmul>
 800d470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d474:	f7f3 fb46 	bl	8000b04 <__aeabi_dcmpge>
 800d478:	9e04      	ldr	r6, [sp, #16]
 800d47a:	4637      	mov	r7, r6
 800d47c:	2800      	cmp	r0, #0
 800d47e:	f040 8245 	bne.w	800d90c <_dtoa_r+0x954>
 800d482:	9d00      	ldr	r5, [sp, #0]
 800d484:	2331      	movs	r3, #49	; 0x31
 800d486:	f805 3b01 	strb.w	r3, [r5], #1
 800d48a:	f10b 0b01 	add.w	fp, fp, #1
 800d48e:	e241      	b.n	800d914 <_dtoa_r+0x95c>
 800d490:	07f2      	lsls	r2, r6, #31
 800d492:	d505      	bpl.n	800d4a0 <_dtoa_r+0x4e8>
 800d494:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d498:	f7f3 f8ae 	bl	80005f8 <__aeabi_dmul>
 800d49c:	3501      	adds	r5, #1
 800d49e:	2301      	movs	r3, #1
 800d4a0:	1076      	asrs	r6, r6, #1
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	e773      	b.n	800d38e <_dtoa_r+0x3d6>
 800d4a6:	2502      	movs	r5, #2
 800d4a8:	e775      	b.n	800d396 <_dtoa_r+0x3de>
 800d4aa:	9e04      	ldr	r6, [sp, #16]
 800d4ac:	465f      	mov	r7, fp
 800d4ae:	e792      	b.n	800d3d6 <_dtoa_r+0x41e>
 800d4b0:	9900      	ldr	r1, [sp, #0]
 800d4b2:	4b50      	ldr	r3, [pc, #320]	; (800d5f4 <_dtoa_r+0x63c>)
 800d4b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4b8:	4431      	add	r1, r6
 800d4ba:	9102      	str	r1, [sp, #8]
 800d4bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4be:	eeb0 9a47 	vmov.f32	s18, s14
 800d4c2:	eef0 9a67 	vmov.f32	s19, s15
 800d4c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d4ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d4ce:	2900      	cmp	r1, #0
 800d4d0:	d044      	beq.n	800d55c <_dtoa_r+0x5a4>
 800d4d2:	494e      	ldr	r1, [pc, #312]	; (800d60c <_dtoa_r+0x654>)
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	f7f3 f9b9 	bl	800084c <__aeabi_ddiv>
 800d4da:	ec53 2b19 	vmov	r2, r3, d9
 800d4de:	f7f2 fed3 	bl	8000288 <__aeabi_dsub>
 800d4e2:	9d00      	ldr	r5, [sp, #0]
 800d4e4:	ec41 0b19 	vmov	d9, r0, r1
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	4640      	mov	r0, r8
 800d4ec:	f7f3 fb34 	bl	8000b58 <__aeabi_d2iz>
 800d4f0:	4606      	mov	r6, r0
 800d4f2:	f7f3 f817 	bl	8000524 <__aeabi_i2d>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	4649      	mov	r1, r9
 800d4fe:	f7f2 fec3 	bl	8000288 <__aeabi_dsub>
 800d502:	3630      	adds	r6, #48	; 0x30
 800d504:	f805 6b01 	strb.w	r6, [r5], #1
 800d508:	ec53 2b19 	vmov	r2, r3, d9
 800d50c:	4680      	mov	r8, r0
 800d50e:	4689      	mov	r9, r1
 800d510:	f7f3 fae4 	bl	8000adc <__aeabi_dcmplt>
 800d514:	2800      	cmp	r0, #0
 800d516:	d164      	bne.n	800d5e2 <_dtoa_r+0x62a>
 800d518:	4642      	mov	r2, r8
 800d51a:	464b      	mov	r3, r9
 800d51c:	4937      	ldr	r1, [pc, #220]	; (800d5fc <_dtoa_r+0x644>)
 800d51e:	2000      	movs	r0, #0
 800d520:	f7f2 feb2 	bl	8000288 <__aeabi_dsub>
 800d524:	ec53 2b19 	vmov	r2, r3, d9
 800d528:	f7f3 fad8 	bl	8000adc <__aeabi_dcmplt>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	f040 80b6 	bne.w	800d69e <_dtoa_r+0x6e6>
 800d532:	9b02      	ldr	r3, [sp, #8]
 800d534:	429d      	cmp	r5, r3
 800d536:	f43f af7c 	beq.w	800d432 <_dtoa_r+0x47a>
 800d53a:	4b31      	ldr	r3, [pc, #196]	; (800d600 <_dtoa_r+0x648>)
 800d53c:	ec51 0b19 	vmov	r0, r1, d9
 800d540:	2200      	movs	r2, #0
 800d542:	f7f3 f859 	bl	80005f8 <__aeabi_dmul>
 800d546:	4b2e      	ldr	r3, [pc, #184]	; (800d600 <_dtoa_r+0x648>)
 800d548:	ec41 0b19 	vmov	d9, r0, r1
 800d54c:	2200      	movs	r2, #0
 800d54e:	4640      	mov	r0, r8
 800d550:	4649      	mov	r1, r9
 800d552:	f7f3 f851 	bl	80005f8 <__aeabi_dmul>
 800d556:	4680      	mov	r8, r0
 800d558:	4689      	mov	r9, r1
 800d55a:	e7c5      	b.n	800d4e8 <_dtoa_r+0x530>
 800d55c:	ec51 0b17 	vmov	r0, r1, d7
 800d560:	f7f3 f84a 	bl	80005f8 <__aeabi_dmul>
 800d564:	9b02      	ldr	r3, [sp, #8]
 800d566:	9d00      	ldr	r5, [sp, #0]
 800d568:	930f      	str	r3, [sp, #60]	; 0x3c
 800d56a:	ec41 0b19 	vmov	d9, r0, r1
 800d56e:	4649      	mov	r1, r9
 800d570:	4640      	mov	r0, r8
 800d572:	f7f3 faf1 	bl	8000b58 <__aeabi_d2iz>
 800d576:	4606      	mov	r6, r0
 800d578:	f7f2 ffd4 	bl	8000524 <__aeabi_i2d>
 800d57c:	3630      	adds	r6, #48	; 0x30
 800d57e:	4602      	mov	r2, r0
 800d580:	460b      	mov	r3, r1
 800d582:	4640      	mov	r0, r8
 800d584:	4649      	mov	r1, r9
 800d586:	f7f2 fe7f 	bl	8000288 <__aeabi_dsub>
 800d58a:	f805 6b01 	strb.w	r6, [r5], #1
 800d58e:	9b02      	ldr	r3, [sp, #8]
 800d590:	429d      	cmp	r5, r3
 800d592:	4680      	mov	r8, r0
 800d594:	4689      	mov	r9, r1
 800d596:	f04f 0200 	mov.w	r2, #0
 800d59a:	d124      	bne.n	800d5e6 <_dtoa_r+0x62e>
 800d59c:	4b1b      	ldr	r3, [pc, #108]	; (800d60c <_dtoa_r+0x654>)
 800d59e:	ec51 0b19 	vmov	r0, r1, d9
 800d5a2:	f7f2 fe73 	bl	800028c <__adddf3>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	4640      	mov	r0, r8
 800d5ac:	4649      	mov	r1, r9
 800d5ae:	f7f3 fab3 	bl	8000b18 <__aeabi_dcmpgt>
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	d173      	bne.n	800d69e <_dtoa_r+0x6e6>
 800d5b6:	ec53 2b19 	vmov	r2, r3, d9
 800d5ba:	4914      	ldr	r1, [pc, #80]	; (800d60c <_dtoa_r+0x654>)
 800d5bc:	2000      	movs	r0, #0
 800d5be:	f7f2 fe63 	bl	8000288 <__aeabi_dsub>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	4649      	mov	r1, r9
 800d5ca:	f7f3 fa87 	bl	8000adc <__aeabi_dcmplt>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	f43f af2f 	beq.w	800d432 <_dtoa_r+0x47a>
 800d5d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d5d6:	1e6b      	subs	r3, r5, #1
 800d5d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d5de:	2b30      	cmp	r3, #48	; 0x30
 800d5e0:	d0f8      	beq.n	800d5d4 <_dtoa_r+0x61c>
 800d5e2:	46bb      	mov	fp, r7
 800d5e4:	e04a      	b.n	800d67c <_dtoa_r+0x6c4>
 800d5e6:	4b06      	ldr	r3, [pc, #24]	; (800d600 <_dtoa_r+0x648>)
 800d5e8:	f7f3 f806 	bl	80005f8 <__aeabi_dmul>
 800d5ec:	4680      	mov	r8, r0
 800d5ee:	4689      	mov	r9, r1
 800d5f0:	e7bd      	b.n	800d56e <_dtoa_r+0x5b6>
 800d5f2:	bf00      	nop
 800d5f4:	08010668 	.word	0x08010668
 800d5f8:	08010640 	.word	0x08010640
 800d5fc:	3ff00000 	.word	0x3ff00000
 800d600:	40240000 	.word	0x40240000
 800d604:	401c0000 	.word	0x401c0000
 800d608:	40140000 	.word	0x40140000
 800d60c:	3fe00000 	.word	0x3fe00000
 800d610:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d614:	9d00      	ldr	r5, [sp, #0]
 800d616:	4642      	mov	r2, r8
 800d618:	464b      	mov	r3, r9
 800d61a:	4630      	mov	r0, r6
 800d61c:	4639      	mov	r1, r7
 800d61e:	f7f3 f915 	bl	800084c <__aeabi_ddiv>
 800d622:	f7f3 fa99 	bl	8000b58 <__aeabi_d2iz>
 800d626:	9001      	str	r0, [sp, #4]
 800d628:	f7f2 ff7c 	bl	8000524 <__aeabi_i2d>
 800d62c:	4642      	mov	r2, r8
 800d62e:	464b      	mov	r3, r9
 800d630:	f7f2 ffe2 	bl	80005f8 <__aeabi_dmul>
 800d634:	4602      	mov	r2, r0
 800d636:	460b      	mov	r3, r1
 800d638:	4630      	mov	r0, r6
 800d63a:	4639      	mov	r1, r7
 800d63c:	f7f2 fe24 	bl	8000288 <__aeabi_dsub>
 800d640:	9e01      	ldr	r6, [sp, #4]
 800d642:	9f04      	ldr	r7, [sp, #16]
 800d644:	3630      	adds	r6, #48	; 0x30
 800d646:	f805 6b01 	strb.w	r6, [r5], #1
 800d64a:	9e00      	ldr	r6, [sp, #0]
 800d64c:	1bae      	subs	r6, r5, r6
 800d64e:	42b7      	cmp	r7, r6
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	d134      	bne.n	800d6c0 <_dtoa_r+0x708>
 800d656:	f7f2 fe19 	bl	800028c <__adddf3>
 800d65a:	4642      	mov	r2, r8
 800d65c:	464b      	mov	r3, r9
 800d65e:	4606      	mov	r6, r0
 800d660:	460f      	mov	r7, r1
 800d662:	f7f3 fa59 	bl	8000b18 <__aeabi_dcmpgt>
 800d666:	b9c8      	cbnz	r0, 800d69c <_dtoa_r+0x6e4>
 800d668:	4642      	mov	r2, r8
 800d66a:	464b      	mov	r3, r9
 800d66c:	4630      	mov	r0, r6
 800d66e:	4639      	mov	r1, r7
 800d670:	f7f3 fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d674:	b110      	cbz	r0, 800d67c <_dtoa_r+0x6c4>
 800d676:	9b01      	ldr	r3, [sp, #4]
 800d678:	07db      	lsls	r3, r3, #31
 800d67a:	d40f      	bmi.n	800d69c <_dtoa_r+0x6e4>
 800d67c:	4651      	mov	r1, sl
 800d67e:	4620      	mov	r0, r4
 800d680:	f000 fb18 	bl	800dcb4 <_Bfree>
 800d684:	2300      	movs	r3, #0
 800d686:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d688:	702b      	strb	r3, [r5, #0]
 800d68a:	f10b 0301 	add.w	r3, fp, #1
 800d68e:	6013      	str	r3, [r2, #0]
 800d690:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d692:	2b00      	cmp	r3, #0
 800d694:	f43f ace2 	beq.w	800d05c <_dtoa_r+0xa4>
 800d698:	601d      	str	r5, [r3, #0]
 800d69a:	e4df      	b.n	800d05c <_dtoa_r+0xa4>
 800d69c:	465f      	mov	r7, fp
 800d69e:	462b      	mov	r3, r5
 800d6a0:	461d      	mov	r5, r3
 800d6a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6a6:	2a39      	cmp	r2, #57	; 0x39
 800d6a8:	d106      	bne.n	800d6b8 <_dtoa_r+0x700>
 800d6aa:	9a00      	ldr	r2, [sp, #0]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d1f7      	bne.n	800d6a0 <_dtoa_r+0x6e8>
 800d6b0:	9900      	ldr	r1, [sp, #0]
 800d6b2:	2230      	movs	r2, #48	; 0x30
 800d6b4:	3701      	adds	r7, #1
 800d6b6:	700a      	strb	r2, [r1, #0]
 800d6b8:	781a      	ldrb	r2, [r3, #0]
 800d6ba:	3201      	adds	r2, #1
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	e790      	b.n	800d5e2 <_dtoa_r+0x62a>
 800d6c0:	4ba3      	ldr	r3, [pc, #652]	; (800d950 <_dtoa_r+0x998>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f7f2 ff98 	bl	80005f8 <__aeabi_dmul>
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	4606      	mov	r6, r0
 800d6ce:	460f      	mov	r7, r1
 800d6d0:	f7f3 f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	d09e      	beq.n	800d616 <_dtoa_r+0x65e>
 800d6d8:	e7d0      	b.n	800d67c <_dtoa_r+0x6c4>
 800d6da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6dc:	2a00      	cmp	r2, #0
 800d6de:	f000 80ca 	beq.w	800d876 <_dtoa_r+0x8be>
 800d6e2:	9a07      	ldr	r2, [sp, #28]
 800d6e4:	2a01      	cmp	r2, #1
 800d6e6:	f300 80ad 	bgt.w	800d844 <_dtoa_r+0x88c>
 800d6ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6ec:	2a00      	cmp	r2, #0
 800d6ee:	f000 80a5 	beq.w	800d83c <_dtoa_r+0x884>
 800d6f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d6f6:	9e08      	ldr	r6, [sp, #32]
 800d6f8:	9d05      	ldr	r5, [sp, #20]
 800d6fa:	9a05      	ldr	r2, [sp, #20]
 800d6fc:	441a      	add	r2, r3
 800d6fe:	9205      	str	r2, [sp, #20]
 800d700:	9a06      	ldr	r2, [sp, #24]
 800d702:	2101      	movs	r1, #1
 800d704:	441a      	add	r2, r3
 800d706:	4620      	mov	r0, r4
 800d708:	9206      	str	r2, [sp, #24]
 800d70a:	f000 fbd3 	bl	800deb4 <__i2b>
 800d70e:	4607      	mov	r7, r0
 800d710:	b165      	cbz	r5, 800d72c <_dtoa_r+0x774>
 800d712:	9b06      	ldr	r3, [sp, #24]
 800d714:	2b00      	cmp	r3, #0
 800d716:	dd09      	ble.n	800d72c <_dtoa_r+0x774>
 800d718:	42ab      	cmp	r3, r5
 800d71a:	9a05      	ldr	r2, [sp, #20]
 800d71c:	bfa8      	it	ge
 800d71e:	462b      	movge	r3, r5
 800d720:	1ad2      	subs	r2, r2, r3
 800d722:	9205      	str	r2, [sp, #20]
 800d724:	9a06      	ldr	r2, [sp, #24]
 800d726:	1aed      	subs	r5, r5, r3
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	9306      	str	r3, [sp, #24]
 800d72c:	9b08      	ldr	r3, [sp, #32]
 800d72e:	b1f3      	cbz	r3, 800d76e <_dtoa_r+0x7b6>
 800d730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d732:	2b00      	cmp	r3, #0
 800d734:	f000 80a3 	beq.w	800d87e <_dtoa_r+0x8c6>
 800d738:	2e00      	cmp	r6, #0
 800d73a:	dd10      	ble.n	800d75e <_dtoa_r+0x7a6>
 800d73c:	4639      	mov	r1, r7
 800d73e:	4632      	mov	r2, r6
 800d740:	4620      	mov	r0, r4
 800d742:	f000 fc77 	bl	800e034 <__pow5mult>
 800d746:	4652      	mov	r2, sl
 800d748:	4601      	mov	r1, r0
 800d74a:	4607      	mov	r7, r0
 800d74c:	4620      	mov	r0, r4
 800d74e:	f000 fbc7 	bl	800dee0 <__multiply>
 800d752:	4651      	mov	r1, sl
 800d754:	4680      	mov	r8, r0
 800d756:	4620      	mov	r0, r4
 800d758:	f000 faac 	bl	800dcb4 <_Bfree>
 800d75c:	46c2      	mov	sl, r8
 800d75e:	9b08      	ldr	r3, [sp, #32]
 800d760:	1b9a      	subs	r2, r3, r6
 800d762:	d004      	beq.n	800d76e <_dtoa_r+0x7b6>
 800d764:	4651      	mov	r1, sl
 800d766:	4620      	mov	r0, r4
 800d768:	f000 fc64 	bl	800e034 <__pow5mult>
 800d76c:	4682      	mov	sl, r0
 800d76e:	2101      	movs	r1, #1
 800d770:	4620      	mov	r0, r4
 800d772:	f000 fb9f 	bl	800deb4 <__i2b>
 800d776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d778:	2b00      	cmp	r3, #0
 800d77a:	4606      	mov	r6, r0
 800d77c:	f340 8081 	ble.w	800d882 <_dtoa_r+0x8ca>
 800d780:	461a      	mov	r2, r3
 800d782:	4601      	mov	r1, r0
 800d784:	4620      	mov	r0, r4
 800d786:	f000 fc55 	bl	800e034 <__pow5mult>
 800d78a:	9b07      	ldr	r3, [sp, #28]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	4606      	mov	r6, r0
 800d790:	dd7a      	ble.n	800d888 <_dtoa_r+0x8d0>
 800d792:	f04f 0800 	mov.w	r8, #0
 800d796:	6933      	ldr	r3, [r6, #16]
 800d798:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d79c:	6918      	ldr	r0, [r3, #16]
 800d79e:	f000 fb3b 	bl	800de18 <__hi0bits>
 800d7a2:	f1c0 0020 	rsb	r0, r0, #32
 800d7a6:	9b06      	ldr	r3, [sp, #24]
 800d7a8:	4418      	add	r0, r3
 800d7aa:	f010 001f 	ands.w	r0, r0, #31
 800d7ae:	f000 8094 	beq.w	800d8da <_dtoa_r+0x922>
 800d7b2:	f1c0 0320 	rsb	r3, r0, #32
 800d7b6:	2b04      	cmp	r3, #4
 800d7b8:	f340 8085 	ble.w	800d8c6 <_dtoa_r+0x90e>
 800d7bc:	9b05      	ldr	r3, [sp, #20]
 800d7be:	f1c0 001c 	rsb	r0, r0, #28
 800d7c2:	4403      	add	r3, r0
 800d7c4:	9305      	str	r3, [sp, #20]
 800d7c6:	9b06      	ldr	r3, [sp, #24]
 800d7c8:	4403      	add	r3, r0
 800d7ca:	4405      	add	r5, r0
 800d7cc:	9306      	str	r3, [sp, #24]
 800d7ce:	9b05      	ldr	r3, [sp, #20]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	dd05      	ble.n	800d7e0 <_dtoa_r+0x828>
 800d7d4:	4651      	mov	r1, sl
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f000 fc85 	bl	800e0e8 <__lshift>
 800d7de:	4682      	mov	sl, r0
 800d7e0:	9b06      	ldr	r3, [sp, #24]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	dd05      	ble.n	800d7f2 <_dtoa_r+0x83a>
 800d7e6:	4631      	mov	r1, r6
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f000 fc7c 	bl	800e0e8 <__lshift>
 800d7f0:	4606      	mov	r6, r0
 800d7f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d072      	beq.n	800d8de <_dtoa_r+0x926>
 800d7f8:	4631      	mov	r1, r6
 800d7fa:	4650      	mov	r0, sl
 800d7fc:	f000 fce0 	bl	800e1c0 <__mcmp>
 800d800:	2800      	cmp	r0, #0
 800d802:	da6c      	bge.n	800d8de <_dtoa_r+0x926>
 800d804:	2300      	movs	r3, #0
 800d806:	4651      	mov	r1, sl
 800d808:	220a      	movs	r2, #10
 800d80a:	4620      	mov	r0, r4
 800d80c:	f000 fa74 	bl	800dcf8 <__multadd>
 800d810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d812:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d816:	4682      	mov	sl, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 81b0 	beq.w	800db7e <_dtoa_r+0xbc6>
 800d81e:	2300      	movs	r3, #0
 800d820:	4639      	mov	r1, r7
 800d822:	220a      	movs	r2, #10
 800d824:	4620      	mov	r0, r4
 800d826:	f000 fa67 	bl	800dcf8 <__multadd>
 800d82a:	9b01      	ldr	r3, [sp, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	4607      	mov	r7, r0
 800d830:	f300 8096 	bgt.w	800d960 <_dtoa_r+0x9a8>
 800d834:	9b07      	ldr	r3, [sp, #28]
 800d836:	2b02      	cmp	r3, #2
 800d838:	dc59      	bgt.n	800d8ee <_dtoa_r+0x936>
 800d83a:	e091      	b.n	800d960 <_dtoa_r+0x9a8>
 800d83c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d83e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d842:	e758      	b.n	800d6f6 <_dtoa_r+0x73e>
 800d844:	9b04      	ldr	r3, [sp, #16]
 800d846:	1e5e      	subs	r6, r3, #1
 800d848:	9b08      	ldr	r3, [sp, #32]
 800d84a:	42b3      	cmp	r3, r6
 800d84c:	bfbf      	itttt	lt
 800d84e:	9b08      	ldrlt	r3, [sp, #32]
 800d850:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d852:	9608      	strlt	r6, [sp, #32]
 800d854:	1af3      	sublt	r3, r6, r3
 800d856:	bfb4      	ite	lt
 800d858:	18d2      	addlt	r2, r2, r3
 800d85a:	1b9e      	subge	r6, r3, r6
 800d85c:	9b04      	ldr	r3, [sp, #16]
 800d85e:	bfbc      	itt	lt
 800d860:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d862:	2600      	movlt	r6, #0
 800d864:	2b00      	cmp	r3, #0
 800d866:	bfb7      	itett	lt
 800d868:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d86c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d870:	1a9d      	sublt	r5, r3, r2
 800d872:	2300      	movlt	r3, #0
 800d874:	e741      	b.n	800d6fa <_dtoa_r+0x742>
 800d876:	9e08      	ldr	r6, [sp, #32]
 800d878:	9d05      	ldr	r5, [sp, #20]
 800d87a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d87c:	e748      	b.n	800d710 <_dtoa_r+0x758>
 800d87e:	9a08      	ldr	r2, [sp, #32]
 800d880:	e770      	b.n	800d764 <_dtoa_r+0x7ac>
 800d882:	9b07      	ldr	r3, [sp, #28]
 800d884:	2b01      	cmp	r3, #1
 800d886:	dc19      	bgt.n	800d8bc <_dtoa_r+0x904>
 800d888:	9b02      	ldr	r3, [sp, #8]
 800d88a:	b9bb      	cbnz	r3, 800d8bc <_dtoa_r+0x904>
 800d88c:	9b03      	ldr	r3, [sp, #12]
 800d88e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d892:	b99b      	cbnz	r3, 800d8bc <_dtoa_r+0x904>
 800d894:	9b03      	ldr	r3, [sp, #12]
 800d896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d89a:	0d1b      	lsrs	r3, r3, #20
 800d89c:	051b      	lsls	r3, r3, #20
 800d89e:	b183      	cbz	r3, 800d8c2 <_dtoa_r+0x90a>
 800d8a0:	9b05      	ldr	r3, [sp, #20]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	9305      	str	r3, [sp, #20]
 800d8a6:	9b06      	ldr	r3, [sp, #24]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	9306      	str	r3, [sp, #24]
 800d8ac:	f04f 0801 	mov.w	r8, #1
 800d8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	f47f af6f 	bne.w	800d796 <_dtoa_r+0x7de>
 800d8b8:	2001      	movs	r0, #1
 800d8ba:	e774      	b.n	800d7a6 <_dtoa_r+0x7ee>
 800d8bc:	f04f 0800 	mov.w	r8, #0
 800d8c0:	e7f6      	b.n	800d8b0 <_dtoa_r+0x8f8>
 800d8c2:	4698      	mov	r8, r3
 800d8c4:	e7f4      	b.n	800d8b0 <_dtoa_r+0x8f8>
 800d8c6:	d082      	beq.n	800d7ce <_dtoa_r+0x816>
 800d8c8:	9a05      	ldr	r2, [sp, #20]
 800d8ca:	331c      	adds	r3, #28
 800d8cc:	441a      	add	r2, r3
 800d8ce:	9205      	str	r2, [sp, #20]
 800d8d0:	9a06      	ldr	r2, [sp, #24]
 800d8d2:	441a      	add	r2, r3
 800d8d4:	441d      	add	r5, r3
 800d8d6:	9206      	str	r2, [sp, #24]
 800d8d8:	e779      	b.n	800d7ce <_dtoa_r+0x816>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	e7f4      	b.n	800d8c8 <_dtoa_r+0x910>
 800d8de:	9b04      	ldr	r3, [sp, #16]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	dc37      	bgt.n	800d954 <_dtoa_r+0x99c>
 800d8e4:	9b07      	ldr	r3, [sp, #28]
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	dd34      	ble.n	800d954 <_dtoa_r+0x99c>
 800d8ea:	9b04      	ldr	r3, [sp, #16]
 800d8ec:	9301      	str	r3, [sp, #4]
 800d8ee:	9b01      	ldr	r3, [sp, #4]
 800d8f0:	b963      	cbnz	r3, 800d90c <_dtoa_r+0x954>
 800d8f2:	4631      	mov	r1, r6
 800d8f4:	2205      	movs	r2, #5
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f000 f9fe 	bl	800dcf8 <__multadd>
 800d8fc:	4601      	mov	r1, r0
 800d8fe:	4606      	mov	r6, r0
 800d900:	4650      	mov	r0, sl
 800d902:	f000 fc5d 	bl	800e1c0 <__mcmp>
 800d906:	2800      	cmp	r0, #0
 800d908:	f73f adbb 	bgt.w	800d482 <_dtoa_r+0x4ca>
 800d90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d90e:	9d00      	ldr	r5, [sp, #0]
 800d910:	ea6f 0b03 	mvn.w	fp, r3
 800d914:	f04f 0800 	mov.w	r8, #0
 800d918:	4631      	mov	r1, r6
 800d91a:	4620      	mov	r0, r4
 800d91c:	f000 f9ca 	bl	800dcb4 <_Bfree>
 800d920:	2f00      	cmp	r7, #0
 800d922:	f43f aeab 	beq.w	800d67c <_dtoa_r+0x6c4>
 800d926:	f1b8 0f00 	cmp.w	r8, #0
 800d92a:	d005      	beq.n	800d938 <_dtoa_r+0x980>
 800d92c:	45b8      	cmp	r8, r7
 800d92e:	d003      	beq.n	800d938 <_dtoa_r+0x980>
 800d930:	4641      	mov	r1, r8
 800d932:	4620      	mov	r0, r4
 800d934:	f000 f9be 	bl	800dcb4 <_Bfree>
 800d938:	4639      	mov	r1, r7
 800d93a:	4620      	mov	r0, r4
 800d93c:	f000 f9ba 	bl	800dcb4 <_Bfree>
 800d940:	e69c      	b.n	800d67c <_dtoa_r+0x6c4>
 800d942:	2600      	movs	r6, #0
 800d944:	4637      	mov	r7, r6
 800d946:	e7e1      	b.n	800d90c <_dtoa_r+0x954>
 800d948:	46bb      	mov	fp, r7
 800d94a:	4637      	mov	r7, r6
 800d94c:	e599      	b.n	800d482 <_dtoa_r+0x4ca>
 800d94e:	bf00      	nop
 800d950:	40240000 	.word	0x40240000
 800d954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 80c8 	beq.w	800daec <_dtoa_r+0xb34>
 800d95c:	9b04      	ldr	r3, [sp, #16]
 800d95e:	9301      	str	r3, [sp, #4]
 800d960:	2d00      	cmp	r5, #0
 800d962:	dd05      	ble.n	800d970 <_dtoa_r+0x9b8>
 800d964:	4639      	mov	r1, r7
 800d966:	462a      	mov	r2, r5
 800d968:	4620      	mov	r0, r4
 800d96a:	f000 fbbd 	bl	800e0e8 <__lshift>
 800d96e:	4607      	mov	r7, r0
 800d970:	f1b8 0f00 	cmp.w	r8, #0
 800d974:	d05b      	beq.n	800da2e <_dtoa_r+0xa76>
 800d976:	6879      	ldr	r1, [r7, #4]
 800d978:	4620      	mov	r0, r4
 800d97a:	f000 f95b 	bl	800dc34 <_Balloc>
 800d97e:	4605      	mov	r5, r0
 800d980:	b928      	cbnz	r0, 800d98e <_dtoa_r+0x9d6>
 800d982:	4b83      	ldr	r3, [pc, #524]	; (800db90 <_dtoa_r+0xbd8>)
 800d984:	4602      	mov	r2, r0
 800d986:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d98a:	f7ff bb2e 	b.w	800cfea <_dtoa_r+0x32>
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	3202      	adds	r2, #2
 800d992:	0092      	lsls	r2, r2, #2
 800d994:	f107 010c 	add.w	r1, r7, #12
 800d998:	300c      	adds	r0, #12
 800d99a:	f001 fec1 	bl	800f720 <memcpy>
 800d99e:	2201      	movs	r2, #1
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f000 fba0 	bl	800e0e8 <__lshift>
 800d9a8:	9b00      	ldr	r3, [sp, #0]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	9304      	str	r3, [sp, #16]
 800d9ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	9308      	str	r3, [sp, #32]
 800d9b6:	9b02      	ldr	r3, [sp, #8]
 800d9b8:	f003 0301 	and.w	r3, r3, #1
 800d9bc:	46b8      	mov	r8, r7
 800d9be:	9306      	str	r3, [sp, #24]
 800d9c0:	4607      	mov	r7, r0
 800d9c2:	9b04      	ldr	r3, [sp, #16]
 800d9c4:	4631      	mov	r1, r6
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	4650      	mov	r0, sl
 800d9ca:	9301      	str	r3, [sp, #4]
 800d9cc:	f7ff fa6a 	bl	800cea4 <quorem>
 800d9d0:	4641      	mov	r1, r8
 800d9d2:	9002      	str	r0, [sp, #8]
 800d9d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d9d8:	4650      	mov	r0, sl
 800d9da:	f000 fbf1 	bl	800e1c0 <__mcmp>
 800d9de:	463a      	mov	r2, r7
 800d9e0:	9005      	str	r0, [sp, #20]
 800d9e2:	4631      	mov	r1, r6
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f000 fc07 	bl	800e1f8 <__mdiff>
 800d9ea:	68c2      	ldr	r2, [r0, #12]
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	bb02      	cbnz	r2, 800da32 <_dtoa_r+0xa7a>
 800d9f0:	4601      	mov	r1, r0
 800d9f2:	4650      	mov	r0, sl
 800d9f4:	f000 fbe4 	bl	800e1c0 <__mcmp>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	9209      	str	r2, [sp, #36]	; 0x24
 800da00:	f000 f958 	bl	800dcb4 <_Bfree>
 800da04:	9b07      	ldr	r3, [sp, #28]
 800da06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da08:	9d04      	ldr	r5, [sp, #16]
 800da0a:	ea43 0102 	orr.w	r1, r3, r2
 800da0e:	9b06      	ldr	r3, [sp, #24]
 800da10:	4319      	orrs	r1, r3
 800da12:	d110      	bne.n	800da36 <_dtoa_r+0xa7e>
 800da14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800da18:	d029      	beq.n	800da6e <_dtoa_r+0xab6>
 800da1a:	9b05      	ldr	r3, [sp, #20]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	dd02      	ble.n	800da26 <_dtoa_r+0xa6e>
 800da20:	9b02      	ldr	r3, [sp, #8]
 800da22:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800da26:	9b01      	ldr	r3, [sp, #4]
 800da28:	f883 9000 	strb.w	r9, [r3]
 800da2c:	e774      	b.n	800d918 <_dtoa_r+0x960>
 800da2e:	4638      	mov	r0, r7
 800da30:	e7ba      	b.n	800d9a8 <_dtoa_r+0x9f0>
 800da32:	2201      	movs	r2, #1
 800da34:	e7e1      	b.n	800d9fa <_dtoa_r+0xa42>
 800da36:	9b05      	ldr	r3, [sp, #20]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	db04      	blt.n	800da46 <_dtoa_r+0xa8e>
 800da3c:	9907      	ldr	r1, [sp, #28]
 800da3e:	430b      	orrs	r3, r1
 800da40:	9906      	ldr	r1, [sp, #24]
 800da42:	430b      	orrs	r3, r1
 800da44:	d120      	bne.n	800da88 <_dtoa_r+0xad0>
 800da46:	2a00      	cmp	r2, #0
 800da48:	dded      	ble.n	800da26 <_dtoa_r+0xa6e>
 800da4a:	4651      	mov	r1, sl
 800da4c:	2201      	movs	r2, #1
 800da4e:	4620      	mov	r0, r4
 800da50:	f000 fb4a 	bl	800e0e8 <__lshift>
 800da54:	4631      	mov	r1, r6
 800da56:	4682      	mov	sl, r0
 800da58:	f000 fbb2 	bl	800e1c0 <__mcmp>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	dc03      	bgt.n	800da68 <_dtoa_r+0xab0>
 800da60:	d1e1      	bne.n	800da26 <_dtoa_r+0xa6e>
 800da62:	f019 0f01 	tst.w	r9, #1
 800da66:	d0de      	beq.n	800da26 <_dtoa_r+0xa6e>
 800da68:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800da6c:	d1d8      	bne.n	800da20 <_dtoa_r+0xa68>
 800da6e:	9a01      	ldr	r2, [sp, #4]
 800da70:	2339      	movs	r3, #57	; 0x39
 800da72:	7013      	strb	r3, [r2, #0]
 800da74:	462b      	mov	r3, r5
 800da76:	461d      	mov	r5, r3
 800da78:	3b01      	subs	r3, #1
 800da7a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800da7e:	2a39      	cmp	r2, #57	; 0x39
 800da80:	d06c      	beq.n	800db5c <_dtoa_r+0xba4>
 800da82:	3201      	adds	r2, #1
 800da84:	701a      	strb	r2, [r3, #0]
 800da86:	e747      	b.n	800d918 <_dtoa_r+0x960>
 800da88:	2a00      	cmp	r2, #0
 800da8a:	dd07      	ble.n	800da9c <_dtoa_r+0xae4>
 800da8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800da90:	d0ed      	beq.n	800da6e <_dtoa_r+0xab6>
 800da92:	9a01      	ldr	r2, [sp, #4]
 800da94:	f109 0301 	add.w	r3, r9, #1
 800da98:	7013      	strb	r3, [r2, #0]
 800da9a:	e73d      	b.n	800d918 <_dtoa_r+0x960>
 800da9c:	9b04      	ldr	r3, [sp, #16]
 800da9e:	9a08      	ldr	r2, [sp, #32]
 800daa0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d043      	beq.n	800db30 <_dtoa_r+0xb78>
 800daa8:	4651      	mov	r1, sl
 800daaa:	2300      	movs	r3, #0
 800daac:	220a      	movs	r2, #10
 800daae:	4620      	mov	r0, r4
 800dab0:	f000 f922 	bl	800dcf8 <__multadd>
 800dab4:	45b8      	cmp	r8, r7
 800dab6:	4682      	mov	sl, r0
 800dab8:	f04f 0300 	mov.w	r3, #0
 800dabc:	f04f 020a 	mov.w	r2, #10
 800dac0:	4641      	mov	r1, r8
 800dac2:	4620      	mov	r0, r4
 800dac4:	d107      	bne.n	800dad6 <_dtoa_r+0xb1e>
 800dac6:	f000 f917 	bl	800dcf8 <__multadd>
 800daca:	4680      	mov	r8, r0
 800dacc:	4607      	mov	r7, r0
 800dace:	9b04      	ldr	r3, [sp, #16]
 800dad0:	3301      	adds	r3, #1
 800dad2:	9304      	str	r3, [sp, #16]
 800dad4:	e775      	b.n	800d9c2 <_dtoa_r+0xa0a>
 800dad6:	f000 f90f 	bl	800dcf8 <__multadd>
 800dada:	4639      	mov	r1, r7
 800dadc:	4680      	mov	r8, r0
 800dade:	2300      	movs	r3, #0
 800dae0:	220a      	movs	r2, #10
 800dae2:	4620      	mov	r0, r4
 800dae4:	f000 f908 	bl	800dcf8 <__multadd>
 800dae8:	4607      	mov	r7, r0
 800daea:	e7f0      	b.n	800dace <_dtoa_r+0xb16>
 800daec:	9b04      	ldr	r3, [sp, #16]
 800daee:	9301      	str	r3, [sp, #4]
 800daf0:	9d00      	ldr	r5, [sp, #0]
 800daf2:	4631      	mov	r1, r6
 800daf4:	4650      	mov	r0, sl
 800daf6:	f7ff f9d5 	bl	800cea4 <quorem>
 800dafa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dafe:	9b00      	ldr	r3, [sp, #0]
 800db00:	f805 9b01 	strb.w	r9, [r5], #1
 800db04:	1aea      	subs	r2, r5, r3
 800db06:	9b01      	ldr	r3, [sp, #4]
 800db08:	4293      	cmp	r3, r2
 800db0a:	dd07      	ble.n	800db1c <_dtoa_r+0xb64>
 800db0c:	4651      	mov	r1, sl
 800db0e:	2300      	movs	r3, #0
 800db10:	220a      	movs	r2, #10
 800db12:	4620      	mov	r0, r4
 800db14:	f000 f8f0 	bl	800dcf8 <__multadd>
 800db18:	4682      	mov	sl, r0
 800db1a:	e7ea      	b.n	800daf2 <_dtoa_r+0xb3a>
 800db1c:	9b01      	ldr	r3, [sp, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	bfc8      	it	gt
 800db22:	461d      	movgt	r5, r3
 800db24:	9b00      	ldr	r3, [sp, #0]
 800db26:	bfd8      	it	le
 800db28:	2501      	movle	r5, #1
 800db2a:	441d      	add	r5, r3
 800db2c:	f04f 0800 	mov.w	r8, #0
 800db30:	4651      	mov	r1, sl
 800db32:	2201      	movs	r2, #1
 800db34:	4620      	mov	r0, r4
 800db36:	f000 fad7 	bl	800e0e8 <__lshift>
 800db3a:	4631      	mov	r1, r6
 800db3c:	4682      	mov	sl, r0
 800db3e:	f000 fb3f 	bl	800e1c0 <__mcmp>
 800db42:	2800      	cmp	r0, #0
 800db44:	dc96      	bgt.n	800da74 <_dtoa_r+0xabc>
 800db46:	d102      	bne.n	800db4e <_dtoa_r+0xb96>
 800db48:	f019 0f01 	tst.w	r9, #1
 800db4c:	d192      	bne.n	800da74 <_dtoa_r+0xabc>
 800db4e:	462b      	mov	r3, r5
 800db50:	461d      	mov	r5, r3
 800db52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db56:	2a30      	cmp	r2, #48	; 0x30
 800db58:	d0fa      	beq.n	800db50 <_dtoa_r+0xb98>
 800db5a:	e6dd      	b.n	800d918 <_dtoa_r+0x960>
 800db5c:	9a00      	ldr	r2, [sp, #0]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d189      	bne.n	800da76 <_dtoa_r+0xabe>
 800db62:	f10b 0b01 	add.w	fp, fp, #1
 800db66:	2331      	movs	r3, #49	; 0x31
 800db68:	e796      	b.n	800da98 <_dtoa_r+0xae0>
 800db6a:	4b0a      	ldr	r3, [pc, #40]	; (800db94 <_dtoa_r+0xbdc>)
 800db6c:	f7ff ba99 	b.w	800d0a2 <_dtoa_r+0xea>
 800db70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db72:	2b00      	cmp	r3, #0
 800db74:	f47f aa6d 	bne.w	800d052 <_dtoa_r+0x9a>
 800db78:	4b07      	ldr	r3, [pc, #28]	; (800db98 <_dtoa_r+0xbe0>)
 800db7a:	f7ff ba92 	b.w	800d0a2 <_dtoa_r+0xea>
 800db7e:	9b01      	ldr	r3, [sp, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	dcb5      	bgt.n	800daf0 <_dtoa_r+0xb38>
 800db84:	9b07      	ldr	r3, [sp, #28]
 800db86:	2b02      	cmp	r3, #2
 800db88:	f73f aeb1 	bgt.w	800d8ee <_dtoa_r+0x936>
 800db8c:	e7b0      	b.n	800daf0 <_dtoa_r+0xb38>
 800db8e:	bf00      	nop
 800db90:	080105d1 	.word	0x080105d1
 800db94:	0801052c 	.word	0x0801052c
 800db98:	08010555 	.word	0x08010555

0800db9c <_free_r>:
 800db9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db9e:	2900      	cmp	r1, #0
 800dba0:	d044      	beq.n	800dc2c <_free_r+0x90>
 800dba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dba6:	9001      	str	r0, [sp, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f1a1 0404 	sub.w	r4, r1, #4
 800dbae:	bfb8      	it	lt
 800dbb0:	18e4      	addlt	r4, r4, r3
 800dbb2:	f7fe f939 	bl	800be28 <__malloc_lock>
 800dbb6:	4a1e      	ldr	r2, [pc, #120]	; (800dc30 <_free_r+0x94>)
 800dbb8:	9801      	ldr	r0, [sp, #4]
 800dbba:	6813      	ldr	r3, [r2, #0]
 800dbbc:	b933      	cbnz	r3, 800dbcc <_free_r+0x30>
 800dbbe:	6063      	str	r3, [r4, #4]
 800dbc0:	6014      	str	r4, [r2, #0]
 800dbc2:	b003      	add	sp, #12
 800dbc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbc8:	f7fe b934 	b.w	800be34 <__malloc_unlock>
 800dbcc:	42a3      	cmp	r3, r4
 800dbce:	d908      	bls.n	800dbe2 <_free_r+0x46>
 800dbd0:	6825      	ldr	r5, [r4, #0]
 800dbd2:	1961      	adds	r1, r4, r5
 800dbd4:	428b      	cmp	r3, r1
 800dbd6:	bf01      	itttt	eq
 800dbd8:	6819      	ldreq	r1, [r3, #0]
 800dbda:	685b      	ldreq	r3, [r3, #4]
 800dbdc:	1949      	addeq	r1, r1, r5
 800dbde:	6021      	streq	r1, [r4, #0]
 800dbe0:	e7ed      	b.n	800dbbe <_free_r+0x22>
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	b10b      	cbz	r3, 800dbec <_free_r+0x50>
 800dbe8:	42a3      	cmp	r3, r4
 800dbea:	d9fa      	bls.n	800dbe2 <_free_r+0x46>
 800dbec:	6811      	ldr	r1, [r2, #0]
 800dbee:	1855      	adds	r5, r2, r1
 800dbf0:	42a5      	cmp	r5, r4
 800dbf2:	d10b      	bne.n	800dc0c <_free_r+0x70>
 800dbf4:	6824      	ldr	r4, [r4, #0]
 800dbf6:	4421      	add	r1, r4
 800dbf8:	1854      	adds	r4, r2, r1
 800dbfa:	42a3      	cmp	r3, r4
 800dbfc:	6011      	str	r1, [r2, #0]
 800dbfe:	d1e0      	bne.n	800dbc2 <_free_r+0x26>
 800dc00:	681c      	ldr	r4, [r3, #0]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	6053      	str	r3, [r2, #4]
 800dc06:	440c      	add	r4, r1
 800dc08:	6014      	str	r4, [r2, #0]
 800dc0a:	e7da      	b.n	800dbc2 <_free_r+0x26>
 800dc0c:	d902      	bls.n	800dc14 <_free_r+0x78>
 800dc0e:	230c      	movs	r3, #12
 800dc10:	6003      	str	r3, [r0, #0]
 800dc12:	e7d6      	b.n	800dbc2 <_free_r+0x26>
 800dc14:	6825      	ldr	r5, [r4, #0]
 800dc16:	1961      	adds	r1, r4, r5
 800dc18:	428b      	cmp	r3, r1
 800dc1a:	bf04      	itt	eq
 800dc1c:	6819      	ldreq	r1, [r3, #0]
 800dc1e:	685b      	ldreq	r3, [r3, #4]
 800dc20:	6063      	str	r3, [r4, #4]
 800dc22:	bf04      	itt	eq
 800dc24:	1949      	addeq	r1, r1, r5
 800dc26:	6021      	streq	r1, [r4, #0]
 800dc28:	6054      	str	r4, [r2, #4]
 800dc2a:	e7ca      	b.n	800dbc2 <_free_r+0x26>
 800dc2c:	b003      	add	sp, #12
 800dc2e:	bd30      	pop	{r4, r5, pc}
 800dc30:	20000f8c 	.word	0x20000f8c

0800dc34 <_Balloc>:
 800dc34:	b570      	push	{r4, r5, r6, lr}
 800dc36:	69c6      	ldr	r6, [r0, #28]
 800dc38:	4604      	mov	r4, r0
 800dc3a:	460d      	mov	r5, r1
 800dc3c:	b976      	cbnz	r6, 800dc5c <_Balloc+0x28>
 800dc3e:	2010      	movs	r0, #16
 800dc40:	f7fe f842 	bl	800bcc8 <malloc>
 800dc44:	4602      	mov	r2, r0
 800dc46:	61e0      	str	r0, [r4, #28]
 800dc48:	b920      	cbnz	r0, 800dc54 <_Balloc+0x20>
 800dc4a:	4b18      	ldr	r3, [pc, #96]	; (800dcac <_Balloc+0x78>)
 800dc4c:	4818      	ldr	r0, [pc, #96]	; (800dcb0 <_Balloc+0x7c>)
 800dc4e:	216b      	movs	r1, #107	; 0x6b
 800dc50:	f001 fd7e 	bl	800f750 <__assert_func>
 800dc54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc58:	6006      	str	r6, [r0, #0]
 800dc5a:	60c6      	str	r6, [r0, #12]
 800dc5c:	69e6      	ldr	r6, [r4, #28]
 800dc5e:	68f3      	ldr	r3, [r6, #12]
 800dc60:	b183      	cbz	r3, 800dc84 <_Balloc+0x50>
 800dc62:	69e3      	ldr	r3, [r4, #28]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc6a:	b9b8      	cbnz	r0, 800dc9c <_Balloc+0x68>
 800dc6c:	2101      	movs	r1, #1
 800dc6e:	fa01 f605 	lsl.w	r6, r1, r5
 800dc72:	1d72      	adds	r2, r6, #5
 800dc74:	0092      	lsls	r2, r2, #2
 800dc76:	4620      	mov	r0, r4
 800dc78:	f001 fd88 	bl	800f78c <_calloc_r>
 800dc7c:	b160      	cbz	r0, 800dc98 <_Balloc+0x64>
 800dc7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc82:	e00e      	b.n	800dca2 <_Balloc+0x6e>
 800dc84:	2221      	movs	r2, #33	; 0x21
 800dc86:	2104      	movs	r1, #4
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f001 fd7f 	bl	800f78c <_calloc_r>
 800dc8e:	69e3      	ldr	r3, [r4, #28]
 800dc90:	60f0      	str	r0, [r6, #12]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d1e4      	bne.n	800dc62 <_Balloc+0x2e>
 800dc98:	2000      	movs	r0, #0
 800dc9a:	bd70      	pop	{r4, r5, r6, pc}
 800dc9c:	6802      	ldr	r2, [r0, #0]
 800dc9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dca2:	2300      	movs	r3, #0
 800dca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dca8:	e7f7      	b.n	800dc9a <_Balloc+0x66>
 800dcaa:	bf00      	nop
 800dcac:	08010562 	.word	0x08010562
 800dcb0:	080105e2 	.word	0x080105e2

0800dcb4 <_Bfree>:
 800dcb4:	b570      	push	{r4, r5, r6, lr}
 800dcb6:	69c6      	ldr	r6, [r0, #28]
 800dcb8:	4605      	mov	r5, r0
 800dcba:	460c      	mov	r4, r1
 800dcbc:	b976      	cbnz	r6, 800dcdc <_Bfree+0x28>
 800dcbe:	2010      	movs	r0, #16
 800dcc0:	f7fe f802 	bl	800bcc8 <malloc>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	61e8      	str	r0, [r5, #28]
 800dcc8:	b920      	cbnz	r0, 800dcd4 <_Bfree+0x20>
 800dcca:	4b09      	ldr	r3, [pc, #36]	; (800dcf0 <_Bfree+0x3c>)
 800dccc:	4809      	ldr	r0, [pc, #36]	; (800dcf4 <_Bfree+0x40>)
 800dcce:	218f      	movs	r1, #143	; 0x8f
 800dcd0:	f001 fd3e 	bl	800f750 <__assert_func>
 800dcd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dcd8:	6006      	str	r6, [r0, #0]
 800dcda:	60c6      	str	r6, [r0, #12]
 800dcdc:	b13c      	cbz	r4, 800dcee <_Bfree+0x3a>
 800dcde:	69eb      	ldr	r3, [r5, #28]
 800dce0:	6862      	ldr	r2, [r4, #4]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dce8:	6021      	str	r1, [r4, #0]
 800dcea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dcee:	bd70      	pop	{r4, r5, r6, pc}
 800dcf0:	08010562 	.word	0x08010562
 800dcf4:	080105e2 	.word	0x080105e2

0800dcf8 <__multadd>:
 800dcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcfc:	690d      	ldr	r5, [r1, #16]
 800dcfe:	4607      	mov	r7, r0
 800dd00:	460c      	mov	r4, r1
 800dd02:	461e      	mov	r6, r3
 800dd04:	f101 0c14 	add.w	ip, r1, #20
 800dd08:	2000      	movs	r0, #0
 800dd0a:	f8dc 3000 	ldr.w	r3, [ip]
 800dd0e:	b299      	uxth	r1, r3
 800dd10:	fb02 6101 	mla	r1, r2, r1, r6
 800dd14:	0c1e      	lsrs	r6, r3, #16
 800dd16:	0c0b      	lsrs	r3, r1, #16
 800dd18:	fb02 3306 	mla	r3, r2, r6, r3
 800dd1c:	b289      	uxth	r1, r1
 800dd1e:	3001      	adds	r0, #1
 800dd20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd24:	4285      	cmp	r5, r0
 800dd26:	f84c 1b04 	str.w	r1, [ip], #4
 800dd2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd2e:	dcec      	bgt.n	800dd0a <__multadd+0x12>
 800dd30:	b30e      	cbz	r6, 800dd76 <__multadd+0x7e>
 800dd32:	68a3      	ldr	r3, [r4, #8]
 800dd34:	42ab      	cmp	r3, r5
 800dd36:	dc19      	bgt.n	800dd6c <__multadd+0x74>
 800dd38:	6861      	ldr	r1, [r4, #4]
 800dd3a:	4638      	mov	r0, r7
 800dd3c:	3101      	adds	r1, #1
 800dd3e:	f7ff ff79 	bl	800dc34 <_Balloc>
 800dd42:	4680      	mov	r8, r0
 800dd44:	b928      	cbnz	r0, 800dd52 <__multadd+0x5a>
 800dd46:	4602      	mov	r2, r0
 800dd48:	4b0c      	ldr	r3, [pc, #48]	; (800dd7c <__multadd+0x84>)
 800dd4a:	480d      	ldr	r0, [pc, #52]	; (800dd80 <__multadd+0x88>)
 800dd4c:	21ba      	movs	r1, #186	; 0xba
 800dd4e:	f001 fcff 	bl	800f750 <__assert_func>
 800dd52:	6922      	ldr	r2, [r4, #16]
 800dd54:	3202      	adds	r2, #2
 800dd56:	f104 010c 	add.w	r1, r4, #12
 800dd5a:	0092      	lsls	r2, r2, #2
 800dd5c:	300c      	adds	r0, #12
 800dd5e:	f001 fcdf 	bl	800f720 <memcpy>
 800dd62:	4621      	mov	r1, r4
 800dd64:	4638      	mov	r0, r7
 800dd66:	f7ff ffa5 	bl	800dcb4 <_Bfree>
 800dd6a:	4644      	mov	r4, r8
 800dd6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd70:	3501      	adds	r5, #1
 800dd72:	615e      	str	r6, [r3, #20]
 800dd74:	6125      	str	r5, [r4, #16]
 800dd76:	4620      	mov	r0, r4
 800dd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd7c:	080105d1 	.word	0x080105d1
 800dd80:	080105e2 	.word	0x080105e2

0800dd84 <__s2b>:
 800dd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd88:	460c      	mov	r4, r1
 800dd8a:	4615      	mov	r5, r2
 800dd8c:	461f      	mov	r7, r3
 800dd8e:	2209      	movs	r2, #9
 800dd90:	3308      	adds	r3, #8
 800dd92:	4606      	mov	r6, r0
 800dd94:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd98:	2100      	movs	r1, #0
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	db09      	blt.n	800ddb4 <__s2b+0x30>
 800dda0:	4630      	mov	r0, r6
 800dda2:	f7ff ff47 	bl	800dc34 <_Balloc>
 800dda6:	b940      	cbnz	r0, 800ddba <__s2b+0x36>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	4b19      	ldr	r3, [pc, #100]	; (800de10 <__s2b+0x8c>)
 800ddac:	4819      	ldr	r0, [pc, #100]	; (800de14 <__s2b+0x90>)
 800ddae:	21d3      	movs	r1, #211	; 0xd3
 800ddb0:	f001 fcce 	bl	800f750 <__assert_func>
 800ddb4:	0052      	lsls	r2, r2, #1
 800ddb6:	3101      	adds	r1, #1
 800ddb8:	e7f0      	b.n	800dd9c <__s2b+0x18>
 800ddba:	9b08      	ldr	r3, [sp, #32]
 800ddbc:	6143      	str	r3, [r0, #20]
 800ddbe:	2d09      	cmp	r5, #9
 800ddc0:	f04f 0301 	mov.w	r3, #1
 800ddc4:	6103      	str	r3, [r0, #16]
 800ddc6:	dd16      	ble.n	800ddf6 <__s2b+0x72>
 800ddc8:	f104 0909 	add.w	r9, r4, #9
 800ddcc:	46c8      	mov	r8, r9
 800ddce:	442c      	add	r4, r5
 800ddd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ddd4:	4601      	mov	r1, r0
 800ddd6:	3b30      	subs	r3, #48	; 0x30
 800ddd8:	220a      	movs	r2, #10
 800ddda:	4630      	mov	r0, r6
 800dddc:	f7ff ff8c 	bl	800dcf8 <__multadd>
 800dde0:	45a0      	cmp	r8, r4
 800dde2:	d1f5      	bne.n	800ddd0 <__s2b+0x4c>
 800dde4:	f1a5 0408 	sub.w	r4, r5, #8
 800dde8:	444c      	add	r4, r9
 800ddea:	1b2d      	subs	r5, r5, r4
 800ddec:	1963      	adds	r3, r4, r5
 800ddee:	42bb      	cmp	r3, r7
 800ddf0:	db04      	blt.n	800ddfc <__s2b+0x78>
 800ddf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddf6:	340a      	adds	r4, #10
 800ddf8:	2509      	movs	r5, #9
 800ddfa:	e7f6      	b.n	800ddea <__s2b+0x66>
 800ddfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800de00:	4601      	mov	r1, r0
 800de02:	3b30      	subs	r3, #48	; 0x30
 800de04:	220a      	movs	r2, #10
 800de06:	4630      	mov	r0, r6
 800de08:	f7ff ff76 	bl	800dcf8 <__multadd>
 800de0c:	e7ee      	b.n	800ddec <__s2b+0x68>
 800de0e:	bf00      	nop
 800de10:	080105d1 	.word	0x080105d1
 800de14:	080105e2 	.word	0x080105e2

0800de18 <__hi0bits>:
 800de18:	0c03      	lsrs	r3, r0, #16
 800de1a:	041b      	lsls	r3, r3, #16
 800de1c:	b9d3      	cbnz	r3, 800de54 <__hi0bits+0x3c>
 800de1e:	0400      	lsls	r0, r0, #16
 800de20:	2310      	movs	r3, #16
 800de22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800de26:	bf04      	itt	eq
 800de28:	0200      	lsleq	r0, r0, #8
 800de2a:	3308      	addeq	r3, #8
 800de2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800de30:	bf04      	itt	eq
 800de32:	0100      	lsleq	r0, r0, #4
 800de34:	3304      	addeq	r3, #4
 800de36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800de3a:	bf04      	itt	eq
 800de3c:	0080      	lsleq	r0, r0, #2
 800de3e:	3302      	addeq	r3, #2
 800de40:	2800      	cmp	r0, #0
 800de42:	db05      	blt.n	800de50 <__hi0bits+0x38>
 800de44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800de48:	f103 0301 	add.w	r3, r3, #1
 800de4c:	bf08      	it	eq
 800de4e:	2320      	moveq	r3, #32
 800de50:	4618      	mov	r0, r3
 800de52:	4770      	bx	lr
 800de54:	2300      	movs	r3, #0
 800de56:	e7e4      	b.n	800de22 <__hi0bits+0xa>

0800de58 <__lo0bits>:
 800de58:	6803      	ldr	r3, [r0, #0]
 800de5a:	f013 0207 	ands.w	r2, r3, #7
 800de5e:	d00c      	beq.n	800de7a <__lo0bits+0x22>
 800de60:	07d9      	lsls	r1, r3, #31
 800de62:	d422      	bmi.n	800deaa <__lo0bits+0x52>
 800de64:	079a      	lsls	r2, r3, #30
 800de66:	bf49      	itett	mi
 800de68:	085b      	lsrmi	r3, r3, #1
 800de6a:	089b      	lsrpl	r3, r3, #2
 800de6c:	6003      	strmi	r3, [r0, #0]
 800de6e:	2201      	movmi	r2, #1
 800de70:	bf5c      	itt	pl
 800de72:	6003      	strpl	r3, [r0, #0]
 800de74:	2202      	movpl	r2, #2
 800de76:	4610      	mov	r0, r2
 800de78:	4770      	bx	lr
 800de7a:	b299      	uxth	r1, r3
 800de7c:	b909      	cbnz	r1, 800de82 <__lo0bits+0x2a>
 800de7e:	0c1b      	lsrs	r3, r3, #16
 800de80:	2210      	movs	r2, #16
 800de82:	b2d9      	uxtb	r1, r3
 800de84:	b909      	cbnz	r1, 800de8a <__lo0bits+0x32>
 800de86:	3208      	adds	r2, #8
 800de88:	0a1b      	lsrs	r3, r3, #8
 800de8a:	0719      	lsls	r1, r3, #28
 800de8c:	bf04      	itt	eq
 800de8e:	091b      	lsreq	r3, r3, #4
 800de90:	3204      	addeq	r2, #4
 800de92:	0799      	lsls	r1, r3, #30
 800de94:	bf04      	itt	eq
 800de96:	089b      	lsreq	r3, r3, #2
 800de98:	3202      	addeq	r2, #2
 800de9a:	07d9      	lsls	r1, r3, #31
 800de9c:	d403      	bmi.n	800dea6 <__lo0bits+0x4e>
 800de9e:	085b      	lsrs	r3, r3, #1
 800dea0:	f102 0201 	add.w	r2, r2, #1
 800dea4:	d003      	beq.n	800deae <__lo0bits+0x56>
 800dea6:	6003      	str	r3, [r0, #0]
 800dea8:	e7e5      	b.n	800de76 <__lo0bits+0x1e>
 800deaa:	2200      	movs	r2, #0
 800deac:	e7e3      	b.n	800de76 <__lo0bits+0x1e>
 800deae:	2220      	movs	r2, #32
 800deb0:	e7e1      	b.n	800de76 <__lo0bits+0x1e>
	...

0800deb4 <__i2b>:
 800deb4:	b510      	push	{r4, lr}
 800deb6:	460c      	mov	r4, r1
 800deb8:	2101      	movs	r1, #1
 800deba:	f7ff febb 	bl	800dc34 <_Balloc>
 800debe:	4602      	mov	r2, r0
 800dec0:	b928      	cbnz	r0, 800dece <__i2b+0x1a>
 800dec2:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <__i2b+0x24>)
 800dec4:	4805      	ldr	r0, [pc, #20]	; (800dedc <__i2b+0x28>)
 800dec6:	f240 1145 	movw	r1, #325	; 0x145
 800deca:	f001 fc41 	bl	800f750 <__assert_func>
 800dece:	2301      	movs	r3, #1
 800ded0:	6144      	str	r4, [r0, #20]
 800ded2:	6103      	str	r3, [r0, #16]
 800ded4:	bd10      	pop	{r4, pc}
 800ded6:	bf00      	nop
 800ded8:	080105d1 	.word	0x080105d1
 800dedc:	080105e2 	.word	0x080105e2

0800dee0 <__multiply>:
 800dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	4691      	mov	r9, r2
 800dee6:	690a      	ldr	r2, [r1, #16]
 800dee8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800deec:	429a      	cmp	r2, r3
 800deee:	bfb8      	it	lt
 800def0:	460b      	movlt	r3, r1
 800def2:	460c      	mov	r4, r1
 800def4:	bfbc      	itt	lt
 800def6:	464c      	movlt	r4, r9
 800def8:	4699      	movlt	r9, r3
 800defa:	6927      	ldr	r7, [r4, #16]
 800defc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800df00:	68a3      	ldr	r3, [r4, #8]
 800df02:	6861      	ldr	r1, [r4, #4]
 800df04:	eb07 060a 	add.w	r6, r7, sl
 800df08:	42b3      	cmp	r3, r6
 800df0a:	b085      	sub	sp, #20
 800df0c:	bfb8      	it	lt
 800df0e:	3101      	addlt	r1, #1
 800df10:	f7ff fe90 	bl	800dc34 <_Balloc>
 800df14:	b930      	cbnz	r0, 800df24 <__multiply+0x44>
 800df16:	4602      	mov	r2, r0
 800df18:	4b44      	ldr	r3, [pc, #272]	; (800e02c <__multiply+0x14c>)
 800df1a:	4845      	ldr	r0, [pc, #276]	; (800e030 <__multiply+0x150>)
 800df1c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800df20:	f001 fc16 	bl	800f750 <__assert_func>
 800df24:	f100 0514 	add.w	r5, r0, #20
 800df28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800df2c:	462b      	mov	r3, r5
 800df2e:	2200      	movs	r2, #0
 800df30:	4543      	cmp	r3, r8
 800df32:	d321      	bcc.n	800df78 <__multiply+0x98>
 800df34:	f104 0314 	add.w	r3, r4, #20
 800df38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800df3c:	f109 0314 	add.w	r3, r9, #20
 800df40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800df44:	9202      	str	r2, [sp, #8]
 800df46:	1b3a      	subs	r2, r7, r4
 800df48:	3a15      	subs	r2, #21
 800df4a:	f022 0203 	bic.w	r2, r2, #3
 800df4e:	3204      	adds	r2, #4
 800df50:	f104 0115 	add.w	r1, r4, #21
 800df54:	428f      	cmp	r7, r1
 800df56:	bf38      	it	cc
 800df58:	2204      	movcc	r2, #4
 800df5a:	9201      	str	r2, [sp, #4]
 800df5c:	9a02      	ldr	r2, [sp, #8]
 800df5e:	9303      	str	r3, [sp, #12]
 800df60:	429a      	cmp	r2, r3
 800df62:	d80c      	bhi.n	800df7e <__multiply+0x9e>
 800df64:	2e00      	cmp	r6, #0
 800df66:	dd03      	ble.n	800df70 <__multiply+0x90>
 800df68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d05b      	beq.n	800e028 <__multiply+0x148>
 800df70:	6106      	str	r6, [r0, #16]
 800df72:	b005      	add	sp, #20
 800df74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df78:	f843 2b04 	str.w	r2, [r3], #4
 800df7c:	e7d8      	b.n	800df30 <__multiply+0x50>
 800df7e:	f8b3 a000 	ldrh.w	sl, [r3]
 800df82:	f1ba 0f00 	cmp.w	sl, #0
 800df86:	d024      	beq.n	800dfd2 <__multiply+0xf2>
 800df88:	f104 0e14 	add.w	lr, r4, #20
 800df8c:	46a9      	mov	r9, r5
 800df8e:	f04f 0c00 	mov.w	ip, #0
 800df92:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df96:	f8d9 1000 	ldr.w	r1, [r9]
 800df9a:	fa1f fb82 	uxth.w	fp, r2
 800df9e:	b289      	uxth	r1, r1
 800dfa0:	fb0a 110b 	mla	r1, sl, fp, r1
 800dfa4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dfa8:	f8d9 2000 	ldr.w	r2, [r9]
 800dfac:	4461      	add	r1, ip
 800dfae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dfb2:	fb0a c20b 	mla	r2, sl, fp, ip
 800dfb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dfba:	b289      	uxth	r1, r1
 800dfbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dfc0:	4577      	cmp	r7, lr
 800dfc2:	f849 1b04 	str.w	r1, [r9], #4
 800dfc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dfca:	d8e2      	bhi.n	800df92 <__multiply+0xb2>
 800dfcc:	9a01      	ldr	r2, [sp, #4]
 800dfce:	f845 c002 	str.w	ip, [r5, r2]
 800dfd2:	9a03      	ldr	r2, [sp, #12]
 800dfd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dfd8:	3304      	adds	r3, #4
 800dfda:	f1b9 0f00 	cmp.w	r9, #0
 800dfde:	d021      	beq.n	800e024 <__multiply+0x144>
 800dfe0:	6829      	ldr	r1, [r5, #0]
 800dfe2:	f104 0c14 	add.w	ip, r4, #20
 800dfe6:	46ae      	mov	lr, r5
 800dfe8:	f04f 0a00 	mov.w	sl, #0
 800dfec:	f8bc b000 	ldrh.w	fp, [ip]
 800dff0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dff4:	fb09 220b 	mla	r2, r9, fp, r2
 800dff8:	4452      	add	r2, sl
 800dffa:	b289      	uxth	r1, r1
 800dffc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e000:	f84e 1b04 	str.w	r1, [lr], #4
 800e004:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e008:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e00c:	f8be 1000 	ldrh.w	r1, [lr]
 800e010:	fb09 110a 	mla	r1, r9, sl, r1
 800e014:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e018:	4567      	cmp	r7, ip
 800e01a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e01e:	d8e5      	bhi.n	800dfec <__multiply+0x10c>
 800e020:	9a01      	ldr	r2, [sp, #4]
 800e022:	50a9      	str	r1, [r5, r2]
 800e024:	3504      	adds	r5, #4
 800e026:	e799      	b.n	800df5c <__multiply+0x7c>
 800e028:	3e01      	subs	r6, #1
 800e02a:	e79b      	b.n	800df64 <__multiply+0x84>
 800e02c:	080105d1 	.word	0x080105d1
 800e030:	080105e2 	.word	0x080105e2

0800e034 <__pow5mult>:
 800e034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e038:	4615      	mov	r5, r2
 800e03a:	f012 0203 	ands.w	r2, r2, #3
 800e03e:	4606      	mov	r6, r0
 800e040:	460f      	mov	r7, r1
 800e042:	d007      	beq.n	800e054 <__pow5mult+0x20>
 800e044:	4c25      	ldr	r4, [pc, #148]	; (800e0dc <__pow5mult+0xa8>)
 800e046:	3a01      	subs	r2, #1
 800e048:	2300      	movs	r3, #0
 800e04a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e04e:	f7ff fe53 	bl	800dcf8 <__multadd>
 800e052:	4607      	mov	r7, r0
 800e054:	10ad      	asrs	r5, r5, #2
 800e056:	d03d      	beq.n	800e0d4 <__pow5mult+0xa0>
 800e058:	69f4      	ldr	r4, [r6, #28]
 800e05a:	b97c      	cbnz	r4, 800e07c <__pow5mult+0x48>
 800e05c:	2010      	movs	r0, #16
 800e05e:	f7fd fe33 	bl	800bcc8 <malloc>
 800e062:	4602      	mov	r2, r0
 800e064:	61f0      	str	r0, [r6, #28]
 800e066:	b928      	cbnz	r0, 800e074 <__pow5mult+0x40>
 800e068:	4b1d      	ldr	r3, [pc, #116]	; (800e0e0 <__pow5mult+0xac>)
 800e06a:	481e      	ldr	r0, [pc, #120]	; (800e0e4 <__pow5mult+0xb0>)
 800e06c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e070:	f001 fb6e 	bl	800f750 <__assert_func>
 800e074:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e078:	6004      	str	r4, [r0, #0]
 800e07a:	60c4      	str	r4, [r0, #12]
 800e07c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e080:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e084:	b94c      	cbnz	r4, 800e09a <__pow5mult+0x66>
 800e086:	f240 2171 	movw	r1, #625	; 0x271
 800e08a:	4630      	mov	r0, r6
 800e08c:	f7ff ff12 	bl	800deb4 <__i2b>
 800e090:	2300      	movs	r3, #0
 800e092:	f8c8 0008 	str.w	r0, [r8, #8]
 800e096:	4604      	mov	r4, r0
 800e098:	6003      	str	r3, [r0, #0]
 800e09a:	f04f 0900 	mov.w	r9, #0
 800e09e:	07eb      	lsls	r3, r5, #31
 800e0a0:	d50a      	bpl.n	800e0b8 <__pow5mult+0x84>
 800e0a2:	4639      	mov	r1, r7
 800e0a4:	4622      	mov	r2, r4
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	f7ff ff1a 	bl	800dee0 <__multiply>
 800e0ac:	4639      	mov	r1, r7
 800e0ae:	4680      	mov	r8, r0
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f7ff fdff 	bl	800dcb4 <_Bfree>
 800e0b6:	4647      	mov	r7, r8
 800e0b8:	106d      	asrs	r5, r5, #1
 800e0ba:	d00b      	beq.n	800e0d4 <__pow5mult+0xa0>
 800e0bc:	6820      	ldr	r0, [r4, #0]
 800e0be:	b938      	cbnz	r0, 800e0d0 <__pow5mult+0x9c>
 800e0c0:	4622      	mov	r2, r4
 800e0c2:	4621      	mov	r1, r4
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	f7ff ff0b 	bl	800dee0 <__multiply>
 800e0ca:	6020      	str	r0, [r4, #0]
 800e0cc:	f8c0 9000 	str.w	r9, [r0]
 800e0d0:	4604      	mov	r4, r0
 800e0d2:	e7e4      	b.n	800e09e <__pow5mult+0x6a>
 800e0d4:	4638      	mov	r0, r7
 800e0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0da:	bf00      	nop
 800e0dc:	08010730 	.word	0x08010730
 800e0e0:	08010562 	.word	0x08010562
 800e0e4:	080105e2 	.word	0x080105e2

0800e0e8 <__lshift>:
 800e0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ec:	460c      	mov	r4, r1
 800e0ee:	6849      	ldr	r1, [r1, #4]
 800e0f0:	6923      	ldr	r3, [r4, #16]
 800e0f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e0f6:	68a3      	ldr	r3, [r4, #8]
 800e0f8:	4607      	mov	r7, r0
 800e0fa:	4691      	mov	r9, r2
 800e0fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e100:	f108 0601 	add.w	r6, r8, #1
 800e104:	42b3      	cmp	r3, r6
 800e106:	db0b      	blt.n	800e120 <__lshift+0x38>
 800e108:	4638      	mov	r0, r7
 800e10a:	f7ff fd93 	bl	800dc34 <_Balloc>
 800e10e:	4605      	mov	r5, r0
 800e110:	b948      	cbnz	r0, 800e126 <__lshift+0x3e>
 800e112:	4602      	mov	r2, r0
 800e114:	4b28      	ldr	r3, [pc, #160]	; (800e1b8 <__lshift+0xd0>)
 800e116:	4829      	ldr	r0, [pc, #164]	; (800e1bc <__lshift+0xd4>)
 800e118:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e11c:	f001 fb18 	bl	800f750 <__assert_func>
 800e120:	3101      	adds	r1, #1
 800e122:	005b      	lsls	r3, r3, #1
 800e124:	e7ee      	b.n	800e104 <__lshift+0x1c>
 800e126:	2300      	movs	r3, #0
 800e128:	f100 0114 	add.w	r1, r0, #20
 800e12c:	f100 0210 	add.w	r2, r0, #16
 800e130:	4618      	mov	r0, r3
 800e132:	4553      	cmp	r3, sl
 800e134:	db33      	blt.n	800e19e <__lshift+0xb6>
 800e136:	6920      	ldr	r0, [r4, #16]
 800e138:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e13c:	f104 0314 	add.w	r3, r4, #20
 800e140:	f019 091f 	ands.w	r9, r9, #31
 800e144:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e148:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e14c:	d02b      	beq.n	800e1a6 <__lshift+0xbe>
 800e14e:	f1c9 0e20 	rsb	lr, r9, #32
 800e152:	468a      	mov	sl, r1
 800e154:	2200      	movs	r2, #0
 800e156:	6818      	ldr	r0, [r3, #0]
 800e158:	fa00 f009 	lsl.w	r0, r0, r9
 800e15c:	4310      	orrs	r0, r2
 800e15e:	f84a 0b04 	str.w	r0, [sl], #4
 800e162:	f853 2b04 	ldr.w	r2, [r3], #4
 800e166:	459c      	cmp	ip, r3
 800e168:	fa22 f20e 	lsr.w	r2, r2, lr
 800e16c:	d8f3      	bhi.n	800e156 <__lshift+0x6e>
 800e16e:	ebac 0304 	sub.w	r3, ip, r4
 800e172:	3b15      	subs	r3, #21
 800e174:	f023 0303 	bic.w	r3, r3, #3
 800e178:	3304      	adds	r3, #4
 800e17a:	f104 0015 	add.w	r0, r4, #21
 800e17e:	4584      	cmp	ip, r0
 800e180:	bf38      	it	cc
 800e182:	2304      	movcc	r3, #4
 800e184:	50ca      	str	r2, [r1, r3]
 800e186:	b10a      	cbz	r2, 800e18c <__lshift+0xa4>
 800e188:	f108 0602 	add.w	r6, r8, #2
 800e18c:	3e01      	subs	r6, #1
 800e18e:	4638      	mov	r0, r7
 800e190:	612e      	str	r6, [r5, #16]
 800e192:	4621      	mov	r1, r4
 800e194:	f7ff fd8e 	bl	800dcb4 <_Bfree>
 800e198:	4628      	mov	r0, r5
 800e19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e19e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	e7c5      	b.n	800e132 <__lshift+0x4a>
 800e1a6:	3904      	subs	r1, #4
 800e1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800e1b0:	459c      	cmp	ip, r3
 800e1b2:	d8f9      	bhi.n	800e1a8 <__lshift+0xc0>
 800e1b4:	e7ea      	b.n	800e18c <__lshift+0xa4>
 800e1b6:	bf00      	nop
 800e1b8:	080105d1 	.word	0x080105d1
 800e1bc:	080105e2 	.word	0x080105e2

0800e1c0 <__mcmp>:
 800e1c0:	b530      	push	{r4, r5, lr}
 800e1c2:	6902      	ldr	r2, [r0, #16]
 800e1c4:	690c      	ldr	r4, [r1, #16]
 800e1c6:	1b12      	subs	r2, r2, r4
 800e1c8:	d10e      	bne.n	800e1e8 <__mcmp+0x28>
 800e1ca:	f100 0314 	add.w	r3, r0, #20
 800e1ce:	3114      	adds	r1, #20
 800e1d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e1d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e1d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e1dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e1e0:	42a5      	cmp	r5, r4
 800e1e2:	d003      	beq.n	800e1ec <__mcmp+0x2c>
 800e1e4:	d305      	bcc.n	800e1f2 <__mcmp+0x32>
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	bd30      	pop	{r4, r5, pc}
 800e1ec:	4283      	cmp	r3, r0
 800e1ee:	d3f3      	bcc.n	800e1d8 <__mcmp+0x18>
 800e1f0:	e7fa      	b.n	800e1e8 <__mcmp+0x28>
 800e1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f6:	e7f7      	b.n	800e1e8 <__mcmp+0x28>

0800e1f8 <__mdiff>:
 800e1f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fc:	460c      	mov	r4, r1
 800e1fe:	4606      	mov	r6, r0
 800e200:	4611      	mov	r1, r2
 800e202:	4620      	mov	r0, r4
 800e204:	4690      	mov	r8, r2
 800e206:	f7ff ffdb 	bl	800e1c0 <__mcmp>
 800e20a:	1e05      	subs	r5, r0, #0
 800e20c:	d110      	bne.n	800e230 <__mdiff+0x38>
 800e20e:	4629      	mov	r1, r5
 800e210:	4630      	mov	r0, r6
 800e212:	f7ff fd0f 	bl	800dc34 <_Balloc>
 800e216:	b930      	cbnz	r0, 800e226 <__mdiff+0x2e>
 800e218:	4b3a      	ldr	r3, [pc, #232]	; (800e304 <__mdiff+0x10c>)
 800e21a:	4602      	mov	r2, r0
 800e21c:	f240 2137 	movw	r1, #567	; 0x237
 800e220:	4839      	ldr	r0, [pc, #228]	; (800e308 <__mdiff+0x110>)
 800e222:	f001 fa95 	bl	800f750 <__assert_func>
 800e226:	2301      	movs	r3, #1
 800e228:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e22c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e230:	bfa4      	itt	ge
 800e232:	4643      	movge	r3, r8
 800e234:	46a0      	movge	r8, r4
 800e236:	4630      	mov	r0, r6
 800e238:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e23c:	bfa6      	itte	ge
 800e23e:	461c      	movge	r4, r3
 800e240:	2500      	movge	r5, #0
 800e242:	2501      	movlt	r5, #1
 800e244:	f7ff fcf6 	bl	800dc34 <_Balloc>
 800e248:	b920      	cbnz	r0, 800e254 <__mdiff+0x5c>
 800e24a:	4b2e      	ldr	r3, [pc, #184]	; (800e304 <__mdiff+0x10c>)
 800e24c:	4602      	mov	r2, r0
 800e24e:	f240 2145 	movw	r1, #581	; 0x245
 800e252:	e7e5      	b.n	800e220 <__mdiff+0x28>
 800e254:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e258:	6926      	ldr	r6, [r4, #16]
 800e25a:	60c5      	str	r5, [r0, #12]
 800e25c:	f104 0914 	add.w	r9, r4, #20
 800e260:	f108 0514 	add.w	r5, r8, #20
 800e264:	f100 0e14 	add.w	lr, r0, #20
 800e268:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e26c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e270:	f108 0210 	add.w	r2, r8, #16
 800e274:	46f2      	mov	sl, lr
 800e276:	2100      	movs	r1, #0
 800e278:	f859 3b04 	ldr.w	r3, [r9], #4
 800e27c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e280:	fa11 f88b 	uxtah	r8, r1, fp
 800e284:	b299      	uxth	r1, r3
 800e286:	0c1b      	lsrs	r3, r3, #16
 800e288:	eba8 0801 	sub.w	r8, r8, r1
 800e28c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e290:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e294:	fa1f f888 	uxth.w	r8, r8
 800e298:	1419      	asrs	r1, r3, #16
 800e29a:	454e      	cmp	r6, r9
 800e29c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e2a0:	f84a 3b04 	str.w	r3, [sl], #4
 800e2a4:	d8e8      	bhi.n	800e278 <__mdiff+0x80>
 800e2a6:	1b33      	subs	r3, r6, r4
 800e2a8:	3b15      	subs	r3, #21
 800e2aa:	f023 0303 	bic.w	r3, r3, #3
 800e2ae:	3304      	adds	r3, #4
 800e2b0:	3415      	adds	r4, #21
 800e2b2:	42a6      	cmp	r6, r4
 800e2b4:	bf38      	it	cc
 800e2b6:	2304      	movcc	r3, #4
 800e2b8:	441d      	add	r5, r3
 800e2ba:	4473      	add	r3, lr
 800e2bc:	469e      	mov	lr, r3
 800e2be:	462e      	mov	r6, r5
 800e2c0:	4566      	cmp	r6, ip
 800e2c2:	d30e      	bcc.n	800e2e2 <__mdiff+0xea>
 800e2c4:	f10c 0203 	add.w	r2, ip, #3
 800e2c8:	1b52      	subs	r2, r2, r5
 800e2ca:	f022 0203 	bic.w	r2, r2, #3
 800e2ce:	3d03      	subs	r5, #3
 800e2d0:	45ac      	cmp	ip, r5
 800e2d2:	bf38      	it	cc
 800e2d4:	2200      	movcc	r2, #0
 800e2d6:	4413      	add	r3, r2
 800e2d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e2dc:	b17a      	cbz	r2, 800e2fe <__mdiff+0x106>
 800e2de:	6107      	str	r7, [r0, #16]
 800e2e0:	e7a4      	b.n	800e22c <__mdiff+0x34>
 800e2e2:	f856 8b04 	ldr.w	r8, [r6], #4
 800e2e6:	fa11 f288 	uxtah	r2, r1, r8
 800e2ea:	1414      	asrs	r4, r2, #16
 800e2ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e2f0:	b292      	uxth	r2, r2
 800e2f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e2f6:	f84e 2b04 	str.w	r2, [lr], #4
 800e2fa:	1421      	asrs	r1, r4, #16
 800e2fc:	e7e0      	b.n	800e2c0 <__mdiff+0xc8>
 800e2fe:	3f01      	subs	r7, #1
 800e300:	e7ea      	b.n	800e2d8 <__mdiff+0xe0>
 800e302:	bf00      	nop
 800e304:	080105d1 	.word	0x080105d1
 800e308:	080105e2 	.word	0x080105e2

0800e30c <__ulp>:
 800e30c:	b082      	sub	sp, #8
 800e30e:	ed8d 0b00 	vstr	d0, [sp]
 800e312:	9a01      	ldr	r2, [sp, #4]
 800e314:	4b0f      	ldr	r3, [pc, #60]	; (800e354 <__ulp+0x48>)
 800e316:	4013      	ands	r3, r2
 800e318:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	dc08      	bgt.n	800e332 <__ulp+0x26>
 800e320:	425b      	negs	r3, r3
 800e322:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e326:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e32a:	da04      	bge.n	800e336 <__ulp+0x2a>
 800e32c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e330:	4113      	asrs	r3, r2
 800e332:	2200      	movs	r2, #0
 800e334:	e008      	b.n	800e348 <__ulp+0x3c>
 800e336:	f1a2 0314 	sub.w	r3, r2, #20
 800e33a:	2b1e      	cmp	r3, #30
 800e33c:	bfda      	itte	le
 800e33e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e342:	40da      	lsrle	r2, r3
 800e344:	2201      	movgt	r2, #1
 800e346:	2300      	movs	r3, #0
 800e348:	4619      	mov	r1, r3
 800e34a:	4610      	mov	r0, r2
 800e34c:	ec41 0b10 	vmov	d0, r0, r1
 800e350:	b002      	add	sp, #8
 800e352:	4770      	bx	lr
 800e354:	7ff00000 	.word	0x7ff00000

0800e358 <__b2d>:
 800e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35c:	6906      	ldr	r6, [r0, #16]
 800e35e:	f100 0814 	add.w	r8, r0, #20
 800e362:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e366:	1f37      	subs	r7, r6, #4
 800e368:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e36c:	4610      	mov	r0, r2
 800e36e:	f7ff fd53 	bl	800de18 <__hi0bits>
 800e372:	f1c0 0320 	rsb	r3, r0, #32
 800e376:	280a      	cmp	r0, #10
 800e378:	600b      	str	r3, [r1, #0]
 800e37a:	491b      	ldr	r1, [pc, #108]	; (800e3e8 <__b2d+0x90>)
 800e37c:	dc15      	bgt.n	800e3aa <__b2d+0x52>
 800e37e:	f1c0 0c0b 	rsb	ip, r0, #11
 800e382:	fa22 f30c 	lsr.w	r3, r2, ip
 800e386:	45b8      	cmp	r8, r7
 800e388:	ea43 0501 	orr.w	r5, r3, r1
 800e38c:	bf34      	ite	cc
 800e38e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e392:	2300      	movcs	r3, #0
 800e394:	3015      	adds	r0, #21
 800e396:	fa02 f000 	lsl.w	r0, r2, r0
 800e39a:	fa23 f30c 	lsr.w	r3, r3, ip
 800e39e:	4303      	orrs	r3, r0
 800e3a0:	461c      	mov	r4, r3
 800e3a2:	ec45 4b10 	vmov	d0, r4, r5
 800e3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3aa:	45b8      	cmp	r8, r7
 800e3ac:	bf3a      	itte	cc
 800e3ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e3b2:	f1a6 0708 	subcc.w	r7, r6, #8
 800e3b6:	2300      	movcs	r3, #0
 800e3b8:	380b      	subs	r0, #11
 800e3ba:	d012      	beq.n	800e3e2 <__b2d+0x8a>
 800e3bc:	f1c0 0120 	rsb	r1, r0, #32
 800e3c0:	fa23 f401 	lsr.w	r4, r3, r1
 800e3c4:	4082      	lsls	r2, r0
 800e3c6:	4322      	orrs	r2, r4
 800e3c8:	4547      	cmp	r7, r8
 800e3ca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e3ce:	bf8c      	ite	hi
 800e3d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e3d4:	2200      	movls	r2, #0
 800e3d6:	4083      	lsls	r3, r0
 800e3d8:	40ca      	lsrs	r2, r1
 800e3da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	e7de      	b.n	800e3a0 <__b2d+0x48>
 800e3e2:	ea42 0501 	orr.w	r5, r2, r1
 800e3e6:	e7db      	b.n	800e3a0 <__b2d+0x48>
 800e3e8:	3ff00000 	.word	0x3ff00000

0800e3ec <__d2b>:
 800e3ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3f0:	460f      	mov	r7, r1
 800e3f2:	2101      	movs	r1, #1
 800e3f4:	ec59 8b10 	vmov	r8, r9, d0
 800e3f8:	4616      	mov	r6, r2
 800e3fa:	f7ff fc1b 	bl	800dc34 <_Balloc>
 800e3fe:	4604      	mov	r4, r0
 800e400:	b930      	cbnz	r0, 800e410 <__d2b+0x24>
 800e402:	4602      	mov	r2, r0
 800e404:	4b24      	ldr	r3, [pc, #144]	; (800e498 <__d2b+0xac>)
 800e406:	4825      	ldr	r0, [pc, #148]	; (800e49c <__d2b+0xb0>)
 800e408:	f240 310f 	movw	r1, #783	; 0x30f
 800e40c:	f001 f9a0 	bl	800f750 <__assert_func>
 800e410:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e414:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e418:	bb2d      	cbnz	r5, 800e466 <__d2b+0x7a>
 800e41a:	9301      	str	r3, [sp, #4]
 800e41c:	f1b8 0300 	subs.w	r3, r8, #0
 800e420:	d026      	beq.n	800e470 <__d2b+0x84>
 800e422:	4668      	mov	r0, sp
 800e424:	9300      	str	r3, [sp, #0]
 800e426:	f7ff fd17 	bl	800de58 <__lo0bits>
 800e42a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e42e:	b1e8      	cbz	r0, 800e46c <__d2b+0x80>
 800e430:	f1c0 0320 	rsb	r3, r0, #32
 800e434:	fa02 f303 	lsl.w	r3, r2, r3
 800e438:	430b      	orrs	r3, r1
 800e43a:	40c2      	lsrs	r2, r0
 800e43c:	6163      	str	r3, [r4, #20]
 800e43e:	9201      	str	r2, [sp, #4]
 800e440:	9b01      	ldr	r3, [sp, #4]
 800e442:	61a3      	str	r3, [r4, #24]
 800e444:	2b00      	cmp	r3, #0
 800e446:	bf14      	ite	ne
 800e448:	2202      	movne	r2, #2
 800e44a:	2201      	moveq	r2, #1
 800e44c:	6122      	str	r2, [r4, #16]
 800e44e:	b1bd      	cbz	r5, 800e480 <__d2b+0x94>
 800e450:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e454:	4405      	add	r5, r0
 800e456:	603d      	str	r5, [r7, #0]
 800e458:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e45c:	6030      	str	r0, [r6, #0]
 800e45e:	4620      	mov	r0, r4
 800e460:	b003      	add	sp, #12
 800e462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e46a:	e7d6      	b.n	800e41a <__d2b+0x2e>
 800e46c:	6161      	str	r1, [r4, #20]
 800e46e:	e7e7      	b.n	800e440 <__d2b+0x54>
 800e470:	a801      	add	r0, sp, #4
 800e472:	f7ff fcf1 	bl	800de58 <__lo0bits>
 800e476:	9b01      	ldr	r3, [sp, #4]
 800e478:	6163      	str	r3, [r4, #20]
 800e47a:	3020      	adds	r0, #32
 800e47c:	2201      	movs	r2, #1
 800e47e:	e7e5      	b.n	800e44c <__d2b+0x60>
 800e480:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e484:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e488:	6038      	str	r0, [r7, #0]
 800e48a:	6918      	ldr	r0, [r3, #16]
 800e48c:	f7ff fcc4 	bl	800de18 <__hi0bits>
 800e490:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e494:	e7e2      	b.n	800e45c <__d2b+0x70>
 800e496:	bf00      	nop
 800e498:	080105d1 	.word	0x080105d1
 800e49c:	080105e2 	.word	0x080105e2

0800e4a0 <__ratio>:
 800e4a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	4688      	mov	r8, r1
 800e4a6:	4669      	mov	r1, sp
 800e4a8:	4681      	mov	r9, r0
 800e4aa:	f7ff ff55 	bl	800e358 <__b2d>
 800e4ae:	a901      	add	r1, sp, #4
 800e4b0:	4640      	mov	r0, r8
 800e4b2:	ec55 4b10 	vmov	r4, r5, d0
 800e4b6:	f7ff ff4f 	bl	800e358 <__b2d>
 800e4ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e4be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e4c2:	eba3 0c02 	sub.w	ip, r3, r2
 800e4c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e4ca:	1a9b      	subs	r3, r3, r2
 800e4cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e4d0:	ec51 0b10 	vmov	r0, r1, d0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	bfd6      	itet	le
 800e4d8:	460a      	movle	r2, r1
 800e4da:	462a      	movgt	r2, r5
 800e4dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e4e0:	468b      	mov	fp, r1
 800e4e2:	462f      	mov	r7, r5
 800e4e4:	bfd4      	ite	le
 800e4e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e4ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	ee10 2a10 	vmov	r2, s0
 800e4f4:	465b      	mov	r3, fp
 800e4f6:	4639      	mov	r1, r7
 800e4f8:	f7f2 f9a8 	bl	800084c <__aeabi_ddiv>
 800e4fc:	ec41 0b10 	vmov	d0, r0, r1
 800e500:	b003      	add	sp, #12
 800e502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e506 <__copybits>:
 800e506:	3901      	subs	r1, #1
 800e508:	b570      	push	{r4, r5, r6, lr}
 800e50a:	1149      	asrs	r1, r1, #5
 800e50c:	6914      	ldr	r4, [r2, #16]
 800e50e:	3101      	adds	r1, #1
 800e510:	f102 0314 	add.w	r3, r2, #20
 800e514:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e518:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e51c:	1f05      	subs	r5, r0, #4
 800e51e:	42a3      	cmp	r3, r4
 800e520:	d30c      	bcc.n	800e53c <__copybits+0x36>
 800e522:	1aa3      	subs	r3, r4, r2
 800e524:	3b11      	subs	r3, #17
 800e526:	f023 0303 	bic.w	r3, r3, #3
 800e52a:	3211      	adds	r2, #17
 800e52c:	42a2      	cmp	r2, r4
 800e52e:	bf88      	it	hi
 800e530:	2300      	movhi	r3, #0
 800e532:	4418      	add	r0, r3
 800e534:	2300      	movs	r3, #0
 800e536:	4288      	cmp	r0, r1
 800e538:	d305      	bcc.n	800e546 <__copybits+0x40>
 800e53a:	bd70      	pop	{r4, r5, r6, pc}
 800e53c:	f853 6b04 	ldr.w	r6, [r3], #4
 800e540:	f845 6f04 	str.w	r6, [r5, #4]!
 800e544:	e7eb      	b.n	800e51e <__copybits+0x18>
 800e546:	f840 3b04 	str.w	r3, [r0], #4
 800e54a:	e7f4      	b.n	800e536 <__copybits+0x30>

0800e54c <__any_on>:
 800e54c:	f100 0214 	add.w	r2, r0, #20
 800e550:	6900      	ldr	r0, [r0, #16]
 800e552:	114b      	asrs	r3, r1, #5
 800e554:	4298      	cmp	r0, r3
 800e556:	b510      	push	{r4, lr}
 800e558:	db11      	blt.n	800e57e <__any_on+0x32>
 800e55a:	dd0a      	ble.n	800e572 <__any_on+0x26>
 800e55c:	f011 011f 	ands.w	r1, r1, #31
 800e560:	d007      	beq.n	800e572 <__any_on+0x26>
 800e562:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e566:	fa24 f001 	lsr.w	r0, r4, r1
 800e56a:	fa00 f101 	lsl.w	r1, r0, r1
 800e56e:	428c      	cmp	r4, r1
 800e570:	d10b      	bne.n	800e58a <__any_on+0x3e>
 800e572:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e576:	4293      	cmp	r3, r2
 800e578:	d803      	bhi.n	800e582 <__any_on+0x36>
 800e57a:	2000      	movs	r0, #0
 800e57c:	bd10      	pop	{r4, pc}
 800e57e:	4603      	mov	r3, r0
 800e580:	e7f7      	b.n	800e572 <__any_on+0x26>
 800e582:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e586:	2900      	cmp	r1, #0
 800e588:	d0f5      	beq.n	800e576 <__any_on+0x2a>
 800e58a:	2001      	movs	r0, #1
 800e58c:	e7f6      	b.n	800e57c <__any_on+0x30>

0800e58e <sulp>:
 800e58e:	b570      	push	{r4, r5, r6, lr}
 800e590:	4604      	mov	r4, r0
 800e592:	460d      	mov	r5, r1
 800e594:	ec45 4b10 	vmov	d0, r4, r5
 800e598:	4616      	mov	r6, r2
 800e59a:	f7ff feb7 	bl	800e30c <__ulp>
 800e59e:	ec51 0b10 	vmov	r0, r1, d0
 800e5a2:	b17e      	cbz	r6, 800e5c4 <sulp+0x36>
 800e5a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e5a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	dd09      	ble.n	800e5c4 <sulp+0x36>
 800e5b0:	051b      	lsls	r3, r3, #20
 800e5b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e5b6:	2400      	movs	r4, #0
 800e5b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e5bc:	4622      	mov	r2, r4
 800e5be:	462b      	mov	r3, r5
 800e5c0:	f7f2 f81a 	bl	80005f8 <__aeabi_dmul>
 800e5c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e5c8 <_strtod_l>:
 800e5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5cc:	ed2d 8b02 	vpush	{d8}
 800e5d0:	b09b      	sub	sp, #108	; 0x6c
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	9213      	str	r2, [sp, #76]	; 0x4c
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	9216      	str	r2, [sp, #88]	; 0x58
 800e5da:	460d      	mov	r5, r1
 800e5dc:	f04f 0800 	mov.w	r8, #0
 800e5e0:	f04f 0900 	mov.w	r9, #0
 800e5e4:	460a      	mov	r2, r1
 800e5e6:	9215      	str	r2, [sp, #84]	; 0x54
 800e5e8:	7811      	ldrb	r1, [r2, #0]
 800e5ea:	292b      	cmp	r1, #43	; 0x2b
 800e5ec:	d04c      	beq.n	800e688 <_strtod_l+0xc0>
 800e5ee:	d83a      	bhi.n	800e666 <_strtod_l+0x9e>
 800e5f0:	290d      	cmp	r1, #13
 800e5f2:	d834      	bhi.n	800e65e <_strtod_l+0x96>
 800e5f4:	2908      	cmp	r1, #8
 800e5f6:	d834      	bhi.n	800e662 <_strtod_l+0x9a>
 800e5f8:	2900      	cmp	r1, #0
 800e5fa:	d03d      	beq.n	800e678 <_strtod_l+0xb0>
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	920a      	str	r2, [sp, #40]	; 0x28
 800e600:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800e602:	7832      	ldrb	r2, [r6, #0]
 800e604:	2a30      	cmp	r2, #48	; 0x30
 800e606:	f040 80b4 	bne.w	800e772 <_strtod_l+0x1aa>
 800e60a:	7872      	ldrb	r2, [r6, #1]
 800e60c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e610:	2a58      	cmp	r2, #88	; 0x58
 800e612:	d170      	bne.n	800e6f6 <_strtod_l+0x12e>
 800e614:	9302      	str	r3, [sp, #8]
 800e616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e618:	9301      	str	r3, [sp, #4]
 800e61a:	ab16      	add	r3, sp, #88	; 0x58
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	4a8e      	ldr	r2, [pc, #568]	; (800e858 <_strtod_l+0x290>)
 800e620:	ab17      	add	r3, sp, #92	; 0x5c
 800e622:	a915      	add	r1, sp, #84	; 0x54
 800e624:	4620      	mov	r0, r4
 800e626:	f001 f92f 	bl	800f888 <__gethex>
 800e62a:	f010 070f 	ands.w	r7, r0, #15
 800e62e:	4605      	mov	r5, r0
 800e630:	d005      	beq.n	800e63e <_strtod_l+0x76>
 800e632:	2f06      	cmp	r7, #6
 800e634:	d12a      	bne.n	800e68c <_strtod_l+0xc4>
 800e636:	3601      	adds	r6, #1
 800e638:	2300      	movs	r3, #0
 800e63a:	9615      	str	r6, [sp, #84]	; 0x54
 800e63c:	930a      	str	r3, [sp, #40]	; 0x28
 800e63e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e640:	2b00      	cmp	r3, #0
 800e642:	f040 857f 	bne.w	800f144 <_strtod_l+0xb7c>
 800e646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e648:	b1db      	cbz	r3, 800e682 <_strtod_l+0xba>
 800e64a:	4642      	mov	r2, r8
 800e64c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e650:	ec43 2b10 	vmov	d0, r2, r3
 800e654:	b01b      	add	sp, #108	; 0x6c
 800e656:	ecbd 8b02 	vpop	{d8}
 800e65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65e:	2920      	cmp	r1, #32
 800e660:	d1cc      	bne.n	800e5fc <_strtod_l+0x34>
 800e662:	3201      	adds	r2, #1
 800e664:	e7bf      	b.n	800e5e6 <_strtod_l+0x1e>
 800e666:	292d      	cmp	r1, #45	; 0x2d
 800e668:	d1c8      	bne.n	800e5fc <_strtod_l+0x34>
 800e66a:	2101      	movs	r1, #1
 800e66c:	910a      	str	r1, [sp, #40]	; 0x28
 800e66e:	1c51      	adds	r1, r2, #1
 800e670:	9115      	str	r1, [sp, #84]	; 0x54
 800e672:	7852      	ldrb	r2, [r2, #1]
 800e674:	2a00      	cmp	r2, #0
 800e676:	d1c3      	bne.n	800e600 <_strtod_l+0x38>
 800e678:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e67a:	9515      	str	r5, [sp, #84]	; 0x54
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f040 855f 	bne.w	800f140 <_strtod_l+0xb78>
 800e682:	4642      	mov	r2, r8
 800e684:	464b      	mov	r3, r9
 800e686:	e7e3      	b.n	800e650 <_strtod_l+0x88>
 800e688:	2100      	movs	r1, #0
 800e68a:	e7ef      	b.n	800e66c <_strtod_l+0xa4>
 800e68c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e68e:	b13a      	cbz	r2, 800e6a0 <_strtod_l+0xd8>
 800e690:	2135      	movs	r1, #53	; 0x35
 800e692:	a818      	add	r0, sp, #96	; 0x60
 800e694:	f7ff ff37 	bl	800e506 <__copybits>
 800e698:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e69a:	4620      	mov	r0, r4
 800e69c:	f7ff fb0a 	bl	800dcb4 <_Bfree>
 800e6a0:	3f01      	subs	r7, #1
 800e6a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e6a4:	2f04      	cmp	r7, #4
 800e6a6:	d806      	bhi.n	800e6b6 <_strtod_l+0xee>
 800e6a8:	e8df f007 	tbb	[pc, r7]
 800e6ac:	201d0314 	.word	0x201d0314
 800e6b0:	14          	.byte	0x14
 800e6b1:	00          	.byte	0x00
 800e6b2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800e6b6:	05e9      	lsls	r1, r5, #23
 800e6b8:	bf48      	it	mi
 800e6ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e6be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e6c2:	0d1b      	lsrs	r3, r3, #20
 800e6c4:	051b      	lsls	r3, r3, #20
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1b9      	bne.n	800e63e <_strtod_l+0x76>
 800e6ca:	f7fe fbb7 	bl	800ce3c <__errno>
 800e6ce:	2322      	movs	r3, #34	; 0x22
 800e6d0:	6003      	str	r3, [r0, #0]
 800e6d2:	e7b4      	b.n	800e63e <_strtod_l+0x76>
 800e6d4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800e6d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e6dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e6e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e6e4:	e7e7      	b.n	800e6b6 <_strtod_l+0xee>
 800e6e6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e860 <_strtod_l+0x298>
 800e6ea:	e7e4      	b.n	800e6b6 <_strtod_l+0xee>
 800e6ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e6f0:	f04f 38ff 	mov.w	r8, #4294967295
 800e6f4:	e7df      	b.n	800e6b6 <_strtod_l+0xee>
 800e6f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6f8:	1c5a      	adds	r2, r3, #1
 800e6fa:	9215      	str	r2, [sp, #84]	; 0x54
 800e6fc:	785b      	ldrb	r3, [r3, #1]
 800e6fe:	2b30      	cmp	r3, #48	; 0x30
 800e700:	d0f9      	beq.n	800e6f6 <_strtod_l+0x12e>
 800e702:	2b00      	cmp	r3, #0
 800e704:	d09b      	beq.n	800e63e <_strtod_l+0x76>
 800e706:	2301      	movs	r3, #1
 800e708:	f04f 0a00 	mov.w	sl, #0
 800e70c:	9304      	str	r3, [sp, #16]
 800e70e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e710:	930b      	str	r3, [sp, #44]	; 0x2c
 800e712:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e716:	46d3      	mov	fp, sl
 800e718:	220a      	movs	r2, #10
 800e71a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e71c:	7806      	ldrb	r6, [r0, #0]
 800e71e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e722:	b2d9      	uxtb	r1, r3
 800e724:	2909      	cmp	r1, #9
 800e726:	d926      	bls.n	800e776 <_strtod_l+0x1ae>
 800e728:	494c      	ldr	r1, [pc, #304]	; (800e85c <_strtod_l+0x294>)
 800e72a:	2201      	movs	r2, #1
 800e72c:	f000 ffe6 	bl	800f6fc <strncmp>
 800e730:	2800      	cmp	r0, #0
 800e732:	d030      	beq.n	800e796 <_strtod_l+0x1ce>
 800e734:	2000      	movs	r0, #0
 800e736:	4632      	mov	r2, r6
 800e738:	9005      	str	r0, [sp, #20]
 800e73a:	465e      	mov	r6, fp
 800e73c:	4603      	mov	r3, r0
 800e73e:	2a65      	cmp	r2, #101	; 0x65
 800e740:	d001      	beq.n	800e746 <_strtod_l+0x17e>
 800e742:	2a45      	cmp	r2, #69	; 0x45
 800e744:	d113      	bne.n	800e76e <_strtod_l+0x1a6>
 800e746:	b91e      	cbnz	r6, 800e750 <_strtod_l+0x188>
 800e748:	9a04      	ldr	r2, [sp, #16]
 800e74a:	4302      	orrs	r2, r0
 800e74c:	d094      	beq.n	800e678 <_strtod_l+0xb0>
 800e74e:	2600      	movs	r6, #0
 800e750:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e752:	1c6a      	adds	r2, r5, #1
 800e754:	9215      	str	r2, [sp, #84]	; 0x54
 800e756:	786a      	ldrb	r2, [r5, #1]
 800e758:	2a2b      	cmp	r2, #43	; 0x2b
 800e75a:	d074      	beq.n	800e846 <_strtod_l+0x27e>
 800e75c:	2a2d      	cmp	r2, #45	; 0x2d
 800e75e:	d078      	beq.n	800e852 <_strtod_l+0x28a>
 800e760:	f04f 0c00 	mov.w	ip, #0
 800e764:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e768:	2909      	cmp	r1, #9
 800e76a:	d97f      	bls.n	800e86c <_strtod_l+0x2a4>
 800e76c:	9515      	str	r5, [sp, #84]	; 0x54
 800e76e:	2700      	movs	r7, #0
 800e770:	e09e      	b.n	800e8b0 <_strtod_l+0x2e8>
 800e772:	2300      	movs	r3, #0
 800e774:	e7c8      	b.n	800e708 <_strtod_l+0x140>
 800e776:	f1bb 0f08 	cmp.w	fp, #8
 800e77a:	bfd8      	it	le
 800e77c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e77e:	f100 0001 	add.w	r0, r0, #1
 800e782:	bfda      	itte	le
 800e784:	fb02 3301 	mlale	r3, r2, r1, r3
 800e788:	9309      	strle	r3, [sp, #36]	; 0x24
 800e78a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e78e:	f10b 0b01 	add.w	fp, fp, #1
 800e792:	9015      	str	r0, [sp, #84]	; 0x54
 800e794:	e7c1      	b.n	800e71a <_strtod_l+0x152>
 800e796:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	9215      	str	r2, [sp, #84]	; 0x54
 800e79c:	785a      	ldrb	r2, [r3, #1]
 800e79e:	f1bb 0f00 	cmp.w	fp, #0
 800e7a2:	d037      	beq.n	800e814 <_strtod_l+0x24c>
 800e7a4:	9005      	str	r0, [sp, #20]
 800e7a6:	465e      	mov	r6, fp
 800e7a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e7ac:	2b09      	cmp	r3, #9
 800e7ae:	d912      	bls.n	800e7d6 <_strtod_l+0x20e>
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	e7c4      	b.n	800e73e <_strtod_l+0x176>
 800e7b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7b6:	1c5a      	adds	r2, r3, #1
 800e7b8:	9215      	str	r2, [sp, #84]	; 0x54
 800e7ba:	785a      	ldrb	r2, [r3, #1]
 800e7bc:	3001      	adds	r0, #1
 800e7be:	2a30      	cmp	r2, #48	; 0x30
 800e7c0:	d0f8      	beq.n	800e7b4 <_strtod_l+0x1ec>
 800e7c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e7c6:	2b08      	cmp	r3, #8
 800e7c8:	f200 84c1 	bhi.w	800f14e <_strtod_l+0xb86>
 800e7cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7ce:	9005      	str	r0, [sp, #20]
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7d4:	4606      	mov	r6, r0
 800e7d6:	3a30      	subs	r2, #48	; 0x30
 800e7d8:	f100 0301 	add.w	r3, r0, #1
 800e7dc:	d014      	beq.n	800e808 <_strtod_l+0x240>
 800e7de:	9905      	ldr	r1, [sp, #20]
 800e7e0:	4419      	add	r1, r3
 800e7e2:	9105      	str	r1, [sp, #20]
 800e7e4:	4633      	mov	r3, r6
 800e7e6:	eb00 0c06 	add.w	ip, r0, r6
 800e7ea:	210a      	movs	r1, #10
 800e7ec:	4563      	cmp	r3, ip
 800e7ee:	d113      	bne.n	800e818 <_strtod_l+0x250>
 800e7f0:	1833      	adds	r3, r6, r0
 800e7f2:	2b08      	cmp	r3, #8
 800e7f4:	f106 0601 	add.w	r6, r6, #1
 800e7f8:	4406      	add	r6, r0
 800e7fa:	dc1a      	bgt.n	800e832 <_strtod_l+0x26a>
 800e7fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7fe:	230a      	movs	r3, #10
 800e800:	fb03 2301 	mla	r3, r3, r1, r2
 800e804:	9309      	str	r3, [sp, #36]	; 0x24
 800e806:	2300      	movs	r3, #0
 800e808:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e80a:	1c51      	adds	r1, r2, #1
 800e80c:	9115      	str	r1, [sp, #84]	; 0x54
 800e80e:	7852      	ldrb	r2, [r2, #1]
 800e810:	4618      	mov	r0, r3
 800e812:	e7c9      	b.n	800e7a8 <_strtod_l+0x1e0>
 800e814:	4658      	mov	r0, fp
 800e816:	e7d2      	b.n	800e7be <_strtod_l+0x1f6>
 800e818:	2b08      	cmp	r3, #8
 800e81a:	f103 0301 	add.w	r3, r3, #1
 800e81e:	dc03      	bgt.n	800e828 <_strtod_l+0x260>
 800e820:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e822:	434f      	muls	r7, r1
 800e824:	9709      	str	r7, [sp, #36]	; 0x24
 800e826:	e7e1      	b.n	800e7ec <_strtod_l+0x224>
 800e828:	2b10      	cmp	r3, #16
 800e82a:	bfd8      	it	le
 800e82c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800e830:	e7dc      	b.n	800e7ec <_strtod_l+0x224>
 800e832:	2e10      	cmp	r6, #16
 800e834:	bfdc      	itt	le
 800e836:	230a      	movle	r3, #10
 800e838:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800e83c:	e7e3      	b.n	800e806 <_strtod_l+0x23e>
 800e83e:	2300      	movs	r3, #0
 800e840:	9305      	str	r3, [sp, #20]
 800e842:	2301      	movs	r3, #1
 800e844:	e780      	b.n	800e748 <_strtod_l+0x180>
 800e846:	f04f 0c00 	mov.w	ip, #0
 800e84a:	1caa      	adds	r2, r5, #2
 800e84c:	9215      	str	r2, [sp, #84]	; 0x54
 800e84e:	78aa      	ldrb	r2, [r5, #2]
 800e850:	e788      	b.n	800e764 <_strtod_l+0x19c>
 800e852:	f04f 0c01 	mov.w	ip, #1
 800e856:	e7f8      	b.n	800e84a <_strtod_l+0x282>
 800e858:	08010740 	.word	0x08010740
 800e85c:	0801073c 	.word	0x0801073c
 800e860:	7ff00000 	.word	0x7ff00000
 800e864:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e866:	1c51      	adds	r1, r2, #1
 800e868:	9115      	str	r1, [sp, #84]	; 0x54
 800e86a:	7852      	ldrb	r2, [r2, #1]
 800e86c:	2a30      	cmp	r2, #48	; 0x30
 800e86e:	d0f9      	beq.n	800e864 <_strtod_l+0x29c>
 800e870:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e874:	2908      	cmp	r1, #8
 800e876:	f63f af7a 	bhi.w	800e76e <_strtod_l+0x1a6>
 800e87a:	3a30      	subs	r2, #48	; 0x30
 800e87c:	9208      	str	r2, [sp, #32]
 800e87e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e880:	920c      	str	r2, [sp, #48]	; 0x30
 800e882:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e884:	1c57      	adds	r7, r2, #1
 800e886:	9715      	str	r7, [sp, #84]	; 0x54
 800e888:	7852      	ldrb	r2, [r2, #1]
 800e88a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e88e:	f1be 0f09 	cmp.w	lr, #9
 800e892:	d938      	bls.n	800e906 <_strtod_l+0x33e>
 800e894:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e896:	1a7f      	subs	r7, r7, r1
 800e898:	2f08      	cmp	r7, #8
 800e89a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e89e:	dc03      	bgt.n	800e8a8 <_strtod_l+0x2e0>
 800e8a0:	9908      	ldr	r1, [sp, #32]
 800e8a2:	428f      	cmp	r7, r1
 800e8a4:	bfa8      	it	ge
 800e8a6:	460f      	movge	r7, r1
 800e8a8:	f1bc 0f00 	cmp.w	ip, #0
 800e8ac:	d000      	beq.n	800e8b0 <_strtod_l+0x2e8>
 800e8ae:	427f      	negs	r7, r7
 800e8b0:	2e00      	cmp	r6, #0
 800e8b2:	d14f      	bne.n	800e954 <_strtod_l+0x38c>
 800e8b4:	9904      	ldr	r1, [sp, #16]
 800e8b6:	4301      	orrs	r1, r0
 800e8b8:	f47f aec1 	bne.w	800e63e <_strtod_l+0x76>
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f47f aedb 	bne.w	800e678 <_strtod_l+0xb0>
 800e8c2:	2a69      	cmp	r2, #105	; 0x69
 800e8c4:	d029      	beq.n	800e91a <_strtod_l+0x352>
 800e8c6:	dc26      	bgt.n	800e916 <_strtod_l+0x34e>
 800e8c8:	2a49      	cmp	r2, #73	; 0x49
 800e8ca:	d026      	beq.n	800e91a <_strtod_l+0x352>
 800e8cc:	2a4e      	cmp	r2, #78	; 0x4e
 800e8ce:	f47f aed3 	bne.w	800e678 <_strtod_l+0xb0>
 800e8d2:	499b      	ldr	r1, [pc, #620]	; (800eb40 <_strtod_l+0x578>)
 800e8d4:	a815      	add	r0, sp, #84	; 0x54
 800e8d6:	f001 fa17 	bl	800fd08 <__match>
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	f43f aecc 	beq.w	800e678 <_strtod_l+0xb0>
 800e8e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	2b28      	cmp	r3, #40	; 0x28
 800e8e6:	d12f      	bne.n	800e948 <_strtod_l+0x380>
 800e8e8:	4996      	ldr	r1, [pc, #600]	; (800eb44 <_strtod_l+0x57c>)
 800e8ea:	aa18      	add	r2, sp, #96	; 0x60
 800e8ec:	a815      	add	r0, sp, #84	; 0x54
 800e8ee:	f001 fa1f 	bl	800fd30 <__hexnan>
 800e8f2:	2805      	cmp	r0, #5
 800e8f4:	d128      	bne.n	800e948 <_strtod_l+0x380>
 800e8f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e8f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e8fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e900:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e904:	e69b      	b.n	800e63e <_strtod_l+0x76>
 800e906:	9f08      	ldr	r7, [sp, #32]
 800e908:	210a      	movs	r1, #10
 800e90a:	fb01 2107 	mla	r1, r1, r7, r2
 800e90e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e912:	9208      	str	r2, [sp, #32]
 800e914:	e7b5      	b.n	800e882 <_strtod_l+0x2ba>
 800e916:	2a6e      	cmp	r2, #110	; 0x6e
 800e918:	e7d9      	b.n	800e8ce <_strtod_l+0x306>
 800e91a:	498b      	ldr	r1, [pc, #556]	; (800eb48 <_strtod_l+0x580>)
 800e91c:	a815      	add	r0, sp, #84	; 0x54
 800e91e:	f001 f9f3 	bl	800fd08 <__match>
 800e922:	2800      	cmp	r0, #0
 800e924:	f43f aea8 	beq.w	800e678 <_strtod_l+0xb0>
 800e928:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e92a:	4988      	ldr	r1, [pc, #544]	; (800eb4c <_strtod_l+0x584>)
 800e92c:	3b01      	subs	r3, #1
 800e92e:	a815      	add	r0, sp, #84	; 0x54
 800e930:	9315      	str	r3, [sp, #84]	; 0x54
 800e932:	f001 f9e9 	bl	800fd08 <__match>
 800e936:	b910      	cbnz	r0, 800e93e <_strtod_l+0x376>
 800e938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e93a:	3301      	adds	r3, #1
 800e93c:	9315      	str	r3, [sp, #84]	; 0x54
 800e93e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800eb5c <_strtod_l+0x594>
 800e942:	f04f 0800 	mov.w	r8, #0
 800e946:	e67a      	b.n	800e63e <_strtod_l+0x76>
 800e948:	4881      	ldr	r0, [pc, #516]	; (800eb50 <_strtod_l+0x588>)
 800e94a:	f000 fef9 	bl	800f740 <nan>
 800e94e:	ec59 8b10 	vmov	r8, r9, d0
 800e952:	e674      	b.n	800e63e <_strtod_l+0x76>
 800e954:	9b05      	ldr	r3, [sp, #20]
 800e956:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e958:	1afb      	subs	r3, r7, r3
 800e95a:	f1bb 0f00 	cmp.w	fp, #0
 800e95e:	bf08      	it	eq
 800e960:	46b3      	moveq	fp, r6
 800e962:	2e10      	cmp	r6, #16
 800e964:	9308      	str	r3, [sp, #32]
 800e966:	4635      	mov	r5, r6
 800e968:	bfa8      	it	ge
 800e96a:	2510      	movge	r5, #16
 800e96c:	f7f1 fdca 	bl	8000504 <__aeabi_ui2d>
 800e970:	2e09      	cmp	r6, #9
 800e972:	4680      	mov	r8, r0
 800e974:	4689      	mov	r9, r1
 800e976:	dd13      	ble.n	800e9a0 <_strtod_l+0x3d8>
 800e978:	4b76      	ldr	r3, [pc, #472]	; (800eb54 <_strtod_l+0x58c>)
 800e97a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e97e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e982:	f7f1 fe39 	bl	80005f8 <__aeabi_dmul>
 800e986:	4680      	mov	r8, r0
 800e988:	4650      	mov	r0, sl
 800e98a:	4689      	mov	r9, r1
 800e98c:	f7f1 fdba 	bl	8000504 <__aeabi_ui2d>
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	4640      	mov	r0, r8
 800e996:	4649      	mov	r1, r9
 800e998:	f7f1 fc78 	bl	800028c <__adddf3>
 800e99c:	4680      	mov	r8, r0
 800e99e:	4689      	mov	r9, r1
 800e9a0:	2e0f      	cmp	r6, #15
 800e9a2:	dc38      	bgt.n	800ea16 <_strtod_l+0x44e>
 800e9a4:	9b08      	ldr	r3, [sp, #32]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f43f ae49 	beq.w	800e63e <_strtod_l+0x76>
 800e9ac:	dd24      	ble.n	800e9f8 <_strtod_l+0x430>
 800e9ae:	2b16      	cmp	r3, #22
 800e9b0:	dc0b      	bgt.n	800e9ca <_strtod_l+0x402>
 800e9b2:	4968      	ldr	r1, [pc, #416]	; (800eb54 <_strtod_l+0x58c>)
 800e9b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e9b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9bc:	4642      	mov	r2, r8
 800e9be:	464b      	mov	r3, r9
 800e9c0:	f7f1 fe1a 	bl	80005f8 <__aeabi_dmul>
 800e9c4:	4680      	mov	r8, r0
 800e9c6:	4689      	mov	r9, r1
 800e9c8:	e639      	b.n	800e63e <_strtod_l+0x76>
 800e9ca:	9a08      	ldr	r2, [sp, #32]
 800e9cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	db20      	blt.n	800ea16 <_strtod_l+0x44e>
 800e9d4:	4c5f      	ldr	r4, [pc, #380]	; (800eb54 <_strtod_l+0x58c>)
 800e9d6:	f1c6 060f 	rsb	r6, r6, #15
 800e9da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800e9de:	4642      	mov	r2, r8
 800e9e0:	464b      	mov	r3, r9
 800e9e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9e6:	f7f1 fe07 	bl	80005f8 <__aeabi_dmul>
 800e9ea:	9b08      	ldr	r3, [sp, #32]
 800e9ec:	1b9e      	subs	r6, r3, r6
 800e9ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e9f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e9f6:	e7e3      	b.n	800e9c0 <_strtod_l+0x3f8>
 800e9f8:	9b08      	ldr	r3, [sp, #32]
 800e9fa:	3316      	adds	r3, #22
 800e9fc:	db0b      	blt.n	800ea16 <_strtod_l+0x44e>
 800e9fe:	9b05      	ldr	r3, [sp, #20]
 800ea00:	1bdf      	subs	r7, r3, r7
 800ea02:	4b54      	ldr	r3, [pc, #336]	; (800eb54 <_strtod_l+0x58c>)
 800ea04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ea08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea0c:	4640      	mov	r0, r8
 800ea0e:	4649      	mov	r1, r9
 800ea10:	f7f1 ff1c 	bl	800084c <__aeabi_ddiv>
 800ea14:	e7d6      	b.n	800e9c4 <_strtod_l+0x3fc>
 800ea16:	9b08      	ldr	r3, [sp, #32]
 800ea18:	1b75      	subs	r5, r6, r5
 800ea1a:	441d      	add	r5, r3
 800ea1c:	2d00      	cmp	r5, #0
 800ea1e:	dd70      	ble.n	800eb02 <_strtod_l+0x53a>
 800ea20:	f015 030f 	ands.w	r3, r5, #15
 800ea24:	d00a      	beq.n	800ea3c <_strtod_l+0x474>
 800ea26:	494b      	ldr	r1, [pc, #300]	; (800eb54 <_strtod_l+0x58c>)
 800ea28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ea2c:	4642      	mov	r2, r8
 800ea2e:	464b      	mov	r3, r9
 800ea30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea34:	f7f1 fde0 	bl	80005f8 <__aeabi_dmul>
 800ea38:	4680      	mov	r8, r0
 800ea3a:	4689      	mov	r9, r1
 800ea3c:	f035 050f 	bics.w	r5, r5, #15
 800ea40:	d04d      	beq.n	800eade <_strtod_l+0x516>
 800ea42:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ea46:	dd22      	ble.n	800ea8e <_strtod_l+0x4c6>
 800ea48:	2500      	movs	r5, #0
 800ea4a:	46ab      	mov	fp, r5
 800ea4c:	9509      	str	r5, [sp, #36]	; 0x24
 800ea4e:	9505      	str	r5, [sp, #20]
 800ea50:	2322      	movs	r3, #34	; 0x22
 800ea52:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800eb5c <_strtod_l+0x594>
 800ea56:	6023      	str	r3, [r4, #0]
 800ea58:	f04f 0800 	mov.w	r8, #0
 800ea5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	f43f aded 	beq.w	800e63e <_strtod_l+0x76>
 800ea64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ea66:	4620      	mov	r0, r4
 800ea68:	f7ff f924 	bl	800dcb4 <_Bfree>
 800ea6c:	9905      	ldr	r1, [sp, #20]
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f7ff f920 	bl	800dcb4 <_Bfree>
 800ea74:	4659      	mov	r1, fp
 800ea76:	4620      	mov	r0, r4
 800ea78:	f7ff f91c 	bl	800dcb4 <_Bfree>
 800ea7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f7ff f918 	bl	800dcb4 <_Bfree>
 800ea84:	4629      	mov	r1, r5
 800ea86:	4620      	mov	r0, r4
 800ea88:	f7ff f914 	bl	800dcb4 <_Bfree>
 800ea8c:	e5d7      	b.n	800e63e <_strtod_l+0x76>
 800ea8e:	4b32      	ldr	r3, [pc, #200]	; (800eb58 <_strtod_l+0x590>)
 800ea90:	9304      	str	r3, [sp, #16]
 800ea92:	2300      	movs	r3, #0
 800ea94:	112d      	asrs	r5, r5, #4
 800ea96:	4640      	mov	r0, r8
 800ea98:	4649      	mov	r1, r9
 800ea9a:	469a      	mov	sl, r3
 800ea9c:	2d01      	cmp	r5, #1
 800ea9e:	dc21      	bgt.n	800eae4 <_strtod_l+0x51c>
 800eaa0:	b10b      	cbz	r3, 800eaa6 <_strtod_l+0x4de>
 800eaa2:	4680      	mov	r8, r0
 800eaa4:	4689      	mov	r9, r1
 800eaa6:	492c      	ldr	r1, [pc, #176]	; (800eb58 <_strtod_l+0x590>)
 800eaa8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800eaac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800eab0:	4642      	mov	r2, r8
 800eab2:	464b      	mov	r3, r9
 800eab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eab8:	f7f1 fd9e 	bl	80005f8 <__aeabi_dmul>
 800eabc:	4b27      	ldr	r3, [pc, #156]	; (800eb5c <_strtod_l+0x594>)
 800eabe:	460a      	mov	r2, r1
 800eac0:	400b      	ands	r3, r1
 800eac2:	4927      	ldr	r1, [pc, #156]	; (800eb60 <_strtod_l+0x598>)
 800eac4:	428b      	cmp	r3, r1
 800eac6:	4680      	mov	r8, r0
 800eac8:	d8be      	bhi.n	800ea48 <_strtod_l+0x480>
 800eaca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800eace:	428b      	cmp	r3, r1
 800ead0:	bf86      	itte	hi
 800ead2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800eb64 <_strtod_l+0x59c>
 800ead6:	f04f 38ff 	movhi.w	r8, #4294967295
 800eada:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800eade:	2300      	movs	r3, #0
 800eae0:	9304      	str	r3, [sp, #16]
 800eae2:	e07b      	b.n	800ebdc <_strtod_l+0x614>
 800eae4:	07ea      	lsls	r2, r5, #31
 800eae6:	d505      	bpl.n	800eaf4 <_strtod_l+0x52c>
 800eae8:	9b04      	ldr	r3, [sp, #16]
 800eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaee:	f7f1 fd83 	bl	80005f8 <__aeabi_dmul>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	9a04      	ldr	r2, [sp, #16]
 800eaf6:	3208      	adds	r2, #8
 800eaf8:	f10a 0a01 	add.w	sl, sl, #1
 800eafc:	106d      	asrs	r5, r5, #1
 800eafe:	9204      	str	r2, [sp, #16]
 800eb00:	e7cc      	b.n	800ea9c <_strtod_l+0x4d4>
 800eb02:	d0ec      	beq.n	800eade <_strtod_l+0x516>
 800eb04:	426d      	negs	r5, r5
 800eb06:	f015 020f 	ands.w	r2, r5, #15
 800eb0a:	d00a      	beq.n	800eb22 <_strtod_l+0x55a>
 800eb0c:	4b11      	ldr	r3, [pc, #68]	; (800eb54 <_strtod_l+0x58c>)
 800eb0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb12:	4640      	mov	r0, r8
 800eb14:	4649      	mov	r1, r9
 800eb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1a:	f7f1 fe97 	bl	800084c <__aeabi_ddiv>
 800eb1e:	4680      	mov	r8, r0
 800eb20:	4689      	mov	r9, r1
 800eb22:	112d      	asrs	r5, r5, #4
 800eb24:	d0db      	beq.n	800eade <_strtod_l+0x516>
 800eb26:	2d1f      	cmp	r5, #31
 800eb28:	dd1e      	ble.n	800eb68 <_strtod_l+0x5a0>
 800eb2a:	2500      	movs	r5, #0
 800eb2c:	46ab      	mov	fp, r5
 800eb2e:	9509      	str	r5, [sp, #36]	; 0x24
 800eb30:	9505      	str	r5, [sp, #20]
 800eb32:	2322      	movs	r3, #34	; 0x22
 800eb34:	f04f 0800 	mov.w	r8, #0
 800eb38:	f04f 0900 	mov.w	r9, #0
 800eb3c:	6023      	str	r3, [r4, #0]
 800eb3e:	e78d      	b.n	800ea5c <_strtod_l+0x494>
 800eb40:	08010529 	.word	0x08010529
 800eb44:	08010754 	.word	0x08010754
 800eb48:	08010521 	.word	0x08010521
 800eb4c:	08010558 	.word	0x08010558
 800eb50:	080108e5 	.word	0x080108e5
 800eb54:	08010668 	.word	0x08010668
 800eb58:	08010640 	.word	0x08010640
 800eb5c:	7ff00000 	.word	0x7ff00000
 800eb60:	7ca00000 	.word	0x7ca00000
 800eb64:	7fefffff 	.word	0x7fefffff
 800eb68:	f015 0310 	ands.w	r3, r5, #16
 800eb6c:	bf18      	it	ne
 800eb6e:	236a      	movne	r3, #106	; 0x6a
 800eb70:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ef14 <_strtod_l+0x94c>
 800eb74:	9304      	str	r3, [sp, #16]
 800eb76:	4640      	mov	r0, r8
 800eb78:	4649      	mov	r1, r9
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	07ea      	lsls	r2, r5, #31
 800eb7e:	d504      	bpl.n	800eb8a <_strtod_l+0x5c2>
 800eb80:	e9da 2300 	ldrd	r2, r3, [sl]
 800eb84:	f7f1 fd38 	bl	80005f8 <__aeabi_dmul>
 800eb88:	2301      	movs	r3, #1
 800eb8a:	106d      	asrs	r5, r5, #1
 800eb8c:	f10a 0a08 	add.w	sl, sl, #8
 800eb90:	d1f4      	bne.n	800eb7c <_strtod_l+0x5b4>
 800eb92:	b10b      	cbz	r3, 800eb98 <_strtod_l+0x5d0>
 800eb94:	4680      	mov	r8, r0
 800eb96:	4689      	mov	r9, r1
 800eb98:	9b04      	ldr	r3, [sp, #16]
 800eb9a:	b1bb      	cbz	r3, 800ebcc <_strtod_l+0x604>
 800eb9c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800eba0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	4649      	mov	r1, r9
 800eba8:	dd10      	ble.n	800ebcc <_strtod_l+0x604>
 800ebaa:	2b1f      	cmp	r3, #31
 800ebac:	f340 811e 	ble.w	800edec <_strtod_l+0x824>
 800ebb0:	2b34      	cmp	r3, #52	; 0x34
 800ebb2:	bfde      	ittt	le
 800ebb4:	f04f 33ff 	movle.w	r3, #4294967295
 800ebb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ebbc:	4093      	lslle	r3, r2
 800ebbe:	f04f 0800 	mov.w	r8, #0
 800ebc2:	bfcc      	ite	gt
 800ebc4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ebc8:	ea03 0901 	andle.w	r9, r3, r1
 800ebcc:	2200      	movs	r2, #0
 800ebce:	2300      	movs	r3, #0
 800ebd0:	4640      	mov	r0, r8
 800ebd2:	4649      	mov	r1, r9
 800ebd4:	f7f1 ff78 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d1a6      	bne.n	800eb2a <_strtod_l+0x562>
 800ebdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebe2:	4633      	mov	r3, r6
 800ebe4:	465a      	mov	r2, fp
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f7ff f8cc 	bl	800dd84 <__s2b>
 800ebec:	9009      	str	r0, [sp, #36]	; 0x24
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	f43f af2a 	beq.w	800ea48 <_strtod_l+0x480>
 800ebf4:	9a08      	ldr	r2, [sp, #32]
 800ebf6:	9b05      	ldr	r3, [sp, #20]
 800ebf8:	2a00      	cmp	r2, #0
 800ebfa:	eba3 0307 	sub.w	r3, r3, r7
 800ebfe:	bfa8      	it	ge
 800ec00:	2300      	movge	r3, #0
 800ec02:	930c      	str	r3, [sp, #48]	; 0x30
 800ec04:	2500      	movs	r5, #0
 800ec06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ec0a:	9312      	str	r3, [sp, #72]	; 0x48
 800ec0c:	46ab      	mov	fp, r5
 800ec0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec10:	4620      	mov	r0, r4
 800ec12:	6859      	ldr	r1, [r3, #4]
 800ec14:	f7ff f80e 	bl	800dc34 <_Balloc>
 800ec18:	9005      	str	r0, [sp, #20]
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	f43f af18 	beq.w	800ea50 <_strtod_l+0x488>
 800ec20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec22:	691a      	ldr	r2, [r3, #16]
 800ec24:	3202      	adds	r2, #2
 800ec26:	f103 010c 	add.w	r1, r3, #12
 800ec2a:	0092      	lsls	r2, r2, #2
 800ec2c:	300c      	adds	r0, #12
 800ec2e:	f000 fd77 	bl	800f720 <memcpy>
 800ec32:	ec49 8b10 	vmov	d0, r8, r9
 800ec36:	aa18      	add	r2, sp, #96	; 0x60
 800ec38:	a917      	add	r1, sp, #92	; 0x5c
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f7ff fbd6 	bl	800e3ec <__d2b>
 800ec40:	ec49 8b18 	vmov	d8, r8, r9
 800ec44:	9016      	str	r0, [sp, #88]	; 0x58
 800ec46:	2800      	cmp	r0, #0
 800ec48:	f43f af02 	beq.w	800ea50 <_strtod_l+0x488>
 800ec4c:	2101      	movs	r1, #1
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f7ff f930 	bl	800deb4 <__i2b>
 800ec54:	4683      	mov	fp, r0
 800ec56:	2800      	cmp	r0, #0
 800ec58:	f43f aefa 	beq.w	800ea50 <_strtod_l+0x488>
 800ec5c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ec5e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ec60:	2e00      	cmp	r6, #0
 800ec62:	bfab      	itete	ge
 800ec64:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ec66:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ec68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ec6a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ec6e:	bfac      	ite	ge
 800ec70:	eb06 0a03 	addge.w	sl, r6, r3
 800ec74:	1b9f      	sublt	r7, r3, r6
 800ec76:	9b04      	ldr	r3, [sp, #16]
 800ec78:	1af6      	subs	r6, r6, r3
 800ec7a:	4416      	add	r6, r2
 800ec7c:	4ba0      	ldr	r3, [pc, #640]	; (800ef00 <_strtod_l+0x938>)
 800ec7e:	3e01      	subs	r6, #1
 800ec80:	429e      	cmp	r6, r3
 800ec82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ec86:	f280 80c4 	bge.w	800ee12 <_strtod_l+0x84a>
 800ec8a:	1b9b      	subs	r3, r3, r6
 800ec8c:	2b1f      	cmp	r3, #31
 800ec8e:	eba2 0203 	sub.w	r2, r2, r3
 800ec92:	f04f 0101 	mov.w	r1, #1
 800ec96:	f300 80b0 	bgt.w	800edfa <_strtod_l+0x832>
 800ec9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ec9e:	930e      	str	r3, [sp, #56]	; 0x38
 800eca0:	2300      	movs	r3, #0
 800eca2:	930d      	str	r3, [sp, #52]	; 0x34
 800eca4:	eb0a 0602 	add.w	r6, sl, r2
 800eca8:	9b04      	ldr	r3, [sp, #16]
 800ecaa:	45b2      	cmp	sl, r6
 800ecac:	4417      	add	r7, r2
 800ecae:	441f      	add	r7, r3
 800ecb0:	4653      	mov	r3, sl
 800ecb2:	bfa8      	it	ge
 800ecb4:	4633      	movge	r3, r6
 800ecb6:	42bb      	cmp	r3, r7
 800ecb8:	bfa8      	it	ge
 800ecba:	463b      	movge	r3, r7
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	bfc2      	ittt	gt
 800ecc0:	1af6      	subgt	r6, r6, r3
 800ecc2:	1aff      	subgt	r7, r7, r3
 800ecc4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ecc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	dd17      	ble.n	800ecfe <_strtod_l+0x736>
 800ecce:	4659      	mov	r1, fp
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f7ff f9ae 	bl	800e034 <__pow5mult>
 800ecd8:	4683      	mov	fp, r0
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	f43f aeb8 	beq.w	800ea50 <_strtod_l+0x488>
 800ece0:	4601      	mov	r1, r0
 800ece2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ece4:	4620      	mov	r0, r4
 800ece6:	f7ff f8fb 	bl	800dee0 <__multiply>
 800ecea:	900b      	str	r0, [sp, #44]	; 0x2c
 800ecec:	2800      	cmp	r0, #0
 800ecee:	f43f aeaf 	beq.w	800ea50 <_strtod_l+0x488>
 800ecf2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	f7fe ffdd 	bl	800dcb4 <_Bfree>
 800ecfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecfc:	9316      	str	r3, [sp, #88]	; 0x58
 800ecfe:	2e00      	cmp	r6, #0
 800ed00:	f300 808c 	bgt.w	800ee1c <_strtod_l+0x854>
 800ed04:	9b08      	ldr	r3, [sp, #32]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	dd08      	ble.n	800ed1c <_strtod_l+0x754>
 800ed0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ed0c:	9905      	ldr	r1, [sp, #20]
 800ed0e:	4620      	mov	r0, r4
 800ed10:	f7ff f990 	bl	800e034 <__pow5mult>
 800ed14:	9005      	str	r0, [sp, #20]
 800ed16:	2800      	cmp	r0, #0
 800ed18:	f43f ae9a 	beq.w	800ea50 <_strtod_l+0x488>
 800ed1c:	2f00      	cmp	r7, #0
 800ed1e:	dd08      	ble.n	800ed32 <_strtod_l+0x76a>
 800ed20:	9905      	ldr	r1, [sp, #20]
 800ed22:	463a      	mov	r2, r7
 800ed24:	4620      	mov	r0, r4
 800ed26:	f7ff f9df 	bl	800e0e8 <__lshift>
 800ed2a:	9005      	str	r0, [sp, #20]
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	f43f ae8f 	beq.w	800ea50 <_strtod_l+0x488>
 800ed32:	f1ba 0f00 	cmp.w	sl, #0
 800ed36:	dd08      	ble.n	800ed4a <_strtod_l+0x782>
 800ed38:	4659      	mov	r1, fp
 800ed3a:	4652      	mov	r2, sl
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	f7ff f9d3 	bl	800e0e8 <__lshift>
 800ed42:	4683      	mov	fp, r0
 800ed44:	2800      	cmp	r0, #0
 800ed46:	f43f ae83 	beq.w	800ea50 <_strtod_l+0x488>
 800ed4a:	9a05      	ldr	r2, [sp, #20]
 800ed4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f7ff fa52 	bl	800e1f8 <__mdiff>
 800ed54:	4605      	mov	r5, r0
 800ed56:	2800      	cmp	r0, #0
 800ed58:	f43f ae7a 	beq.w	800ea50 <_strtod_l+0x488>
 800ed5c:	68c3      	ldr	r3, [r0, #12]
 800ed5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed60:	2300      	movs	r3, #0
 800ed62:	60c3      	str	r3, [r0, #12]
 800ed64:	4659      	mov	r1, fp
 800ed66:	f7ff fa2b 	bl	800e1c0 <__mcmp>
 800ed6a:	2800      	cmp	r0, #0
 800ed6c:	da60      	bge.n	800ee30 <_strtod_l+0x868>
 800ed6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed70:	ea53 0308 	orrs.w	r3, r3, r8
 800ed74:	f040 8084 	bne.w	800ee80 <_strtod_l+0x8b8>
 800ed78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d17f      	bne.n	800ee80 <_strtod_l+0x8b8>
 800ed80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ed84:	0d1b      	lsrs	r3, r3, #20
 800ed86:	051b      	lsls	r3, r3, #20
 800ed88:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ed8c:	d978      	bls.n	800ee80 <_strtod_l+0x8b8>
 800ed8e:	696b      	ldr	r3, [r5, #20]
 800ed90:	b913      	cbnz	r3, 800ed98 <_strtod_l+0x7d0>
 800ed92:	692b      	ldr	r3, [r5, #16]
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	dd73      	ble.n	800ee80 <_strtod_l+0x8b8>
 800ed98:	4629      	mov	r1, r5
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	f7ff f9a3 	bl	800e0e8 <__lshift>
 800eda2:	4659      	mov	r1, fp
 800eda4:	4605      	mov	r5, r0
 800eda6:	f7ff fa0b 	bl	800e1c0 <__mcmp>
 800edaa:	2800      	cmp	r0, #0
 800edac:	dd68      	ble.n	800ee80 <_strtod_l+0x8b8>
 800edae:	9904      	ldr	r1, [sp, #16]
 800edb0:	4a54      	ldr	r2, [pc, #336]	; (800ef04 <_strtod_l+0x93c>)
 800edb2:	464b      	mov	r3, r9
 800edb4:	2900      	cmp	r1, #0
 800edb6:	f000 8084 	beq.w	800eec2 <_strtod_l+0x8fa>
 800edba:	ea02 0109 	and.w	r1, r2, r9
 800edbe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800edc2:	dc7e      	bgt.n	800eec2 <_strtod_l+0x8fa>
 800edc4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800edc8:	f77f aeb3 	ble.w	800eb32 <_strtod_l+0x56a>
 800edcc:	4b4e      	ldr	r3, [pc, #312]	; (800ef08 <_strtod_l+0x940>)
 800edce:	4640      	mov	r0, r8
 800edd0:	4649      	mov	r1, r9
 800edd2:	2200      	movs	r2, #0
 800edd4:	f7f1 fc10 	bl	80005f8 <__aeabi_dmul>
 800edd8:	4b4a      	ldr	r3, [pc, #296]	; (800ef04 <_strtod_l+0x93c>)
 800edda:	400b      	ands	r3, r1
 800eddc:	4680      	mov	r8, r0
 800edde:	4689      	mov	r9, r1
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f47f ae3f 	bne.w	800ea64 <_strtod_l+0x49c>
 800ede6:	2322      	movs	r3, #34	; 0x22
 800ede8:	6023      	str	r3, [r4, #0]
 800edea:	e63b      	b.n	800ea64 <_strtod_l+0x49c>
 800edec:	f04f 32ff 	mov.w	r2, #4294967295
 800edf0:	fa02 f303 	lsl.w	r3, r2, r3
 800edf4:	ea03 0808 	and.w	r8, r3, r8
 800edf8:	e6e8      	b.n	800ebcc <_strtod_l+0x604>
 800edfa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800edfe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ee02:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ee06:	36e2      	adds	r6, #226	; 0xe2
 800ee08:	fa01 f306 	lsl.w	r3, r1, r6
 800ee0c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ee10:	e748      	b.n	800eca4 <_strtod_l+0x6dc>
 800ee12:	2100      	movs	r1, #0
 800ee14:	2301      	movs	r3, #1
 800ee16:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ee1a:	e743      	b.n	800eca4 <_strtod_l+0x6dc>
 800ee1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ee1e:	4632      	mov	r2, r6
 800ee20:	4620      	mov	r0, r4
 800ee22:	f7ff f961 	bl	800e0e8 <__lshift>
 800ee26:	9016      	str	r0, [sp, #88]	; 0x58
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	f47f af6b 	bne.w	800ed04 <_strtod_l+0x73c>
 800ee2e:	e60f      	b.n	800ea50 <_strtod_l+0x488>
 800ee30:	46ca      	mov	sl, r9
 800ee32:	d171      	bne.n	800ef18 <_strtod_l+0x950>
 800ee34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee3a:	b352      	cbz	r2, 800ee92 <_strtod_l+0x8ca>
 800ee3c:	4a33      	ldr	r2, [pc, #204]	; (800ef0c <_strtod_l+0x944>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d12a      	bne.n	800ee98 <_strtod_l+0x8d0>
 800ee42:	9b04      	ldr	r3, [sp, #16]
 800ee44:	4641      	mov	r1, r8
 800ee46:	b1fb      	cbz	r3, 800ee88 <_strtod_l+0x8c0>
 800ee48:	4b2e      	ldr	r3, [pc, #184]	; (800ef04 <_strtod_l+0x93c>)
 800ee4a:	ea09 0303 	and.w	r3, r9, r3
 800ee4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ee52:	f04f 32ff 	mov.w	r2, #4294967295
 800ee56:	d81a      	bhi.n	800ee8e <_strtod_l+0x8c6>
 800ee58:	0d1b      	lsrs	r3, r3, #20
 800ee5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ee5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ee62:	4299      	cmp	r1, r3
 800ee64:	d118      	bne.n	800ee98 <_strtod_l+0x8d0>
 800ee66:	4b2a      	ldr	r3, [pc, #168]	; (800ef10 <_strtod_l+0x948>)
 800ee68:	459a      	cmp	sl, r3
 800ee6a:	d102      	bne.n	800ee72 <_strtod_l+0x8aa>
 800ee6c:	3101      	adds	r1, #1
 800ee6e:	f43f adef 	beq.w	800ea50 <_strtod_l+0x488>
 800ee72:	4b24      	ldr	r3, [pc, #144]	; (800ef04 <_strtod_l+0x93c>)
 800ee74:	ea0a 0303 	and.w	r3, sl, r3
 800ee78:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ee7c:	f04f 0800 	mov.w	r8, #0
 800ee80:	9b04      	ldr	r3, [sp, #16]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d1a2      	bne.n	800edcc <_strtod_l+0x804>
 800ee86:	e5ed      	b.n	800ea64 <_strtod_l+0x49c>
 800ee88:	f04f 33ff 	mov.w	r3, #4294967295
 800ee8c:	e7e9      	b.n	800ee62 <_strtod_l+0x89a>
 800ee8e:	4613      	mov	r3, r2
 800ee90:	e7e7      	b.n	800ee62 <_strtod_l+0x89a>
 800ee92:	ea53 0308 	orrs.w	r3, r3, r8
 800ee96:	d08a      	beq.n	800edae <_strtod_l+0x7e6>
 800ee98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee9a:	b1e3      	cbz	r3, 800eed6 <_strtod_l+0x90e>
 800ee9c:	ea13 0f0a 	tst.w	r3, sl
 800eea0:	d0ee      	beq.n	800ee80 <_strtod_l+0x8b8>
 800eea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eea4:	9a04      	ldr	r2, [sp, #16]
 800eea6:	4640      	mov	r0, r8
 800eea8:	4649      	mov	r1, r9
 800eeaa:	b1c3      	cbz	r3, 800eede <_strtod_l+0x916>
 800eeac:	f7ff fb6f 	bl	800e58e <sulp>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	460b      	mov	r3, r1
 800eeb4:	ec51 0b18 	vmov	r0, r1, d8
 800eeb8:	f7f1 f9e8 	bl	800028c <__adddf3>
 800eebc:	4680      	mov	r8, r0
 800eebe:	4689      	mov	r9, r1
 800eec0:	e7de      	b.n	800ee80 <_strtod_l+0x8b8>
 800eec2:	4013      	ands	r3, r2
 800eec4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eec8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800eecc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800eed0:	f04f 38ff 	mov.w	r8, #4294967295
 800eed4:	e7d4      	b.n	800ee80 <_strtod_l+0x8b8>
 800eed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eed8:	ea13 0f08 	tst.w	r3, r8
 800eedc:	e7e0      	b.n	800eea0 <_strtod_l+0x8d8>
 800eede:	f7ff fb56 	bl	800e58e <sulp>
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	ec51 0b18 	vmov	r0, r1, d8
 800eeea:	f7f1 f9cd 	bl	8000288 <__aeabi_dsub>
 800eeee:	2200      	movs	r2, #0
 800eef0:	2300      	movs	r3, #0
 800eef2:	4680      	mov	r8, r0
 800eef4:	4689      	mov	r9, r1
 800eef6:	f7f1 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d0c0      	beq.n	800ee80 <_strtod_l+0x8b8>
 800eefe:	e618      	b.n	800eb32 <_strtod_l+0x56a>
 800ef00:	fffffc02 	.word	0xfffffc02
 800ef04:	7ff00000 	.word	0x7ff00000
 800ef08:	39500000 	.word	0x39500000
 800ef0c:	000fffff 	.word	0x000fffff
 800ef10:	7fefffff 	.word	0x7fefffff
 800ef14:	08010768 	.word	0x08010768
 800ef18:	4659      	mov	r1, fp
 800ef1a:	4628      	mov	r0, r5
 800ef1c:	f7ff fac0 	bl	800e4a0 <__ratio>
 800ef20:	ec57 6b10 	vmov	r6, r7, d0
 800ef24:	ee10 0a10 	vmov	r0, s0
 800ef28:	2200      	movs	r2, #0
 800ef2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ef2e:	4639      	mov	r1, r7
 800ef30:	f7f1 fdde 	bl	8000af0 <__aeabi_dcmple>
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d071      	beq.n	800f01c <_strtod_l+0xa54>
 800ef38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d17c      	bne.n	800f038 <_strtod_l+0xa70>
 800ef3e:	f1b8 0f00 	cmp.w	r8, #0
 800ef42:	d15a      	bne.n	800effa <_strtod_l+0xa32>
 800ef44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d15d      	bne.n	800f008 <_strtod_l+0xa40>
 800ef4c:	4b90      	ldr	r3, [pc, #576]	; (800f190 <_strtod_l+0xbc8>)
 800ef4e:	2200      	movs	r2, #0
 800ef50:	4630      	mov	r0, r6
 800ef52:	4639      	mov	r1, r7
 800ef54:	f7f1 fdc2 	bl	8000adc <__aeabi_dcmplt>
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	d15c      	bne.n	800f016 <_strtod_l+0xa4e>
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	4639      	mov	r1, r7
 800ef60:	4b8c      	ldr	r3, [pc, #560]	; (800f194 <_strtod_l+0xbcc>)
 800ef62:	2200      	movs	r2, #0
 800ef64:	f7f1 fb48 	bl	80005f8 <__aeabi_dmul>
 800ef68:	4606      	mov	r6, r0
 800ef6a:	460f      	mov	r7, r1
 800ef6c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ef70:	9606      	str	r6, [sp, #24]
 800ef72:	9307      	str	r3, [sp, #28]
 800ef74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ef78:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ef7c:	4b86      	ldr	r3, [pc, #536]	; (800f198 <_strtod_l+0xbd0>)
 800ef7e:	ea0a 0303 	and.w	r3, sl, r3
 800ef82:	930d      	str	r3, [sp, #52]	; 0x34
 800ef84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef86:	4b85      	ldr	r3, [pc, #532]	; (800f19c <_strtod_l+0xbd4>)
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	f040 8090 	bne.w	800f0ae <_strtod_l+0xae6>
 800ef8e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ef92:	ec49 8b10 	vmov	d0, r8, r9
 800ef96:	f7ff f9b9 	bl	800e30c <__ulp>
 800ef9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ef9e:	ec51 0b10 	vmov	r0, r1, d0
 800efa2:	f7f1 fb29 	bl	80005f8 <__aeabi_dmul>
 800efa6:	4642      	mov	r2, r8
 800efa8:	464b      	mov	r3, r9
 800efaa:	f7f1 f96f 	bl	800028c <__adddf3>
 800efae:	460b      	mov	r3, r1
 800efb0:	4979      	ldr	r1, [pc, #484]	; (800f198 <_strtod_l+0xbd0>)
 800efb2:	4a7b      	ldr	r2, [pc, #492]	; (800f1a0 <_strtod_l+0xbd8>)
 800efb4:	4019      	ands	r1, r3
 800efb6:	4291      	cmp	r1, r2
 800efb8:	4680      	mov	r8, r0
 800efba:	d944      	bls.n	800f046 <_strtod_l+0xa7e>
 800efbc:	ee18 2a90 	vmov	r2, s17
 800efc0:	4b78      	ldr	r3, [pc, #480]	; (800f1a4 <_strtod_l+0xbdc>)
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d104      	bne.n	800efd0 <_strtod_l+0xa08>
 800efc6:	ee18 3a10 	vmov	r3, s16
 800efca:	3301      	adds	r3, #1
 800efcc:	f43f ad40 	beq.w	800ea50 <_strtod_l+0x488>
 800efd0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800f1a4 <_strtod_l+0xbdc>
 800efd4:	f04f 38ff 	mov.w	r8, #4294967295
 800efd8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800efda:	4620      	mov	r0, r4
 800efdc:	f7fe fe6a 	bl	800dcb4 <_Bfree>
 800efe0:	9905      	ldr	r1, [sp, #20]
 800efe2:	4620      	mov	r0, r4
 800efe4:	f7fe fe66 	bl	800dcb4 <_Bfree>
 800efe8:	4659      	mov	r1, fp
 800efea:	4620      	mov	r0, r4
 800efec:	f7fe fe62 	bl	800dcb4 <_Bfree>
 800eff0:	4629      	mov	r1, r5
 800eff2:	4620      	mov	r0, r4
 800eff4:	f7fe fe5e 	bl	800dcb4 <_Bfree>
 800eff8:	e609      	b.n	800ec0e <_strtod_l+0x646>
 800effa:	f1b8 0f01 	cmp.w	r8, #1
 800effe:	d103      	bne.n	800f008 <_strtod_l+0xa40>
 800f000:	f1b9 0f00 	cmp.w	r9, #0
 800f004:	f43f ad95 	beq.w	800eb32 <_strtod_l+0x56a>
 800f008:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800f160 <_strtod_l+0xb98>
 800f00c:	4f60      	ldr	r7, [pc, #384]	; (800f190 <_strtod_l+0xbc8>)
 800f00e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f012:	2600      	movs	r6, #0
 800f014:	e7ae      	b.n	800ef74 <_strtod_l+0x9ac>
 800f016:	4f5f      	ldr	r7, [pc, #380]	; (800f194 <_strtod_l+0xbcc>)
 800f018:	2600      	movs	r6, #0
 800f01a:	e7a7      	b.n	800ef6c <_strtod_l+0x9a4>
 800f01c:	4b5d      	ldr	r3, [pc, #372]	; (800f194 <_strtod_l+0xbcc>)
 800f01e:	4630      	mov	r0, r6
 800f020:	4639      	mov	r1, r7
 800f022:	2200      	movs	r2, #0
 800f024:	f7f1 fae8 	bl	80005f8 <__aeabi_dmul>
 800f028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f02a:	4606      	mov	r6, r0
 800f02c:	460f      	mov	r7, r1
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d09c      	beq.n	800ef6c <_strtod_l+0x9a4>
 800f032:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f036:	e79d      	b.n	800ef74 <_strtod_l+0x9ac>
 800f038:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800f168 <_strtod_l+0xba0>
 800f03c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f040:	ec57 6b17 	vmov	r6, r7, d7
 800f044:	e796      	b.n	800ef74 <_strtod_l+0x9ac>
 800f046:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f04a:	9b04      	ldr	r3, [sp, #16]
 800f04c:	46ca      	mov	sl, r9
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1c2      	bne.n	800efd8 <_strtod_l+0xa10>
 800f052:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f058:	0d1b      	lsrs	r3, r3, #20
 800f05a:	051b      	lsls	r3, r3, #20
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d1bb      	bne.n	800efd8 <_strtod_l+0xa10>
 800f060:	4630      	mov	r0, r6
 800f062:	4639      	mov	r1, r7
 800f064:	f7f1 fe28 	bl	8000cb8 <__aeabi_d2lz>
 800f068:	f7f1 fa98 	bl	800059c <__aeabi_l2d>
 800f06c:	4602      	mov	r2, r0
 800f06e:	460b      	mov	r3, r1
 800f070:	4630      	mov	r0, r6
 800f072:	4639      	mov	r1, r7
 800f074:	f7f1 f908 	bl	8000288 <__aeabi_dsub>
 800f078:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f07a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f07e:	ea43 0308 	orr.w	r3, r3, r8
 800f082:	4313      	orrs	r3, r2
 800f084:	4606      	mov	r6, r0
 800f086:	460f      	mov	r7, r1
 800f088:	d054      	beq.n	800f134 <_strtod_l+0xb6c>
 800f08a:	a339      	add	r3, pc, #228	; (adr r3, 800f170 <_strtod_l+0xba8>)
 800f08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f090:	f7f1 fd24 	bl	8000adc <__aeabi_dcmplt>
 800f094:	2800      	cmp	r0, #0
 800f096:	f47f ace5 	bne.w	800ea64 <_strtod_l+0x49c>
 800f09a:	a337      	add	r3, pc, #220	; (adr r3, 800f178 <_strtod_l+0xbb0>)
 800f09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	4639      	mov	r1, r7
 800f0a4:	f7f1 fd38 	bl	8000b18 <__aeabi_dcmpgt>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d095      	beq.n	800efd8 <_strtod_l+0xa10>
 800f0ac:	e4da      	b.n	800ea64 <_strtod_l+0x49c>
 800f0ae:	9b04      	ldr	r3, [sp, #16]
 800f0b0:	b333      	cbz	r3, 800f100 <_strtod_l+0xb38>
 800f0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f0b8:	d822      	bhi.n	800f100 <_strtod_l+0xb38>
 800f0ba:	a331      	add	r3, pc, #196	; (adr r3, 800f180 <_strtod_l+0xbb8>)
 800f0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	4639      	mov	r1, r7
 800f0c4:	f7f1 fd14 	bl	8000af0 <__aeabi_dcmple>
 800f0c8:	b1a0      	cbz	r0, 800f0f4 <_strtod_l+0xb2c>
 800f0ca:	4639      	mov	r1, r7
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f7f1 fd6b 	bl	8000ba8 <__aeabi_d2uiz>
 800f0d2:	2801      	cmp	r0, #1
 800f0d4:	bf38      	it	cc
 800f0d6:	2001      	movcc	r0, #1
 800f0d8:	f7f1 fa14 	bl	8000504 <__aeabi_ui2d>
 800f0dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0de:	4606      	mov	r6, r0
 800f0e0:	460f      	mov	r7, r1
 800f0e2:	bb23      	cbnz	r3, 800f12e <_strtod_l+0xb66>
 800f0e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0e8:	9010      	str	r0, [sp, #64]	; 0x40
 800f0ea:	9311      	str	r3, [sp, #68]	; 0x44
 800f0ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f0f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f0f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f0fc:	1a9b      	subs	r3, r3, r2
 800f0fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800f100:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f104:	eeb0 0a48 	vmov.f32	s0, s16
 800f108:	eef0 0a68 	vmov.f32	s1, s17
 800f10c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f110:	f7ff f8fc 	bl	800e30c <__ulp>
 800f114:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f118:	ec53 2b10 	vmov	r2, r3, d0
 800f11c:	f7f1 fa6c 	bl	80005f8 <__aeabi_dmul>
 800f120:	ec53 2b18 	vmov	r2, r3, d8
 800f124:	f7f1 f8b2 	bl	800028c <__adddf3>
 800f128:	4680      	mov	r8, r0
 800f12a:	4689      	mov	r9, r1
 800f12c:	e78d      	b.n	800f04a <_strtod_l+0xa82>
 800f12e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f132:	e7db      	b.n	800f0ec <_strtod_l+0xb24>
 800f134:	a314      	add	r3, pc, #80	; (adr r3, 800f188 <_strtod_l+0xbc0>)
 800f136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13a:	f7f1 fccf 	bl	8000adc <__aeabi_dcmplt>
 800f13e:	e7b3      	b.n	800f0a8 <_strtod_l+0xae0>
 800f140:	2300      	movs	r3, #0
 800f142:	930a      	str	r3, [sp, #40]	; 0x28
 800f144:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f148:	6013      	str	r3, [r2, #0]
 800f14a:	f7ff ba7c 	b.w	800e646 <_strtod_l+0x7e>
 800f14e:	2a65      	cmp	r2, #101	; 0x65
 800f150:	f43f ab75 	beq.w	800e83e <_strtod_l+0x276>
 800f154:	2a45      	cmp	r2, #69	; 0x45
 800f156:	f43f ab72 	beq.w	800e83e <_strtod_l+0x276>
 800f15a:	2301      	movs	r3, #1
 800f15c:	f7ff bbaa 	b.w	800e8b4 <_strtod_l+0x2ec>
 800f160:	00000000 	.word	0x00000000
 800f164:	bff00000 	.word	0xbff00000
 800f168:	00000000 	.word	0x00000000
 800f16c:	3ff00000 	.word	0x3ff00000
 800f170:	94a03595 	.word	0x94a03595
 800f174:	3fdfffff 	.word	0x3fdfffff
 800f178:	35afe535 	.word	0x35afe535
 800f17c:	3fe00000 	.word	0x3fe00000
 800f180:	ffc00000 	.word	0xffc00000
 800f184:	41dfffff 	.word	0x41dfffff
 800f188:	94a03595 	.word	0x94a03595
 800f18c:	3fcfffff 	.word	0x3fcfffff
 800f190:	3ff00000 	.word	0x3ff00000
 800f194:	3fe00000 	.word	0x3fe00000
 800f198:	7ff00000 	.word	0x7ff00000
 800f19c:	7fe00000 	.word	0x7fe00000
 800f1a0:	7c9fffff 	.word	0x7c9fffff
 800f1a4:	7fefffff 	.word	0x7fefffff

0800f1a8 <_strtod_r>:
 800f1a8:	4b01      	ldr	r3, [pc, #4]	; (800f1b0 <_strtod_r+0x8>)
 800f1aa:	f7ff ba0d 	b.w	800e5c8 <_strtod_l>
 800f1ae:	bf00      	nop
 800f1b0:	20000088 	.word	0x20000088

0800f1b4 <_strtol_l.constprop.0>:
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ba:	d001      	beq.n	800f1c0 <_strtol_l.constprop.0+0xc>
 800f1bc:	2b24      	cmp	r3, #36	; 0x24
 800f1be:	d906      	bls.n	800f1ce <_strtol_l.constprop.0+0x1a>
 800f1c0:	f7fd fe3c 	bl	800ce3c <__errno>
 800f1c4:	2316      	movs	r3, #22
 800f1c6:	6003      	str	r3, [r0, #0]
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f2b4 <_strtol_l.constprop.0+0x100>
 800f1d2:	460d      	mov	r5, r1
 800f1d4:	462e      	mov	r6, r5
 800f1d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1da:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f1de:	f017 0708 	ands.w	r7, r7, #8
 800f1e2:	d1f7      	bne.n	800f1d4 <_strtol_l.constprop.0+0x20>
 800f1e4:	2c2d      	cmp	r4, #45	; 0x2d
 800f1e6:	d132      	bne.n	800f24e <_strtol_l.constprop.0+0x9a>
 800f1e8:	782c      	ldrb	r4, [r5, #0]
 800f1ea:	2701      	movs	r7, #1
 800f1ec:	1cb5      	adds	r5, r6, #2
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d05b      	beq.n	800f2aa <_strtol_l.constprop.0+0xf6>
 800f1f2:	2b10      	cmp	r3, #16
 800f1f4:	d109      	bne.n	800f20a <_strtol_l.constprop.0+0x56>
 800f1f6:	2c30      	cmp	r4, #48	; 0x30
 800f1f8:	d107      	bne.n	800f20a <_strtol_l.constprop.0+0x56>
 800f1fa:	782c      	ldrb	r4, [r5, #0]
 800f1fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f200:	2c58      	cmp	r4, #88	; 0x58
 800f202:	d14d      	bne.n	800f2a0 <_strtol_l.constprop.0+0xec>
 800f204:	786c      	ldrb	r4, [r5, #1]
 800f206:	2310      	movs	r3, #16
 800f208:	3502      	adds	r5, #2
 800f20a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f20e:	f108 38ff 	add.w	r8, r8, #4294967295
 800f212:	f04f 0e00 	mov.w	lr, #0
 800f216:	fbb8 f9f3 	udiv	r9, r8, r3
 800f21a:	4676      	mov	r6, lr
 800f21c:	fb03 8a19 	mls	sl, r3, r9, r8
 800f220:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f224:	f1bc 0f09 	cmp.w	ip, #9
 800f228:	d816      	bhi.n	800f258 <_strtol_l.constprop.0+0xa4>
 800f22a:	4664      	mov	r4, ip
 800f22c:	42a3      	cmp	r3, r4
 800f22e:	dd24      	ble.n	800f27a <_strtol_l.constprop.0+0xc6>
 800f230:	f1be 3fff 	cmp.w	lr, #4294967295
 800f234:	d008      	beq.n	800f248 <_strtol_l.constprop.0+0x94>
 800f236:	45b1      	cmp	r9, r6
 800f238:	d31c      	bcc.n	800f274 <_strtol_l.constprop.0+0xc0>
 800f23a:	d101      	bne.n	800f240 <_strtol_l.constprop.0+0x8c>
 800f23c:	45a2      	cmp	sl, r4
 800f23e:	db19      	blt.n	800f274 <_strtol_l.constprop.0+0xc0>
 800f240:	fb06 4603 	mla	r6, r6, r3, r4
 800f244:	f04f 0e01 	mov.w	lr, #1
 800f248:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f24c:	e7e8      	b.n	800f220 <_strtol_l.constprop.0+0x6c>
 800f24e:	2c2b      	cmp	r4, #43	; 0x2b
 800f250:	bf04      	itt	eq
 800f252:	782c      	ldrbeq	r4, [r5, #0]
 800f254:	1cb5      	addeq	r5, r6, #2
 800f256:	e7ca      	b.n	800f1ee <_strtol_l.constprop.0+0x3a>
 800f258:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f25c:	f1bc 0f19 	cmp.w	ip, #25
 800f260:	d801      	bhi.n	800f266 <_strtol_l.constprop.0+0xb2>
 800f262:	3c37      	subs	r4, #55	; 0x37
 800f264:	e7e2      	b.n	800f22c <_strtol_l.constprop.0+0x78>
 800f266:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f26a:	f1bc 0f19 	cmp.w	ip, #25
 800f26e:	d804      	bhi.n	800f27a <_strtol_l.constprop.0+0xc6>
 800f270:	3c57      	subs	r4, #87	; 0x57
 800f272:	e7db      	b.n	800f22c <_strtol_l.constprop.0+0x78>
 800f274:	f04f 3eff 	mov.w	lr, #4294967295
 800f278:	e7e6      	b.n	800f248 <_strtol_l.constprop.0+0x94>
 800f27a:	f1be 3fff 	cmp.w	lr, #4294967295
 800f27e:	d105      	bne.n	800f28c <_strtol_l.constprop.0+0xd8>
 800f280:	2322      	movs	r3, #34	; 0x22
 800f282:	6003      	str	r3, [r0, #0]
 800f284:	4646      	mov	r6, r8
 800f286:	b942      	cbnz	r2, 800f29a <_strtol_l.constprop.0+0xe6>
 800f288:	4630      	mov	r0, r6
 800f28a:	e79e      	b.n	800f1ca <_strtol_l.constprop.0+0x16>
 800f28c:	b107      	cbz	r7, 800f290 <_strtol_l.constprop.0+0xdc>
 800f28e:	4276      	negs	r6, r6
 800f290:	2a00      	cmp	r2, #0
 800f292:	d0f9      	beq.n	800f288 <_strtol_l.constprop.0+0xd4>
 800f294:	f1be 0f00 	cmp.w	lr, #0
 800f298:	d000      	beq.n	800f29c <_strtol_l.constprop.0+0xe8>
 800f29a:	1e69      	subs	r1, r5, #1
 800f29c:	6011      	str	r1, [r2, #0]
 800f29e:	e7f3      	b.n	800f288 <_strtol_l.constprop.0+0xd4>
 800f2a0:	2430      	movs	r4, #48	; 0x30
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d1b1      	bne.n	800f20a <_strtol_l.constprop.0+0x56>
 800f2a6:	2308      	movs	r3, #8
 800f2a8:	e7af      	b.n	800f20a <_strtol_l.constprop.0+0x56>
 800f2aa:	2c30      	cmp	r4, #48	; 0x30
 800f2ac:	d0a5      	beq.n	800f1fa <_strtol_l.constprop.0+0x46>
 800f2ae:	230a      	movs	r3, #10
 800f2b0:	e7ab      	b.n	800f20a <_strtol_l.constprop.0+0x56>
 800f2b2:	bf00      	nop
 800f2b4:	08010791 	.word	0x08010791

0800f2b8 <_strtol_r>:
 800f2b8:	f7ff bf7c 	b.w	800f1b4 <_strtol_l.constprop.0>

0800f2bc <__ssputs_r>:
 800f2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2c0:	688e      	ldr	r6, [r1, #8]
 800f2c2:	461f      	mov	r7, r3
 800f2c4:	42be      	cmp	r6, r7
 800f2c6:	680b      	ldr	r3, [r1, #0]
 800f2c8:	4682      	mov	sl, r0
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	4690      	mov	r8, r2
 800f2ce:	d82c      	bhi.n	800f32a <__ssputs_r+0x6e>
 800f2d0:	898a      	ldrh	r2, [r1, #12]
 800f2d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f2d6:	d026      	beq.n	800f326 <__ssputs_r+0x6a>
 800f2d8:	6965      	ldr	r5, [r4, #20]
 800f2da:	6909      	ldr	r1, [r1, #16]
 800f2dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2e0:	eba3 0901 	sub.w	r9, r3, r1
 800f2e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f2e8:	1c7b      	adds	r3, r7, #1
 800f2ea:	444b      	add	r3, r9
 800f2ec:	106d      	asrs	r5, r5, #1
 800f2ee:	429d      	cmp	r5, r3
 800f2f0:	bf38      	it	cc
 800f2f2:	461d      	movcc	r5, r3
 800f2f4:	0553      	lsls	r3, r2, #21
 800f2f6:	d527      	bpl.n	800f348 <__ssputs_r+0x8c>
 800f2f8:	4629      	mov	r1, r5
 800f2fa:	f7fc fd15 	bl	800bd28 <_malloc_r>
 800f2fe:	4606      	mov	r6, r0
 800f300:	b360      	cbz	r0, 800f35c <__ssputs_r+0xa0>
 800f302:	6921      	ldr	r1, [r4, #16]
 800f304:	464a      	mov	r2, r9
 800f306:	f000 fa0b 	bl	800f720 <memcpy>
 800f30a:	89a3      	ldrh	r3, [r4, #12]
 800f30c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f314:	81a3      	strh	r3, [r4, #12]
 800f316:	6126      	str	r6, [r4, #16]
 800f318:	6165      	str	r5, [r4, #20]
 800f31a:	444e      	add	r6, r9
 800f31c:	eba5 0509 	sub.w	r5, r5, r9
 800f320:	6026      	str	r6, [r4, #0]
 800f322:	60a5      	str	r5, [r4, #8]
 800f324:	463e      	mov	r6, r7
 800f326:	42be      	cmp	r6, r7
 800f328:	d900      	bls.n	800f32c <__ssputs_r+0x70>
 800f32a:	463e      	mov	r6, r7
 800f32c:	6820      	ldr	r0, [r4, #0]
 800f32e:	4632      	mov	r2, r6
 800f330:	4641      	mov	r1, r8
 800f332:	f000 f9c9 	bl	800f6c8 <memmove>
 800f336:	68a3      	ldr	r3, [r4, #8]
 800f338:	1b9b      	subs	r3, r3, r6
 800f33a:	60a3      	str	r3, [r4, #8]
 800f33c:	6823      	ldr	r3, [r4, #0]
 800f33e:	4433      	add	r3, r6
 800f340:	6023      	str	r3, [r4, #0]
 800f342:	2000      	movs	r0, #0
 800f344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f348:	462a      	mov	r2, r5
 800f34a:	f000 fd9e 	bl	800fe8a <_realloc_r>
 800f34e:	4606      	mov	r6, r0
 800f350:	2800      	cmp	r0, #0
 800f352:	d1e0      	bne.n	800f316 <__ssputs_r+0x5a>
 800f354:	6921      	ldr	r1, [r4, #16]
 800f356:	4650      	mov	r0, sl
 800f358:	f7fe fc20 	bl	800db9c <_free_r>
 800f35c:	230c      	movs	r3, #12
 800f35e:	f8ca 3000 	str.w	r3, [sl]
 800f362:	89a3      	ldrh	r3, [r4, #12]
 800f364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f368:	81a3      	strh	r3, [r4, #12]
 800f36a:	f04f 30ff 	mov.w	r0, #4294967295
 800f36e:	e7e9      	b.n	800f344 <__ssputs_r+0x88>

0800f370 <_svfiprintf_r>:
 800f370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f374:	4698      	mov	r8, r3
 800f376:	898b      	ldrh	r3, [r1, #12]
 800f378:	061b      	lsls	r3, r3, #24
 800f37a:	b09d      	sub	sp, #116	; 0x74
 800f37c:	4607      	mov	r7, r0
 800f37e:	460d      	mov	r5, r1
 800f380:	4614      	mov	r4, r2
 800f382:	d50e      	bpl.n	800f3a2 <_svfiprintf_r+0x32>
 800f384:	690b      	ldr	r3, [r1, #16]
 800f386:	b963      	cbnz	r3, 800f3a2 <_svfiprintf_r+0x32>
 800f388:	2140      	movs	r1, #64	; 0x40
 800f38a:	f7fc fccd 	bl	800bd28 <_malloc_r>
 800f38e:	6028      	str	r0, [r5, #0]
 800f390:	6128      	str	r0, [r5, #16]
 800f392:	b920      	cbnz	r0, 800f39e <_svfiprintf_r+0x2e>
 800f394:	230c      	movs	r3, #12
 800f396:	603b      	str	r3, [r7, #0]
 800f398:	f04f 30ff 	mov.w	r0, #4294967295
 800f39c:	e0d0      	b.n	800f540 <_svfiprintf_r+0x1d0>
 800f39e:	2340      	movs	r3, #64	; 0x40
 800f3a0:	616b      	str	r3, [r5, #20]
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f3a6:	2320      	movs	r3, #32
 800f3a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3b0:	2330      	movs	r3, #48	; 0x30
 800f3b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f558 <_svfiprintf_r+0x1e8>
 800f3b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3ba:	f04f 0901 	mov.w	r9, #1
 800f3be:	4623      	mov	r3, r4
 800f3c0:	469a      	mov	sl, r3
 800f3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3c6:	b10a      	cbz	r2, 800f3cc <_svfiprintf_r+0x5c>
 800f3c8:	2a25      	cmp	r2, #37	; 0x25
 800f3ca:	d1f9      	bne.n	800f3c0 <_svfiprintf_r+0x50>
 800f3cc:	ebba 0b04 	subs.w	fp, sl, r4
 800f3d0:	d00b      	beq.n	800f3ea <_svfiprintf_r+0x7a>
 800f3d2:	465b      	mov	r3, fp
 800f3d4:	4622      	mov	r2, r4
 800f3d6:	4629      	mov	r1, r5
 800f3d8:	4638      	mov	r0, r7
 800f3da:	f7ff ff6f 	bl	800f2bc <__ssputs_r>
 800f3de:	3001      	adds	r0, #1
 800f3e0:	f000 80a9 	beq.w	800f536 <_svfiprintf_r+0x1c6>
 800f3e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3e6:	445a      	add	r2, fp
 800f3e8:	9209      	str	r2, [sp, #36]	; 0x24
 800f3ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f000 80a1 	beq.w	800f536 <_svfiprintf_r+0x1c6>
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f3fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3fe:	f10a 0a01 	add.w	sl, sl, #1
 800f402:	9304      	str	r3, [sp, #16]
 800f404:	9307      	str	r3, [sp, #28]
 800f406:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f40a:	931a      	str	r3, [sp, #104]	; 0x68
 800f40c:	4654      	mov	r4, sl
 800f40e:	2205      	movs	r2, #5
 800f410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f414:	4850      	ldr	r0, [pc, #320]	; (800f558 <_svfiprintf_r+0x1e8>)
 800f416:	f7f0 fedb 	bl	80001d0 <memchr>
 800f41a:	9a04      	ldr	r2, [sp, #16]
 800f41c:	b9d8      	cbnz	r0, 800f456 <_svfiprintf_r+0xe6>
 800f41e:	06d0      	lsls	r0, r2, #27
 800f420:	bf44      	itt	mi
 800f422:	2320      	movmi	r3, #32
 800f424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f428:	0711      	lsls	r1, r2, #28
 800f42a:	bf44      	itt	mi
 800f42c:	232b      	movmi	r3, #43	; 0x2b
 800f42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f432:	f89a 3000 	ldrb.w	r3, [sl]
 800f436:	2b2a      	cmp	r3, #42	; 0x2a
 800f438:	d015      	beq.n	800f466 <_svfiprintf_r+0xf6>
 800f43a:	9a07      	ldr	r2, [sp, #28]
 800f43c:	4654      	mov	r4, sl
 800f43e:	2000      	movs	r0, #0
 800f440:	f04f 0c0a 	mov.w	ip, #10
 800f444:	4621      	mov	r1, r4
 800f446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f44a:	3b30      	subs	r3, #48	; 0x30
 800f44c:	2b09      	cmp	r3, #9
 800f44e:	d94d      	bls.n	800f4ec <_svfiprintf_r+0x17c>
 800f450:	b1b0      	cbz	r0, 800f480 <_svfiprintf_r+0x110>
 800f452:	9207      	str	r2, [sp, #28]
 800f454:	e014      	b.n	800f480 <_svfiprintf_r+0x110>
 800f456:	eba0 0308 	sub.w	r3, r0, r8
 800f45a:	fa09 f303 	lsl.w	r3, r9, r3
 800f45e:	4313      	orrs	r3, r2
 800f460:	9304      	str	r3, [sp, #16]
 800f462:	46a2      	mov	sl, r4
 800f464:	e7d2      	b.n	800f40c <_svfiprintf_r+0x9c>
 800f466:	9b03      	ldr	r3, [sp, #12]
 800f468:	1d19      	adds	r1, r3, #4
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	9103      	str	r1, [sp, #12]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	bfbb      	ittet	lt
 800f472:	425b      	neglt	r3, r3
 800f474:	f042 0202 	orrlt.w	r2, r2, #2
 800f478:	9307      	strge	r3, [sp, #28]
 800f47a:	9307      	strlt	r3, [sp, #28]
 800f47c:	bfb8      	it	lt
 800f47e:	9204      	strlt	r2, [sp, #16]
 800f480:	7823      	ldrb	r3, [r4, #0]
 800f482:	2b2e      	cmp	r3, #46	; 0x2e
 800f484:	d10c      	bne.n	800f4a0 <_svfiprintf_r+0x130>
 800f486:	7863      	ldrb	r3, [r4, #1]
 800f488:	2b2a      	cmp	r3, #42	; 0x2a
 800f48a:	d134      	bne.n	800f4f6 <_svfiprintf_r+0x186>
 800f48c:	9b03      	ldr	r3, [sp, #12]
 800f48e:	1d1a      	adds	r2, r3, #4
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	9203      	str	r2, [sp, #12]
 800f494:	2b00      	cmp	r3, #0
 800f496:	bfb8      	it	lt
 800f498:	f04f 33ff 	movlt.w	r3, #4294967295
 800f49c:	3402      	adds	r4, #2
 800f49e:	9305      	str	r3, [sp, #20]
 800f4a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f568 <_svfiprintf_r+0x1f8>
 800f4a4:	7821      	ldrb	r1, [r4, #0]
 800f4a6:	2203      	movs	r2, #3
 800f4a8:	4650      	mov	r0, sl
 800f4aa:	f7f0 fe91 	bl	80001d0 <memchr>
 800f4ae:	b138      	cbz	r0, 800f4c0 <_svfiprintf_r+0x150>
 800f4b0:	9b04      	ldr	r3, [sp, #16]
 800f4b2:	eba0 000a 	sub.w	r0, r0, sl
 800f4b6:	2240      	movs	r2, #64	; 0x40
 800f4b8:	4082      	lsls	r2, r0
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	3401      	adds	r4, #1
 800f4be:	9304      	str	r3, [sp, #16]
 800f4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4c4:	4825      	ldr	r0, [pc, #148]	; (800f55c <_svfiprintf_r+0x1ec>)
 800f4c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4ca:	2206      	movs	r2, #6
 800f4cc:	f7f0 fe80 	bl	80001d0 <memchr>
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d038      	beq.n	800f546 <_svfiprintf_r+0x1d6>
 800f4d4:	4b22      	ldr	r3, [pc, #136]	; (800f560 <_svfiprintf_r+0x1f0>)
 800f4d6:	bb1b      	cbnz	r3, 800f520 <_svfiprintf_r+0x1b0>
 800f4d8:	9b03      	ldr	r3, [sp, #12]
 800f4da:	3307      	adds	r3, #7
 800f4dc:	f023 0307 	bic.w	r3, r3, #7
 800f4e0:	3308      	adds	r3, #8
 800f4e2:	9303      	str	r3, [sp, #12]
 800f4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4e6:	4433      	add	r3, r6
 800f4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f4ea:	e768      	b.n	800f3be <_svfiprintf_r+0x4e>
 800f4ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4f0:	460c      	mov	r4, r1
 800f4f2:	2001      	movs	r0, #1
 800f4f4:	e7a6      	b.n	800f444 <_svfiprintf_r+0xd4>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	3401      	adds	r4, #1
 800f4fa:	9305      	str	r3, [sp, #20]
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	f04f 0c0a 	mov.w	ip, #10
 800f502:	4620      	mov	r0, r4
 800f504:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f508:	3a30      	subs	r2, #48	; 0x30
 800f50a:	2a09      	cmp	r2, #9
 800f50c:	d903      	bls.n	800f516 <_svfiprintf_r+0x1a6>
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d0c6      	beq.n	800f4a0 <_svfiprintf_r+0x130>
 800f512:	9105      	str	r1, [sp, #20]
 800f514:	e7c4      	b.n	800f4a0 <_svfiprintf_r+0x130>
 800f516:	fb0c 2101 	mla	r1, ip, r1, r2
 800f51a:	4604      	mov	r4, r0
 800f51c:	2301      	movs	r3, #1
 800f51e:	e7f0      	b.n	800f502 <_svfiprintf_r+0x192>
 800f520:	ab03      	add	r3, sp, #12
 800f522:	9300      	str	r3, [sp, #0]
 800f524:	462a      	mov	r2, r5
 800f526:	4b0f      	ldr	r3, [pc, #60]	; (800f564 <_svfiprintf_r+0x1f4>)
 800f528:	a904      	add	r1, sp, #16
 800f52a:	4638      	mov	r0, r7
 800f52c:	f7fc fd28 	bl	800bf80 <_printf_float>
 800f530:	1c42      	adds	r2, r0, #1
 800f532:	4606      	mov	r6, r0
 800f534:	d1d6      	bne.n	800f4e4 <_svfiprintf_r+0x174>
 800f536:	89ab      	ldrh	r3, [r5, #12]
 800f538:	065b      	lsls	r3, r3, #25
 800f53a:	f53f af2d 	bmi.w	800f398 <_svfiprintf_r+0x28>
 800f53e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f540:	b01d      	add	sp, #116	; 0x74
 800f542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f546:	ab03      	add	r3, sp, #12
 800f548:	9300      	str	r3, [sp, #0]
 800f54a:	462a      	mov	r2, r5
 800f54c:	4b05      	ldr	r3, [pc, #20]	; (800f564 <_svfiprintf_r+0x1f4>)
 800f54e:	a904      	add	r1, sp, #16
 800f550:	4638      	mov	r0, r7
 800f552:	f7fc ffb9 	bl	800c4c8 <_printf_i>
 800f556:	e7eb      	b.n	800f530 <_svfiprintf_r+0x1c0>
 800f558:	08010891 	.word	0x08010891
 800f55c:	0801089b 	.word	0x0801089b
 800f560:	0800bf81 	.word	0x0800bf81
 800f564:	0800f2bd 	.word	0x0800f2bd
 800f568:	08010897 	.word	0x08010897

0800f56c <__sflush_r>:
 800f56c:	898a      	ldrh	r2, [r1, #12]
 800f56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f572:	4605      	mov	r5, r0
 800f574:	0710      	lsls	r0, r2, #28
 800f576:	460c      	mov	r4, r1
 800f578:	d458      	bmi.n	800f62c <__sflush_r+0xc0>
 800f57a:	684b      	ldr	r3, [r1, #4]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	dc05      	bgt.n	800f58c <__sflush_r+0x20>
 800f580:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f582:	2b00      	cmp	r3, #0
 800f584:	dc02      	bgt.n	800f58c <__sflush_r+0x20>
 800f586:	2000      	movs	r0, #0
 800f588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f58c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f58e:	2e00      	cmp	r6, #0
 800f590:	d0f9      	beq.n	800f586 <__sflush_r+0x1a>
 800f592:	2300      	movs	r3, #0
 800f594:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f598:	682f      	ldr	r7, [r5, #0]
 800f59a:	6a21      	ldr	r1, [r4, #32]
 800f59c:	602b      	str	r3, [r5, #0]
 800f59e:	d032      	beq.n	800f606 <__sflush_r+0x9a>
 800f5a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f5a2:	89a3      	ldrh	r3, [r4, #12]
 800f5a4:	075a      	lsls	r2, r3, #29
 800f5a6:	d505      	bpl.n	800f5b4 <__sflush_r+0x48>
 800f5a8:	6863      	ldr	r3, [r4, #4]
 800f5aa:	1ac0      	subs	r0, r0, r3
 800f5ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f5ae:	b10b      	cbz	r3, 800f5b4 <__sflush_r+0x48>
 800f5b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5b2:	1ac0      	subs	r0, r0, r3
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5ba:	6a21      	ldr	r1, [r4, #32]
 800f5bc:	4628      	mov	r0, r5
 800f5be:	47b0      	blx	r6
 800f5c0:	1c43      	adds	r3, r0, #1
 800f5c2:	89a3      	ldrh	r3, [r4, #12]
 800f5c4:	d106      	bne.n	800f5d4 <__sflush_r+0x68>
 800f5c6:	6829      	ldr	r1, [r5, #0]
 800f5c8:	291d      	cmp	r1, #29
 800f5ca:	d82b      	bhi.n	800f624 <__sflush_r+0xb8>
 800f5cc:	4a29      	ldr	r2, [pc, #164]	; (800f674 <__sflush_r+0x108>)
 800f5ce:	410a      	asrs	r2, r1
 800f5d0:	07d6      	lsls	r6, r2, #31
 800f5d2:	d427      	bmi.n	800f624 <__sflush_r+0xb8>
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	6062      	str	r2, [r4, #4]
 800f5d8:	04d9      	lsls	r1, r3, #19
 800f5da:	6922      	ldr	r2, [r4, #16]
 800f5dc:	6022      	str	r2, [r4, #0]
 800f5de:	d504      	bpl.n	800f5ea <__sflush_r+0x7e>
 800f5e0:	1c42      	adds	r2, r0, #1
 800f5e2:	d101      	bne.n	800f5e8 <__sflush_r+0x7c>
 800f5e4:	682b      	ldr	r3, [r5, #0]
 800f5e6:	b903      	cbnz	r3, 800f5ea <__sflush_r+0x7e>
 800f5e8:	6560      	str	r0, [r4, #84]	; 0x54
 800f5ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5ec:	602f      	str	r7, [r5, #0]
 800f5ee:	2900      	cmp	r1, #0
 800f5f0:	d0c9      	beq.n	800f586 <__sflush_r+0x1a>
 800f5f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5f6:	4299      	cmp	r1, r3
 800f5f8:	d002      	beq.n	800f600 <__sflush_r+0x94>
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	f7fe face 	bl	800db9c <_free_r>
 800f600:	2000      	movs	r0, #0
 800f602:	6360      	str	r0, [r4, #52]	; 0x34
 800f604:	e7c0      	b.n	800f588 <__sflush_r+0x1c>
 800f606:	2301      	movs	r3, #1
 800f608:	4628      	mov	r0, r5
 800f60a:	47b0      	blx	r6
 800f60c:	1c41      	adds	r1, r0, #1
 800f60e:	d1c8      	bne.n	800f5a2 <__sflush_r+0x36>
 800f610:	682b      	ldr	r3, [r5, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d0c5      	beq.n	800f5a2 <__sflush_r+0x36>
 800f616:	2b1d      	cmp	r3, #29
 800f618:	d001      	beq.n	800f61e <__sflush_r+0xb2>
 800f61a:	2b16      	cmp	r3, #22
 800f61c:	d101      	bne.n	800f622 <__sflush_r+0xb6>
 800f61e:	602f      	str	r7, [r5, #0]
 800f620:	e7b1      	b.n	800f586 <__sflush_r+0x1a>
 800f622:	89a3      	ldrh	r3, [r4, #12]
 800f624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f628:	81a3      	strh	r3, [r4, #12]
 800f62a:	e7ad      	b.n	800f588 <__sflush_r+0x1c>
 800f62c:	690f      	ldr	r7, [r1, #16]
 800f62e:	2f00      	cmp	r7, #0
 800f630:	d0a9      	beq.n	800f586 <__sflush_r+0x1a>
 800f632:	0793      	lsls	r3, r2, #30
 800f634:	680e      	ldr	r6, [r1, #0]
 800f636:	bf08      	it	eq
 800f638:	694b      	ldreq	r3, [r1, #20]
 800f63a:	600f      	str	r7, [r1, #0]
 800f63c:	bf18      	it	ne
 800f63e:	2300      	movne	r3, #0
 800f640:	eba6 0807 	sub.w	r8, r6, r7
 800f644:	608b      	str	r3, [r1, #8]
 800f646:	f1b8 0f00 	cmp.w	r8, #0
 800f64a:	dd9c      	ble.n	800f586 <__sflush_r+0x1a>
 800f64c:	6a21      	ldr	r1, [r4, #32]
 800f64e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f650:	4643      	mov	r3, r8
 800f652:	463a      	mov	r2, r7
 800f654:	4628      	mov	r0, r5
 800f656:	47b0      	blx	r6
 800f658:	2800      	cmp	r0, #0
 800f65a:	dc06      	bgt.n	800f66a <__sflush_r+0xfe>
 800f65c:	89a3      	ldrh	r3, [r4, #12]
 800f65e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f662:	81a3      	strh	r3, [r4, #12]
 800f664:	f04f 30ff 	mov.w	r0, #4294967295
 800f668:	e78e      	b.n	800f588 <__sflush_r+0x1c>
 800f66a:	4407      	add	r7, r0
 800f66c:	eba8 0800 	sub.w	r8, r8, r0
 800f670:	e7e9      	b.n	800f646 <__sflush_r+0xda>
 800f672:	bf00      	nop
 800f674:	dfbffffe 	.word	0xdfbffffe

0800f678 <_fflush_r>:
 800f678:	b538      	push	{r3, r4, r5, lr}
 800f67a:	690b      	ldr	r3, [r1, #16]
 800f67c:	4605      	mov	r5, r0
 800f67e:	460c      	mov	r4, r1
 800f680:	b913      	cbnz	r3, 800f688 <_fflush_r+0x10>
 800f682:	2500      	movs	r5, #0
 800f684:	4628      	mov	r0, r5
 800f686:	bd38      	pop	{r3, r4, r5, pc}
 800f688:	b118      	cbz	r0, 800f692 <_fflush_r+0x1a>
 800f68a:	6a03      	ldr	r3, [r0, #32]
 800f68c:	b90b      	cbnz	r3, 800f692 <_fflush_r+0x1a>
 800f68e:	f7fd fad9 	bl	800cc44 <__sinit>
 800f692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d0f3      	beq.n	800f682 <_fflush_r+0xa>
 800f69a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f69c:	07d0      	lsls	r0, r2, #31
 800f69e:	d404      	bmi.n	800f6aa <_fflush_r+0x32>
 800f6a0:	0599      	lsls	r1, r3, #22
 800f6a2:	d402      	bmi.n	800f6aa <_fflush_r+0x32>
 800f6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6a6:	f7fd fbf4 	bl	800ce92 <__retarget_lock_acquire_recursive>
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	4621      	mov	r1, r4
 800f6ae:	f7ff ff5d 	bl	800f56c <__sflush_r>
 800f6b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6b4:	07da      	lsls	r2, r3, #31
 800f6b6:	4605      	mov	r5, r0
 800f6b8:	d4e4      	bmi.n	800f684 <_fflush_r+0xc>
 800f6ba:	89a3      	ldrh	r3, [r4, #12]
 800f6bc:	059b      	lsls	r3, r3, #22
 800f6be:	d4e1      	bmi.n	800f684 <_fflush_r+0xc>
 800f6c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6c2:	f7fd fbe7 	bl	800ce94 <__retarget_lock_release_recursive>
 800f6c6:	e7dd      	b.n	800f684 <_fflush_r+0xc>

0800f6c8 <memmove>:
 800f6c8:	4288      	cmp	r0, r1
 800f6ca:	b510      	push	{r4, lr}
 800f6cc:	eb01 0402 	add.w	r4, r1, r2
 800f6d0:	d902      	bls.n	800f6d8 <memmove+0x10>
 800f6d2:	4284      	cmp	r4, r0
 800f6d4:	4623      	mov	r3, r4
 800f6d6:	d807      	bhi.n	800f6e8 <memmove+0x20>
 800f6d8:	1e43      	subs	r3, r0, #1
 800f6da:	42a1      	cmp	r1, r4
 800f6dc:	d008      	beq.n	800f6f0 <memmove+0x28>
 800f6de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6e6:	e7f8      	b.n	800f6da <memmove+0x12>
 800f6e8:	4402      	add	r2, r0
 800f6ea:	4601      	mov	r1, r0
 800f6ec:	428a      	cmp	r2, r1
 800f6ee:	d100      	bne.n	800f6f2 <memmove+0x2a>
 800f6f0:	bd10      	pop	{r4, pc}
 800f6f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6fa:	e7f7      	b.n	800f6ec <memmove+0x24>

0800f6fc <strncmp>:
 800f6fc:	b510      	push	{r4, lr}
 800f6fe:	b16a      	cbz	r2, 800f71c <strncmp+0x20>
 800f700:	3901      	subs	r1, #1
 800f702:	1884      	adds	r4, r0, r2
 800f704:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f708:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d103      	bne.n	800f718 <strncmp+0x1c>
 800f710:	42a0      	cmp	r0, r4
 800f712:	d001      	beq.n	800f718 <strncmp+0x1c>
 800f714:	2a00      	cmp	r2, #0
 800f716:	d1f5      	bne.n	800f704 <strncmp+0x8>
 800f718:	1ad0      	subs	r0, r2, r3
 800f71a:	bd10      	pop	{r4, pc}
 800f71c:	4610      	mov	r0, r2
 800f71e:	e7fc      	b.n	800f71a <strncmp+0x1e>

0800f720 <memcpy>:
 800f720:	440a      	add	r2, r1
 800f722:	4291      	cmp	r1, r2
 800f724:	f100 33ff 	add.w	r3, r0, #4294967295
 800f728:	d100      	bne.n	800f72c <memcpy+0xc>
 800f72a:	4770      	bx	lr
 800f72c:	b510      	push	{r4, lr}
 800f72e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f732:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f736:	4291      	cmp	r1, r2
 800f738:	d1f9      	bne.n	800f72e <memcpy+0xe>
 800f73a:	bd10      	pop	{r4, pc}
 800f73c:	0000      	movs	r0, r0
	...

0800f740 <nan>:
 800f740:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f748 <nan+0x8>
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop
 800f748:	00000000 	.word	0x00000000
 800f74c:	7ff80000 	.word	0x7ff80000

0800f750 <__assert_func>:
 800f750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f752:	4614      	mov	r4, r2
 800f754:	461a      	mov	r2, r3
 800f756:	4b09      	ldr	r3, [pc, #36]	; (800f77c <__assert_func+0x2c>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4605      	mov	r5, r0
 800f75c:	68d8      	ldr	r0, [r3, #12]
 800f75e:	b14c      	cbz	r4, 800f774 <__assert_func+0x24>
 800f760:	4b07      	ldr	r3, [pc, #28]	; (800f780 <__assert_func+0x30>)
 800f762:	9100      	str	r1, [sp, #0]
 800f764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f768:	4906      	ldr	r1, [pc, #24]	; (800f784 <__assert_func+0x34>)
 800f76a:	462b      	mov	r3, r5
 800f76c:	f000 fbca 	bl	800ff04 <fiprintf>
 800f770:	f000 fbda 	bl	800ff28 <abort>
 800f774:	4b04      	ldr	r3, [pc, #16]	; (800f788 <__assert_func+0x38>)
 800f776:	461c      	mov	r4, r3
 800f778:	e7f3      	b.n	800f762 <__assert_func+0x12>
 800f77a:	bf00      	nop
 800f77c:	20000084 	.word	0x20000084
 800f780:	080108aa 	.word	0x080108aa
 800f784:	080108b7 	.word	0x080108b7
 800f788:	080108e5 	.word	0x080108e5

0800f78c <_calloc_r>:
 800f78c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f78e:	fba1 2402 	umull	r2, r4, r1, r2
 800f792:	b94c      	cbnz	r4, 800f7a8 <_calloc_r+0x1c>
 800f794:	4611      	mov	r1, r2
 800f796:	9201      	str	r2, [sp, #4]
 800f798:	f7fc fac6 	bl	800bd28 <_malloc_r>
 800f79c:	9a01      	ldr	r2, [sp, #4]
 800f79e:	4605      	mov	r5, r0
 800f7a0:	b930      	cbnz	r0, 800f7b0 <_calloc_r+0x24>
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	b003      	add	sp, #12
 800f7a6:	bd30      	pop	{r4, r5, pc}
 800f7a8:	220c      	movs	r2, #12
 800f7aa:	6002      	str	r2, [r0, #0]
 800f7ac:	2500      	movs	r5, #0
 800f7ae:	e7f8      	b.n	800f7a2 <_calloc_r+0x16>
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	f7fd fae0 	bl	800cd76 <memset>
 800f7b6:	e7f4      	b.n	800f7a2 <_calloc_r+0x16>

0800f7b8 <rshift>:
 800f7b8:	6903      	ldr	r3, [r0, #16]
 800f7ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f7be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f7c6:	f100 0414 	add.w	r4, r0, #20
 800f7ca:	dd45      	ble.n	800f858 <rshift+0xa0>
 800f7cc:	f011 011f 	ands.w	r1, r1, #31
 800f7d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f7d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f7d8:	d10c      	bne.n	800f7f4 <rshift+0x3c>
 800f7da:	f100 0710 	add.w	r7, r0, #16
 800f7de:	4629      	mov	r1, r5
 800f7e0:	42b1      	cmp	r1, r6
 800f7e2:	d334      	bcc.n	800f84e <rshift+0x96>
 800f7e4:	1a9b      	subs	r3, r3, r2
 800f7e6:	009b      	lsls	r3, r3, #2
 800f7e8:	1eea      	subs	r2, r5, #3
 800f7ea:	4296      	cmp	r6, r2
 800f7ec:	bf38      	it	cc
 800f7ee:	2300      	movcc	r3, #0
 800f7f0:	4423      	add	r3, r4
 800f7f2:	e015      	b.n	800f820 <rshift+0x68>
 800f7f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f7f8:	f1c1 0820 	rsb	r8, r1, #32
 800f7fc:	40cf      	lsrs	r7, r1
 800f7fe:	f105 0e04 	add.w	lr, r5, #4
 800f802:	46a1      	mov	r9, r4
 800f804:	4576      	cmp	r6, lr
 800f806:	46f4      	mov	ip, lr
 800f808:	d815      	bhi.n	800f836 <rshift+0x7e>
 800f80a:	1a9a      	subs	r2, r3, r2
 800f80c:	0092      	lsls	r2, r2, #2
 800f80e:	3a04      	subs	r2, #4
 800f810:	3501      	adds	r5, #1
 800f812:	42ae      	cmp	r6, r5
 800f814:	bf38      	it	cc
 800f816:	2200      	movcc	r2, #0
 800f818:	18a3      	adds	r3, r4, r2
 800f81a:	50a7      	str	r7, [r4, r2]
 800f81c:	b107      	cbz	r7, 800f820 <rshift+0x68>
 800f81e:	3304      	adds	r3, #4
 800f820:	1b1a      	subs	r2, r3, r4
 800f822:	42a3      	cmp	r3, r4
 800f824:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f828:	bf08      	it	eq
 800f82a:	2300      	moveq	r3, #0
 800f82c:	6102      	str	r2, [r0, #16]
 800f82e:	bf08      	it	eq
 800f830:	6143      	streq	r3, [r0, #20]
 800f832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f836:	f8dc c000 	ldr.w	ip, [ip]
 800f83a:	fa0c fc08 	lsl.w	ip, ip, r8
 800f83e:	ea4c 0707 	orr.w	r7, ip, r7
 800f842:	f849 7b04 	str.w	r7, [r9], #4
 800f846:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f84a:	40cf      	lsrs	r7, r1
 800f84c:	e7da      	b.n	800f804 <rshift+0x4c>
 800f84e:	f851 cb04 	ldr.w	ip, [r1], #4
 800f852:	f847 cf04 	str.w	ip, [r7, #4]!
 800f856:	e7c3      	b.n	800f7e0 <rshift+0x28>
 800f858:	4623      	mov	r3, r4
 800f85a:	e7e1      	b.n	800f820 <rshift+0x68>

0800f85c <__hexdig_fun>:
 800f85c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f860:	2b09      	cmp	r3, #9
 800f862:	d802      	bhi.n	800f86a <__hexdig_fun+0xe>
 800f864:	3820      	subs	r0, #32
 800f866:	b2c0      	uxtb	r0, r0
 800f868:	4770      	bx	lr
 800f86a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f86e:	2b05      	cmp	r3, #5
 800f870:	d801      	bhi.n	800f876 <__hexdig_fun+0x1a>
 800f872:	3847      	subs	r0, #71	; 0x47
 800f874:	e7f7      	b.n	800f866 <__hexdig_fun+0xa>
 800f876:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f87a:	2b05      	cmp	r3, #5
 800f87c:	d801      	bhi.n	800f882 <__hexdig_fun+0x26>
 800f87e:	3827      	subs	r0, #39	; 0x27
 800f880:	e7f1      	b.n	800f866 <__hexdig_fun+0xa>
 800f882:	2000      	movs	r0, #0
 800f884:	4770      	bx	lr
	...

0800f888 <__gethex>:
 800f888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88c:	4617      	mov	r7, r2
 800f88e:	680a      	ldr	r2, [r1, #0]
 800f890:	b085      	sub	sp, #20
 800f892:	f102 0b02 	add.w	fp, r2, #2
 800f896:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f89a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f89e:	4681      	mov	r9, r0
 800f8a0:	468a      	mov	sl, r1
 800f8a2:	9302      	str	r3, [sp, #8]
 800f8a4:	32fe      	adds	r2, #254	; 0xfe
 800f8a6:	eb02 030b 	add.w	r3, r2, fp
 800f8aa:	46d8      	mov	r8, fp
 800f8ac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f8b0:	9301      	str	r3, [sp, #4]
 800f8b2:	2830      	cmp	r0, #48	; 0x30
 800f8b4:	d0f7      	beq.n	800f8a6 <__gethex+0x1e>
 800f8b6:	f7ff ffd1 	bl	800f85c <__hexdig_fun>
 800f8ba:	4604      	mov	r4, r0
 800f8bc:	2800      	cmp	r0, #0
 800f8be:	d138      	bne.n	800f932 <__gethex+0xaa>
 800f8c0:	49a7      	ldr	r1, [pc, #668]	; (800fb60 <__gethex+0x2d8>)
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	4640      	mov	r0, r8
 800f8c6:	f7ff ff19 	bl	800f6fc <strncmp>
 800f8ca:	4606      	mov	r6, r0
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d169      	bne.n	800f9a4 <__gethex+0x11c>
 800f8d0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f8d4:	465d      	mov	r5, fp
 800f8d6:	f7ff ffc1 	bl	800f85c <__hexdig_fun>
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d064      	beq.n	800f9a8 <__gethex+0x120>
 800f8de:	465a      	mov	r2, fp
 800f8e0:	7810      	ldrb	r0, [r2, #0]
 800f8e2:	2830      	cmp	r0, #48	; 0x30
 800f8e4:	4690      	mov	r8, r2
 800f8e6:	f102 0201 	add.w	r2, r2, #1
 800f8ea:	d0f9      	beq.n	800f8e0 <__gethex+0x58>
 800f8ec:	f7ff ffb6 	bl	800f85c <__hexdig_fun>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	fab0 f480 	clz	r4, r0
 800f8f6:	0964      	lsrs	r4, r4, #5
 800f8f8:	465e      	mov	r6, fp
 800f8fa:	9301      	str	r3, [sp, #4]
 800f8fc:	4642      	mov	r2, r8
 800f8fe:	4615      	mov	r5, r2
 800f900:	3201      	adds	r2, #1
 800f902:	7828      	ldrb	r0, [r5, #0]
 800f904:	f7ff ffaa 	bl	800f85c <__hexdig_fun>
 800f908:	2800      	cmp	r0, #0
 800f90a:	d1f8      	bne.n	800f8fe <__gethex+0x76>
 800f90c:	4994      	ldr	r1, [pc, #592]	; (800fb60 <__gethex+0x2d8>)
 800f90e:	2201      	movs	r2, #1
 800f910:	4628      	mov	r0, r5
 800f912:	f7ff fef3 	bl	800f6fc <strncmp>
 800f916:	b978      	cbnz	r0, 800f938 <__gethex+0xb0>
 800f918:	b946      	cbnz	r6, 800f92c <__gethex+0xa4>
 800f91a:	1c6e      	adds	r6, r5, #1
 800f91c:	4632      	mov	r2, r6
 800f91e:	4615      	mov	r5, r2
 800f920:	3201      	adds	r2, #1
 800f922:	7828      	ldrb	r0, [r5, #0]
 800f924:	f7ff ff9a 	bl	800f85c <__hexdig_fun>
 800f928:	2800      	cmp	r0, #0
 800f92a:	d1f8      	bne.n	800f91e <__gethex+0x96>
 800f92c:	1b73      	subs	r3, r6, r5
 800f92e:	009e      	lsls	r6, r3, #2
 800f930:	e004      	b.n	800f93c <__gethex+0xb4>
 800f932:	2400      	movs	r4, #0
 800f934:	4626      	mov	r6, r4
 800f936:	e7e1      	b.n	800f8fc <__gethex+0x74>
 800f938:	2e00      	cmp	r6, #0
 800f93a:	d1f7      	bne.n	800f92c <__gethex+0xa4>
 800f93c:	782b      	ldrb	r3, [r5, #0]
 800f93e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f942:	2b50      	cmp	r3, #80	; 0x50
 800f944:	d13d      	bne.n	800f9c2 <__gethex+0x13a>
 800f946:	786b      	ldrb	r3, [r5, #1]
 800f948:	2b2b      	cmp	r3, #43	; 0x2b
 800f94a:	d02f      	beq.n	800f9ac <__gethex+0x124>
 800f94c:	2b2d      	cmp	r3, #45	; 0x2d
 800f94e:	d031      	beq.n	800f9b4 <__gethex+0x12c>
 800f950:	1c69      	adds	r1, r5, #1
 800f952:	f04f 0b00 	mov.w	fp, #0
 800f956:	7808      	ldrb	r0, [r1, #0]
 800f958:	f7ff ff80 	bl	800f85c <__hexdig_fun>
 800f95c:	1e42      	subs	r2, r0, #1
 800f95e:	b2d2      	uxtb	r2, r2
 800f960:	2a18      	cmp	r2, #24
 800f962:	d82e      	bhi.n	800f9c2 <__gethex+0x13a>
 800f964:	f1a0 0210 	sub.w	r2, r0, #16
 800f968:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f96c:	f7ff ff76 	bl	800f85c <__hexdig_fun>
 800f970:	f100 3cff 	add.w	ip, r0, #4294967295
 800f974:	fa5f fc8c 	uxtb.w	ip, ip
 800f978:	f1bc 0f18 	cmp.w	ip, #24
 800f97c:	d91d      	bls.n	800f9ba <__gethex+0x132>
 800f97e:	f1bb 0f00 	cmp.w	fp, #0
 800f982:	d000      	beq.n	800f986 <__gethex+0xfe>
 800f984:	4252      	negs	r2, r2
 800f986:	4416      	add	r6, r2
 800f988:	f8ca 1000 	str.w	r1, [sl]
 800f98c:	b1dc      	cbz	r4, 800f9c6 <__gethex+0x13e>
 800f98e:	9b01      	ldr	r3, [sp, #4]
 800f990:	2b00      	cmp	r3, #0
 800f992:	bf14      	ite	ne
 800f994:	f04f 0800 	movne.w	r8, #0
 800f998:	f04f 0806 	moveq.w	r8, #6
 800f99c:	4640      	mov	r0, r8
 800f99e:	b005      	add	sp, #20
 800f9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a4:	4645      	mov	r5, r8
 800f9a6:	4626      	mov	r6, r4
 800f9a8:	2401      	movs	r4, #1
 800f9aa:	e7c7      	b.n	800f93c <__gethex+0xb4>
 800f9ac:	f04f 0b00 	mov.w	fp, #0
 800f9b0:	1ca9      	adds	r1, r5, #2
 800f9b2:	e7d0      	b.n	800f956 <__gethex+0xce>
 800f9b4:	f04f 0b01 	mov.w	fp, #1
 800f9b8:	e7fa      	b.n	800f9b0 <__gethex+0x128>
 800f9ba:	230a      	movs	r3, #10
 800f9bc:	fb03 0002 	mla	r0, r3, r2, r0
 800f9c0:	e7d0      	b.n	800f964 <__gethex+0xdc>
 800f9c2:	4629      	mov	r1, r5
 800f9c4:	e7e0      	b.n	800f988 <__gethex+0x100>
 800f9c6:	eba5 0308 	sub.w	r3, r5, r8
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	4621      	mov	r1, r4
 800f9ce:	2b07      	cmp	r3, #7
 800f9d0:	dc0a      	bgt.n	800f9e8 <__gethex+0x160>
 800f9d2:	4648      	mov	r0, r9
 800f9d4:	f7fe f92e 	bl	800dc34 <_Balloc>
 800f9d8:	4604      	mov	r4, r0
 800f9da:	b940      	cbnz	r0, 800f9ee <__gethex+0x166>
 800f9dc:	4b61      	ldr	r3, [pc, #388]	; (800fb64 <__gethex+0x2dc>)
 800f9de:	4602      	mov	r2, r0
 800f9e0:	21e4      	movs	r1, #228	; 0xe4
 800f9e2:	4861      	ldr	r0, [pc, #388]	; (800fb68 <__gethex+0x2e0>)
 800f9e4:	f7ff feb4 	bl	800f750 <__assert_func>
 800f9e8:	3101      	adds	r1, #1
 800f9ea:	105b      	asrs	r3, r3, #1
 800f9ec:	e7ef      	b.n	800f9ce <__gethex+0x146>
 800f9ee:	f100 0a14 	add.w	sl, r0, #20
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	495a      	ldr	r1, [pc, #360]	; (800fb60 <__gethex+0x2d8>)
 800f9f6:	f8cd a004 	str.w	sl, [sp, #4]
 800f9fa:	469b      	mov	fp, r3
 800f9fc:	45a8      	cmp	r8, r5
 800f9fe:	d342      	bcc.n	800fa86 <__gethex+0x1fe>
 800fa00:	9801      	ldr	r0, [sp, #4]
 800fa02:	f840 bb04 	str.w	fp, [r0], #4
 800fa06:	eba0 000a 	sub.w	r0, r0, sl
 800fa0a:	1080      	asrs	r0, r0, #2
 800fa0c:	6120      	str	r0, [r4, #16]
 800fa0e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800fa12:	4658      	mov	r0, fp
 800fa14:	f7fe fa00 	bl	800de18 <__hi0bits>
 800fa18:	683d      	ldr	r5, [r7, #0]
 800fa1a:	eba8 0000 	sub.w	r0, r8, r0
 800fa1e:	42a8      	cmp	r0, r5
 800fa20:	dd59      	ble.n	800fad6 <__gethex+0x24e>
 800fa22:	eba0 0805 	sub.w	r8, r0, r5
 800fa26:	4641      	mov	r1, r8
 800fa28:	4620      	mov	r0, r4
 800fa2a:	f7fe fd8f 	bl	800e54c <__any_on>
 800fa2e:	4683      	mov	fp, r0
 800fa30:	b1b8      	cbz	r0, 800fa62 <__gethex+0x1da>
 800fa32:	f108 33ff 	add.w	r3, r8, #4294967295
 800fa36:	1159      	asrs	r1, r3, #5
 800fa38:	f003 021f 	and.w	r2, r3, #31
 800fa3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fa40:	f04f 0b01 	mov.w	fp, #1
 800fa44:	fa0b f202 	lsl.w	r2, fp, r2
 800fa48:	420a      	tst	r2, r1
 800fa4a:	d00a      	beq.n	800fa62 <__gethex+0x1da>
 800fa4c:	455b      	cmp	r3, fp
 800fa4e:	dd06      	ble.n	800fa5e <__gethex+0x1d6>
 800fa50:	f1a8 0102 	sub.w	r1, r8, #2
 800fa54:	4620      	mov	r0, r4
 800fa56:	f7fe fd79 	bl	800e54c <__any_on>
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	d138      	bne.n	800fad0 <__gethex+0x248>
 800fa5e:	f04f 0b02 	mov.w	fp, #2
 800fa62:	4641      	mov	r1, r8
 800fa64:	4620      	mov	r0, r4
 800fa66:	f7ff fea7 	bl	800f7b8 <rshift>
 800fa6a:	4446      	add	r6, r8
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	42b3      	cmp	r3, r6
 800fa70:	da41      	bge.n	800faf6 <__gethex+0x26e>
 800fa72:	4621      	mov	r1, r4
 800fa74:	4648      	mov	r0, r9
 800fa76:	f7fe f91d 	bl	800dcb4 <_Bfree>
 800fa7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	6013      	str	r3, [r2, #0]
 800fa80:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800fa84:	e78a      	b.n	800f99c <__gethex+0x114>
 800fa86:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800fa8a:	2a2e      	cmp	r2, #46	; 0x2e
 800fa8c:	d014      	beq.n	800fab8 <__gethex+0x230>
 800fa8e:	2b20      	cmp	r3, #32
 800fa90:	d106      	bne.n	800faa0 <__gethex+0x218>
 800fa92:	9b01      	ldr	r3, [sp, #4]
 800fa94:	f843 bb04 	str.w	fp, [r3], #4
 800fa98:	f04f 0b00 	mov.w	fp, #0
 800fa9c:	9301      	str	r3, [sp, #4]
 800fa9e:	465b      	mov	r3, fp
 800faa0:	7828      	ldrb	r0, [r5, #0]
 800faa2:	9303      	str	r3, [sp, #12]
 800faa4:	f7ff feda 	bl	800f85c <__hexdig_fun>
 800faa8:	9b03      	ldr	r3, [sp, #12]
 800faaa:	f000 000f 	and.w	r0, r0, #15
 800faae:	4098      	lsls	r0, r3
 800fab0:	ea4b 0b00 	orr.w	fp, fp, r0
 800fab4:	3304      	adds	r3, #4
 800fab6:	e7a1      	b.n	800f9fc <__gethex+0x174>
 800fab8:	45a8      	cmp	r8, r5
 800faba:	d8e8      	bhi.n	800fa8e <__gethex+0x206>
 800fabc:	2201      	movs	r2, #1
 800fabe:	4628      	mov	r0, r5
 800fac0:	9303      	str	r3, [sp, #12]
 800fac2:	f7ff fe1b 	bl	800f6fc <strncmp>
 800fac6:	4926      	ldr	r1, [pc, #152]	; (800fb60 <__gethex+0x2d8>)
 800fac8:	9b03      	ldr	r3, [sp, #12]
 800faca:	2800      	cmp	r0, #0
 800facc:	d1df      	bne.n	800fa8e <__gethex+0x206>
 800face:	e795      	b.n	800f9fc <__gethex+0x174>
 800fad0:	f04f 0b03 	mov.w	fp, #3
 800fad4:	e7c5      	b.n	800fa62 <__gethex+0x1da>
 800fad6:	da0b      	bge.n	800faf0 <__gethex+0x268>
 800fad8:	eba5 0800 	sub.w	r8, r5, r0
 800fadc:	4621      	mov	r1, r4
 800fade:	4642      	mov	r2, r8
 800fae0:	4648      	mov	r0, r9
 800fae2:	f7fe fb01 	bl	800e0e8 <__lshift>
 800fae6:	eba6 0608 	sub.w	r6, r6, r8
 800faea:	4604      	mov	r4, r0
 800faec:	f100 0a14 	add.w	sl, r0, #20
 800faf0:	f04f 0b00 	mov.w	fp, #0
 800faf4:	e7ba      	b.n	800fa6c <__gethex+0x1e4>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	42b3      	cmp	r3, r6
 800fafa:	dd73      	ble.n	800fbe4 <__gethex+0x35c>
 800fafc:	1b9e      	subs	r6, r3, r6
 800fafe:	42b5      	cmp	r5, r6
 800fb00:	dc34      	bgt.n	800fb6c <__gethex+0x2e4>
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2b02      	cmp	r3, #2
 800fb06:	d023      	beq.n	800fb50 <__gethex+0x2c8>
 800fb08:	2b03      	cmp	r3, #3
 800fb0a:	d025      	beq.n	800fb58 <__gethex+0x2d0>
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	d115      	bne.n	800fb3c <__gethex+0x2b4>
 800fb10:	42b5      	cmp	r5, r6
 800fb12:	d113      	bne.n	800fb3c <__gethex+0x2b4>
 800fb14:	2d01      	cmp	r5, #1
 800fb16:	d10b      	bne.n	800fb30 <__gethex+0x2a8>
 800fb18:	9a02      	ldr	r2, [sp, #8]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6013      	str	r3, [r2, #0]
 800fb1e:	2301      	movs	r3, #1
 800fb20:	6123      	str	r3, [r4, #16]
 800fb22:	f8ca 3000 	str.w	r3, [sl]
 800fb26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb28:	f04f 0862 	mov.w	r8, #98	; 0x62
 800fb2c:	601c      	str	r4, [r3, #0]
 800fb2e:	e735      	b.n	800f99c <__gethex+0x114>
 800fb30:	1e69      	subs	r1, r5, #1
 800fb32:	4620      	mov	r0, r4
 800fb34:	f7fe fd0a 	bl	800e54c <__any_on>
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	d1ed      	bne.n	800fb18 <__gethex+0x290>
 800fb3c:	4621      	mov	r1, r4
 800fb3e:	4648      	mov	r0, r9
 800fb40:	f7fe f8b8 	bl	800dcb4 <_Bfree>
 800fb44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb46:	2300      	movs	r3, #0
 800fb48:	6013      	str	r3, [r2, #0]
 800fb4a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800fb4e:	e725      	b.n	800f99c <__gethex+0x114>
 800fb50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1f2      	bne.n	800fb3c <__gethex+0x2b4>
 800fb56:	e7df      	b.n	800fb18 <__gethex+0x290>
 800fb58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d1dc      	bne.n	800fb18 <__gethex+0x290>
 800fb5e:	e7ed      	b.n	800fb3c <__gethex+0x2b4>
 800fb60:	0801073c 	.word	0x0801073c
 800fb64:	080105d1 	.word	0x080105d1
 800fb68:	080108e6 	.word	0x080108e6
 800fb6c:	f106 38ff 	add.w	r8, r6, #4294967295
 800fb70:	f1bb 0f00 	cmp.w	fp, #0
 800fb74:	d133      	bne.n	800fbde <__gethex+0x356>
 800fb76:	f1b8 0f00 	cmp.w	r8, #0
 800fb7a:	d004      	beq.n	800fb86 <__gethex+0x2fe>
 800fb7c:	4641      	mov	r1, r8
 800fb7e:	4620      	mov	r0, r4
 800fb80:	f7fe fce4 	bl	800e54c <__any_on>
 800fb84:	4683      	mov	fp, r0
 800fb86:	ea4f 1268 	mov.w	r2, r8, asr #5
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fb90:	f008 081f 	and.w	r8, r8, #31
 800fb94:	fa03 f308 	lsl.w	r3, r3, r8
 800fb98:	4213      	tst	r3, r2
 800fb9a:	4631      	mov	r1, r6
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	bf18      	it	ne
 800fba0:	f04b 0b02 	orrne.w	fp, fp, #2
 800fba4:	1bad      	subs	r5, r5, r6
 800fba6:	f7ff fe07 	bl	800f7b8 <rshift>
 800fbaa:	687e      	ldr	r6, [r7, #4]
 800fbac:	f04f 0802 	mov.w	r8, #2
 800fbb0:	f1bb 0f00 	cmp.w	fp, #0
 800fbb4:	d04a      	beq.n	800fc4c <__gethex+0x3c4>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d016      	beq.n	800fbea <__gethex+0x362>
 800fbbc:	2b03      	cmp	r3, #3
 800fbbe:	d018      	beq.n	800fbf2 <__gethex+0x36a>
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d109      	bne.n	800fbd8 <__gethex+0x350>
 800fbc4:	f01b 0f02 	tst.w	fp, #2
 800fbc8:	d006      	beq.n	800fbd8 <__gethex+0x350>
 800fbca:	f8da 3000 	ldr.w	r3, [sl]
 800fbce:	ea4b 0b03 	orr.w	fp, fp, r3
 800fbd2:	f01b 0f01 	tst.w	fp, #1
 800fbd6:	d10f      	bne.n	800fbf8 <__gethex+0x370>
 800fbd8:	f048 0810 	orr.w	r8, r8, #16
 800fbdc:	e036      	b.n	800fc4c <__gethex+0x3c4>
 800fbde:	f04f 0b01 	mov.w	fp, #1
 800fbe2:	e7d0      	b.n	800fb86 <__gethex+0x2fe>
 800fbe4:	f04f 0801 	mov.w	r8, #1
 800fbe8:	e7e2      	b.n	800fbb0 <__gethex+0x328>
 800fbea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbec:	f1c3 0301 	rsb	r3, r3, #1
 800fbf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d0ef      	beq.n	800fbd8 <__gethex+0x350>
 800fbf8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fbfc:	f104 0214 	add.w	r2, r4, #20
 800fc00:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800fc04:	9301      	str	r3, [sp, #4]
 800fc06:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	4694      	mov	ip, r2
 800fc0e:	f852 1b04 	ldr.w	r1, [r2], #4
 800fc12:	f1b1 3fff 	cmp.w	r1, #4294967295
 800fc16:	d01e      	beq.n	800fc56 <__gethex+0x3ce>
 800fc18:	3101      	adds	r1, #1
 800fc1a:	f8cc 1000 	str.w	r1, [ip]
 800fc1e:	f1b8 0f02 	cmp.w	r8, #2
 800fc22:	f104 0214 	add.w	r2, r4, #20
 800fc26:	d13d      	bne.n	800fca4 <__gethex+0x41c>
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	3b01      	subs	r3, #1
 800fc2c:	42ab      	cmp	r3, r5
 800fc2e:	d10b      	bne.n	800fc48 <__gethex+0x3c0>
 800fc30:	1169      	asrs	r1, r5, #5
 800fc32:	2301      	movs	r3, #1
 800fc34:	f005 051f 	and.w	r5, r5, #31
 800fc38:	fa03 f505 	lsl.w	r5, r3, r5
 800fc3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc40:	421d      	tst	r5, r3
 800fc42:	bf18      	it	ne
 800fc44:	f04f 0801 	movne.w	r8, #1
 800fc48:	f048 0820 	orr.w	r8, r8, #32
 800fc4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc4e:	601c      	str	r4, [r3, #0]
 800fc50:	9b02      	ldr	r3, [sp, #8]
 800fc52:	601e      	str	r6, [r3, #0]
 800fc54:	e6a2      	b.n	800f99c <__gethex+0x114>
 800fc56:	4290      	cmp	r0, r2
 800fc58:	f842 3c04 	str.w	r3, [r2, #-4]
 800fc5c:	d8d6      	bhi.n	800fc0c <__gethex+0x384>
 800fc5e:	68a2      	ldr	r2, [r4, #8]
 800fc60:	4593      	cmp	fp, r2
 800fc62:	db17      	blt.n	800fc94 <__gethex+0x40c>
 800fc64:	6861      	ldr	r1, [r4, #4]
 800fc66:	4648      	mov	r0, r9
 800fc68:	3101      	adds	r1, #1
 800fc6a:	f7fd ffe3 	bl	800dc34 <_Balloc>
 800fc6e:	4682      	mov	sl, r0
 800fc70:	b918      	cbnz	r0, 800fc7a <__gethex+0x3f2>
 800fc72:	4b1b      	ldr	r3, [pc, #108]	; (800fce0 <__gethex+0x458>)
 800fc74:	4602      	mov	r2, r0
 800fc76:	2184      	movs	r1, #132	; 0x84
 800fc78:	e6b3      	b.n	800f9e2 <__gethex+0x15a>
 800fc7a:	6922      	ldr	r2, [r4, #16]
 800fc7c:	3202      	adds	r2, #2
 800fc7e:	f104 010c 	add.w	r1, r4, #12
 800fc82:	0092      	lsls	r2, r2, #2
 800fc84:	300c      	adds	r0, #12
 800fc86:	f7ff fd4b 	bl	800f720 <memcpy>
 800fc8a:	4621      	mov	r1, r4
 800fc8c:	4648      	mov	r0, r9
 800fc8e:	f7fe f811 	bl	800dcb4 <_Bfree>
 800fc92:	4654      	mov	r4, sl
 800fc94:	6922      	ldr	r2, [r4, #16]
 800fc96:	1c51      	adds	r1, r2, #1
 800fc98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fc9c:	6121      	str	r1, [r4, #16]
 800fc9e:	2101      	movs	r1, #1
 800fca0:	6151      	str	r1, [r2, #20]
 800fca2:	e7bc      	b.n	800fc1e <__gethex+0x396>
 800fca4:	6921      	ldr	r1, [r4, #16]
 800fca6:	4559      	cmp	r1, fp
 800fca8:	dd0b      	ble.n	800fcc2 <__gethex+0x43a>
 800fcaa:	2101      	movs	r1, #1
 800fcac:	4620      	mov	r0, r4
 800fcae:	f7ff fd83 	bl	800f7b8 <rshift>
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	3601      	adds	r6, #1
 800fcb6:	42b3      	cmp	r3, r6
 800fcb8:	f6ff aedb 	blt.w	800fa72 <__gethex+0x1ea>
 800fcbc:	f04f 0801 	mov.w	r8, #1
 800fcc0:	e7c2      	b.n	800fc48 <__gethex+0x3c0>
 800fcc2:	f015 051f 	ands.w	r5, r5, #31
 800fcc6:	d0f9      	beq.n	800fcbc <__gethex+0x434>
 800fcc8:	9b01      	ldr	r3, [sp, #4]
 800fcca:	441a      	add	r2, r3
 800fccc:	f1c5 0520 	rsb	r5, r5, #32
 800fcd0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800fcd4:	f7fe f8a0 	bl	800de18 <__hi0bits>
 800fcd8:	42a8      	cmp	r0, r5
 800fcda:	dbe6      	blt.n	800fcaa <__gethex+0x422>
 800fcdc:	e7ee      	b.n	800fcbc <__gethex+0x434>
 800fcde:	bf00      	nop
 800fce0:	080105d1 	.word	0x080105d1

0800fce4 <L_shift>:
 800fce4:	f1c2 0208 	rsb	r2, r2, #8
 800fce8:	0092      	lsls	r2, r2, #2
 800fcea:	b570      	push	{r4, r5, r6, lr}
 800fcec:	f1c2 0620 	rsb	r6, r2, #32
 800fcf0:	6843      	ldr	r3, [r0, #4]
 800fcf2:	6804      	ldr	r4, [r0, #0]
 800fcf4:	fa03 f506 	lsl.w	r5, r3, r6
 800fcf8:	432c      	orrs	r4, r5
 800fcfa:	40d3      	lsrs	r3, r2
 800fcfc:	6004      	str	r4, [r0, #0]
 800fcfe:	f840 3f04 	str.w	r3, [r0, #4]!
 800fd02:	4288      	cmp	r0, r1
 800fd04:	d3f4      	bcc.n	800fcf0 <L_shift+0xc>
 800fd06:	bd70      	pop	{r4, r5, r6, pc}

0800fd08 <__match>:
 800fd08:	b530      	push	{r4, r5, lr}
 800fd0a:	6803      	ldr	r3, [r0, #0]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd12:	b914      	cbnz	r4, 800fd1a <__match+0x12>
 800fd14:	6003      	str	r3, [r0, #0]
 800fd16:	2001      	movs	r0, #1
 800fd18:	bd30      	pop	{r4, r5, pc}
 800fd1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fd22:	2d19      	cmp	r5, #25
 800fd24:	bf98      	it	ls
 800fd26:	3220      	addls	r2, #32
 800fd28:	42a2      	cmp	r2, r4
 800fd2a:	d0f0      	beq.n	800fd0e <__match+0x6>
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	e7f3      	b.n	800fd18 <__match+0x10>

0800fd30 <__hexnan>:
 800fd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd34:	680b      	ldr	r3, [r1, #0]
 800fd36:	6801      	ldr	r1, [r0, #0]
 800fd38:	115e      	asrs	r6, r3, #5
 800fd3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fd3e:	f013 031f 	ands.w	r3, r3, #31
 800fd42:	b087      	sub	sp, #28
 800fd44:	bf18      	it	ne
 800fd46:	3604      	addne	r6, #4
 800fd48:	2500      	movs	r5, #0
 800fd4a:	1f37      	subs	r7, r6, #4
 800fd4c:	4682      	mov	sl, r0
 800fd4e:	4690      	mov	r8, r2
 800fd50:	9301      	str	r3, [sp, #4]
 800fd52:	f846 5c04 	str.w	r5, [r6, #-4]
 800fd56:	46b9      	mov	r9, r7
 800fd58:	463c      	mov	r4, r7
 800fd5a:	9502      	str	r5, [sp, #8]
 800fd5c:	46ab      	mov	fp, r5
 800fd5e:	784a      	ldrb	r2, [r1, #1]
 800fd60:	1c4b      	adds	r3, r1, #1
 800fd62:	9303      	str	r3, [sp, #12]
 800fd64:	b342      	cbz	r2, 800fdb8 <__hexnan+0x88>
 800fd66:	4610      	mov	r0, r2
 800fd68:	9105      	str	r1, [sp, #20]
 800fd6a:	9204      	str	r2, [sp, #16]
 800fd6c:	f7ff fd76 	bl	800f85c <__hexdig_fun>
 800fd70:	2800      	cmp	r0, #0
 800fd72:	d14f      	bne.n	800fe14 <__hexnan+0xe4>
 800fd74:	9a04      	ldr	r2, [sp, #16]
 800fd76:	9905      	ldr	r1, [sp, #20]
 800fd78:	2a20      	cmp	r2, #32
 800fd7a:	d818      	bhi.n	800fdae <__hexnan+0x7e>
 800fd7c:	9b02      	ldr	r3, [sp, #8]
 800fd7e:	459b      	cmp	fp, r3
 800fd80:	dd13      	ble.n	800fdaa <__hexnan+0x7a>
 800fd82:	454c      	cmp	r4, r9
 800fd84:	d206      	bcs.n	800fd94 <__hexnan+0x64>
 800fd86:	2d07      	cmp	r5, #7
 800fd88:	dc04      	bgt.n	800fd94 <__hexnan+0x64>
 800fd8a:	462a      	mov	r2, r5
 800fd8c:	4649      	mov	r1, r9
 800fd8e:	4620      	mov	r0, r4
 800fd90:	f7ff ffa8 	bl	800fce4 <L_shift>
 800fd94:	4544      	cmp	r4, r8
 800fd96:	d950      	bls.n	800fe3a <__hexnan+0x10a>
 800fd98:	2300      	movs	r3, #0
 800fd9a:	f1a4 0904 	sub.w	r9, r4, #4
 800fd9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fda2:	f8cd b008 	str.w	fp, [sp, #8]
 800fda6:	464c      	mov	r4, r9
 800fda8:	461d      	mov	r5, r3
 800fdaa:	9903      	ldr	r1, [sp, #12]
 800fdac:	e7d7      	b.n	800fd5e <__hexnan+0x2e>
 800fdae:	2a29      	cmp	r2, #41	; 0x29
 800fdb0:	d155      	bne.n	800fe5e <__hexnan+0x12e>
 800fdb2:	3102      	adds	r1, #2
 800fdb4:	f8ca 1000 	str.w	r1, [sl]
 800fdb8:	f1bb 0f00 	cmp.w	fp, #0
 800fdbc:	d04f      	beq.n	800fe5e <__hexnan+0x12e>
 800fdbe:	454c      	cmp	r4, r9
 800fdc0:	d206      	bcs.n	800fdd0 <__hexnan+0xa0>
 800fdc2:	2d07      	cmp	r5, #7
 800fdc4:	dc04      	bgt.n	800fdd0 <__hexnan+0xa0>
 800fdc6:	462a      	mov	r2, r5
 800fdc8:	4649      	mov	r1, r9
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f7ff ff8a 	bl	800fce4 <L_shift>
 800fdd0:	4544      	cmp	r4, r8
 800fdd2:	d934      	bls.n	800fe3e <__hexnan+0x10e>
 800fdd4:	f1a8 0204 	sub.w	r2, r8, #4
 800fdd8:	4623      	mov	r3, r4
 800fdda:	f853 1b04 	ldr.w	r1, [r3], #4
 800fdde:	f842 1f04 	str.w	r1, [r2, #4]!
 800fde2:	429f      	cmp	r7, r3
 800fde4:	d2f9      	bcs.n	800fdda <__hexnan+0xaa>
 800fde6:	1b3b      	subs	r3, r7, r4
 800fde8:	f023 0303 	bic.w	r3, r3, #3
 800fdec:	3304      	adds	r3, #4
 800fdee:	3e03      	subs	r6, #3
 800fdf0:	3401      	adds	r4, #1
 800fdf2:	42a6      	cmp	r6, r4
 800fdf4:	bf38      	it	cc
 800fdf6:	2304      	movcc	r3, #4
 800fdf8:	4443      	add	r3, r8
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f843 2b04 	str.w	r2, [r3], #4
 800fe00:	429f      	cmp	r7, r3
 800fe02:	d2fb      	bcs.n	800fdfc <__hexnan+0xcc>
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	b91b      	cbnz	r3, 800fe10 <__hexnan+0xe0>
 800fe08:	4547      	cmp	r7, r8
 800fe0a:	d126      	bne.n	800fe5a <__hexnan+0x12a>
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	603b      	str	r3, [r7, #0]
 800fe10:	2005      	movs	r0, #5
 800fe12:	e025      	b.n	800fe60 <__hexnan+0x130>
 800fe14:	3501      	adds	r5, #1
 800fe16:	2d08      	cmp	r5, #8
 800fe18:	f10b 0b01 	add.w	fp, fp, #1
 800fe1c:	dd06      	ble.n	800fe2c <__hexnan+0xfc>
 800fe1e:	4544      	cmp	r4, r8
 800fe20:	d9c3      	bls.n	800fdaa <__hexnan+0x7a>
 800fe22:	2300      	movs	r3, #0
 800fe24:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe28:	2501      	movs	r5, #1
 800fe2a:	3c04      	subs	r4, #4
 800fe2c:	6822      	ldr	r2, [r4, #0]
 800fe2e:	f000 000f 	and.w	r0, r0, #15
 800fe32:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fe36:	6020      	str	r0, [r4, #0]
 800fe38:	e7b7      	b.n	800fdaa <__hexnan+0x7a>
 800fe3a:	2508      	movs	r5, #8
 800fe3c:	e7b5      	b.n	800fdaa <__hexnan+0x7a>
 800fe3e:	9b01      	ldr	r3, [sp, #4]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d0df      	beq.n	800fe04 <__hexnan+0xd4>
 800fe44:	f1c3 0320 	rsb	r3, r3, #32
 800fe48:	f04f 32ff 	mov.w	r2, #4294967295
 800fe4c:	40da      	lsrs	r2, r3
 800fe4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fe52:	4013      	ands	r3, r2
 800fe54:	f846 3c04 	str.w	r3, [r6, #-4]
 800fe58:	e7d4      	b.n	800fe04 <__hexnan+0xd4>
 800fe5a:	3f04      	subs	r7, #4
 800fe5c:	e7d2      	b.n	800fe04 <__hexnan+0xd4>
 800fe5e:	2004      	movs	r0, #4
 800fe60:	b007      	add	sp, #28
 800fe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe66 <__ascii_mbtowc>:
 800fe66:	b082      	sub	sp, #8
 800fe68:	b901      	cbnz	r1, 800fe6c <__ascii_mbtowc+0x6>
 800fe6a:	a901      	add	r1, sp, #4
 800fe6c:	b142      	cbz	r2, 800fe80 <__ascii_mbtowc+0x1a>
 800fe6e:	b14b      	cbz	r3, 800fe84 <__ascii_mbtowc+0x1e>
 800fe70:	7813      	ldrb	r3, [r2, #0]
 800fe72:	600b      	str	r3, [r1, #0]
 800fe74:	7812      	ldrb	r2, [r2, #0]
 800fe76:	1e10      	subs	r0, r2, #0
 800fe78:	bf18      	it	ne
 800fe7a:	2001      	movne	r0, #1
 800fe7c:	b002      	add	sp, #8
 800fe7e:	4770      	bx	lr
 800fe80:	4610      	mov	r0, r2
 800fe82:	e7fb      	b.n	800fe7c <__ascii_mbtowc+0x16>
 800fe84:	f06f 0001 	mvn.w	r0, #1
 800fe88:	e7f8      	b.n	800fe7c <__ascii_mbtowc+0x16>

0800fe8a <_realloc_r>:
 800fe8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8e:	4680      	mov	r8, r0
 800fe90:	4614      	mov	r4, r2
 800fe92:	460e      	mov	r6, r1
 800fe94:	b921      	cbnz	r1, 800fea0 <_realloc_r+0x16>
 800fe96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe9a:	4611      	mov	r1, r2
 800fe9c:	f7fb bf44 	b.w	800bd28 <_malloc_r>
 800fea0:	b92a      	cbnz	r2, 800feae <_realloc_r+0x24>
 800fea2:	f7fd fe7b 	bl	800db9c <_free_r>
 800fea6:	4625      	mov	r5, r4
 800fea8:	4628      	mov	r0, r5
 800feaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feae:	f000 f842 	bl	800ff36 <_malloc_usable_size_r>
 800feb2:	4284      	cmp	r4, r0
 800feb4:	4607      	mov	r7, r0
 800feb6:	d802      	bhi.n	800febe <_realloc_r+0x34>
 800feb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800febc:	d812      	bhi.n	800fee4 <_realloc_r+0x5a>
 800febe:	4621      	mov	r1, r4
 800fec0:	4640      	mov	r0, r8
 800fec2:	f7fb ff31 	bl	800bd28 <_malloc_r>
 800fec6:	4605      	mov	r5, r0
 800fec8:	2800      	cmp	r0, #0
 800feca:	d0ed      	beq.n	800fea8 <_realloc_r+0x1e>
 800fecc:	42bc      	cmp	r4, r7
 800fece:	4622      	mov	r2, r4
 800fed0:	4631      	mov	r1, r6
 800fed2:	bf28      	it	cs
 800fed4:	463a      	movcs	r2, r7
 800fed6:	f7ff fc23 	bl	800f720 <memcpy>
 800feda:	4631      	mov	r1, r6
 800fedc:	4640      	mov	r0, r8
 800fede:	f7fd fe5d 	bl	800db9c <_free_r>
 800fee2:	e7e1      	b.n	800fea8 <_realloc_r+0x1e>
 800fee4:	4635      	mov	r5, r6
 800fee6:	e7df      	b.n	800fea8 <_realloc_r+0x1e>

0800fee8 <__ascii_wctomb>:
 800fee8:	b149      	cbz	r1, 800fefe <__ascii_wctomb+0x16>
 800feea:	2aff      	cmp	r2, #255	; 0xff
 800feec:	bf85      	ittet	hi
 800feee:	238a      	movhi	r3, #138	; 0x8a
 800fef0:	6003      	strhi	r3, [r0, #0]
 800fef2:	700a      	strbls	r2, [r1, #0]
 800fef4:	f04f 30ff 	movhi.w	r0, #4294967295
 800fef8:	bf98      	it	ls
 800fefa:	2001      	movls	r0, #1
 800fefc:	4770      	bx	lr
 800fefe:	4608      	mov	r0, r1
 800ff00:	4770      	bx	lr
	...

0800ff04 <fiprintf>:
 800ff04:	b40e      	push	{r1, r2, r3}
 800ff06:	b503      	push	{r0, r1, lr}
 800ff08:	4601      	mov	r1, r0
 800ff0a:	ab03      	add	r3, sp, #12
 800ff0c:	4805      	ldr	r0, [pc, #20]	; (800ff24 <fiprintf+0x20>)
 800ff0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff12:	6800      	ldr	r0, [r0, #0]
 800ff14:	9301      	str	r3, [sp, #4]
 800ff16:	f000 f83f 	bl	800ff98 <_vfiprintf_r>
 800ff1a:	b002      	add	sp, #8
 800ff1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff20:	b003      	add	sp, #12
 800ff22:	4770      	bx	lr
 800ff24:	20000084 	.word	0x20000084

0800ff28 <abort>:
 800ff28:	b508      	push	{r3, lr}
 800ff2a:	2006      	movs	r0, #6
 800ff2c:	f000 fa0c 	bl	8010348 <raise>
 800ff30:	2001      	movs	r0, #1
 800ff32:	f7f1 fe33 	bl	8001b9c <_exit>

0800ff36 <_malloc_usable_size_r>:
 800ff36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff3a:	1f18      	subs	r0, r3, #4
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	bfbc      	itt	lt
 800ff40:	580b      	ldrlt	r3, [r1, r0]
 800ff42:	18c0      	addlt	r0, r0, r3
 800ff44:	4770      	bx	lr

0800ff46 <__sfputc_r>:
 800ff46:	6893      	ldr	r3, [r2, #8]
 800ff48:	3b01      	subs	r3, #1
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	b410      	push	{r4}
 800ff4e:	6093      	str	r3, [r2, #8]
 800ff50:	da08      	bge.n	800ff64 <__sfputc_r+0x1e>
 800ff52:	6994      	ldr	r4, [r2, #24]
 800ff54:	42a3      	cmp	r3, r4
 800ff56:	db01      	blt.n	800ff5c <__sfputc_r+0x16>
 800ff58:	290a      	cmp	r1, #10
 800ff5a:	d103      	bne.n	800ff64 <__sfputc_r+0x1e>
 800ff5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff60:	f000 b934 	b.w	80101cc <__swbuf_r>
 800ff64:	6813      	ldr	r3, [r2, #0]
 800ff66:	1c58      	adds	r0, r3, #1
 800ff68:	6010      	str	r0, [r2, #0]
 800ff6a:	7019      	strb	r1, [r3, #0]
 800ff6c:	4608      	mov	r0, r1
 800ff6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <__sfputs_r>:
 800ff74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff76:	4606      	mov	r6, r0
 800ff78:	460f      	mov	r7, r1
 800ff7a:	4614      	mov	r4, r2
 800ff7c:	18d5      	adds	r5, r2, r3
 800ff7e:	42ac      	cmp	r4, r5
 800ff80:	d101      	bne.n	800ff86 <__sfputs_r+0x12>
 800ff82:	2000      	movs	r0, #0
 800ff84:	e007      	b.n	800ff96 <__sfputs_r+0x22>
 800ff86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff8a:	463a      	mov	r2, r7
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	f7ff ffda 	bl	800ff46 <__sfputc_r>
 800ff92:	1c43      	adds	r3, r0, #1
 800ff94:	d1f3      	bne.n	800ff7e <__sfputs_r+0xa>
 800ff96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff98 <_vfiprintf_r>:
 800ff98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff9c:	460d      	mov	r5, r1
 800ff9e:	b09d      	sub	sp, #116	; 0x74
 800ffa0:	4614      	mov	r4, r2
 800ffa2:	4698      	mov	r8, r3
 800ffa4:	4606      	mov	r6, r0
 800ffa6:	b118      	cbz	r0, 800ffb0 <_vfiprintf_r+0x18>
 800ffa8:	6a03      	ldr	r3, [r0, #32]
 800ffaa:	b90b      	cbnz	r3, 800ffb0 <_vfiprintf_r+0x18>
 800ffac:	f7fc fe4a 	bl	800cc44 <__sinit>
 800ffb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffb2:	07d9      	lsls	r1, r3, #31
 800ffb4:	d405      	bmi.n	800ffc2 <_vfiprintf_r+0x2a>
 800ffb6:	89ab      	ldrh	r3, [r5, #12]
 800ffb8:	059a      	lsls	r2, r3, #22
 800ffba:	d402      	bmi.n	800ffc2 <_vfiprintf_r+0x2a>
 800ffbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffbe:	f7fc ff68 	bl	800ce92 <__retarget_lock_acquire_recursive>
 800ffc2:	89ab      	ldrh	r3, [r5, #12]
 800ffc4:	071b      	lsls	r3, r3, #28
 800ffc6:	d501      	bpl.n	800ffcc <_vfiprintf_r+0x34>
 800ffc8:	692b      	ldr	r3, [r5, #16]
 800ffca:	b99b      	cbnz	r3, 800fff4 <_vfiprintf_r+0x5c>
 800ffcc:	4629      	mov	r1, r5
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f000 f93a 	bl	8010248 <__swsetup_r>
 800ffd4:	b170      	cbz	r0, 800fff4 <_vfiprintf_r+0x5c>
 800ffd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffd8:	07dc      	lsls	r4, r3, #31
 800ffda:	d504      	bpl.n	800ffe6 <_vfiprintf_r+0x4e>
 800ffdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe0:	b01d      	add	sp, #116	; 0x74
 800ffe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe6:	89ab      	ldrh	r3, [r5, #12]
 800ffe8:	0598      	lsls	r0, r3, #22
 800ffea:	d4f7      	bmi.n	800ffdc <_vfiprintf_r+0x44>
 800ffec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffee:	f7fc ff51 	bl	800ce94 <__retarget_lock_release_recursive>
 800fff2:	e7f3      	b.n	800ffdc <_vfiprintf_r+0x44>
 800fff4:	2300      	movs	r3, #0
 800fff6:	9309      	str	r3, [sp, #36]	; 0x24
 800fff8:	2320      	movs	r3, #32
 800fffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010002:	2330      	movs	r3, #48	; 0x30
 8010004:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80101b8 <_vfiprintf_r+0x220>
 8010008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801000c:	f04f 0901 	mov.w	r9, #1
 8010010:	4623      	mov	r3, r4
 8010012:	469a      	mov	sl, r3
 8010014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010018:	b10a      	cbz	r2, 801001e <_vfiprintf_r+0x86>
 801001a:	2a25      	cmp	r2, #37	; 0x25
 801001c:	d1f9      	bne.n	8010012 <_vfiprintf_r+0x7a>
 801001e:	ebba 0b04 	subs.w	fp, sl, r4
 8010022:	d00b      	beq.n	801003c <_vfiprintf_r+0xa4>
 8010024:	465b      	mov	r3, fp
 8010026:	4622      	mov	r2, r4
 8010028:	4629      	mov	r1, r5
 801002a:	4630      	mov	r0, r6
 801002c:	f7ff ffa2 	bl	800ff74 <__sfputs_r>
 8010030:	3001      	adds	r0, #1
 8010032:	f000 80a9 	beq.w	8010188 <_vfiprintf_r+0x1f0>
 8010036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010038:	445a      	add	r2, fp
 801003a:	9209      	str	r2, [sp, #36]	; 0x24
 801003c:	f89a 3000 	ldrb.w	r3, [sl]
 8010040:	2b00      	cmp	r3, #0
 8010042:	f000 80a1 	beq.w	8010188 <_vfiprintf_r+0x1f0>
 8010046:	2300      	movs	r3, #0
 8010048:	f04f 32ff 	mov.w	r2, #4294967295
 801004c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010050:	f10a 0a01 	add.w	sl, sl, #1
 8010054:	9304      	str	r3, [sp, #16]
 8010056:	9307      	str	r3, [sp, #28]
 8010058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801005c:	931a      	str	r3, [sp, #104]	; 0x68
 801005e:	4654      	mov	r4, sl
 8010060:	2205      	movs	r2, #5
 8010062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010066:	4854      	ldr	r0, [pc, #336]	; (80101b8 <_vfiprintf_r+0x220>)
 8010068:	f7f0 f8b2 	bl	80001d0 <memchr>
 801006c:	9a04      	ldr	r2, [sp, #16]
 801006e:	b9d8      	cbnz	r0, 80100a8 <_vfiprintf_r+0x110>
 8010070:	06d1      	lsls	r1, r2, #27
 8010072:	bf44      	itt	mi
 8010074:	2320      	movmi	r3, #32
 8010076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801007a:	0713      	lsls	r3, r2, #28
 801007c:	bf44      	itt	mi
 801007e:	232b      	movmi	r3, #43	; 0x2b
 8010080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010084:	f89a 3000 	ldrb.w	r3, [sl]
 8010088:	2b2a      	cmp	r3, #42	; 0x2a
 801008a:	d015      	beq.n	80100b8 <_vfiprintf_r+0x120>
 801008c:	9a07      	ldr	r2, [sp, #28]
 801008e:	4654      	mov	r4, sl
 8010090:	2000      	movs	r0, #0
 8010092:	f04f 0c0a 	mov.w	ip, #10
 8010096:	4621      	mov	r1, r4
 8010098:	f811 3b01 	ldrb.w	r3, [r1], #1
 801009c:	3b30      	subs	r3, #48	; 0x30
 801009e:	2b09      	cmp	r3, #9
 80100a0:	d94d      	bls.n	801013e <_vfiprintf_r+0x1a6>
 80100a2:	b1b0      	cbz	r0, 80100d2 <_vfiprintf_r+0x13a>
 80100a4:	9207      	str	r2, [sp, #28]
 80100a6:	e014      	b.n	80100d2 <_vfiprintf_r+0x13a>
 80100a8:	eba0 0308 	sub.w	r3, r0, r8
 80100ac:	fa09 f303 	lsl.w	r3, r9, r3
 80100b0:	4313      	orrs	r3, r2
 80100b2:	9304      	str	r3, [sp, #16]
 80100b4:	46a2      	mov	sl, r4
 80100b6:	e7d2      	b.n	801005e <_vfiprintf_r+0xc6>
 80100b8:	9b03      	ldr	r3, [sp, #12]
 80100ba:	1d19      	adds	r1, r3, #4
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	9103      	str	r1, [sp, #12]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	bfbb      	ittet	lt
 80100c4:	425b      	neglt	r3, r3
 80100c6:	f042 0202 	orrlt.w	r2, r2, #2
 80100ca:	9307      	strge	r3, [sp, #28]
 80100cc:	9307      	strlt	r3, [sp, #28]
 80100ce:	bfb8      	it	lt
 80100d0:	9204      	strlt	r2, [sp, #16]
 80100d2:	7823      	ldrb	r3, [r4, #0]
 80100d4:	2b2e      	cmp	r3, #46	; 0x2e
 80100d6:	d10c      	bne.n	80100f2 <_vfiprintf_r+0x15a>
 80100d8:	7863      	ldrb	r3, [r4, #1]
 80100da:	2b2a      	cmp	r3, #42	; 0x2a
 80100dc:	d134      	bne.n	8010148 <_vfiprintf_r+0x1b0>
 80100de:	9b03      	ldr	r3, [sp, #12]
 80100e0:	1d1a      	adds	r2, r3, #4
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	9203      	str	r2, [sp, #12]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	bfb8      	it	lt
 80100ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80100ee:	3402      	adds	r4, #2
 80100f0:	9305      	str	r3, [sp, #20]
 80100f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80101c8 <_vfiprintf_r+0x230>
 80100f6:	7821      	ldrb	r1, [r4, #0]
 80100f8:	2203      	movs	r2, #3
 80100fa:	4650      	mov	r0, sl
 80100fc:	f7f0 f868 	bl	80001d0 <memchr>
 8010100:	b138      	cbz	r0, 8010112 <_vfiprintf_r+0x17a>
 8010102:	9b04      	ldr	r3, [sp, #16]
 8010104:	eba0 000a 	sub.w	r0, r0, sl
 8010108:	2240      	movs	r2, #64	; 0x40
 801010a:	4082      	lsls	r2, r0
 801010c:	4313      	orrs	r3, r2
 801010e:	3401      	adds	r4, #1
 8010110:	9304      	str	r3, [sp, #16]
 8010112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010116:	4829      	ldr	r0, [pc, #164]	; (80101bc <_vfiprintf_r+0x224>)
 8010118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801011c:	2206      	movs	r2, #6
 801011e:	f7f0 f857 	bl	80001d0 <memchr>
 8010122:	2800      	cmp	r0, #0
 8010124:	d03f      	beq.n	80101a6 <_vfiprintf_r+0x20e>
 8010126:	4b26      	ldr	r3, [pc, #152]	; (80101c0 <_vfiprintf_r+0x228>)
 8010128:	bb1b      	cbnz	r3, 8010172 <_vfiprintf_r+0x1da>
 801012a:	9b03      	ldr	r3, [sp, #12]
 801012c:	3307      	adds	r3, #7
 801012e:	f023 0307 	bic.w	r3, r3, #7
 8010132:	3308      	adds	r3, #8
 8010134:	9303      	str	r3, [sp, #12]
 8010136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010138:	443b      	add	r3, r7
 801013a:	9309      	str	r3, [sp, #36]	; 0x24
 801013c:	e768      	b.n	8010010 <_vfiprintf_r+0x78>
 801013e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010142:	460c      	mov	r4, r1
 8010144:	2001      	movs	r0, #1
 8010146:	e7a6      	b.n	8010096 <_vfiprintf_r+0xfe>
 8010148:	2300      	movs	r3, #0
 801014a:	3401      	adds	r4, #1
 801014c:	9305      	str	r3, [sp, #20]
 801014e:	4619      	mov	r1, r3
 8010150:	f04f 0c0a 	mov.w	ip, #10
 8010154:	4620      	mov	r0, r4
 8010156:	f810 2b01 	ldrb.w	r2, [r0], #1
 801015a:	3a30      	subs	r2, #48	; 0x30
 801015c:	2a09      	cmp	r2, #9
 801015e:	d903      	bls.n	8010168 <_vfiprintf_r+0x1d0>
 8010160:	2b00      	cmp	r3, #0
 8010162:	d0c6      	beq.n	80100f2 <_vfiprintf_r+0x15a>
 8010164:	9105      	str	r1, [sp, #20]
 8010166:	e7c4      	b.n	80100f2 <_vfiprintf_r+0x15a>
 8010168:	fb0c 2101 	mla	r1, ip, r1, r2
 801016c:	4604      	mov	r4, r0
 801016e:	2301      	movs	r3, #1
 8010170:	e7f0      	b.n	8010154 <_vfiprintf_r+0x1bc>
 8010172:	ab03      	add	r3, sp, #12
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	462a      	mov	r2, r5
 8010178:	4b12      	ldr	r3, [pc, #72]	; (80101c4 <_vfiprintf_r+0x22c>)
 801017a:	a904      	add	r1, sp, #16
 801017c:	4630      	mov	r0, r6
 801017e:	f7fb feff 	bl	800bf80 <_printf_float>
 8010182:	4607      	mov	r7, r0
 8010184:	1c78      	adds	r0, r7, #1
 8010186:	d1d6      	bne.n	8010136 <_vfiprintf_r+0x19e>
 8010188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801018a:	07d9      	lsls	r1, r3, #31
 801018c:	d405      	bmi.n	801019a <_vfiprintf_r+0x202>
 801018e:	89ab      	ldrh	r3, [r5, #12]
 8010190:	059a      	lsls	r2, r3, #22
 8010192:	d402      	bmi.n	801019a <_vfiprintf_r+0x202>
 8010194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010196:	f7fc fe7d 	bl	800ce94 <__retarget_lock_release_recursive>
 801019a:	89ab      	ldrh	r3, [r5, #12]
 801019c:	065b      	lsls	r3, r3, #25
 801019e:	f53f af1d 	bmi.w	800ffdc <_vfiprintf_r+0x44>
 80101a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101a4:	e71c      	b.n	800ffe0 <_vfiprintf_r+0x48>
 80101a6:	ab03      	add	r3, sp, #12
 80101a8:	9300      	str	r3, [sp, #0]
 80101aa:	462a      	mov	r2, r5
 80101ac:	4b05      	ldr	r3, [pc, #20]	; (80101c4 <_vfiprintf_r+0x22c>)
 80101ae:	a904      	add	r1, sp, #16
 80101b0:	4630      	mov	r0, r6
 80101b2:	f7fc f989 	bl	800c4c8 <_printf_i>
 80101b6:	e7e4      	b.n	8010182 <_vfiprintf_r+0x1ea>
 80101b8:	08010891 	.word	0x08010891
 80101bc:	0801089b 	.word	0x0801089b
 80101c0:	0800bf81 	.word	0x0800bf81
 80101c4:	0800ff75 	.word	0x0800ff75
 80101c8:	08010897 	.word	0x08010897

080101cc <__swbuf_r>:
 80101cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ce:	460e      	mov	r6, r1
 80101d0:	4614      	mov	r4, r2
 80101d2:	4605      	mov	r5, r0
 80101d4:	b118      	cbz	r0, 80101de <__swbuf_r+0x12>
 80101d6:	6a03      	ldr	r3, [r0, #32]
 80101d8:	b90b      	cbnz	r3, 80101de <__swbuf_r+0x12>
 80101da:	f7fc fd33 	bl	800cc44 <__sinit>
 80101de:	69a3      	ldr	r3, [r4, #24]
 80101e0:	60a3      	str	r3, [r4, #8]
 80101e2:	89a3      	ldrh	r3, [r4, #12]
 80101e4:	071a      	lsls	r2, r3, #28
 80101e6:	d525      	bpl.n	8010234 <__swbuf_r+0x68>
 80101e8:	6923      	ldr	r3, [r4, #16]
 80101ea:	b31b      	cbz	r3, 8010234 <__swbuf_r+0x68>
 80101ec:	6823      	ldr	r3, [r4, #0]
 80101ee:	6922      	ldr	r2, [r4, #16]
 80101f0:	1a98      	subs	r0, r3, r2
 80101f2:	6963      	ldr	r3, [r4, #20]
 80101f4:	b2f6      	uxtb	r6, r6
 80101f6:	4283      	cmp	r3, r0
 80101f8:	4637      	mov	r7, r6
 80101fa:	dc04      	bgt.n	8010206 <__swbuf_r+0x3a>
 80101fc:	4621      	mov	r1, r4
 80101fe:	4628      	mov	r0, r5
 8010200:	f7ff fa3a 	bl	800f678 <_fflush_r>
 8010204:	b9e0      	cbnz	r0, 8010240 <__swbuf_r+0x74>
 8010206:	68a3      	ldr	r3, [r4, #8]
 8010208:	3b01      	subs	r3, #1
 801020a:	60a3      	str	r3, [r4, #8]
 801020c:	6823      	ldr	r3, [r4, #0]
 801020e:	1c5a      	adds	r2, r3, #1
 8010210:	6022      	str	r2, [r4, #0]
 8010212:	701e      	strb	r6, [r3, #0]
 8010214:	6962      	ldr	r2, [r4, #20]
 8010216:	1c43      	adds	r3, r0, #1
 8010218:	429a      	cmp	r2, r3
 801021a:	d004      	beq.n	8010226 <__swbuf_r+0x5a>
 801021c:	89a3      	ldrh	r3, [r4, #12]
 801021e:	07db      	lsls	r3, r3, #31
 8010220:	d506      	bpl.n	8010230 <__swbuf_r+0x64>
 8010222:	2e0a      	cmp	r6, #10
 8010224:	d104      	bne.n	8010230 <__swbuf_r+0x64>
 8010226:	4621      	mov	r1, r4
 8010228:	4628      	mov	r0, r5
 801022a:	f7ff fa25 	bl	800f678 <_fflush_r>
 801022e:	b938      	cbnz	r0, 8010240 <__swbuf_r+0x74>
 8010230:	4638      	mov	r0, r7
 8010232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010234:	4621      	mov	r1, r4
 8010236:	4628      	mov	r0, r5
 8010238:	f000 f806 	bl	8010248 <__swsetup_r>
 801023c:	2800      	cmp	r0, #0
 801023e:	d0d5      	beq.n	80101ec <__swbuf_r+0x20>
 8010240:	f04f 37ff 	mov.w	r7, #4294967295
 8010244:	e7f4      	b.n	8010230 <__swbuf_r+0x64>
	...

08010248 <__swsetup_r>:
 8010248:	b538      	push	{r3, r4, r5, lr}
 801024a:	4b2a      	ldr	r3, [pc, #168]	; (80102f4 <__swsetup_r+0xac>)
 801024c:	4605      	mov	r5, r0
 801024e:	6818      	ldr	r0, [r3, #0]
 8010250:	460c      	mov	r4, r1
 8010252:	b118      	cbz	r0, 801025c <__swsetup_r+0x14>
 8010254:	6a03      	ldr	r3, [r0, #32]
 8010256:	b90b      	cbnz	r3, 801025c <__swsetup_r+0x14>
 8010258:	f7fc fcf4 	bl	800cc44 <__sinit>
 801025c:	89a3      	ldrh	r3, [r4, #12]
 801025e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010262:	0718      	lsls	r0, r3, #28
 8010264:	d422      	bmi.n	80102ac <__swsetup_r+0x64>
 8010266:	06d9      	lsls	r1, r3, #27
 8010268:	d407      	bmi.n	801027a <__swsetup_r+0x32>
 801026a:	2309      	movs	r3, #9
 801026c:	602b      	str	r3, [r5, #0]
 801026e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010272:	81a3      	strh	r3, [r4, #12]
 8010274:	f04f 30ff 	mov.w	r0, #4294967295
 8010278:	e034      	b.n	80102e4 <__swsetup_r+0x9c>
 801027a:	0758      	lsls	r0, r3, #29
 801027c:	d512      	bpl.n	80102a4 <__swsetup_r+0x5c>
 801027e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010280:	b141      	cbz	r1, 8010294 <__swsetup_r+0x4c>
 8010282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010286:	4299      	cmp	r1, r3
 8010288:	d002      	beq.n	8010290 <__swsetup_r+0x48>
 801028a:	4628      	mov	r0, r5
 801028c:	f7fd fc86 	bl	800db9c <_free_r>
 8010290:	2300      	movs	r3, #0
 8010292:	6363      	str	r3, [r4, #52]	; 0x34
 8010294:	89a3      	ldrh	r3, [r4, #12]
 8010296:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801029a:	81a3      	strh	r3, [r4, #12]
 801029c:	2300      	movs	r3, #0
 801029e:	6063      	str	r3, [r4, #4]
 80102a0:	6923      	ldr	r3, [r4, #16]
 80102a2:	6023      	str	r3, [r4, #0]
 80102a4:	89a3      	ldrh	r3, [r4, #12]
 80102a6:	f043 0308 	orr.w	r3, r3, #8
 80102aa:	81a3      	strh	r3, [r4, #12]
 80102ac:	6923      	ldr	r3, [r4, #16]
 80102ae:	b94b      	cbnz	r3, 80102c4 <__swsetup_r+0x7c>
 80102b0:	89a3      	ldrh	r3, [r4, #12]
 80102b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80102b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102ba:	d003      	beq.n	80102c4 <__swsetup_r+0x7c>
 80102bc:	4621      	mov	r1, r4
 80102be:	4628      	mov	r0, r5
 80102c0:	f000 f884 	bl	80103cc <__smakebuf_r>
 80102c4:	89a0      	ldrh	r0, [r4, #12]
 80102c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102ca:	f010 0301 	ands.w	r3, r0, #1
 80102ce:	d00a      	beq.n	80102e6 <__swsetup_r+0x9e>
 80102d0:	2300      	movs	r3, #0
 80102d2:	60a3      	str	r3, [r4, #8]
 80102d4:	6963      	ldr	r3, [r4, #20]
 80102d6:	425b      	negs	r3, r3
 80102d8:	61a3      	str	r3, [r4, #24]
 80102da:	6923      	ldr	r3, [r4, #16]
 80102dc:	b943      	cbnz	r3, 80102f0 <__swsetup_r+0xa8>
 80102de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80102e2:	d1c4      	bne.n	801026e <__swsetup_r+0x26>
 80102e4:	bd38      	pop	{r3, r4, r5, pc}
 80102e6:	0781      	lsls	r1, r0, #30
 80102e8:	bf58      	it	pl
 80102ea:	6963      	ldrpl	r3, [r4, #20]
 80102ec:	60a3      	str	r3, [r4, #8]
 80102ee:	e7f4      	b.n	80102da <__swsetup_r+0x92>
 80102f0:	2000      	movs	r0, #0
 80102f2:	e7f7      	b.n	80102e4 <__swsetup_r+0x9c>
 80102f4:	20000084 	.word	0x20000084

080102f8 <_raise_r>:
 80102f8:	291f      	cmp	r1, #31
 80102fa:	b538      	push	{r3, r4, r5, lr}
 80102fc:	4604      	mov	r4, r0
 80102fe:	460d      	mov	r5, r1
 8010300:	d904      	bls.n	801030c <_raise_r+0x14>
 8010302:	2316      	movs	r3, #22
 8010304:	6003      	str	r3, [r0, #0]
 8010306:	f04f 30ff 	mov.w	r0, #4294967295
 801030a:	bd38      	pop	{r3, r4, r5, pc}
 801030c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801030e:	b112      	cbz	r2, 8010316 <_raise_r+0x1e>
 8010310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010314:	b94b      	cbnz	r3, 801032a <_raise_r+0x32>
 8010316:	4620      	mov	r0, r4
 8010318:	f000 f830 	bl	801037c <_getpid_r>
 801031c:	462a      	mov	r2, r5
 801031e:	4601      	mov	r1, r0
 8010320:	4620      	mov	r0, r4
 8010322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010326:	f000 b817 	b.w	8010358 <_kill_r>
 801032a:	2b01      	cmp	r3, #1
 801032c:	d00a      	beq.n	8010344 <_raise_r+0x4c>
 801032e:	1c59      	adds	r1, r3, #1
 8010330:	d103      	bne.n	801033a <_raise_r+0x42>
 8010332:	2316      	movs	r3, #22
 8010334:	6003      	str	r3, [r0, #0]
 8010336:	2001      	movs	r0, #1
 8010338:	e7e7      	b.n	801030a <_raise_r+0x12>
 801033a:	2400      	movs	r4, #0
 801033c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010340:	4628      	mov	r0, r5
 8010342:	4798      	blx	r3
 8010344:	2000      	movs	r0, #0
 8010346:	e7e0      	b.n	801030a <_raise_r+0x12>

08010348 <raise>:
 8010348:	4b02      	ldr	r3, [pc, #8]	; (8010354 <raise+0xc>)
 801034a:	4601      	mov	r1, r0
 801034c:	6818      	ldr	r0, [r3, #0]
 801034e:	f7ff bfd3 	b.w	80102f8 <_raise_r>
 8010352:	bf00      	nop
 8010354:	20000084 	.word	0x20000084

08010358 <_kill_r>:
 8010358:	b538      	push	{r3, r4, r5, lr}
 801035a:	4d07      	ldr	r5, [pc, #28]	; (8010378 <_kill_r+0x20>)
 801035c:	2300      	movs	r3, #0
 801035e:	4604      	mov	r4, r0
 8010360:	4608      	mov	r0, r1
 8010362:	4611      	mov	r1, r2
 8010364:	602b      	str	r3, [r5, #0]
 8010366:	f7f1 fc09 	bl	8001b7c <_kill>
 801036a:	1c43      	adds	r3, r0, #1
 801036c:	d102      	bne.n	8010374 <_kill_r+0x1c>
 801036e:	682b      	ldr	r3, [r5, #0]
 8010370:	b103      	cbz	r3, 8010374 <_kill_r+0x1c>
 8010372:	6023      	str	r3, [r4, #0]
 8010374:	bd38      	pop	{r3, r4, r5, pc}
 8010376:	bf00      	nop
 8010378:	200010d0 	.word	0x200010d0

0801037c <_getpid_r>:
 801037c:	f7f1 bbf6 	b.w	8001b6c <_getpid>

08010380 <__swhatbuf_r>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	460c      	mov	r4, r1
 8010384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010388:	2900      	cmp	r1, #0
 801038a:	b096      	sub	sp, #88	; 0x58
 801038c:	4615      	mov	r5, r2
 801038e:	461e      	mov	r6, r3
 8010390:	da0d      	bge.n	80103ae <__swhatbuf_r+0x2e>
 8010392:	89a3      	ldrh	r3, [r4, #12]
 8010394:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010398:	f04f 0100 	mov.w	r1, #0
 801039c:	bf0c      	ite	eq
 801039e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80103a2:	2340      	movne	r3, #64	; 0x40
 80103a4:	2000      	movs	r0, #0
 80103a6:	6031      	str	r1, [r6, #0]
 80103a8:	602b      	str	r3, [r5, #0]
 80103aa:	b016      	add	sp, #88	; 0x58
 80103ac:	bd70      	pop	{r4, r5, r6, pc}
 80103ae:	466a      	mov	r2, sp
 80103b0:	f000 f848 	bl	8010444 <_fstat_r>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	dbec      	blt.n	8010392 <__swhatbuf_r+0x12>
 80103b8:	9901      	ldr	r1, [sp, #4]
 80103ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80103be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80103c2:	4259      	negs	r1, r3
 80103c4:	4159      	adcs	r1, r3
 80103c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103ca:	e7eb      	b.n	80103a4 <__swhatbuf_r+0x24>

080103cc <__smakebuf_r>:
 80103cc:	898b      	ldrh	r3, [r1, #12]
 80103ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103d0:	079d      	lsls	r5, r3, #30
 80103d2:	4606      	mov	r6, r0
 80103d4:	460c      	mov	r4, r1
 80103d6:	d507      	bpl.n	80103e8 <__smakebuf_r+0x1c>
 80103d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	6123      	str	r3, [r4, #16]
 80103e0:	2301      	movs	r3, #1
 80103e2:	6163      	str	r3, [r4, #20]
 80103e4:	b002      	add	sp, #8
 80103e6:	bd70      	pop	{r4, r5, r6, pc}
 80103e8:	ab01      	add	r3, sp, #4
 80103ea:	466a      	mov	r2, sp
 80103ec:	f7ff ffc8 	bl	8010380 <__swhatbuf_r>
 80103f0:	9900      	ldr	r1, [sp, #0]
 80103f2:	4605      	mov	r5, r0
 80103f4:	4630      	mov	r0, r6
 80103f6:	f7fb fc97 	bl	800bd28 <_malloc_r>
 80103fa:	b948      	cbnz	r0, 8010410 <__smakebuf_r+0x44>
 80103fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010400:	059a      	lsls	r2, r3, #22
 8010402:	d4ef      	bmi.n	80103e4 <__smakebuf_r+0x18>
 8010404:	f023 0303 	bic.w	r3, r3, #3
 8010408:	f043 0302 	orr.w	r3, r3, #2
 801040c:	81a3      	strh	r3, [r4, #12]
 801040e:	e7e3      	b.n	80103d8 <__smakebuf_r+0xc>
 8010410:	89a3      	ldrh	r3, [r4, #12]
 8010412:	6020      	str	r0, [r4, #0]
 8010414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010418:	81a3      	strh	r3, [r4, #12]
 801041a:	9b00      	ldr	r3, [sp, #0]
 801041c:	6163      	str	r3, [r4, #20]
 801041e:	9b01      	ldr	r3, [sp, #4]
 8010420:	6120      	str	r0, [r4, #16]
 8010422:	b15b      	cbz	r3, 801043c <__smakebuf_r+0x70>
 8010424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010428:	4630      	mov	r0, r6
 801042a:	f000 f81d 	bl	8010468 <_isatty_r>
 801042e:	b128      	cbz	r0, 801043c <__smakebuf_r+0x70>
 8010430:	89a3      	ldrh	r3, [r4, #12]
 8010432:	f023 0303 	bic.w	r3, r3, #3
 8010436:	f043 0301 	orr.w	r3, r3, #1
 801043a:	81a3      	strh	r3, [r4, #12]
 801043c:	89a3      	ldrh	r3, [r4, #12]
 801043e:	431d      	orrs	r5, r3
 8010440:	81a5      	strh	r5, [r4, #12]
 8010442:	e7cf      	b.n	80103e4 <__smakebuf_r+0x18>

08010444 <_fstat_r>:
 8010444:	b538      	push	{r3, r4, r5, lr}
 8010446:	4d07      	ldr	r5, [pc, #28]	; (8010464 <_fstat_r+0x20>)
 8010448:	2300      	movs	r3, #0
 801044a:	4604      	mov	r4, r0
 801044c:	4608      	mov	r0, r1
 801044e:	4611      	mov	r1, r2
 8010450:	602b      	str	r3, [r5, #0]
 8010452:	f7f1 fbf2 	bl	8001c3a <_fstat>
 8010456:	1c43      	adds	r3, r0, #1
 8010458:	d102      	bne.n	8010460 <_fstat_r+0x1c>
 801045a:	682b      	ldr	r3, [r5, #0]
 801045c:	b103      	cbz	r3, 8010460 <_fstat_r+0x1c>
 801045e:	6023      	str	r3, [r4, #0]
 8010460:	bd38      	pop	{r3, r4, r5, pc}
 8010462:	bf00      	nop
 8010464:	200010d0 	.word	0x200010d0

08010468 <_isatty_r>:
 8010468:	b538      	push	{r3, r4, r5, lr}
 801046a:	4d06      	ldr	r5, [pc, #24]	; (8010484 <_isatty_r+0x1c>)
 801046c:	2300      	movs	r3, #0
 801046e:	4604      	mov	r4, r0
 8010470:	4608      	mov	r0, r1
 8010472:	602b      	str	r3, [r5, #0]
 8010474:	f7f1 fbf1 	bl	8001c5a <_isatty>
 8010478:	1c43      	adds	r3, r0, #1
 801047a:	d102      	bne.n	8010482 <_isatty_r+0x1a>
 801047c:	682b      	ldr	r3, [r5, #0]
 801047e:	b103      	cbz	r3, 8010482 <_isatty_r+0x1a>
 8010480:	6023      	str	r3, [r4, #0]
 8010482:	bd38      	pop	{r3, r4, r5, pc}
 8010484:	200010d0 	.word	0x200010d0

08010488 <_init>:
 8010488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801048a:	bf00      	nop
 801048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801048e:	bc08      	pop	{r3}
 8010490:	469e      	mov	lr, r3
 8010492:	4770      	bx	lr

08010494 <_fini>:
 8010494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010496:	bf00      	nop
 8010498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801049a:	bc08      	pop	{r3}
 801049c:	469e      	mov	lr, r3
 801049e:	4770      	bx	lr
