
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08012540  08012540  00022540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a14  08012a14  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08012a14  08012a14  00022a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a1c  08012a1c  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a1c  08012a1c  00022a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a20  08012a20  00022a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08012a24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
 10 .bss          00000ef8  200001f4  200001f4  000301f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010ec  200010ec  000301f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e590  00000000  00000000  00030267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000045fd  00000000  00000000  0004e7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a28  00000000  00000000  00052df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000145d  00000000  00000000  00054820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026376  00000000  00000000  00055c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000222c1  00000000  00000000  0007bff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8c72  00000000  00000000  0009e2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000087a8  00000000  00000000  00176f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0017f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012528 	.word	0x08012528

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08012528 	.word	0x08012528

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_UART_RxCpltCallback+0x78>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d130      	bne.n	8001062 <HAL_UART_RxCpltCallback+0x72>
		memcpy(GPS_Buf, UART3_Rx_buf, GPS_BUF_N);
 8001000:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_UART_RxCpltCallback+0x7c>)
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_UART_RxCpltCallback+0x80>)
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800100c:	461a      	mov	r2, r3
 800100e:	f00d fb82 	bl	800e716 <memcpy>
		GPS_Buf[GPS_BUF_N-1] = '\0';
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <HAL_UART_RxCpltCallback+0x7c>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
		char* Data_Buffer_ptr = strnstr((char*) GPS_Buf, "GPGGA", 5);
 800101a:	2205      	movs	r2, #5
 800101c:	4915      	ldr	r1, [pc, #84]	; (8001074 <HAL_UART_RxCpltCallback+0x84>)
 800101e:	4813      	ldr	r0, [pc, #76]	; (800106c <HAL_UART_RxCpltCallback+0x7c>)
 8001020:	f00d faaf 	bl	800e582 <strnstr>
 8001024:	61f8      	str	r0, [r7, #28]
		if (Data_Buffer_ptr == 0) return;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d019      	beq.n	8001060 <HAL_UART_RxCpltCallback+0x70>

		// HAL_UART_Transmit(&huart2, Data_Buffer_ptr, strlen(Data_Buffer_ptr), HAL_MAX_DELAY);
		float t, lat, lon;
		int res = sscanf((char*) Data_Buffer_ptr, "GPGGA,%f,%f,N,%f,W", &t, &lat, &lon);
 800102c:	f107 0110 	add.w	r1, r7, #16
 8001030:	f107 0214 	add.w	r2, r7, #20
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	460b      	mov	r3, r1
 800103c:	490e      	ldr	r1, [pc, #56]	; (8001078 <HAL_UART_RxCpltCallback+0x88>)
 800103e:	69f8      	ldr	r0, [r7, #28]
 8001040:	f00d fa26 	bl	800e490 <siscanf>
 8001044:	61b8      	str	r0, [r7, #24]
		if (res == 3) {
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d10a      	bne.n	8001062 <HAL_UART_RxCpltCallback+0x72>
			Time = t;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_UART_RxCpltCallback+0x8c>)
 8001050:	6013      	str	r3, [r2, #0]
			Latitude = lat;
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_UART_RxCpltCallback+0x90>)
 8001056:	6013      	str	r3, [r2, #0]
			Longitude = lon;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_UART_RxCpltCallback+0x94>)
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e000      	b.n	8001062 <HAL_UART_RxCpltCallback+0x72>
		if (Data_Buffer_ptr == 0) return;
 8001060:	bf00      	nop
		}
	}
}
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000394 	.word	0x20000394
 800106c:	2000043c 	.word	0x2000043c
 8001070:	200005e8 	.word	0x200005e8
 8001074:	08012540 	.word	0x08012540
 8001078:	08012548 	.word	0x08012548
 800107c:	200005cc 	.word	0x200005cc
 8001080:	200005d0 	.word	0x200005d0
 8001084:	200005d4 	.word	0x200005d4

08001088 <format_data>:

void format_data(float Time, float Lat, float Long) {
 8001088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800108c:	b08a      	sub	sp, #40	; 0x28
 800108e:	af06      	add	r7, sp, #24
 8001090:	ed87 0a03 	vstr	s0, [r7, #12]
 8001094:	edc7 0a02 	vstr	s1, [r7, #8]
 8001098:	ed87 1a01 	vstr	s2, [r7, #4]
	Hours = (int)Time / 10000;
 800109c:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a4:	ee17 1a90 	vmov	r1, s15
 80010a8:	4b30      	ldr	r3, [pc, #192]	; (800116c <format_data+0xe4>)
 80010aa:	fb83 2301 	smull	r2, r3, r3, r1
 80010ae:	131a      	asrs	r2, r3, #12
 80010b0:	17cb      	asrs	r3, r1, #31
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	4a2e      	ldr	r2, [pc, #184]	; (8001170 <format_data+0xe8>)
 80010b6:	6013      	str	r3, [r2, #0]
	Min = (int)(Time - (Hours * 10000)) / 100;
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <format_data+0xe8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80010d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d8:	ee17 1a90 	vmov	r1, s15
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <format_data+0xec>)
 80010de:	fb83 2301 	smull	r2, r3, r3, r1
 80010e2:	115a      	asrs	r2, r3, #5
 80010e4:	17cb      	asrs	r3, r1, #31
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	4a23      	ldr	r2, [pc, #140]	; (8001178 <format_data+0xf0>)
 80010ea:	6013      	str	r3, [r2, #0]
	Sec = (int)(Time - ((Hours * 10000) + (Min * 100)));
 80010ec:	4b20      	ldr	r3, [pc, #128]	; (8001170 <format_data+0xe8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80010f4:	fb03 f202 	mul.w	r2, r3, r2
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <format_data+0xf0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2164      	movs	r1, #100	; 0x64
 80010fe:	fb01 f303 	mul.w	r3, r1, r3
 8001102:	4413      	add	r3, r2
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001118:	ee17 2a90 	vmov	r2, s15
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <format_data+0xf4>)
 800111e:	601a      	str	r2, [r3, #0]
	sprintf((char*) UART2_Tx_buf, "Time=%d:%d:%d Latitude=%f, Longitude=%f\r\n", Hours+4, Min, Sec, Lat, Long);
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <format_data+0xe8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f103 0804 	add.w	r8, r3, #4
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <format_data+0xf0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <format_data+0xf4>)
 8001130:	681e      	ldr	r6, [r3, #0]
 8001132:	68b8      	ldr	r0, [r7, #8]
 8001134:	f7ff fa08 	bl	8000548 <__aeabi_f2d>
 8001138:	4604      	mov	r4, r0
 800113a:	460d      	mov	r5, r1
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fa03 	bl	8000548 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800114a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800114e:	9600      	str	r6, [sp, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	4642      	mov	r2, r8
 8001154:	490a      	ldr	r1, [pc, #40]	; (8001180 <format_data+0xf8>)
 8001156:	480b      	ldr	r0, [pc, #44]	; (8001184 <format_data+0xfc>)
 8001158:	f00d f97a 	bl	800e450 <siprintf>
	printd();
 800115c:	f000 f870 	bl	8001240 <printd>
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800116a:	bf00      	nop
 800116c:	68db8bad 	.word	0x68db8bad
 8001170:	200005dc 	.word	0x200005dc
 8001174:	51eb851f 	.word	0x51eb851f
 8001178:	200005e0 	.word	0x200005e0
 800117c:	200005e4 	.word	0x200005e4
 8001180:	0801255c 	.word	0x0801255c
 8001184:	20000778 	.word	0x20000778

08001188 <read_heading>:

void read_heading() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_HEADING, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2302      	movs	r3, #2
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	221a      	movs	r2, #26
 80011a0:	2150      	movs	r1, #80	; 0x50
 80011a2:	480c      	ldr	r0, [pc, #48]	; (80011d4 <read_heading+0x4c>)
 80011a4:	f004 faa2 	bl	80056ec <HAL_I2C_Mem_Read>
	Heading = (float)((int16_t)(data[1] << 8 | data[0])) / 16.0;
 80011a8:	797b      	ldrb	r3, [r7, #5]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	793b      	ldrb	r3, [r7, #4]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011be:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80011c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <read_heading+0x50>)
 80011c8:	edc3 7a00 	vstr	s15, [r3]
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000210 	.word	0x20000210
 80011d8:	200005d8 	.word	0x200005d8

080011dc <set_steering>:

void set_steering(float direction) {
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = direction*500+1500;
 80011e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ea:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001234 <set_steering+0x58>
 80011ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001238 <set_steering+0x5c>
 80011f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fe:	ee17 3a90 	vmov	r3, s15
 8001202:	60fb      	str	r3, [r7, #12]
	if (pulse > 2000) pulse = 2000;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800120a:	dd02      	ble.n	8001212 <set_steering+0x36>
 800120c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001210:	60fb      	str	r3, [r7, #12]
	if (pulse < 1000) pulse = 1000;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001218:	da02      	bge.n	8001220 <set_steering+0x44>
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <set_steering+0x60>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	43fa0000 	.word	0x43fa0000
 8001238:	44bb8000 	.word	0x44bb8000
 800123c:	20000304 	.word	0x20000304

08001240 <printd>:

void printd() {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, UART2_Tx_buf, strlen((char*) UART2_Tx_buf), HAL_MAX_DELAY);
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <printd+0x20>)
 8001246:	f7ff f813 	bl	8000270 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	b29a      	uxth	r2, r3
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	4903      	ldr	r1, [pc, #12]	; (8001260 <printd+0x20>)
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <printd+0x24>)
 8001256:	f007 fa67 	bl	8008728 <HAL_UART_Transmit>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000778 	.word	0x20000778
 8001264:	2000034c 	.word	0x2000034c

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 ff85 	bl	800217c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f8b1 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f000 fac3 	bl	8001800 <MX_GPIO_Init>
  MX_DMA_Init();
 800127a:	f000 faa1 	bl	80017c0 <MX_DMA_Init>
  MX_I2C1_Init();
 800127e:	f000 f915 	bl	80014ac <MX_I2C1_Init>
  MX_I2S3_Init();
 8001282:	f000 f941 	bl	8001508 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001286:	f000 f96f 	bl	8001568 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800128a:	f00b fde3 	bl	800ce54 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800128e:	f000 fa43 	bl	8001718 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001292:	f000 f99f 	bl	80015d4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001296:	f000 fa69 	bl	800176c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  int i = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  memset(UART3_Rx_buf, 0, GPS_BUF_N);
 800129e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012a2:	2100      	movs	r1, #0
 80012a4:	483d      	ldr	r0, [pc, #244]	; (800139c <main+0x134>)
 80012a6:	f00d f964 	bl	800e572 <memset>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012aa:	2100      	movs	r1, #0
 80012ac:	483c      	ldr	r0, [pc, #240]	; (80013a0 <main+0x138>)
 80012ae:	f006 fbaf 	bl	8007a10 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_DMA(&huart3, UART3_Rx_buf, GPS_BUF_N);
 80012b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012b6:	4939      	ldr	r1, [pc, #228]	; (800139c <main+0x134>)
 80012b8:	483a      	ldr	r0, [pc, #232]	; (80013a4 <main+0x13c>)
 80012ba:	f007 fac0 	bl	800883e <HAL_UART_Receive_DMA>
  uint8_t mode = BNO055_MODE_COMPASS;
 80012be:	2309      	movs	r3, #9
 80012c0:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_OPRMODE, I2C_MEMADD_SIZE_8BIT, &mode, 1, HAL_MAX_DELAY);
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	223d      	movs	r2, #61	; 0x3d
 80012d4:	2150      	movs	r1, #80	; 0x50
 80012d6:	4834      	ldr	r0, [pc, #208]	; (80013a8 <main+0x140>)
 80012d8:	f004 f90e 	bl	80054f8 <HAL_I2C_Mem_Write>
  HAL_UART_Transmit(&huart2, (uint8_t*) "Hello!\r\n", 8, HAL_MAX_DELAY);
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	2208      	movs	r2, #8
 80012e2:	4932      	ldr	r1, [pc, #200]	; (80013ac <main+0x144>)
 80012e4:	4832      	ldr	r0, [pc, #200]	; (80013b0 <main+0x148>)
 80012e6:	f007 fa1f 	bl	8008728 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80012ea:	f00b fdd9 	bl	800cea0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (i % 100 == 0) format_data(Time, Latitude, Longitude);
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <main+0x14c>)
 80012f2:	fb83 1302 	smull	r1, r3, r3, r2
 80012f6:	1159      	asrs	r1, r3, #5
 80012f8:	17d3      	asrs	r3, r2, #31
 80012fa:	1acb      	subs	r3, r1, r3
 80012fc:	2164      	movs	r1, #100	; 0x64
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d110      	bne.n	800132a <main+0xc2>
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <main+0x150>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <main+0x154>)
 8001310:	ed93 7a00 	vldr	s14, [r3]
 8001314:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <main+0x158>)
 8001316:	edd3 6a00 	vldr	s13, [r3]
 800131a:	eeb0 1a66 	vmov.f32	s2, s13
 800131e:	eef0 0a47 	vmov.f32	s1, s14
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	f7ff feaf 	bl	8001088 <format_data>
    read_heading();
 800132a:	f7ff ff2d 	bl	8001188 <read_heading>
    sprintf((char*) UART2_Tx_buf, "%f\r\n", Heading);
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <main+0x15c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f908 	bl	8000548 <__aeabi_f2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4922      	ldr	r1, [pc, #136]	; (80013c8 <main+0x160>)
 800133e:	4823      	ldr	r0, [pc, #140]	; (80013cc <main+0x164>)
 8001340:	f00d f886 	bl	800e450 <siprintf>
    printd();
 8001344:	f7ff ff7c 	bl	8001240 <printd>

    float comp = (Heading > 180 ? Heading-360 : Heading)/180.0;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <main+0x15c>)
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80013d0 <main+0x168>
 8001352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	dd07      	ble.n	800136c <main+0x104>
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <main+0x15c>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80013d4 <main+0x16c>
 8001366:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800136a:	e002      	b.n	8001372 <main+0x10a>
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <main+0x15c>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	eddf 6a17 	vldr	s13, [pc, #92]	; 80013d0 <main+0x168>
 8001376:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800137a:	ed87 7a02 	vstr	s14, [r7, #8]
    set_steering(comp*2);
 800137e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001382:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	f7ff ff27 	bl	80011dc <set_steering>
    HAL_Delay(10);
 800138e:	200a      	movs	r0, #10
 8001390:	f000 ff66 	bl	8002260 <HAL_Delay>
    i++;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
  {
 800139a:	e7a6      	b.n	80012ea <main+0x82>
 800139c:	200005e8 	.word	0x200005e8
 80013a0:	20000304 	.word	0x20000304
 80013a4:	20000394 	.word	0x20000394
 80013a8:	20000210 	.word	0x20000210
 80013ac:	08012588 	.word	0x08012588
 80013b0:	2000034c 	.word	0x2000034c
 80013b4:	51eb851f 	.word	0x51eb851f
 80013b8:	200005cc 	.word	0x200005cc
 80013bc:	200005d0 	.word	0x200005d0
 80013c0:	200005d4 	.word	0x200005d4
 80013c4:	200005d8 	.word	0x200005d8
 80013c8:	08012594 	.word	0x08012594
 80013cc:	20000778 	.word	0x20000778
 80013d0:	43340000 	.word	0x43340000
 80013d4:	43b40000 	.word	0x43b40000

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	; 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	2230      	movs	r2, #48	; 0x30
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00d f8c3 	bl	800e572 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <SystemClock_Config+0xcc>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a27      	ldr	r2, [pc, #156]	; (80014a4 <SystemClock_Config+0xcc>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <SystemClock_Config+0xcc>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <SystemClock_Config+0xd0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <SystemClock_Config+0xd0>)
 8001422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <SystemClock_Config+0xd0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001434:	2301      	movs	r3, #1
 8001436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143e:	2302      	movs	r3, #2
 8001440:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001442:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001448:	2308      	movs	r3, #8
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800144c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001450:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001452:	2302      	movs	r3, #2
 8001454:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001456:	2307      	movs	r3, #7
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145a:	f107 0320 	add.w	r3, r7, #32
 800145e:	4618      	mov	r0, r3
 8001460:	f005 fbca 	bl	8006bf8 <HAL_RCC_OscConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800146a:	f000 fac7 	bl	80019fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146e:	230f      	movs	r3, #15
 8001470:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001472:	2302      	movs	r3, #2
 8001474:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800147a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800147e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001484:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	2105      	movs	r1, #5
 800148c:	4618      	mov	r0, r3
 800148e:	f005 fe2b 	bl	80070e8 <HAL_RCC_ClockConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001498:	f000 fab0 	bl	80019fc <Error_Handler>
  }
}
 800149c:	bf00      	nop
 800149e:	3750      	adds	r7, #80	; 0x50
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000

080014ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_I2C1_Init+0x50>)
 80014b2:	4a13      	ldr	r2, [pc, #76]	; (8001500 <MX_I2C1_Init+0x54>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_I2C1_Init+0x50>)
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_I2C1_Init+0x58>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_I2C1_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_I2C1_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_I2C1_Init+0x50>)
 80014ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_I2C1_Init+0x50>)
 80014ea:	f003 fec1 	bl	8005270 <HAL_I2C_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014f4:	f000 fa82 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000210 	.word	0x20000210
 8001500:	40005400 	.word	0x40005400
 8001504:	000186a0 	.word	0x000186a0

08001508 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_I2S3_Init+0x54>)
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <MX_I2S3_Init+0x58>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_I2S3_Init+0x54>)
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_I2S3_Init+0x54>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_I2S3_Init+0x54>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <MX_I2S3_Init+0x54>)
 8001528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_I2S3_Init+0x54>)
 8001530:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <MX_I2S3_Init+0x5c>)
 8001532:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_I2S3_Init+0x54>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_I2S3_Init+0x54>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_I2S3_Init+0x54>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_I2S3_Init+0x54>)
 8001548:	f004 feb6 	bl	80062b8 <HAL_I2S_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001552:	f000 fa53 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000264 	.word	0x20000264
 8001560:	40003c00 	.word	0x40003c00
 8001564:	00017700 	.word	0x00017700

08001568 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_SPI1_Init+0x64>)
 800156e:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <MX_SPI1_Init+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_SPI1_Init+0x64>)
 8001574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_SPI1_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_SPI1_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_SPI1_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_SPI1_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_SPI1_Init+0x64>)
 8001594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001598:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_SPI1_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <MX_SPI1_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_SPI1_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <MX_SPI1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_SPI1_Init+0x64>)
 80015b4:	220a      	movs	r2, #10
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <MX_SPI1_Init+0x64>)
 80015ba:	f006 f8f7 	bl	80077ac <HAL_SPI_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015c4:	f000 fa1a 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200002ac 	.word	0x200002ac
 80015d0:	40013000 	.word	0x40013000

080015d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b096      	sub	sp, #88	; 0x58
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2220      	movs	r2, #32
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f00c ffb0 	bl	800e572 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <MX_TIM1_Init+0x13c>)
 8001614:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <MX_TIM1_Init+0x140>)
 8001616:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 8001618:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <MX_TIM1_Init+0x13c>)
 800161a:	22a8      	movs	r2, #168	; 0xa8
 800161c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <MX_TIM1_Init+0x13c>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001624:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <MX_TIM1_Init+0x13c>)
 8001626:	f644 6220 	movw	r2, #20000	; 0x4e20
 800162a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <MX_TIM1_Init+0x13c>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <MX_TIM1_Init+0x13c>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <MX_TIM1_Init+0x13c>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800163e:	4834      	ldr	r0, [pc, #208]	; (8001710 <MX_TIM1_Init+0x13c>)
 8001640:	f006 f93d 	bl	80078be <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800164a:	f000 f9d7 	bl	80019fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001654:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001658:	4619      	mov	r1, r3
 800165a:	482d      	ldr	r0, [pc, #180]	; (8001710 <MX_TIM1_Init+0x13c>)
 800165c:	f006 fb62 	bl	8007d24 <HAL_TIM_ConfigClockSource>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001666:	f000 f9c9 	bl	80019fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800166a:	4829      	ldr	r0, [pc, #164]	; (8001710 <MX_TIM1_Init+0x13c>)
 800166c:	f006 f976 	bl	800795c <HAL_TIM_PWM_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001676:	f000 f9c1 	bl	80019fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001682:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001686:	4619      	mov	r1, r3
 8001688:	4821      	ldr	r0, [pc, #132]	; (8001710 <MX_TIM1_Init+0x13c>)
 800168a:	f006 ff2f 	bl	80084ec <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001694:	f000 f9b2 	bl	80019fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001698:	2360      	movs	r3, #96	; 0x60
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 800169c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016a6:	2300      	movs	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	2200      	movs	r2, #0
 80016bc:	4619      	mov	r1, r3
 80016be:	4814      	ldr	r0, [pc, #80]	; (8001710 <MX_TIM1_Init+0x13c>)
 80016c0:	f006 fa6e 	bl	8007ba0 <HAL_TIM_PWM_ConfigChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80016ca:	f000 f997 	bl	80019fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <MX_TIM1_Init+0x13c>)
 80016f2:	f006 ff77 	bl	80085e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80016fc:	f000 f97e 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <MX_TIM1_Init+0x13c>)
 8001702:	f000 fadb 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 8001706:	bf00      	nop
 8001708:	3758      	adds	r7, #88	; 0x58
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000304 	.word	0x20000304
 8001714:	40010000 	.word	0x40010000

08001718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_USART2_UART_Init+0x4c>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <MX_USART2_UART_Init+0x50>)
 8001720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_USART2_UART_Init+0x4c>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_USART2_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_USART2_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_USART2_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_USART2_UART_Init+0x4c>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <MX_USART2_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_USART2_UART_Init+0x4c>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_USART2_UART_Init+0x4c>)
 8001750:	f006 ff9a 	bl	8008688 <HAL_UART_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800175a:	f000 f94f 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000034c 	.word	0x2000034c
 8001768:	40004400 	.word	0x40004400

0800176c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <MX_USART3_UART_Init+0x50>)
 8001774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001778:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800177c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 80017a4:	f006 ff70 	bl	8008688 <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017ae:	f000 f925 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000394 	.word	0x20000394
 80017bc:	40004800 	.word	0x40004800

080017c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_DMA_Init+0x3c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <MX_DMA_Init+0x3c>)
 80017d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_DMA_Init+0x3c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	200c      	movs	r0, #12
 80017e8:	f000 fe39 	bl	800245e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017ec:	200c      	movs	r0, #12
 80017ee:	f000 fe52 	bl	8002496 <HAL_NVIC_EnableIRQ>

}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08c      	sub	sp, #48	; 0x30
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	4b72      	ldr	r3, [pc, #456]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a71      	ldr	r2, [pc, #452]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b6f      	ldr	r3, [pc, #444]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	4b6b      	ldr	r3, [pc, #428]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a6a      	ldr	r2, [pc, #424]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a63      	ldr	r2, [pc, #396]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 8001858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b5a      	ldr	r3, [pc, #360]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a55      	ldr	r2, [pc, #340]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b4f      	ldr	r3, [pc, #316]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a4e      	ldr	r2, [pc, #312]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <MX_GPIO_Init+0x1e4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2108      	movs	r1, #8
 80018c2:	4849      	ldr	r0, [pc, #292]	; (80019e8 <MX_GPIO_Init+0x1e8>)
 80018c4:	f001 fba0 	bl	8003008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2101      	movs	r1, #1
 80018cc:	4847      	ldr	r0, [pc, #284]	; (80019ec <MX_GPIO_Init+0x1ec>)
 80018ce:	f001 fb9b 	bl	8003008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80018d2:	2200      	movs	r2, #0
 80018d4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80018d8:	4845      	ldr	r0, [pc, #276]	; (80019f0 <MX_GPIO_Init+0x1f0>)
 80018da:	f001 fb95 	bl	8003008 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80018de:	2308      	movs	r3, #8
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	483c      	ldr	r0, [pc, #240]	; (80019e8 <MX_GPIO_Init+0x1e8>)
 80018f6:	f001 f9eb 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4836      	ldr	r0, [pc, #216]	; (80019ec <MX_GPIO_Init+0x1ec>)
 8001912:	f001 f9dd 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001916:	2308      	movs	r3, #8
 8001918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001926:	2305      	movs	r3, #5
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	482e      	ldr	r0, [pc, #184]	; (80019ec <MX_GPIO_Init+0x1ec>)
 8001932:	f001 f9cd 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001936:	2301      	movs	r3, #1
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800193a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	482a      	ldr	r0, [pc, #168]	; (80019f4 <MX_GPIO_Init+0x1f4>)
 800194c:	f001 f9c0 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001950:	2304      	movs	r3, #4
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	4825      	ldr	r0, [pc, #148]	; (80019f8 <MX_GPIO_Init+0x1f8>)
 8001964:	f001 f9b4 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800197a:	2305      	movs	r3, #5
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	481c      	ldr	r0, [pc, #112]	; (80019f8 <MX_GPIO_Init+0x1f8>)
 8001986:	f001 f9a3 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800198a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800198e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4813      	ldr	r0, [pc, #76]	; (80019f0 <MX_GPIO_Init+0x1f0>)
 80019a4:	f001 f994 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019a8:	2320      	movs	r3, #32
 80019aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <MX_GPIO_Init+0x1f0>)
 80019bc:	f001 f988 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_GPIO_Init+0x1e8>)
 80019d6:	f001 f97b 	bl	8002cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019da:	bf00      	nop
 80019dc:	3730      	adds	r7, #48	; 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020c00 	.word	0x40020c00
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400

080019fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a00:	b672      	cpsid	i
}
 8001a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <Error_Handler+0x8>
	...

08001a08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a46:	2007      	movs	r0, #7
 8001a48:	f000 fcfe 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <HAL_I2C_MspInit+0x84>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12c      	bne.n	8001ad4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_I2C_MspInit+0x88>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <HAL_I2C_MspInit+0x88>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_I2C_MspInit+0x88>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9c:	2312      	movs	r3, #18
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <HAL_I2C_MspInit+0x8c>)
 8001ab4:	f001 f90c 	bl	8002cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_I2C_MspInit+0x88>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_I2C_MspInit+0x88>)
 8001ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_I2C_MspInit+0x88>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020400 	.word	0x40020400

08001ae8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08e      	sub	sp, #56	; 0x38
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a31      	ldr	r2, [pc, #196]	; (8001bd8 <HAL_I2S_MspInit+0xf0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d15a      	bne.n	8001bce <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001b1c:	23c0      	movs	r3, #192	; 0xc0
 8001b1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f005 fcfd 	bl	8007528 <HAL_RCCEx_PeriphCLKConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001b34:	f7ff ff62 	bl	80019fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_I2S_MspInit+0xf4>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <HAL_I2S_MspInit+0xf4>)
 8001b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b46:	6413      	str	r3, [r2, #64]	; 0x40
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_I2S_MspInit+0xf4>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_I2S_MspInit+0xf4>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_I2S_MspInit+0xf4>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6313      	str	r3, [r2, #48]	; 0x30
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <HAL_I2S_MspInit+0xf4>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_I2S_MspInit+0xf4>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <HAL_I2S_MspInit+0xf4>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b80:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_I2S_MspInit+0xf4>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b9c:	2306      	movs	r3, #6
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480e      	ldr	r0, [pc, #56]	; (8001be0 <HAL_I2S_MspInit+0xf8>)
 8001ba8:	f001 f892 	bl	8002cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001bac:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4806      	ldr	r0, [pc, #24]	; (8001be4 <HAL_I2S_MspInit+0xfc>)
 8001bca:	f001 f881 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001bce:	bf00      	nop
 8001bd0:	3738      	adds	r7, #56	; 0x38
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40003c00 	.word	0x40003c00
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020800 	.word	0x40020800

08001be8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_SPI_MspInit+0x84>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12b      	bne.n	8001c62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c42:	23e0      	movs	r3, #224	; 0xe0
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c52:	2305      	movs	r3, #5
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <HAL_SPI_MspInit+0x8c>)
 8001c5e:	f001 f837 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	; 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40013000 	.word	0x40013000
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000

08001c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10d      	bne.n	8001ca6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_TIM_Base_MspInit+0x40>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <HAL_TIM_Base_MspInit+0x40>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_TIM_Base_MspInit+0x40>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	40023800 	.word	0x40023800

08001cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <HAL_TIM_MspPostInit+0x68>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d11e      	bne.n	8001d1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_TIM_MspPostInit+0x6c>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_TIM_MspPostInit+0x6c>)
 8001ce8:	f043 0310 	orr.w	r3, r3, #16
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_TIM_MspPostInit+0x6c>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4619      	mov	r1, r3
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_TIM_MspPostInit+0x70>)
 8001d18:	f000 ffda 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d1c:	bf00      	nop
 8001d1e:	3720      	adds	r7, #32
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a5e      	ldr	r2, [pc, #376]	; (8001ec8 <HAL_UART_MspInit+0x198>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12c      	bne.n	8001dac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a5c      	ldr	r2, [pc, #368]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b5a      	ldr	r3, [pc, #360]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a55      	ldr	r2, [pc, #340]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d8a:	230c      	movs	r3, #12
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4619      	mov	r1, r3
 8001da4:	484a      	ldr	r0, [pc, #296]	; (8001ed0 <HAL_UART_MspInit+0x1a0>)
 8001da6:	f000 ff93 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001daa:	e088      	b.n	8001ebe <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a48      	ldr	r2, [pc, #288]	; (8001ed4 <HAL_UART_MspInit+0x1a4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	f040 8083 	bne.w	8001ebe <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	4a42      	ldr	r2, [pc, #264]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc8:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a3b      	ldr	r2, [pc, #236]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
 8001de4:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	4a34      	ldr	r2, [pc, #208]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001dfa:	f043 0308 	orr.w	r3, r3, #8
 8001dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001e00:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_UART_MspInit+0x19c>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e1e:	2307      	movs	r3, #7
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	4619      	mov	r1, r3
 8001e28:	482b      	ldr	r0, [pc, #172]	; (8001ed8 <HAL_UART_MspInit+0x1a8>)
 8001e2a:	f000 ff51 	bl	8002cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e40:	2307      	movs	r3, #7
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4824      	ldr	r0, [pc, #144]	; (8001edc <HAL_UART_MspInit+0x1ac>)
 8001e4c:	f000 ff40 	bl	8002cd0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001e52:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <HAL_UART_MspInit+0x1b4>)
 8001e54:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001e58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e70:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e84:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e86:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001e92:	4813      	ldr	r0, [pc, #76]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001e94:	f000 fb1a 	bl	80024cc <HAL_DMA_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8001e9e:	f7ff fdad 	bl	80019fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <HAL_UART_MspInit+0x1b0>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2027      	movs	r0, #39	; 0x27
 8001eb4:	f000 fad3 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001eb8:	2027      	movs	r0, #39	; 0x27
 8001eba:	f000 faec 	bl	8002496 <HAL_NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3730      	adds	r7, #48	; 0x30
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40004400 	.word	0x40004400
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40004800 	.word	0x40004800
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	200003dc 	.word	0x200003dc
 8001ee4:	40026028 	.word	0x40026028

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eec:	e7fe      	b.n	8001eec <NMI_Handler+0x4>

08001eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f34:	f000 f974 	bl	8002220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <DMA1_Stream1_IRQHandler+0x10>)
 8001f42:	f000 fc5b 	bl	80027fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200003dc 	.word	0x200003dc

08001f50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <USART3_IRQHandler+0x10>)
 8001f56:	f006 fc97 	bl	8008888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000394 	.word	0x20000394

08001f64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <OTG_FS_IRQHandler+0x10>)
 8001f6a:	f001 fb47 	bl	80035fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000bc0 	.word	0x20000bc0

08001f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <_kill>:

int _kill(int pid, int sig)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f92:	f00c fb93 	bl	800e6bc <__errno>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2216      	movs	r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_exit>:

void _exit (int status)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ffe7 	bl	8001f88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fba:	e7fe      	b.n	8001fba <_exit+0x12>

08001fbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e00a      	b.n	8001fe4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fce:	f3af 8000 	nop.w
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbf0      	blt.n	8001fce <_read+0x12>
  }

  return len;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e009      	b.n	800201c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	60ba      	str	r2, [r7, #8]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbf1      	blt.n	8002008 <_write+0x12>
  }
  return len;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_close>:

int _close(int file)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002056:	605a      	str	r2, [r3, #4]
  return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_isatty>:

int _isatty(int file)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <_sbrk+0x5c>)
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <_sbrk+0x60>)
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <_sbrk+0x64>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <_sbrk+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c8:	f00c faf8 	bl	800e6bc <__errno>
 80020cc:	4603      	mov	r3, r0
 80020ce:	220c      	movs	r2, #12
 80020d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e009      	b.n	80020ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <_sbrk+0x64>)
 80020e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20020000 	.word	0x20020000
 80020f8:	00000400 	.word	0x00000400
 80020fc:	200007dc 	.word	0x200007dc
 8002100:	200010f0 	.word	0x200010f0

08002104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <SystemInit+0x20>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <SystemInit+0x20>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002160 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800212c:	f7ff ffea 	bl	8002104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002130:	480c      	ldr	r0, [pc, #48]	; (8002164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002132:	490d      	ldr	r1, [pc, #52]	; (8002168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002148:	4c0a      	ldr	r4, [pc, #40]	; (8002174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002156:	f00c fab7 	bl	800e6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215a:	f7ff f885 	bl	8001268 <main>
  bx  lr    
 800215e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002160:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002168:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800216c:	08012a24 	.word	0x08012a24
  ldr r2, =_sbss
 8002170:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002174:	200010ec 	.word	0x200010ec

08002178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC_IRQHandler>
	...

0800217c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <HAL_Init+0x40>)
 8002186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_Init+0x40>)
 8002192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a07      	ldr	r2, [pc, #28]	; (80021bc <HAL_Init+0x40>)
 800219e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 f94f 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f000 f808 	bl	80021c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b0:	f7ff fc2a 	bl	8001a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x54>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_InitTick+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f967 	bl	80024b2 <HAL_SYSTICK_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00e      	b.n	800220c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d80a      	bhi.n	800220a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f000 f92f 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002200:	4a06      	ldr	r2, [pc, #24]	; (800221c <HAL_InitTick+0x5c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000000 	.word	0x20000000
 8002218:	20000008 	.word	0x20000008
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x20>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_IncTick+0x24>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_IncTick+0x24>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000008 	.word	0x20000008
 8002244:	200007e0 	.word	0x200007e0

08002248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_GetTick+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	200007e0 	.word	0x200007e0

08002260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff ffee 	bl	8002248 <HAL_GetTick>
 800226c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d005      	beq.n	8002286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_Delay+0x44>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002286:	bf00      	nop
 8002288:	f7ff ffde 	bl	8002248 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	d8f7      	bhi.n	8002288 <HAL_Delay+0x28>
  {
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000008 	.word	0x20000008

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <__NVIC_EnableIRQ+0x38>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff8e 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff29 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff3e 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff8e 	bl	800239c <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5d 	bl	8002348 <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff31 	bl	800230c <__NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffa2 	bl	8002404 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff feb6 	bl	8002248 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e099      	b.n	800261c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002508:	e00f      	b.n	800252a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800250a:	f7ff fe9d 	bl	8002248 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b05      	cmp	r3, #5
 8002516:	d908      	bls.n	800252a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2203      	movs	r2, #3
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e078      	b.n	800261c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e8      	bne.n	800250a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4b38      	ldr	r3, [pc, #224]	; (8002624 <HAL_DMA_Init+0x158>)
 8002544:	4013      	ands	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002556:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2b04      	cmp	r3, #4
 8002582:	d107      	bne.n	8002594 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	4313      	orrs	r3, r2
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f023 0307 	bic.w	r3, r3, #7
 80025aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d117      	bne.n	80025ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00e      	beq.n	80025ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fb01 	bl	8002bd8 <DMA_CheckFifoParam>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025ea:	2301      	movs	r3, #1
 80025ec:	e016      	b.n	800261c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fab8 	bl	8002b6c <DMA_CalcBaseAndBitshift>
 80025fc:	4603      	mov	r3, r0
 80025fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	223f      	movs	r2, #63	; 0x3f
 8002606:	409a      	lsls	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	f010803f 	.word	0xf010803f

08002628 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_DMA_Start_IT+0x26>
 800264a:	2302      	movs	r3, #2
 800264c:	e040      	b.n	80026d0 <HAL_DMA_Start_IT+0xa8>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d12f      	bne.n	80026c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fa4a 	bl	8002b10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	223f      	movs	r2, #63	; 0x3f
 8002682:	409a      	lsls	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0216 	orr.w	r2, r2, #22
 8002696:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0208 	orr.w	r2, r2, #8
 80026ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e005      	b.n	80026ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
 80026cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026e6:	f7ff fdaf 	bl	8002248 <HAL_GetTick>
 80026ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d008      	beq.n	800270a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e052      	b.n	80027b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0216 	bic.w	r2, r2, #22
 8002718:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002728:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_DMA_Abort+0x62>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0208 	bic.w	r2, r2, #8
 8002748:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275a:	e013      	b.n	8002784 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800275c:	f7ff fd74 	bl	8002248 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b05      	cmp	r3, #5
 8002768:	d90c      	bls.n	8002784 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2203      	movs	r2, #3
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e015      	b.n	80027b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1e4      	bne.n	800275c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	223f      	movs	r2, #63	; 0x3f
 8002798:	409a      	lsls	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d004      	beq.n	80027d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00c      	b.n	80027f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2205      	movs	r2, #5
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002808:	4b8e      	ldr	r3, [pc, #568]	; (8002a44 <HAL_DMA_IRQHandler+0x248>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a8e      	ldr	r2, [pc, #568]	; (8002a48 <HAL_DMA_IRQHandler+0x24c>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0a9b      	lsrs	r3, r3, #10
 8002814:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	2208      	movs	r2, #8
 8002828:	409a      	lsls	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01a      	beq.n	8002868 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0204 	bic.w	r2, r2, #4
 800284e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	2208      	movs	r2, #8
 8002856:	409a      	lsls	r2, r3
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	2201      	movs	r2, #1
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d012      	beq.n	800289e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	2201      	movs	r2, #1
 800288c:	409a      	lsls	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	f043 0202 	orr.w	r2, r3, #2
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	2204      	movs	r2, #4
 80028a4:	409a      	lsls	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00b      	beq.n	80028d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	2204      	movs	r2, #4
 80028c2:	409a      	lsls	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028cc:	f043 0204 	orr.w	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	2210      	movs	r2, #16
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d043      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d03c      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	2210      	movs	r2, #16
 80028f8:	409a      	lsls	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d018      	beq.n	800293e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d108      	bne.n	800292c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d024      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e01f      	b.n	800296c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01b      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
 800293c:	e016      	b.n	800296c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d107      	bne.n	800295c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0208 	bic.w	r2, r2, #8
 800295a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	2220      	movs	r2, #32
 8002972:	409a      	lsls	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 808f 	beq.w	8002a9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8087 	beq.w	8002a9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	2220      	movs	r2, #32
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	d136      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0216 	bic.w	r2, r2, #22
 80029b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d103      	bne.n	80029d6 <HAL_DMA_IRQHandler+0x1da>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0208 	bic.w	r2, r2, #8
 80029e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	223f      	movs	r2, #63	; 0x3f
 80029ec:	409a      	lsls	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d07e      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
        }
        return;
 8002a12:	e079      	b.n	8002b08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01d      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10d      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d031      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
 8002a40:	e02c      	b.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
 8002a42:	bf00      	nop
 8002a44:	20000000 	.word	0x20000000
 8002a48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d023      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
 8002a5c:	e01e      	b.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10f      	bne.n	8002a8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0210 	bic.w	r2, r2, #16
 8002a7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d032      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d022      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2205      	movs	r2, #5
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	3301      	adds	r3, #1
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d307      	bcc.n	8002ae4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f2      	bne.n	8002ac8 <HAL_DMA_IRQHandler+0x2cc>
 8002ae2:	e000      	b.n	8002ae6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ae4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
 8002b06:	e000      	b.n	8002b0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b08:	bf00      	nop
    }
  }
}
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d108      	bne.n	8002b50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b4e:	e007      	b.n	8002b60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3b10      	subs	r3, #16
 8002b7c:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b86:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d909      	bls.n	8002bae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ba2:	f023 0303 	bic.w	r3, r3, #3
 8002ba6:	1d1a      	adds	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	659a      	str	r2, [r3, #88]	; 0x58
 8002bac:	e007      	b.n	8002bbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	aaaaaaab 	.word	0xaaaaaaab
 8002bd4:	080125c4 	.word	0x080125c4

08002bd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11f      	bne.n	8002c32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d856      	bhi.n	8002ca6 <DMA_CheckFifoParam+0xce>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <DMA_CheckFifoParam+0x28>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c23 	.word	0x08002c23
 8002c08:	08002c11 	.word	0x08002c11
 8002c0c:	08002ca7 	.word	0x08002ca7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d046      	beq.n	8002caa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c20:	e043      	b.n	8002caa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c2a:	d140      	bne.n	8002cae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c30:	e03d      	b.n	8002cae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d121      	bne.n	8002c80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d837      	bhi.n	8002cb2 <DMA_CheckFifoParam+0xda>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <DMA_CheckFifoParam+0x70>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c59 	.word	0x08002c59
 8002c4c:	08002c5f 	.word	0x08002c5f
 8002c50:	08002c59 	.word	0x08002c59
 8002c54:	08002c71 	.word	0x08002c71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5c:	e030      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d025      	beq.n	8002cb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6e:	e022      	b.n	8002cb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c78:	d11f      	bne.n	8002cba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c7e:	e01c      	b.n	8002cba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d903      	bls.n	8002c8e <DMA_CheckFifoParam+0xb6>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d003      	beq.n	8002c94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c8c:	e018      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      break;
 8002c92:	e015      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00e      	beq.n	8002cbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca4:	e00b      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e00a      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
 8002cac:	e008      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e006      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e004      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e002      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cba:	bf00      	nop
 8002cbc:	e000      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cbe:	bf00      	nop
    }
  } 
  
  return status; 
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop

08002cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	e16b      	b.n	8002fc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	f040 815a 	bne.w	8002fbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d005      	beq.n	8002d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d130      	bne.n	8002d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 0201 	and.w	r2, r3, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d017      	beq.n	8002dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d123      	bne.n	8002e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	08da      	lsrs	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3208      	adds	r2, #8
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	220f      	movs	r2, #15
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	69b9      	ldr	r1, [r7, #24]
 8002e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0203 	and.w	r2, r3, #3
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80b4 	beq.w	8002fbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	4b60      	ldr	r3, [pc, #384]	; (8002fdc <HAL_GPIO_Init+0x30c>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	4a5f      	ldr	r2, [pc, #380]	; (8002fdc <HAL_GPIO_Init+0x30c>)
 8002e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e64:	6453      	str	r3, [r2, #68]	; 0x44
 8002e66:	4b5d      	ldr	r3, [pc, #372]	; (8002fdc <HAL_GPIO_Init+0x30c>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e72:	4a5b      	ldr	r2, [pc, #364]	; (8002fe0 <HAL_GPIO_Init+0x310>)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	220f      	movs	r2, #15
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a52      	ldr	r2, [pc, #328]	; (8002fe4 <HAL_GPIO_Init+0x314>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d02b      	beq.n	8002ef6 <HAL_GPIO_Init+0x226>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a51      	ldr	r2, [pc, #324]	; (8002fe8 <HAL_GPIO_Init+0x318>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d025      	beq.n	8002ef2 <HAL_GPIO_Init+0x222>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a50      	ldr	r2, [pc, #320]	; (8002fec <HAL_GPIO_Init+0x31c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01f      	beq.n	8002eee <HAL_GPIO_Init+0x21e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4f      	ldr	r2, [pc, #316]	; (8002ff0 <HAL_GPIO_Init+0x320>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d019      	beq.n	8002eea <HAL_GPIO_Init+0x21a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a4e      	ldr	r2, [pc, #312]	; (8002ff4 <HAL_GPIO_Init+0x324>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_GPIO_Init+0x216>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4d      	ldr	r2, [pc, #308]	; (8002ff8 <HAL_GPIO_Init+0x328>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_GPIO_Init+0x212>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4c      	ldr	r2, [pc, #304]	; (8002ffc <HAL_GPIO_Init+0x32c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d007      	beq.n	8002ede <HAL_GPIO_Init+0x20e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a4b      	ldr	r2, [pc, #300]	; (8003000 <HAL_GPIO_Init+0x330>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_GPIO_Init+0x20a>
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	e00e      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002eda:	2308      	movs	r3, #8
 8002edc:	e00c      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002ede:	2306      	movs	r3, #6
 8002ee0:	e00a      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002ee2:	2305      	movs	r3, #5
 8002ee4:	e008      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002eea:	2303      	movs	r3, #3
 8002eec:	e004      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e002      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	f002 0203 	and.w	r2, r2, #3
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	4093      	lsls	r3, r2
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f08:	4935      	ldr	r1, [pc, #212]	; (8002fe0 <HAL_GPIO_Init+0x310>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_GPIO_Init+0x334>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3a:	4a32      	ldr	r2, [pc, #200]	; (8003004 <HAL_GPIO_Init+0x334>)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f40:	4b30      	ldr	r3, [pc, #192]	; (8003004 <HAL_GPIO_Init+0x334>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f64:	4a27      	ldr	r2, [pc, #156]	; (8003004 <HAL_GPIO_Init+0x334>)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <HAL_GPIO_Init+0x334>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f8e:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <HAL_GPIO_Init+0x334>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_GPIO_Init+0x334>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <HAL_GPIO_Init+0x334>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b0f      	cmp	r3, #15
 8002fc8:	f67f ae90 	bls.w	8002cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3724      	adds	r7, #36	; 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40013800 	.word	0x40013800
 8002fe4:	40020000 	.word	0x40020000
 8002fe8:	40020400 	.word	0x40020400
 8002fec:	40020800 	.word	0x40020800
 8002ff0:	40020c00 	.word	0x40020c00
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40021400 	.word	0x40021400
 8002ffc:	40021800 	.word	0x40021800
 8003000:	40021c00 	.word	0x40021c00
 8003004:	40013c00 	.word	0x40013c00

08003008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
 8003014:	4613      	mov	r3, r2
 8003016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003018:	787b      	ldrb	r3, [r7, #1]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800301e:	887a      	ldrh	r2, [r7, #2]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003024:	e003      	b.n	800302e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	041a      	lsls	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	619a      	str	r2, [r3, #24]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af02      	add	r7, sp, #8
 8003040:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e059      	b.n	8003100 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f009 ff52 	bl	800cf10 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2203      	movs	r2, #3
 8003070:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800307a:	d102      	bne.n	8003082 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f006 fd5b 	bl	8009b42 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7c1a      	ldrb	r2, [r3, #16]
 8003094:	f88d 2000 	strb.w	r2, [sp]
 8003098:	3304      	adds	r3, #4
 800309a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800309c:	f006 fcdc 	bl	8009a58 <USB_CoreInit>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d005      	beq.n	80030b2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e026      	b.n	8003100 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f006 fd53 	bl	8009b64 <USB_SetCurrentMode>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e017      	b.n	8003100 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7c1a      	ldrb	r2, [r3, #16]
 80030d8:	f88d 2000 	strb.w	r2, [sp]
 80030dc:	3304      	adds	r3, #4
 80030de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e0:	f006 fef6 	bl	8009ed0 <USB_HostInit>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e004      	b.n	8003100 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b08b      	sub	sp, #44	; 0x2c
 800310c:	af04      	add	r7, sp, #16
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	4608      	mov	r0, r1
 8003112:	4611      	mov	r1, r2
 8003114:	461a      	mov	r2, r3
 8003116:	4603      	mov	r3, r0
 8003118:	70fb      	strb	r3, [r7, #3]
 800311a:	460b      	mov	r3, r1
 800311c:	70bb      	strb	r3, [r7, #2]
 800311e:	4613      	mov	r3, r2
 8003120:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003122:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003124:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_HCD_HC_Init+0x2c>
 8003130:	2302      	movs	r3, #2
 8003132:	e09d      	b.n	8003270 <HAL_HCD_HC_Init+0x168>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3319      	adds	r3, #25
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3314      	adds	r3, #20
 8003160:	787a      	ldrb	r2, [r7, #1]
 8003162:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3315      	adds	r3, #21
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3326      	adds	r3, #38	; 0x26
 8003188:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800318c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	78bb      	ldrb	r3, [r7, #2]
 8003192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003196:	b2d8      	uxtb	r0, r3
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3316      	adds	r3, #22
 80031a6:	4602      	mov	r2, r0
 80031a8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	4619      	mov	r1, r3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fbc8 	bl	8003944 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80031b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da0a      	bge.n	80031d2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3317      	adds	r3, #23
 80031cc:	2201      	movs	r2, #1
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e009      	b.n	80031e6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	3317      	adds	r3, #23
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f006 ffd4 	bl	800a198 <USB_GetHostSpeed>
 80031f0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80031f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d10b      	bne.n	8003212 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80031fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_HCD_HC_Init+0x10a>
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d104      	bne.n	8003212 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2bbc      	cmp	r3, #188	; 0xbc
 800320c:	d901      	bls.n	8003212 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800320e:	23bc      	movs	r3, #188	; 0xbc
 8003210:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	3318      	adds	r3, #24
 8003222:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003226:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	b298      	uxth	r0, r3
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	3328      	adds	r3, #40	; 0x28
 800323c:	4602      	mov	r2, r0
 800323e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	b29b      	uxth	r3, r3
 8003248:	787c      	ldrb	r4, [r7, #1]
 800324a:	78ba      	ldrb	r2, [r7, #2]
 800324c:	78f9      	ldrb	r1, [r7, #3]
 800324e:	9302      	str	r3, [sp, #8]
 8003250:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	4623      	mov	r3, r4
 800325e:	f006 ffc3 	bl	800a1e8 <USB_HC_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd90      	pop	{r4, r7, pc}

08003278 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_HCD_HC_Halt+0x1e>
 8003292:	2302      	movs	r3, #2
 8003294:	e00f      	b.n	80032b6 <HAL_HCD_HC_Halt+0x3e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f007 fb55 	bl	800a956 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	70fb      	strb	r3, [r7, #3]
 80032d2:	460b      	mov	r3, r1
 80032d4:	70bb      	strb	r3, [r7, #2]
 80032d6:	4613      	mov	r3, r2
 80032d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3317      	adds	r3, #23
 80032ea:	78ba      	ldrb	r2, [r7, #2]
 80032ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3326      	adds	r3, #38	; 0x26
 80032fe:	787a      	ldrb	r2, [r7, #1]
 8003300:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003302:	7c3b      	ldrb	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d114      	bne.n	8003332 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	332a      	adds	r3, #42	; 0x2a
 8003318:	2203      	movs	r2, #3
 800331a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	3319      	adds	r3, #25
 800332c:	7f3a      	ldrb	r2, [r7, #28]
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e009      	b.n	8003346 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	332a      	adds	r3, #42	; 0x2a
 8003342:	2202      	movs	r2, #2
 8003344:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003346:	787b      	ldrb	r3, [r7, #1]
 8003348:	2b03      	cmp	r3, #3
 800334a:	f200 8102 	bhi.w	8003552 <HAL_HCD_HC_SubmitRequest+0x292>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	08003365 	.word	0x08003365
 8003358:	0800353d 	.word	0x0800353d
 800335c:	08003429 	.word	0x08003429
 8003360:	080034b3 	.word	0x080034b3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003364:	7c3b      	ldrb	r3, [r7, #16]
 8003366:	2b01      	cmp	r3, #1
 8003368:	f040 80f5 	bne.w	8003556 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800336c:	78bb      	ldrb	r3, [r7, #2]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d12d      	bne.n	80033ce <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003372:	8b3b      	ldrh	r3, [r7, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	333d      	adds	r3, #61	; 0x3d
 8003388:	2201      	movs	r2, #1
 800338a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	333d      	adds	r3, #61	; 0x3d
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	332a      	adds	r3, #42	; 0x2a
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80033b6:	e0ce      	b.n	8003556 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	332a      	adds	r3, #42	; 0x2a
 80033c8:	2202      	movs	r2, #2
 80033ca:	701a      	strb	r2, [r3, #0]
      break;
 80033cc:	e0c3      	b.n	8003556 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	331a      	adds	r3, #26
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	f040 80b8 	bne.w	8003556 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	333c      	adds	r3, #60	; 0x3c
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	332a      	adds	r3, #42	; 0x2a
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
      break;
 8003410:	e0a1      	b.n	8003556 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	332a      	adds	r3, #42	; 0x2a
 8003422:	2202      	movs	r2, #2
 8003424:	701a      	strb	r2, [r3, #0]
      break;
 8003426:	e096      	b.n	8003556 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003428:	78bb      	ldrb	r3, [r7, #2]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d120      	bne.n	8003470 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	333d      	adds	r3, #61	; 0x3d
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	332a      	adds	r3, #42	; 0x2a
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003458:	e07e      	b.n	8003558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	332a      	adds	r3, #42	; 0x2a
 800346a:	2202      	movs	r2, #2
 800346c:	701a      	strb	r2, [r3, #0]
      break;
 800346e:	e073      	b.n	8003558 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	333c      	adds	r3, #60	; 0x3c
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	332a      	adds	r3, #42	; 0x2a
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
      break;
 800349a:	e05d      	b.n	8003558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	332a      	adds	r3, #42	; 0x2a
 80034ac:	2202      	movs	r2, #2
 80034ae:	701a      	strb	r2, [r3, #0]
      break;
 80034b0:	e052      	b.n	8003558 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80034b2:	78bb      	ldrb	r3, [r7, #2]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d120      	bne.n	80034fa <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	333d      	adds	r3, #61	; 0x3d
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	332a      	adds	r3, #42	; 0x2a
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034e2:	e039      	b.n	8003558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	332a      	adds	r3, #42	; 0x2a
 80034f4:	2202      	movs	r2, #2
 80034f6:	701a      	strb	r2, [r3, #0]
      break;
 80034f8:	e02e      	b.n	8003558 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	333c      	adds	r3, #60	; 0x3c
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	332a      	adds	r3, #42	; 0x2a
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
      break;
 8003524:	e018      	b.n	8003558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	332a      	adds	r3, #42	; 0x2a
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
      break;
 800353a:	e00d      	b.n	8003558 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	332a      	adds	r3, #42	; 0x2a
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
      break;
 8003550:	e002      	b.n	8003558 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003556:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	332c      	adds	r3, #44	; 0x2c
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	8b39      	ldrh	r1, [r7, #24]
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4403      	add	r3, r0
 800357c:	3334      	adds	r3, #52	; 0x34
 800357e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	334c      	adds	r3, #76	; 0x4c
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	3338      	adds	r3, #56	; 0x38
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3315      	adds	r3, #21
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	334d      	adds	r3, #77	; 0x4d
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	3310      	adds	r3, #16
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	1d19      	adds	r1, r3, #4
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	799b      	ldrb	r3, [r3, #6]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f006 ff28 	bl	800a440 <USB_HC_StartXfer>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop

080035fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f006 fc1c 	bl	8009e50 <USB_GetMode>
 8003618:	4603      	mov	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	f040 80fb 	bne.w	8003816 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f006 fbdf 	bl	8009de8 <USB_ReadInterrupts>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80f1 	beq.w	8003814 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f006 fbd6 	bl	8009de8 <USB_ReadInterrupts>
 800363c:	4603      	mov	r3, r0
 800363e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003646:	d104      	bne.n	8003652 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003650:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f006 fbc6 	bl	8009de8 <USB_ReadInterrupts>
 800365c:	4603      	mov	r3, r0
 800365e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003666:	d104      	bne.n	8003672 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003670:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f006 fbb6 	bl	8009de8 <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003686:	d104      	bne.n	8003692 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003690:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f006 fba6 	bl	8009de8 <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d103      	bne.n	80036ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2202      	movs	r2, #2
 80036ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f006 fb98 	bl	8009de8 <USB_ReadInterrupts>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c2:	d120      	bne.n	8003706 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d113      	bne.n	8003706 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80036de:	2110      	movs	r1, #16
 80036e0:	6938      	ldr	r0, [r7, #16]
 80036e2:	f006 fa8b 	bl	8009bfc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80036e6:	6938      	ldr	r0, [r7, #16]
 80036e8:	f006 faba 	bl	8009c60 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7a5b      	ldrb	r3, [r3, #9]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d105      	bne.n	8003700 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2101      	movs	r1, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f006 fcac 	bl	800a058 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f009 fc83 	bl	800d00c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f006 fb6c 	bl	8009de8 <USB_ReadInterrupts>
 8003710:	4603      	mov	r3, r0
 8003712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003716:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800371a:	d102      	bne.n	8003722 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f001 fd33 	bl	8005188 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f006 fb5e 	bl	8009de8 <USB_ReadInterrupts>
 800372c:	4603      	mov	r3, r0
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b08      	cmp	r3, #8
 8003734:	d106      	bne.n	8003744 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f009 fc4c 	bl	800cfd4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2208      	movs	r2, #8
 8003742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f006 fb4d 	bl	8009de8 <USB_ReadInterrupts>
 800374e:	4603      	mov	r3, r0
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003758:	d139      	bne.n	80037ce <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f007 f8e8 	bl	800a934 <USB_HC_ReadInterrupt>
 8003764:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e025      	b.n	80037b8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d018      	beq.n	80037b2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003796:	d106      	bne.n	80037a6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f905 	bl	80039ae <HCD_HC_IN_IRQHandler>
 80037a4:	e005      	b.n	80037b2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	4619      	mov	r1, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 ff67 	bl	8004680 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	3301      	adds	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	795b      	ldrb	r3, [r3, #5]
 80037bc:	461a      	mov	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d3d3      	bcc.n	800376c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f006 fb08 	bl	8009de8 <USB_ReadInterrupts>
 80037d8:	4603      	mov	r3, r0
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d101      	bne.n	80037e6 <HAL_HCD_IRQHandler+0x1ea>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_HCD_IRQHandler+0x1ec>
 80037e6:	2300      	movs	r3, #0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d014      	beq.n	8003816 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0210 	bic.w	r2, r2, #16
 80037fa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f001 fbe4 	bl	8004fca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0210 	orr.w	r2, r2, #16
 8003810:	619a      	str	r2, [r3, #24]
 8003812:	e000      	b.n	8003816 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003814:	bf00      	nop
    }
  }
}
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_HCD_Start+0x16>
 800382e:	2302      	movs	r3, #2
 8003830:	e013      	b.n	800385a <HAL_HCD_Start+0x3e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2101      	movs	r1, #1
 8003840:	4618      	mov	r0, r3
 8003842:	f006 fc70 	bl	800a126 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f006 f968 	bl	8009b20 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_HCD_Stop+0x16>
 8003874:	2302      	movs	r3, #2
 8003876:	e00d      	b.n	8003894 <HAL_HCD_Stop+0x32>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f007 f9c3 	bl	800ac10 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f006 fc12 	bl	800a0d2 <USB_ResetPort>
 80038ae:	4603      	mov	r3, r0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	334c      	adds	r3, #76	; 0x4c
 80038d4:	781b      	ldrb	r3, [r3, #0]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	3338      	adds	r3, #56	; 0x38
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f006 fc54 	bl	800a1c6 <USB_GetCurrentFrame>
 800391e:	4603      	mov	r3, r0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f006 fc2f 	bl	800a198 <USB_GetHostSpeed>
 800393a:	4603      	mov	r3, r0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	331a      	adds	r3, #26
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	331b      	adds	r3, #27
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3325      	adds	r3, #37	; 0x25
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	3324      	adds	r3, #36	; 0x24
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f006 fa1e 	bl	8009e0e <USB_ReadChInterrupts>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d11a      	bne.n	8003a12 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	461a      	mov	r2, r3
 80039ea:	2304      	movs	r3, #4
 80039ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	334d      	adds	r3, #77	; 0x4d
 80039fe:	2207      	movs	r2, #7
 8003a00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f006 ffa3 	bl	800a956 <USB_HC_Halt>
 8003a10:	e09e      	b.n	8003b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f006 f9f7 	bl	8009e0e <USB_ReadChInterrupts>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2a:	d11b      	bne.n	8003a64 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	334d      	adds	r3, #77	; 0x4d
 8003a50:	2208      	movs	r2, #8
 8003a52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f006 ff7a 	bl	800a956 <USB_HC_Halt>
 8003a62:	e075      	b.n	8003b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f006 f9ce 	bl	8009e0e <USB_ReadChInterrupts>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d11a      	bne.n	8003ab2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334d      	adds	r3, #77	; 0x4d
 8003a9e:	2206      	movs	r2, #6
 8003aa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f006 ff53 	bl	800a956 <USB_HC_Halt>
 8003ab0:	e04e      	b.n	8003b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f006 f9a7 	bl	8009e0e <USB_ReadChInterrupts>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aca:	d11b      	bne.n	8003b04 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ade:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	334d      	adds	r3, #77	; 0x4d
 8003af0:	2209      	movs	r2, #9
 8003af2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f006 ff2a 	bl	800a956 <USB_HC_Halt>
 8003b02:	e025      	b.n	8003b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f006 f97e 	bl	8009e0e <USB_ReadChInterrupts>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b80      	cmp	r3, #128	; 0x80
 8003b1a:	d119      	bne.n	8003b50 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	334d      	adds	r3, #77	; 0x4d
 8003b3e:	2207      	movs	r2, #7
 8003b40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f006 ff03 	bl	800a956 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f006 f958 	bl	8009e0e <USB_ReadChInterrupts>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b68:	d112      	bne.n	8003b90 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f006 feef 	bl	800a956 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b84:	461a      	mov	r2, r3
 8003b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b8a:	6093      	str	r3, [r2, #8]
 8003b8c:	f000 bd75 	b.w	800467a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f006 f938 	bl	8009e0e <USB_ReadChInterrupts>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	f040 8128 	bne.w	8003dfa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2320      	movs	r3, #32
 8003bba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	331b      	adds	r3, #27
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d119      	bne.n	8003c06 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	331b      	adds	r3, #27
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c04:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	799b      	ldrb	r3, [r3, #6]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01b      	beq.n	8003c46 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3330      	adds	r3, #48	; 0x30
 8003c1e:	6819      	ldr	r1, [r3, #0]
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	1ac9      	subs	r1, r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4403      	add	r3, r0
 8003c42:	3338      	adds	r3, #56	; 0x38
 8003c44:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	334d      	adds	r3, #77	; 0x4d
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	3344      	adds	r3, #68	; 0x44
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3326      	adds	r3, #38	; 0x26
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3326      	adds	r3, #38	; 0x26
 8003ca6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d110      	bne.n	8003cce <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f006 fe4e 	bl	800a956 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2310      	movs	r3, #16
 8003cca:	6093      	str	r3, [r2, #8]
 8003ccc:	e03d      	b.n	8003d4a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3326      	adds	r3, #38	; 0x26
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d00a      	beq.n	8003cfa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3326      	adds	r3, #38	; 0x26
 8003cf4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d127      	bne.n	8003d4a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d18:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	334c      	adds	r3, #76	; 0x4c
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d2e:	78fa      	ldrb	r2, [r7, #3]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	334c      	adds	r3, #76	; 0x4c
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	4619      	mov	r1, r3
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f009 f96f 	bl	800d028 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	799b      	ldrb	r3, [r3, #6]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d13b      	bne.n	8003dca <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3338      	adds	r3, #56	; 0x38
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4403      	add	r3, r0
 8003d72:	3328      	adds	r3, #40	; 0x28
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	440b      	add	r3, r1
 8003d78:	1e59      	subs	r1, r3, #1
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4403      	add	r3, r0
 8003d88:	3328      	adds	r3, #40	; 0x28
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8470 	beq.w	800467a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	333c      	adds	r3, #60	; 0x3c
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	f083 0301 	eor.w	r3, r3, #1
 8003db2:	b2d8      	uxtb	r0, r3
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	333c      	adds	r3, #60	; 0x3c
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	f000 bc58 	b.w	800467a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	333c      	adds	r3, #60	; 0x3c
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	f083 0301 	eor.w	r3, r3, #1
 8003de2:	b2d8      	uxtb	r0, r3
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	333c      	adds	r3, #60	; 0x3c
 8003df2:	4602      	mov	r2, r0
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	f000 bc40 	b.w	800467a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f006 f803 	bl	8009e0e <USB_ReadChInterrupts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d131      	bne.n	8003e76 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2320      	movs	r3, #32
 8003e22:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	331a      	adds	r3, #26
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	f040 841f 	bne.w	800467a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	331b      	adds	r3, #27
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	334d      	adds	r3, #77	; 0x4d
 8003e60:	2203      	movs	r2, #3
 8003e62:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f006 fd72 	bl	800a956 <USB_HC_Halt>
 8003e72:	f000 bc02 	b.w	800467a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f005 ffc5 	bl	8009e0e <USB_ReadChInterrupts>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	f040 8305 	bne.w	800449a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	334d      	adds	r3, #77	; 0x4d
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d114      	bne.n	8003ee2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	334d      	adds	r3, #77	; 0x4d
 8003ec8:	2202      	movs	r2, #2
 8003eca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	334c      	adds	r3, #76	; 0x4c
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
 8003ee0:	e2cc      	b.n	800447c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	334d      	adds	r3, #77	; 0x4d
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b06      	cmp	r3, #6
 8003ef6:	d114      	bne.n	8003f22 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	334d      	adds	r3, #77	; 0x4d
 8003f08:	2202      	movs	r2, #2
 8003f0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	334c      	adds	r3, #76	; 0x4c
 8003f1c:	2205      	movs	r2, #5
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e2ac      	b.n	800447c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	334d      	adds	r3, #77	; 0x4d
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b07      	cmp	r3, #7
 8003f36:	d00b      	beq.n	8003f50 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	334d      	adds	r3, #77	; 0x4d
 8003f48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f4a:	2b09      	cmp	r3, #9
 8003f4c:	f040 80a6 	bne.w	800409c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	334d      	adds	r3, #77	; 0x4d
 8003f60:	2202      	movs	r2, #2
 8003f62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f64:	78fa      	ldrb	r2, [r7, #3]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	3344      	adds	r3, #68	; 0x44
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	1c59      	adds	r1, r3, #1
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4403      	add	r3, r0
 8003f84:	3344      	adds	r3, #68	; 0x44
 8003f86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	3344      	adds	r3, #68	; 0x44
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d943      	bls.n	8004026 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	3344      	adds	r3, #68	; 0x44
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	331a      	adds	r3, #26
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d123      	bne.n	8004010 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	331b      	adds	r3, #27
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	331c      	adds	r3, #28
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	440a      	add	r2, r1
 8004006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	334c      	adds	r3, #76	; 0x4c
 8004020:	2204      	movs	r2, #4
 8004022:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004024:	e229      	b.n	800447a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	334c      	adds	r3, #76	; 0x4c
 8004036:	2202      	movs	r2, #2
 8004038:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3326      	adds	r3, #38	; 0x26
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3326      	adds	r3, #38	; 0x26
 8004060:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004062:	2b02      	cmp	r3, #2
 8004064:	f040 8209 	bne.w	800447a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800407e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004086:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	461a      	mov	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800409a:	e1ee      	b.n	800447a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	334d      	adds	r3, #77	; 0x4d
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b05      	cmp	r3, #5
 80040b0:	f040 80c8 	bne.w	8004244 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	334d      	adds	r3, #77	; 0x4d
 80040c4:	2202      	movs	r2, #2
 80040c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	331b      	adds	r3, #27
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	f040 81ce 	bne.w	800447c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	3326      	adds	r3, #38	; 0x26
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d16b      	bne.n	80041ce <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	3348      	adds	r3, #72	; 0x48
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	1c59      	adds	r1, r3, #1
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4403      	add	r3, r0
 8004116:	3348      	adds	r3, #72	; 0x48
 8004118:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	3348      	adds	r3, #72	; 0x48
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d943      	bls.n	80041b8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	3348      	adds	r3, #72	; 0x48
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	331b      	adds	r3, #27
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3344      	adds	r3, #68	; 0x44
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d809      	bhi.n	8004182 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	331c      	adds	r3, #28
 800417e:	2201      	movs	r2, #1
 8004180:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4413      	add	r3, r2
 800418a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	440a      	add	r2, r1
 8004198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800419c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	334c      	adds	r3, #76	; 0x4c
 80041b2:	2204      	movs	r2, #4
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e014      	b.n	80041e2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	334c      	adds	r3, #76	; 0x4c
 80041c8:	2202      	movs	r2, #2
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	e009      	b.n	80041e2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	334c      	adds	r3, #76	; 0x4c
 80041de:	2202      	movs	r2, #2
 80041e0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	3326      	adds	r3, #38	; 0x26
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	3326      	adds	r3, #38	; 0x26
 8004208:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800420a:	2b02      	cmp	r3, #2
 800420c:	f040 8136 	bne.w	800447c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004226:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800422e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423c:	461a      	mov	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e11b      	b.n	800447c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	334d      	adds	r3, #77	; 0x4d
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b03      	cmp	r3, #3
 8004258:	f040 8081 	bne.w	800435e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	334d      	adds	r3, #77	; 0x4d
 800426c:	2202      	movs	r2, #2
 800426e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	331b      	adds	r3, #27
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b01      	cmp	r3, #1
 8004284:	f040 80fa 	bne.w	800447c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	334c      	adds	r3, #76	; 0x4c
 8004298:	2202      	movs	r2, #2
 800429a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ba:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	0151      	lsls	r1, r2, #5
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	440a      	add	r2, r1
 80042d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042da:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	0151      	lsls	r1, r2, #5
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	440a      	add	r2, r1
 80042f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f6:	f023 0320 	bic.w	r3, r3, #32
 80042fa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3326      	adds	r3, #38	; 0x26
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004312:	78fa      	ldrb	r2, [r7, #3]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	3326      	adds	r3, #38	; 0x26
 8004322:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004324:	2b02      	cmp	r3, #2
 8004326:	f040 80a9 	bne.w	800447c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4413      	add	r3, r2
 8004332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004340:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004348:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	e08e      	b.n	800447c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	334d      	adds	r3, #77	; 0x4d
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d143      	bne.n	80043fc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	334d      	adds	r3, #77	; 0x4d
 8004384:	2202      	movs	r2, #2
 8004386:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004388:	78fa      	ldrb	r2, [r7, #3]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	334c      	adds	r3, #76	; 0x4c
 8004398:	2202      	movs	r2, #2
 800439a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800439c:	78fa      	ldrb	r2, [r7, #3]
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	3326      	adds	r3, #38	; 0x26
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	3326      	adds	r3, #38	; 0x26
 80043c2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d159      	bne.n	800447c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043de:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043e6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f4:	461a      	mov	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e03f      	b.n	800447c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80043fc:	78fa      	ldrb	r2, [r7, #3]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	334d      	adds	r3, #77	; 0x4d
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b08      	cmp	r3, #8
 8004410:	d126      	bne.n	8004460 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	334d      	adds	r3, #77	; 0x4d
 8004422:	2202      	movs	r2, #2
 8004424:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	3344      	adds	r3, #68	; 0x44
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	1c59      	adds	r1, r3, #1
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4403      	add	r3, r0
 8004446:	3344      	adds	r3, #68	; 0x44
 8004448:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	334c      	adds	r3, #76	; 0x4c
 800445a:	2204      	movs	r2, #4
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	e00d      	b.n	800447c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	334d      	adds	r3, #77	; 0x4d
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b02      	cmp	r3, #2
 8004474:	f000 8100 	beq.w	8004678 <HCD_HC_IN_IRQHandler+0xcca>
 8004478:	e000      	b.n	800447c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800447a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	334c      	adds	r3, #76	; 0x4c
 800448c:	781a      	ldrb	r2, [r3, #0]
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f008 fdc8 	bl	800d028 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004498:	e0ef      	b.n	800467a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	4611      	mov	r1, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f005 fcb3 	bl	8009e0e <USB_ReadChInterrupts>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d12f      	bne.n	8004512 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044be:	461a      	mov	r2, r3
 80044c0:	2340      	movs	r3, #64	; 0x40
 80044c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	334d      	adds	r3, #77	; 0x4d
 80044d4:	2205      	movs	r2, #5
 80044d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	331a      	adds	r3, #26
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	3344      	adds	r3, #68	; 0x44
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f006 fa23 	bl	800a956 <USB_HC_Halt>
 8004510:	e0b3      	b.n	800467a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f005 fc77 	bl	8009e0e <USB_ReadChInterrupts>
 8004520:	4603      	mov	r3, r0
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b10      	cmp	r3, #16
 8004528:	f040 80a7 	bne.w	800467a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	3326      	adds	r3, #38	; 0x26
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d11b      	bne.n	800457a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004542:	78fa      	ldrb	r2, [r7, #3]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	3344      	adds	r3, #68	; 0x44
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	334d      	adds	r3, #77	; 0x4d
 8004566:	2204      	movs	r2, #4
 8004568:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f006 f9ef 	bl	800a956 <USB_HC_Halt>
 8004578:	e03f      	b.n	80045fa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	3326      	adds	r3, #38	; 0x26
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004590:	78fa      	ldrb	r2, [r7, #3]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	3326      	adds	r3, #38	; 0x26
 80045a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d129      	bne.n	80045fa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	3344      	adds	r3, #68	; 0x44
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	799b      	ldrb	r3, [r3, #6]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HCD_HC_IN_IRQHandler+0xc2a>
 80045c2:	78fa      	ldrb	r2, [r7, #3]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	331b      	adds	r3, #27
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d110      	bne.n	80045fa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	334d      	adds	r3, #77	; 0x4d
 80045e8:	2204      	movs	r2, #4
 80045ea:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f006 f9ae 	bl	800a956 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	331b      	adds	r3, #27
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d129      	bne.n	8004664 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	331b      	adds	r3, #27
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	440a      	add	r2, r1
 800463a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800463e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004642:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4413      	add	r3, r2
 800464c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	440a      	add	r2, r1
 800465a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800465e:	f043 0320 	orr.w	r3, r3, #32
 8004662:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4413      	add	r3, r2
 800466c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004670:	461a      	mov	r2, r3
 8004672:	2310      	movs	r3, #16
 8004674:	6093      	str	r3, [r2, #8]
 8004676:	e000      	b.n	800467a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004678:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	78fa      	ldrb	r2, [r7, #3]
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f005 fbb5 	bl	8009e0e <USB_ReadChInterrupts>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d11b      	bne.n	80046e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ba:	461a      	mov	r2, r3
 80046bc:	2304      	movs	r3, #4
 80046be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	334d      	adds	r3, #77	; 0x4d
 80046d0:	2207      	movs	r2, #7
 80046d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f006 f93a 	bl	800a956 <USB_HC_Halt>
 80046e2:	f000 bc6f 	b.w	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f005 fb8d 	bl	8009e0e <USB_ReadChInterrupts>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	f040 8082 	bne.w	8004804 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4413      	add	r3, r2
 8004708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470c:	461a      	mov	r2, r3
 800470e:	2320      	movs	r3, #32
 8004710:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	3319      	adds	r3, #25
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d124      	bne.n	8004772 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	3319      	adds	r3, #25
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	334c      	adds	r3, #76	; 0x4c
 800474c:	2202      	movs	r2, #2
 800474e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	334d      	adds	r3, #77	; 0x4d
 8004760:	2203      	movs	r2, #3
 8004762:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f006 f8f2 	bl	800a956 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	331a      	adds	r3, #26
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	f040 841d 	bne.w	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	331b      	adds	r3, #27
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f040 8411 	bne.w	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	3326      	adds	r3, #38	; 0x26
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d009      	beq.n	80047cc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	331b      	adds	r3, #27
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	334d      	adds	r3, #77	; 0x4d
 80047dc:	2203      	movs	r2, #3
 80047de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	4611      	mov	r1, r2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f006 f8b4 	bl	800a956 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	3344      	adds	r3, #68	; 0x44
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e3df      	b.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f005 fafe 	bl	8009e0e <USB_ReadChInterrupts>
 8004812:	4603      	mov	r3, r0
 8004814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481c:	d111      	bne.n	8004842 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4413      	add	r3, r2
 8004826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482a:	461a      	mov	r2, r3
 800482c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004830:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	4611      	mov	r1, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f006 f88b 	bl	800a956 <USB_HC_Halt>
 8004840:	e3c0      	b.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	4611      	mov	r1, r2
 800484a:	4618      	mov	r0, r3
 800484c:	f005 fadf 	bl	8009e0e <USB_ReadChInterrupts>
 8004850:	4603      	mov	r3, r0
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b01      	cmp	r3, #1
 8004858:	d168      	bne.n	800492c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	3344      	adds	r3, #68	; 0x44
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f005 fac9 	bl	8009e0e <USB_ReadChInterrupts>
 800487c:	4603      	mov	r3, r0
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d112      	bne.n	80048ac <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	3319      	adds	r3, #25
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a6:	461a      	mov	r2, r3
 80048a8:	2340      	movs	r3, #64	; 0x40
 80048aa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80048ac:	78fa      	ldrb	r2, [r7, #3]
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	331b      	adds	r3, #27
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d019      	beq.n	80048f6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	331b      	adds	r3, #27
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004902:	461a      	mov	r2, r3
 8004904:	2301      	movs	r3, #1
 8004906:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004908:	78fa      	ldrb	r2, [r7, #3]
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	4613      	mov	r3, r2
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	334d      	adds	r3, #77	; 0x4d
 8004918:	2201      	movs	r2, #1
 800491a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	4611      	mov	r1, r2
 8004924:	4618      	mov	r0, r3
 8004926:	f006 f816 	bl	800a956 <USB_HC_Halt>
 800492a:	e34b      	b.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f005 fa6a 	bl	8009e0e <USB_ReadChInterrupts>
 800493a:	4603      	mov	r3, r0
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d139      	bne.n	80049b8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	334d      	adds	r3, #77	; 0x4d
 8004954:	2205      	movs	r2, #5
 8004956:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004958:	78fa      	ldrb	r2, [r7, #3]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	331a      	adds	r3, #26
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800496e:	78fa      	ldrb	r2, [r7, #3]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	3319      	adds	r3, #25
 800497e:	2201      	movs	r2, #1
 8004980:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	3344      	adds	r3, #68	; 0x44
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	4611      	mov	r1, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f005 ffd9 	bl	800a956 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b0:	461a      	mov	r2, r3
 80049b2:	2340      	movs	r3, #64	; 0x40
 80049b4:	6093      	str	r3, [r2, #8]
 80049b6:	e305      	b.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f005 fa24 	bl	8009e0e <USB_ReadChInterrupts>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d11a      	bne.n	8004a06 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049dc:	461a      	mov	r2, r3
 80049de:	2308      	movs	r3, #8
 80049e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80049e2:	78fa      	ldrb	r2, [r7, #3]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	1a9b      	subs	r3, r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	334d      	adds	r3, #77	; 0x4d
 80049f2:	2206      	movs	r2, #6
 80049f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	78fa      	ldrb	r2, [r7, #3]
 80049fc:	4611      	mov	r1, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f005 ffa9 	bl	800a956 <USB_HC_Halt>
 8004a04:	e2de      	b.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f005 f9fd 	bl	8009e0e <USB_ReadChInterrupts>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	2b10      	cmp	r3, #16
 8004a1c:	d144      	bne.n	8004aa8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3344      	adds	r3, #68	; 0x44
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	334d      	adds	r3, #77	; 0x4d
 8004a42:	2204      	movs	r2, #4
 8004a44:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3319      	adds	r3, #25
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d114      	bne.n	8004a86 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	3318      	adds	r3, #24
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3319      	adds	r3, #25
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	78fa      	ldrb	r2, [r7, #3]
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f005 ff61 	bl	800a956 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2310      	movs	r3, #16
 8004aa4:	6093      	str	r3, [r2, #8]
 8004aa6:	e28d      	b.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	78fa      	ldrb	r2, [r7, #3]
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f005 f9ac 	bl	8009e0e <USB_ReadChInterrupts>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d169      	bne.n	8004b94 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	799b      	ldrb	r3, [r3, #6]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d111      	bne.n	8004aec <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	334d      	adds	r3, #77	; 0x4d
 8004ad8:	2207      	movs	r2, #7
 8004ada:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	78fa      	ldrb	r2, [r7, #3]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f005 ff36 	bl	800a956 <USB_HC_Halt>
 8004aea:	e049      	b.n	8004b80 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	3344      	adds	r3, #68	; 0x44
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	1c59      	adds	r1, r3, #1
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4403      	add	r3, r0
 8004b0c:	3344      	adds	r3, #68	; 0x44
 8004b0e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b10:	78fa      	ldrb	r2, [r7, #3]
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	4613      	mov	r3, r2
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	3344      	adds	r3, #68	; 0x44
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d922      	bls.n	8004b6c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	3344      	adds	r3, #68	; 0x44
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b3a:	78fa      	ldrb	r2, [r7, #3]
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	334c      	adds	r3, #76	; 0x4c
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b4e:	78fa      	ldrb	r2, [r7, #3]
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	334c      	adds	r3, #76	; 0x4c
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	4619      	mov	r1, r3
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f008 fa5f 	bl	800d028 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b6a:	e009      	b.n	8004b80 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	334c      	adds	r3, #76	; 0x4c
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	6093      	str	r3, [r2, #8]
 8004b92:	e217      	b.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	78fa      	ldrb	r2, [r7, #3]
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f005 f936 	bl	8009e0e <USB_ReadChInterrupts>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bac:	d11b      	bne.n	8004be6 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	334d      	adds	r3, #77	; 0x4d
 8004bbe:	2209      	movs	r2, #9
 8004bc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f005 fec3 	bl	800a956 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004be2:	6093      	str	r3, [r2, #8]
 8004be4:	e1ee      	b.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	4611      	mov	r1, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f005 f90d 	bl	8009e0e <USB_ReadChInterrupts>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	f040 81df 	bne.w	8004fbe <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2302      	movs	r3, #2
 8004c10:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004c12:	78fa      	ldrb	r2, [r7, #3]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	334d      	adds	r3, #77	; 0x4d
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f040 8093 	bne.w	8004d50 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	334d      	adds	r3, #77	; 0x4d
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	334c      	adds	r3, #76	; 0x4c
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	3326      	adds	r3, #38	; 0x26
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d00b      	beq.n	8004c80 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	3326      	adds	r3, #38	; 0x26
 8004c78:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	f040 8190 	bne.w	8004fa0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	799b      	ldrb	r3, [r3, #6]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d115      	bne.n	8004cb4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	333d      	adds	r3, #61	; 0x3d
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	78fa      	ldrb	r2, [r7, #3]
 8004c9c:	f083 0301 	eor.w	r3, r3, #1
 8004ca0:	b2d8      	uxtb	r0, r3
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	333d      	adds	r3, #61	; 0x3d
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	799b      	ldrb	r3, [r3, #6]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	f040 8171 	bne.w	8004fa0 <HCD_HC_OUT_IRQHandler+0x920>
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3334      	adds	r3, #52	; 0x34
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8165 	beq.w	8004fa0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	1a9b      	subs	r3, r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	3334      	adds	r3, #52	; 0x34
 8004ce6:	6819      	ldr	r1, [r3, #0]
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4403      	add	r3, r0
 8004cf6:	3328      	adds	r3, #40	; 0x28
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	440b      	add	r3, r1
 8004cfc:	1e59      	subs	r1, r3, #1
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4403      	add	r3, r0
 8004d0c:	3328      	adds	r3, #40	; 0x28
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d14:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 813f 	beq.w	8004fa0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	333d      	adds	r3, #61	; 0x3d
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	f083 0301 	eor.w	r3, r3, #1
 8004d3a:	b2d8      	uxtb	r0, r3
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	333d      	adds	r3, #61	; 0x3d
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e127      	b.n	8004fa0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	334d      	adds	r3, #77	; 0x4d
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d120      	bne.n	8004da8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	334d      	adds	r3, #77	; 0x4d
 8004d76:	2202      	movs	r2, #2
 8004d78:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	331b      	adds	r3, #27
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	f040 8107 	bne.w	8004fa0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	334c      	adds	r3, #76	; 0x4c
 8004da2:	2202      	movs	r2, #2
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	e0fb      	b.n	8004fa0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	334d      	adds	r3, #77	; 0x4d
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d13a      	bne.n	8004e34 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	334d      	adds	r3, #77	; 0x4d
 8004dce:	2202      	movs	r2, #2
 8004dd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dd2:	78fa      	ldrb	r2, [r7, #3]
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	1a9b      	subs	r3, r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	334c      	adds	r3, #76	; 0x4c
 8004de2:	2202      	movs	r2, #2
 8004de4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	331b      	adds	r3, #27
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	f040 80d1 	bne.w	8004fa0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	331b      	adds	r3, #27
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e30:	6053      	str	r3, [r2, #4]
 8004e32:	e0b5      	b.n	8004fa0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004e34:	78fa      	ldrb	r2, [r7, #3]
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	1a9b      	subs	r3, r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	334d      	adds	r3, #77	; 0x4d
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b05      	cmp	r3, #5
 8004e48:	d114      	bne.n	8004e74 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	334d      	adds	r3, #77	; 0x4d
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	334c      	adds	r3, #76	; 0x4c
 8004e6e:	2202      	movs	r2, #2
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e095      	b.n	8004fa0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	334d      	adds	r3, #77	; 0x4d
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d114      	bne.n	8004eb4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	334d      	adds	r3, #77	; 0x4d
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	334c      	adds	r3, #76	; 0x4c
 8004eae:	2205      	movs	r2, #5
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e075      	b.n	8004fa0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	334d      	adds	r3, #77	; 0x4d
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b07      	cmp	r3, #7
 8004ec8:	d00a      	beq.n	8004ee0 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	334d      	adds	r3, #77	; 0x4d
 8004eda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004edc:	2b09      	cmp	r3, #9
 8004ede:	d170      	bne.n	8004fc2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	334d      	adds	r3, #77	; 0x4d
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	3344      	adds	r3, #68	; 0x44
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	1c59      	adds	r1, r3, #1
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4403      	add	r3, r0
 8004f14:	3344      	adds	r3, #68	; 0x44
 8004f16:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f18:	78fa      	ldrb	r2, [r7, #3]
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	3344      	adds	r3, #68	; 0x44
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d914      	bls.n	8004f58 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f2e:	78fa      	ldrb	r2, [r7, #3]
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	3344      	adds	r3, #68	; 0x44
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f42:	78fa      	ldrb	r2, [r7, #3]
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	334c      	adds	r3, #76	; 0x4c
 8004f52:	2204      	movs	r2, #4
 8004f54:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f56:	e022      	b.n	8004f9e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	1a9b      	subs	r3, r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	334c      	adds	r3, #76	; 0x4c
 8004f68:	2202      	movs	r2, #2
 8004f6a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f82:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f8a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f98:	461a      	mov	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f9e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fa0:	78fa      	ldrb	r2, [r7, #3]
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	334c      	adds	r3, #76	; 0x4c
 8004fb0:	781a      	ldrb	r2, [r3, #0]
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f008 f836 	bl	800d028 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004fbc:	e002      	b.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004fbe:	bf00      	nop
 8004fc0:	e000      	b.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004fc2:	bf00      	nop
  }
}
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b08a      	sub	sp, #40	; 0x28
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	0c5b      	lsrs	r3, r3, #17
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	091b      	lsrs	r3, r3, #4
 8004ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ffe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d004      	beq.n	8005010 <HCD_RXQLVL_IRQHandler+0x46>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b05      	cmp	r3, #5
 800500a:	f000 80b6 	beq.w	800517a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800500e:	e0b7      	b.n	8005180 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 80b3 	beq.w	800517e <HCD_RXQLVL_IRQHandler+0x1b4>
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4613      	mov	r3, r2
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	332c      	adds	r3, #44	; 0x2c
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 80a7 	beq.w	800517e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4613      	mov	r3, r2
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	3338      	adds	r3, #56	; 0x38
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	18d1      	adds	r1, r2, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4403      	add	r3, r0
 8005054:	3334      	adds	r3, #52	; 0x34
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4299      	cmp	r1, r3
 800505a:	f200 8083 	bhi.w	8005164 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4613      	mov	r3, r2
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	332c      	adds	r3, #44	; 0x2c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	b292      	uxth	r2, r2
 8005078:	4619      	mov	r1, r3
 800507a:	f004 fe5d 	bl	8009d38 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4613      	mov	r3, r2
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	332c      	adds	r3, #44	; 0x2c
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	18d1      	adds	r1, r2, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4613      	mov	r3, r2
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4403      	add	r3, r0
 80050a2:	332c      	adds	r3, #44	; 0x2c
 80050a4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4613      	mov	r3, r2
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	3338      	adds	r3, #56	; 0x38
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	18d1      	adds	r1, r2, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4613      	mov	r3, r2
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4403      	add	r3, r0
 80050ca:	3338      	adds	r3, #56	; 0x38
 80050cc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	0cdb      	lsrs	r3, r3, #19
 80050de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	3328      	adds	r3, #40	; 0x28
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d13f      	bne.n	800517e <HCD_RXQLVL_IRQHandler+0x1b4>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d03c      	beq.n	800517e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	4413      	add	r3, r2
 800510c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800511a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005122:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	461a      	mov	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4613      	mov	r3, r2
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	333c      	adds	r3, #60	; 0x3c
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	f083 0301 	eor.w	r3, r3, #1
 800514c:	b2d8      	uxtb	r0, r3
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4613      	mov	r3, r2
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	333c      	adds	r3, #60	; 0x3c
 800515e:	4602      	mov	r2, r0
 8005160:	701a      	strb	r2, [r3, #0]
      break;
 8005162:	e00c      	b.n	800517e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4613      	mov	r3, r2
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	334c      	adds	r3, #76	; 0x4c
 8005174:	2204      	movs	r2, #4
 8005176:	701a      	strb	r2, [r3, #0]
      break;
 8005178:	e001      	b.n	800517e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800517e:	bf00      	nop
  }
}
 8005180:	bf00      	nop
 8005182:	3728      	adds	r7, #40	; 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051b4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d10b      	bne.n	80051d8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d102      	bne.n	80051d0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f007 ff10 	bl	800cff0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f043 0302 	orr.w	r3, r3, #2
 80051d6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d132      	bne.n	8005248 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f043 0308 	orr.w	r3, r3, #8
 80051e8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d126      	bne.n	8005242 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	7a5b      	ldrb	r3, [r3, #9]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d113      	bne.n	8005224 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005206:	d106      	bne.n	8005216 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2102      	movs	r1, #2
 800520e:	4618      	mov	r0, r3
 8005210:	f004 ff22 	bl	800a058 <USB_InitFSLSPClkSel>
 8005214:	e011      	b.n	800523a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2101      	movs	r1, #1
 800521c:	4618      	mov	r0, r3
 800521e:	f004 ff1b 	bl	800a058 <USB_InitFSLSPClkSel>
 8005222:	e00a      	b.n	800523a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	79db      	ldrb	r3, [r3, #7]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d106      	bne.n	800523a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005232:	461a      	mov	r2, r3
 8005234:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005238:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f007 ff02 	bl	800d044 <HAL_HCD_PortEnabled_Callback>
 8005240:	e002      	b.n	8005248 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f007 ff0c 	bl	800d060 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b20      	cmp	r3, #32
 8005250:	d103      	bne.n	800525a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f043 0320 	orr.w	r3, r3, #32
 8005258:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005260:	461a      	mov	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6013      	str	r3, [r2, #0]
}
 8005266:	bf00      	nop
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e12b      	b.n	80054da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc fbde 	bl	8001a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052d4:	f002 f900 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 80052d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4a81      	ldr	r2, [pc, #516]	; (80054e4 <HAL_I2C_Init+0x274>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d807      	bhi.n	80052f4 <HAL_I2C_Init+0x84>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4a80      	ldr	r2, [pc, #512]	; (80054e8 <HAL_I2C_Init+0x278>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	bf94      	ite	ls
 80052ec:	2301      	movls	r3, #1
 80052ee:	2300      	movhi	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	e006      	b.n	8005302 <HAL_I2C_Init+0x92>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a7d      	ldr	r2, [pc, #500]	; (80054ec <HAL_I2C_Init+0x27c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	bf94      	ite	ls
 80052fc:	2301      	movls	r3, #1
 80052fe:	2300      	movhi	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e0e7      	b.n	80054da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a78      	ldr	r2, [pc, #480]	; (80054f0 <HAL_I2C_Init+0x280>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	0c9b      	lsrs	r3, r3, #18
 8005314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4a6a      	ldr	r2, [pc, #424]	; (80054e4 <HAL_I2C_Init+0x274>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d802      	bhi.n	8005344 <HAL_I2C_Init+0xd4>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	3301      	adds	r3, #1
 8005342:	e009      	b.n	8005358 <HAL_I2C_Init+0xe8>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	4a69      	ldr	r2, [pc, #420]	; (80054f4 <HAL_I2C_Init+0x284>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	099b      	lsrs	r3, r3, #6
 8005356:	3301      	adds	r3, #1
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	430b      	orrs	r3, r1
 800535e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800536a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	495c      	ldr	r1, [pc, #368]	; (80054e4 <HAL_I2C_Init+0x274>)
 8005374:	428b      	cmp	r3, r1
 8005376:	d819      	bhi.n	80053ac <HAL_I2C_Init+0x13c>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1e59      	subs	r1, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	fbb1 f3f3 	udiv	r3, r1, r3
 8005386:	1c59      	adds	r1, r3, #1
 8005388:	f640 73fc 	movw	r3, #4092	; 0xffc
 800538c:	400b      	ands	r3, r1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_I2C_Init+0x138>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1e59      	subs	r1, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	fbb1 f3f3 	udiv	r3, r1, r3
 80053a0:	3301      	adds	r3, #1
 80053a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a6:	e051      	b.n	800544c <HAL_I2C_Init+0x1dc>
 80053a8:	2304      	movs	r3, #4
 80053aa:	e04f      	b.n	800544c <HAL_I2C_Init+0x1dc>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d111      	bne.n	80053d8 <HAL_I2C_Init+0x168>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1e58      	subs	r0, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6859      	ldr	r1, [r3, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	440b      	add	r3, r1
 80053c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c6:	3301      	adds	r3, #1
 80053c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e012      	b.n	80053fe <HAL_I2C_Init+0x18e>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1e58      	subs	r0, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	0099      	lsls	r1, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ee:	3301      	adds	r3, #1
 80053f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_I2C_Init+0x196>
 8005402:	2301      	movs	r3, #1
 8005404:	e022      	b.n	800544c <HAL_I2C_Init+0x1dc>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10e      	bne.n	800542c <HAL_I2C_Init+0x1bc>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1e58      	subs	r0, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6859      	ldr	r1, [r3, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	440b      	add	r3, r1
 800541c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005420:	3301      	adds	r3, #1
 8005422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	e00f      	b.n	800544c <HAL_I2C_Init+0x1dc>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	1e58      	subs	r0, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6859      	ldr	r1, [r3, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	0099      	lsls	r1, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005442:	3301      	adds	r3, #1
 8005444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	6809      	ldr	r1, [r1, #0]
 8005450:	4313      	orrs	r3, r2
 8005452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800547a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6911      	ldr	r1, [r2, #16]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68d2      	ldr	r2, [r2, #12]
 8005486:	4311      	orrs	r1, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	430b      	orrs	r3, r1
 800548e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	000186a0 	.word	0x000186a0
 80054e8:	001e847f 	.word	0x001e847f
 80054ec:	003d08ff 	.word	0x003d08ff
 80054f0:	431bde83 	.word	0x431bde83
 80054f4:	10624dd3 	.word	0x10624dd3

080054f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	4608      	mov	r0, r1
 8005502:	4611      	mov	r1, r2
 8005504:	461a      	mov	r2, r3
 8005506:	4603      	mov	r3, r0
 8005508:	817b      	strh	r3, [r7, #10]
 800550a:	460b      	mov	r3, r1
 800550c:	813b      	strh	r3, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005512:	f7fc fe99 	bl	8002248 <HAL_GetTick>
 8005516:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b20      	cmp	r3, #32
 8005522:	f040 80d9 	bne.w	80056d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	2319      	movs	r3, #25
 800552c:	2201      	movs	r2, #1
 800552e:	496d      	ldr	r1, [pc, #436]	; (80056e4 <HAL_I2C_Mem_Write+0x1ec>)
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fc8b 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800553c:	2302      	movs	r3, #2
 800553e:	e0cc      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <HAL_I2C_Mem_Write+0x56>
 800554a:	2302      	movs	r3, #2
 800554c:	e0c5      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d007      	beq.n	8005574 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005582:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2221      	movs	r2, #33	; 0x21
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2240      	movs	r2, #64	; 0x40
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a3a      	ldr	r2, [r7, #32]
 800559e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a4d      	ldr	r2, [pc, #308]	; (80056e8 <HAL_I2C_Mem_Write+0x1f0>)
 80055b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055b6:	88f8      	ldrh	r0, [r7, #6]
 80055b8:	893a      	ldrh	r2, [r7, #8]
 80055ba:	8979      	ldrh	r1, [r7, #10]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	4603      	mov	r3, r0
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fac2 	bl	8005b50 <I2C_RequestMemoryWrite>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d052      	beq.n	8005678 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e081      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fd50 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00d      	beq.n	8005602 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d107      	bne.n	80055fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e06b      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	781a      	ldrb	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b04      	cmp	r3, #4
 800563e:	d11b      	bne.n	8005678 <HAL_I2C_Mem_Write+0x180>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	2b00      	cmp	r3, #0
 8005646:	d017      	beq.n	8005678 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	781a      	ldrb	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1aa      	bne.n	80055d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 fd43 	bl	8006110 <I2C_WaitOnBTFFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00d      	beq.n	80056ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	2b04      	cmp	r3, #4
 8005696:	d107      	bne.n	80056a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e016      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e000      	b.n	80056da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	00100002 	.word	0x00100002
 80056e8:	ffff0000 	.word	0xffff0000

080056ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08c      	sub	sp, #48	; 0x30
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	4608      	mov	r0, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	817b      	strh	r3, [r7, #10]
 80056fe:	460b      	mov	r3, r1
 8005700:	813b      	strh	r3, [r7, #8]
 8005702:	4613      	mov	r3, r2
 8005704:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005706:	f7fc fd9f 	bl	8002248 <HAL_GetTick>
 800570a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b20      	cmp	r3, #32
 8005716:	f040 8214 	bne.w	8005b42 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	2319      	movs	r3, #25
 8005720:	2201      	movs	r2, #1
 8005722:	497b      	ldr	r1, [pc, #492]	; (8005910 <HAL_I2C_Mem_Read+0x224>)
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fb91 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
 8005732:	e207      	b.n	8005b44 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_I2C_Mem_Read+0x56>
 800573e:	2302      	movs	r3, #2
 8005740:	e200      	b.n	8005b44 <HAL_I2C_Mem_Read+0x458>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d007      	beq.n	8005768 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005776:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2222      	movs	r2, #34	; 0x22
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2240      	movs	r2, #64	; 0x40
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a5b      	ldr	r2, [pc, #364]	; (8005914 <HAL_I2C_Mem_Read+0x228>)
 80057a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057aa:	88f8      	ldrh	r0, [r7, #6]
 80057ac:	893a      	ldrh	r2, [r7, #8]
 80057ae:	8979      	ldrh	r1, [r7, #10]
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	9301      	str	r3, [sp, #4]
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	4603      	mov	r3, r0
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fa5e 	bl	8005c7c <I2C_RequestMemoryRead>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e1bc      	b.n	8005b44 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d113      	bne.n	80057fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d2:	2300      	movs	r3, #0
 80057d4:	623b      	str	r3, [r7, #32]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	623b      	str	r3, [r7, #32]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	623b      	str	r3, [r7, #32]
 80057e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e190      	b.n	8005b1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d11b      	bne.n	800583a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e170      	b.n	8005b1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583e:	2b02      	cmp	r3, #2
 8005840:	d11b      	bne.n	800587a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005850:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005862:	2300      	movs	r3, #0
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	e150      	b.n	8005b1c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005890:	e144      	b.n	8005b1c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005896:	2b03      	cmp	r3, #3
 8005898:	f200 80f1 	bhi.w	8005a7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d123      	bne.n	80058ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fc79 	bl	80061a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e145      	b.n	8005b44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058ea:	e117      	b.n	8005b1c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d14e      	bne.n	8005992 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	2200      	movs	r2, #0
 80058fc:	4906      	ldr	r1, [pc, #24]	; (8005918 <HAL_I2C_Mem_Read+0x22c>)
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 faa4 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e11a      	b.n	8005b44 <HAL_I2C_Mem_Read+0x458>
 800590e:	bf00      	nop
 8005910:	00100002 	.word	0x00100002
 8005914:	ffff0000 	.word	0xffff0000
 8005918:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005990:	e0c4      	b.n	8005b1c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	2200      	movs	r2, #0
 800599a:	496c      	ldr	r1, [pc, #432]	; (8005b4c <HAL_I2C_Mem_Read+0x460>)
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fa55 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e0cb      	b.n	8005b44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	2200      	movs	r2, #0
 80059f6:	4955      	ldr	r1, [pc, #340]	; (8005b4c <HAL_I2C_Mem_Read+0x460>)
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 fa27 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e09d      	b.n	8005b44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a7c:	e04e      	b.n	8005b1c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fb8c 	bl	80061a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e058      	b.n	8005b44 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d124      	bne.n	8005b1c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d107      	bne.n	8005aea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f47f aeb6 	bne.w	8005892 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3728      	adds	r7, #40	; 0x28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	00010004 	.word	0x00010004

08005b50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	817b      	strh	r3, [r7, #10]
 8005b62:	460b      	mov	r3, r1
 8005b64:	813b      	strh	r3, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f960 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00d      	beq.n	8005bae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba0:	d103      	bne.n	8005baa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e05f      	b.n	8005c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bae:	897b      	ldrh	r3, [r7, #10]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	6a3a      	ldr	r2, [r7, #32]
 8005bc2:	492d      	ldr	r1, [pc, #180]	; (8005c78 <I2C_RequestMemoryWrite+0x128>)
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f9bb 	bl	8005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e04c      	b.n	8005c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bec:	6a39      	ldr	r1, [r7, #32]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fa46 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00d      	beq.n	8005c16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d107      	bne.n	8005c12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e02b      	b.n	8005c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d105      	bne.n	8005c28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c1c:	893b      	ldrh	r3, [r7, #8]
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	611a      	str	r2, [r3, #16]
 8005c26:	e021      	b.n	8005c6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c28:	893b      	ldrh	r3, [r7, #8]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c38:	6a39      	ldr	r1, [r7, #32]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fa20 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00d      	beq.n	8005c62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d107      	bne.n	8005c5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e005      	b.n	8005c6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c62:	893b      	ldrh	r3, [r7, #8]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	00010002 	.word	0x00010002

08005c7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	4608      	mov	r0, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	817b      	strh	r3, [r7, #10]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	813b      	strh	r3, [r7, #8]
 8005c92:	4613      	mov	r3, r2
 8005c94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ca4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f8c2 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00d      	beq.n	8005cea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cdc:	d103      	bne.n	8005ce6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e0aa      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cea:	897b      	ldrh	r3, [r7, #10]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	6a3a      	ldr	r2, [r7, #32]
 8005cfe:	4952      	ldr	r1, [pc, #328]	; (8005e48 <I2C_RequestMemoryRead+0x1cc>)
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f91d 	bl	8005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e097      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d28:	6a39      	ldr	r1, [r7, #32]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f9a8 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d107      	bne.n	8005d4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e076      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d58:	893b      	ldrh	r3, [r7, #8]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	611a      	str	r2, [r3, #16]
 8005d62:	e021      	b.n	8005da8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d64:	893b      	ldrh	r3, [r7, #8]
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d74:	6a39      	ldr	r1, [r7, #32]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f982 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d107      	bne.n	8005d9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e050      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d9e:	893b      	ldrh	r3, [r7, #8]
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005daa:	6a39      	ldr	r1, [r7, #32]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f967 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00d      	beq.n	8005dd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d107      	bne.n	8005dd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e035      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005de2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f82b 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00d      	beq.n	8005e18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e0a:	d103      	bne.n	8005e14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e013      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e18:	897b      	ldrh	r3, [r7, #10]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	6a3a      	ldr	r2, [r7, #32]
 8005e2c:	4906      	ldr	r1, [pc, #24]	; (8005e48 <I2C_RequestMemoryRead+0x1cc>)
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f886 	bl	8005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	00010002 	.word	0x00010002

08005e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e5c:	e048      	b.n	8005ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d044      	beq.n	8005ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e66:	f7fc f9ef 	bl	8002248 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d302      	bcc.n	8005e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d139      	bne.n	8005ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	0c1b      	lsrs	r3, r3, #16
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d10d      	bne.n	8005ea2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	43da      	mvns	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4013      	ands	r3, r2
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	e00c      	b.n	8005ebc <I2C_WaitOnFlagUntilTimeout+0x70>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	43da      	mvns	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d116      	bne.n	8005ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e023      	b.n	8005f38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	0c1b      	lsrs	r3, r3, #16
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d10d      	bne.n	8005f16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	43da      	mvns	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4013      	ands	r3, r2
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2301      	moveq	r3, #1
 8005f0e:	2300      	movne	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	e00c      	b.n	8005f30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	43da      	mvns	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	4013      	ands	r3, r2
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bf0c      	ite	eq
 8005f28:	2301      	moveq	r3, #1
 8005f2a:	2300      	movne	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d093      	beq.n	8005e5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f4e:	e071      	b.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f5e:	d123      	bne.n	8005fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	f043 0204 	orr.w	r2, r3, #4
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e067      	b.n	8006078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d041      	beq.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb0:	f7fc f94a 	bl	8002248 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d302      	bcc.n	8005fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d136      	bne.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	0c1b      	lsrs	r3, r3, #16
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d10c      	bne.n	8005fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	43da      	mvns	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bf14      	ite	ne
 8005fe2:	2301      	movne	r3, #1
 8005fe4:	2300      	moveq	r3, #0
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	e00b      	b.n	8006002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	43da      	mvns	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bf14      	ite	ne
 8005ffc:	2301      	movne	r3, #1
 8005ffe:	2300      	moveq	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d016      	beq.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	f043 0220 	orr.w	r2, r3, #32
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e021      	b.n	8006078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	0c1b      	lsrs	r3, r3, #16
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b01      	cmp	r3, #1
 800603c:	d10c      	bne.n	8006058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	43da      	mvns	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4013      	ands	r3, r2
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	bf14      	ite	ne
 8006050:	2301      	movne	r3, #1
 8006052:	2300      	moveq	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	e00b      	b.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	43da      	mvns	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	bf14      	ite	ne
 800606a:	2301      	movne	r3, #1
 800606c:	2300      	moveq	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	f47f af6d 	bne.w	8005f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800608c:	e034      	b.n	80060f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f8e3 	bl	800625a <I2C_IsAcknowledgeFailed>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e034      	b.n	8006108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d028      	beq.n	80060f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a6:	f7fc f8cf 	bl	8002248 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d11d      	bne.n	80060f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c6:	2b80      	cmp	r3, #128	; 0x80
 80060c8:	d016      	beq.n	80060f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e007      	b.n	8006108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006102:	2b80      	cmp	r3, #128	; 0x80
 8006104:	d1c3      	bne.n	800608e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800611c:	e034      	b.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f89b 	bl	800625a <I2C_IsAcknowledgeFailed>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e034      	b.n	8006198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	d028      	beq.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006136:	f7fc f887 	bl	8002248 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	429a      	cmp	r2, r3
 8006144:	d302      	bcc.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d11d      	bne.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b04      	cmp	r3, #4
 8006158:	d016      	beq.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	f043 0220 	orr.w	r2, r3, #32
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e007      	b.n	8006198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b04      	cmp	r3, #4
 8006194:	d1c3      	bne.n	800611e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061ac:	e049      	b.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d119      	bne.n	80061f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0210 	mvn.w	r2, #16
 80061c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e030      	b.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f0:	f7fc f82a 	bl	8002248 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d302      	bcc.n	8006206 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d11d      	bne.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	d016      	beq.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f043 0220 	orr.w	r2, r3, #32
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e007      	b.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	d1ae      	bne.n	80061ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d11b      	bne.n	80062aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800627a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f043 0204 	orr.w	r2, r3, #4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e128      	b.n	800651c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a90      	ldr	r2, [pc, #576]	; (8006524 <HAL_I2S_Init+0x26c>)
 80062e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7fb fbff 	bl	8001ae8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006300:	f023 030f 	bic.w	r3, r3, #15
 8006304:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2202      	movs	r2, #2
 800630c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d060      	beq.n	80063d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800631e:	2310      	movs	r3, #16
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	e001      	b.n	8006328 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006324:	2320      	movs	r3, #32
 8006326:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	2b20      	cmp	r3, #32
 800632e:	d802      	bhi.n	8006336 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006336:	2001      	movs	r0, #1
 8006338:	f001 f9d8 	bl	80076ec <HAL_RCCEx_GetPeriphCLKFreq>
 800633c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006346:	d125      	bne.n	8006394 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d010      	beq.n	8006372 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	fbb2 f2f3 	udiv	r2, r2, r3
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	461a      	mov	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	fbb2 f3f3 	udiv	r3, r2, r3
 800636c:	3305      	adds	r3, #5
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	e01f      	b.n	80063b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	fbb2 f2f3 	udiv	r2, r2, r3
 800637c:	4613      	mov	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	461a      	mov	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	3305      	adds	r3, #5
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	e00e      	b.n	80063b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	fbb2 f2f3 	udiv	r2, r2, r3
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	461a      	mov	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ae:	3305      	adds	r3, #5
 80063b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4a5c      	ldr	r2, [pc, #368]	; (8006528 <HAL_I2S_Init+0x270>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	08db      	lsrs	r3, r3, #3
 80063bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	61bb      	str	r3, [r7, #24]
 80063d6:	e003      	b.n	80063e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80063d8:	2302      	movs	r3, #2
 80063da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d902      	bls.n	80063ec <HAL_I2S_Init+0x134>
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	2bff      	cmp	r3, #255	; 0xff
 80063ea:	d907      	bls.n	80063fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f0:	f043 0210 	orr.w	r2, r3, #16
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e08f      	b.n	800651c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	ea42 0103 	orr.w	r1, r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	430a      	orrs	r2, r1
 800640e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800641a:	f023 030f 	bic.w	r3, r3, #15
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6851      	ldr	r1, [r2, #4]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6892      	ldr	r2, [r2, #8]
 8006426:	4311      	orrs	r1, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	68d2      	ldr	r2, [r2, #12]
 800642c:	4311      	orrs	r1, r2
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6992      	ldr	r2, [r2, #24]
 8006432:	430a      	orrs	r2, r1
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800643e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d161      	bne.n	800650c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a38      	ldr	r2, [pc, #224]	; (800652c <HAL_I2S_Init+0x274>)
 800644c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a37      	ldr	r2, [pc, #220]	; (8006530 <HAL_I2S_Init+0x278>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d101      	bne.n	800645c <HAL_I2S_Init+0x1a4>
 8006458:	4b36      	ldr	r3, [pc, #216]	; (8006534 <HAL_I2S_Init+0x27c>)
 800645a:	e001      	b.n	8006460 <HAL_I2S_Init+0x1a8>
 800645c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	4932      	ldr	r1, [pc, #200]	; (8006530 <HAL_I2S_Init+0x278>)
 8006468:	428a      	cmp	r2, r1
 800646a:	d101      	bne.n	8006470 <HAL_I2S_Init+0x1b8>
 800646c:	4a31      	ldr	r2, [pc, #196]	; (8006534 <HAL_I2S_Init+0x27c>)
 800646e:	e001      	b.n	8006474 <HAL_I2S_Init+0x1bc>
 8006470:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006474:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006478:	f023 030f 	bic.w	r3, r3, #15
 800647c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a2b      	ldr	r2, [pc, #172]	; (8006530 <HAL_I2S_Init+0x278>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d101      	bne.n	800648c <HAL_I2S_Init+0x1d4>
 8006488:	4b2a      	ldr	r3, [pc, #168]	; (8006534 <HAL_I2S_Init+0x27c>)
 800648a:	e001      	b.n	8006490 <HAL_I2S_Init+0x1d8>
 800648c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006490:	2202      	movs	r2, #2
 8006492:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a25      	ldr	r2, [pc, #148]	; (8006530 <HAL_I2S_Init+0x278>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d101      	bne.n	80064a2 <HAL_I2S_Init+0x1ea>
 800649e:	4b25      	ldr	r3, [pc, #148]	; (8006534 <HAL_I2S_Init+0x27c>)
 80064a0:	e001      	b.n	80064a6 <HAL_I2S_Init+0x1ee>
 80064a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b2:	d003      	beq.n	80064bc <HAL_I2S_Init+0x204>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d103      	bne.n	80064c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80064bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	e001      	b.n	80064c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064d2:	4313      	orrs	r3, r2
 80064d4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064dc:	4313      	orrs	r3, r2
 80064de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064e6:	4313      	orrs	r3, r2
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	897b      	ldrh	r3, [r7, #10]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a0d      	ldr	r2, [pc, #52]	; (8006530 <HAL_I2S_Init+0x278>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d101      	bne.n	8006504 <HAL_I2S_Init+0x24c>
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <HAL_I2S_Init+0x27c>)
 8006502:	e001      	b.n	8006508 <HAL_I2S_Init+0x250>
 8006504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006508:	897a      	ldrh	r2, [r7, #10]
 800650a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	0800662f 	.word	0x0800662f
 8006528:	cccccccd 	.word	0xcccccccd
 800652c:	08006745 	.word	0x08006745
 8006530:	40003800 	.word	0x40003800
 8006534:	40003400 	.word	0x40003400

08006538 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	881a      	ldrh	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	1c9a      	adds	r2, r3, #2
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10e      	bne.n	80065c8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff ffb8 	bl	8006538 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80065c8:	bf00      	nop
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e2:	b292      	uxth	r2, r2
 80065e4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ea:	1c9a      	adds	r2, r3, #2
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006602:	b29b      	uxth	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10e      	bne.n	8006626 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006616:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff ff93 	bl	800654c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b086      	sub	sp, #24
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b04      	cmp	r3, #4
 8006648:	d13a      	bne.n	80066c0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b01      	cmp	r3, #1
 8006652:	d109      	bne.n	8006668 <I2S_IRQHandler+0x3a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d102      	bne.n	8006668 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff ffb4 	bl	80065d0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666e:	2b40      	cmp	r3, #64	; 0x40
 8006670:	d126      	bne.n	80066c0 <I2S_IRQHandler+0x92>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b20      	cmp	r3, #32
 800667e:	d11f      	bne.n	80066c0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800668e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006690:	2300      	movs	r3, #0
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	613b      	str	r3, [r7, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b2:	f043 0202 	orr.w	r2, r3, #2
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff ff50 	bl	8006560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d136      	bne.n	800673a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d109      	bne.n	80066ea <I2S_IRQHandler+0xbc>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e0:	2b80      	cmp	r3, #128	; 0x80
 80066e2:	d102      	bne.n	80066ea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff ff45 	bl	8006574 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f003 0308 	and.w	r3, r3, #8
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d122      	bne.n	800673a <I2S_IRQHandler+0x10c>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d11b      	bne.n	800673a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006710:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672c:	f043 0204 	orr.w	r2, r3, #4
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff ff13 	bl	8006560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800673a:	bf00      	nop
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a92      	ldr	r2, [pc, #584]	; (80069a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d101      	bne.n	8006762 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800675e:	4b92      	ldr	r3, [pc, #584]	; (80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006760:	e001      	b.n	8006766 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a8b      	ldr	r2, [pc, #556]	; (80069a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d101      	bne.n	8006780 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800677c:	4b8a      	ldr	r3, [pc, #552]	; (80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800677e:	e001      	b.n	8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006790:	d004      	beq.n	800679c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 8099 	bne.w	80068ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d107      	bne.n	80067b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f925 	bl	8006a00 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d107      	bne.n	80067d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9c8 	bl	8006b60 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d6:	2b40      	cmp	r3, #64	; 0x40
 80067d8:	d13a      	bne.n	8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f003 0320 	and.w	r3, r3, #32
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d035      	beq.n	8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a6e      	ldr	r2, [pc, #440]	; (80069a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d101      	bne.n	80067f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80067ee:	4b6e      	ldr	r3, [pc, #440]	; (80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067f0:	e001      	b.n	80067f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80067f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4969      	ldr	r1, [pc, #420]	; (80069a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067fe:	428b      	cmp	r3, r1
 8006800:	d101      	bne.n	8006806 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006802:	4b69      	ldr	r3, [pc, #420]	; (80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006804:	e001      	b.n	800680a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006806:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800680a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800680e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800681e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006842:	f043 0202 	orr.w	r2, r3, #2
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff fe88 	bl	8006560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b08      	cmp	r3, #8
 8006858:	f040 80c3 	bne.w	80069e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80bd 	beq.w	80069e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006876:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a49      	ldr	r2, [pc, #292]	; (80069a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d101      	bne.n	8006886 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006882:	4b49      	ldr	r3, [pc, #292]	; (80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006884:	e001      	b.n	800688a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4944      	ldr	r1, [pc, #272]	; (80069a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006892:	428b      	cmp	r3, r1
 8006894:	d101      	bne.n	800689a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006896:	4b44      	ldr	r3, [pc, #272]	; (80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006898:	e001      	b.n	800689e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800689a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800689e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068a2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068a4:	2300      	movs	r3, #0
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	60bb      	str	r3, [r7, #8]
 80068b0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068be:	f043 0204 	orr.w	r2, r3, #4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff fe4a 	bl	8006560 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80068cc:	e089      	b.n	80069e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d107      	bne.n	80068e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f8be 	bl	8006a64 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d107      	bne.n	8006902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f8fd 	bl	8006afc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b40      	cmp	r3, #64	; 0x40
 800690a:	d12f      	bne.n	800696c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b00      	cmp	r3, #0
 8006914:	d02a      	beq.n	800696c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006924:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1e      	ldr	r2, [pc, #120]	; (80069a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d101      	bne.n	8006934 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006930:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006932:	e001      	b.n	8006938 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4919      	ldr	r1, [pc, #100]	; (80069a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006940:	428b      	cmp	r3, r1
 8006942:	d101      	bne.n	8006948 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006944:	4b18      	ldr	r3, [pc, #96]	; (80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006946:	e001      	b.n	800694c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800694c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006950:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	f043 0202 	orr.w	r2, r3, #2
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff fdfa 	bl	8006560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b08      	cmp	r3, #8
 8006974:	d136      	bne.n	80069e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d031      	beq.n	80069e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a07      	ldr	r2, [pc, #28]	; (80069a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d101      	bne.n	800698e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800698a:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800698c:	e001      	b.n	8006992 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800698e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4902      	ldr	r1, [pc, #8]	; (80069a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800699a:	428b      	cmp	r3, r1
 800699c:	d106      	bne.n	80069ac <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800699e:	4b02      	ldr	r3, [pc, #8]	; (80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069a0:	e006      	b.n	80069b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80069a2:	bf00      	nop
 80069a4:	40003800 	.word	0x40003800
 80069a8:	40003400 	.word	0x40003400
 80069ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069b4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d2:	f043 0204 	orr.w	r2, r3, #4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff fdc0 	bl	8006560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069e0:	e000      	b.n	80069e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069e2:	bf00      	nop
}
 80069e4:	bf00      	nop
 80069e6:	3720      	adds	r7, #32
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	1c99      	adds	r1, r3, #2
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6251      	str	r1, [r2, #36]	; 0x24
 8006a12:	881a      	ldrh	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b01      	subs	r3, #1
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d113      	bne.n	8006a5a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ffc9 	bl	80069ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	1c99      	adds	r1, r3, #2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6251      	str	r1, [r2, #36]	; 0x24
 8006a76:	8819      	ldrh	r1, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <I2SEx_TxISR_I2SExt+0x90>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d101      	bne.n	8006a86 <I2SEx_TxISR_I2SExt+0x22>
 8006a82:	4b1d      	ldr	r3, [pc, #116]	; (8006af8 <I2SEx_TxISR_I2SExt+0x94>)
 8006a84:	e001      	b.n	8006a8a <I2SEx_TxISR_I2SExt+0x26>
 8006a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a8a:	460a      	mov	r2, r1
 8006a8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d121      	bne.n	8006aea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a12      	ldr	r2, [pc, #72]	; (8006af4 <I2SEx_TxISR_I2SExt+0x90>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d101      	bne.n	8006ab4 <I2SEx_TxISR_I2SExt+0x50>
 8006ab0:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <I2SEx_TxISR_I2SExt+0x94>)
 8006ab2:	e001      	b.n	8006ab8 <I2SEx_TxISR_I2SExt+0x54>
 8006ab4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	490d      	ldr	r1, [pc, #52]	; (8006af4 <I2SEx_TxISR_I2SExt+0x90>)
 8006ac0:	428b      	cmp	r3, r1
 8006ac2:	d101      	bne.n	8006ac8 <I2SEx_TxISR_I2SExt+0x64>
 8006ac4:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <I2SEx_TxISR_I2SExt+0x94>)
 8006ac6:	e001      	b.n	8006acc <I2SEx_TxISR_I2SExt+0x68>
 8006ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006acc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ad0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff ff81 	bl	80069ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	40003800 	.word	0x40003800
 8006af8:	40003400 	.word	0x40003400

08006afc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68d8      	ldr	r0, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	1c99      	adds	r1, r3, #2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b14:	b282      	uxth	r2, r0
 8006b16:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d113      	bne.n	8006b58 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b3e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d106      	bne.n	8006b58 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff ff4a 	bl	80069ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a20      	ldr	r2, [pc, #128]	; (8006bf0 <I2SEx_RxISR_I2SExt+0x90>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d101      	bne.n	8006b76 <I2SEx_RxISR_I2SExt+0x16>
 8006b72:	4b20      	ldr	r3, [pc, #128]	; (8006bf4 <I2SEx_RxISR_I2SExt+0x94>)
 8006b74:	e001      	b.n	8006b7a <I2SEx_RxISR_I2SExt+0x1a>
 8006b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b7a:	68d8      	ldr	r0, [r3, #12]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	1c99      	adds	r1, r3, #2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b86:	b282      	uxth	r2, r0
 8006b88:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d121      	bne.n	8006be6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a12      	ldr	r2, [pc, #72]	; (8006bf0 <I2SEx_RxISR_I2SExt+0x90>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d101      	bne.n	8006bb0 <I2SEx_RxISR_I2SExt+0x50>
 8006bac:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <I2SEx_RxISR_I2SExt+0x94>)
 8006bae:	e001      	b.n	8006bb4 <I2SEx_RxISR_I2SExt+0x54>
 8006bb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	490d      	ldr	r1, [pc, #52]	; (8006bf0 <I2SEx_RxISR_I2SExt+0x90>)
 8006bbc:	428b      	cmp	r3, r1
 8006bbe:	d101      	bne.n	8006bc4 <I2SEx_RxISR_I2SExt+0x64>
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <I2SEx_RxISR_I2SExt+0x94>)
 8006bc2:	e001      	b.n	8006bc8 <I2SEx_RxISR_I2SExt+0x68>
 8006bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006bcc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d106      	bne.n	8006be6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff ff03 	bl	80069ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40003800 	.word	0x40003800
 8006bf4:	40003400 	.word	0x40003400

08006bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e267      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d075      	beq.n	8006d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c16:	4b88      	ldr	r3, [pc, #544]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 030c 	and.w	r3, r3, #12
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d00c      	beq.n	8006c3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c22:	4b85      	ldr	r3, [pc, #532]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d112      	bne.n	8006c54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c2e:	4b82      	ldr	r3, [pc, #520]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c3a:	d10b      	bne.n	8006c54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c3c:	4b7e      	ldr	r3, [pc, #504]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d05b      	beq.n	8006d00 <HAL_RCC_OscConfig+0x108>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d157      	bne.n	8006d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e242      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5c:	d106      	bne.n	8006c6c <HAL_RCC_OscConfig+0x74>
 8006c5e:	4b76      	ldr	r3, [pc, #472]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a75      	ldr	r2, [pc, #468]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	e01d      	b.n	8006ca8 <HAL_RCC_OscConfig+0xb0>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c74:	d10c      	bne.n	8006c90 <HAL_RCC_OscConfig+0x98>
 8006c76:	4b70      	ldr	r3, [pc, #448]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a6f      	ldr	r2, [pc, #444]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	4b6d      	ldr	r3, [pc, #436]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a6c      	ldr	r2, [pc, #432]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	e00b      	b.n	8006ca8 <HAL_RCC_OscConfig+0xb0>
 8006c90:	4b69      	ldr	r3, [pc, #420]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a68      	ldr	r2, [pc, #416]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	4b66      	ldr	r3, [pc, #408]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a65      	ldr	r2, [pc, #404]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d013      	beq.n	8006cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb0:	f7fb faca 	bl	8002248 <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cb8:	f7fb fac6 	bl	8002248 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b64      	cmp	r3, #100	; 0x64
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e207      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cca:	4b5b      	ldr	r3, [pc, #364]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0f0      	beq.n	8006cb8 <HAL_RCC_OscConfig+0xc0>
 8006cd6:	e014      	b.n	8006d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd8:	f7fb fab6 	bl	8002248 <HAL_GetTick>
 8006cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ce0:	f7fb fab2 	bl	8002248 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b64      	cmp	r3, #100	; 0x64
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e1f3      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cf2:	4b51      	ldr	r3, [pc, #324]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1f0      	bne.n	8006ce0 <HAL_RCC_OscConfig+0xe8>
 8006cfe:	e000      	b.n	8006d02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d063      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d0e:	4b4a      	ldr	r3, [pc, #296]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00b      	beq.n	8006d32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d1a:	4b47      	ldr	r3, [pc, #284]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	d11c      	bne.n	8006d60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d26:	4b44      	ldr	r3, [pc, #272]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d116      	bne.n	8006d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d32:	4b41      	ldr	r3, [pc, #260]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_RCC_OscConfig+0x152>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d001      	beq.n	8006d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e1c7      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d4a:	4b3b      	ldr	r3, [pc, #236]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4937      	ldr	r1, [pc, #220]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d5e:	e03a      	b.n	8006dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d020      	beq.n	8006daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d68:	4b34      	ldr	r3, [pc, #208]	; (8006e3c <HAL_RCC_OscConfig+0x244>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6e:	f7fb fa6b 	bl	8002248 <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d74:	e008      	b.n	8006d88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d76:	f7fb fa67 	bl	8002248 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e1a8      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d88:	4b2b      	ldr	r3, [pc, #172]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0f0      	beq.n	8006d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d94:	4b28      	ldr	r3, [pc, #160]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	4925      	ldr	r1, [pc, #148]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	600b      	str	r3, [r1, #0]
 8006da8:	e015      	b.n	8006dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006daa:	4b24      	ldr	r3, [pc, #144]	; (8006e3c <HAL_RCC_OscConfig+0x244>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db0:	f7fb fa4a 	bl	8002248 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006db8:	f7fb fa46 	bl	8002248 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e187      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dca:	4b1b      	ldr	r3, [pc, #108]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d036      	beq.n	8006e50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d016      	beq.n	8006e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dea:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <HAL_RCC_OscConfig+0x248>)
 8006dec:	2201      	movs	r2, #1
 8006dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df0:	f7fb fa2a 	bl	8002248 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006df8:	f7fb fa26 	bl	8002248 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e167      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0f0      	beq.n	8006df8 <HAL_RCC_OscConfig+0x200>
 8006e16:	e01b      	b.n	8006e50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e18:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <HAL_RCC_OscConfig+0x248>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e1e:	f7fb fa13 	bl	8002248 <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e24:	e00e      	b.n	8006e44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e26:	f7fb fa0f 	bl	8002248 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d907      	bls.n	8006e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e150      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	42470000 	.word	0x42470000
 8006e40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e44:	4b88      	ldr	r3, [pc, #544]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1ea      	bne.n	8006e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8097 	beq.w	8006f8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e62:	4b81      	ldr	r3, [pc, #516]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10f      	bne.n	8006e8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60bb      	str	r3, [r7, #8]
 8006e72:	4b7d      	ldr	r3, [pc, #500]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	4a7c      	ldr	r2, [pc, #496]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e7e:	4b7a      	ldr	r3, [pc, #488]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e86:	60bb      	str	r3, [r7, #8]
 8006e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e8e:	4b77      	ldr	r3, [pc, #476]	; (800706c <HAL_RCC_OscConfig+0x474>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d118      	bne.n	8006ecc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e9a:	4b74      	ldr	r3, [pc, #464]	; (800706c <HAL_RCC_OscConfig+0x474>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a73      	ldr	r2, [pc, #460]	; (800706c <HAL_RCC_OscConfig+0x474>)
 8006ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ea6:	f7fb f9cf 	bl	8002248 <HAL_GetTick>
 8006eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eac:	e008      	b.n	8006ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eae:	f7fb f9cb 	bl	8002248 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e10c      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec0:	4b6a      	ldr	r3, [pc, #424]	; (800706c <HAL_RCC_OscConfig+0x474>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0f0      	beq.n	8006eae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d106      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x2ea>
 8006ed4:	4b64      	ldr	r3, [pc, #400]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	4a63      	ldr	r2, [pc, #396]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee0:	e01c      	b.n	8006f1c <HAL_RCC_OscConfig+0x324>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d10c      	bne.n	8006f04 <HAL_RCC_OscConfig+0x30c>
 8006eea:	4b5f      	ldr	r3, [pc, #380]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	4a5e      	ldr	r2, [pc, #376]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006ef0:	f043 0304 	orr.w	r3, r3, #4
 8006ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ef6:	4b5c      	ldr	r3, [pc, #368]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efa:	4a5b      	ldr	r2, [pc, #364]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006efc:	f043 0301 	orr.w	r3, r3, #1
 8006f00:	6713      	str	r3, [r2, #112]	; 0x70
 8006f02:	e00b      	b.n	8006f1c <HAL_RCC_OscConfig+0x324>
 8006f04:	4b58      	ldr	r3, [pc, #352]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f08:	4a57      	ldr	r2, [pc, #348]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f10:	4b55      	ldr	r3, [pc, #340]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	4a54      	ldr	r2, [pc, #336]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f16:	f023 0304 	bic.w	r3, r3, #4
 8006f1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d015      	beq.n	8006f50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f24:	f7fb f990 	bl	8002248 <HAL_GetTick>
 8006f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2a:	e00a      	b.n	8006f42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2c:	f7fb f98c 	bl	8002248 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e0cb      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f42:	4b49      	ldr	r3, [pc, #292]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0ee      	beq.n	8006f2c <HAL_RCC_OscConfig+0x334>
 8006f4e:	e014      	b.n	8006f7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f50:	f7fb f97a 	bl	8002248 <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f56:	e00a      	b.n	8006f6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f58:	f7fb f976 	bl	8002248 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e0b5      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f6e:	4b3e      	ldr	r3, [pc, #248]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1ee      	bne.n	8006f58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d105      	bne.n	8006f8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f80:	4b39      	ldr	r3, [pc, #228]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	4a38      	ldr	r2, [pc, #224]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 80a1 	beq.w	80070d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f96:	4b34      	ldr	r3, [pc, #208]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 030c 	and.w	r3, r3, #12
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d05c      	beq.n	800705c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d141      	bne.n	800702e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006faa:	4b31      	ldr	r3, [pc, #196]	; (8007070 <HAL_RCC_OscConfig+0x478>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb0:	f7fb f94a 	bl	8002248 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb8:	f7fb f946 	bl	8002248 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e087      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fca:	4b27      	ldr	r3, [pc, #156]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	69da      	ldr	r2, [r3, #28]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	085b      	lsrs	r3, r3, #1
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	041b      	lsls	r3, r3, #16
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	491b      	ldr	r1, [pc, #108]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007000:	4b1b      	ldr	r3, [pc, #108]	; (8007070 <HAL_RCC_OscConfig+0x478>)
 8007002:	2201      	movs	r2, #1
 8007004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007006:	f7fb f91f 	bl	8002248 <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800700e:	f7fb f91b 	bl	8002248 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e05c      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007020:	4b11      	ldr	r3, [pc, #68]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f0      	beq.n	800700e <HAL_RCC_OscConfig+0x416>
 800702c:	e054      	b.n	80070d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800702e:	4b10      	ldr	r3, [pc, #64]	; (8007070 <HAL_RCC_OscConfig+0x478>)
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007034:	f7fb f908 	bl	8002248 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800703c:	f7fb f904 	bl	8002248 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e045      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800704e:	4b06      	ldr	r3, [pc, #24]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1f0      	bne.n	800703c <HAL_RCC_OscConfig+0x444>
 800705a:	e03d      	b.n	80070d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d107      	bne.n	8007074 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e038      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
 8007068:	40023800 	.word	0x40023800
 800706c:	40007000 	.word	0x40007000
 8007070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007074:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <HAL_RCC_OscConfig+0x4ec>)
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d028      	beq.n	80070d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800708c:	429a      	cmp	r2, r3
 800708e:	d121      	bne.n	80070d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800709a:	429a      	cmp	r2, r3
 800709c:	d11a      	bne.n	80070d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070a4:	4013      	ands	r3, r2
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d111      	bne.n	80070d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	3b01      	subs	r3, #1
 80070be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d107      	bne.n	80070d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d001      	beq.n	80070d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e000      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40023800 	.word	0x40023800

080070e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e0cc      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070fc:	4b68      	ldr	r3, [pc, #416]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d90c      	bls.n	8007124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710a:	4b65      	ldr	r3, [pc, #404]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007112:	4b63      	ldr	r3, [pc, #396]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d001      	beq.n	8007124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e0b8      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d020      	beq.n	8007172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800713c:	4b59      	ldr	r3, [pc, #356]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	4a58      	ldr	r2, [pc, #352]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007154:	4b53      	ldr	r3, [pc, #332]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	4a52      	ldr	r2, [pc, #328]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800715a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800715e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007160:	4b50      	ldr	r3, [pc, #320]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	494d      	ldr	r1, [pc, #308]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800716e:	4313      	orrs	r3, r2
 8007170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d044      	beq.n	8007208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d107      	bne.n	8007196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007186:	4b47      	ldr	r3, [pc, #284]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d119      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e07f      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d003      	beq.n	80071a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d107      	bne.n	80071b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a6:	4b3f      	ldr	r3, [pc, #252]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e06f      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071b6:	4b3b      	ldr	r3, [pc, #236]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e067      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071c6:	4b37      	ldr	r3, [pc, #220]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f023 0203 	bic.w	r2, r3, #3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	4934      	ldr	r1, [pc, #208]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071d8:	f7fb f836 	bl	8002248 <HAL_GetTick>
 80071dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071de:	e00a      	b.n	80071f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071e0:	f7fb f832 	bl	8002248 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d901      	bls.n	80071f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e04f      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071f6:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 020c 	and.w	r2, r3, #12
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	429a      	cmp	r2, r3
 8007206:	d1eb      	bne.n	80071e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007208:	4b25      	ldr	r3, [pc, #148]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d20c      	bcs.n	8007230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007216:	4b22      	ldr	r3, [pc, #136]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800721e:	4b20      	ldr	r3, [pc, #128]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d001      	beq.n	8007230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e032      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d008      	beq.n	800724e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800723c:	4b19      	ldr	r3, [pc, #100]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	4916      	ldr	r1, [pc, #88]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	4313      	orrs	r3, r2
 800724c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800725a:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	490e      	ldr	r1, [pc, #56]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800726a:	4313      	orrs	r3, r2
 800726c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800726e:	f000 f821 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8007272:	4602      	mov	r2, r0
 8007274:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	091b      	lsrs	r3, r3, #4
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	490a      	ldr	r1, [pc, #40]	; (80072a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007280:	5ccb      	ldrb	r3, [r1, r3]
 8007282:	fa22 f303 	lsr.w	r3, r2, r3
 8007286:	4a09      	ldr	r2, [pc, #36]	; (80072ac <HAL_RCC_ClockConfig+0x1c4>)
 8007288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800728a:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <HAL_RCC_ClockConfig+0x1c8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7fa ff96 	bl	80021c0 <HAL_InitTick>

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	40023c00 	.word	0x40023c00
 80072a4:	40023800 	.word	0x40023800
 80072a8:	080125ac 	.word	0x080125ac
 80072ac:	20000000 	.word	0x20000000
 80072b0:	20000004 	.word	0x20000004

080072b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b8:	b094      	sub	sp, #80	; 0x50
 80072ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	647b      	str	r3, [r7, #68]	; 0x44
 80072c0:	2300      	movs	r3, #0
 80072c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072c4:	2300      	movs	r3, #0
 80072c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072cc:	4b79      	ldr	r3, [pc, #484]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 030c 	and.w	r3, r3, #12
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d00d      	beq.n	80072f4 <HAL_RCC_GetSysClockFreq+0x40>
 80072d8:	2b08      	cmp	r3, #8
 80072da:	f200 80e1 	bhi.w	80074a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <HAL_RCC_GetSysClockFreq+0x34>
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d003      	beq.n	80072ee <HAL_RCC_GetSysClockFreq+0x3a>
 80072e6:	e0db      	b.n	80074a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072e8:	4b73      	ldr	r3, [pc, #460]	; (80074b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80072ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80072ec:	e0db      	b.n	80074a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072ee:	4b73      	ldr	r3, [pc, #460]	; (80074bc <HAL_RCC_GetSysClockFreq+0x208>)
 80072f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072f2:	e0d8      	b.n	80074a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072f4:	4b6f      	ldr	r3, [pc, #444]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072fe:	4b6d      	ldr	r3, [pc, #436]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d063      	beq.n	80073d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800730a:	4b6a      	ldr	r3, [pc, #424]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	099b      	lsrs	r3, r3, #6
 8007310:	2200      	movs	r2, #0
 8007312:	63bb      	str	r3, [r7, #56]	; 0x38
 8007314:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731c:	633b      	str	r3, [r7, #48]	; 0x30
 800731e:	2300      	movs	r3, #0
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
 8007322:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007326:	4622      	mov	r2, r4
 8007328:	462b      	mov	r3, r5
 800732a:	f04f 0000 	mov.w	r0, #0
 800732e:	f04f 0100 	mov.w	r1, #0
 8007332:	0159      	lsls	r1, r3, #5
 8007334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007338:	0150      	lsls	r0, r2, #5
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4621      	mov	r1, r4
 8007340:	1a51      	subs	r1, r2, r1
 8007342:	6139      	str	r1, [r7, #16]
 8007344:	4629      	mov	r1, r5
 8007346:	eb63 0301 	sbc.w	r3, r3, r1
 800734a:	617b      	str	r3, [r7, #20]
 800734c:	f04f 0200 	mov.w	r2, #0
 8007350:	f04f 0300 	mov.w	r3, #0
 8007354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007358:	4659      	mov	r1, fp
 800735a:	018b      	lsls	r3, r1, #6
 800735c:	4651      	mov	r1, sl
 800735e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007362:	4651      	mov	r1, sl
 8007364:	018a      	lsls	r2, r1, #6
 8007366:	4651      	mov	r1, sl
 8007368:	ebb2 0801 	subs.w	r8, r2, r1
 800736c:	4659      	mov	r1, fp
 800736e:	eb63 0901 	sbc.w	r9, r3, r1
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800737e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007386:	4690      	mov	r8, r2
 8007388:	4699      	mov	r9, r3
 800738a:	4623      	mov	r3, r4
 800738c:	eb18 0303 	adds.w	r3, r8, r3
 8007390:	60bb      	str	r3, [r7, #8]
 8007392:	462b      	mov	r3, r5
 8007394:	eb49 0303 	adc.w	r3, r9, r3
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073a6:	4629      	mov	r1, r5
 80073a8:	024b      	lsls	r3, r1, #9
 80073aa:	4621      	mov	r1, r4
 80073ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073b0:	4621      	mov	r1, r4
 80073b2:	024a      	lsls	r2, r1, #9
 80073b4:	4610      	mov	r0, r2
 80073b6:	4619      	mov	r1, r3
 80073b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ba:	2200      	movs	r2, #0
 80073bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073c4:	f7f9 fc60 	bl	8000c88 <__aeabi_uldivmod>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4613      	mov	r3, r2
 80073ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073d0:	e058      	b.n	8007484 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073d2:	4b38      	ldr	r3, [pc, #224]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	099b      	lsrs	r3, r3, #6
 80073d8:	2200      	movs	r2, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	4611      	mov	r1, r2
 80073de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80073e2:	623b      	str	r3, [r7, #32]
 80073e4:	2300      	movs	r3, #0
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
 80073e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80073ec:	4642      	mov	r2, r8
 80073ee:	464b      	mov	r3, r9
 80073f0:	f04f 0000 	mov.w	r0, #0
 80073f4:	f04f 0100 	mov.w	r1, #0
 80073f8:	0159      	lsls	r1, r3, #5
 80073fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073fe:	0150      	lsls	r0, r2, #5
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4641      	mov	r1, r8
 8007406:	ebb2 0a01 	subs.w	sl, r2, r1
 800740a:	4649      	mov	r1, r9
 800740c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	f04f 0300 	mov.w	r3, #0
 8007418:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800741c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007420:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007424:	ebb2 040a 	subs.w	r4, r2, sl
 8007428:	eb63 050b 	sbc.w	r5, r3, fp
 800742c:	f04f 0200 	mov.w	r2, #0
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	00eb      	lsls	r3, r5, #3
 8007436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800743a:	00e2      	lsls	r2, r4, #3
 800743c:	4614      	mov	r4, r2
 800743e:	461d      	mov	r5, r3
 8007440:	4643      	mov	r3, r8
 8007442:	18e3      	adds	r3, r4, r3
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	464b      	mov	r3, r9
 8007448:	eb45 0303 	adc.w	r3, r5, r3
 800744c:	607b      	str	r3, [r7, #4]
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	f04f 0300 	mov.w	r3, #0
 8007456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800745a:	4629      	mov	r1, r5
 800745c:	028b      	lsls	r3, r1, #10
 800745e:	4621      	mov	r1, r4
 8007460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007464:	4621      	mov	r1, r4
 8007466:	028a      	lsls	r2, r1, #10
 8007468:	4610      	mov	r0, r2
 800746a:	4619      	mov	r1, r3
 800746c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800746e:	2200      	movs	r2, #0
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	61fa      	str	r2, [r7, #28]
 8007474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007478:	f7f9 fc06 	bl	8000c88 <__aeabi_uldivmod>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4613      	mov	r3, r2
 8007482:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007484:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	0c1b      	lsrs	r3, r3, #16
 800748a:	f003 0303 	and.w	r3, r3, #3
 800748e:	3301      	adds	r3, #1
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007498:	fbb2 f3f3 	udiv	r3, r2, r3
 800749c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800749e:	e002      	b.n	80074a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074a0:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80074a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3750      	adds	r7, #80	; 0x50
 80074ac:	46bd      	mov	sp, r7
 80074ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074b2:	bf00      	nop
 80074b4:	40023800 	.word	0x40023800
 80074b8:	00f42400 	.word	0x00f42400
 80074bc:	007a1200 	.word	0x007a1200

080074c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074c4:	4b03      	ldr	r3, [pc, #12]	; (80074d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80074c6:	681b      	ldr	r3, [r3, #0]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	20000000 	.word	0x20000000

080074d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80074dc:	f7ff fff0 	bl	80074c0 <HAL_RCC_GetHCLKFreq>
 80074e0:	4602      	mov	r2, r0
 80074e2:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	0a9b      	lsrs	r3, r3, #10
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	4903      	ldr	r1, [pc, #12]	; (80074fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80074ee:	5ccb      	ldrb	r3, [r1, r3]
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40023800 	.word	0x40023800
 80074fc:	080125bc 	.word	0x080125bc

08007500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007504:	f7ff ffdc 	bl	80074c0 <HAL_RCC_GetHCLKFreq>
 8007508:	4602      	mov	r2, r0
 800750a:	4b05      	ldr	r3, [pc, #20]	; (8007520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	0b5b      	lsrs	r3, r3, #13
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	4903      	ldr	r1, [pc, #12]	; (8007524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007516:	5ccb      	ldrb	r3, [r1, r3]
 8007518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800751c:	4618      	mov	r0, r3
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40023800 	.word	0x40023800
 8007524:	080125bc 	.word	0x080125bc

08007528 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800754c:	2b00      	cmp	r3, #0
 800754e:	d035      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007550:	4b62      	ldr	r3, [pc, #392]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007556:	f7fa fe77 	bl	8002248 <HAL_GetTick>
 800755a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800755c:	e008      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800755e:	f7fa fe73 	bl	8002248 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e0b0      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007570:	4b5b      	ldr	r3, [pc, #364]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1f0      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	019a      	lsls	r2, r3, #6
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	071b      	lsls	r3, r3, #28
 8007588:	4955      	ldr	r1, [pc, #340]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800758a:	4313      	orrs	r3, r2
 800758c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007590:	4b52      	ldr	r3, [pc, #328]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007592:	2201      	movs	r2, #1
 8007594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007596:	f7fa fe57 	bl	8002248 <HAL_GetTick>
 800759a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800759c:	e008      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800759e:	f7fa fe53 	bl	8002248 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d901      	bls.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e090      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075b0:	4b4b      	ldr	r3, [pc, #300]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0f0      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8083 	beq.w	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	4b44      	ldr	r3, [pc, #272]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	4a43      	ldr	r2, [pc, #268]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d8:	6413      	str	r3, [r2, #64]	; 0x40
 80075da:	4b41      	ldr	r3, [pc, #260]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80075e6:	4b3f      	ldr	r3, [pc, #252]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a3e      	ldr	r2, [pc, #248]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075f2:	f7fa fe29 	bl	8002248 <HAL_GetTick>
 80075f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075f8:	e008      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80075fa:	f7fa fe25 	bl	8002248 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d901      	bls.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e062      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800760c:	4b35      	ldr	r3, [pc, #212]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0f0      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007618:	4b31      	ldr	r3, [pc, #196]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800761a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007620:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d02f      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	429a      	cmp	r2, r3
 8007634:	d028      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007636:	4b2a      	ldr	r3, [pc, #168]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800763e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007640:	4b29      	ldr	r3, [pc, #164]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007642:	2201      	movs	r2, #1
 8007644:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007646:	4b28      	ldr	r3, [pc, #160]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800764c:	4a24      	ldr	r2, [pc, #144]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007652:	4b23      	ldr	r3, [pc, #140]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b01      	cmp	r3, #1
 800765c:	d114      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800765e:	f7fa fdf3 	bl	8002248 <HAL_GetTick>
 8007662:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007664:	e00a      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007666:	f7fa fdef 	bl	8002248 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	f241 3288 	movw	r2, #5000	; 0x1388
 8007674:	4293      	cmp	r3, r2
 8007676:	d901      	bls.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e02a      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800767c:	4b18      	ldr	r3, [pc, #96]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800767e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0ee      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007694:	d10d      	bne.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007696:	4b12      	ldr	r3, [pc, #72]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076aa:	490d      	ldr	r1, [pc, #52]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	608b      	str	r3, [r1, #8]
 80076b0:	e005      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80076b2:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	4a0a      	ldr	r2, [pc, #40]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80076bc:	6093      	str	r3, [r2, #8]
 80076be:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ca:	4905      	ldr	r1, [pc, #20]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	42470068 	.word	0x42470068
 80076e0:	40023800 	.word	0x40023800
 80076e4:	40007000 	.word	0x40007000
 80076e8:	42470e40 	.word	0x42470e40

080076ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d13f      	bne.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800770a:	4b24      	ldr	r3, [pc, #144]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d006      	beq.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007720:	d12f      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007722:	4b1f      	ldr	r3, [pc, #124]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007724:	617b      	str	r3, [r7, #20]
          break;
 8007726:	e02f      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007728:	4b1c      	ldr	r3, [pc, #112]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007734:	d108      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007736:	4b19      	ldr	r3, [pc, #100]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800773e:	4a19      	ldr	r2, [pc, #100]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007740:	fbb2 f3f3 	udiv	r3, r2, r3
 8007744:	613b      	str	r3, [r7, #16]
 8007746:	e007      	b.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007748:	4b14      	ldr	r3, [pc, #80]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007750:	4a15      	ldr	r2, [pc, #84]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007752:	fbb2 f3f3 	udiv	r3, r2, r3
 8007756:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007758:	4b10      	ldr	r3, [pc, #64]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800775a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800775e:	099b      	lsrs	r3, r3, #6
 8007760:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800776c:	4b0b      	ldr	r3, [pc, #44]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800776e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007772:	0f1b      	lsrs	r3, r3, #28
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	fbb2 f3f3 	udiv	r3, r2, r3
 800777e:	617b      	str	r3, [r7, #20]
          break;
 8007780:	e002      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	617b      	str	r3, [r7, #20]
          break;
 8007786:	bf00      	nop
        }
      }
      break;
 8007788:	e000      	b.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800778a:	bf00      	nop
    }
  }
  return frequency;
 800778c:	697b      	ldr	r3, [r7, #20]
}
 800778e:	4618      	mov	r0, r3
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	40023800 	.word	0x40023800
 80077a0:	00bb8000 	.word	0x00bb8000
 80077a4:	007a1200 	.word	0x007a1200
 80077a8:	00f42400 	.word	0x00f42400

080077ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e07b      	b.n	80078b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d108      	bne.n	80077d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ce:	d009      	beq.n	80077e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	61da      	str	r2, [r3, #28]
 80077d6:	e005      	b.n	80077e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7fa f9f2 	bl	8001be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800781a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800782c:	431a      	orrs	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007836:	431a      	orrs	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	431a      	orrs	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007854:	431a      	orrs	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800785e:	431a      	orrs	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007868:	ea42 0103 	orr.w	r1, r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007870:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	0c1b      	lsrs	r3, r3, #16
 8007882:	f003 0104 	and.w	r1, r3, #4
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	f003 0210 	and.w	r2, r3, #16
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69da      	ldr	r2, [r3, #28]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e041      	b.n	8007954 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d106      	bne.n	80078ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fa f9c7 	bl	8001c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2202      	movs	r2, #2
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3304      	adds	r3, #4
 80078fa:	4619      	mov	r1, r3
 80078fc:	4610      	mov	r0, r2
 80078fe:	f000 fad9 	bl	8007eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e041      	b.n	80079f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f839 	bl	80079fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f000 fa8a 	bl	8007eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
	...

08007a10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d109      	bne.n	8007a34 <HAL_TIM_PWM_Start+0x24>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	bf14      	ite	ne
 8007a2c:	2301      	movne	r3, #1
 8007a2e:	2300      	moveq	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	e022      	b.n	8007a7a <HAL_TIM_PWM_Start+0x6a>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d109      	bne.n	8007a4e <HAL_TIM_PWM_Start+0x3e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	bf14      	ite	ne
 8007a46:	2301      	movne	r3, #1
 8007a48:	2300      	moveq	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	e015      	b.n	8007a7a <HAL_TIM_PWM_Start+0x6a>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d109      	bne.n	8007a68 <HAL_TIM_PWM_Start+0x58>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	bf14      	ite	ne
 8007a60:	2301      	movne	r3, #1
 8007a62:	2300      	moveq	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	e008      	b.n	8007a7a <HAL_TIM_PWM_Start+0x6a>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	bf14      	ite	ne
 8007a74:	2301      	movne	r3, #1
 8007a76:	2300      	moveq	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e07c      	b.n	8007b7c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d104      	bne.n	8007a92 <HAL_TIM_PWM_Start+0x82>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a90:	e013      	b.n	8007aba <HAL_TIM_PWM_Start+0xaa>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d104      	bne.n	8007aa2 <HAL_TIM_PWM_Start+0x92>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aa0:	e00b      	b.n	8007aba <HAL_TIM_PWM_Start+0xaa>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d104      	bne.n	8007ab2 <HAL_TIM_PWM_Start+0xa2>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ab0:	e003      	b.n	8007aba <HAL_TIM_PWM_Start+0xaa>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fcec 	bl	80084a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a2d      	ldr	r2, [pc, #180]	; (8007b84 <HAL_TIM_PWM_Start+0x174>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d004      	beq.n	8007adc <HAL_TIM_PWM_Start+0xcc>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a2c      	ldr	r2, [pc, #176]	; (8007b88 <HAL_TIM_PWM_Start+0x178>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d101      	bne.n	8007ae0 <HAL_TIM_PWM_Start+0xd0>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <HAL_TIM_PWM_Start+0xd2>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d007      	beq.n	8007af6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007af4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a22      	ldr	r2, [pc, #136]	; (8007b84 <HAL_TIM_PWM_Start+0x174>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d022      	beq.n	8007b46 <HAL_TIM_PWM_Start+0x136>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b08:	d01d      	beq.n	8007b46 <HAL_TIM_PWM_Start+0x136>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a1f      	ldr	r2, [pc, #124]	; (8007b8c <HAL_TIM_PWM_Start+0x17c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d018      	beq.n	8007b46 <HAL_TIM_PWM_Start+0x136>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1d      	ldr	r2, [pc, #116]	; (8007b90 <HAL_TIM_PWM_Start+0x180>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <HAL_TIM_PWM_Start+0x136>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1c      	ldr	r2, [pc, #112]	; (8007b94 <HAL_TIM_PWM_Start+0x184>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00e      	beq.n	8007b46 <HAL_TIM_PWM_Start+0x136>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a16      	ldr	r2, [pc, #88]	; (8007b88 <HAL_TIM_PWM_Start+0x178>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d009      	beq.n	8007b46 <HAL_TIM_PWM_Start+0x136>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a18      	ldr	r2, [pc, #96]	; (8007b98 <HAL_TIM_PWM_Start+0x188>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIM_PWM_Start+0x136>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a16      	ldr	r2, [pc, #88]	; (8007b9c <HAL_TIM_PWM_Start+0x18c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d111      	bne.n	8007b6a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f003 0307 	and.w	r3, r3, #7
 8007b50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b06      	cmp	r3, #6
 8007b56:	d010      	beq.n	8007b7a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0201 	orr.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b68:	e007      	b.n	8007b7a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f042 0201 	orr.w	r2, r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	40010000 	.word	0x40010000
 8007b88:	40010400 	.word	0x40010400
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800
 8007b94:	40000c00 	.word	0x40000c00
 8007b98:	40014000 	.word	0x40014000
 8007b9c:	40001800 	.word	0x40001800

08007ba0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d101      	bne.n	8007bbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bba:	2302      	movs	r3, #2
 8007bbc:	e0ae      	b.n	8007d1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b0c      	cmp	r3, #12
 8007bca:	f200 809f 	bhi.w	8007d0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bce:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd4:	08007c09 	.word	0x08007c09
 8007bd8:	08007d0d 	.word	0x08007d0d
 8007bdc:	08007d0d 	.word	0x08007d0d
 8007be0:	08007d0d 	.word	0x08007d0d
 8007be4:	08007c49 	.word	0x08007c49
 8007be8:	08007d0d 	.word	0x08007d0d
 8007bec:	08007d0d 	.word	0x08007d0d
 8007bf0:	08007d0d 	.word	0x08007d0d
 8007bf4:	08007c8b 	.word	0x08007c8b
 8007bf8:	08007d0d 	.word	0x08007d0d
 8007bfc:	08007d0d 	.word	0x08007d0d
 8007c00:	08007d0d 	.word	0x08007d0d
 8007c04:	08007ccb 	.word	0x08007ccb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68b9      	ldr	r1, [r7, #8]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 f9fc 	bl	800800c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699a      	ldr	r2, [r3, #24]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f042 0208 	orr.w	r2, r2, #8
 8007c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699a      	ldr	r2, [r3, #24]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0204 	bic.w	r2, r2, #4
 8007c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6999      	ldr	r1, [r3, #24]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	691a      	ldr	r2, [r3, #16]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	619a      	str	r2, [r3, #24]
      break;
 8007c46:	e064      	b.n	8007d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fa4c 	bl	80080ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6999      	ldr	r1, [r3, #24]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	021a      	lsls	r2, r3, #8
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	619a      	str	r2, [r3, #24]
      break;
 8007c88:	e043      	b.n	8007d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 faa1 	bl	80081d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69da      	ldr	r2, [r3, #28]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f042 0208 	orr.w	r2, r2, #8
 8007ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69da      	ldr	r2, [r3, #28]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0204 	bic.w	r2, r2, #4
 8007cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69d9      	ldr	r1, [r3, #28]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	61da      	str	r2, [r3, #28]
      break;
 8007cc8:	e023      	b.n	8007d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 faf5 	bl	80082c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69da      	ldr	r2, [r3, #28]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69da      	ldr	r2, [r3, #28]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69d9      	ldr	r1, [r3, #28]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	021a      	lsls	r2, r3, #8
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	61da      	str	r2, [r3, #28]
      break;
 8007d0a:	e002      	b.n	8007d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_TIM_ConfigClockSource+0x1c>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e0b4      	b.n	8007eaa <HAL_TIM_ConfigClockSource+0x186>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d78:	d03e      	beq.n	8007df8 <HAL_TIM_ConfigClockSource+0xd4>
 8007d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d7e:	f200 8087 	bhi.w	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d86:	f000 8086 	beq.w	8007e96 <HAL_TIM_ConfigClockSource+0x172>
 8007d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8e:	d87f      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007d90:	2b70      	cmp	r3, #112	; 0x70
 8007d92:	d01a      	beq.n	8007dca <HAL_TIM_ConfigClockSource+0xa6>
 8007d94:	2b70      	cmp	r3, #112	; 0x70
 8007d96:	d87b      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007d98:	2b60      	cmp	r3, #96	; 0x60
 8007d9a:	d050      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x11a>
 8007d9c:	2b60      	cmp	r3, #96	; 0x60
 8007d9e:	d877      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007da0:	2b50      	cmp	r3, #80	; 0x50
 8007da2:	d03c      	beq.n	8007e1e <HAL_TIM_ConfigClockSource+0xfa>
 8007da4:	2b50      	cmp	r3, #80	; 0x50
 8007da6:	d873      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007da8:	2b40      	cmp	r3, #64	; 0x40
 8007daa:	d058      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x13a>
 8007dac:	2b40      	cmp	r3, #64	; 0x40
 8007dae:	d86f      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007db0:	2b30      	cmp	r3, #48	; 0x30
 8007db2:	d064      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x15a>
 8007db4:	2b30      	cmp	r3, #48	; 0x30
 8007db6:	d86b      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	d060      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x15a>
 8007dbc:	2b20      	cmp	r3, #32
 8007dbe:	d867      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d05c      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x15a>
 8007dc4:	2b10      	cmp	r3, #16
 8007dc6:	d05a      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x15a>
 8007dc8:	e062      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dda:	f000 fb41 	bl	8008460 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	609a      	str	r2, [r3, #8]
      break;
 8007df6:	e04f      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e08:	f000 fb2a 	bl	8008460 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e1a:	609a      	str	r2, [r3, #8]
      break;
 8007e1c:	e03c      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f000 fa9e 	bl	800836c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2150      	movs	r1, #80	; 0x50
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 faf7 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 8007e3c:	e02c      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f000 fabd 	bl	80083ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2160      	movs	r1, #96	; 0x60
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fae7 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 8007e5c:	e01c      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f000 fa7e 	bl	800836c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2140      	movs	r1, #64	; 0x40
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fad7 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 8007e7c:	e00c      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4619      	mov	r1, r3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f000 face 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 8007e8e:	e003      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	73fb      	strb	r3, [r7, #15]
      break;
 8007e94:	e000      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a46      	ldr	r2, [pc, #280]	; (8007fe0 <TIM_Base_SetConfig+0x12c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d013      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed2:	d00f      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a43      	ldr	r2, [pc, #268]	; (8007fe4 <TIM_Base_SetConfig+0x130>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00b      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a42      	ldr	r2, [pc, #264]	; (8007fe8 <TIM_Base_SetConfig+0x134>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d007      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a41      	ldr	r2, [pc, #260]	; (8007fec <TIM_Base_SetConfig+0x138>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d003      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a40      	ldr	r2, [pc, #256]	; (8007ff0 <TIM_Base_SetConfig+0x13c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d108      	bne.n	8007f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a35      	ldr	r2, [pc, #212]	; (8007fe0 <TIM_Base_SetConfig+0x12c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d02b      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f14:	d027      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a32      	ldr	r2, [pc, #200]	; (8007fe4 <TIM_Base_SetConfig+0x130>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d023      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a31      	ldr	r2, [pc, #196]	; (8007fe8 <TIM_Base_SetConfig+0x134>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d01f      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a30      	ldr	r2, [pc, #192]	; (8007fec <TIM_Base_SetConfig+0x138>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d01b      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a2f      	ldr	r2, [pc, #188]	; (8007ff0 <TIM_Base_SetConfig+0x13c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d017      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a2e      	ldr	r2, [pc, #184]	; (8007ff4 <TIM_Base_SetConfig+0x140>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d013      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a2d      	ldr	r2, [pc, #180]	; (8007ff8 <TIM_Base_SetConfig+0x144>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00f      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a2c      	ldr	r2, [pc, #176]	; (8007ffc <TIM_Base_SetConfig+0x148>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d00b      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a2b      	ldr	r2, [pc, #172]	; (8008000 <TIM_Base_SetConfig+0x14c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d007      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a2a      	ldr	r2, [pc, #168]	; (8008004 <TIM_Base_SetConfig+0x150>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d003      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a29      	ldr	r2, [pc, #164]	; (8008008 <TIM_Base_SetConfig+0x154>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d108      	bne.n	8007f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a10      	ldr	r2, [pc, #64]	; (8007fe0 <TIM_Base_SetConfig+0x12c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d003      	beq.n	8007fac <TIM_Base_SetConfig+0xf8>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a12      	ldr	r2, [pc, #72]	; (8007ff0 <TIM_Base_SetConfig+0x13c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d103      	bne.n	8007fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d105      	bne.n	8007fd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	f023 0201 	bic.w	r2, r3, #1
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	611a      	str	r2, [r3, #16]
  }
}
 8007fd2:	bf00      	nop
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	40000400 	.word	0x40000400
 8007fe8:	40000800 	.word	0x40000800
 8007fec:	40000c00 	.word	0x40000c00
 8007ff0:	40010400 	.word	0x40010400
 8007ff4:	40014000 	.word	0x40014000
 8007ff8:	40014400 	.word	0x40014400
 8007ffc:	40014800 	.word	0x40014800
 8008000:	40001800 	.word	0x40001800
 8008004:	40001c00 	.word	0x40001c00
 8008008:	40002000 	.word	0x40002000

0800800c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	f023 0201 	bic.w	r2, r3, #1
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 0303 	bic.w	r3, r3, #3
 8008042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f023 0302 	bic.w	r3, r3, #2
 8008054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	4313      	orrs	r3, r2
 800805e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a20      	ldr	r2, [pc, #128]	; (80080e4 <TIM_OC1_SetConfig+0xd8>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <TIM_OC1_SetConfig+0x64>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a1f      	ldr	r2, [pc, #124]	; (80080e8 <TIM_OC1_SetConfig+0xdc>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d10c      	bne.n	800808a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f023 0308 	bic.w	r3, r3, #8
 8008076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	4313      	orrs	r3, r2
 8008080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f023 0304 	bic.w	r3, r3, #4
 8008088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a15      	ldr	r2, [pc, #84]	; (80080e4 <TIM_OC1_SetConfig+0xd8>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d003      	beq.n	800809a <TIM_OC1_SetConfig+0x8e>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a14      	ldr	r2, [pc, #80]	; (80080e8 <TIM_OC1_SetConfig+0xdc>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d111      	bne.n	80080be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	621a      	str	r2, [r3, #32]
}
 80080d8:	bf00      	nop
 80080da:	371c      	adds	r7, #28
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	40010000 	.word	0x40010000
 80080e8:	40010400 	.word	0x40010400

080080ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	f023 0210 	bic.w	r2, r3, #16
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800811a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	021b      	lsls	r3, r3, #8
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	4313      	orrs	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f023 0320 	bic.w	r3, r3, #32
 8008136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4313      	orrs	r3, r2
 8008142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a22      	ldr	r2, [pc, #136]	; (80081d0 <TIM_OC2_SetConfig+0xe4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d003      	beq.n	8008154 <TIM_OC2_SetConfig+0x68>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a21      	ldr	r2, [pc, #132]	; (80081d4 <TIM_OC2_SetConfig+0xe8>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d10d      	bne.n	8008170 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800815a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	011b      	lsls	r3, r3, #4
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	4313      	orrs	r3, r2
 8008166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800816e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a17      	ldr	r2, [pc, #92]	; (80081d0 <TIM_OC2_SetConfig+0xe4>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d003      	beq.n	8008180 <TIM_OC2_SetConfig+0x94>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a16      	ldr	r2, [pc, #88]	; (80081d4 <TIM_OC2_SetConfig+0xe8>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d113      	bne.n	80081a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800818e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4313      	orrs	r3, r2
 800819a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	621a      	str	r2, [r3, #32]
}
 80081c2:	bf00      	nop
 80081c4:	371c      	adds	r7, #28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	40010000 	.word	0x40010000
 80081d4:	40010400 	.word	0x40010400

080081d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081d8:	b480      	push	{r7}
 80081da:	b087      	sub	sp, #28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f023 0303 	bic.w	r3, r3, #3
 800820e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4313      	orrs	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a21      	ldr	r2, [pc, #132]	; (80082b8 <TIM_OC3_SetConfig+0xe0>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d003      	beq.n	800823e <TIM_OC3_SetConfig+0x66>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a20      	ldr	r2, [pc, #128]	; (80082bc <TIM_OC3_SetConfig+0xe4>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d10d      	bne.n	800825a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	4313      	orrs	r3, r2
 8008250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a16      	ldr	r2, [pc, #88]	; (80082b8 <TIM_OC3_SetConfig+0xe0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d003      	beq.n	800826a <TIM_OC3_SetConfig+0x92>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a15      	ldr	r2, [pc, #84]	; (80082bc <TIM_OC3_SetConfig+0xe4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d113      	bne.n	8008292 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4313      	orrs	r3, r2
 8008290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	621a      	str	r2, [r3, #32]
}
 80082ac:	bf00      	nop
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	40010000 	.word	0x40010000
 80082bc:	40010400 	.word	0x40010400

080082c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a1b      	ldr	r3, [r3, #32]
 80082d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4313      	orrs	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800830a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	031b      	lsls	r3, r3, #12
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	4313      	orrs	r3, r2
 8008316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a12      	ldr	r2, [pc, #72]	; (8008364 <TIM_OC4_SetConfig+0xa4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d003      	beq.n	8008328 <TIM_OC4_SetConfig+0x68>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a11      	ldr	r2, [pc, #68]	; (8008368 <TIM_OC4_SetConfig+0xa8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d109      	bne.n	800833c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800832e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	019b      	lsls	r3, r3, #6
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	4313      	orrs	r3, r2
 800833a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	621a      	str	r2, [r3, #32]
}
 8008356:	bf00      	nop
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40010000 	.word	0x40010000
 8008368:	40010400 	.word	0x40010400

0800836c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	f023 0201 	bic.w	r2, r3, #1
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	011b      	lsls	r3, r3, #4
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	4313      	orrs	r3, r2
 80083a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f023 030a 	bic.w	r3, r3, #10
 80083a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	621a      	str	r2, [r3, #32]
}
 80083be:	bf00      	nop
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b087      	sub	sp, #28
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	f023 0210 	bic.w	r2, r3, #16
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	031b      	lsls	r3, r3, #12
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008406:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	621a      	str	r2, [r3, #32]
}
 800841e:	bf00      	nop
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800842a:	b480      	push	{r7}
 800842c:	b085      	sub	sp, #20
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	f043 0307 	orr.w	r3, r3, #7
 800844c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	609a      	str	r2, [r3, #8]
}
 8008454:	bf00      	nop
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800847a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	021a      	lsls	r2, r3, #8
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	431a      	orrs	r2, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4313      	orrs	r3, r2
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	609a      	str	r2, [r3, #8]
}
 8008494:	bf00      	nop
 8008496:	371c      	adds	r7, #28
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f003 031f 	and.w	r3, r3, #31
 80084b2:	2201      	movs	r2, #1
 80084b4:	fa02 f303 	lsl.w	r3, r2, r3
 80084b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a1a      	ldr	r2, [r3, #32]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	43db      	mvns	r3, r3
 80084c2:	401a      	ands	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6a1a      	ldr	r2, [r3, #32]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f003 031f 	and.w	r3, r3, #31
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	fa01 f303 	lsl.w	r3, r1, r3
 80084d8:	431a      	orrs	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	621a      	str	r2, [r3, #32]
}
 80084de:	bf00      	nop
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
	...

080084ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008500:	2302      	movs	r3, #2
 8008502:	e05a      	b.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2202      	movs	r2, #2
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a21      	ldr	r2, [pc, #132]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d022      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008550:	d01d      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a1d      	ldr	r2, [pc, #116]	; (80085cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d018      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a1b      	ldr	r2, [pc, #108]	; (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d013      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a1a      	ldr	r2, [pc, #104]	; (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d00e      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a18      	ldr	r2, [pc, #96]	; (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d009      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a17      	ldr	r2, [pc, #92]	; (80085dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d004      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a15      	ldr	r2, [pc, #84]	; (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d10c      	bne.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	4313      	orrs	r3, r2
 800859e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	40010000 	.word	0x40010000
 80085cc:	40000400 	.word	0x40000400
 80085d0:	40000800 	.word	0x40000800
 80085d4:	40000c00 	.word	0x40000c00
 80085d8:	40010400 	.word	0x40010400
 80085dc:	40014000 	.word	0x40014000
 80085e0:	40001800 	.word	0x40001800

080085e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085fc:	2302      	movs	r3, #2
 80085fe:	e03d      	b.n	800867c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	4313      	orrs	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	4313      	orrs	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	4313      	orrs	r3, r2
 800865a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e042      	b.n	8008720 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7f9 fb3e 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2224      	movs	r2, #36	; 0x24
 80086b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 ff4f 	bl	8009570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	691a      	ldr	r2, [r3, #16]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	695a      	ldr	r2, [r3, #20]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68da      	ldr	r2, [r3, #12]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2220      	movs	r2, #32
 800870c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2220      	movs	r2, #32
 8008714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af02      	add	r7, sp, #8
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	4613      	mov	r3, r2
 8008736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b20      	cmp	r3, #32
 8008746:	d175      	bne.n	8008834 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <HAL_UART_Transmit+0x2c>
 800874e:	88fb      	ldrh	r3, [r7, #6]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e06e      	b.n	8008836 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2221      	movs	r2, #33	; 0x21
 8008762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008766:	f7f9 fd6f 	bl	8002248 <HAL_GetTick>
 800876a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	88fa      	ldrh	r2, [r7, #6]
 8008770:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	88fa      	ldrh	r2, [r7, #6]
 8008776:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008780:	d108      	bne.n	8008794 <HAL_UART_Transmit+0x6c>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d104      	bne.n	8008794 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	61bb      	str	r3, [r7, #24]
 8008792:	e003      	b.n	800879c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008798:	2300      	movs	r3, #0
 800879a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800879c:	e02e      	b.n	80087fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2200      	movs	r2, #0
 80087a6:	2180      	movs	r1, #128	; 0x80
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 fc27 	bl	8008ffc <UART_WaitOnFlagUntilTimeout>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e03a      	b.n	8008836 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10b      	bne.n	80087de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	3302      	adds	r3, #2
 80087da:	61bb      	str	r3, [r7, #24]
 80087dc:	e007      	b.n	80087ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	781a      	ldrb	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	3301      	adds	r3, #1
 80087ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	3b01      	subs	r3, #1
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1cb      	bne.n	800879e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2200      	movs	r2, #0
 800880e:	2140      	movs	r1, #64	; 0x40
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 fbf3 	bl	8008ffc <UART_WaitOnFlagUntilTimeout>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d005      	beq.n	8008828 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2220      	movs	r2, #32
 8008820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e006      	b.n	8008836 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2220      	movs	r2, #32
 800882c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	e000      	b.n	8008836 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008834:	2302      	movs	r3, #2
  }
}
 8008836:	4618      	mov	r0, r3
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	4613      	mov	r3, r2
 800884a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b20      	cmp	r3, #32
 8008856:	d112      	bne.n	800887e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <HAL_UART_Receive_DMA+0x26>
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e00b      	b.n	8008880 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800886e:	88fb      	ldrh	r3, [r7, #6]
 8008870:	461a      	mov	r2, r3
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 fc1b 	bl	80090b0 <UART_Start_Receive_DMA>
 800887a:	4603      	mov	r3, r0
 800887c:	e000      	b.n	8008880 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800887e:	2302      	movs	r3, #2
  }
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b0ba      	sub	sp, #232	; 0xe8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80088ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80088c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10f      	bne.n	80088ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d009      	beq.n	80088ee <HAL_UART_IRQHandler+0x66>
 80088da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fd83 	bl	80093f2 <UART_Receive_IT>
      return;
 80088ec:	e25b      	b.n	8008da6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80088ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 80de 	beq.w	8008ab4 <HAL_UART_IRQHandler+0x22c>
 80088f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d106      	bne.n	8008912 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008908:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 80d1 	beq.w	8008ab4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <HAL_UART_IRQHandler+0xae>
 800891e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892e:	f043 0201 	orr.w	r2, r3, #1
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893a:	f003 0304 	and.w	r3, r3, #4
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00b      	beq.n	800895a <HAL_UART_IRQHandler+0xd2>
 8008942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d005      	beq.n	800895a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008952:	f043 0202 	orr.w	r2, r3, #2
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800895a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00b      	beq.n	800897e <HAL_UART_IRQHandler+0xf6>
 8008966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008976:	f043 0204 	orr.w	r2, r3, #4
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800897e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008982:	f003 0308 	and.w	r3, r3, #8
 8008986:	2b00      	cmp	r3, #0
 8008988:	d011      	beq.n	80089ae <HAL_UART_IRQHandler+0x126>
 800898a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800898e:	f003 0320 	and.w	r3, r3, #32
 8008992:	2b00      	cmp	r3, #0
 8008994:	d105      	bne.n	80089a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d005      	beq.n	80089ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	f043 0208 	orr.w	r2, r3, #8
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 81f2 	beq.w	8008d9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089bc:	f003 0320 	and.w	r3, r3, #32
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d008      	beq.n	80089d6 <HAL_UART_IRQHandler+0x14e>
 80089c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c8:	f003 0320 	and.w	r3, r3, #32
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fd0e 	bl	80093f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e0:	2b40      	cmp	r3, #64	; 0x40
 80089e2:	bf0c      	ite	eq
 80089e4:	2301      	moveq	r3, #1
 80089e6:	2300      	movne	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f2:	f003 0308 	and.w	r3, r3, #8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d103      	bne.n	8008a02 <HAL_UART_IRQHandler+0x17a>
 80089fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d04f      	beq.n	8008aa2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fc16 	bl	8009234 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a12:	2b40      	cmp	r3, #64	; 0x40
 8008a14:	d141      	bne.n	8008a9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3314      	adds	r3, #20
 8008a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3314      	adds	r3, #20
 8008a3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008a42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008a4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1d9      	bne.n	8008a16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d013      	beq.n	8008a92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6e:	4a7e      	ldr	r2, [pc, #504]	; (8008c68 <HAL_UART_IRQHandler+0x3e0>)
 8008a70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7f9 fe9e 	bl	80027b8 <HAL_DMA_Abort_IT>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d016      	beq.n	8008ab0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a90:	e00e      	b.n	8008ab0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f99e 	bl	8008dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a98:	e00a      	b.n	8008ab0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f99a 	bl	8008dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa0:	e006      	b.n	8008ab0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f996 	bl	8008dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008aae:	e175      	b.n	8008d9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ab0:	bf00      	nop
    return;
 8008ab2:	e173      	b.n	8008d9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	f040 814f 	bne.w	8008d5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac2:	f003 0310 	and.w	r3, r3, #16
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 8148 	beq.w	8008d5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad0:	f003 0310 	and.w	r3, r3, #16
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 8141 	beq.w	8008d5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ada:	2300      	movs	r3, #0
 8008adc:	60bb      	str	r3, [r7, #8]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	60bb      	str	r3, [r7, #8]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	60bb      	str	r3, [r7, #8]
 8008aee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afa:	2b40      	cmp	r3, #64	; 0x40
 8008afc:	f040 80b6 	bne.w	8008c6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 8145 	beq.w	8008da0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	f080 813e 	bcs.w	8008da0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b36:	f000 8088 	beq.w	8008c4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	330c      	adds	r3, #12
 8008b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	330c      	adds	r3, #12
 8008b62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008b66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1d9      	bne.n	8008b3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3314      	adds	r3, #20
 8008b8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b90:	e853 3f00 	ldrex	r3, [r3]
 8008b94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b98:	f023 0301 	bic.w	r3, r3, #1
 8008b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3314      	adds	r3, #20
 8008ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008baa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008bae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008bb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e1      	bne.n	8008b86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3314      	adds	r3, #20
 8008bc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3314      	adds	r3, #20
 8008be2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008be6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008be8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008bec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1e3      	bne.n	8008bc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	330c      	adds	r3, #12
 8008c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c1a:	f023 0310 	bic.w	r3, r3, #16
 8008c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	330c      	adds	r3, #12
 8008c28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e3      	bne.n	8008c08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7f9 fd47 	bl	80026d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f8c1 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c66:	e09b      	b.n	8008da0 <HAL_UART_IRQHandler+0x518>
 8008c68:	080092fb 	.word	0x080092fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 808e 	beq.w	8008da4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 8089 	beq.w	8008da4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	330c      	adds	r3, #12
 8008c98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	330c      	adds	r3, #12
 8008cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008cb6:	647a      	str	r2, [r7, #68]	; 0x44
 8008cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e3      	bne.n	8008c92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3314      	adds	r3, #20
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	f023 0301 	bic.w	r3, r3, #1
 8008ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3314      	adds	r3, #20
 8008cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008cee:	633a      	str	r2, [r7, #48]	; 0x30
 8008cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cf6:	e841 2300 	strex	r3, r2, [r1]
 8008cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1e3      	bne.n	8008cca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2220      	movs	r2, #32
 8008d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	330c      	adds	r3, #12
 8008d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 0310 	bic.w	r3, r3, #16
 8008d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	330c      	adds	r3, #12
 8008d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008d34:	61fa      	str	r2, [r7, #28]
 8008d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	69b9      	ldr	r1, [r7, #24]
 8008d3a:	69fa      	ldr	r2, [r7, #28]
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	617b      	str	r3, [r7, #20]
   return(result);
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e3      	bne.n	8008d10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f847 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d5a:	e023      	b.n	8008da4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d009      	beq.n	8008d7c <HAL_UART_IRQHandler+0x4f4>
 8008d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fad4 	bl	8009322 <UART_Transmit_IT>
    return;
 8008d7a:	e014      	b.n	8008da6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00e      	beq.n	8008da6 <HAL_UART_IRQHandler+0x51e>
 8008d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d008      	beq.n	8008da6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fb14 	bl	80093c2 <UART_EndTransmit_IT>
    return;
 8008d9a:	e004      	b.n	8008da6 <HAL_UART_IRQHandler+0x51e>
    return;
 8008d9c:	bf00      	nop
 8008d9e:	e002      	b.n	8008da6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008da0:	bf00      	nop
 8008da2:	e000      	b.n	8008da6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008da4:	bf00      	nop
  }
}
 8008da6:	37e8      	adds	r7, #232	; 0xe8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b09c      	sub	sp, #112	; 0x70
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d172      	bne.n	8008f02 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e1e:	2200      	movs	r2, #0
 8008e20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	330c      	adds	r3, #12
 8008e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	330c      	adds	r3, #12
 8008e40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e42:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e5      	bne.n	8008e22 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3314      	adds	r3, #20
 8008e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e68:	f023 0301 	bic.w	r3, r3, #1
 8008e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8008e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3314      	adds	r3, #20
 8008e74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e76:	647a      	str	r2, [r7, #68]	; 0x44
 8008e78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e5      	bne.n	8008e56 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3314      	adds	r3, #20
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	623b      	str	r3, [r7, #32]
   return(result);
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3314      	adds	r3, #20
 8008ea8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e5      	bne.n	8008e8a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d119      	bne.n	8008f02 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	330c      	adds	r3, #12
 8008ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	e853 3f00 	ldrex	r3, [r3]
 8008edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f023 0310 	bic.w	r3, r3, #16
 8008ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	330c      	adds	r3, #12
 8008eec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008eee:	61fa      	str	r2, [r7, #28]
 8008ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef2:	69b9      	ldr	r1, [r7, #24]
 8008ef4:	69fa      	ldr	r2, [r7, #28]
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	617b      	str	r3, [r7, #20]
   return(result);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e5      	bne.n	8008ece <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f04:	2200      	movs	r2, #0
 8008f06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d106      	bne.n	8008f1e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f14:	4619      	mov	r1, r3
 8008f16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f18:	f7ff ff66 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f1c:	e002      	b.n	8008f24 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008f1e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f20:	f7f8 f866 	bl	8000ff0 <HAL_UART_RxCpltCallback>
}
 8008f24:	bf00      	nop
 8008f26:	3770      	adds	r7, #112	; 0x70
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d108      	bne.n	8008f5a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f4c:	085b      	lsrs	r3, r3, #1
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	4619      	mov	r1, r3
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f7ff ff48 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f58:	e002      	b.n	8008f60 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f7ff ff30 	bl	8008dc0 <HAL_UART_RxHalfCpltCallback>
}
 8008f60:	bf00      	nop
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f78:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f84:	2b80      	cmp	r3, #128	; 0x80
 8008f86:	bf0c      	ite	eq
 8008f88:	2301      	moveq	r3, #1
 8008f8a:	2300      	movne	r3, #0
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b21      	cmp	r3, #33	; 0x21
 8008f9a:	d108      	bne.n	8008fae <UART_DMAError+0x46>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008fa8:	68b8      	ldr	r0, [r7, #8]
 8008faa:	f000 f91b 	bl	80091e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb8:	2b40      	cmp	r3, #64	; 0x40
 8008fba:	bf0c      	ite	eq
 8008fbc:	2301      	moveq	r3, #1
 8008fbe:	2300      	movne	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b22      	cmp	r3, #34	; 0x22
 8008fce:	d108      	bne.n	8008fe2 <UART_DMAError+0x7a>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008fdc:	68b8      	ldr	r0, [r7, #8]
 8008fde:	f000 f929 	bl	8009234 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe6:	f043 0210 	orr.w	r2, r3, #16
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fee:	68b8      	ldr	r0, [r7, #8]
 8008ff0:	f7ff fef0 	bl	8008dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ff4:	bf00      	nop
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	4613      	mov	r3, r2
 800900a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800900c:	e03b      	b.n	8009086 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009014:	d037      	beq.n	8009086 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009016:	f7f9 f917 	bl	8002248 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	6a3a      	ldr	r2, [r7, #32]
 8009022:	429a      	cmp	r2, r3
 8009024:	d302      	bcc.n	800902c <UART_WaitOnFlagUntilTimeout+0x30>
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e03a      	b.n	80090a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	2b00      	cmp	r3, #0
 800903c:	d023      	beq.n	8009086 <UART_WaitOnFlagUntilTimeout+0x8a>
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2b80      	cmp	r3, #128	; 0x80
 8009042:	d020      	beq.n	8009086 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b40      	cmp	r3, #64	; 0x40
 8009048:	d01d      	beq.n	8009086 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0308 	and.w	r3, r3, #8
 8009054:	2b08      	cmp	r3, #8
 8009056:	d116      	bne.n	8009086 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009058:	2300      	movs	r3, #0
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 f8e0 	bl	8009234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2208      	movs	r2, #8
 8009078:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e00f      	b.n	80090a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4013      	ands	r3, r2
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	429a      	cmp	r2, r3
 8009094:	bf0c      	ite	eq
 8009096:	2301      	moveq	r3, #1
 8009098:	2300      	movne	r3, #0
 800909a:	b2db      	uxtb	r3, r3
 800909c:	461a      	mov	r2, r3
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d0b4      	beq.n	800900e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b098      	sub	sp, #96	; 0x60
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	4613      	mov	r3, r2
 80090bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	88fa      	ldrh	r2, [r7, #6]
 80090c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2222      	movs	r2, #34	; 0x22
 80090d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090dc:	4a3e      	ldr	r2, [pc, #248]	; (80091d8 <UART_Start_Receive_DMA+0x128>)
 80090de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e4:	4a3d      	ldr	r2, [pc, #244]	; (80091dc <UART_Start_Receive_DMA+0x12c>)
 80090e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ec:	4a3c      	ldr	r2, [pc, #240]	; (80091e0 <UART_Start_Receive_DMA+0x130>)
 80090ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f4:	2200      	movs	r2, #0
 80090f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80090f8:	f107 0308 	add.w	r3, r7, #8
 80090fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3304      	adds	r3, #4
 8009108:	4619      	mov	r1, r3
 800910a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	f7f9 fa8a 	bl	8002628 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009114:	2300      	movs	r3, #0
 8009116:	613b      	str	r3, [r7, #16]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	613b      	str	r3, [r7, #16]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	613b      	str	r3, [r7, #16]
 8009128:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d019      	beq.n	8009166 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	330c      	adds	r3, #12
 8009138:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009148:	65bb      	str	r3, [r7, #88]	; 0x58
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	330c      	adds	r3, #12
 8009150:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009152:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009154:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e5      	bne.n	8009132 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3314      	adds	r3, #20
 800916c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009178:	f043 0301 	orr.w	r3, r3, #1
 800917c:	657b      	str	r3, [r7, #84]	; 0x54
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3314      	adds	r3, #20
 8009184:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009186:	63ba      	str	r2, [r7, #56]	; 0x38
 8009188:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800918c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e5      	bne.n	8009166 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3314      	adds	r3, #20
 80091a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	e853 3f00 	ldrex	r3, [r3]
 80091a8:	617b      	str	r3, [r7, #20]
   return(result);
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b0:	653b      	str	r3, [r7, #80]	; 0x50
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3314      	adds	r3, #20
 80091b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091ba:	627a      	str	r2, [r7, #36]	; 0x24
 80091bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091be:	6a39      	ldr	r1, [r7, #32]
 80091c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091c2:	e841 2300 	strex	r3, r2, [r1]
 80091c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1e5      	bne.n	800919a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3760      	adds	r7, #96	; 0x60
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	08008e01 	.word	0x08008e01
 80091dc:	08008f2d 	.word	0x08008f2d
 80091e0:	08008f69 	.word	0x08008f69

080091e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b089      	sub	sp, #36	; 0x24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	330c      	adds	r3, #12
 80091f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009202:	61fb      	str	r3, [r7, #28]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	330c      	adds	r3, #12
 800920a:	69fa      	ldr	r2, [r7, #28]
 800920c:	61ba      	str	r2, [r7, #24]
 800920e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	6979      	ldr	r1, [r7, #20]
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	613b      	str	r3, [r7, #16]
   return(result);
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e5      	bne.n	80091ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2220      	movs	r2, #32
 8009224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8009228:	bf00      	nop
 800922a:	3724      	adds	r7, #36	; 0x24
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009234:	b480      	push	{r7}
 8009236:	b095      	sub	sp, #84	; 0x54
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	330c      	adds	r3, #12
 8009242:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	330c      	adds	r3, #12
 800925a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800925c:	643a      	str	r2, [r7, #64]	; 0x40
 800925e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800926a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e5      	bne.n	800923c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3314      	adds	r3, #20
 8009276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	f023 0301 	bic.w	r3, r3, #1
 8009286:	64bb      	str	r3, [r7, #72]	; 0x48
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3314      	adds	r3, #20
 800928e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009290:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e5      	bne.n	8009270 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d119      	bne.n	80092e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	330c      	adds	r3, #12
 80092b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f023 0310 	bic.w	r3, r3, #16
 80092c2:	647b      	str	r3, [r7, #68]	; 0x44
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	330c      	adds	r3, #12
 80092ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092cc:	61ba      	str	r2, [r7, #24]
 80092ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d0:	6979      	ldr	r1, [r7, #20]
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	e841 2300 	strex	r3, r2, [r1]
 80092d8:	613b      	str	r3, [r7, #16]
   return(result);
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1e5      	bne.n	80092ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80092ee:	bf00      	nop
 80092f0:	3754      	adds	r7, #84	; 0x54
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f7ff fd5d 	bl	8008dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800931a:	bf00      	nop
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009322:	b480      	push	{r7}
 8009324:	b085      	sub	sp, #20
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b21      	cmp	r3, #33	; 0x21
 8009334:	d13e      	bne.n	80093b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800933e:	d114      	bne.n	800936a <UART_Transmit_IT+0x48>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d110      	bne.n	800936a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	881b      	ldrh	r3, [r3, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800935c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	1c9a      	adds	r2, r3, #2
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	621a      	str	r2, [r3, #32]
 8009368:	e008      	b.n	800937c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	1c59      	adds	r1, r3, #1
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6211      	str	r1, [r2, #32]
 8009374:	781a      	ldrb	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	b29b      	uxth	r3, r3
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	4619      	mov	r1, r3
 800938a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10f      	bne.n	80093b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800939e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	e000      	b.n	80093b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80093b4:	2302      	movs	r3, #2
  }
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b082      	sub	sp, #8
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68da      	ldr	r2, [r3, #12]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2220      	movs	r2, #32
 80093de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff fce2 	bl	8008dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b08c      	sub	sp, #48	; 0x30
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b22      	cmp	r3, #34	; 0x22
 8009404:	f040 80ae 	bne.w	8009564 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009410:	d117      	bne.n	8009442 <UART_Receive_IT+0x50>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d113      	bne.n	8009442 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800941a:	2300      	movs	r3, #0
 800941c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009422:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	b29b      	uxth	r3, r3
 800942c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009430:	b29a      	uxth	r2, r3
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943a:	1c9a      	adds	r2, r3, #2
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	629a      	str	r2, [r3, #40]	; 0x28
 8009440:	e026      	b.n	8009490 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009446:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009448:	2300      	movs	r3, #0
 800944a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009454:	d007      	beq.n	8009466 <UART_Receive_IT+0x74>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10a      	bne.n	8009474 <UART_Receive_IT+0x82>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d106      	bne.n	8009474 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	b2da      	uxtb	r2, r3
 800946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009470:	701a      	strb	r2, [r3, #0]
 8009472:	e008      	b.n	8009486 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009480:	b2da      	uxtb	r2, r3
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009484:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009494:	b29b      	uxth	r3, r3
 8009496:	3b01      	subs	r3, #1
 8009498:	b29b      	uxth	r3, r3
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	4619      	mov	r1, r3
 800949e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d15d      	bne.n	8009560 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68da      	ldr	r2, [r3, #12]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f022 0220 	bic.w	r2, r2, #32
 80094b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	695a      	ldr	r2, [r3, #20]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 0201 	bic.w	r2, r2, #1
 80094d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2220      	movs	r2, #32
 80094d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d135      	bne.n	8009556 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	330c      	adds	r3, #12
 80094f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f023 0310 	bic.w	r3, r3, #16
 8009506:	627b      	str	r3, [r7, #36]	; 0x24
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	330c      	adds	r3, #12
 800950e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009510:	623a      	str	r2, [r7, #32]
 8009512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	69f9      	ldr	r1, [r7, #28]
 8009516:	6a3a      	ldr	r2, [r7, #32]
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	61bb      	str	r3, [r7, #24]
   return(result);
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e5      	bne.n	80094f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b10      	cmp	r3, #16
 8009530:	d10a      	bne.n	8009548 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	60fb      	str	r3, [r7, #12]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	60fb      	str	r3, [r7, #12]
 8009546:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff fc4a 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
 8009554:	e002      	b.n	800955c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7f7 fd4a 	bl	8000ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	e002      	b.n	8009566 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	e000      	b.n	8009566 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009564:	2302      	movs	r3, #2
  }
}
 8009566:	4618      	mov	r0, r3
 8009568:	3730      	adds	r7, #48	; 0x30
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009574:	b0c0      	sub	sp, #256	; 0x100
 8009576:	af00      	add	r7, sp, #0
 8009578:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800957c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800958c:	68d9      	ldr	r1, [r3, #12]
 800958e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	ea40 0301 	orr.w	r3, r0, r1
 8009598:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800959a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800959e:	689a      	ldr	r2, [r3, #8]
 80095a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	431a      	orrs	r2, r3
 80095a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	431a      	orrs	r2, r3
 80095b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80095bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80095c8:	f021 010c 	bic.w	r1, r1, #12
 80095cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80095d6:	430b      	orrs	r3, r1
 80095d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80095da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	695b      	ldr	r3, [r3, #20]
 80095e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80095e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ea:	6999      	ldr	r1, [r3, #24]
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	ea40 0301 	orr.w	r3, r0, r1
 80095f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80095f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4b8f      	ldr	r3, [pc, #572]	; (800983c <UART_SetConfig+0x2cc>)
 8009600:	429a      	cmp	r2, r3
 8009602:	d005      	beq.n	8009610 <UART_SetConfig+0xa0>
 8009604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4b8d      	ldr	r3, [pc, #564]	; (8009840 <UART_SetConfig+0x2d0>)
 800960c:	429a      	cmp	r2, r3
 800960e:	d104      	bne.n	800961a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009610:	f7fd ff76 	bl	8007500 <HAL_RCC_GetPCLK2Freq>
 8009614:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009618:	e003      	b.n	8009622 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800961a:	f7fd ff5d 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 800961e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800962c:	f040 810c 	bne.w	8009848 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009634:	2200      	movs	r2, #0
 8009636:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800963a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800963e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009642:	4622      	mov	r2, r4
 8009644:	462b      	mov	r3, r5
 8009646:	1891      	adds	r1, r2, r2
 8009648:	65b9      	str	r1, [r7, #88]	; 0x58
 800964a:	415b      	adcs	r3, r3
 800964c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800964e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009652:	4621      	mov	r1, r4
 8009654:	eb12 0801 	adds.w	r8, r2, r1
 8009658:	4629      	mov	r1, r5
 800965a:	eb43 0901 	adc.w	r9, r3, r1
 800965e:	f04f 0200 	mov.w	r2, #0
 8009662:	f04f 0300 	mov.w	r3, #0
 8009666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800966a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800966e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009672:	4690      	mov	r8, r2
 8009674:	4699      	mov	r9, r3
 8009676:	4623      	mov	r3, r4
 8009678:	eb18 0303 	adds.w	r3, r8, r3
 800967c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009680:	462b      	mov	r3, r5
 8009682:	eb49 0303 	adc.w	r3, r9, r3
 8009686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800968a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009696:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800969a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800969e:	460b      	mov	r3, r1
 80096a0:	18db      	adds	r3, r3, r3
 80096a2:	653b      	str	r3, [r7, #80]	; 0x50
 80096a4:	4613      	mov	r3, r2
 80096a6:	eb42 0303 	adc.w	r3, r2, r3
 80096aa:	657b      	str	r3, [r7, #84]	; 0x54
 80096ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80096b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80096b4:	f7f7 fae8 	bl	8000c88 <__aeabi_uldivmod>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4b61      	ldr	r3, [pc, #388]	; (8009844 <UART_SetConfig+0x2d4>)
 80096be:	fba3 2302 	umull	r2, r3, r3, r2
 80096c2:	095b      	lsrs	r3, r3, #5
 80096c4:	011c      	lsls	r4, r3, #4
 80096c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096ca:	2200      	movs	r2, #0
 80096cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80096d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80096d8:	4642      	mov	r2, r8
 80096da:	464b      	mov	r3, r9
 80096dc:	1891      	adds	r1, r2, r2
 80096de:	64b9      	str	r1, [r7, #72]	; 0x48
 80096e0:	415b      	adcs	r3, r3
 80096e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80096e8:	4641      	mov	r1, r8
 80096ea:	eb12 0a01 	adds.w	sl, r2, r1
 80096ee:	4649      	mov	r1, r9
 80096f0:	eb43 0b01 	adc.w	fp, r3, r1
 80096f4:	f04f 0200 	mov.w	r2, #0
 80096f8:	f04f 0300 	mov.w	r3, #0
 80096fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009700:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009708:	4692      	mov	sl, r2
 800970a:	469b      	mov	fp, r3
 800970c:	4643      	mov	r3, r8
 800970e:	eb1a 0303 	adds.w	r3, sl, r3
 8009712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009716:	464b      	mov	r3, r9
 8009718:	eb4b 0303 	adc.w	r3, fp, r3
 800971c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800972c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009730:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009734:	460b      	mov	r3, r1
 8009736:	18db      	adds	r3, r3, r3
 8009738:	643b      	str	r3, [r7, #64]	; 0x40
 800973a:	4613      	mov	r3, r2
 800973c:	eb42 0303 	adc.w	r3, r2, r3
 8009740:	647b      	str	r3, [r7, #68]	; 0x44
 8009742:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009746:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800974a:	f7f7 fa9d 	bl	8000c88 <__aeabi_uldivmod>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	4611      	mov	r1, r2
 8009754:	4b3b      	ldr	r3, [pc, #236]	; (8009844 <UART_SetConfig+0x2d4>)
 8009756:	fba3 2301 	umull	r2, r3, r3, r1
 800975a:	095b      	lsrs	r3, r3, #5
 800975c:	2264      	movs	r2, #100	; 0x64
 800975e:	fb02 f303 	mul.w	r3, r2, r3
 8009762:	1acb      	subs	r3, r1, r3
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800976a:	4b36      	ldr	r3, [pc, #216]	; (8009844 <UART_SetConfig+0x2d4>)
 800976c:	fba3 2302 	umull	r2, r3, r3, r2
 8009770:	095b      	lsrs	r3, r3, #5
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009778:	441c      	add	r4, r3
 800977a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800977e:	2200      	movs	r2, #0
 8009780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009784:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009788:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800978c:	4642      	mov	r2, r8
 800978e:	464b      	mov	r3, r9
 8009790:	1891      	adds	r1, r2, r2
 8009792:	63b9      	str	r1, [r7, #56]	; 0x38
 8009794:	415b      	adcs	r3, r3
 8009796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009798:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800979c:	4641      	mov	r1, r8
 800979e:	1851      	adds	r1, r2, r1
 80097a0:	6339      	str	r1, [r7, #48]	; 0x30
 80097a2:	4649      	mov	r1, r9
 80097a4:	414b      	adcs	r3, r1
 80097a6:	637b      	str	r3, [r7, #52]	; 0x34
 80097a8:	f04f 0200 	mov.w	r2, #0
 80097ac:	f04f 0300 	mov.w	r3, #0
 80097b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80097b4:	4659      	mov	r1, fp
 80097b6:	00cb      	lsls	r3, r1, #3
 80097b8:	4651      	mov	r1, sl
 80097ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097be:	4651      	mov	r1, sl
 80097c0:	00ca      	lsls	r2, r1, #3
 80097c2:	4610      	mov	r0, r2
 80097c4:	4619      	mov	r1, r3
 80097c6:	4603      	mov	r3, r0
 80097c8:	4642      	mov	r2, r8
 80097ca:	189b      	adds	r3, r3, r2
 80097cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097d0:	464b      	mov	r3, r9
 80097d2:	460a      	mov	r2, r1
 80097d4:	eb42 0303 	adc.w	r3, r2, r3
 80097d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80097e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80097ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80097f0:	460b      	mov	r3, r1
 80097f2:	18db      	adds	r3, r3, r3
 80097f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80097f6:	4613      	mov	r3, r2
 80097f8:	eb42 0303 	adc.w	r3, r2, r3
 80097fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009802:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009806:	f7f7 fa3f 	bl	8000c88 <__aeabi_uldivmod>
 800980a:	4602      	mov	r2, r0
 800980c:	460b      	mov	r3, r1
 800980e:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <UART_SetConfig+0x2d4>)
 8009810:	fba3 1302 	umull	r1, r3, r3, r2
 8009814:	095b      	lsrs	r3, r3, #5
 8009816:	2164      	movs	r1, #100	; 0x64
 8009818:	fb01 f303 	mul.w	r3, r1, r3
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	3332      	adds	r3, #50	; 0x32
 8009822:	4a08      	ldr	r2, [pc, #32]	; (8009844 <UART_SetConfig+0x2d4>)
 8009824:	fba2 2303 	umull	r2, r3, r2, r3
 8009828:	095b      	lsrs	r3, r3, #5
 800982a:	f003 0207 	and.w	r2, r3, #7
 800982e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4422      	add	r2, r4
 8009836:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009838:	e106      	b.n	8009a48 <UART_SetConfig+0x4d8>
 800983a:	bf00      	nop
 800983c:	40011000 	.word	0x40011000
 8009840:	40011400 	.word	0x40011400
 8009844:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800984c:	2200      	movs	r2, #0
 800984e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009852:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009856:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800985a:	4642      	mov	r2, r8
 800985c:	464b      	mov	r3, r9
 800985e:	1891      	adds	r1, r2, r2
 8009860:	6239      	str	r1, [r7, #32]
 8009862:	415b      	adcs	r3, r3
 8009864:	627b      	str	r3, [r7, #36]	; 0x24
 8009866:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800986a:	4641      	mov	r1, r8
 800986c:	1854      	adds	r4, r2, r1
 800986e:	4649      	mov	r1, r9
 8009870:	eb43 0501 	adc.w	r5, r3, r1
 8009874:	f04f 0200 	mov.w	r2, #0
 8009878:	f04f 0300 	mov.w	r3, #0
 800987c:	00eb      	lsls	r3, r5, #3
 800987e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009882:	00e2      	lsls	r2, r4, #3
 8009884:	4614      	mov	r4, r2
 8009886:	461d      	mov	r5, r3
 8009888:	4643      	mov	r3, r8
 800988a:	18e3      	adds	r3, r4, r3
 800988c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009890:	464b      	mov	r3, r9
 8009892:	eb45 0303 	adc.w	r3, r5, r3
 8009896:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800989a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098aa:	f04f 0200 	mov.w	r2, #0
 80098ae:	f04f 0300 	mov.w	r3, #0
 80098b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80098b6:	4629      	mov	r1, r5
 80098b8:	008b      	lsls	r3, r1, #2
 80098ba:	4621      	mov	r1, r4
 80098bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098c0:	4621      	mov	r1, r4
 80098c2:	008a      	lsls	r2, r1, #2
 80098c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80098c8:	f7f7 f9de 	bl	8000c88 <__aeabi_uldivmod>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4b60      	ldr	r3, [pc, #384]	; (8009a54 <UART_SetConfig+0x4e4>)
 80098d2:	fba3 2302 	umull	r2, r3, r3, r2
 80098d6:	095b      	lsrs	r3, r3, #5
 80098d8:	011c      	lsls	r4, r3, #4
 80098da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098de:	2200      	movs	r2, #0
 80098e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80098e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80098ec:	4642      	mov	r2, r8
 80098ee:	464b      	mov	r3, r9
 80098f0:	1891      	adds	r1, r2, r2
 80098f2:	61b9      	str	r1, [r7, #24]
 80098f4:	415b      	adcs	r3, r3
 80098f6:	61fb      	str	r3, [r7, #28]
 80098f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098fc:	4641      	mov	r1, r8
 80098fe:	1851      	adds	r1, r2, r1
 8009900:	6139      	str	r1, [r7, #16]
 8009902:	4649      	mov	r1, r9
 8009904:	414b      	adcs	r3, r1
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	f04f 0200 	mov.w	r2, #0
 800990c:	f04f 0300 	mov.w	r3, #0
 8009910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009914:	4659      	mov	r1, fp
 8009916:	00cb      	lsls	r3, r1, #3
 8009918:	4651      	mov	r1, sl
 800991a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800991e:	4651      	mov	r1, sl
 8009920:	00ca      	lsls	r2, r1, #3
 8009922:	4610      	mov	r0, r2
 8009924:	4619      	mov	r1, r3
 8009926:	4603      	mov	r3, r0
 8009928:	4642      	mov	r2, r8
 800992a:	189b      	adds	r3, r3, r2
 800992c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009930:	464b      	mov	r3, r9
 8009932:	460a      	mov	r2, r1
 8009934:	eb42 0303 	adc.w	r3, r2, r3
 8009938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800993c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	67bb      	str	r3, [r7, #120]	; 0x78
 8009946:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009948:	f04f 0200 	mov.w	r2, #0
 800994c:	f04f 0300 	mov.w	r3, #0
 8009950:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009954:	4649      	mov	r1, r9
 8009956:	008b      	lsls	r3, r1, #2
 8009958:	4641      	mov	r1, r8
 800995a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800995e:	4641      	mov	r1, r8
 8009960:	008a      	lsls	r2, r1, #2
 8009962:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009966:	f7f7 f98f 	bl	8000c88 <__aeabi_uldivmod>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4611      	mov	r1, r2
 8009970:	4b38      	ldr	r3, [pc, #224]	; (8009a54 <UART_SetConfig+0x4e4>)
 8009972:	fba3 2301 	umull	r2, r3, r3, r1
 8009976:	095b      	lsrs	r3, r3, #5
 8009978:	2264      	movs	r2, #100	; 0x64
 800997a:	fb02 f303 	mul.w	r3, r2, r3
 800997e:	1acb      	subs	r3, r1, r3
 8009980:	011b      	lsls	r3, r3, #4
 8009982:	3332      	adds	r3, #50	; 0x32
 8009984:	4a33      	ldr	r2, [pc, #204]	; (8009a54 <UART_SetConfig+0x4e4>)
 8009986:	fba2 2303 	umull	r2, r3, r2, r3
 800998a:	095b      	lsrs	r3, r3, #5
 800998c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009990:	441c      	add	r4, r3
 8009992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009996:	2200      	movs	r2, #0
 8009998:	673b      	str	r3, [r7, #112]	; 0x70
 800999a:	677a      	str	r2, [r7, #116]	; 0x74
 800999c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80099a0:	4642      	mov	r2, r8
 80099a2:	464b      	mov	r3, r9
 80099a4:	1891      	adds	r1, r2, r2
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	415b      	adcs	r3, r3
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099b0:	4641      	mov	r1, r8
 80099b2:	1851      	adds	r1, r2, r1
 80099b4:	6039      	str	r1, [r7, #0]
 80099b6:	4649      	mov	r1, r9
 80099b8:	414b      	adcs	r3, r1
 80099ba:	607b      	str	r3, [r7, #4]
 80099bc:	f04f 0200 	mov.w	r2, #0
 80099c0:	f04f 0300 	mov.w	r3, #0
 80099c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80099c8:	4659      	mov	r1, fp
 80099ca:	00cb      	lsls	r3, r1, #3
 80099cc:	4651      	mov	r1, sl
 80099ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099d2:	4651      	mov	r1, sl
 80099d4:	00ca      	lsls	r2, r1, #3
 80099d6:	4610      	mov	r0, r2
 80099d8:	4619      	mov	r1, r3
 80099da:	4603      	mov	r3, r0
 80099dc:	4642      	mov	r2, r8
 80099de:	189b      	adds	r3, r3, r2
 80099e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80099e2:	464b      	mov	r3, r9
 80099e4:	460a      	mov	r2, r1
 80099e6:	eb42 0303 	adc.w	r3, r2, r3
 80099ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	663b      	str	r3, [r7, #96]	; 0x60
 80099f6:	667a      	str	r2, [r7, #100]	; 0x64
 80099f8:	f04f 0200 	mov.w	r2, #0
 80099fc:	f04f 0300 	mov.w	r3, #0
 8009a00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a04:	4649      	mov	r1, r9
 8009a06:	008b      	lsls	r3, r1, #2
 8009a08:	4641      	mov	r1, r8
 8009a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a0e:	4641      	mov	r1, r8
 8009a10:	008a      	lsls	r2, r1, #2
 8009a12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a16:	f7f7 f937 	bl	8000c88 <__aeabi_uldivmod>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4b0d      	ldr	r3, [pc, #52]	; (8009a54 <UART_SetConfig+0x4e4>)
 8009a20:	fba3 1302 	umull	r1, r3, r3, r2
 8009a24:	095b      	lsrs	r3, r3, #5
 8009a26:	2164      	movs	r1, #100	; 0x64
 8009a28:	fb01 f303 	mul.w	r3, r1, r3
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	011b      	lsls	r3, r3, #4
 8009a30:	3332      	adds	r3, #50	; 0x32
 8009a32:	4a08      	ldr	r2, [pc, #32]	; (8009a54 <UART_SetConfig+0x4e4>)
 8009a34:	fba2 2303 	umull	r2, r3, r2, r3
 8009a38:	095b      	lsrs	r3, r3, #5
 8009a3a:	f003 020f 	and.w	r2, r3, #15
 8009a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4422      	add	r2, r4
 8009a46:	609a      	str	r2, [r3, #8]
}
 8009a48:	bf00      	nop
 8009a4a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a54:	51eb851f 	.word	0x51eb851f

08009a58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a58:	b084      	sub	sp, #16
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	f107 001c 	add.w	r0, r7, #28
 8009a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a6a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d123      	bne.n	8009aba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d105      	bne.n	8009aae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f9dc 	bl	8009e6c <USB_CoreReset>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]
 8009ab8:	e01b      	b.n	8009af2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f9d0 	bl	8009e6c <USB_CoreReset>
 8009acc:	4603      	mov	r3, r0
 8009ace:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009ad0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d106      	bne.n	8009ae6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009adc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8009ae4:	e005      	b.n	8009af2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009af2:	7fbb      	ldrb	r3, [r7, #30]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d10b      	bne.n	8009b10 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	f043 0206 	orr.w	r2, r3, #6
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	f043 0220 	orr.w	r2, r3, #32
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b1c:	b004      	add	sp, #16
 8009b1e:	4770      	bx	lr

08009b20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	f043 0201 	orr.w	r2, r3, #1
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b083      	sub	sp, #12
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f023 0201 	bic.w	r2, r3, #1
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d115      	bne.n	8009bb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b92:	200a      	movs	r0, #10
 8009b94:	f7f8 fb64 	bl	8002260 <HAL_Delay>
      ms += 10U;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	330a      	adds	r3, #10
 8009b9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f956 	bl	8009e50 <USB_GetMode>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d01e      	beq.n	8009be8 <USB_SetCurrentMode+0x84>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2bc7      	cmp	r3, #199	; 0xc7
 8009bae:	d9f0      	bls.n	8009b92 <USB_SetCurrentMode+0x2e>
 8009bb0:	e01a      	b.n	8009be8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009bb2:	78fb      	ldrb	r3, [r7, #3]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d115      	bne.n	8009be4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bc4:	200a      	movs	r0, #10
 8009bc6:	f7f8 fb4b 	bl	8002260 <HAL_Delay>
      ms += 10U;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	330a      	adds	r3, #10
 8009bce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f93d 	bl	8009e50 <USB_GetMode>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d005      	beq.n	8009be8 <USB_SetCurrentMode+0x84>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2bc7      	cmp	r3, #199	; 0xc7
 8009be0:	d9f0      	bls.n	8009bc4 <USB_SetCurrentMode+0x60>
 8009be2:	e001      	b.n	8009be8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e005      	b.n	8009bf4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2bc8      	cmp	r3, #200	; 0xc8
 8009bec:	d101      	bne.n	8009bf2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e000      	b.n	8009bf4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009c16:	d901      	bls.n	8009c1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e01b      	b.n	8009c54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	daf2      	bge.n	8009c0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	019b      	lsls	r3, r3, #6
 8009c2c:	f043 0220 	orr.w	r2, r3, #32
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009c40:	d901      	bls.n	8009c46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e006      	b.n	8009c54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	d0f0      	beq.n	8009c34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009c78:	d901      	bls.n	8009c7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e018      	b.n	8009cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	daf2      	bge.n	8009c6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2210      	movs	r2, #16
 8009c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3301      	adds	r3, #1
 8009c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009c9c:	d901      	bls.n	8009ca2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e006      	b.n	8009cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	f003 0310 	and.w	r3, r3, #16
 8009caa:	2b10      	cmp	r3, #16
 8009cac:	d0f0      	beq.n	8009c90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b089      	sub	sp, #36	; 0x24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	461a      	mov	r2, r3
 8009cca:	460b      	mov	r3, r1
 8009ccc:	71fb      	strb	r3, [r7, #7]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009cda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d123      	bne.n	8009d2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ce2:	88bb      	ldrh	r3, [r7, #4]
 8009ce4:	3303      	adds	r3, #3
 8009ce6:	089b      	lsrs	r3, r3, #2
 8009ce8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009cea:	2300      	movs	r3, #0
 8009cec:	61bb      	str	r3, [r7, #24]
 8009cee:	e018      	b.n	8009d22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009cf0:	79fb      	ldrb	r3, [r7, #7]
 8009cf2:	031a      	lsls	r2, r3, #12
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	3301      	adds	r3, #1
 8009d08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	3301      	adds	r3, #1
 8009d14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	61bb      	str	r3, [r7, #24]
 8009d22:	69ba      	ldr	r2, [r7, #24]
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d3e2      	bcc.n	8009cf0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3724      	adds	r7, #36	; 0x24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b08b      	sub	sp, #44	; 0x2c
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	4613      	mov	r3, r2
 8009d44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d4e:	88fb      	ldrh	r3, [r7, #6]
 8009d50:	089b      	lsrs	r3, r3, #2
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d56:	88fb      	ldrh	r3, [r7, #6]
 8009d58:	f003 0303 	and.w	r3, r3, #3
 8009d5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d5e:	2300      	movs	r3, #0
 8009d60:	623b      	str	r3, [r7, #32]
 8009d62:	e014      	b.n	8009d8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	3301      	adds	r3, #1
 8009d74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	3301      	adds	r3, #1
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	3301      	adds	r3, #1
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	3301      	adds	r3, #1
 8009d86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	623b      	str	r3, [r7, #32]
 8009d8e:	6a3a      	ldr	r2, [r7, #32]
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d3e6      	bcc.n	8009d64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d96:	8bfb      	ldrh	r3, [r7, #30]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01e      	beq.n	8009dda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da6:	461a      	mov	r2, r3
 8009da8:	f107 0310 	add.w	r3, r7, #16
 8009dac:	6812      	ldr	r2, [r2, #0]
 8009dae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	00db      	lsls	r3, r3, #3
 8009db8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	701a      	strb	r2, [r3, #0]
      i++;
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	3301      	adds	r3, #1
 8009dcc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009dce:	8bfb      	ldrh	r3, [r7, #30]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009dd4:	8bfb      	ldrh	r3, [r7, #30]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1ea      	bne.n	8009db0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	372c      	adds	r7, #44	; 0x2c
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e00:	68fb      	ldr	r3, [r7, #12]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	460b      	mov	r3, r1
 8009e18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009e1e:	78fb      	ldrb	r3, [r7, #3]
 8009e20:	015a      	lsls	r2, r3, #5
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	4413      	add	r3, r2
 8009e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009e2e:	78fb      	ldrb	r3, [r7, #3]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	4013      	ands	r3, r2
 8009e40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e42:	68bb      	ldr	r3, [r7, #8]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	f003 0301 	and.w	r3, r3, #1
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009e84:	d901      	bls.n	8009e8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e01b      	b.n	8009ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	daf2      	bge.n	8009e78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f043 0201 	orr.w	r2, r3, #1
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009eae:	d901      	bls.n	8009eb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e006      	b.n	8009ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d0f0      	beq.n	8009ea2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
	...

08009ed0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b086      	sub	sp, #24
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f12:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d119      	bne.n	8009f5a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d10a      	bne.n	8009f44 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f3c:	f043 0304 	orr.w	r3, r3, #4
 8009f40:	6013      	str	r3, [r2, #0]
 8009f42:	e014      	b.n	8009f6e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f52:	f023 0304 	bic.w	r3, r3, #4
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	e009      	b.n	8009f6e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f68:	f023 0304 	bic.w	r3, r3, #4
 8009f6c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f6e:	2110      	movs	r1, #16
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f7ff fe43 	bl	8009bfc <USB_FlushTxFifo>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7ff fe6d 	bl	8009c60 <USB_FlushRxFifo>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009f90:	2300      	movs	r3, #0
 8009f92:	613b      	str	r3, [r7, #16]
 8009f94:	e015      	b.n	8009fc2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	613b      	str	r3, [r7, #16]
 8009fc2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d3e3      	bcc.n	8009f96 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fda:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a18      	ldr	r2, [pc, #96]	; (800a040 <USB_HostInit+0x170>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d10b      	bne.n	8009ffc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a15      	ldr	r2, [pc, #84]	; (800a044 <USB_HostInit+0x174>)
 8009ff0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a14      	ldr	r2, [pc, #80]	; (800a048 <USB_HostInit+0x178>)
 8009ff6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009ffa:	e009      	b.n	800a010 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2280      	movs	r2, #128	; 0x80
 800a000:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a11      	ldr	r2, [pc, #68]	; (800a04c <USB_HostInit+0x17c>)
 800a006:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a11      	ldr	r2, [pc, #68]	; (800a050 <USB_HostInit+0x180>)
 800a00c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a014:	2b00      	cmp	r3, #0
 800a016:	d105      	bne.n	800a024 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	f043 0210 	orr.w	r2, r3, #16
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	699a      	ldr	r2, [r3, #24]
 800a028:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <USB_HostInit+0x184>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a030:	7dfb      	ldrb	r3, [r7, #23]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a03c:	b004      	add	sp, #16
 800a03e:	4770      	bx	lr
 800a040:	40040000 	.word	0x40040000
 800a044:	01000200 	.word	0x01000200
 800a048:	00e00300 	.word	0x00e00300
 800a04c:	00600080 	.word	0x00600080
 800a050:	004000e0 	.word	0x004000e0
 800a054:	a3200008 	.word	0xa3200008

0800a058 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a076:	f023 0303 	bic.w	r3, r3, #3
 800a07a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a090:	4313      	orrs	r3, r2
 800a092:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d107      	bne.n	800a0aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a0a6:	6053      	str	r3, [r2, #4]
 800a0a8:	e00c      	b.n	800a0c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d107      	bne.n	800a0c0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f241 7370 	movw	r3, #6000	; 0x1770
 800a0bc:	6053      	str	r3, [r2, #4]
 800a0be:	e001      	b.n	800a0c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e000      	b.n	800a0c6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a0f2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a0fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a100:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a102:	2064      	movs	r0, #100	; 0x64
 800a104:	f7f8 f8ac 	bl	8002260 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a114:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a116:	200a      	movs	r0, #10
 800a118:	f7f8 f8a2 	bl	8002260 <HAL_Delay>

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	460b      	mov	r3, r1
 800a130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a14a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d109      	bne.n	800a16a <USB_DriveVbus+0x44>
 800a156:	78fb      	ldrb	r3, [r7, #3]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d106      	bne.n	800a16a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a164:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a168:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a174:	d109      	bne.n	800a18a <USB_DriveVbus+0x64>
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d106      	bne.n	800a18a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a188:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	0c5b      	lsrs	r3, r3, #17
 800a1b6:	f003 0303 	and.w	r3, r3, #3
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b085      	sub	sp, #20
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	b29b      	uxth	r3, r3
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3714      	adds	r7, #20
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	70fb      	strb	r3, [r7, #3]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	70bb      	strb	r3, [r7, #2]
 800a1fe:	4613      	mov	r3, r2
 800a200:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a20a:	78fb      	ldrb	r3, [r7, #3]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	4413      	add	r3, r2
 800a212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a216:	461a      	mov	r2, r3
 800a218:	f04f 33ff 	mov.w	r3, #4294967295
 800a21c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a21e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a222:	2b03      	cmp	r3, #3
 800a224:	d87c      	bhi.n	800a320 <USB_HC_Init+0x138>
 800a226:	a201      	add	r2, pc, #4	; (adr r2, 800a22c <USB_HC_Init+0x44>)
 800a228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22c:	0800a23d 	.word	0x0800a23d
 800a230:	0800a2e3 	.word	0x0800a2e3
 800a234:	0800a23d 	.word	0x0800a23d
 800a238:	0800a2a5 	.word	0x0800a2a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	4413      	add	r3, r2
 800a244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a248:	461a      	mov	r2, r3
 800a24a:	f240 439d 	movw	r3, #1181	; 0x49d
 800a24e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a250:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a254:	2b00      	cmp	r3, #0
 800a256:	da10      	bge.n	800a27a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a258:	78fb      	ldrb	r3, [r7, #3]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	78fa      	ldrb	r2, [r7, #3]
 800a268:	0151      	lsls	r1, r2, #5
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	440a      	add	r2, r1
 800a26e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a276:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a278:	e055      	b.n	800a326 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a6f      	ldr	r2, [pc, #444]	; (800a43c <USB_HC_Init+0x254>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d151      	bne.n	800a326 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a282:	78fb      	ldrb	r3, [r7, #3]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	78fa      	ldrb	r2, [r7, #3]
 800a292:	0151      	lsls	r1, r2, #5
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	440a      	add	r2, r1
 800a298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a29c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a2a0:	60d3      	str	r3, [r2, #12]
      break;
 800a2a2:	e040      	b.n	800a326 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	f240 639d 	movw	r3, #1693	; 0x69d
 800a2b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a2b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	da34      	bge.n	800a32a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a2c0:	78fb      	ldrb	r3, [r7, #3]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	78fa      	ldrb	r2, [r7, #3]
 800a2d0:	0151      	lsls	r1, r2, #5
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	440a      	add	r2, r1
 800a2d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2de:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a2e0:	e023      	b.n	800a32a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a2e2:	78fb      	ldrb	r3, [r7, #3]
 800a2e4:	015a      	lsls	r2, r3, #5
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	f240 2325 	movw	r3, #549	; 0x225
 800a2f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a2f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	da17      	bge.n	800a32e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a2fe:	78fb      	ldrb	r3, [r7, #3]
 800a300:	015a      	lsls	r2, r3, #5
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	4413      	add	r3, r2
 800a306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	78fa      	ldrb	r2, [r7, #3]
 800a30e:	0151      	lsls	r1, r2, #5
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	440a      	add	r2, r1
 800a314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a318:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a31c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a31e:	e006      	b.n	800a32e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	77fb      	strb	r3, [r7, #31]
      break;
 800a324:	e004      	b.n	800a330 <USB_HC_Init+0x148>
      break;
 800a326:	bf00      	nop
 800a328:	e002      	b.n	800a330 <USB_HC_Init+0x148>
      break;
 800a32a:	bf00      	nop
 800a32c:	e000      	b.n	800a330 <USB_HC_Init+0x148>
      break;
 800a32e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	4413      	add	r3, r2
 800a338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a33c:	461a      	mov	r2, r3
 800a33e:	2300      	movs	r3, #0
 800a340:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	015a      	lsls	r2, r3, #5
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	4413      	add	r3, r2
 800a34a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	78fa      	ldrb	r2, [r7, #3]
 800a352:	0151      	lsls	r1, r2, #5
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	440a      	add	r2, r1
 800a358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a35c:	f043 0302 	orr.w	r3, r3, #2
 800a360:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a368:	699a      	ldr	r2, [r3, #24]
 800a36a:	78fb      	ldrb	r3, [r7, #3]
 800a36c:	f003 030f 	and.w	r3, r3, #15
 800a370:	2101      	movs	r1, #1
 800a372:	fa01 f303 	lsl.w	r3, r1, r3
 800a376:	6939      	ldr	r1, [r7, #16]
 800a378:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a37c:	4313      	orrs	r3, r2
 800a37e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a38c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a390:	2b00      	cmp	r3, #0
 800a392:	da03      	bge.n	800a39c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a398:	61bb      	str	r3, [r7, #24]
 800a39a:	e001      	b.n	800a3a0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7ff fef9 	bl	800a198 <USB_GetHostSpeed>
 800a3a6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a3a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d106      	bne.n	800a3be <USB_HC_Init+0x1d6>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d003      	beq.n	800a3be <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a3b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	e001      	b.n	800a3c2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a3c2:	787b      	ldrb	r3, [r7, #1]
 800a3c4:	059b      	lsls	r3, r3, #22
 800a3c6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a3ca:	78bb      	ldrb	r3, [r7, #2]
 800a3cc:	02db      	lsls	r3, r3, #11
 800a3ce:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a3d2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a3d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a3d8:	049b      	lsls	r3, r3, #18
 800a3da:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a3de:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a3e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a3e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a3e6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a3f0:	78fa      	ldrb	r2, [r7, #3]
 800a3f2:	0151      	lsls	r1, r2, #5
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	440a      	add	r2, r1
 800a3f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a3fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a400:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a402:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a406:	2b03      	cmp	r3, #3
 800a408:	d003      	beq.n	800a412 <USB_HC_Init+0x22a>
 800a40a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d10f      	bne.n	800a432 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a412:	78fb      	ldrb	r3, [r7, #3]
 800a414:	015a      	lsls	r2, r3, #5
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	4413      	add	r3, r2
 800a41a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	78fa      	ldrb	r2, [r7, #3]
 800a422:	0151      	lsls	r1, r2, #5
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	440a      	add	r2, r1
 800a428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a42c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a430:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a432:	7ffb      	ldrb	r3, [r7, #31]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3720      	adds	r7, #32
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	40040000 	.word	0x40040000

0800a440 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08c      	sub	sp, #48	; 0x30
 800a444:	af02      	add	r7, sp, #8
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	4613      	mov	r3, r2
 800a44c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	785b      	ldrb	r3, [r3, #1]
 800a456:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a45c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	4a5d      	ldr	r2, [pc, #372]	; (800a5d8 <USB_HC_StartXfer+0x198>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d12f      	bne.n	800a4c6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a466:	79fb      	ldrb	r3, [r7, #7]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d11c      	bne.n	800a4a6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	7c9b      	ldrb	r3, [r3, #18]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d003      	beq.n	800a47c <USB_HC_StartXfer+0x3c>
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	7c9b      	ldrb	r3, [r3, #18]
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d124      	bne.n	800a4c6 <USB_HC_StartXfer+0x86>
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	799b      	ldrb	r3, [r3, #6]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d120      	bne.n	800a4c6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	69fa      	ldr	r2, [r7, #28]
 800a494:	0151      	lsls	r1, r2, #5
 800a496:	6a3a      	ldr	r2, [r7, #32]
 800a498:	440a      	add	r2, r1
 800a49a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a2:	60d3      	str	r3, [r2, #12]
 800a4a4:	e00f      	b.n	800a4c6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	791b      	ldrb	r3, [r3, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10b      	bne.n	800a4c6 <USB_HC_StartXfer+0x86>
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	795b      	ldrb	r3, [r3, #5]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d107      	bne.n	800a4c6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	785b      	ldrb	r3, [r3, #1]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 fb6b 	bl	800ab98 <USB_DoPing>
        return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	e232      	b.n	800a92c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	799b      	ldrb	r3, [r3, #6]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d158      	bne.n	800a580 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	78db      	ldrb	r3, [r3, #3]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d007      	beq.n	800a4ea <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a4da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	8a92      	ldrh	r2, [r2, #20]
 800a4e0:	fb03 f202 	mul.w	r2, r3, r2
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	61da      	str	r2, [r3, #28]
 800a4e8:	e07c      	b.n	800a5e4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	7c9b      	ldrb	r3, [r3, #18]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d130      	bne.n	800a554 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	2bbc      	cmp	r3, #188	; 0xbc
 800a4f8:	d918      	bls.n	800a52c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	8a9b      	ldrh	r3, [r3, #20]
 800a4fe:	461a      	mov	r2, r3
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	69da      	ldr	r2, [r3, #28]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d003      	beq.n	800a51c <USB_HC_StartXfer+0xdc>
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d103      	bne.n	800a524 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2202      	movs	r2, #2
 800a520:	60da      	str	r2, [r3, #12]
 800a522:	e05f      	b.n	800a5e4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2201      	movs	r2, #1
 800a528:	60da      	str	r2, [r3, #12]
 800a52a:	e05b      	b.n	800a5e4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	6a1a      	ldr	r2, [r3, #32]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d007      	beq.n	800a54c <USB_HC_StartXfer+0x10c>
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	2b02      	cmp	r3, #2
 800a542:	d003      	beq.n	800a54c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2204      	movs	r2, #4
 800a548:	60da      	str	r2, [r3, #12]
 800a54a:	e04b      	b.n	800a5e4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2203      	movs	r2, #3
 800a550:	60da      	str	r2, [r3, #12]
 800a552:	e047      	b.n	800a5e4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d10d      	bne.n	800a576 <USB_HC_StartXfer+0x136>
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	8a92      	ldrh	r2, [r2, #20]
 800a562:	4293      	cmp	r3, r2
 800a564:	d907      	bls.n	800a576 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a566:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	8a92      	ldrh	r2, [r2, #20]
 800a56c:	fb03 f202 	mul.w	r2, r3, r2
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	61da      	str	r2, [r3, #28]
 800a574:	e036      	b.n	800a5e4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	6a1a      	ldr	r2, [r3, #32]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	61da      	str	r2, [r3, #28]
 800a57e:	e031      	b.n	800a5e4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	6a1b      	ldr	r3, [r3, #32]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d018      	beq.n	800a5ba <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	8a92      	ldrh	r2, [r2, #20]
 800a590:	4413      	add	r3, r2
 800a592:	3b01      	subs	r3, #1
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	8a92      	ldrh	r2, [r2, #20]
 800a598:	fbb3 f3f2 	udiv	r3, r3, r2
 800a59c:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800a59e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a5a0:	8b7b      	ldrh	r3, [r7, #26]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d90b      	bls.n	800a5be <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a5a6:	8b7b      	ldrh	r3, [r7, #26]
 800a5a8:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a5aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	8a92      	ldrh	r2, [r2, #20]
 800a5b0:	fb03 f202 	mul.w	r2, r3, r2
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	61da      	str	r2, [r3, #28]
 800a5b8:	e001      	b.n	800a5be <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	78db      	ldrb	r3, [r3, #3]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00a      	beq.n	800a5dc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a5c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	8a92      	ldrh	r2, [r2, #20]
 800a5cc:	fb03 f202 	mul.w	r2, r3, r2
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	61da      	str	r2, [r3, #28]
 800a5d4:	e006      	b.n	800a5e4 <USB_HC_StartXfer+0x1a4>
 800a5d6:	bf00      	nop
 800a5d8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	6a1a      	ldr	r2, [r3, #32]
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	69db      	ldr	r3, [r3, #28]
 800a5e8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a5ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5ee:	04d9      	lsls	r1, r3, #19
 800a5f0:	4ba3      	ldr	r3, [pc, #652]	; (800a880 <USB_HC_StartXfer+0x440>)
 800a5f2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a5f4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	7d9b      	ldrb	r3, [r3, #22]
 800a5fa:	075b      	lsls	r3, r3, #29
 800a5fc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a600:	69f9      	ldr	r1, [r7, #28]
 800a602:	0148      	lsls	r0, r1, #5
 800a604:	6a39      	ldr	r1, [r7, #32]
 800a606:	4401      	add	r1, r0
 800a608:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a60c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a60e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d009      	beq.n	800a62a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	6999      	ldr	r1, [r3, #24]
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	4413      	add	r3, r2
 800a622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a626:	460a      	mov	r2, r1
 800a628:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	bf0c      	ite	eq
 800a63a:	2301      	moveq	r3, #1
 800a63c:	2300      	movne	r3, #0
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	015a      	lsls	r2, r3, #5
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	4413      	add	r3, r2
 800a64a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	69fa      	ldr	r2, [r7, #28]
 800a652:	0151      	lsls	r1, r2, #5
 800a654:	6a3a      	ldr	r2, [r7, #32]
 800a656:	440a      	add	r2, r1
 800a658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a65c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a660:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	7e7b      	ldrb	r3, [r7, #25]
 800a672:	075b      	lsls	r3, r3, #29
 800a674:	69f9      	ldr	r1, [r7, #28]
 800a676:	0148      	lsls	r0, r1, #5
 800a678:	6a39      	ldr	r1, [r7, #32]
 800a67a:	4401      	add	r1, r0
 800a67c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a680:	4313      	orrs	r3, r2
 800a682:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	799b      	ldrb	r3, [r3, #6]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	f040 80c3 	bne.w	800a814 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	7c5b      	ldrb	r3, [r3, #17]
 800a692:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a698:	4313      	orrs	r3, r2
 800a69a:	69fa      	ldr	r2, [r7, #28]
 800a69c:	0151      	lsls	r1, r2, #5
 800a69e:	6a3a      	ldr	r2, [r7, #32]
 800a6a0:	440a      	add	r2, r1
 800a6a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a6a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a6aa:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	69fa      	ldr	r2, [r7, #28]
 800a6bc:	0151      	lsls	r1, r2, #5
 800a6be:	6a3a      	ldr	r2, [r7, #32]
 800a6c0:	440a      	add	r2, r1
 800a6c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a6ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	79db      	ldrb	r3, [r3, #7]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d123      	bne.n	800a71c <USB_HC_StartXfer+0x2dc>
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	78db      	ldrb	r3, [r3, #3]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d11f      	bne.n	800a71c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	69fa      	ldr	r2, [r7, #28]
 800a6ec:	0151      	lsls	r1, r2, #5
 800a6ee:	6a3a      	ldr	r2, [r7, #32]
 800a6f0:	440a      	add	r2, r1
 800a6f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6fa:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	4413      	add	r3, r2
 800a704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	69fa      	ldr	r2, [r7, #28]
 800a70c:	0151      	lsls	r1, r2, #5
 800a70e:	6a3a      	ldr	r2, [r7, #32]
 800a710:	440a      	add	r2, r1
 800a712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a71a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	7c9b      	ldrb	r3, [r3, #18]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d003      	beq.n	800a72c <USB_HC_StartXfer+0x2ec>
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	7c9b      	ldrb	r3, [r3, #18]
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d117      	bne.n	800a75c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a730:	2b01      	cmp	r3, #1
 800a732:	d113      	bne.n	800a75c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	78db      	ldrb	r3, [r3, #3]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d10f      	bne.n	800a75c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	015a      	lsls	r2, r3, #5
 800a740:	6a3b      	ldr	r3, [r7, #32]
 800a742:	4413      	add	r3, r2
 800a744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	69fa      	ldr	r2, [r7, #28]
 800a74c:	0151      	lsls	r1, r2, #5
 800a74e:	6a3a      	ldr	r2, [r7, #32]
 800a750:	440a      	add	r2, r1
 800a752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a75a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	7c9b      	ldrb	r3, [r3, #18]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d162      	bne.n	800a82a <USB_HC_StartXfer+0x3ea>
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	78db      	ldrb	r3, [r3, #3]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d15e      	bne.n	800a82a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	3b01      	subs	r3, #1
 800a772:	2b03      	cmp	r3, #3
 800a774:	d858      	bhi.n	800a828 <USB_HC_StartXfer+0x3e8>
 800a776:	a201      	add	r2, pc, #4	; (adr r2, 800a77c <USB_HC_StartXfer+0x33c>)
 800a778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77c:	0800a78d 	.word	0x0800a78d
 800a780:	0800a7af 	.word	0x0800a7af
 800a784:	0800a7d1 	.word	0x0800a7d1
 800a788:	0800a7f3 	.word	0x0800a7f3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	015a      	lsls	r2, r3, #5
 800a790:	6a3b      	ldr	r3, [r7, #32]
 800a792:	4413      	add	r3, r2
 800a794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	69fa      	ldr	r2, [r7, #28]
 800a79c:	0151      	lsls	r1, r2, #5
 800a79e:	6a3a      	ldr	r2, [r7, #32]
 800a7a0:	440a      	add	r2, r1
 800a7a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7aa:	6053      	str	r3, [r2, #4]
          break;
 800a7ac:	e03d      	b.n	800a82a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	69fa      	ldr	r2, [r7, #28]
 800a7be:	0151      	lsls	r1, r2, #5
 800a7c0:	6a3a      	ldr	r2, [r7, #32]
 800a7c2:	440a      	add	r2, r1
 800a7c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7c8:	f043 030e 	orr.w	r3, r3, #14
 800a7cc:	6053      	str	r3, [r2, #4]
          break;
 800a7ce:	e02c      	b.n	800a82a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	69fa      	ldr	r2, [r7, #28]
 800a7e0:	0151      	lsls	r1, r2, #5
 800a7e2:	6a3a      	ldr	r2, [r7, #32]
 800a7e4:	440a      	add	r2, r1
 800a7e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7ee:	6053      	str	r3, [r2, #4]
          break;
 800a7f0:	e01b      	b.n	800a82a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	015a      	lsls	r2, r3, #5
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	69fa      	ldr	r2, [r7, #28]
 800a802:	0151      	lsls	r1, r2, #5
 800a804:	6a3a      	ldr	r2, [r7, #32]
 800a806:	440a      	add	r2, r1
 800a808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a80c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a810:	6053      	str	r3, [r2, #4]
          break;
 800a812:	e00a      	b.n	800a82a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	015a      	lsls	r2, r3, #5
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	4413      	add	r3, r2
 800a81c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a820:	461a      	mov	r2, r3
 800a822:	2300      	movs	r3, #0
 800a824:	6053      	str	r3, [r2, #4]
 800a826:	e000      	b.n	800a82a <USB_HC_StartXfer+0x3ea>
          break;
 800a828:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	015a      	lsls	r2, r3, #5
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	4413      	add	r3, r2
 800a832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a840:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	78db      	ldrb	r3, [r3, #3]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d004      	beq.n	800a854 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a850:	613b      	str	r3, [r7, #16]
 800a852:	e003      	b.n	800a85c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a85a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a862:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a870:	461a      	mov	r2, r3
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a876:	79fb      	ldrb	r3, [r7, #7]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d003      	beq.n	800a884 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	e055      	b.n	800a92c <USB_HC_StartXfer+0x4ec>
 800a880:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	78db      	ldrb	r3, [r3, #3]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d14e      	bne.n	800a92a <USB_HC_StartXfer+0x4ea>
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d04a      	beq.n	800a92a <USB_HC_StartXfer+0x4ea>
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	79db      	ldrb	r3, [r3, #7]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d146      	bne.n	800a92a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	7c9b      	ldrb	r3, [r3, #18]
 800a8a0:	2b03      	cmp	r3, #3
 800a8a2:	d831      	bhi.n	800a908 <USB_HC_StartXfer+0x4c8>
 800a8a4:	a201      	add	r2, pc, #4	; (adr r2, 800a8ac <USB_HC_StartXfer+0x46c>)
 800a8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8aa:	bf00      	nop
 800a8ac:	0800a8bd 	.word	0x0800a8bd
 800a8b0:	0800a8e1 	.word	0x0800a8e1
 800a8b4:	0800a8bd 	.word	0x0800a8bd
 800a8b8:	0800a8e1 	.word	0x0800a8e1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	3303      	adds	r3, #3
 800a8c2:	089b      	lsrs	r3, r3, #2
 800a8c4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a8c6:	8afa      	ldrh	r2, [r7, #22]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d91c      	bls.n	800a90c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	f043 0220 	orr.w	r2, r3, #32
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	619a      	str	r2, [r3, #24]
        }
        break;
 800a8de:	e015      	b.n	800a90c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	3303      	adds	r3, #3
 800a8e6:	089b      	lsrs	r3, r3, #2
 800a8e8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a8ea:	8afa      	ldrh	r2, [r7, #22]
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d90a      	bls.n	800a910 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	619a      	str	r2, [r3, #24]
        }
        break;
 800a906:	e003      	b.n	800a910 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a908:	bf00      	nop
 800a90a:	e002      	b.n	800a912 <USB_HC_StartXfer+0x4d2>
        break;
 800a90c:	bf00      	nop
 800a90e:	e000      	b.n	800a912 <USB_HC_StartXfer+0x4d2>
        break;
 800a910:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	6999      	ldr	r1, [r3, #24]
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	785a      	ldrb	r2, [r3, #1]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	b29b      	uxth	r3, r3
 800a920:	2000      	movs	r0, #0
 800a922:	9000      	str	r0, [sp, #0]
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f7ff f9c9 	bl	8009cbc <USB_WritePacket>
  }

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3728      	adds	r7, #40	; 0x28
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	b29b      	uxth	r3, r3
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a956:	b480      	push	{r7}
 800a958:	b089      	sub	sp, #36	; 0x24
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	460b      	mov	r3, r1
 800a960:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a966:	78fb      	ldrb	r3, [r7, #3]
 800a968:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	4413      	add	r3, r2
 800a976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	0c9b      	lsrs	r3, r3, #18
 800a97e:	f003 0303 	and.w	r3, r3, #3
 800a982:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	0fdb      	lsrs	r3, r3, #31
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	015a      	lsls	r2, r3, #5
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	0fdb      	lsrs	r3, r3, #31
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	f003 0320 	and.w	r3, r3, #32
 800a9b8:	2b20      	cmp	r3, #32
 800a9ba:	d10d      	bne.n	800a9d8 <USB_HC_Halt+0x82>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10a      	bne.n	800a9d8 <USB_HC_Halt+0x82>
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d005      	beq.n	800a9d4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d002      	beq.n	800a9d4 <USB_HC_Halt+0x7e>
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	2b03      	cmp	r3, #3
 800a9d2:	d101      	bne.n	800a9d8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	e0d8      	b.n	800ab8a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d002      	beq.n	800a9e4 <USB_HC_Halt+0x8e>
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d173      	bne.n	800aacc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	0151      	lsls	r1, r2, #5
 800a9f6:	69fa      	ldr	r2, [r7, #28]
 800a9f8:	440a      	add	r2, r1
 800a9fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa02:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f003 0320 	and.w	r3, r3, #32
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d14a      	bne.n	800aaa6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d133      	bne.n	800aa84 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	69ba      	ldr	r2, [r7, #24]
 800aa2c:	0151      	lsls	r1, r2, #5
 800aa2e:	69fa      	ldr	r2, [r7, #28]
 800aa30:	440a      	add	r2, r1
 800aa32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa3a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	69ba      	ldr	r2, [r7, #24]
 800aa4c:	0151      	lsls	r1, r2, #5
 800aa4e:	69fa      	ldr	r2, [r7, #28]
 800aa50:	440a      	add	r2, r1
 800aa52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa5a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa68:	d82e      	bhi.n	800aac8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	015a      	lsls	r2, r3, #5
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	4413      	add	r3, r2
 800aa72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa80:	d0ec      	beq.n	800aa5c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa82:	e081      	b.n	800ab88 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69ba      	ldr	r2, [r7, #24]
 800aa94:	0151      	lsls	r1, r2, #5
 800aa96:	69fa      	ldr	r2, [r7, #28]
 800aa98:	440a      	add	r2, r1
 800aa9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aaa2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aaa4:	e070      	b.n	800ab88 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	0151      	lsls	r1, r2, #5
 800aab8:	69fa      	ldr	r2, [r7, #28]
 800aaba:	440a      	add	r2, r1
 800aabc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aac4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aac6:	e05f      	b.n	800ab88 <USB_HC_Halt+0x232>
            break;
 800aac8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aaca:	e05d      	b.n	800ab88 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	015a      	lsls	r2, r3, #5
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	4413      	add	r3, r2
 800aad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	0151      	lsls	r1, r2, #5
 800aade:	69fa      	ldr	r2, [r7, #28]
 800aae0:	440a      	add	r2, r1
 800aae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aaea:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d133      	bne.n	800ab64 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	015a      	lsls	r2, r3, #5
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	4413      	add	r3, r2
 800ab04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	69ba      	ldr	r2, [r7, #24]
 800ab0c:	0151      	lsls	r1, r2, #5
 800ab0e:	69fa      	ldr	r2, [r7, #28]
 800ab10:	440a      	add	r2, r1
 800ab12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab1a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	69ba      	ldr	r2, [r7, #24]
 800ab2c:	0151      	lsls	r1, r2, #5
 800ab2e:	69fa      	ldr	r2, [r7, #28]
 800ab30:	440a      	add	r2, r1
 800ab32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab3a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab48:	d81d      	bhi.n	800ab86 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	015a      	lsls	r2, r3, #5
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	4413      	add	r3, r2
 800ab52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab60:	d0ec      	beq.n	800ab3c <USB_HC_Halt+0x1e6>
 800ab62:	e011      	b.n	800ab88 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	015a      	lsls	r2, r3, #5
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	69ba      	ldr	r2, [r7, #24]
 800ab74:	0151      	lsls	r1, r2, #5
 800ab76:	69fa      	ldr	r2, [r7, #28]
 800ab78:	440a      	add	r2, r1
 800ab7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	e000      	b.n	800ab88 <USB_HC_Halt+0x232>
          break;
 800ab86:	bf00      	nop
    }
  }

  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3724      	adds	r7, #36	; 0x24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
	...

0800ab98 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800aba8:	78fb      	ldrb	r3, [r7, #3]
 800abaa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800abac:	2301      	movs	r3, #1
 800abae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	04da      	lsls	r2, r3, #19
 800abb4:	4b15      	ldr	r3, [pc, #84]	; (800ac0c <USB_DoPing+0x74>)
 800abb6:	4013      	ands	r3, r2
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	0151      	lsls	r1, r2, #5
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	440a      	add	r2, r1
 800abc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abc8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	015a      	lsls	r2, r3, #5
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	4413      	add	r3, r2
 800abd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800abe0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abe8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abf6:	461a      	mov	r2, r3
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	371c      	adds	r7, #28
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	1ff80000 	.word	0x1ff80000

0800ac10 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b088      	sub	sp, #32
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ac20:	2300      	movs	r3, #0
 800ac22:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7fe ff8c 	bl	8009b42 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac2a:	2110      	movs	r1, #16
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7fe ffe5 	bl	8009bfc <USB_FlushTxFifo>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff f80f 	bl	8009c60 <USB_FlushRxFifo>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	61bb      	str	r3, [r7, #24]
 800ac50:	e01f      	b.n	800ac92 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	015a      	lsls	r2, r3, #5
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac70:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac78:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	015a      	lsls	r2, r3, #5
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	4413      	add	r3, r2
 800ac82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac86:	461a      	mov	r2, r3
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	61bb      	str	r3, [r7, #24]
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	2b0f      	cmp	r3, #15
 800ac96:	d9dc      	bls.n	800ac52 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ac98:	2300      	movs	r3, #0
 800ac9a:	61bb      	str	r3, [r7, #24]
 800ac9c:	e034      	b.n	800ad08 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acb4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acc4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	4413      	add	r3, r2
 800acce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd2:	461a      	mov	r2, r3
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3301      	adds	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ace4:	d80c      	bhi.n	800ad00 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	4413      	add	r3, r2
 800acee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acfc:	d0ec      	beq.n	800acd8 <USB_StopHost+0xc8>
 800acfe:	e000      	b.n	800ad02 <USB_StopHost+0xf2>
        break;
 800ad00:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	3301      	adds	r3, #1
 800ad06:	61bb      	str	r3, [r7, #24]
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	2b0f      	cmp	r3, #15
 800ad0c:	d9c7      	bls.n	800ac9e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad14:	461a      	mov	r2, r3
 800ad16:	f04f 33ff 	mov.w	r3, #4294967295
 800ad1a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad22:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7fe fefb 	bl	8009b20 <USB_EnableGlobalInt>

  return ret;
 800ad2a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3720      	adds	r7, #32
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ad34:	b590      	push	{r4, r7, lr}
 800ad36:	b089      	sub	sp, #36	; 0x24
 800ad38:	af04      	add	r7, sp, #16
 800ad3a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	2202      	movs	r2, #2
 800ad40:	2102      	movs	r1, #2
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fc85 	bl	800b652 <USBH_FindInterface>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
 800ad4e:	2bff      	cmp	r3, #255	; 0xff
 800ad50:	d002      	beq.n	800ad58 <USBH_CDC_InterfaceInit+0x24>
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d901      	bls.n	800ad5c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ad58:	2302      	movs	r3, #2
 800ad5a:	e13d      	b.n	800afd8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fc5a 	bl	800b61a <USBH_SelectInterface>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ad70:	2302      	movs	r3, #2
 800ad72:	e131      	b.n	800afd8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ad7a:	2050      	movs	r0, #80	; 0x50
 800ad7c:	f002 fb74 	bl	800d468 <malloc>
 800ad80:	4603      	mov	r3, r0
 800ad82:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ad94:	2302      	movs	r3, #2
 800ad96:	e11f      	b.n	800afd8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ad98:	2250      	movs	r2, #80	; 0x50
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	68b8      	ldr	r0, [r7, #8]
 800ad9e:	f003 fbe8 	bl	800e572 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	211a      	movs	r1, #26
 800ada8:	fb01 f303 	mul.w	r3, r1, r3
 800adac:	4413      	add	r3, r2
 800adae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	b25b      	sxtb	r3, r3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	da15      	bge.n	800ade6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800adba:	7bfb      	ldrb	r3, [r7, #15]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	211a      	movs	r1, #26
 800adc0:	fb01 f303 	mul.w	r3, r1, r3
 800adc4:	4413      	add	r3, r2
 800adc6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800adca:	781a      	ldrb	r2, [r3, #0]
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800add0:	7bfb      	ldrb	r3, [r7, #15]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	211a      	movs	r1, #26
 800add6:	fb01 f303 	mul.w	r3, r1, r3
 800adda:	4413      	add	r3, r2
 800addc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ade0:	881a      	ldrh	r2, [r3, #0]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	785b      	ldrb	r3, [r3, #1]
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f001 ffce 	bl	800cd8e <USBH_AllocPipe>
 800adf2:	4603      	mov	r3, r0
 800adf4:	461a      	mov	r2, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	7819      	ldrb	r1, [r3, #0]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	7858      	ldrb	r0, [r3, #1]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae0e:	68ba      	ldr	r2, [r7, #8]
 800ae10:	8952      	ldrh	r2, [r2, #10]
 800ae12:	9202      	str	r2, [sp, #8]
 800ae14:	2203      	movs	r2, #3
 800ae16:	9201      	str	r2, [sp, #4]
 800ae18:	9300      	str	r3, [sp, #0]
 800ae1a:	4623      	mov	r3, r4
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f001 ff86 	bl	800cd30 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f002 fa95 	bl	800d35c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ae32:	2300      	movs	r3, #0
 800ae34:	2200      	movs	r2, #0
 800ae36:	210a      	movs	r1, #10
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fc0a 	bl	800b652 <USBH_FindInterface>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
 800ae44:	2bff      	cmp	r3, #255	; 0xff
 800ae46:	d002      	beq.n	800ae4e <USBH_CDC_InterfaceInit+0x11a>
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d901      	bls.n	800ae52 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ae4e:	2302      	movs	r3, #2
 800ae50:	e0c2      	b.n	800afd8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	211a      	movs	r1, #26
 800ae58:	fb01 f303 	mul.w	r3, r1, r3
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	b25b      	sxtb	r3, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	da16      	bge.n	800ae98 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	211a      	movs	r1, #26
 800ae70:	fb01 f303 	mul.w	r3, r1, r3
 800ae74:	4413      	add	r3, r2
 800ae76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ae7a:	781a      	ldrb	r2, [r3, #0]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	211a      	movs	r1, #26
 800ae86:	fb01 f303 	mul.w	r3, r1, r3
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ae90:	881a      	ldrh	r2, [r3, #0]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	835a      	strh	r2, [r3, #26]
 800ae96:	e015      	b.n	800aec4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	211a      	movs	r1, #26
 800ae9e:	fb01 f303 	mul.w	r3, r1, r3
 800aea2:	4413      	add	r3, r2
 800aea4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aea8:	781a      	ldrb	r2, [r3, #0]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	211a      	movs	r1, #26
 800aeb4:	fb01 f303 	mul.w	r3, r1, r3
 800aeb8:	4413      	add	r3, r2
 800aeba:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aebe:	881a      	ldrh	r2, [r3, #0]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	211a      	movs	r1, #26
 800aeca:	fb01 f303 	mul.w	r3, r1, r3
 800aece:	4413      	add	r3, r2
 800aed0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	b25b      	sxtb	r3, r3
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	da16      	bge.n	800af0a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	211a      	movs	r1, #26
 800aee2:	fb01 f303 	mul.w	r3, r1, r3
 800aee6:	4413      	add	r3, r2
 800aee8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aeec:	781a      	ldrb	r2, [r3, #0]
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	211a      	movs	r1, #26
 800aef8:	fb01 f303 	mul.w	r3, r1, r3
 800aefc:	4413      	add	r3, r2
 800aefe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800af02:	881a      	ldrh	r2, [r3, #0]
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	835a      	strh	r2, [r3, #26]
 800af08:	e015      	b.n	800af36 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	211a      	movs	r1, #26
 800af10:	fb01 f303 	mul.w	r3, r1, r3
 800af14:	4413      	add	r3, r2
 800af16:	f203 3356 	addw	r3, r3, #854	; 0x356
 800af1a:	781a      	ldrb	r2, [r3, #0]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	211a      	movs	r1, #26
 800af26:	fb01 f303 	mul.w	r3, r1, r3
 800af2a:	4413      	add	r3, r2
 800af2c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800af30:	881a      	ldrh	r2, [r3, #0]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	7b9b      	ldrb	r3, [r3, #14]
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f001 ff26 	bl	800cd8e <USBH_AllocPipe>
 800af42:	4603      	mov	r3, r0
 800af44:	461a      	mov	r2, r3
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	7bdb      	ldrb	r3, [r3, #15]
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f001 ff1c 	bl	800cd8e <USBH_AllocPipe>
 800af56:	4603      	mov	r3, r0
 800af58:	461a      	mov	r2, r3
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	7b59      	ldrb	r1, [r3, #13]
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	7b98      	ldrb	r0, [r3, #14]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	8b12      	ldrh	r2, [r2, #24]
 800af76:	9202      	str	r2, [sp, #8]
 800af78:	2202      	movs	r2, #2
 800af7a:	9201      	str	r2, [sp, #4]
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	4623      	mov	r3, r4
 800af80:	4602      	mov	r2, r0
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f001 fed4 	bl	800cd30 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	7b19      	ldrb	r1, [r3, #12]
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	7bd8      	ldrb	r0, [r3, #15]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	8b52      	ldrh	r2, [r2, #26]
 800afa0:	9202      	str	r2, [sp, #8]
 800afa2:	2202      	movs	r2, #2
 800afa4:	9201      	str	r2, [sp, #4]
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	4623      	mov	r3, r4
 800afaa:	4602      	mov	r2, r0
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 febf 	bl	800cd30 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	7b5b      	ldrb	r3, [r3, #13]
 800afbe:	2200      	movs	r2, #0
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f002 f9ca 	bl	800d35c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	7b1b      	ldrb	r3, [r3, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f002 f9c3 	bl	800d35c <USBH_LL_SetToggle>

  return USBH_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd90      	pop	{r4, r7, pc}

0800afe0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00e      	beq.n	800b018 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	4619      	mov	r1, r3
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f001 feb4 	bl	800cd6e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f001 fedf 	bl	800cdd0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	7b1b      	ldrb	r3, [r3, #12]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00e      	beq.n	800b03e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	7b1b      	ldrb	r3, [r3, #12]
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f001 fea1 	bl	800cd6e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	7b1b      	ldrb	r3, [r3, #12]
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f001 fecc 	bl	800cdd0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	7b5b      	ldrb	r3, [r3, #13]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00e      	beq.n	800b064 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	7b5b      	ldrb	r3, [r3, #13]
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 fe8e 	bl	800cd6e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	7b5b      	ldrb	r3, [r3, #13]
 800b056:	4619      	mov	r1, r3
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f001 feb9 	bl	800cdd0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00b      	beq.n	800b088 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b076:	69db      	ldr	r3, [r3, #28]
 800b078:	4618      	mov	r0, r3
 800b07a:	f002 f9fd 	bl	800d478 <free>
    phost->pActiveClass->pData = 0U;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b084:	2200      	movs	r2, #0
 800b086:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0a0:	69db      	ldr	r3, [r3, #28]
 800b0a2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	3340      	adds	r3, #64	; 0x40
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f8b1 	bl	800b212 <GetLineCoding>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b0b4:	7afb      	ldrb	r3, [r7, #11]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d105      	bne.n	800b0c6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0c0:	2102      	movs	r1, #2
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b0c6:	7afb      	ldrb	r3, [r7, #11]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0e6:	69db      	ldr	r3, [r3, #28]
 800b0e8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b0f0:	2b04      	cmp	r3, #4
 800b0f2:	d877      	bhi.n	800b1e4 <USBH_CDC_Process+0x114>
 800b0f4:	a201      	add	r2, pc, #4	; (adr r2, 800b0fc <USBH_CDC_Process+0x2c>)
 800b0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fa:	bf00      	nop
 800b0fc:	0800b111 	.word	0x0800b111
 800b100:	0800b117 	.word	0x0800b117
 800b104:	0800b147 	.word	0x0800b147
 800b108:	0800b1bb 	.word	0x0800b1bb
 800b10c:	0800b1c9 	.word	0x0800b1c9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	73fb      	strb	r3, [r7, #15]
      break;
 800b114:	e06d      	b.n	800b1f2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b11a:	4619      	mov	r1, r3
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f897 	bl	800b250 <SetLineCoding>
 800b122:	4603      	mov	r3, r0
 800b124:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d104      	bne.n	800b136 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2202      	movs	r2, #2
 800b130:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b134:	e058      	b.n	800b1e8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d055      	beq.n	800b1e8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	2204      	movs	r2, #4
 800b140:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b144:	e050      	b.n	800b1e8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	3340      	adds	r3, #64	; 0x40
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 f860 	bl	800b212 <GetLineCoding>
 800b152:	4603      	mov	r3, r0
 800b154:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b156:	7bbb      	ldrb	r3, [r7, #14]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d126      	bne.n	800b1aa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b16e:	791b      	ldrb	r3, [r3, #4]
 800b170:	429a      	cmp	r2, r3
 800b172:	d13b      	bne.n	800b1ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b17e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b180:	429a      	cmp	r2, r3
 800b182:	d133      	bne.n	800b1ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b18e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b190:	429a      	cmp	r2, r3
 800b192:	d12b      	bne.n	800b1ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b19c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d124      	bne.n	800b1ec <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f958 	bl	800b458 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b1a8:	e020      	b.n	800b1ec <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b1aa:	7bbb      	ldrb	r3, [r7, #14]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d01d      	beq.n	800b1ec <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2204      	movs	r2, #4
 800b1b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b1b8:	e018      	b.n	800b1ec <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f867 	bl	800b28e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f8da 	bl	800b37a <CDC_ProcessReception>
      break;
 800b1c6:	e014      	b.n	800b1f2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f001 f822 	bl	800c214 <USBH_ClrFeature>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b1d4:	7bbb      	ldrb	r3, [r7, #14]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10a      	bne.n	800b1f0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b1e2:	e005      	b.n	800b1f0 <USBH_CDC_Process+0x120>

    default:
      break;
 800b1e4:	bf00      	nop
 800b1e6:	e004      	b.n	800b1f2 <USBH_CDC_Process+0x122>
      break;
 800b1e8:	bf00      	nop
 800b1ea:	e002      	b.n	800b1f2 <USBH_CDC_Process+0x122>
      break;
 800b1ec:	bf00      	nop
 800b1ee:	e000      	b.n	800b1f2 <USBH_CDC_Process+0x122>
      break;
 800b1f0:	bf00      	nop

  }

  return status;
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b082      	sub	sp, #8
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	22a1      	movs	r2, #161	; 0xa1
 800b220:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2221      	movs	r2, #33	; 0x21
 800b226:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2207      	movs	r2, #7
 800b238:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	2207      	movs	r2, #7
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 fb23 	bl	800c88c <USBH_CtlReq>
 800b246:	4603      	mov	r3, r0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2221      	movs	r2, #33	; 0x21
 800b25e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2220      	movs	r2, #32
 800b264:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2207      	movs	r2, #7
 800b276:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	2207      	movs	r2, #7
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f001 fb04 	bl	800c88c <USBH_CtlReq>
 800b284:	4603      	mov	r3, r0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b086      	sub	sp, #24
 800b292:	af02      	add	r7, sp, #8
 800b294:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b29c:	69db      	ldr	r3, [r3, #28]
 800b29e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d002      	beq.n	800b2b4 <CDC_ProcessTransmission+0x26>
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d023      	beq.n	800b2fa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b2b2:	e05e      	b.n	800b372 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	8b12      	ldrh	r2, [r2, #24]
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d90b      	bls.n	800b2d8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	69d9      	ldr	r1, [r3, #28]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	8b1a      	ldrh	r2, [r3, #24]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	7b5b      	ldrb	r3, [r3, #13]
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	9000      	str	r0, [sp, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f001 fcea 	bl	800ccaa <USBH_BulkSendData>
 800b2d6:	e00b      	b.n	800b2f0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	7b5b      	ldrb	r3, [r3, #13]
 800b2e6:	2001      	movs	r0, #1
 800b2e8:	9000      	str	r0, [sp, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f001 fcdd 	bl	800ccaa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b2f8:	e03b      	b.n	800b372 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	7b5b      	ldrb	r3, [r3, #13]
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f002 f801 	bl	800d308 <USBH_LL_GetURBState>
 800b306:	4603      	mov	r3, r0
 800b308:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b30a:	7afb      	ldrb	r3, [r7, #11]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d128      	bne.n	800b362 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	8b12      	ldrh	r2, [r2, #24]
 800b318:	4293      	cmp	r3, r2
 800b31a:	d90e      	bls.n	800b33a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	8b12      	ldrh	r2, [r2, #24]
 800b324:	1a9a      	subs	r2, r3, r2
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	8b12      	ldrh	r2, [r2, #24]
 800b332:	441a      	add	r2, r3
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	61da      	str	r2, [r3, #28]
 800b338:	e002      	b.n	800b340 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b344:	2b00      	cmp	r3, #0
 800b346:	d004      	beq.n	800b352 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b350:	e00e      	b.n	800b370 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f868 	bl	800b430 <USBH_CDC_TransmitCallback>
      break;
 800b360:	e006      	b.n	800b370 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800b362:	7afb      	ldrb	r3, [r7, #11]
 800b364:	2b02      	cmp	r3, #2
 800b366:	d103      	bne.n	800b370 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b370:	bf00      	nop
  }
}
 800b372:	bf00      	nop
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b086      	sub	sp, #24
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b388:	69db      	ldr	r3, [r3, #28]
 800b38a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b38c:	2300      	movs	r3, #0
 800b38e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b396:	2b03      	cmp	r3, #3
 800b398:	d002      	beq.n	800b3a0 <CDC_ProcessReception+0x26>
 800b39a:	2b04      	cmp	r3, #4
 800b39c:	d00e      	beq.n	800b3bc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b39e:	e043      	b.n	800b428 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	6a19      	ldr	r1, [r3, #32]
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	8b5a      	ldrh	r2, [r3, #26]
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	7b1b      	ldrb	r3, [r3, #12]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f001 fca1 	bl	800ccf4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2204      	movs	r2, #4
 800b3b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b3ba:	e035      	b.n	800b428 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	7b1b      	ldrb	r3, [r3, #12]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f001 ffa0 	bl	800d308 <USBH_LL_GetURBState>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b3cc:	7cfb      	ldrb	r3, [r7, #19]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d129      	bne.n	800b426 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	7b1b      	ldrb	r3, [r3, #12]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f001 ff03 	bl	800d1e4 <USBH_LL_GetLastXferSize>
 800b3de:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d016      	beq.n	800b418 <CDC_ProcessReception+0x9e>
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	8b5b      	ldrh	r3, [r3, #26]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d910      	bls.n	800b418 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	1ad2      	subs	r2, r2, r3
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	6a1a      	ldr	r2, [r3, #32]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	441a      	add	r2, r3
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2203      	movs	r2, #3
 800b412:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b416:	e006      	b.n	800b426 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f80f 	bl	800b444 <USBH_CDC_ReceiveCallback>
      break;
 800b426:	bf00      	nop
  }
}
 800b428:	bf00      	nop
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	4613      	mov	r3, r2
 800b478:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d101      	bne.n	800b484 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b480:	2302      	movs	r3, #2
 800b482:	e029      	b.n	800b4d8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	79fa      	ldrb	r2, [r7, #7]
 800b488:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 f81f 	bl	800b4e0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d003      	beq.n	800b4d0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f001 fdd3 	bl	800d07c <USBH_LL_Init>

  return USBH_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	60fb      	str	r3, [r7, #12]
 800b4f0:	e009      	b.n	800b506 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	33e0      	adds	r3, #224	; 0xe0
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	3301      	adds	r3, #1
 800b504:	60fb      	str	r3, [r7, #12]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b0f      	cmp	r3, #15
 800b50a:	d9f2      	bls.n	800b4f2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b50c:	2300      	movs	r3, #0
 800b50e:	60fb      	str	r3, [r7, #12]
 800b510:	e009      	b.n	800b526 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4413      	add	r3, r2
 800b518:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b51c:	2200      	movs	r2, #0
 800b51e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	3301      	adds	r3, #1
 800b524:	60fb      	str	r3, [r7, #12]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b52c:	d3f1      	bcc.n	800b512 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2201      	movs	r2, #1
 800b53e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2240      	movs	r2, #64	; 0x40
 800b552:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2201      	movs	r2, #1
 800b566:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	331c      	adds	r3, #28
 800b57e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b582:	2100      	movs	r1, #0
 800b584:	4618      	mov	r0, r3
 800b586:	f002 fff4 	bl	800e572 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b590:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b594:	2100      	movs	r1, #0
 800b596:	4618      	mov	r0, r3
 800b598:	f002 ffeb 	bl	800e572 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b5a2:	2212      	movs	r2, #18
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f002 ffe3 	bl	800e572 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b5b2:	223e      	movs	r2, #62	; 0x3e
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f002 ffdb 	bl	800e572 <memset>

  return USBH_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b085      	sub	sp, #20
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d016      	beq.n	800b608 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d10e      	bne.n	800b602 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b5ea:	1c59      	adds	r1, r3, #1
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	33de      	adds	r3, #222	; 0xde
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	73fb      	strb	r3, [r7, #15]
 800b600:	e004      	b.n	800b60c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b602:	2302      	movs	r3, #2
 800b604:	73fb      	strb	r3, [r7, #15]
 800b606:	e001      	b.n	800b60c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b608:	2302      	movs	r3, #2
 800b60a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b085      	sub	sp, #20
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	460b      	mov	r3, r1
 800b624:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b630:	78fa      	ldrb	r2, [r7, #3]
 800b632:	429a      	cmp	r2, r3
 800b634:	d204      	bcs.n	800b640 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	78fa      	ldrb	r2, [r7, #3]
 800b63a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b63e:	e001      	b.n	800b644 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b640:	2302      	movs	r3, #2
 800b642:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b644:	7bfb      	ldrb	r3, [r7, #15]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b652:	b480      	push	{r7}
 800b654:	b087      	sub	sp, #28
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	4608      	mov	r0, r1
 800b65c:	4611      	mov	r1, r2
 800b65e:	461a      	mov	r2, r3
 800b660:	4603      	mov	r3, r0
 800b662:	70fb      	strb	r3, [r7, #3]
 800b664:	460b      	mov	r3, r1
 800b666:	70bb      	strb	r3, [r7, #2]
 800b668:	4613      	mov	r3, r2
 800b66a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b66c:	2300      	movs	r3, #0
 800b66e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b670:	2300      	movs	r3, #0
 800b672:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b67a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b67c:	e025      	b.n	800b6ca <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	221a      	movs	r2, #26
 800b682:	fb02 f303 	mul.w	r3, r2, r3
 800b686:	3308      	adds	r3, #8
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	4413      	add	r3, r2
 800b68c:	3302      	adds	r3, #2
 800b68e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	795b      	ldrb	r3, [r3, #5]
 800b694:	78fa      	ldrb	r2, [r7, #3]
 800b696:	429a      	cmp	r2, r3
 800b698:	d002      	beq.n	800b6a0 <USBH_FindInterface+0x4e>
 800b69a:	78fb      	ldrb	r3, [r7, #3]
 800b69c:	2bff      	cmp	r3, #255	; 0xff
 800b69e:	d111      	bne.n	800b6c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b6a4:	78ba      	ldrb	r2, [r7, #2]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d002      	beq.n	800b6b0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b6aa:	78bb      	ldrb	r3, [r7, #2]
 800b6ac:	2bff      	cmp	r3, #255	; 0xff
 800b6ae:	d109      	bne.n	800b6c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b6b4:	787a      	ldrb	r2, [r7, #1]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d002      	beq.n	800b6c0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b6ba:	787b      	ldrb	r3, [r7, #1]
 800b6bc:	2bff      	cmp	r3, #255	; 0xff
 800b6be:	d101      	bne.n	800b6c4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b6c0:	7dfb      	ldrb	r3, [r7, #23]
 800b6c2:	e006      	b.n	800b6d2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d9d6      	bls.n	800b67e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b6d0:	23ff      	movs	r3, #255	; 0xff
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	371c      	adds	r7, #28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b082      	sub	sp, #8
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f001 fd04 	bl	800d0f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f001 fe1d 	bl	800d32e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b088      	sub	sp, #32
 800b704:	af04      	add	r7, sp, #16
 800b706:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b708:	2302      	movs	r3, #2
 800b70a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d102      	bne.n	800b722 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2203      	movs	r2, #3
 800b720:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	b2db      	uxtb	r3, r3
 800b728:	2b0b      	cmp	r3, #11
 800b72a:	f200 81be 	bhi.w	800baaa <USBH_Process+0x3aa>
 800b72e:	a201      	add	r2, pc, #4	; (adr r2, 800b734 <USBH_Process+0x34>)
 800b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b734:	0800b765 	.word	0x0800b765
 800b738:	0800b797 	.word	0x0800b797
 800b73c:	0800b7ff 	.word	0x0800b7ff
 800b740:	0800ba45 	.word	0x0800ba45
 800b744:	0800baab 	.word	0x0800baab
 800b748:	0800b8a3 	.word	0x0800b8a3
 800b74c:	0800b9eb 	.word	0x0800b9eb
 800b750:	0800b8d9 	.word	0x0800b8d9
 800b754:	0800b8f9 	.word	0x0800b8f9
 800b758:	0800b919 	.word	0x0800b919
 800b75c:	0800b95d 	.word	0x0800b95d
 800b760:	0800ba2d 	.word	0x0800ba2d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 819e 	beq.w	800baae <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b778:	20c8      	movs	r0, #200	; 0xc8
 800b77a:	f001 fe22 	bl	800d3c2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f001 fd15 	bl	800d1ae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b794:	e18b      	b.n	800baae <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d107      	bne.n	800b7b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b7ae:	e18d      	b.n	800bacc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b7b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7ba:	d914      	bls.n	800b7e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b7d2:	2b03      	cmp	r3, #3
 800b7d4:	d903      	bls.n	800b7de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	220d      	movs	r2, #13
 800b7da:	701a      	strb	r2, [r3, #0]
      break;
 800b7dc:	e176      	b.n	800bacc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	701a      	strb	r2, [r3, #0]
      break;
 800b7e4:	e172      	b.n	800bacc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b7ec:	f103 020a 	add.w	r2, r3, #10
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b7f6:	200a      	movs	r0, #10
 800b7f8:	f001 fde3 	bl	800d3c2 <USBH_Delay>
      break;
 800b7fc:	e166      	b.n	800bacc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b804:	2b00      	cmp	r3, #0
 800b806:	d005      	beq.n	800b814 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b80e:	2104      	movs	r1, #4
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b814:	2064      	movs	r0, #100	; 0x64
 800b816:	f001 fdd4 	bl	800d3c2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f001 fca0 	bl	800d160 <USBH_LL_GetSpeed>
 800b820:	4603      	mov	r3, r0
 800b822:	461a      	mov	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2205      	movs	r2, #5
 800b82e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b830:	2100      	movs	r1, #0
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f001 faab 	bl	800cd8e <USBH_AllocPipe>
 800b838:	4603      	mov	r3, r0
 800b83a:	461a      	mov	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b840:	2180      	movs	r1, #128	; 0x80
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 faa3 	bl	800cd8e <USBH_AllocPipe>
 800b848:	4603      	mov	r3, r0
 800b84a:	461a      	mov	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	7919      	ldrb	r1, [r3, #4]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b864:	b292      	uxth	r2, r2
 800b866:	9202      	str	r2, [sp, #8]
 800b868:	2200      	movs	r2, #0
 800b86a:	9201      	str	r2, [sp, #4]
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	4603      	mov	r3, r0
 800b870:	2280      	movs	r2, #128	; 0x80
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f001 fa5c 	bl	800cd30 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	7959      	ldrb	r1, [r3, #5]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b88c:	b292      	uxth	r2, r2
 800b88e:	9202      	str	r2, [sp, #8]
 800b890:	2200      	movs	r2, #0
 800b892:	9201      	str	r2, [sp, #4]
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	4603      	mov	r3, r0
 800b898:	2200      	movs	r2, #0
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f001 fa48 	bl	800cd30 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8a0:	e114      	b.n	800bacc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f918 	bl	800bad8 <USBH_HandleEnum>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b8ac:	7bbb      	ldrb	r3, [r7, #14]
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f040 80fe 	bne.w	800bab2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d103      	bne.n	800b8d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2208      	movs	r2, #8
 800b8cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b8ce:	e0f0      	b.n	800bab2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2207      	movs	r2, #7
 800b8d4:	701a      	strb	r2, [r3, #0]
      break;
 800b8d6:	e0ec      	b.n	800bab2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	f000 80e9 	beq.w	800bab6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8ea:	2101      	movs	r1, #1
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2208      	movs	r2, #8
 800b8f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b8f6:	e0de      	b.n	800bab6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	4619      	mov	r1, r3
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fc3f 	bl	800c186 <USBH_SetCfg>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f040 80d5 	bne.w	800baba <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2209      	movs	r2, #9
 800b914:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b916:	e0d0      	b.n	800baba <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b91e:	f003 0320 	and.w	r3, r3, #32
 800b922:	2b00      	cmp	r3, #0
 800b924:	d016      	beq.n	800b954 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b926:	2101      	movs	r1, #1
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fc4f 	bl	800c1cc <USBH_SetFeature>
 800b92e:	4603      	mov	r3, r0
 800b930:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b00      	cmp	r3, #0
 800b938:	d103      	bne.n	800b942 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	220a      	movs	r2, #10
 800b93e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b940:	e0bd      	b.n	800babe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b942:	7bbb      	ldrb	r3, [r7, #14]
 800b944:	b2db      	uxtb	r3, r3
 800b946:	2b03      	cmp	r3, #3
 800b948:	f040 80b9 	bne.w	800babe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	220a      	movs	r2, #10
 800b950:	701a      	strb	r2, [r3, #0]
      break;
 800b952:	e0b4      	b.n	800babe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	220a      	movs	r2, #10
 800b958:	701a      	strb	r2, [r3, #0]
      break;
 800b95a:	e0b0      	b.n	800babe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 80ad 	beq.w	800bac2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b970:	2300      	movs	r3, #0
 800b972:	73fb      	strb	r3, [r7, #15]
 800b974:	e016      	b.n	800b9a4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b976:	7bfa      	ldrb	r2, [r7, #15]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	32de      	adds	r2, #222	; 0xde
 800b97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b980:	791a      	ldrb	r2, [r3, #4]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b988:	429a      	cmp	r2, r3
 800b98a:	d108      	bne.n	800b99e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b98c:	7bfa      	ldrb	r2, [r7, #15]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	32de      	adds	r2, #222	; 0xde
 800b992:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b99c:	e005      	b.n	800b9aa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	73fb      	strb	r3, [r7, #15]
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0e5      	beq.n	800b976 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d016      	beq.n	800b9e2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	4798      	blx	r3
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d109      	bne.n	800b9da <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2206      	movs	r2, #6
 800b9ca:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9d2:	2103      	movs	r1, #3
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b9d8:	e073      	b.n	800bac2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	220d      	movs	r2, #13
 800b9de:	701a      	strb	r2, [r3, #0]
      break;
 800b9e0:	e06f      	b.n	800bac2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	220d      	movs	r2, #13
 800b9e6:	701a      	strb	r2, [r3, #0]
      break;
 800b9e8:	e06b      	b.n	800bac2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d017      	beq.n	800ba24 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	4798      	blx	r3
 800ba00:	4603      	mov	r3, r0
 800ba02:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d103      	bne.n	800ba14 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	220b      	movs	r2, #11
 800ba10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba12:	e058      	b.n	800bac6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ba14:	7bbb      	ldrb	r3, [r7, #14]
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d154      	bne.n	800bac6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	220d      	movs	r2, #13
 800ba20:	701a      	strb	r2, [r3, #0]
      break;
 800ba22:	e050      	b.n	800bac6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	220d      	movs	r2, #13
 800ba28:	701a      	strb	r2, [r3, #0]
      break;
 800ba2a:	e04c      	b.n	800bac6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d049      	beq.n	800baca <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba3c:	695b      	ldr	r3, [r3, #20]
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	4798      	blx	r3
      }
      break;
 800ba42:	e042      	b.n	800baca <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f7ff fd47 	bl	800b4e0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d009      	beq.n	800ba70 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d005      	beq.n	800ba86 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba80:	2105      	movs	r1, #5
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d107      	bne.n	800baa2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f7ff fe1f 	bl	800b6de <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800baa0:	e014      	b.n	800bacc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f001 fb26 	bl	800d0f4 <USBH_LL_Start>
      break;
 800baa8:	e010      	b.n	800bacc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800baaa:	bf00      	nop
 800baac:	e00e      	b.n	800bacc <USBH_Process+0x3cc>
      break;
 800baae:	bf00      	nop
 800bab0:	e00c      	b.n	800bacc <USBH_Process+0x3cc>
      break;
 800bab2:	bf00      	nop
 800bab4:	e00a      	b.n	800bacc <USBH_Process+0x3cc>
    break;
 800bab6:	bf00      	nop
 800bab8:	e008      	b.n	800bacc <USBH_Process+0x3cc>
      break;
 800baba:	bf00      	nop
 800babc:	e006      	b.n	800bacc <USBH_Process+0x3cc>
      break;
 800babe:	bf00      	nop
 800bac0:	e004      	b.n	800bacc <USBH_Process+0x3cc>
      break;
 800bac2:	bf00      	nop
 800bac4:	e002      	b.n	800bacc <USBH_Process+0x3cc>
      break;
 800bac6:	bf00      	nop
 800bac8:	e000      	b.n	800bacc <USBH_Process+0x3cc>
      break;
 800baca:	bf00      	nop
  }
  return USBH_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop

0800bad8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af04      	add	r7, sp, #16
 800bade:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bae0:	2301      	movs	r3, #1
 800bae2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bae4:	2301      	movs	r3, #1
 800bae6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	785b      	ldrb	r3, [r3, #1]
 800baec:	2b07      	cmp	r3, #7
 800baee:	f200 81c1 	bhi.w	800be74 <USBH_HandleEnum+0x39c>
 800baf2:	a201      	add	r2, pc, #4	; (adr r2, 800baf8 <USBH_HandleEnum+0x20>)
 800baf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf8:	0800bb19 	.word	0x0800bb19
 800bafc:	0800bbd7 	.word	0x0800bbd7
 800bb00:	0800bc41 	.word	0x0800bc41
 800bb04:	0800bccf 	.word	0x0800bccf
 800bb08:	0800bd39 	.word	0x0800bd39
 800bb0c:	0800bda9 	.word	0x0800bda9
 800bb10:	0800bdef 	.word	0x0800bdef
 800bb14:	0800be35 	.word	0x0800be35
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bb18:	2108      	movs	r1, #8
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 fa50 	bl	800bfc0 <USBH_Get_DevDesc>
 800bb20:	4603      	mov	r3, r0
 800bb22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d130      	bne.n	800bb8c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	7919      	ldrb	r1, [r3, #4]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bb4e:	b292      	uxth	r2, r2
 800bb50:	9202      	str	r2, [sp, #8]
 800bb52:	2200      	movs	r2, #0
 800bb54:	9201      	str	r2, [sp, #4]
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2280      	movs	r2, #128	; 0x80
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f001 f8e7 	bl	800cd30 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	7959      	ldrb	r1, [r3, #5]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb76:	b292      	uxth	r2, r2
 800bb78:	9202      	str	r2, [sp, #8]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	9201      	str	r2, [sp, #4]
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	4603      	mov	r3, r0
 800bb82:	2200      	movs	r2, #0
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f001 f8d3 	bl	800cd30 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bb8a:	e175      	b.n	800be78 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb8c:	7bbb      	ldrb	r3, [r7, #14]
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	f040 8172 	bne.w	800be78 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	b2da      	uxtb	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d903      	bls.n	800bbb6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	220d      	movs	r2, #13
 800bbb2:	701a      	strb	r2, [r3, #0]
      break;
 800bbb4:	e160      	b.n	800be78 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	795b      	ldrb	r3, [r3, #5]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f001 f907 	bl	800cdd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	791b      	ldrb	r3, [r3, #4]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f001 f901 	bl	800cdd0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	701a      	strb	r2, [r3, #0]
      break;
 800bbd4:	e150      	b.n	800be78 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bbd6:	2112      	movs	r1, #18
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 f9f1 	bl	800bfc0 <USBH_Get_DevDesc>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bbe2:	7bbb      	ldrb	r3, [r7, #14]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d103      	bne.n	800bbf0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2202      	movs	r2, #2
 800bbec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bbee:	e145      	b.n	800be7c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbf0:	7bbb      	ldrb	r3, [r7, #14]
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	f040 8142 	bne.w	800be7c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbfe:	3301      	adds	r3, #1
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc0e:	2b03      	cmp	r3, #3
 800bc10:	d903      	bls.n	800bc1a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	220d      	movs	r2, #13
 800bc16:	701a      	strb	r2, [r3, #0]
      break;
 800bc18:	e130      	b.n	800be7c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	795b      	ldrb	r3, [r3, #5]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f001 f8d5 	bl	800cdd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	791b      	ldrb	r3, [r3, #4]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f001 f8cf 	bl	800cdd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	701a      	strb	r2, [r3, #0]
      break;
 800bc3e:	e11d      	b.n	800be7c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bc40:	2101      	movs	r1, #1
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fa7b 	bl	800c13e <USBH_SetAddress>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc4c:	7bbb      	ldrb	r3, [r7, #14]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d132      	bne.n	800bcb8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bc52:	2002      	movs	r0, #2
 800bc54:	f001 fbb5 	bl	800d3c2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2203      	movs	r2, #3
 800bc64:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	7919      	ldrb	r1, [r3, #4]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bc7a:	b292      	uxth	r2, r2
 800bc7c:	9202      	str	r2, [sp, #8]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	9201      	str	r2, [sp, #4]
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	4603      	mov	r3, r0
 800bc86:	2280      	movs	r2, #128	; 0x80
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f001 f851 	bl	800cd30 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	7959      	ldrb	r1, [r3, #5]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bca2:	b292      	uxth	r2, r2
 800bca4:	9202      	str	r2, [sp, #8]
 800bca6:	2200      	movs	r2, #0
 800bca8:	9201      	str	r2, [sp, #4]
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	4603      	mov	r3, r0
 800bcae:	2200      	movs	r2, #0
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f001 f83d 	bl	800cd30 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bcb6:	e0e3      	b.n	800be80 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bcb8:	7bbb      	ldrb	r3, [r7, #14]
 800bcba:	2b03      	cmp	r3, #3
 800bcbc:	f040 80e0 	bne.w	800be80 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	220d      	movs	r2, #13
 800bcc4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	705a      	strb	r2, [r3, #1]
      break;
 800bccc:	e0d8      	b.n	800be80 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bcce:	2109      	movs	r1, #9
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 f9a1 	bl	800c018 <USBH_Get_CfgDesc>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bcda:	7bbb      	ldrb	r3, [r7, #14]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d103      	bne.n	800bce8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2204      	movs	r2, #4
 800bce4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bce6:	e0cd      	b.n	800be84 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	f040 80ca 	bne.w	800be84 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd06:	2b03      	cmp	r3, #3
 800bd08:	d903      	bls.n	800bd12 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	220d      	movs	r2, #13
 800bd0e:	701a      	strb	r2, [r3, #0]
      break;
 800bd10:	e0b8      	b.n	800be84 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	795b      	ldrb	r3, [r3, #5]
 800bd16:	4619      	mov	r1, r3
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f001 f859 	bl	800cdd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	791b      	ldrb	r3, [r3, #4]
 800bd22:	4619      	mov	r1, r3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f001 f853 	bl	800cdd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	701a      	strb	r2, [r3, #0]
      break;
 800bd36:	e0a5      	b.n	800be84 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bd3e:	4619      	mov	r1, r3
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f969 	bl	800c018 <USBH_Get_CfgDesc>
 800bd46:	4603      	mov	r3, r0
 800bd48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd4a:	7bbb      	ldrb	r3, [r7, #14]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d103      	bne.n	800bd58 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2205      	movs	r2, #5
 800bd54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd56:	e097      	b.n	800be88 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd58:	7bbb      	ldrb	r3, [r7, #14]
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	f040 8094 	bne.w	800be88 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd66:	3301      	adds	r3, #1
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd76:	2b03      	cmp	r3, #3
 800bd78:	d903      	bls.n	800bd82 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	220d      	movs	r2, #13
 800bd7e:	701a      	strb	r2, [r3, #0]
      break;
 800bd80:	e082      	b.n	800be88 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	795b      	ldrb	r3, [r3, #5]
 800bd86:	4619      	mov	r1, r3
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f001 f821 	bl	800cdd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	791b      	ldrb	r3, [r3, #4]
 800bd92:	4619      	mov	r1, r3
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f001 f81b 	bl	800cdd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	701a      	strb	r2, [r3, #0]
      break;
 800bda6:	e06f      	b.n	800be88 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d019      	beq.n	800bde6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bdbe:	23ff      	movs	r3, #255	; 0xff
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f953 	bl	800c06c <USBH_Get_StringDesc>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bdca:	7bbb      	ldrb	r3, [r7, #14]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d103      	bne.n	800bdd8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2206      	movs	r2, #6
 800bdd4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bdd6:	e059      	b.n	800be8c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bdd8:	7bbb      	ldrb	r3, [r7, #14]
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d156      	bne.n	800be8c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2206      	movs	r2, #6
 800bde2:	705a      	strb	r2, [r3, #1]
      break;
 800bde4:	e052      	b.n	800be8c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2206      	movs	r2, #6
 800bdea:	705a      	strb	r2, [r3, #1]
      break;
 800bdec:	e04e      	b.n	800be8c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d019      	beq.n	800be2c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be04:	23ff      	movs	r3, #255	; 0xff
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f930 	bl	800c06c <USBH_Get_StringDesc>
 800be0c:	4603      	mov	r3, r0
 800be0e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be10:	7bbb      	ldrb	r3, [r7, #14]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d103      	bne.n	800be1e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2207      	movs	r2, #7
 800be1a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be1c:	e038      	b.n	800be90 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be1e:	7bbb      	ldrb	r3, [r7, #14]
 800be20:	2b03      	cmp	r3, #3
 800be22:	d135      	bne.n	800be90 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2207      	movs	r2, #7
 800be28:	705a      	strb	r2, [r3, #1]
      break;
 800be2a:	e031      	b.n	800be90 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2207      	movs	r2, #7
 800be30:	705a      	strb	r2, [r3, #1]
      break;
 800be32:	e02d      	b.n	800be90 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d017      	beq.n	800be6e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be4a:	23ff      	movs	r3, #255	; 0xff
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f90d 	bl	800c06c <USBH_Get_StringDesc>
 800be52:	4603      	mov	r3, r0
 800be54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be56:	7bbb      	ldrb	r3, [r7, #14]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d102      	bne.n	800be62 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800be5c:	2300      	movs	r3, #0
 800be5e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800be60:	e018      	b.n	800be94 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be62:	7bbb      	ldrb	r3, [r7, #14]
 800be64:	2b03      	cmp	r3, #3
 800be66:	d115      	bne.n	800be94 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800be68:	2300      	movs	r3, #0
 800be6a:	73fb      	strb	r3, [r7, #15]
      break;
 800be6c:	e012      	b.n	800be94 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	73fb      	strb	r3, [r7, #15]
      break;
 800be72:	e00f      	b.n	800be94 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800be74:	bf00      	nop
 800be76:	e00e      	b.n	800be96 <USBH_HandleEnum+0x3be>
      break;
 800be78:	bf00      	nop
 800be7a:	e00c      	b.n	800be96 <USBH_HandleEnum+0x3be>
      break;
 800be7c:	bf00      	nop
 800be7e:	e00a      	b.n	800be96 <USBH_HandleEnum+0x3be>
      break;
 800be80:	bf00      	nop
 800be82:	e008      	b.n	800be96 <USBH_HandleEnum+0x3be>
      break;
 800be84:	bf00      	nop
 800be86:	e006      	b.n	800be96 <USBH_HandleEnum+0x3be>
      break;
 800be88:	bf00      	nop
 800be8a:	e004      	b.n	800be96 <USBH_HandleEnum+0x3be>
      break;
 800be8c:	bf00      	nop
 800be8e:	e002      	b.n	800be96 <USBH_HandleEnum+0x3be>
      break;
 800be90:	bf00      	nop
 800be92:	e000      	b.n	800be96 <USBH_HandleEnum+0x3be>
      break;
 800be94:	bf00      	nop
  }
  return Status;
 800be96:	7bfb      	ldrb	r3, [r7, #15]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	683a      	ldr	r2, [r7, #0]
 800beae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800beb2:	bf00      	nop
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b082      	sub	sp, #8
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800becc:	1c5a      	adds	r2, r3, #1
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f804 	bl	800bee2 <USBH_HandleSof>
}
 800beda:	bf00      	nop
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b082      	sub	sp, #8
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	2b0b      	cmp	r3, #11
 800bef2:	d10a      	bne.n	800bf0a <USBH_HandleSof+0x28>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800befa:	2b00      	cmp	r3, #0
 800befc:	d005      	beq.n	800bf0a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf04:	699b      	ldr	r3, [r3, #24]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	4798      	blx	r3
  }
}
 800bf0a:	bf00      	nop
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bf12:	b480      	push	{r7}
 800bf14:	b083      	sub	sp, #12
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bf22:	bf00      	nop
}
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b083      	sub	sp, #12
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bf3e:	bf00      	nop
}
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f001 f8c6 	bl	800d12a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	791b      	ldrb	r3, [r3, #4]
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 ff13 	bl	800cdd0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	795b      	ldrb	r3, [r3, #5]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 ff0d 	bl	800cdd0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3708      	adds	r7, #8
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af02      	add	r7, sp, #8
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800bfcc:	887b      	ldrh	r3, [r7, #2]
 800bfce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfd2:	d901      	bls.n	800bfd8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	e01b      	b.n	800c010 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bfde:	887b      	ldrh	r3, [r7, #2]
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bfe8:	2100      	movs	r1, #0
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f872 	bl	800c0d4 <USBH_GetDescriptor>
 800bff0:	4603      	mov	r3, r0
 800bff2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800bff4:	7bfb      	ldrb	r3, [r7, #15]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d109      	bne.n	800c00e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c000:	887a      	ldrh	r2, [r7, #2]
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f929 	bl	800c25c <USBH_ParseDevDesc>
 800c00a:	4603      	mov	r3, r0
 800c00c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	331c      	adds	r3, #28
 800c028:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800c02a:	887b      	ldrh	r3, [r7, #2]
 800c02c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c030:	d901      	bls.n	800c036 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c032:	2303      	movs	r3, #3
 800c034:	e016      	b.n	800c064 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c036:	887b      	ldrh	r3, [r7, #2]
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c040:	2100      	movs	r1, #0
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f846 	bl	800c0d4 <USBH_GetDescriptor>
 800c048:	4603      	mov	r3, r0
 800c04a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d107      	bne.n	800c062 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c052:	887b      	ldrh	r3, [r7, #2]
 800c054:	461a      	mov	r2, r3
 800c056:	68b9      	ldr	r1, [r7, #8]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f9b3 	bl	800c3c4 <USBH_ParseCfgDesc>
 800c05e:	4603      	mov	r3, r0
 800c060:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c062:	7bfb      	ldrb	r3, [r7, #15]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af02      	add	r7, sp, #8
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	607a      	str	r2, [r7, #4]
 800c076:	461a      	mov	r2, r3
 800c078:	460b      	mov	r3, r1
 800c07a:	72fb      	strb	r3, [r7, #11]
 800c07c:	4613      	mov	r3, r2
 800c07e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800c080:	893b      	ldrh	r3, [r7, #8]
 800c082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c086:	d802      	bhi.n	800c08e <USBH_Get_StringDesc+0x22>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d101      	bne.n	800c092 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c08e:	2303      	movs	r3, #3
 800c090:	e01c      	b.n	800c0cc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800c092:	7afb      	ldrb	r3, [r7, #11]
 800c094:	b29b      	uxth	r3, r3
 800c096:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c09a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c0a2:	893b      	ldrh	r3, [r7, #8]
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 f812 	bl	800c0d4 <USBH_GetDescriptor>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c0b4:	7dfb      	ldrb	r3, [r7, #23]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d107      	bne.n	800c0ca <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c0c0:	893a      	ldrh	r2, [r7, #8]
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 fb93 	bl	800c7f0 <USBH_ParseStringDesc>
  }

  return status;
 800c0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3718      	adds	r7, #24
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	607b      	str	r3, [r7, #4]
 800c0de:	460b      	mov	r3, r1
 800c0e0:	72fb      	strb	r3, [r7, #11]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	789b      	ldrb	r3, [r3, #2]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d11c      	bne.n	800c128 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c0ee:	7afb      	ldrb	r3, [r7, #11]
 800c0f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c0f4:	b2da      	uxtb	r2, r3
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2206      	movs	r2, #6
 800c0fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	893a      	ldrh	r2, [r7, #8]
 800c104:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c106:	893b      	ldrh	r3, [r7, #8]
 800c108:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c10c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c110:	d104      	bne.n	800c11c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f240 4209 	movw	r2, #1033	; 0x409
 800c118:	829a      	strh	r2, [r3, #20]
 800c11a:	e002      	b.n	800c122 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	8b3a      	ldrh	r2, [r7, #24]
 800c126:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c128:	8b3b      	ldrh	r3, [r7, #24]
 800c12a:	461a      	mov	r2, r3
 800c12c:	6879      	ldr	r1, [r7, #4]
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f000 fbac 	bl	800c88c <USBH_CtlReq>
 800c134:	4603      	mov	r3, r0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b082      	sub	sp, #8
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
 800c146:	460b      	mov	r3, r1
 800c148:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	789b      	ldrb	r3, [r3, #2]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d10f      	bne.n	800c172 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2205      	movs	r2, #5
 800c15c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c15e:	78fb      	ldrb	r3, [r7, #3]
 800c160:	b29a      	uxth	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c172:	2200      	movs	r2, #0
 800c174:	2100      	movs	r1, #0
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fb88 	bl	800c88c <USBH_CtlReq>
 800c17c:	4603      	mov	r3, r0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b082      	sub	sp, #8
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	460b      	mov	r3, r1
 800c190:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	789b      	ldrb	r3, [r3, #2]
 800c196:	2b01      	cmp	r3, #1
 800c198:	d10e      	bne.n	800c1b8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2209      	movs	r2, #9
 800c1a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	887a      	ldrh	r2, [r7, #2]
 800c1aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fb65 	bl	800c88c <USBH_CtlReq>
 800c1c2:	4603      	mov	r3, r0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	789b      	ldrb	r3, [r3, #2]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d10f      	bne.n	800c200 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2203      	movs	r2, #3
 800c1ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c1ec:	78fb      	ldrb	r3, [r7, #3]
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c200:	2200      	movs	r2, #0
 800c202:	2100      	movs	r1, #0
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fb41 	bl	800c88c <USBH_CtlReq>
 800c20a:	4603      	mov	r3, r0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	789b      	ldrb	r3, [r3, #2]
 800c224:	2b01      	cmp	r3, #1
 800c226:	d10f      	bne.n	800c248 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2202      	movs	r2, #2
 800c22c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c23a:	78fb      	ldrb	r3, [r7, #3]
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c248:	2200      	movs	r2, #0
 800c24a:	2100      	movs	r1, #0
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 fb1d 	bl	800c88c <USBH_CtlReq>
 800c252:	4603      	mov	r3, r0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b087      	sub	sp, #28
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	4613      	mov	r3, r2
 800c268:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f203 3326 	addw	r3, r3, #806	; 0x326
 800c270:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d101      	bne.n	800c280 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c27c:	2302      	movs	r3, #2
 800c27e:	e098      	b.n	800c3b2 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	781a      	ldrb	r2, [r3, #0]
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	785a      	ldrb	r2, [r3, #1]
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	3302      	adds	r3, #2
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	b29a      	uxth	r2, r3
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	3303      	adds	r3, #3
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	021b      	lsls	r3, r3, #8
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	b29a      	uxth	r2, r3
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	791a      	ldrb	r2, [r3, #4]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	795a      	ldrb	r2, [r3, #5]
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	799a      	ldrb	r2, [r3, #6]
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	79da      	ldrb	r2, [r3, #7]
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d004      	beq.n	800c2e0 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d11b      	bne.n	800c318 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	79db      	ldrb	r3, [r3, #7]
 800c2e4:	2b20      	cmp	r3, #32
 800c2e6:	dc0f      	bgt.n	800c308 <USBH_ParseDevDesc+0xac>
 800c2e8:	2b08      	cmp	r3, #8
 800c2ea:	db0f      	blt.n	800c30c <USBH_ParseDevDesc+0xb0>
 800c2ec:	3b08      	subs	r3, #8
 800c2ee:	4a34      	ldr	r2, [pc, #208]	; (800c3c0 <USBH_ParseDevDesc+0x164>)
 800c2f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c2f4:	f003 0301 	and.w	r3, r3, #1
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	bf14      	ite	ne
 800c2fc:	2301      	movne	r3, #1
 800c2fe:	2300      	moveq	r3, #0
 800c300:	b2db      	uxtb	r3, r3
 800c302:	2b00      	cmp	r3, #0
 800c304:	d106      	bne.n	800c314 <USBH_ParseDevDesc+0xb8>
 800c306:	e001      	b.n	800c30c <USBH_ParseDevDesc+0xb0>
 800c308:	2b40      	cmp	r3, #64	; 0x40
 800c30a:	d003      	beq.n	800c314 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	2208      	movs	r2, #8
 800c310:	71da      	strb	r2, [r3, #7]
        break;
 800c312:	e000      	b.n	800c316 <USBH_ParseDevDesc+0xba>
        break;
 800c314:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c316:	e00e      	b.n	800c336 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c31e:	2b02      	cmp	r3, #2
 800c320:	d107      	bne.n	800c332 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	79db      	ldrb	r3, [r3, #7]
 800c326:	2b08      	cmp	r3, #8
 800c328:	d005      	beq.n	800c336 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	2208      	movs	r2, #8
 800c32e:	71da      	strb	r2, [r3, #7]
 800c330:	e001      	b.n	800c336 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c332:	2303      	movs	r3, #3
 800c334:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800c336:	88fb      	ldrh	r3, [r7, #6]
 800c338:	2b08      	cmp	r3, #8
 800c33a:	d939      	bls.n	800c3b0 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	3308      	adds	r3, #8
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	b29a      	uxth	r2, r3
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	3309      	adds	r3, #9
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	b29b      	uxth	r3, r3
 800c350:	4313      	orrs	r3, r2
 800c352:	b29a      	uxth	r2, r3
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	330a      	adds	r3, #10
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	b29a      	uxth	r2, r3
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	330b      	adds	r3, #11
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	b29b      	uxth	r3, r3
 800c368:	021b      	lsls	r3, r3, #8
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	4313      	orrs	r3, r2
 800c36e:	b29a      	uxth	r2, r3
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	330c      	adds	r3, #12
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	330d      	adds	r3, #13
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b29b      	uxth	r3, r3
 800c384:	021b      	lsls	r3, r3, #8
 800c386:	b29b      	uxth	r3, r3
 800c388:	4313      	orrs	r3, r2
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	7b9a      	ldrb	r2, [r3, #14]
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	7bda      	ldrb	r2, [r3, #15]
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	7c1a      	ldrb	r2, [r3, #16]
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	7c5a      	ldrb	r2, [r3, #17]
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	371c      	adds	r7, #28
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	01000101 	.word	0x01000101

0800c3c4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08c      	sub	sp, #48	; 0x30
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c3d8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	e0db      	b.n	800c5ae <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	781a      	ldrb	r2, [r3, #0]
 800c3fe:	6a3b      	ldr	r3, [r7, #32]
 800c400:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	785a      	ldrb	r2, [r3, #1]
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	3302      	adds	r3, #2
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	b29a      	uxth	r2, r3
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	3303      	adds	r3, #3
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	b29b      	uxth	r3, r3
 800c41a:	021b      	lsls	r3, r3, #8
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	4313      	orrs	r3, r2
 800c420:	b29b      	uxth	r3, r3
 800c422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c426:	bf28      	it	cs
 800c428:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	791a      	ldrb	r2, [r3, #4]
 800c436:	6a3b      	ldr	r3, [r7, #32]
 800c438:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	795a      	ldrb	r2, [r3, #5]
 800c43e:	6a3b      	ldr	r3, [r7, #32]
 800c440:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	799a      	ldrb	r2, [r3, #6]
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	79da      	ldrb	r2, [r3, #7]
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	7a1a      	ldrb	r2, [r3, #8]
 800c456:	6a3b      	ldr	r3, [r7, #32]
 800c458:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800c45a:	6a3b      	ldr	r3, [r7, #32]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	2b09      	cmp	r3, #9
 800c460:	d002      	beq.n	800c468 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c462:	6a3b      	ldr	r3, [r7, #32]
 800c464:	2209      	movs	r2, #9
 800c466:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c468:	88fb      	ldrh	r3, [r7, #6]
 800c46a:	2b09      	cmp	r3, #9
 800c46c:	f240 809d 	bls.w	800c5aa <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800c470:	2309      	movs	r3, #9
 800c472:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c474:	2300      	movs	r3, #0
 800c476:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c478:	e081      	b.n	800c57e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c47a:	f107 0316 	add.w	r3, r7, #22
 800c47e:	4619      	mov	r1, r3
 800c480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c482:	f000 f9e8 	bl	800c856 <USBH_GetNextDesc>
 800c486:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48a:	785b      	ldrb	r3, [r3, #1]
 800c48c:	2b04      	cmp	r3, #4
 800c48e:	d176      	bne.n	800c57e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	2b09      	cmp	r3, #9
 800c496:	d002      	beq.n	800c49e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	2209      	movs	r2, #9
 800c49c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c49e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4a2:	221a      	movs	r2, #26
 800c4a4:	fb02 f303 	mul.w	r3, r2, r3
 800c4a8:	3308      	adds	r3, #8
 800c4aa:	6a3a      	ldr	r2, [r7, #32]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	3302      	adds	r3, #2
 800c4b0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c4b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4b4:	69f8      	ldr	r0, [r7, #28]
 800c4b6:	f000 f87e 	bl	800c5b6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c4c4:	e043      	b.n	800c54e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c4c6:	f107 0316 	add.w	r3, r7, #22
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4ce:	f000 f9c2 	bl	800c856 <USBH_GetNextDesc>
 800c4d2:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d6:	785b      	ldrb	r3, [r3, #1]
 800c4d8:	2b05      	cmp	r3, #5
 800c4da:	d138      	bne.n	800c54e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	795b      	ldrb	r3, [r3, #5]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d113      	bne.n	800c50c <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d003      	beq.n	800c4f4 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	799b      	ldrb	r3, [r3, #6]
 800c4f0:	2b03      	cmp	r3, #3
 800c4f2:	d10b      	bne.n	800c50c <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	79db      	ldrb	r3, [r3, #7]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10b      	bne.n	800c514 <USBH_ParseCfgDesc+0x150>
 800c4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	2b09      	cmp	r3, #9
 800c502:	d007      	beq.n	800c514 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800c504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c506:	2209      	movs	r2, #9
 800c508:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c50a:	e003      	b.n	800c514 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	2207      	movs	r2, #7
 800c510:	701a      	strb	r2, [r3, #0]
 800c512:	e000      	b.n	800c516 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c514:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c51a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c51e:	3201      	adds	r2, #1
 800c520:	00d2      	lsls	r2, r2, #3
 800c522:	211a      	movs	r1, #26
 800c524:	fb01 f303 	mul.w	r3, r1, r3
 800c528:	4413      	add	r3, r2
 800c52a:	3308      	adds	r3, #8
 800c52c:	6a3a      	ldr	r2, [r7, #32]
 800c52e:	4413      	add	r3, r2
 800c530:	3304      	adds	r3, #4
 800c532:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c536:	69b9      	ldr	r1, [r7, #24]
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 f870 	bl	800c61e <USBH_ParseEPDesc>
 800c53e:	4603      	mov	r3, r0
 800c540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c544:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c548:	3301      	adds	r3, #1
 800c54a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	791b      	ldrb	r3, [r3, #4]
 800c552:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c556:	429a      	cmp	r2, r3
 800c558:	d204      	bcs.n	800c564 <USBH_ParseCfgDesc+0x1a0>
 800c55a:	6a3b      	ldr	r3, [r7, #32]
 800c55c:	885a      	ldrh	r2, [r3, #2]
 800c55e:	8afb      	ldrh	r3, [r7, #22]
 800c560:	429a      	cmp	r2, r3
 800c562:	d8b0      	bhi.n	800c4c6 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	791b      	ldrb	r3, [r3, #4]
 800c568:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d201      	bcs.n	800c574 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800c570:	2303      	movs	r3, #3
 800c572:	e01c      	b.n	800c5ae <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800c574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c578:	3301      	adds	r3, #1
 800c57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c582:	2b01      	cmp	r3, #1
 800c584:	d805      	bhi.n	800c592 <USBH_ParseCfgDesc+0x1ce>
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	885a      	ldrh	r2, [r3, #2]
 800c58a:	8afb      	ldrh	r3, [r7, #22]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	f63f af74 	bhi.w	800c47a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	791b      	ldrb	r3, [r3, #4]
 800c596:	2b02      	cmp	r3, #2
 800c598:	bf28      	it	cs
 800c59a:	2302      	movcs	r3, #2
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d201      	bcs.n	800c5aa <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800c5a6:	2303      	movs	r3, #3
 800c5a8:	e001      	b.n	800c5ae <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800c5aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3730      	adds	r7, #48	; 0x30
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c5b6:	b480      	push	{r7}
 800c5b8:	b083      	sub	sp, #12
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	781a      	ldrb	r2, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	785a      	ldrb	r2, [r3, #1]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	789a      	ldrb	r2, [r3, #2]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	78da      	ldrb	r2, [r3, #3]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	bf28      	it	cs
 800c5ea:	2302      	movcs	r3, #2
 800c5ec:	b2da      	uxtb	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	795a      	ldrb	r2, [r3, #5]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	799a      	ldrb	r2, [r3, #6]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	79da      	ldrb	r2, [r3, #7]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	7a1a      	ldrb	r2, [r3, #8]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	721a      	strb	r2, [r3, #8]
}
 800c612:	bf00      	nop
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr

0800c61e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c61e:	b480      	push	{r7}
 800c620:	b087      	sub	sp, #28
 800c622:	af00      	add	r7, sp, #0
 800c624:	60f8      	str	r0, [r7, #12]
 800c626:	60b9      	str	r1, [r7, #8]
 800c628:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c62a:	2300      	movs	r3, #0
 800c62c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	781a      	ldrb	r2, [r3, #0]
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	785a      	ldrb	r2, [r3, #1]
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	789a      	ldrb	r2, [r3, #2]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	78da      	ldrb	r2, [r3, #3]
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	3304      	adds	r3, #4
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	b29a      	uxth	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	3305      	adds	r3, #5
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	021b      	lsls	r3, r3, #8
 800c660:	b29b      	uxth	r3, r3
 800c662:	4313      	orrs	r3, r2
 800c664:	b29a      	uxth	r2, r3
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	799a      	ldrb	r2, [r3, #6]
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	889b      	ldrh	r3, [r3, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d009      	beq.n	800c68e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c67e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c682:	d804      	bhi.n	800c68e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c68c:	d901      	bls.n	800c692 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800c68e:	2303      	movs	r3, #3
 800c690:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d136      	bne.n	800c70a <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	78db      	ldrb	r3, [r3, #3]
 800c6a0:	f003 0303 	and.w	r3, r3, #3
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d108      	bne.n	800c6ba <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	889b      	ldrh	r3, [r3, #4]
 800c6ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6b0:	f240 8097 	bls.w	800c7e2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	75fb      	strb	r3, [r7, #23]
 800c6b8:	e093      	b.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	78db      	ldrb	r3, [r3, #3]
 800c6be:	f003 0303 	and.w	r3, r3, #3
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d107      	bne.n	800c6d6 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	889b      	ldrh	r3, [r3, #4]
 800c6ca:	2b40      	cmp	r3, #64	; 0x40
 800c6cc:	f240 8089 	bls.w	800c7e2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c6d0:	2303      	movs	r3, #3
 800c6d2:	75fb      	strb	r3, [r7, #23]
 800c6d4:	e085      	b.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	78db      	ldrb	r3, [r3, #3]
 800c6da:	f003 0303 	and.w	r3, r3, #3
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d005      	beq.n	800c6ee <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	78db      	ldrb	r3, [r3, #3]
 800c6e6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c6ea:	2b03      	cmp	r3, #3
 800c6ec:	d10a      	bne.n	800c704 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	799b      	ldrb	r3, [r3, #6]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d003      	beq.n	800c6fe <USBH_ParseEPDesc+0xe0>
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	799b      	ldrb	r3, [r3, #6]
 800c6fa:	2b10      	cmp	r3, #16
 800c6fc:	d970      	bls.n	800c7e0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c6fe:	2303      	movs	r3, #3
 800c700:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c702:	e06d      	b.n	800c7e0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c704:	2303      	movs	r3, #3
 800c706:	75fb      	strb	r3, [r7, #23]
 800c708:	e06b      	b.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c710:	2b01      	cmp	r3, #1
 800c712:	d13c      	bne.n	800c78e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	78db      	ldrb	r3, [r3, #3]
 800c718:	f003 0303 	and.w	r3, r3, #3
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	d005      	beq.n	800c72c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	78db      	ldrb	r3, [r3, #3]
 800c724:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d106      	bne.n	800c73a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	889b      	ldrh	r3, [r3, #4]
 800c730:	2b40      	cmp	r3, #64	; 0x40
 800c732:	d956      	bls.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c734:	2303      	movs	r3, #3
 800c736:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c738:	e053      	b.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	78db      	ldrb	r3, [r3, #3]
 800c73e:	f003 0303 	and.w	r3, r3, #3
 800c742:	2b01      	cmp	r3, #1
 800c744:	d10e      	bne.n	800c764 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	799b      	ldrb	r3, [r3, #6]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d007      	beq.n	800c75e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c752:	2b10      	cmp	r3, #16
 800c754:	d803      	bhi.n	800c75e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c75a:	2b40      	cmp	r3, #64	; 0x40
 800c75c:	d941      	bls.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c75e:	2303      	movs	r3, #3
 800c760:	75fb      	strb	r3, [r7, #23]
 800c762:	e03e      	b.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	78db      	ldrb	r3, [r3, #3]
 800c768:	f003 0303 	and.w	r3, r3, #3
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	d10b      	bne.n	800c788 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	799b      	ldrb	r3, [r3, #6]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d004      	beq.n	800c782 <USBH_ParseEPDesc+0x164>
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	889b      	ldrh	r3, [r3, #4]
 800c77c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c780:	d32f      	bcc.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c782:	2303      	movs	r3, #3
 800c784:	75fb      	strb	r3, [r7, #23]
 800c786:	e02c      	b.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c788:	2303      	movs	r3, #3
 800c78a:	75fb      	strb	r3, [r7, #23]
 800c78c:	e029      	b.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c794:	2b02      	cmp	r3, #2
 800c796:	d120      	bne.n	800c7da <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	78db      	ldrb	r3, [r3, #3]
 800c79c:	f003 0303 	and.w	r3, r3, #3
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d106      	bne.n	800c7b2 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	889b      	ldrh	r3, [r3, #4]
 800c7a8:	2b08      	cmp	r3, #8
 800c7aa:	d01a      	beq.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c7ac:	2303      	movs	r3, #3
 800c7ae:	75fb      	strb	r3, [r7, #23]
 800c7b0:	e017      	b.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	78db      	ldrb	r3, [r3, #3]
 800c7b6:	f003 0303 	and.w	r3, r3, #3
 800c7ba:	2b03      	cmp	r3, #3
 800c7bc:	d10a      	bne.n	800c7d4 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	799b      	ldrb	r3, [r3, #6]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d003      	beq.n	800c7ce <USBH_ParseEPDesc+0x1b0>
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	889b      	ldrh	r3, [r3, #4]
 800c7ca:	2b08      	cmp	r3, #8
 800c7cc:	d909      	bls.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	75fb      	strb	r3, [r7, #23]
 800c7d2:	e006      	b.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	75fb      	strb	r3, [r7, #23]
 800c7d8:	e003      	b.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	75fb      	strb	r3, [r7, #23]
 800c7de:	e000      	b.n	800c7e2 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c7e0:	bf00      	nop
  }

  return status;
 800c7e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	371c      	adds	r7, #28
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	3301      	adds	r3, #1
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b03      	cmp	r3, #3
 800c806:	d120      	bne.n	800c84a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	1e9a      	subs	r2, r3, #2
 800c80e:	88fb      	ldrh	r3, [r7, #6]
 800c810:	4293      	cmp	r3, r2
 800c812:	bf28      	it	cs
 800c814:	4613      	movcs	r3, r2
 800c816:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	3302      	adds	r3, #2
 800c81c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c81e:	2300      	movs	r3, #0
 800c820:	82fb      	strh	r3, [r7, #22]
 800c822:	e00b      	b.n	800c83c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c824:	8afb      	ldrh	r3, [r7, #22]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	4413      	add	r3, r2
 800c82a:	781a      	ldrb	r2, [r3, #0]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	3301      	adds	r3, #1
 800c834:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c836:	8afb      	ldrh	r3, [r7, #22]
 800c838:	3302      	adds	r3, #2
 800c83a:	82fb      	strh	r3, [r7, #22]
 800c83c:	8afa      	ldrh	r2, [r7, #22]
 800c83e:	8abb      	ldrh	r3, [r7, #20]
 800c840:	429a      	cmp	r2, r3
 800c842:	d3ef      	bcc.n	800c824 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2200      	movs	r2, #0
 800c848:	701a      	strb	r2, [r3, #0]
  }
}
 800c84a:	bf00      	nop
 800c84c:	371c      	adds	r7, #28
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr

0800c856 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c856:	b480      	push	{r7}
 800c858:	b085      	sub	sp, #20
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	881a      	ldrh	r2, [r3, #0]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	b29b      	uxth	r3, r3
 800c86a:	4413      	add	r3, r2
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4413      	add	r3, r2
 800c87c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c87e:	68fb      	ldr	r3, [r7, #12]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	4613      	mov	r3, r2
 800c898:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c89a:	2301      	movs	r3, #1
 800c89c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	789b      	ldrb	r3, [r3, #2]
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d002      	beq.n	800c8ac <USBH_CtlReq+0x20>
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d00f      	beq.n	800c8ca <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c8aa:	e027      	b.n	800c8fc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	88fa      	ldrh	r2, [r7, #6]
 800c8b6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	75fb      	strb	r3, [r7, #23]
      break;
 800c8c8:	e018      	b.n	800c8fc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f000 f81c 	bl	800c908 <USBH_HandleControl>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <USBH_CtlReq+0x54>
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	2b03      	cmp	r3, #3
 800c8de:	d106      	bne.n	800c8ee <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	761a      	strb	r2, [r3, #24]
      break;
 800c8ec:	e005      	b.n	800c8fa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	d102      	bne.n	800c8fa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	709a      	strb	r2, [r3, #2]
      break;
 800c8fa:	bf00      	nop
  }
  return status;
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
	...

0800c908 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b086      	sub	sp, #24
 800c90c:	af02      	add	r7, sp, #8
 800c90e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c910:	2301      	movs	r3, #1
 800c912:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c914:	2300      	movs	r3, #0
 800c916:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	7e1b      	ldrb	r3, [r3, #24]
 800c91c:	3b01      	subs	r3, #1
 800c91e:	2b0a      	cmp	r3, #10
 800c920:	f200 8156 	bhi.w	800cbd0 <USBH_HandleControl+0x2c8>
 800c924:	a201      	add	r2, pc, #4	; (adr r2, 800c92c <USBH_HandleControl+0x24>)
 800c926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c92a:	bf00      	nop
 800c92c:	0800c959 	.word	0x0800c959
 800c930:	0800c973 	.word	0x0800c973
 800c934:	0800c9dd 	.word	0x0800c9dd
 800c938:	0800ca03 	.word	0x0800ca03
 800c93c:	0800ca3b 	.word	0x0800ca3b
 800c940:	0800ca65 	.word	0x0800ca65
 800c944:	0800cab7 	.word	0x0800cab7
 800c948:	0800cad9 	.word	0x0800cad9
 800c94c:	0800cb15 	.word	0x0800cb15
 800c950:	0800cb3b 	.word	0x0800cb3b
 800c954:	0800cb79 	.word	0x0800cb79
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f103 0110 	add.w	r1, r3, #16
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	795b      	ldrb	r3, [r3, #5]
 800c962:	461a      	mov	r2, r3
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f943 	bl	800cbf0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2202      	movs	r2, #2
 800c96e:	761a      	strb	r2, [r3, #24]
      break;
 800c970:	e139      	b.n	800cbe6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	795b      	ldrb	r3, [r3, #5]
 800c976:	4619      	mov	r1, r3
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fcc5 	bl	800d308 <USBH_LL_GetURBState>
 800c97e:	4603      	mov	r3, r0
 800c980:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c982:	7bbb      	ldrb	r3, [r7, #14]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d11e      	bne.n	800c9c6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	7c1b      	ldrb	r3, [r3, #16]
 800c98c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c990:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	8adb      	ldrh	r3, [r3, #22]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00a      	beq.n	800c9b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c99a:	7b7b      	ldrb	r3, [r7, #13]
 800c99c:	2b80      	cmp	r3, #128	; 0x80
 800c99e:	d103      	bne.n	800c9a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2203      	movs	r2, #3
 800c9a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c9a6:	e115      	b.n	800cbd4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2205      	movs	r2, #5
 800c9ac:	761a      	strb	r2, [r3, #24]
      break;
 800c9ae:	e111      	b.n	800cbd4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c9b0:	7b7b      	ldrb	r3, [r7, #13]
 800c9b2:	2b80      	cmp	r3, #128	; 0x80
 800c9b4:	d103      	bne.n	800c9be <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2209      	movs	r2, #9
 800c9ba:	761a      	strb	r2, [r3, #24]
      break;
 800c9bc:	e10a      	b.n	800cbd4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2207      	movs	r2, #7
 800c9c2:	761a      	strb	r2, [r3, #24]
      break;
 800c9c4:	e106      	b.n	800cbd4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c9c6:	7bbb      	ldrb	r3, [r7, #14]
 800c9c8:	2b04      	cmp	r3, #4
 800c9ca:	d003      	beq.n	800c9d4 <USBH_HandleControl+0xcc>
 800c9cc:	7bbb      	ldrb	r3, [r7, #14]
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	f040 8100 	bne.w	800cbd4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	220b      	movs	r2, #11
 800c9d8:	761a      	strb	r2, [r3, #24]
      break;
 800c9da:	e0fb      	b.n	800cbd4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6899      	ldr	r1, [r3, #8]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	899a      	ldrh	r2, [r3, #12]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	791b      	ldrb	r3, [r3, #4]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f93a 	bl	800cc6e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2204      	movs	r2, #4
 800c9fe:	761a      	strb	r2, [r3, #24]
      break;
 800ca00:	e0f1      	b.n	800cbe6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	791b      	ldrb	r3, [r3, #4]
 800ca06:	4619      	mov	r1, r3
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fc7d 	bl	800d308 <USBH_LL_GetURBState>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ca12:	7bbb      	ldrb	r3, [r7, #14]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d102      	bne.n	800ca1e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2209      	movs	r2, #9
 800ca1c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ca1e:	7bbb      	ldrb	r3, [r7, #14]
 800ca20:	2b05      	cmp	r3, #5
 800ca22:	d102      	bne.n	800ca2a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ca24:	2303      	movs	r3, #3
 800ca26:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca28:	e0d6      	b.n	800cbd8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ca2a:	7bbb      	ldrb	r3, [r7, #14]
 800ca2c:	2b04      	cmp	r3, #4
 800ca2e:	f040 80d3 	bne.w	800cbd8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	220b      	movs	r2, #11
 800ca36:	761a      	strb	r2, [r3, #24]
      break;
 800ca38:	e0ce      	b.n	800cbd8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6899      	ldr	r1, [r3, #8]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	899a      	ldrh	r2, [r3, #12]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	795b      	ldrb	r3, [r3, #5]
 800ca46:	2001      	movs	r0, #1
 800ca48:	9000      	str	r0, [sp, #0]
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 f8ea 	bl	800cc24 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2206      	movs	r2, #6
 800ca60:	761a      	strb	r2, [r3, #24]
      break;
 800ca62:	e0c0      	b.n	800cbe6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	795b      	ldrb	r3, [r3, #5]
 800ca68:	4619      	mov	r1, r3
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fc4c 	bl	800d308 <USBH_LL_GetURBState>
 800ca70:	4603      	mov	r3, r0
 800ca72:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ca74:	7bbb      	ldrb	r3, [r7, #14]
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d103      	bne.n	800ca82 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2207      	movs	r2, #7
 800ca7e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca80:	e0ac      	b.n	800cbdc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ca82:	7bbb      	ldrb	r3, [r7, #14]
 800ca84:	2b05      	cmp	r3, #5
 800ca86:	d105      	bne.n	800ca94 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	220c      	movs	r2, #12
 800ca8c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	73fb      	strb	r3, [r7, #15]
      break;
 800ca92:	e0a3      	b.n	800cbdc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ca94:	7bbb      	ldrb	r3, [r7, #14]
 800ca96:	2b02      	cmp	r3, #2
 800ca98:	d103      	bne.n	800caa2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2205      	movs	r2, #5
 800ca9e:	761a      	strb	r2, [r3, #24]
      break;
 800caa0:	e09c      	b.n	800cbdc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800caa2:	7bbb      	ldrb	r3, [r7, #14]
 800caa4:	2b04      	cmp	r3, #4
 800caa6:	f040 8099 	bne.w	800cbdc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	220b      	movs	r2, #11
 800caae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cab0:	2302      	movs	r3, #2
 800cab2:	73fb      	strb	r3, [r7, #15]
      break;
 800cab4:	e092      	b.n	800cbdc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	791b      	ldrb	r3, [r3, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	2100      	movs	r1, #0
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f8d5 	bl	800cc6e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800caca:	b29a      	uxth	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2208      	movs	r2, #8
 800cad4:	761a      	strb	r2, [r3, #24]

      break;
 800cad6:	e086      	b.n	800cbe6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	791b      	ldrb	r3, [r3, #4]
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fc12 	bl	800d308 <USBH_LL_GetURBState>
 800cae4:	4603      	mov	r3, r0
 800cae6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cae8:	7bbb      	ldrb	r3, [r7, #14]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d105      	bne.n	800cafa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	220d      	movs	r2, #13
 800caf2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800caf4:	2300      	movs	r3, #0
 800caf6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800caf8:	e072      	b.n	800cbe0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cafa:	7bbb      	ldrb	r3, [r7, #14]
 800cafc:	2b04      	cmp	r3, #4
 800cafe:	d103      	bne.n	800cb08 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	220b      	movs	r2, #11
 800cb04:	761a      	strb	r2, [r3, #24]
      break;
 800cb06:	e06b      	b.n	800cbe0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
 800cb0a:	2b05      	cmp	r3, #5
 800cb0c:	d168      	bne.n	800cbe0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	73fb      	strb	r3, [r7, #15]
      break;
 800cb12:	e065      	b.n	800cbe0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	795b      	ldrb	r3, [r3, #5]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	9200      	str	r2, [sp, #0]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	2100      	movs	r1, #0
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 f87f 	bl	800cc24 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	220a      	movs	r2, #10
 800cb36:	761a      	strb	r2, [r3, #24]
      break;
 800cb38:	e055      	b.n	800cbe6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	795b      	ldrb	r3, [r3, #5]
 800cb3e:	4619      	mov	r1, r3
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 fbe1 	bl	800d308 <USBH_LL_GetURBState>
 800cb46:	4603      	mov	r3, r0
 800cb48:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cb4a:	7bbb      	ldrb	r3, [r7, #14]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d105      	bne.n	800cb5c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	220d      	movs	r2, #13
 800cb58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cb5a:	e043      	b.n	800cbe4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cb5c:	7bbb      	ldrb	r3, [r7, #14]
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d103      	bne.n	800cb6a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2209      	movs	r2, #9
 800cb66:	761a      	strb	r2, [r3, #24]
      break;
 800cb68:	e03c      	b.n	800cbe4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cb6a:	7bbb      	ldrb	r3, [r7, #14]
 800cb6c:	2b04      	cmp	r3, #4
 800cb6e:	d139      	bne.n	800cbe4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	220b      	movs	r2, #11
 800cb74:	761a      	strb	r2, [r3, #24]
      break;
 800cb76:	e035      	b.n	800cbe4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	7e5b      	ldrb	r3, [r3, #25]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	b2da      	uxtb	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	765a      	strb	r2, [r3, #25]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	7e5b      	ldrb	r3, [r3, #25]
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d806      	bhi.n	800cb9a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2201      	movs	r2, #1
 800cb96:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cb98:	e025      	b.n	800cbe6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cba0:	2106      	movs	r1, #6
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	795b      	ldrb	r3, [r3, #5]
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f90c 	bl	800cdd0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	791b      	ldrb	r3, [r3, #4]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 f906 	bl	800cdd0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cbca:	2302      	movs	r3, #2
 800cbcc:	73fb      	strb	r3, [r7, #15]
      break;
 800cbce:	e00a      	b.n	800cbe6 <USBH_HandleControl+0x2de>

    default:
      break;
 800cbd0:	bf00      	nop
 800cbd2:	e008      	b.n	800cbe6 <USBH_HandleControl+0x2de>
      break;
 800cbd4:	bf00      	nop
 800cbd6:	e006      	b.n	800cbe6 <USBH_HandleControl+0x2de>
      break;
 800cbd8:	bf00      	nop
 800cbda:	e004      	b.n	800cbe6 <USBH_HandleControl+0x2de>
      break;
 800cbdc:	bf00      	nop
 800cbde:	e002      	b.n	800cbe6 <USBH_HandleControl+0x2de>
      break;
 800cbe0:	bf00      	nop
 800cbe2:	e000      	b.n	800cbe6 <USBH_HandleControl+0x2de>
      break;
 800cbe4:	bf00      	nop
  }

  return status;
 800cbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b088      	sub	sp, #32
 800cbf4:	af04      	add	r7, sp, #16
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cbfe:	79f9      	ldrb	r1, [r7, #7]
 800cc00:	2300      	movs	r3, #0
 800cc02:	9303      	str	r3, [sp, #12]
 800cc04:	2308      	movs	r3, #8
 800cc06:	9302      	str	r3, [sp, #8]
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	2300      	movs	r3, #0
 800cc12:	2200      	movs	r2, #0
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 fb46 	bl	800d2a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b088      	sub	sp, #32
 800cc28:	af04      	add	r7, sp, #16
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	4611      	mov	r1, r2
 800cc30:	461a      	mov	r2, r3
 800cc32:	460b      	mov	r3, r1
 800cc34:	80fb      	strh	r3, [r7, #6]
 800cc36:	4613      	mov	r3, r2
 800cc38:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cc44:	2300      	movs	r3, #0
 800cc46:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc48:	7979      	ldrb	r1, [r7, #5]
 800cc4a:	7e3b      	ldrb	r3, [r7, #24]
 800cc4c:	9303      	str	r3, [sp, #12]
 800cc4e:	88fb      	ldrh	r3, [r7, #6]
 800cc50:	9302      	str	r3, [sp, #8]
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	9301      	str	r3, [sp, #4]
 800cc56:	2301      	movs	r3, #1
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f000 fb21 	bl	800d2a6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b088      	sub	sp, #32
 800cc72:	af04      	add	r7, sp, #16
 800cc74:	60f8      	str	r0, [r7, #12]
 800cc76:	60b9      	str	r1, [r7, #8]
 800cc78:	4611      	mov	r1, r2
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	80fb      	strh	r3, [r7, #6]
 800cc80:	4613      	mov	r3, r2
 800cc82:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc84:	7979      	ldrb	r1, [r7, #5]
 800cc86:	2300      	movs	r3, #0
 800cc88:	9303      	str	r3, [sp, #12]
 800cc8a:	88fb      	ldrh	r3, [r7, #6]
 800cc8c:	9302      	str	r3, [sp, #8]
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	9301      	str	r3, [sp, #4]
 800cc92:	2301      	movs	r3, #1
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	2300      	movs	r3, #0
 800cc98:	2201      	movs	r2, #1
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f000 fb03 	bl	800d2a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cca0:	2300      	movs	r3, #0

}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3710      	adds	r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b088      	sub	sp, #32
 800ccae:	af04      	add	r7, sp, #16
 800ccb0:	60f8      	str	r0, [r7, #12]
 800ccb2:	60b9      	str	r1, [r7, #8]
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	460b      	mov	r3, r1
 800ccba:	80fb      	strh	r3, [r7, #6]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ccca:	2300      	movs	r3, #0
 800cccc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ccce:	7979      	ldrb	r1, [r7, #5]
 800ccd0:	7e3b      	ldrb	r3, [r7, #24]
 800ccd2:	9303      	str	r3, [sp, #12]
 800ccd4:	88fb      	ldrh	r3, [r7, #6]
 800ccd6:	9302      	str	r3, [sp, #8]
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	9301      	str	r3, [sp, #4]
 800ccdc:	2301      	movs	r3, #1
 800ccde:	9300      	str	r3, [sp, #0]
 800cce0:	2302      	movs	r3, #2
 800cce2:	2200      	movs	r2, #0
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f000 fade 	bl	800d2a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b088      	sub	sp, #32
 800ccf8:	af04      	add	r7, sp, #16
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	4611      	mov	r1, r2
 800cd00:	461a      	mov	r2, r3
 800cd02:	460b      	mov	r3, r1
 800cd04:	80fb      	strh	r3, [r7, #6]
 800cd06:	4613      	mov	r3, r2
 800cd08:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd0a:	7979      	ldrb	r1, [r7, #5]
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9303      	str	r3, [sp, #12]
 800cd10:	88fb      	ldrh	r3, [r7, #6]
 800cd12:	9302      	str	r3, [sp, #8]
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	9301      	str	r3, [sp, #4]
 800cd18:	2301      	movs	r3, #1
 800cd1a:	9300      	str	r3, [sp, #0]
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	2201      	movs	r2, #1
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f000 fac0 	bl	800d2a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af04      	add	r7, sp, #16
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	4608      	mov	r0, r1
 800cd3a:	4611      	mov	r1, r2
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	4603      	mov	r3, r0
 800cd40:	70fb      	strb	r3, [r7, #3]
 800cd42:	460b      	mov	r3, r1
 800cd44:	70bb      	strb	r3, [r7, #2]
 800cd46:	4613      	mov	r3, r2
 800cd48:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cd4a:	7878      	ldrb	r0, [r7, #1]
 800cd4c:	78ba      	ldrb	r2, [r7, #2]
 800cd4e:	78f9      	ldrb	r1, [r7, #3]
 800cd50:	8b3b      	ldrh	r3, [r7, #24]
 800cd52:	9302      	str	r3, [sp, #8]
 800cd54:	7d3b      	ldrb	r3, [r7, #20]
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	7c3b      	ldrb	r3, [r7, #16]
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 fa53 	bl	800d20a <USBH_LL_OpenPipe>

  return USBH_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b082      	sub	sp, #8
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	460b      	mov	r3, r1
 800cd78:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800cd7a:	78fb      	ldrb	r3, [r7, #3]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fa72 	bl	800d268 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b084      	sub	sp, #16
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	460b      	mov	r3, r1
 800cd98:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 f836 	bl	800ce0c <USBH_GetFreePipe>
 800cda0:	4603      	mov	r3, r0
 800cda2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cda4:	89fb      	ldrh	r3, [r7, #14]
 800cda6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d00a      	beq.n	800cdc4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800cdae:	78fa      	ldrb	r2, [r7, #3]
 800cdb0:	89fb      	ldrh	r3, [r7, #14]
 800cdb2:	f003 030f 	and.w	r3, r3, #15
 800cdb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cdba:	6879      	ldr	r1, [r7, #4]
 800cdbc:	33e0      	adds	r3, #224	; 0xe0
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	440b      	add	r3, r1
 800cdc2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cdc4:	89fb      	ldrh	r3, [r7, #14]
 800cdc6:	b2db      	uxtb	r3, r3
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800cddc:	78fb      	ldrb	r3, [r7, #3]
 800cdde:	2b0f      	cmp	r3, #15
 800cde0:	d80d      	bhi.n	800cdfe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cde2:	78fb      	ldrb	r3, [r7, #3]
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	33e0      	adds	r3, #224	; 0xe0
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4413      	add	r3, r2
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	78fb      	ldrb	r3, [r7, #3]
 800cdf0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cdf4:	6879      	ldr	r1, [r7, #4]
 800cdf6:	33e0      	adds	r3, #224	; 0xe0
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	440b      	add	r3, r1
 800cdfc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ce14:	2300      	movs	r3, #0
 800ce16:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	73fb      	strb	r3, [r7, #15]
 800ce1c:	e00f      	b.n	800ce3e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ce1e:	7bfb      	ldrb	r3, [r7, #15]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	33e0      	adds	r3, #224	; 0xe0
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4413      	add	r3, r2
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d102      	bne.n	800ce38 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ce32:	7bfb      	ldrb	r3, [r7, #15]
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	e007      	b.n	800ce48 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ce38:	7bfb      	ldrb	r3, [r7, #15]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	73fb      	strb	r3, [r7, #15]
 800ce3e:	7bfb      	ldrb	r3, [r7, #15]
 800ce40:	2b0f      	cmp	r3, #15
 800ce42:	d9ec      	bls.n	800ce1e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ce44:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ce58:	2201      	movs	r2, #1
 800ce5a:	490e      	ldr	r1, [pc, #56]	; (800ce94 <MX_USB_HOST_Init+0x40>)
 800ce5c:	480e      	ldr	r0, [pc, #56]	; (800ce98 <MX_USB_HOST_Init+0x44>)
 800ce5e:	f7fe fb05 	bl	800b46c <USBH_Init>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d001      	beq.n	800ce6c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ce68:	f7f4 fdc8 	bl	80019fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ce6c:	490b      	ldr	r1, [pc, #44]	; (800ce9c <MX_USB_HOST_Init+0x48>)
 800ce6e:	480a      	ldr	r0, [pc, #40]	; (800ce98 <MX_USB_HOST_Init+0x44>)
 800ce70:	f7fe fba9 	bl	800b5c6 <USBH_RegisterClass>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d001      	beq.n	800ce7e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ce7a:	f7f4 fdbf 	bl	80019fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ce7e:	4806      	ldr	r0, [pc, #24]	; (800ce98 <MX_USB_HOST_Init+0x44>)
 800ce80:	f7fe fc2d 	bl	800b6de <USBH_Start>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d001      	beq.n	800ce8e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ce8a:	f7f4 fdb7 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ce8e:	bf00      	nop
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	0800ceb5 	.word	0x0800ceb5
 800ce98:	200007e4 	.word	0x200007e4
 800ce9c:	2000000c 	.word	0x2000000c

0800cea0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800cea4:	4802      	ldr	r0, [pc, #8]	; (800ceb0 <MX_USB_HOST_Process+0x10>)
 800cea6:	f7fe fc2b 	bl	800b700 <USBH_Process>
}
 800ceaa:	bf00      	nop
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	200007e4 	.word	0x200007e4

0800ceb4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	460b      	mov	r3, r1
 800cebe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cec0:	78fb      	ldrb	r3, [r7, #3]
 800cec2:	3b01      	subs	r3, #1
 800cec4:	2b04      	cmp	r3, #4
 800cec6:	d819      	bhi.n	800cefc <USBH_UserProcess+0x48>
 800cec8:	a201      	add	r2, pc, #4	; (adr r2, 800ced0 <USBH_UserProcess+0x1c>)
 800ceca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cece:	bf00      	nop
 800ced0:	0800cefd 	.word	0x0800cefd
 800ced4:	0800ceed 	.word	0x0800ceed
 800ced8:	0800cefd 	.word	0x0800cefd
 800cedc:	0800cef5 	.word	0x0800cef5
 800cee0:	0800cee5 	.word	0x0800cee5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cee4:	4b09      	ldr	r3, [pc, #36]	; (800cf0c <USBH_UserProcess+0x58>)
 800cee6:	2203      	movs	r2, #3
 800cee8:	701a      	strb	r2, [r3, #0]
  break;
 800ceea:	e008      	b.n	800cefe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ceec:	4b07      	ldr	r3, [pc, #28]	; (800cf0c <USBH_UserProcess+0x58>)
 800ceee:	2202      	movs	r2, #2
 800cef0:	701a      	strb	r2, [r3, #0]
  break;
 800cef2:	e004      	b.n	800cefe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cef4:	4b05      	ldr	r3, [pc, #20]	; (800cf0c <USBH_UserProcess+0x58>)
 800cef6:	2201      	movs	r2, #1
 800cef8:	701a      	strb	r2, [r3, #0]
  break;
 800cefa:	e000      	b.n	800cefe <USBH_UserProcess+0x4a>

  default:
  break;
 800cefc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cefe:	bf00      	nop
 800cf00:	370c      	adds	r7, #12
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop
 800cf0c:	20000bbc 	.word	0x20000bbc

0800cf10 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b08a      	sub	sp, #40	; 0x28
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf18:	f107 0314 	add.w	r3, r7, #20
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	605a      	str	r2, [r3, #4]
 800cf22:	609a      	str	r2, [r3, #8]
 800cf24:	60da      	str	r2, [r3, #12]
 800cf26:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf30:	d147      	bne.n	800cfc2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf32:	2300      	movs	r3, #0
 800cf34:	613b      	str	r3, [r7, #16]
 800cf36:	4b25      	ldr	r3, [pc, #148]	; (800cfcc <HAL_HCD_MspInit+0xbc>)
 800cf38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf3a:	4a24      	ldr	r2, [pc, #144]	; (800cfcc <HAL_HCD_MspInit+0xbc>)
 800cf3c:	f043 0301 	orr.w	r3, r3, #1
 800cf40:	6313      	str	r3, [r2, #48]	; 0x30
 800cf42:	4b22      	ldr	r3, [pc, #136]	; (800cfcc <HAL_HCD_MspInit+0xbc>)
 800cf44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf46:	f003 0301 	and.w	r3, r3, #1
 800cf4a:	613b      	str	r3, [r7, #16]
 800cf4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cf4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf54:	2300      	movs	r3, #0
 800cf56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cf5c:	f107 0314 	add.w	r3, r7, #20
 800cf60:	4619      	mov	r1, r3
 800cf62:	481b      	ldr	r0, [pc, #108]	; (800cfd0 <HAL_HCD_MspInit+0xc0>)
 800cf64:	f7f5 feb4 	bl	8002cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800cf68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800cf6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf6e:	2302      	movs	r3, #2
 800cf70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf76:	2300      	movs	r3, #0
 800cf78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cf7a:	230a      	movs	r3, #10
 800cf7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf7e:	f107 0314 	add.w	r3, r7, #20
 800cf82:	4619      	mov	r1, r3
 800cf84:	4812      	ldr	r0, [pc, #72]	; (800cfd0 <HAL_HCD_MspInit+0xc0>)
 800cf86:	f7f5 fea3 	bl	8002cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cf8a:	4b10      	ldr	r3, [pc, #64]	; (800cfcc <HAL_HCD_MspInit+0xbc>)
 800cf8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf8e:	4a0f      	ldr	r2, [pc, #60]	; (800cfcc <HAL_HCD_MspInit+0xbc>)
 800cf90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf94:	6353      	str	r3, [r2, #52]	; 0x34
 800cf96:	2300      	movs	r3, #0
 800cf98:	60fb      	str	r3, [r7, #12]
 800cf9a:	4b0c      	ldr	r3, [pc, #48]	; (800cfcc <HAL_HCD_MspInit+0xbc>)
 800cf9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf9e:	4a0b      	ldr	r2, [pc, #44]	; (800cfcc <HAL_HCD_MspInit+0xbc>)
 800cfa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cfa4:	6453      	str	r3, [r2, #68]	; 0x44
 800cfa6:	4b09      	ldr	r3, [pc, #36]	; (800cfcc <HAL_HCD_MspInit+0xbc>)
 800cfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfae:	60fb      	str	r3, [r7, #12]
 800cfb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	2043      	movs	r0, #67	; 0x43
 800cfb8:	f7f5 fa51 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cfbc:	2043      	movs	r0, #67	; 0x43
 800cfbe:	f7f5 fa6a 	bl	8002496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cfc2:	bf00      	nop
 800cfc4:	3728      	adds	r7, #40	; 0x28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	40023800 	.word	0x40023800
 800cfd0:	40020000 	.word	0x40020000

0800cfd4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fe ff6b 	bl	800bebe <USBH_LL_IncTimer>
}
 800cfe8:	bf00      	nop
 800cfea:	3708      	adds	r7, #8
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fe ffa3 	bl	800bf4a <USBH_LL_Connect>
}
 800d004:	bf00      	nop
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fe ffac 	bl	800bf78 <USBH_LL_Disconnect>
}
 800d020:	bf00      	nop
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	460b      	mov	r3, r1
 800d032:	70fb      	strb	r3, [r7, #3]
 800d034:	4613      	mov	r3, r2
 800d036:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d038:	bf00      	nop
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d052:	4618      	mov	r0, r3
 800d054:	f7fe ff5d 	bl	800bf12 <USBH_LL_PortEnabled>
}
 800d058:	bf00      	nop
 800d05a:	3708      	adds	r7, #8
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fe ff5d 	bl	800bf2e <USBH_LL_PortDisabled>
}
 800d074:	bf00      	nop
 800d076:	3708      	adds	r7, #8
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d12a      	bne.n	800d0e4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d08e:	4a18      	ldr	r2, [pc, #96]	; (800d0f0 <USBH_LL_Init+0x74>)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	4a15      	ldr	r2, [pc, #84]	; (800d0f0 <USBH_LL_Init+0x74>)
 800d09a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d09e:	4b14      	ldr	r3, [pc, #80]	; (800d0f0 <USBH_LL_Init+0x74>)
 800d0a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d0a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d0a6:	4b12      	ldr	r3, [pc, #72]	; (800d0f0 <USBH_LL_Init+0x74>)
 800d0a8:	2208      	movs	r2, #8
 800d0aa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d0ac:	4b10      	ldr	r3, [pc, #64]	; (800d0f0 <USBH_LL_Init+0x74>)
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d0b2:	4b0f      	ldr	r3, [pc, #60]	; (800d0f0 <USBH_LL_Init+0x74>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d0b8:	4b0d      	ldr	r3, [pc, #52]	; (800d0f0 <USBH_LL_Init+0x74>)
 800d0ba:	2202      	movs	r2, #2
 800d0bc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d0be:	4b0c      	ldr	r3, [pc, #48]	; (800d0f0 <USBH_LL_Init+0x74>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d0c4:	480a      	ldr	r0, [pc, #40]	; (800d0f0 <USBH_LL_Init+0x74>)
 800d0c6:	f7f5 ffb8 	bl	800303a <HAL_HCD_Init>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d001      	beq.n	800d0d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d0d0:	f7f4 fc94 	bl	80019fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d0d4:	4806      	ldr	r0, [pc, #24]	; (800d0f0 <USBH_LL_Init+0x74>)
 800d0d6:	f7f6 fc19 	bl	800390c <HAL_HCD_GetCurrentFrame>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7fe fede 	bl	800bea0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3708      	adds	r7, #8
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	20000bc0 	.word	0x20000bc0

0800d0f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d100:	2300      	movs	r3, #0
 800d102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7f6 fb86 	bl	800381c <HAL_HCD_Start>
 800d110:	4603      	mov	r3, r0
 800d112:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d114:	7bfb      	ldrb	r3, [r7, #15]
 800d116:	4618      	mov	r0, r3
 800d118:	f000 f95e 	bl	800d3d8 <USBH_Get_USB_Status>
 800d11c:	4603      	mov	r3, r0
 800d11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d120:	7bbb      	ldrb	r3, [r7, #14]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b084      	sub	sp, #16
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d132:	2300      	movs	r3, #0
 800d134:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d136:	2300      	movs	r3, #0
 800d138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d140:	4618      	mov	r0, r3
 800d142:	f7f6 fb8e 	bl	8003862 <HAL_HCD_Stop>
 800d146:	4603      	mov	r3, r0
 800d148:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f000 f943 	bl	800d3d8 <USBH_Get_USB_Status>
 800d152:	4603      	mov	r3, r0
 800d154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d156:	7bbb      	ldrb	r3, [r7, #14]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d168:	2301      	movs	r3, #1
 800d16a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d172:	4618      	mov	r0, r3
 800d174:	f7f6 fbd8 	bl	8003928 <HAL_HCD_GetCurrentSpeed>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d00c      	beq.n	800d198 <USBH_LL_GetSpeed+0x38>
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d80d      	bhi.n	800d19e <USBH_LL_GetSpeed+0x3e>
 800d182:	2b00      	cmp	r3, #0
 800d184:	d002      	beq.n	800d18c <USBH_LL_GetSpeed+0x2c>
 800d186:	2b01      	cmp	r3, #1
 800d188:	d003      	beq.n	800d192 <USBH_LL_GetSpeed+0x32>
 800d18a:	e008      	b.n	800d19e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d18c:	2300      	movs	r3, #0
 800d18e:	73fb      	strb	r3, [r7, #15]
    break;
 800d190:	e008      	b.n	800d1a4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d192:	2301      	movs	r3, #1
 800d194:	73fb      	strb	r3, [r7, #15]
    break;
 800d196:	e005      	b.n	800d1a4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d198:	2302      	movs	r3, #2
 800d19a:	73fb      	strb	r3, [r7, #15]
    break;
 800d19c:	e002      	b.n	800d1a4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a2:	bf00      	nop
  }
  return  speed;
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b084      	sub	sp, #16
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7f6 fb69 	bl	800389c <HAL_HCD_ResetPort>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d1ce:	7bfb      	ldrb	r3, [r7, #15]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f000 f901 	bl	800d3d8 <USBH_Get_USB_Status>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d1f6:	78fa      	ldrb	r2, [r7, #3]
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7f6 fb71 	bl	80038e2 <HAL_HCD_HC_GetXferCount>
 800d200:	4603      	mov	r3, r0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d20a:	b590      	push	{r4, r7, lr}
 800d20c:	b089      	sub	sp, #36	; 0x24
 800d20e:	af04      	add	r7, sp, #16
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	4608      	mov	r0, r1
 800d214:	4611      	mov	r1, r2
 800d216:	461a      	mov	r2, r3
 800d218:	4603      	mov	r3, r0
 800d21a:	70fb      	strb	r3, [r7, #3]
 800d21c:	460b      	mov	r3, r1
 800d21e:	70bb      	strb	r3, [r7, #2]
 800d220:	4613      	mov	r3, r2
 800d222:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d228:	2300      	movs	r3, #0
 800d22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d232:	787c      	ldrb	r4, [r7, #1]
 800d234:	78ba      	ldrb	r2, [r7, #2]
 800d236:	78f9      	ldrb	r1, [r7, #3]
 800d238:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d23a:	9302      	str	r3, [sp, #8]
 800d23c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d240:	9301      	str	r3, [sp, #4]
 800d242:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	4623      	mov	r3, r4
 800d24a:	f7f5 ff5d 	bl	8003108 <HAL_HCD_HC_Init>
 800d24e:	4603      	mov	r3, r0
 800d250:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d252:	7bfb      	ldrb	r3, [r7, #15]
 800d254:	4618      	mov	r0, r3
 800d256:	f000 f8bf 	bl	800d3d8 <USBH_Get_USB_Status>
 800d25a:	4603      	mov	r3, r0
 800d25c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d25e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d260:	4618      	mov	r0, r3
 800d262:	3714      	adds	r7, #20
 800d264:	46bd      	mov	sp, r7
 800d266:	bd90      	pop	{r4, r7, pc}

0800d268 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	460b      	mov	r3, r1
 800d272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d274:	2300      	movs	r3, #0
 800d276:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d278:	2300      	movs	r3, #0
 800d27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d282:	78fa      	ldrb	r2, [r7, #3]
 800d284:	4611      	mov	r1, r2
 800d286:	4618      	mov	r0, r3
 800d288:	f7f5 fff6 	bl	8003278 <HAL_HCD_HC_Halt>
 800d28c:	4603      	mov	r3, r0
 800d28e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d290:	7bfb      	ldrb	r3, [r7, #15]
 800d292:	4618      	mov	r0, r3
 800d294:	f000 f8a0 	bl	800d3d8 <USBH_Get_USB_Status>
 800d298:	4603      	mov	r3, r0
 800d29a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d29c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d2a6:	b590      	push	{r4, r7, lr}
 800d2a8:	b089      	sub	sp, #36	; 0x24
 800d2aa:	af04      	add	r7, sp, #16
 800d2ac:	6078      	str	r0, [r7, #4]
 800d2ae:	4608      	mov	r0, r1
 800d2b0:	4611      	mov	r1, r2
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	70fb      	strb	r3, [r7, #3]
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	70bb      	strb	r3, [r7, #2]
 800d2bc:	4613      	mov	r3, r2
 800d2be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d2ce:	787c      	ldrb	r4, [r7, #1]
 800d2d0:	78ba      	ldrb	r2, [r7, #2]
 800d2d2:	78f9      	ldrb	r1, [r7, #3]
 800d2d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d2d8:	9303      	str	r3, [sp, #12]
 800d2da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d2dc:	9302      	str	r3, [sp, #8]
 800d2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e0:	9301      	str	r3, [sp, #4]
 800d2e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	4623      	mov	r3, r4
 800d2ea:	f7f5 ffe9 	bl	80032c0 <HAL_HCD_HC_SubmitRequest>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d2f2:	7bfb      	ldrb	r3, [r7, #15]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f000 f86f 	bl	800d3d8 <USBH_Get_USB_Status>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3714      	adds	r7, #20
 800d304:	46bd      	mov	sp, r7
 800d306:	bd90      	pop	{r4, r7, pc}

0800d308 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	460b      	mov	r3, r1
 800d312:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d31a:	78fa      	ldrb	r2, [r7, #3]
 800d31c:	4611      	mov	r1, r2
 800d31e:	4618      	mov	r0, r3
 800d320:	f7f6 faca 	bl	80038b8 <HAL_HCD_HC_GetURBState>
 800d324:	4603      	mov	r3, r0
}
 800d326:	4618      	mov	r0, r3
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b082      	sub	sp, #8
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	460b      	mov	r3, r1
 800d338:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d340:	2b01      	cmp	r3, #1
 800d342:	d103      	bne.n	800d34c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d344:	78fb      	ldrb	r3, [r7, #3]
 800d346:	4618      	mov	r0, r3
 800d348:	f000 f872 	bl	800d430 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d34c:	20c8      	movs	r0, #200	; 0xc8
 800d34e:	f7f4 ff87 	bl	8002260 <HAL_Delay>
  return USBH_OK;
 800d352:	2300      	movs	r3, #0
}
 800d354:	4618      	mov	r0, r3
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	70fb      	strb	r3, [r7, #3]
 800d368:	4613      	mov	r3, r2
 800d36a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d372:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d374:	78fa      	ldrb	r2, [r7, #3]
 800d376:	68f9      	ldr	r1, [r7, #12]
 800d378:	4613      	mov	r3, r2
 800d37a:	011b      	lsls	r3, r3, #4
 800d37c:	1a9b      	subs	r3, r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	440b      	add	r3, r1
 800d382:	3317      	adds	r3, #23
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00a      	beq.n	800d3a0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d38a:	78fa      	ldrb	r2, [r7, #3]
 800d38c:	68f9      	ldr	r1, [r7, #12]
 800d38e:	4613      	mov	r3, r2
 800d390:	011b      	lsls	r3, r3, #4
 800d392:	1a9b      	subs	r3, r3, r2
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	440b      	add	r3, r1
 800d398:	333c      	adds	r3, #60	; 0x3c
 800d39a:	78ba      	ldrb	r2, [r7, #2]
 800d39c:	701a      	strb	r2, [r3, #0]
 800d39e:	e009      	b.n	800d3b4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d3a0:	78fa      	ldrb	r2, [r7, #3]
 800d3a2:	68f9      	ldr	r1, [r7, #12]
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	011b      	lsls	r3, r3, #4
 800d3a8:	1a9b      	subs	r3, r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	440b      	add	r3, r1
 800d3ae:	333d      	adds	r3, #61	; 0x3d
 800d3b0:	78ba      	ldrb	r2, [r7, #2]
 800d3b2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3714      	adds	r7, #20
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b082      	sub	sp, #8
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7f4 ff48 	bl	8002260 <HAL_Delay>
}
 800d3d0:	bf00      	nop
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	4603      	mov	r3, r0
 800d3e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d3e6:	79fb      	ldrb	r3, [r7, #7]
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	d817      	bhi.n	800d41c <USBH_Get_USB_Status+0x44>
 800d3ec:	a201      	add	r2, pc, #4	; (adr r2, 800d3f4 <USBH_Get_USB_Status+0x1c>)
 800d3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f2:	bf00      	nop
 800d3f4:	0800d405 	.word	0x0800d405
 800d3f8:	0800d40b 	.word	0x0800d40b
 800d3fc:	0800d411 	.word	0x0800d411
 800d400:	0800d417 	.word	0x0800d417
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d404:	2300      	movs	r3, #0
 800d406:	73fb      	strb	r3, [r7, #15]
    break;
 800d408:	e00b      	b.n	800d422 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d40a:	2302      	movs	r3, #2
 800d40c:	73fb      	strb	r3, [r7, #15]
    break;
 800d40e:	e008      	b.n	800d422 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d410:	2301      	movs	r3, #1
 800d412:	73fb      	strb	r3, [r7, #15]
    break;
 800d414:	e005      	b.n	800d422 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d416:	2302      	movs	r3, #2
 800d418:	73fb      	strb	r3, [r7, #15]
    break;
 800d41a:	e002      	b.n	800d422 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d41c:	2302      	movs	r3, #2
 800d41e:	73fb      	strb	r3, [r7, #15]
    break;
 800d420:	bf00      	nop
  }
  return usb_status;
 800d422:	7bfb      	ldrb	r3, [r7, #15]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3714      	adds	r7, #20
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	4603      	mov	r3, r0
 800d438:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d43a:	79fb      	ldrb	r3, [r7, #7]
 800d43c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d43e:	79fb      	ldrb	r3, [r7, #7]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d102      	bne.n	800d44a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800d444:	2300      	movs	r3, #0
 800d446:	73fb      	strb	r3, [r7, #15]
 800d448:	e001      	b.n	800d44e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800d44a:	2301      	movs	r3, #1
 800d44c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d44e:	7bfb      	ldrb	r3, [r7, #15]
 800d450:	461a      	mov	r2, r3
 800d452:	2101      	movs	r1, #1
 800d454:	4803      	ldr	r0, [pc, #12]	; (800d464 <MX_DriverVbusFS+0x34>)
 800d456:	f7f5 fdd7 	bl	8003008 <HAL_GPIO_WritePin>
}
 800d45a:	bf00      	nop
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	40020800 	.word	0x40020800

0800d468 <malloc>:
 800d468:	4b02      	ldr	r3, [pc, #8]	; (800d474 <malloc+0xc>)
 800d46a:	4601      	mov	r1, r0
 800d46c:	6818      	ldr	r0, [r3, #0]
 800d46e:	f000 b82b 	b.w	800d4c8 <_malloc_r>
 800d472:	bf00      	nop
 800d474:	20000084 	.word	0x20000084

0800d478 <free>:
 800d478:	4b02      	ldr	r3, [pc, #8]	; (800d484 <free+0xc>)
 800d47a:	4601      	mov	r1, r0
 800d47c:	6818      	ldr	r0, [r3, #0]
 800d47e:	f001 bfd9 	b.w	800f434 <_free_r>
 800d482:	bf00      	nop
 800d484:	20000084 	.word	0x20000084

0800d488 <sbrk_aligned>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	4e0e      	ldr	r6, [pc, #56]	; (800d4c4 <sbrk_aligned+0x3c>)
 800d48c:	460c      	mov	r4, r1
 800d48e:	6831      	ldr	r1, [r6, #0]
 800d490:	4605      	mov	r5, r0
 800d492:	b911      	cbnz	r1, 800d49a <sbrk_aligned+0x12>
 800d494:	f001 f8f0 	bl	800e678 <_sbrk_r>
 800d498:	6030      	str	r0, [r6, #0]
 800d49a:	4621      	mov	r1, r4
 800d49c:	4628      	mov	r0, r5
 800d49e:	f001 f8eb 	bl	800e678 <_sbrk_r>
 800d4a2:	1c43      	adds	r3, r0, #1
 800d4a4:	d00a      	beq.n	800d4bc <sbrk_aligned+0x34>
 800d4a6:	1cc4      	adds	r4, r0, #3
 800d4a8:	f024 0403 	bic.w	r4, r4, #3
 800d4ac:	42a0      	cmp	r0, r4
 800d4ae:	d007      	beq.n	800d4c0 <sbrk_aligned+0x38>
 800d4b0:	1a21      	subs	r1, r4, r0
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	f001 f8e0 	bl	800e678 <_sbrk_r>
 800d4b8:	3001      	adds	r0, #1
 800d4ba:	d101      	bne.n	800d4c0 <sbrk_aligned+0x38>
 800d4bc:	f04f 34ff 	mov.w	r4, #4294967295
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	bd70      	pop	{r4, r5, r6, pc}
 800d4c4:	20000fa4 	.word	0x20000fa4

0800d4c8 <_malloc_r>:
 800d4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4cc:	1ccd      	adds	r5, r1, #3
 800d4ce:	f025 0503 	bic.w	r5, r5, #3
 800d4d2:	3508      	adds	r5, #8
 800d4d4:	2d0c      	cmp	r5, #12
 800d4d6:	bf38      	it	cc
 800d4d8:	250c      	movcc	r5, #12
 800d4da:	2d00      	cmp	r5, #0
 800d4dc:	4607      	mov	r7, r0
 800d4de:	db01      	blt.n	800d4e4 <_malloc_r+0x1c>
 800d4e0:	42a9      	cmp	r1, r5
 800d4e2:	d905      	bls.n	800d4f0 <_malloc_r+0x28>
 800d4e4:	230c      	movs	r3, #12
 800d4e6:	603b      	str	r3, [r7, #0]
 800d4e8:	2600      	movs	r6, #0
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d5c4 <_malloc_r+0xfc>
 800d4f4:	f000 f868 	bl	800d5c8 <__malloc_lock>
 800d4f8:	f8d8 3000 	ldr.w	r3, [r8]
 800d4fc:	461c      	mov	r4, r3
 800d4fe:	bb5c      	cbnz	r4, 800d558 <_malloc_r+0x90>
 800d500:	4629      	mov	r1, r5
 800d502:	4638      	mov	r0, r7
 800d504:	f7ff ffc0 	bl	800d488 <sbrk_aligned>
 800d508:	1c43      	adds	r3, r0, #1
 800d50a:	4604      	mov	r4, r0
 800d50c:	d155      	bne.n	800d5ba <_malloc_r+0xf2>
 800d50e:	f8d8 4000 	ldr.w	r4, [r8]
 800d512:	4626      	mov	r6, r4
 800d514:	2e00      	cmp	r6, #0
 800d516:	d145      	bne.n	800d5a4 <_malloc_r+0xdc>
 800d518:	2c00      	cmp	r4, #0
 800d51a:	d048      	beq.n	800d5ae <_malloc_r+0xe6>
 800d51c:	6823      	ldr	r3, [r4, #0]
 800d51e:	4631      	mov	r1, r6
 800d520:	4638      	mov	r0, r7
 800d522:	eb04 0903 	add.w	r9, r4, r3
 800d526:	f001 f8a7 	bl	800e678 <_sbrk_r>
 800d52a:	4581      	cmp	r9, r0
 800d52c:	d13f      	bne.n	800d5ae <_malloc_r+0xe6>
 800d52e:	6821      	ldr	r1, [r4, #0]
 800d530:	1a6d      	subs	r5, r5, r1
 800d532:	4629      	mov	r1, r5
 800d534:	4638      	mov	r0, r7
 800d536:	f7ff ffa7 	bl	800d488 <sbrk_aligned>
 800d53a:	3001      	adds	r0, #1
 800d53c:	d037      	beq.n	800d5ae <_malloc_r+0xe6>
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	442b      	add	r3, r5
 800d542:	6023      	str	r3, [r4, #0]
 800d544:	f8d8 3000 	ldr.w	r3, [r8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d038      	beq.n	800d5be <_malloc_r+0xf6>
 800d54c:	685a      	ldr	r2, [r3, #4]
 800d54e:	42a2      	cmp	r2, r4
 800d550:	d12b      	bne.n	800d5aa <_malloc_r+0xe2>
 800d552:	2200      	movs	r2, #0
 800d554:	605a      	str	r2, [r3, #4]
 800d556:	e00f      	b.n	800d578 <_malloc_r+0xb0>
 800d558:	6822      	ldr	r2, [r4, #0]
 800d55a:	1b52      	subs	r2, r2, r5
 800d55c:	d41f      	bmi.n	800d59e <_malloc_r+0xd6>
 800d55e:	2a0b      	cmp	r2, #11
 800d560:	d917      	bls.n	800d592 <_malloc_r+0xca>
 800d562:	1961      	adds	r1, r4, r5
 800d564:	42a3      	cmp	r3, r4
 800d566:	6025      	str	r5, [r4, #0]
 800d568:	bf18      	it	ne
 800d56a:	6059      	strne	r1, [r3, #4]
 800d56c:	6863      	ldr	r3, [r4, #4]
 800d56e:	bf08      	it	eq
 800d570:	f8c8 1000 	streq.w	r1, [r8]
 800d574:	5162      	str	r2, [r4, r5]
 800d576:	604b      	str	r3, [r1, #4]
 800d578:	4638      	mov	r0, r7
 800d57a:	f104 060b 	add.w	r6, r4, #11
 800d57e:	f000 f829 	bl	800d5d4 <__malloc_unlock>
 800d582:	f026 0607 	bic.w	r6, r6, #7
 800d586:	1d23      	adds	r3, r4, #4
 800d588:	1af2      	subs	r2, r6, r3
 800d58a:	d0ae      	beq.n	800d4ea <_malloc_r+0x22>
 800d58c:	1b9b      	subs	r3, r3, r6
 800d58e:	50a3      	str	r3, [r4, r2]
 800d590:	e7ab      	b.n	800d4ea <_malloc_r+0x22>
 800d592:	42a3      	cmp	r3, r4
 800d594:	6862      	ldr	r2, [r4, #4]
 800d596:	d1dd      	bne.n	800d554 <_malloc_r+0x8c>
 800d598:	f8c8 2000 	str.w	r2, [r8]
 800d59c:	e7ec      	b.n	800d578 <_malloc_r+0xb0>
 800d59e:	4623      	mov	r3, r4
 800d5a0:	6864      	ldr	r4, [r4, #4]
 800d5a2:	e7ac      	b.n	800d4fe <_malloc_r+0x36>
 800d5a4:	4634      	mov	r4, r6
 800d5a6:	6876      	ldr	r6, [r6, #4]
 800d5a8:	e7b4      	b.n	800d514 <_malloc_r+0x4c>
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	e7cc      	b.n	800d548 <_malloc_r+0x80>
 800d5ae:	230c      	movs	r3, #12
 800d5b0:	603b      	str	r3, [r7, #0]
 800d5b2:	4638      	mov	r0, r7
 800d5b4:	f000 f80e 	bl	800d5d4 <__malloc_unlock>
 800d5b8:	e797      	b.n	800d4ea <_malloc_r+0x22>
 800d5ba:	6025      	str	r5, [r4, #0]
 800d5bc:	e7dc      	b.n	800d578 <_malloc_r+0xb0>
 800d5be:	605b      	str	r3, [r3, #4]
 800d5c0:	deff      	udf	#255	; 0xff
 800d5c2:	bf00      	nop
 800d5c4:	20000fa0 	.word	0x20000fa0

0800d5c8 <__malloc_lock>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	; (800d5d0 <__malloc_lock+0x8>)
 800d5ca:	f001 b8a2 	b.w	800e712 <__retarget_lock_acquire_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	200010e8 	.word	0x200010e8

0800d5d4 <__malloc_unlock>:
 800d5d4:	4801      	ldr	r0, [pc, #4]	; (800d5dc <__malloc_unlock+0x8>)
 800d5d6:	f001 b89d 	b.w	800e714 <__retarget_lock_release_recursive>
 800d5da:	bf00      	nop
 800d5dc:	200010e8 	.word	0x200010e8

0800d5e0 <__cvt>:
 800d5e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e4:	ec55 4b10 	vmov	r4, r5, d0
 800d5e8:	2d00      	cmp	r5, #0
 800d5ea:	460e      	mov	r6, r1
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	462b      	mov	r3, r5
 800d5f0:	bfbb      	ittet	lt
 800d5f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d5f6:	461d      	movlt	r5, r3
 800d5f8:	2300      	movge	r3, #0
 800d5fa:	232d      	movlt	r3, #45	; 0x2d
 800d5fc:	700b      	strb	r3, [r1, #0]
 800d5fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d600:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d604:	4691      	mov	r9, r2
 800d606:	f023 0820 	bic.w	r8, r3, #32
 800d60a:	bfbc      	itt	lt
 800d60c:	4622      	movlt	r2, r4
 800d60e:	4614      	movlt	r4, r2
 800d610:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d614:	d005      	beq.n	800d622 <__cvt+0x42>
 800d616:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d61a:	d100      	bne.n	800d61e <__cvt+0x3e>
 800d61c:	3601      	adds	r6, #1
 800d61e:	2102      	movs	r1, #2
 800d620:	e000      	b.n	800d624 <__cvt+0x44>
 800d622:	2103      	movs	r1, #3
 800d624:	ab03      	add	r3, sp, #12
 800d626:	9301      	str	r3, [sp, #4]
 800d628:	ab02      	add	r3, sp, #8
 800d62a:	9300      	str	r3, [sp, #0]
 800d62c:	ec45 4b10 	vmov	d0, r4, r5
 800d630:	4653      	mov	r3, sl
 800d632:	4632      	mov	r2, r6
 800d634:	f001 f90c 	bl	800e850 <_dtoa_r>
 800d638:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d63c:	4607      	mov	r7, r0
 800d63e:	d102      	bne.n	800d646 <__cvt+0x66>
 800d640:	f019 0f01 	tst.w	r9, #1
 800d644:	d022      	beq.n	800d68c <__cvt+0xac>
 800d646:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d64a:	eb07 0906 	add.w	r9, r7, r6
 800d64e:	d110      	bne.n	800d672 <__cvt+0x92>
 800d650:	783b      	ldrb	r3, [r7, #0]
 800d652:	2b30      	cmp	r3, #48	; 0x30
 800d654:	d10a      	bne.n	800d66c <__cvt+0x8c>
 800d656:	2200      	movs	r2, #0
 800d658:	2300      	movs	r3, #0
 800d65a:	4620      	mov	r0, r4
 800d65c:	4629      	mov	r1, r5
 800d65e:	f7f3 fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 800d662:	b918      	cbnz	r0, 800d66c <__cvt+0x8c>
 800d664:	f1c6 0601 	rsb	r6, r6, #1
 800d668:	f8ca 6000 	str.w	r6, [sl]
 800d66c:	f8da 3000 	ldr.w	r3, [sl]
 800d670:	4499      	add	r9, r3
 800d672:	2200      	movs	r2, #0
 800d674:	2300      	movs	r3, #0
 800d676:	4620      	mov	r0, r4
 800d678:	4629      	mov	r1, r5
 800d67a:	f7f3 fa25 	bl	8000ac8 <__aeabi_dcmpeq>
 800d67e:	b108      	cbz	r0, 800d684 <__cvt+0xa4>
 800d680:	f8cd 900c 	str.w	r9, [sp, #12]
 800d684:	2230      	movs	r2, #48	; 0x30
 800d686:	9b03      	ldr	r3, [sp, #12]
 800d688:	454b      	cmp	r3, r9
 800d68a:	d307      	bcc.n	800d69c <__cvt+0xbc>
 800d68c:	9b03      	ldr	r3, [sp, #12]
 800d68e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d690:	1bdb      	subs	r3, r3, r7
 800d692:	4638      	mov	r0, r7
 800d694:	6013      	str	r3, [r2, #0]
 800d696:	b004      	add	sp, #16
 800d698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d69c:	1c59      	adds	r1, r3, #1
 800d69e:	9103      	str	r1, [sp, #12]
 800d6a0:	701a      	strb	r2, [r3, #0]
 800d6a2:	e7f0      	b.n	800d686 <__cvt+0xa6>

0800d6a4 <__exponent>:
 800d6a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2900      	cmp	r1, #0
 800d6aa:	bfb8      	it	lt
 800d6ac:	4249      	neglt	r1, r1
 800d6ae:	f803 2b02 	strb.w	r2, [r3], #2
 800d6b2:	bfb4      	ite	lt
 800d6b4:	222d      	movlt	r2, #45	; 0x2d
 800d6b6:	222b      	movge	r2, #43	; 0x2b
 800d6b8:	2909      	cmp	r1, #9
 800d6ba:	7042      	strb	r2, [r0, #1]
 800d6bc:	dd2a      	ble.n	800d714 <__exponent+0x70>
 800d6be:	f10d 0207 	add.w	r2, sp, #7
 800d6c2:	4617      	mov	r7, r2
 800d6c4:	260a      	movs	r6, #10
 800d6c6:	4694      	mov	ip, r2
 800d6c8:	fb91 f5f6 	sdiv	r5, r1, r6
 800d6cc:	fb06 1415 	mls	r4, r6, r5, r1
 800d6d0:	3430      	adds	r4, #48	; 0x30
 800d6d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d6d6:	460c      	mov	r4, r1
 800d6d8:	2c63      	cmp	r4, #99	; 0x63
 800d6da:	f102 32ff 	add.w	r2, r2, #4294967295
 800d6de:	4629      	mov	r1, r5
 800d6e0:	dcf1      	bgt.n	800d6c6 <__exponent+0x22>
 800d6e2:	3130      	adds	r1, #48	; 0x30
 800d6e4:	f1ac 0402 	sub.w	r4, ip, #2
 800d6e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d6ec:	1c41      	adds	r1, r0, #1
 800d6ee:	4622      	mov	r2, r4
 800d6f0:	42ba      	cmp	r2, r7
 800d6f2:	d30a      	bcc.n	800d70a <__exponent+0x66>
 800d6f4:	f10d 0209 	add.w	r2, sp, #9
 800d6f8:	eba2 020c 	sub.w	r2, r2, ip
 800d6fc:	42bc      	cmp	r4, r7
 800d6fe:	bf88      	it	hi
 800d700:	2200      	movhi	r2, #0
 800d702:	4413      	add	r3, r2
 800d704:	1a18      	subs	r0, r3, r0
 800d706:	b003      	add	sp, #12
 800d708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d70a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d70e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d712:	e7ed      	b.n	800d6f0 <__exponent+0x4c>
 800d714:	2330      	movs	r3, #48	; 0x30
 800d716:	3130      	adds	r1, #48	; 0x30
 800d718:	7083      	strb	r3, [r0, #2]
 800d71a:	70c1      	strb	r1, [r0, #3]
 800d71c:	1d03      	adds	r3, r0, #4
 800d71e:	e7f1      	b.n	800d704 <__exponent+0x60>

0800d720 <_printf_float>:
 800d720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d724:	ed2d 8b02 	vpush	{d8}
 800d728:	b08d      	sub	sp, #52	; 0x34
 800d72a:	460c      	mov	r4, r1
 800d72c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d730:	4616      	mov	r6, r2
 800d732:	461f      	mov	r7, r3
 800d734:	4605      	mov	r5, r0
 800d736:	f000 ff67 	bl	800e608 <_localeconv_r>
 800d73a:	f8d0 a000 	ldr.w	sl, [r0]
 800d73e:	4650      	mov	r0, sl
 800d740:	f7f2 fd96 	bl	8000270 <strlen>
 800d744:	2300      	movs	r3, #0
 800d746:	930a      	str	r3, [sp, #40]	; 0x28
 800d748:	6823      	ldr	r3, [r4, #0]
 800d74a:	9305      	str	r3, [sp, #20]
 800d74c:	f8d8 3000 	ldr.w	r3, [r8]
 800d750:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d754:	3307      	adds	r3, #7
 800d756:	f023 0307 	bic.w	r3, r3, #7
 800d75a:	f103 0208 	add.w	r2, r3, #8
 800d75e:	f8c8 2000 	str.w	r2, [r8]
 800d762:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d766:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d76a:	9307      	str	r3, [sp, #28]
 800d76c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d770:	ee08 0a10 	vmov	s16, r0
 800d774:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d778:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d77c:	4b9e      	ldr	r3, [pc, #632]	; (800d9f8 <_printf_float+0x2d8>)
 800d77e:	f04f 32ff 	mov.w	r2, #4294967295
 800d782:	f7f3 f9d3 	bl	8000b2c <__aeabi_dcmpun>
 800d786:	bb88      	cbnz	r0, 800d7ec <_printf_float+0xcc>
 800d788:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d78c:	4b9a      	ldr	r3, [pc, #616]	; (800d9f8 <_printf_float+0x2d8>)
 800d78e:	f04f 32ff 	mov.w	r2, #4294967295
 800d792:	f7f3 f9ad 	bl	8000af0 <__aeabi_dcmple>
 800d796:	bb48      	cbnz	r0, 800d7ec <_printf_float+0xcc>
 800d798:	2200      	movs	r2, #0
 800d79a:	2300      	movs	r3, #0
 800d79c:	4640      	mov	r0, r8
 800d79e:	4649      	mov	r1, r9
 800d7a0:	f7f3 f99c 	bl	8000adc <__aeabi_dcmplt>
 800d7a4:	b110      	cbz	r0, 800d7ac <_printf_float+0x8c>
 800d7a6:	232d      	movs	r3, #45	; 0x2d
 800d7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7ac:	4a93      	ldr	r2, [pc, #588]	; (800d9fc <_printf_float+0x2dc>)
 800d7ae:	4b94      	ldr	r3, [pc, #592]	; (800da00 <_printf_float+0x2e0>)
 800d7b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d7b4:	bf94      	ite	ls
 800d7b6:	4690      	movls	r8, r2
 800d7b8:	4698      	movhi	r8, r3
 800d7ba:	2303      	movs	r3, #3
 800d7bc:	6123      	str	r3, [r4, #16]
 800d7be:	9b05      	ldr	r3, [sp, #20]
 800d7c0:	f023 0304 	bic.w	r3, r3, #4
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	f04f 0900 	mov.w	r9, #0
 800d7ca:	9700      	str	r7, [sp, #0]
 800d7cc:	4633      	mov	r3, r6
 800d7ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800d7d0:	4621      	mov	r1, r4
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	f000 f9da 	bl	800db8c <_printf_common>
 800d7d8:	3001      	adds	r0, #1
 800d7da:	f040 8090 	bne.w	800d8fe <_printf_float+0x1de>
 800d7de:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e2:	b00d      	add	sp, #52	; 0x34
 800d7e4:	ecbd 8b02 	vpop	{d8}
 800d7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ec:	4642      	mov	r2, r8
 800d7ee:	464b      	mov	r3, r9
 800d7f0:	4640      	mov	r0, r8
 800d7f2:	4649      	mov	r1, r9
 800d7f4:	f7f3 f99a 	bl	8000b2c <__aeabi_dcmpun>
 800d7f8:	b140      	cbz	r0, 800d80c <_printf_float+0xec>
 800d7fa:	464b      	mov	r3, r9
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	bfbc      	itt	lt
 800d800:	232d      	movlt	r3, #45	; 0x2d
 800d802:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d806:	4a7f      	ldr	r2, [pc, #508]	; (800da04 <_printf_float+0x2e4>)
 800d808:	4b7f      	ldr	r3, [pc, #508]	; (800da08 <_printf_float+0x2e8>)
 800d80a:	e7d1      	b.n	800d7b0 <_printf_float+0x90>
 800d80c:	6863      	ldr	r3, [r4, #4]
 800d80e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d812:	9206      	str	r2, [sp, #24]
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	d13f      	bne.n	800d898 <_printf_float+0x178>
 800d818:	2306      	movs	r3, #6
 800d81a:	6063      	str	r3, [r4, #4]
 800d81c:	9b05      	ldr	r3, [sp, #20]
 800d81e:	6861      	ldr	r1, [r4, #4]
 800d820:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d824:	2300      	movs	r3, #0
 800d826:	9303      	str	r3, [sp, #12]
 800d828:	ab0a      	add	r3, sp, #40	; 0x28
 800d82a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d82e:	ab09      	add	r3, sp, #36	; 0x24
 800d830:	ec49 8b10 	vmov	d0, r8, r9
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	6022      	str	r2, [r4, #0]
 800d838:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d83c:	4628      	mov	r0, r5
 800d83e:	f7ff fecf 	bl	800d5e0 <__cvt>
 800d842:	9b06      	ldr	r3, [sp, #24]
 800d844:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d846:	2b47      	cmp	r3, #71	; 0x47
 800d848:	4680      	mov	r8, r0
 800d84a:	d108      	bne.n	800d85e <_printf_float+0x13e>
 800d84c:	1cc8      	adds	r0, r1, #3
 800d84e:	db02      	blt.n	800d856 <_printf_float+0x136>
 800d850:	6863      	ldr	r3, [r4, #4]
 800d852:	4299      	cmp	r1, r3
 800d854:	dd41      	ble.n	800d8da <_printf_float+0x1ba>
 800d856:	f1ab 0302 	sub.w	r3, fp, #2
 800d85a:	fa5f fb83 	uxtb.w	fp, r3
 800d85e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d862:	d820      	bhi.n	800d8a6 <_printf_float+0x186>
 800d864:	3901      	subs	r1, #1
 800d866:	465a      	mov	r2, fp
 800d868:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d86c:	9109      	str	r1, [sp, #36]	; 0x24
 800d86e:	f7ff ff19 	bl	800d6a4 <__exponent>
 800d872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d874:	1813      	adds	r3, r2, r0
 800d876:	2a01      	cmp	r2, #1
 800d878:	4681      	mov	r9, r0
 800d87a:	6123      	str	r3, [r4, #16]
 800d87c:	dc02      	bgt.n	800d884 <_printf_float+0x164>
 800d87e:	6822      	ldr	r2, [r4, #0]
 800d880:	07d2      	lsls	r2, r2, #31
 800d882:	d501      	bpl.n	800d888 <_printf_float+0x168>
 800d884:	3301      	adds	r3, #1
 800d886:	6123      	str	r3, [r4, #16]
 800d888:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d09c      	beq.n	800d7ca <_printf_float+0xaa>
 800d890:	232d      	movs	r3, #45	; 0x2d
 800d892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d896:	e798      	b.n	800d7ca <_printf_float+0xaa>
 800d898:	9a06      	ldr	r2, [sp, #24]
 800d89a:	2a47      	cmp	r2, #71	; 0x47
 800d89c:	d1be      	bne.n	800d81c <_printf_float+0xfc>
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1bc      	bne.n	800d81c <_printf_float+0xfc>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e7b9      	b.n	800d81a <_printf_float+0xfa>
 800d8a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d8aa:	d118      	bne.n	800d8de <_printf_float+0x1be>
 800d8ac:	2900      	cmp	r1, #0
 800d8ae:	6863      	ldr	r3, [r4, #4]
 800d8b0:	dd0b      	ble.n	800d8ca <_printf_float+0x1aa>
 800d8b2:	6121      	str	r1, [r4, #16]
 800d8b4:	b913      	cbnz	r3, 800d8bc <_printf_float+0x19c>
 800d8b6:	6822      	ldr	r2, [r4, #0]
 800d8b8:	07d0      	lsls	r0, r2, #31
 800d8ba:	d502      	bpl.n	800d8c2 <_printf_float+0x1a2>
 800d8bc:	3301      	adds	r3, #1
 800d8be:	440b      	add	r3, r1
 800d8c0:	6123      	str	r3, [r4, #16]
 800d8c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800d8c4:	f04f 0900 	mov.w	r9, #0
 800d8c8:	e7de      	b.n	800d888 <_printf_float+0x168>
 800d8ca:	b913      	cbnz	r3, 800d8d2 <_printf_float+0x1b2>
 800d8cc:	6822      	ldr	r2, [r4, #0]
 800d8ce:	07d2      	lsls	r2, r2, #31
 800d8d0:	d501      	bpl.n	800d8d6 <_printf_float+0x1b6>
 800d8d2:	3302      	adds	r3, #2
 800d8d4:	e7f4      	b.n	800d8c0 <_printf_float+0x1a0>
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e7f2      	b.n	800d8c0 <_printf_float+0x1a0>
 800d8da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8e0:	4299      	cmp	r1, r3
 800d8e2:	db05      	blt.n	800d8f0 <_printf_float+0x1d0>
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	6121      	str	r1, [r4, #16]
 800d8e8:	07d8      	lsls	r0, r3, #31
 800d8ea:	d5ea      	bpl.n	800d8c2 <_printf_float+0x1a2>
 800d8ec:	1c4b      	adds	r3, r1, #1
 800d8ee:	e7e7      	b.n	800d8c0 <_printf_float+0x1a0>
 800d8f0:	2900      	cmp	r1, #0
 800d8f2:	bfd4      	ite	le
 800d8f4:	f1c1 0202 	rsble	r2, r1, #2
 800d8f8:	2201      	movgt	r2, #1
 800d8fa:	4413      	add	r3, r2
 800d8fc:	e7e0      	b.n	800d8c0 <_printf_float+0x1a0>
 800d8fe:	6823      	ldr	r3, [r4, #0]
 800d900:	055a      	lsls	r2, r3, #21
 800d902:	d407      	bmi.n	800d914 <_printf_float+0x1f4>
 800d904:	6923      	ldr	r3, [r4, #16]
 800d906:	4642      	mov	r2, r8
 800d908:	4631      	mov	r1, r6
 800d90a:	4628      	mov	r0, r5
 800d90c:	47b8      	blx	r7
 800d90e:	3001      	adds	r0, #1
 800d910:	d12c      	bne.n	800d96c <_printf_float+0x24c>
 800d912:	e764      	b.n	800d7de <_printf_float+0xbe>
 800d914:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d918:	f240 80e0 	bls.w	800dadc <_printf_float+0x3bc>
 800d91c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d920:	2200      	movs	r2, #0
 800d922:	2300      	movs	r3, #0
 800d924:	f7f3 f8d0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d928:	2800      	cmp	r0, #0
 800d92a:	d034      	beq.n	800d996 <_printf_float+0x276>
 800d92c:	4a37      	ldr	r2, [pc, #220]	; (800da0c <_printf_float+0x2ec>)
 800d92e:	2301      	movs	r3, #1
 800d930:	4631      	mov	r1, r6
 800d932:	4628      	mov	r0, r5
 800d934:	47b8      	blx	r7
 800d936:	3001      	adds	r0, #1
 800d938:	f43f af51 	beq.w	800d7de <_printf_float+0xbe>
 800d93c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d940:	429a      	cmp	r2, r3
 800d942:	db02      	blt.n	800d94a <_printf_float+0x22a>
 800d944:	6823      	ldr	r3, [r4, #0]
 800d946:	07d8      	lsls	r0, r3, #31
 800d948:	d510      	bpl.n	800d96c <_printf_float+0x24c>
 800d94a:	ee18 3a10 	vmov	r3, s16
 800d94e:	4652      	mov	r2, sl
 800d950:	4631      	mov	r1, r6
 800d952:	4628      	mov	r0, r5
 800d954:	47b8      	blx	r7
 800d956:	3001      	adds	r0, #1
 800d958:	f43f af41 	beq.w	800d7de <_printf_float+0xbe>
 800d95c:	f04f 0800 	mov.w	r8, #0
 800d960:	f104 091a 	add.w	r9, r4, #26
 800d964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d966:	3b01      	subs	r3, #1
 800d968:	4543      	cmp	r3, r8
 800d96a:	dc09      	bgt.n	800d980 <_printf_float+0x260>
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	079b      	lsls	r3, r3, #30
 800d970:	f100 8107 	bmi.w	800db82 <_printf_float+0x462>
 800d974:	68e0      	ldr	r0, [r4, #12]
 800d976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d978:	4298      	cmp	r0, r3
 800d97a:	bfb8      	it	lt
 800d97c:	4618      	movlt	r0, r3
 800d97e:	e730      	b.n	800d7e2 <_printf_float+0xc2>
 800d980:	2301      	movs	r3, #1
 800d982:	464a      	mov	r2, r9
 800d984:	4631      	mov	r1, r6
 800d986:	4628      	mov	r0, r5
 800d988:	47b8      	blx	r7
 800d98a:	3001      	adds	r0, #1
 800d98c:	f43f af27 	beq.w	800d7de <_printf_float+0xbe>
 800d990:	f108 0801 	add.w	r8, r8, #1
 800d994:	e7e6      	b.n	800d964 <_printf_float+0x244>
 800d996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d998:	2b00      	cmp	r3, #0
 800d99a:	dc39      	bgt.n	800da10 <_printf_float+0x2f0>
 800d99c:	4a1b      	ldr	r2, [pc, #108]	; (800da0c <_printf_float+0x2ec>)
 800d99e:	2301      	movs	r3, #1
 800d9a0:	4631      	mov	r1, r6
 800d9a2:	4628      	mov	r0, r5
 800d9a4:	47b8      	blx	r7
 800d9a6:	3001      	adds	r0, #1
 800d9a8:	f43f af19 	beq.w	800d7de <_printf_float+0xbe>
 800d9ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	d102      	bne.n	800d9ba <_printf_float+0x29a>
 800d9b4:	6823      	ldr	r3, [r4, #0]
 800d9b6:	07d9      	lsls	r1, r3, #31
 800d9b8:	d5d8      	bpl.n	800d96c <_printf_float+0x24c>
 800d9ba:	ee18 3a10 	vmov	r3, s16
 800d9be:	4652      	mov	r2, sl
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	47b8      	blx	r7
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	f43f af09 	beq.w	800d7de <_printf_float+0xbe>
 800d9cc:	f04f 0900 	mov.w	r9, #0
 800d9d0:	f104 0a1a 	add.w	sl, r4, #26
 800d9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9d6:	425b      	negs	r3, r3
 800d9d8:	454b      	cmp	r3, r9
 800d9da:	dc01      	bgt.n	800d9e0 <_printf_float+0x2c0>
 800d9dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9de:	e792      	b.n	800d906 <_printf_float+0x1e6>
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	4652      	mov	r2, sl
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	47b8      	blx	r7
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	f43f aef7 	beq.w	800d7de <_printf_float+0xbe>
 800d9f0:	f109 0901 	add.w	r9, r9, #1
 800d9f4:	e7ee      	b.n	800d9d4 <_printf_float+0x2b4>
 800d9f6:	bf00      	nop
 800d9f8:	7fefffff 	.word	0x7fefffff
 800d9fc:	080125cc 	.word	0x080125cc
 800da00:	080125d0 	.word	0x080125d0
 800da04:	080125d4 	.word	0x080125d4
 800da08:	080125d8 	.word	0x080125d8
 800da0c:	08012968 	.word	0x08012968
 800da10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da14:	429a      	cmp	r2, r3
 800da16:	bfa8      	it	ge
 800da18:	461a      	movge	r2, r3
 800da1a:	2a00      	cmp	r2, #0
 800da1c:	4691      	mov	r9, r2
 800da1e:	dc37      	bgt.n	800da90 <_printf_float+0x370>
 800da20:	f04f 0b00 	mov.w	fp, #0
 800da24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da28:	f104 021a 	add.w	r2, r4, #26
 800da2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da2e:	9305      	str	r3, [sp, #20]
 800da30:	eba3 0309 	sub.w	r3, r3, r9
 800da34:	455b      	cmp	r3, fp
 800da36:	dc33      	bgt.n	800daa0 <_printf_float+0x380>
 800da38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da3c:	429a      	cmp	r2, r3
 800da3e:	db3b      	blt.n	800dab8 <_printf_float+0x398>
 800da40:	6823      	ldr	r3, [r4, #0]
 800da42:	07da      	lsls	r2, r3, #31
 800da44:	d438      	bmi.n	800dab8 <_printf_float+0x398>
 800da46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da4a:	eba2 0903 	sub.w	r9, r2, r3
 800da4e:	9b05      	ldr	r3, [sp, #20]
 800da50:	1ad2      	subs	r2, r2, r3
 800da52:	4591      	cmp	r9, r2
 800da54:	bfa8      	it	ge
 800da56:	4691      	movge	r9, r2
 800da58:	f1b9 0f00 	cmp.w	r9, #0
 800da5c:	dc35      	bgt.n	800daca <_printf_float+0x3aa>
 800da5e:	f04f 0800 	mov.w	r8, #0
 800da62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da66:	f104 0a1a 	add.w	sl, r4, #26
 800da6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da6e:	1a9b      	subs	r3, r3, r2
 800da70:	eba3 0309 	sub.w	r3, r3, r9
 800da74:	4543      	cmp	r3, r8
 800da76:	f77f af79 	ble.w	800d96c <_printf_float+0x24c>
 800da7a:	2301      	movs	r3, #1
 800da7c:	4652      	mov	r2, sl
 800da7e:	4631      	mov	r1, r6
 800da80:	4628      	mov	r0, r5
 800da82:	47b8      	blx	r7
 800da84:	3001      	adds	r0, #1
 800da86:	f43f aeaa 	beq.w	800d7de <_printf_float+0xbe>
 800da8a:	f108 0801 	add.w	r8, r8, #1
 800da8e:	e7ec      	b.n	800da6a <_printf_float+0x34a>
 800da90:	4613      	mov	r3, r2
 800da92:	4631      	mov	r1, r6
 800da94:	4642      	mov	r2, r8
 800da96:	4628      	mov	r0, r5
 800da98:	47b8      	blx	r7
 800da9a:	3001      	adds	r0, #1
 800da9c:	d1c0      	bne.n	800da20 <_printf_float+0x300>
 800da9e:	e69e      	b.n	800d7de <_printf_float+0xbe>
 800daa0:	2301      	movs	r3, #1
 800daa2:	4631      	mov	r1, r6
 800daa4:	4628      	mov	r0, r5
 800daa6:	9205      	str	r2, [sp, #20]
 800daa8:	47b8      	blx	r7
 800daaa:	3001      	adds	r0, #1
 800daac:	f43f ae97 	beq.w	800d7de <_printf_float+0xbe>
 800dab0:	9a05      	ldr	r2, [sp, #20]
 800dab2:	f10b 0b01 	add.w	fp, fp, #1
 800dab6:	e7b9      	b.n	800da2c <_printf_float+0x30c>
 800dab8:	ee18 3a10 	vmov	r3, s16
 800dabc:	4652      	mov	r2, sl
 800dabe:	4631      	mov	r1, r6
 800dac0:	4628      	mov	r0, r5
 800dac2:	47b8      	blx	r7
 800dac4:	3001      	adds	r0, #1
 800dac6:	d1be      	bne.n	800da46 <_printf_float+0x326>
 800dac8:	e689      	b.n	800d7de <_printf_float+0xbe>
 800daca:	9a05      	ldr	r2, [sp, #20]
 800dacc:	464b      	mov	r3, r9
 800dace:	4442      	add	r2, r8
 800dad0:	4631      	mov	r1, r6
 800dad2:	4628      	mov	r0, r5
 800dad4:	47b8      	blx	r7
 800dad6:	3001      	adds	r0, #1
 800dad8:	d1c1      	bne.n	800da5e <_printf_float+0x33e>
 800dada:	e680      	b.n	800d7de <_printf_float+0xbe>
 800dadc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dade:	2a01      	cmp	r2, #1
 800dae0:	dc01      	bgt.n	800dae6 <_printf_float+0x3c6>
 800dae2:	07db      	lsls	r3, r3, #31
 800dae4:	d53a      	bpl.n	800db5c <_printf_float+0x43c>
 800dae6:	2301      	movs	r3, #1
 800dae8:	4642      	mov	r2, r8
 800daea:	4631      	mov	r1, r6
 800daec:	4628      	mov	r0, r5
 800daee:	47b8      	blx	r7
 800daf0:	3001      	adds	r0, #1
 800daf2:	f43f ae74 	beq.w	800d7de <_printf_float+0xbe>
 800daf6:	ee18 3a10 	vmov	r3, s16
 800dafa:	4652      	mov	r2, sl
 800dafc:	4631      	mov	r1, r6
 800dafe:	4628      	mov	r0, r5
 800db00:	47b8      	blx	r7
 800db02:	3001      	adds	r0, #1
 800db04:	f43f ae6b 	beq.w	800d7de <_printf_float+0xbe>
 800db08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db0c:	2200      	movs	r2, #0
 800db0e:	2300      	movs	r3, #0
 800db10:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800db14:	f7f2 ffd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800db18:	b9d8      	cbnz	r0, 800db52 <_printf_float+0x432>
 800db1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800db1e:	f108 0201 	add.w	r2, r8, #1
 800db22:	4631      	mov	r1, r6
 800db24:	4628      	mov	r0, r5
 800db26:	47b8      	blx	r7
 800db28:	3001      	adds	r0, #1
 800db2a:	d10e      	bne.n	800db4a <_printf_float+0x42a>
 800db2c:	e657      	b.n	800d7de <_printf_float+0xbe>
 800db2e:	2301      	movs	r3, #1
 800db30:	4652      	mov	r2, sl
 800db32:	4631      	mov	r1, r6
 800db34:	4628      	mov	r0, r5
 800db36:	47b8      	blx	r7
 800db38:	3001      	adds	r0, #1
 800db3a:	f43f ae50 	beq.w	800d7de <_printf_float+0xbe>
 800db3e:	f108 0801 	add.w	r8, r8, #1
 800db42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db44:	3b01      	subs	r3, #1
 800db46:	4543      	cmp	r3, r8
 800db48:	dcf1      	bgt.n	800db2e <_printf_float+0x40e>
 800db4a:	464b      	mov	r3, r9
 800db4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db50:	e6da      	b.n	800d908 <_printf_float+0x1e8>
 800db52:	f04f 0800 	mov.w	r8, #0
 800db56:	f104 0a1a 	add.w	sl, r4, #26
 800db5a:	e7f2      	b.n	800db42 <_printf_float+0x422>
 800db5c:	2301      	movs	r3, #1
 800db5e:	4642      	mov	r2, r8
 800db60:	e7df      	b.n	800db22 <_printf_float+0x402>
 800db62:	2301      	movs	r3, #1
 800db64:	464a      	mov	r2, r9
 800db66:	4631      	mov	r1, r6
 800db68:	4628      	mov	r0, r5
 800db6a:	47b8      	blx	r7
 800db6c:	3001      	adds	r0, #1
 800db6e:	f43f ae36 	beq.w	800d7de <_printf_float+0xbe>
 800db72:	f108 0801 	add.w	r8, r8, #1
 800db76:	68e3      	ldr	r3, [r4, #12]
 800db78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db7a:	1a5b      	subs	r3, r3, r1
 800db7c:	4543      	cmp	r3, r8
 800db7e:	dcf0      	bgt.n	800db62 <_printf_float+0x442>
 800db80:	e6f8      	b.n	800d974 <_printf_float+0x254>
 800db82:	f04f 0800 	mov.w	r8, #0
 800db86:	f104 0919 	add.w	r9, r4, #25
 800db8a:	e7f4      	b.n	800db76 <_printf_float+0x456>

0800db8c <_printf_common>:
 800db8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db90:	4616      	mov	r6, r2
 800db92:	4699      	mov	r9, r3
 800db94:	688a      	ldr	r2, [r1, #8]
 800db96:	690b      	ldr	r3, [r1, #16]
 800db98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db9c:	4293      	cmp	r3, r2
 800db9e:	bfb8      	it	lt
 800dba0:	4613      	movlt	r3, r2
 800dba2:	6033      	str	r3, [r6, #0]
 800dba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dba8:	4607      	mov	r7, r0
 800dbaa:	460c      	mov	r4, r1
 800dbac:	b10a      	cbz	r2, 800dbb2 <_printf_common+0x26>
 800dbae:	3301      	adds	r3, #1
 800dbb0:	6033      	str	r3, [r6, #0]
 800dbb2:	6823      	ldr	r3, [r4, #0]
 800dbb4:	0699      	lsls	r1, r3, #26
 800dbb6:	bf42      	ittt	mi
 800dbb8:	6833      	ldrmi	r3, [r6, #0]
 800dbba:	3302      	addmi	r3, #2
 800dbbc:	6033      	strmi	r3, [r6, #0]
 800dbbe:	6825      	ldr	r5, [r4, #0]
 800dbc0:	f015 0506 	ands.w	r5, r5, #6
 800dbc4:	d106      	bne.n	800dbd4 <_printf_common+0x48>
 800dbc6:	f104 0a19 	add.w	sl, r4, #25
 800dbca:	68e3      	ldr	r3, [r4, #12]
 800dbcc:	6832      	ldr	r2, [r6, #0]
 800dbce:	1a9b      	subs	r3, r3, r2
 800dbd0:	42ab      	cmp	r3, r5
 800dbd2:	dc26      	bgt.n	800dc22 <_printf_common+0x96>
 800dbd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dbd8:	1e13      	subs	r3, r2, #0
 800dbda:	6822      	ldr	r2, [r4, #0]
 800dbdc:	bf18      	it	ne
 800dbde:	2301      	movne	r3, #1
 800dbe0:	0692      	lsls	r2, r2, #26
 800dbe2:	d42b      	bmi.n	800dc3c <_printf_common+0xb0>
 800dbe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dbe8:	4649      	mov	r1, r9
 800dbea:	4638      	mov	r0, r7
 800dbec:	47c0      	blx	r8
 800dbee:	3001      	adds	r0, #1
 800dbf0:	d01e      	beq.n	800dc30 <_printf_common+0xa4>
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	6922      	ldr	r2, [r4, #16]
 800dbf6:	f003 0306 	and.w	r3, r3, #6
 800dbfa:	2b04      	cmp	r3, #4
 800dbfc:	bf02      	ittt	eq
 800dbfe:	68e5      	ldreq	r5, [r4, #12]
 800dc00:	6833      	ldreq	r3, [r6, #0]
 800dc02:	1aed      	subeq	r5, r5, r3
 800dc04:	68a3      	ldr	r3, [r4, #8]
 800dc06:	bf0c      	ite	eq
 800dc08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc0c:	2500      	movne	r5, #0
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	bfc4      	itt	gt
 800dc12:	1a9b      	subgt	r3, r3, r2
 800dc14:	18ed      	addgt	r5, r5, r3
 800dc16:	2600      	movs	r6, #0
 800dc18:	341a      	adds	r4, #26
 800dc1a:	42b5      	cmp	r5, r6
 800dc1c:	d11a      	bne.n	800dc54 <_printf_common+0xc8>
 800dc1e:	2000      	movs	r0, #0
 800dc20:	e008      	b.n	800dc34 <_printf_common+0xa8>
 800dc22:	2301      	movs	r3, #1
 800dc24:	4652      	mov	r2, sl
 800dc26:	4649      	mov	r1, r9
 800dc28:	4638      	mov	r0, r7
 800dc2a:	47c0      	blx	r8
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	d103      	bne.n	800dc38 <_printf_common+0xac>
 800dc30:	f04f 30ff 	mov.w	r0, #4294967295
 800dc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc38:	3501      	adds	r5, #1
 800dc3a:	e7c6      	b.n	800dbca <_printf_common+0x3e>
 800dc3c:	18e1      	adds	r1, r4, r3
 800dc3e:	1c5a      	adds	r2, r3, #1
 800dc40:	2030      	movs	r0, #48	; 0x30
 800dc42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc46:	4422      	add	r2, r4
 800dc48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc50:	3302      	adds	r3, #2
 800dc52:	e7c7      	b.n	800dbe4 <_printf_common+0x58>
 800dc54:	2301      	movs	r3, #1
 800dc56:	4622      	mov	r2, r4
 800dc58:	4649      	mov	r1, r9
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	47c0      	blx	r8
 800dc5e:	3001      	adds	r0, #1
 800dc60:	d0e6      	beq.n	800dc30 <_printf_common+0xa4>
 800dc62:	3601      	adds	r6, #1
 800dc64:	e7d9      	b.n	800dc1a <_printf_common+0x8e>
	...

0800dc68 <_printf_i>:
 800dc68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc6c:	7e0f      	ldrb	r7, [r1, #24]
 800dc6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc70:	2f78      	cmp	r7, #120	; 0x78
 800dc72:	4691      	mov	r9, r2
 800dc74:	4680      	mov	r8, r0
 800dc76:	460c      	mov	r4, r1
 800dc78:	469a      	mov	sl, r3
 800dc7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dc7e:	d807      	bhi.n	800dc90 <_printf_i+0x28>
 800dc80:	2f62      	cmp	r7, #98	; 0x62
 800dc82:	d80a      	bhi.n	800dc9a <_printf_i+0x32>
 800dc84:	2f00      	cmp	r7, #0
 800dc86:	f000 80d4 	beq.w	800de32 <_printf_i+0x1ca>
 800dc8a:	2f58      	cmp	r7, #88	; 0x58
 800dc8c:	f000 80c0 	beq.w	800de10 <_printf_i+0x1a8>
 800dc90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc98:	e03a      	b.n	800dd10 <_printf_i+0xa8>
 800dc9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc9e:	2b15      	cmp	r3, #21
 800dca0:	d8f6      	bhi.n	800dc90 <_printf_i+0x28>
 800dca2:	a101      	add	r1, pc, #4	; (adr r1, 800dca8 <_printf_i+0x40>)
 800dca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dca8:	0800dd01 	.word	0x0800dd01
 800dcac:	0800dd15 	.word	0x0800dd15
 800dcb0:	0800dc91 	.word	0x0800dc91
 800dcb4:	0800dc91 	.word	0x0800dc91
 800dcb8:	0800dc91 	.word	0x0800dc91
 800dcbc:	0800dc91 	.word	0x0800dc91
 800dcc0:	0800dd15 	.word	0x0800dd15
 800dcc4:	0800dc91 	.word	0x0800dc91
 800dcc8:	0800dc91 	.word	0x0800dc91
 800dccc:	0800dc91 	.word	0x0800dc91
 800dcd0:	0800dc91 	.word	0x0800dc91
 800dcd4:	0800de19 	.word	0x0800de19
 800dcd8:	0800dd41 	.word	0x0800dd41
 800dcdc:	0800ddd3 	.word	0x0800ddd3
 800dce0:	0800dc91 	.word	0x0800dc91
 800dce4:	0800dc91 	.word	0x0800dc91
 800dce8:	0800de3b 	.word	0x0800de3b
 800dcec:	0800dc91 	.word	0x0800dc91
 800dcf0:	0800dd41 	.word	0x0800dd41
 800dcf4:	0800dc91 	.word	0x0800dc91
 800dcf8:	0800dc91 	.word	0x0800dc91
 800dcfc:	0800dddb 	.word	0x0800dddb
 800dd00:	682b      	ldr	r3, [r5, #0]
 800dd02:	1d1a      	adds	r2, r3, #4
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	602a      	str	r2, [r5, #0]
 800dd08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd10:	2301      	movs	r3, #1
 800dd12:	e09f      	b.n	800de54 <_printf_i+0x1ec>
 800dd14:	6820      	ldr	r0, [r4, #0]
 800dd16:	682b      	ldr	r3, [r5, #0]
 800dd18:	0607      	lsls	r7, r0, #24
 800dd1a:	f103 0104 	add.w	r1, r3, #4
 800dd1e:	6029      	str	r1, [r5, #0]
 800dd20:	d501      	bpl.n	800dd26 <_printf_i+0xbe>
 800dd22:	681e      	ldr	r6, [r3, #0]
 800dd24:	e003      	b.n	800dd2e <_printf_i+0xc6>
 800dd26:	0646      	lsls	r6, r0, #25
 800dd28:	d5fb      	bpl.n	800dd22 <_printf_i+0xba>
 800dd2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dd2e:	2e00      	cmp	r6, #0
 800dd30:	da03      	bge.n	800dd3a <_printf_i+0xd2>
 800dd32:	232d      	movs	r3, #45	; 0x2d
 800dd34:	4276      	negs	r6, r6
 800dd36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd3a:	485a      	ldr	r0, [pc, #360]	; (800dea4 <_printf_i+0x23c>)
 800dd3c:	230a      	movs	r3, #10
 800dd3e:	e012      	b.n	800dd66 <_printf_i+0xfe>
 800dd40:	682b      	ldr	r3, [r5, #0]
 800dd42:	6820      	ldr	r0, [r4, #0]
 800dd44:	1d19      	adds	r1, r3, #4
 800dd46:	6029      	str	r1, [r5, #0]
 800dd48:	0605      	lsls	r5, r0, #24
 800dd4a:	d501      	bpl.n	800dd50 <_printf_i+0xe8>
 800dd4c:	681e      	ldr	r6, [r3, #0]
 800dd4e:	e002      	b.n	800dd56 <_printf_i+0xee>
 800dd50:	0641      	lsls	r1, r0, #25
 800dd52:	d5fb      	bpl.n	800dd4c <_printf_i+0xe4>
 800dd54:	881e      	ldrh	r6, [r3, #0]
 800dd56:	4853      	ldr	r0, [pc, #332]	; (800dea4 <_printf_i+0x23c>)
 800dd58:	2f6f      	cmp	r7, #111	; 0x6f
 800dd5a:	bf0c      	ite	eq
 800dd5c:	2308      	moveq	r3, #8
 800dd5e:	230a      	movne	r3, #10
 800dd60:	2100      	movs	r1, #0
 800dd62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd66:	6865      	ldr	r5, [r4, #4]
 800dd68:	60a5      	str	r5, [r4, #8]
 800dd6a:	2d00      	cmp	r5, #0
 800dd6c:	bfa2      	ittt	ge
 800dd6e:	6821      	ldrge	r1, [r4, #0]
 800dd70:	f021 0104 	bicge.w	r1, r1, #4
 800dd74:	6021      	strge	r1, [r4, #0]
 800dd76:	b90e      	cbnz	r6, 800dd7c <_printf_i+0x114>
 800dd78:	2d00      	cmp	r5, #0
 800dd7a:	d04b      	beq.n	800de14 <_printf_i+0x1ac>
 800dd7c:	4615      	mov	r5, r2
 800dd7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800dd82:	fb03 6711 	mls	r7, r3, r1, r6
 800dd86:	5dc7      	ldrb	r7, [r0, r7]
 800dd88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dd8c:	4637      	mov	r7, r6
 800dd8e:	42bb      	cmp	r3, r7
 800dd90:	460e      	mov	r6, r1
 800dd92:	d9f4      	bls.n	800dd7e <_printf_i+0x116>
 800dd94:	2b08      	cmp	r3, #8
 800dd96:	d10b      	bne.n	800ddb0 <_printf_i+0x148>
 800dd98:	6823      	ldr	r3, [r4, #0]
 800dd9a:	07de      	lsls	r6, r3, #31
 800dd9c:	d508      	bpl.n	800ddb0 <_printf_i+0x148>
 800dd9e:	6923      	ldr	r3, [r4, #16]
 800dda0:	6861      	ldr	r1, [r4, #4]
 800dda2:	4299      	cmp	r1, r3
 800dda4:	bfde      	ittt	le
 800dda6:	2330      	movle	r3, #48	; 0x30
 800dda8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ddac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ddb0:	1b52      	subs	r2, r2, r5
 800ddb2:	6122      	str	r2, [r4, #16]
 800ddb4:	f8cd a000 	str.w	sl, [sp]
 800ddb8:	464b      	mov	r3, r9
 800ddba:	aa03      	add	r2, sp, #12
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	4640      	mov	r0, r8
 800ddc0:	f7ff fee4 	bl	800db8c <_printf_common>
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	d14a      	bne.n	800de5e <_printf_i+0x1f6>
 800ddc8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddcc:	b004      	add	sp, #16
 800ddce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd2:	6823      	ldr	r3, [r4, #0]
 800ddd4:	f043 0320 	orr.w	r3, r3, #32
 800ddd8:	6023      	str	r3, [r4, #0]
 800ddda:	4833      	ldr	r0, [pc, #204]	; (800dea8 <_printf_i+0x240>)
 800dddc:	2778      	movs	r7, #120	; 0x78
 800ddde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dde2:	6823      	ldr	r3, [r4, #0]
 800dde4:	6829      	ldr	r1, [r5, #0]
 800dde6:	061f      	lsls	r7, r3, #24
 800dde8:	f851 6b04 	ldr.w	r6, [r1], #4
 800ddec:	d402      	bmi.n	800ddf4 <_printf_i+0x18c>
 800ddee:	065f      	lsls	r7, r3, #25
 800ddf0:	bf48      	it	mi
 800ddf2:	b2b6      	uxthmi	r6, r6
 800ddf4:	07df      	lsls	r7, r3, #31
 800ddf6:	bf48      	it	mi
 800ddf8:	f043 0320 	orrmi.w	r3, r3, #32
 800ddfc:	6029      	str	r1, [r5, #0]
 800ddfe:	bf48      	it	mi
 800de00:	6023      	strmi	r3, [r4, #0]
 800de02:	b91e      	cbnz	r6, 800de0c <_printf_i+0x1a4>
 800de04:	6823      	ldr	r3, [r4, #0]
 800de06:	f023 0320 	bic.w	r3, r3, #32
 800de0a:	6023      	str	r3, [r4, #0]
 800de0c:	2310      	movs	r3, #16
 800de0e:	e7a7      	b.n	800dd60 <_printf_i+0xf8>
 800de10:	4824      	ldr	r0, [pc, #144]	; (800dea4 <_printf_i+0x23c>)
 800de12:	e7e4      	b.n	800ddde <_printf_i+0x176>
 800de14:	4615      	mov	r5, r2
 800de16:	e7bd      	b.n	800dd94 <_printf_i+0x12c>
 800de18:	682b      	ldr	r3, [r5, #0]
 800de1a:	6826      	ldr	r6, [r4, #0]
 800de1c:	6961      	ldr	r1, [r4, #20]
 800de1e:	1d18      	adds	r0, r3, #4
 800de20:	6028      	str	r0, [r5, #0]
 800de22:	0635      	lsls	r5, r6, #24
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	d501      	bpl.n	800de2c <_printf_i+0x1c4>
 800de28:	6019      	str	r1, [r3, #0]
 800de2a:	e002      	b.n	800de32 <_printf_i+0x1ca>
 800de2c:	0670      	lsls	r0, r6, #25
 800de2e:	d5fb      	bpl.n	800de28 <_printf_i+0x1c0>
 800de30:	8019      	strh	r1, [r3, #0]
 800de32:	2300      	movs	r3, #0
 800de34:	6123      	str	r3, [r4, #16]
 800de36:	4615      	mov	r5, r2
 800de38:	e7bc      	b.n	800ddb4 <_printf_i+0x14c>
 800de3a:	682b      	ldr	r3, [r5, #0]
 800de3c:	1d1a      	adds	r2, r3, #4
 800de3e:	602a      	str	r2, [r5, #0]
 800de40:	681d      	ldr	r5, [r3, #0]
 800de42:	6862      	ldr	r2, [r4, #4]
 800de44:	2100      	movs	r1, #0
 800de46:	4628      	mov	r0, r5
 800de48:	f7f2 f9c2 	bl	80001d0 <memchr>
 800de4c:	b108      	cbz	r0, 800de52 <_printf_i+0x1ea>
 800de4e:	1b40      	subs	r0, r0, r5
 800de50:	6060      	str	r0, [r4, #4]
 800de52:	6863      	ldr	r3, [r4, #4]
 800de54:	6123      	str	r3, [r4, #16]
 800de56:	2300      	movs	r3, #0
 800de58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de5c:	e7aa      	b.n	800ddb4 <_printf_i+0x14c>
 800de5e:	6923      	ldr	r3, [r4, #16]
 800de60:	462a      	mov	r2, r5
 800de62:	4649      	mov	r1, r9
 800de64:	4640      	mov	r0, r8
 800de66:	47d0      	blx	sl
 800de68:	3001      	adds	r0, #1
 800de6a:	d0ad      	beq.n	800ddc8 <_printf_i+0x160>
 800de6c:	6823      	ldr	r3, [r4, #0]
 800de6e:	079b      	lsls	r3, r3, #30
 800de70:	d413      	bmi.n	800de9a <_printf_i+0x232>
 800de72:	68e0      	ldr	r0, [r4, #12]
 800de74:	9b03      	ldr	r3, [sp, #12]
 800de76:	4298      	cmp	r0, r3
 800de78:	bfb8      	it	lt
 800de7a:	4618      	movlt	r0, r3
 800de7c:	e7a6      	b.n	800ddcc <_printf_i+0x164>
 800de7e:	2301      	movs	r3, #1
 800de80:	4632      	mov	r2, r6
 800de82:	4649      	mov	r1, r9
 800de84:	4640      	mov	r0, r8
 800de86:	47d0      	blx	sl
 800de88:	3001      	adds	r0, #1
 800de8a:	d09d      	beq.n	800ddc8 <_printf_i+0x160>
 800de8c:	3501      	adds	r5, #1
 800de8e:	68e3      	ldr	r3, [r4, #12]
 800de90:	9903      	ldr	r1, [sp, #12]
 800de92:	1a5b      	subs	r3, r3, r1
 800de94:	42ab      	cmp	r3, r5
 800de96:	dcf2      	bgt.n	800de7e <_printf_i+0x216>
 800de98:	e7eb      	b.n	800de72 <_printf_i+0x20a>
 800de9a:	2500      	movs	r5, #0
 800de9c:	f104 0619 	add.w	r6, r4, #25
 800dea0:	e7f5      	b.n	800de8e <_printf_i+0x226>
 800dea2:	bf00      	nop
 800dea4:	080125dc 	.word	0x080125dc
 800dea8:	080125ed 	.word	0x080125ed

0800deac <_scanf_float>:
 800deac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb0:	b087      	sub	sp, #28
 800deb2:	4617      	mov	r7, r2
 800deb4:	9303      	str	r3, [sp, #12]
 800deb6:	688b      	ldr	r3, [r1, #8]
 800deb8:	1e5a      	subs	r2, r3, #1
 800deba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800debe:	bf83      	ittte	hi
 800dec0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dec4:	195b      	addhi	r3, r3, r5
 800dec6:	9302      	strhi	r3, [sp, #8]
 800dec8:	2300      	movls	r3, #0
 800deca:	bf86      	itte	hi
 800decc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ded0:	608b      	strhi	r3, [r1, #8]
 800ded2:	9302      	strls	r3, [sp, #8]
 800ded4:	680b      	ldr	r3, [r1, #0]
 800ded6:	468b      	mov	fp, r1
 800ded8:	2500      	movs	r5, #0
 800deda:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dede:	f84b 3b1c 	str.w	r3, [fp], #28
 800dee2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dee6:	4680      	mov	r8, r0
 800dee8:	460c      	mov	r4, r1
 800deea:	465e      	mov	r6, fp
 800deec:	46aa      	mov	sl, r5
 800deee:	46a9      	mov	r9, r5
 800def0:	9501      	str	r5, [sp, #4]
 800def2:	68a2      	ldr	r2, [r4, #8]
 800def4:	b152      	cbz	r2, 800df0c <_scanf_float+0x60>
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	2b4e      	cmp	r3, #78	; 0x4e
 800defc:	d864      	bhi.n	800dfc8 <_scanf_float+0x11c>
 800defe:	2b40      	cmp	r3, #64	; 0x40
 800df00:	d83c      	bhi.n	800df7c <_scanf_float+0xd0>
 800df02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800df06:	b2c8      	uxtb	r0, r1
 800df08:	280e      	cmp	r0, #14
 800df0a:	d93a      	bls.n	800df82 <_scanf_float+0xd6>
 800df0c:	f1b9 0f00 	cmp.w	r9, #0
 800df10:	d003      	beq.n	800df1a <_scanf_float+0x6e>
 800df12:	6823      	ldr	r3, [r4, #0]
 800df14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df1e:	f1ba 0f01 	cmp.w	sl, #1
 800df22:	f200 8113 	bhi.w	800e14c <_scanf_float+0x2a0>
 800df26:	455e      	cmp	r6, fp
 800df28:	f200 8105 	bhi.w	800e136 <_scanf_float+0x28a>
 800df2c:	2501      	movs	r5, #1
 800df2e:	4628      	mov	r0, r5
 800df30:	b007      	add	sp, #28
 800df32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800df3a:	2a0d      	cmp	r2, #13
 800df3c:	d8e6      	bhi.n	800df0c <_scanf_float+0x60>
 800df3e:	a101      	add	r1, pc, #4	; (adr r1, 800df44 <_scanf_float+0x98>)
 800df40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800df44:	0800e083 	.word	0x0800e083
 800df48:	0800df0d 	.word	0x0800df0d
 800df4c:	0800df0d 	.word	0x0800df0d
 800df50:	0800df0d 	.word	0x0800df0d
 800df54:	0800e0e3 	.word	0x0800e0e3
 800df58:	0800e0bb 	.word	0x0800e0bb
 800df5c:	0800df0d 	.word	0x0800df0d
 800df60:	0800df0d 	.word	0x0800df0d
 800df64:	0800e091 	.word	0x0800e091
 800df68:	0800df0d 	.word	0x0800df0d
 800df6c:	0800df0d 	.word	0x0800df0d
 800df70:	0800df0d 	.word	0x0800df0d
 800df74:	0800df0d 	.word	0x0800df0d
 800df78:	0800e049 	.word	0x0800e049
 800df7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800df80:	e7db      	b.n	800df3a <_scanf_float+0x8e>
 800df82:	290e      	cmp	r1, #14
 800df84:	d8c2      	bhi.n	800df0c <_scanf_float+0x60>
 800df86:	a001      	add	r0, pc, #4	; (adr r0, 800df8c <_scanf_float+0xe0>)
 800df88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800df8c:	0800e03b 	.word	0x0800e03b
 800df90:	0800df0d 	.word	0x0800df0d
 800df94:	0800e03b 	.word	0x0800e03b
 800df98:	0800e0cf 	.word	0x0800e0cf
 800df9c:	0800df0d 	.word	0x0800df0d
 800dfa0:	0800dfe9 	.word	0x0800dfe9
 800dfa4:	0800e025 	.word	0x0800e025
 800dfa8:	0800e025 	.word	0x0800e025
 800dfac:	0800e025 	.word	0x0800e025
 800dfb0:	0800e025 	.word	0x0800e025
 800dfb4:	0800e025 	.word	0x0800e025
 800dfb8:	0800e025 	.word	0x0800e025
 800dfbc:	0800e025 	.word	0x0800e025
 800dfc0:	0800e025 	.word	0x0800e025
 800dfc4:	0800e025 	.word	0x0800e025
 800dfc8:	2b6e      	cmp	r3, #110	; 0x6e
 800dfca:	d809      	bhi.n	800dfe0 <_scanf_float+0x134>
 800dfcc:	2b60      	cmp	r3, #96	; 0x60
 800dfce:	d8b2      	bhi.n	800df36 <_scanf_float+0x8a>
 800dfd0:	2b54      	cmp	r3, #84	; 0x54
 800dfd2:	d077      	beq.n	800e0c4 <_scanf_float+0x218>
 800dfd4:	2b59      	cmp	r3, #89	; 0x59
 800dfd6:	d199      	bne.n	800df0c <_scanf_float+0x60>
 800dfd8:	2d07      	cmp	r5, #7
 800dfda:	d197      	bne.n	800df0c <_scanf_float+0x60>
 800dfdc:	2508      	movs	r5, #8
 800dfde:	e029      	b.n	800e034 <_scanf_float+0x188>
 800dfe0:	2b74      	cmp	r3, #116	; 0x74
 800dfe2:	d06f      	beq.n	800e0c4 <_scanf_float+0x218>
 800dfe4:	2b79      	cmp	r3, #121	; 0x79
 800dfe6:	e7f6      	b.n	800dfd6 <_scanf_float+0x12a>
 800dfe8:	6821      	ldr	r1, [r4, #0]
 800dfea:	05c8      	lsls	r0, r1, #23
 800dfec:	d51a      	bpl.n	800e024 <_scanf_float+0x178>
 800dfee:	9b02      	ldr	r3, [sp, #8]
 800dff0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800dff4:	6021      	str	r1, [r4, #0]
 800dff6:	f109 0901 	add.w	r9, r9, #1
 800dffa:	b11b      	cbz	r3, 800e004 <_scanf_float+0x158>
 800dffc:	3b01      	subs	r3, #1
 800dffe:	3201      	adds	r2, #1
 800e000:	9302      	str	r3, [sp, #8]
 800e002:	60a2      	str	r2, [r4, #8]
 800e004:	68a3      	ldr	r3, [r4, #8]
 800e006:	3b01      	subs	r3, #1
 800e008:	60a3      	str	r3, [r4, #8]
 800e00a:	6923      	ldr	r3, [r4, #16]
 800e00c:	3301      	adds	r3, #1
 800e00e:	6123      	str	r3, [r4, #16]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	3b01      	subs	r3, #1
 800e014:	2b00      	cmp	r3, #0
 800e016:	607b      	str	r3, [r7, #4]
 800e018:	f340 8084 	ble.w	800e124 <_scanf_float+0x278>
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	3301      	adds	r3, #1
 800e020:	603b      	str	r3, [r7, #0]
 800e022:	e766      	b.n	800def2 <_scanf_float+0x46>
 800e024:	eb1a 0f05 	cmn.w	sl, r5
 800e028:	f47f af70 	bne.w	800df0c <_scanf_float+0x60>
 800e02c:	6822      	ldr	r2, [r4, #0]
 800e02e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e032:	6022      	str	r2, [r4, #0]
 800e034:	f806 3b01 	strb.w	r3, [r6], #1
 800e038:	e7e4      	b.n	800e004 <_scanf_float+0x158>
 800e03a:	6822      	ldr	r2, [r4, #0]
 800e03c:	0610      	lsls	r0, r2, #24
 800e03e:	f57f af65 	bpl.w	800df0c <_scanf_float+0x60>
 800e042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e046:	e7f4      	b.n	800e032 <_scanf_float+0x186>
 800e048:	f1ba 0f00 	cmp.w	sl, #0
 800e04c:	d10e      	bne.n	800e06c <_scanf_float+0x1c0>
 800e04e:	f1b9 0f00 	cmp.w	r9, #0
 800e052:	d10e      	bne.n	800e072 <_scanf_float+0x1c6>
 800e054:	6822      	ldr	r2, [r4, #0]
 800e056:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e05a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e05e:	d108      	bne.n	800e072 <_scanf_float+0x1c6>
 800e060:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e064:	6022      	str	r2, [r4, #0]
 800e066:	f04f 0a01 	mov.w	sl, #1
 800e06a:	e7e3      	b.n	800e034 <_scanf_float+0x188>
 800e06c:	f1ba 0f02 	cmp.w	sl, #2
 800e070:	d055      	beq.n	800e11e <_scanf_float+0x272>
 800e072:	2d01      	cmp	r5, #1
 800e074:	d002      	beq.n	800e07c <_scanf_float+0x1d0>
 800e076:	2d04      	cmp	r5, #4
 800e078:	f47f af48 	bne.w	800df0c <_scanf_float+0x60>
 800e07c:	3501      	adds	r5, #1
 800e07e:	b2ed      	uxtb	r5, r5
 800e080:	e7d8      	b.n	800e034 <_scanf_float+0x188>
 800e082:	f1ba 0f01 	cmp.w	sl, #1
 800e086:	f47f af41 	bne.w	800df0c <_scanf_float+0x60>
 800e08a:	f04f 0a02 	mov.w	sl, #2
 800e08e:	e7d1      	b.n	800e034 <_scanf_float+0x188>
 800e090:	b97d      	cbnz	r5, 800e0b2 <_scanf_float+0x206>
 800e092:	f1b9 0f00 	cmp.w	r9, #0
 800e096:	f47f af3c 	bne.w	800df12 <_scanf_float+0x66>
 800e09a:	6822      	ldr	r2, [r4, #0]
 800e09c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e0a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e0a4:	f47f af39 	bne.w	800df1a <_scanf_float+0x6e>
 800e0a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e0ac:	6022      	str	r2, [r4, #0]
 800e0ae:	2501      	movs	r5, #1
 800e0b0:	e7c0      	b.n	800e034 <_scanf_float+0x188>
 800e0b2:	2d03      	cmp	r5, #3
 800e0b4:	d0e2      	beq.n	800e07c <_scanf_float+0x1d0>
 800e0b6:	2d05      	cmp	r5, #5
 800e0b8:	e7de      	b.n	800e078 <_scanf_float+0x1cc>
 800e0ba:	2d02      	cmp	r5, #2
 800e0bc:	f47f af26 	bne.w	800df0c <_scanf_float+0x60>
 800e0c0:	2503      	movs	r5, #3
 800e0c2:	e7b7      	b.n	800e034 <_scanf_float+0x188>
 800e0c4:	2d06      	cmp	r5, #6
 800e0c6:	f47f af21 	bne.w	800df0c <_scanf_float+0x60>
 800e0ca:	2507      	movs	r5, #7
 800e0cc:	e7b2      	b.n	800e034 <_scanf_float+0x188>
 800e0ce:	6822      	ldr	r2, [r4, #0]
 800e0d0:	0591      	lsls	r1, r2, #22
 800e0d2:	f57f af1b 	bpl.w	800df0c <_scanf_float+0x60>
 800e0d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e0da:	6022      	str	r2, [r4, #0]
 800e0dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800e0e0:	e7a8      	b.n	800e034 <_scanf_float+0x188>
 800e0e2:	6822      	ldr	r2, [r4, #0]
 800e0e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e0e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e0ec:	d006      	beq.n	800e0fc <_scanf_float+0x250>
 800e0ee:	0550      	lsls	r0, r2, #21
 800e0f0:	f57f af0c 	bpl.w	800df0c <_scanf_float+0x60>
 800e0f4:	f1b9 0f00 	cmp.w	r9, #0
 800e0f8:	f43f af0f 	beq.w	800df1a <_scanf_float+0x6e>
 800e0fc:	0591      	lsls	r1, r2, #22
 800e0fe:	bf58      	it	pl
 800e100:	9901      	ldrpl	r1, [sp, #4]
 800e102:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e106:	bf58      	it	pl
 800e108:	eba9 0101 	subpl.w	r1, r9, r1
 800e10c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e110:	bf58      	it	pl
 800e112:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e116:	6022      	str	r2, [r4, #0]
 800e118:	f04f 0900 	mov.w	r9, #0
 800e11c:	e78a      	b.n	800e034 <_scanf_float+0x188>
 800e11e:	f04f 0a03 	mov.w	sl, #3
 800e122:	e787      	b.n	800e034 <_scanf_float+0x188>
 800e124:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e128:	4639      	mov	r1, r7
 800e12a:	4640      	mov	r0, r8
 800e12c:	4798      	blx	r3
 800e12e:	2800      	cmp	r0, #0
 800e130:	f43f aedf 	beq.w	800def2 <_scanf_float+0x46>
 800e134:	e6ea      	b.n	800df0c <_scanf_float+0x60>
 800e136:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e13a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e13e:	463a      	mov	r2, r7
 800e140:	4640      	mov	r0, r8
 800e142:	4798      	blx	r3
 800e144:	6923      	ldr	r3, [r4, #16]
 800e146:	3b01      	subs	r3, #1
 800e148:	6123      	str	r3, [r4, #16]
 800e14a:	e6ec      	b.n	800df26 <_scanf_float+0x7a>
 800e14c:	1e6b      	subs	r3, r5, #1
 800e14e:	2b06      	cmp	r3, #6
 800e150:	d825      	bhi.n	800e19e <_scanf_float+0x2f2>
 800e152:	2d02      	cmp	r5, #2
 800e154:	d836      	bhi.n	800e1c4 <_scanf_float+0x318>
 800e156:	455e      	cmp	r6, fp
 800e158:	f67f aee8 	bls.w	800df2c <_scanf_float+0x80>
 800e15c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e160:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e164:	463a      	mov	r2, r7
 800e166:	4640      	mov	r0, r8
 800e168:	4798      	blx	r3
 800e16a:	6923      	ldr	r3, [r4, #16]
 800e16c:	3b01      	subs	r3, #1
 800e16e:	6123      	str	r3, [r4, #16]
 800e170:	e7f1      	b.n	800e156 <_scanf_float+0x2aa>
 800e172:	9802      	ldr	r0, [sp, #8]
 800e174:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e178:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e17c:	9002      	str	r0, [sp, #8]
 800e17e:	463a      	mov	r2, r7
 800e180:	4640      	mov	r0, r8
 800e182:	4798      	blx	r3
 800e184:	6923      	ldr	r3, [r4, #16]
 800e186:	3b01      	subs	r3, #1
 800e188:	6123      	str	r3, [r4, #16]
 800e18a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e18e:	fa5f fa8a 	uxtb.w	sl, sl
 800e192:	f1ba 0f02 	cmp.w	sl, #2
 800e196:	d1ec      	bne.n	800e172 <_scanf_float+0x2c6>
 800e198:	3d03      	subs	r5, #3
 800e19a:	b2ed      	uxtb	r5, r5
 800e19c:	1b76      	subs	r6, r6, r5
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	05da      	lsls	r2, r3, #23
 800e1a2:	d52f      	bpl.n	800e204 <_scanf_float+0x358>
 800e1a4:	055b      	lsls	r3, r3, #21
 800e1a6:	d510      	bpl.n	800e1ca <_scanf_float+0x31e>
 800e1a8:	455e      	cmp	r6, fp
 800e1aa:	f67f aebf 	bls.w	800df2c <_scanf_float+0x80>
 800e1ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e1b6:	463a      	mov	r2, r7
 800e1b8:	4640      	mov	r0, r8
 800e1ba:	4798      	blx	r3
 800e1bc:	6923      	ldr	r3, [r4, #16]
 800e1be:	3b01      	subs	r3, #1
 800e1c0:	6123      	str	r3, [r4, #16]
 800e1c2:	e7f1      	b.n	800e1a8 <_scanf_float+0x2fc>
 800e1c4:	46aa      	mov	sl, r5
 800e1c6:	9602      	str	r6, [sp, #8]
 800e1c8:	e7df      	b.n	800e18a <_scanf_float+0x2de>
 800e1ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e1ce:	6923      	ldr	r3, [r4, #16]
 800e1d0:	2965      	cmp	r1, #101	; 0x65
 800e1d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e1d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800e1da:	6123      	str	r3, [r4, #16]
 800e1dc:	d00c      	beq.n	800e1f8 <_scanf_float+0x34c>
 800e1de:	2945      	cmp	r1, #69	; 0x45
 800e1e0:	d00a      	beq.n	800e1f8 <_scanf_float+0x34c>
 800e1e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1e6:	463a      	mov	r2, r7
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	4798      	blx	r3
 800e1ec:	6923      	ldr	r3, [r4, #16]
 800e1ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	1eb5      	subs	r5, r6, #2
 800e1f6:	6123      	str	r3, [r4, #16]
 800e1f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1fc:	463a      	mov	r2, r7
 800e1fe:	4640      	mov	r0, r8
 800e200:	4798      	blx	r3
 800e202:	462e      	mov	r6, r5
 800e204:	6825      	ldr	r5, [r4, #0]
 800e206:	f015 0510 	ands.w	r5, r5, #16
 800e20a:	d158      	bne.n	800e2be <_scanf_float+0x412>
 800e20c:	7035      	strb	r5, [r6, #0]
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e218:	d11c      	bne.n	800e254 <_scanf_float+0x3a8>
 800e21a:	9b01      	ldr	r3, [sp, #4]
 800e21c:	454b      	cmp	r3, r9
 800e21e:	eba3 0209 	sub.w	r2, r3, r9
 800e222:	d124      	bne.n	800e26e <_scanf_float+0x3c2>
 800e224:	2200      	movs	r2, #0
 800e226:	4659      	mov	r1, fp
 800e228:	4640      	mov	r0, r8
 800e22a:	f002 fc09 	bl	8010a40 <_strtod_r>
 800e22e:	9b03      	ldr	r3, [sp, #12]
 800e230:	6821      	ldr	r1, [r4, #0]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f011 0f02 	tst.w	r1, #2
 800e238:	ec57 6b10 	vmov	r6, r7, d0
 800e23c:	f103 0204 	add.w	r2, r3, #4
 800e240:	d020      	beq.n	800e284 <_scanf_float+0x3d8>
 800e242:	9903      	ldr	r1, [sp, #12]
 800e244:	600a      	str	r2, [r1, #0]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	e9c3 6700 	strd	r6, r7, [r3]
 800e24c:	68e3      	ldr	r3, [r4, #12]
 800e24e:	3301      	adds	r3, #1
 800e250:	60e3      	str	r3, [r4, #12]
 800e252:	e66c      	b.n	800df2e <_scanf_float+0x82>
 800e254:	9b04      	ldr	r3, [sp, #16]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d0e4      	beq.n	800e224 <_scanf_float+0x378>
 800e25a:	9905      	ldr	r1, [sp, #20]
 800e25c:	230a      	movs	r3, #10
 800e25e:	462a      	mov	r2, r5
 800e260:	3101      	adds	r1, #1
 800e262:	4640      	mov	r0, r8
 800e264:	f002 fc74 	bl	8010b50 <_strtol_r>
 800e268:	9b04      	ldr	r3, [sp, #16]
 800e26a:	9e05      	ldr	r6, [sp, #20]
 800e26c:	1ac2      	subs	r2, r0, r3
 800e26e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e272:	429e      	cmp	r6, r3
 800e274:	bf28      	it	cs
 800e276:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e27a:	4912      	ldr	r1, [pc, #72]	; (800e2c4 <_scanf_float+0x418>)
 800e27c:	4630      	mov	r0, r6
 800e27e:	f000 f8e7 	bl	800e450 <siprintf>
 800e282:	e7cf      	b.n	800e224 <_scanf_float+0x378>
 800e284:	f011 0f04 	tst.w	r1, #4
 800e288:	9903      	ldr	r1, [sp, #12]
 800e28a:	600a      	str	r2, [r1, #0]
 800e28c:	d1db      	bne.n	800e246 <_scanf_float+0x39a>
 800e28e:	f8d3 8000 	ldr.w	r8, [r3]
 800e292:	ee10 2a10 	vmov	r2, s0
 800e296:	ee10 0a10 	vmov	r0, s0
 800e29a:	463b      	mov	r3, r7
 800e29c:	4639      	mov	r1, r7
 800e29e:	f7f2 fc45 	bl	8000b2c <__aeabi_dcmpun>
 800e2a2:	b128      	cbz	r0, 800e2b0 <_scanf_float+0x404>
 800e2a4:	4808      	ldr	r0, [pc, #32]	; (800e2c8 <_scanf_float+0x41c>)
 800e2a6:	f000 fa45 	bl	800e734 <nanf>
 800e2aa:	ed88 0a00 	vstr	s0, [r8]
 800e2ae:	e7cd      	b.n	800e24c <_scanf_float+0x3a0>
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	4639      	mov	r1, r7
 800e2b4:	f7f2 fc98 	bl	8000be8 <__aeabi_d2f>
 800e2b8:	f8c8 0000 	str.w	r0, [r8]
 800e2bc:	e7c6      	b.n	800e24c <_scanf_float+0x3a0>
 800e2be:	2500      	movs	r5, #0
 800e2c0:	e635      	b.n	800df2e <_scanf_float+0x82>
 800e2c2:	bf00      	nop
 800e2c4:	080125fe 	.word	0x080125fe
 800e2c8:	080129b0 	.word	0x080129b0

0800e2cc <std>:
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	b510      	push	{r4, lr}
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	e9c0 3300 	strd	r3, r3, [r0]
 800e2d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2da:	6083      	str	r3, [r0, #8]
 800e2dc:	8181      	strh	r1, [r0, #12]
 800e2de:	6643      	str	r3, [r0, #100]	; 0x64
 800e2e0:	81c2      	strh	r2, [r0, #14]
 800e2e2:	6183      	str	r3, [r0, #24]
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	2208      	movs	r2, #8
 800e2e8:	305c      	adds	r0, #92	; 0x5c
 800e2ea:	f000 f942 	bl	800e572 <memset>
 800e2ee:	4b0d      	ldr	r3, [pc, #52]	; (800e324 <std+0x58>)
 800e2f0:	6263      	str	r3, [r4, #36]	; 0x24
 800e2f2:	4b0d      	ldr	r3, [pc, #52]	; (800e328 <std+0x5c>)
 800e2f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2f6:	4b0d      	ldr	r3, [pc, #52]	; (800e32c <std+0x60>)
 800e2f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2fa:	4b0d      	ldr	r3, [pc, #52]	; (800e330 <std+0x64>)
 800e2fc:	6323      	str	r3, [r4, #48]	; 0x30
 800e2fe:	4b0d      	ldr	r3, [pc, #52]	; (800e334 <std+0x68>)
 800e300:	6224      	str	r4, [r4, #32]
 800e302:	429c      	cmp	r4, r3
 800e304:	d006      	beq.n	800e314 <std+0x48>
 800e306:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e30a:	4294      	cmp	r4, r2
 800e30c:	d002      	beq.n	800e314 <std+0x48>
 800e30e:	33d0      	adds	r3, #208	; 0xd0
 800e310:	429c      	cmp	r4, r3
 800e312:	d105      	bne.n	800e320 <std+0x54>
 800e314:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e31c:	f000 b9f8 	b.w	800e710 <__retarget_lock_init_recursive>
 800e320:	bd10      	pop	{r4, pc}
 800e322:	bf00      	nop
 800e324:	0800e4e9 	.word	0x0800e4e9
 800e328:	0800e50f 	.word	0x0800e50f
 800e32c:	0800e547 	.word	0x0800e547
 800e330:	0800e56b 	.word	0x0800e56b
 800e334:	20000fa8 	.word	0x20000fa8

0800e338 <stdio_exit_handler>:
 800e338:	4a02      	ldr	r2, [pc, #8]	; (800e344 <stdio_exit_handler+0xc>)
 800e33a:	4903      	ldr	r1, [pc, #12]	; (800e348 <stdio_exit_handler+0x10>)
 800e33c:	4803      	ldr	r0, [pc, #12]	; (800e34c <stdio_exit_handler+0x14>)
 800e33e:	f000 b869 	b.w	800e414 <_fwalk_sglue>
 800e342:	bf00      	nop
 800e344:	2000002c 	.word	0x2000002c
 800e348:	08011551 	.word	0x08011551
 800e34c:	20000038 	.word	0x20000038

0800e350 <cleanup_stdio>:
 800e350:	6841      	ldr	r1, [r0, #4]
 800e352:	4b0c      	ldr	r3, [pc, #48]	; (800e384 <cleanup_stdio+0x34>)
 800e354:	4299      	cmp	r1, r3
 800e356:	b510      	push	{r4, lr}
 800e358:	4604      	mov	r4, r0
 800e35a:	d001      	beq.n	800e360 <cleanup_stdio+0x10>
 800e35c:	f003 f8f8 	bl	8011550 <_fflush_r>
 800e360:	68a1      	ldr	r1, [r4, #8]
 800e362:	4b09      	ldr	r3, [pc, #36]	; (800e388 <cleanup_stdio+0x38>)
 800e364:	4299      	cmp	r1, r3
 800e366:	d002      	beq.n	800e36e <cleanup_stdio+0x1e>
 800e368:	4620      	mov	r0, r4
 800e36a:	f003 f8f1 	bl	8011550 <_fflush_r>
 800e36e:	68e1      	ldr	r1, [r4, #12]
 800e370:	4b06      	ldr	r3, [pc, #24]	; (800e38c <cleanup_stdio+0x3c>)
 800e372:	4299      	cmp	r1, r3
 800e374:	d004      	beq.n	800e380 <cleanup_stdio+0x30>
 800e376:	4620      	mov	r0, r4
 800e378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e37c:	f003 b8e8 	b.w	8011550 <_fflush_r>
 800e380:	bd10      	pop	{r4, pc}
 800e382:	bf00      	nop
 800e384:	20000fa8 	.word	0x20000fa8
 800e388:	20001010 	.word	0x20001010
 800e38c:	20001078 	.word	0x20001078

0800e390 <global_stdio_init.part.0>:
 800e390:	b510      	push	{r4, lr}
 800e392:	4b0b      	ldr	r3, [pc, #44]	; (800e3c0 <global_stdio_init.part.0+0x30>)
 800e394:	4c0b      	ldr	r4, [pc, #44]	; (800e3c4 <global_stdio_init.part.0+0x34>)
 800e396:	4a0c      	ldr	r2, [pc, #48]	; (800e3c8 <global_stdio_init.part.0+0x38>)
 800e398:	601a      	str	r2, [r3, #0]
 800e39a:	4620      	mov	r0, r4
 800e39c:	2200      	movs	r2, #0
 800e39e:	2104      	movs	r1, #4
 800e3a0:	f7ff ff94 	bl	800e2cc <std>
 800e3a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	2109      	movs	r1, #9
 800e3ac:	f7ff ff8e 	bl	800e2cc <std>
 800e3b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e3b4:	2202      	movs	r2, #2
 800e3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3ba:	2112      	movs	r1, #18
 800e3bc:	f7ff bf86 	b.w	800e2cc <std>
 800e3c0:	200010e0 	.word	0x200010e0
 800e3c4:	20000fa8 	.word	0x20000fa8
 800e3c8:	0800e339 	.word	0x0800e339

0800e3cc <__sfp_lock_acquire>:
 800e3cc:	4801      	ldr	r0, [pc, #4]	; (800e3d4 <__sfp_lock_acquire+0x8>)
 800e3ce:	f000 b9a0 	b.w	800e712 <__retarget_lock_acquire_recursive>
 800e3d2:	bf00      	nop
 800e3d4:	200010e9 	.word	0x200010e9

0800e3d8 <__sfp_lock_release>:
 800e3d8:	4801      	ldr	r0, [pc, #4]	; (800e3e0 <__sfp_lock_release+0x8>)
 800e3da:	f000 b99b 	b.w	800e714 <__retarget_lock_release_recursive>
 800e3de:	bf00      	nop
 800e3e0:	200010e9 	.word	0x200010e9

0800e3e4 <__sinit>:
 800e3e4:	b510      	push	{r4, lr}
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	f7ff fff0 	bl	800e3cc <__sfp_lock_acquire>
 800e3ec:	6a23      	ldr	r3, [r4, #32]
 800e3ee:	b11b      	cbz	r3, 800e3f8 <__sinit+0x14>
 800e3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3f4:	f7ff bff0 	b.w	800e3d8 <__sfp_lock_release>
 800e3f8:	4b04      	ldr	r3, [pc, #16]	; (800e40c <__sinit+0x28>)
 800e3fa:	6223      	str	r3, [r4, #32]
 800e3fc:	4b04      	ldr	r3, [pc, #16]	; (800e410 <__sinit+0x2c>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1f5      	bne.n	800e3f0 <__sinit+0xc>
 800e404:	f7ff ffc4 	bl	800e390 <global_stdio_init.part.0>
 800e408:	e7f2      	b.n	800e3f0 <__sinit+0xc>
 800e40a:	bf00      	nop
 800e40c:	0800e351 	.word	0x0800e351
 800e410:	200010e0 	.word	0x200010e0

0800e414 <_fwalk_sglue>:
 800e414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e418:	4607      	mov	r7, r0
 800e41a:	4688      	mov	r8, r1
 800e41c:	4614      	mov	r4, r2
 800e41e:	2600      	movs	r6, #0
 800e420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e424:	f1b9 0901 	subs.w	r9, r9, #1
 800e428:	d505      	bpl.n	800e436 <_fwalk_sglue+0x22>
 800e42a:	6824      	ldr	r4, [r4, #0]
 800e42c:	2c00      	cmp	r4, #0
 800e42e:	d1f7      	bne.n	800e420 <_fwalk_sglue+0xc>
 800e430:	4630      	mov	r0, r6
 800e432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e436:	89ab      	ldrh	r3, [r5, #12]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d907      	bls.n	800e44c <_fwalk_sglue+0x38>
 800e43c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e440:	3301      	adds	r3, #1
 800e442:	d003      	beq.n	800e44c <_fwalk_sglue+0x38>
 800e444:	4629      	mov	r1, r5
 800e446:	4638      	mov	r0, r7
 800e448:	47c0      	blx	r8
 800e44a:	4306      	orrs	r6, r0
 800e44c:	3568      	adds	r5, #104	; 0x68
 800e44e:	e7e9      	b.n	800e424 <_fwalk_sglue+0x10>

0800e450 <siprintf>:
 800e450:	b40e      	push	{r1, r2, r3}
 800e452:	b500      	push	{lr}
 800e454:	b09c      	sub	sp, #112	; 0x70
 800e456:	ab1d      	add	r3, sp, #116	; 0x74
 800e458:	9002      	str	r0, [sp, #8]
 800e45a:	9006      	str	r0, [sp, #24]
 800e45c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e460:	4809      	ldr	r0, [pc, #36]	; (800e488 <siprintf+0x38>)
 800e462:	9107      	str	r1, [sp, #28]
 800e464:	9104      	str	r1, [sp, #16]
 800e466:	4909      	ldr	r1, [pc, #36]	; (800e48c <siprintf+0x3c>)
 800e468:	f853 2b04 	ldr.w	r2, [r3], #4
 800e46c:	9105      	str	r1, [sp, #20]
 800e46e:	6800      	ldr	r0, [r0, #0]
 800e470:	9301      	str	r3, [sp, #4]
 800e472:	a902      	add	r1, sp, #8
 800e474:	f002 fbc8 	bl	8010c08 <_svfiprintf_r>
 800e478:	9b02      	ldr	r3, [sp, #8]
 800e47a:	2200      	movs	r2, #0
 800e47c:	701a      	strb	r2, [r3, #0]
 800e47e:	b01c      	add	sp, #112	; 0x70
 800e480:	f85d eb04 	ldr.w	lr, [sp], #4
 800e484:	b003      	add	sp, #12
 800e486:	4770      	bx	lr
 800e488:	20000084 	.word	0x20000084
 800e48c:	ffff0208 	.word	0xffff0208

0800e490 <siscanf>:
 800e490:	b40e      	push	{r1, r2, r3}
 800e492:	b510      	push	{r4, lr}
 800e494:	b09f      	sub	sp, #124	; 0x7c
 800e496:	ac21      	add	r4, sp, #132	; 0x84
 800e498:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e49c:	f854 2b04 	ldr.w	r2, [r4], #4
 800e4a0:	9201      	str	r2, [sp, #4]
 800e4a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e4a6:	9004      	str	r0, [sp, #16]
 800e4a8:	9008      	str	r0, [sp, #32]
 800e4aa:	f7f1 fee1 	bl	8000270 <strlen>
 800e4ae:	4b0c      	ldr	r3, [pc, #48]	; (800e4e0 <siscanf+0x50>)
 800e4b0:	9005      	str	r0, [sp, #20]
 800e4b2:	9009      	str	r0, [sp, #36]	; 0x24
 800e4b4:	930d      	str	r3, [sp, #52]	; 0x34
 800e4b6:	480b      	ldr	r0, [pc, #44]	; (800e4e4 <siscanf+0x54>)
 800e4b8:	9a01      	ldr	r2, [sp, #4]
 800e4ba:	6800      	ldr	r0, [r0, #0]
 800e4bc:	9403      	str	r4, [sp, #12]
 800e4be:	2300      	movs	r3, #0
 800e4c0:	9311      	str	r3, [sp, #68]	; 0x44
 800e4c2:	9316      	str	r3, [sp, #88]	; 0x58
 800e4c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e4c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e4cc:	a904      	add	r1, sp, #16
 800e4ce:	4623      	mov	r3, r4
 800e4d0:	f002 fcf2 	bl	8010eb8 <__ssvfiscanf_r>
 800e4d4:	b01f      	add	sp, #124	; 0x7c
 800e4d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4da:	b003      	add	sp, #12
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	0800e50b 	.word	0x0800e50b
 800e4e4:	20000084 	.word	0x20000084

0800e4e8 <__sread>:
 800e4e8:	b510      	push	{r4, lr}
 800e4ea:	460c      	mov	r4, r1
 800e4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f0:	f000 f8b0 	bl	800e654 <_read_r>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	bfab      	itete	ge
 800e4f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e4fa:	89a3      	ldrhlt	r3, [r4, #12]
 800e4fc:	181b      	addge	r3, r3, r0
 800e4fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e502:	bfac      	ite	ge
 800e504:	6563      	strge	r3, [r4, #84]	; 0x54
 800e506:	81a3      	strhlt	r3, [r4, #12]
 800e508:	bd10      	pop	{r4, pc}

0800e50a <__seofread>:
 800e50a:	2000      	movs	r0, #0
 800e50c:	4770      	bx	lr

0800e50e <__swrite>:
 800e50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e512:	461f      	mov	r7, r3
 800e514:	898b      	ldrh	r3, [r1, #12]
 800e516:	05db      	lsls	r3, r3, #23
 800e518:	4605      	mov	r5, r0
 800e51a:	460c      	mov	r4, r1
 800e51c:	4616      	mov	r6, r2
 800e51e:	d505      	bpl.n	800e52c <__swrite+0x1e>
 800e520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e524:	2302      	movs	r3, #2
 800e526:	2200      	movs	r2, #0
 800e528:	f000 f882 	bl	800e630 <_lseek_r>
 800e52c:	89a3      	ldrh	r3, [r4, #12]
 800e52e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e536:	81a3      	strh	r3, [r4, #12]
 800e538:	4632      	mov	r2, r6
 800e53a:	463b      	mov	r3, r7
 800e53c:	4628      	mov	r0, r5
 800e53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e542:	f000 b8a9 	b.w	800e698 <_write_r>

0800e546 <__sseek>:
 800e546:	b510      	push	{r4, lr}
 800e548:	460c      	mov	r4, r1
 800e54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e54e:	f000 f86f 	bl	800e630 <_lseek_r>
 800e552:	1c43      	adds	r3, r0, #1
 800e554:	89a3      	ldrh	r3, [r4, #12]
 800e556:	bf15      	itete	ne
 800e558:	6560      	strne	r0, [r4, #84]	; 0x54
 800e55a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e55e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e562:	81a3      	strheq	r3, [r4, #12]
 800e564:	bf18      	it	ne
 800e566:	81a3      	strhne	r3, [r4, #12]
 800e568:	bd10      	pop	{r4, pc}

0800e56a <__sclose>:
 800e56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e56e:	f000 b84f 	b.w	800e610 <_close_r>

0800e572 <memset>:
 800e572:	4402      	add	r2, r0
 800e574:	4603      	mov	r3, r0
 800e576:	4293      	cmp	r3, r2
 800e578:	d100      	bne.n	800e57c <memset+0xa>
 800e57a:	4770      	bx	lr
 800e57c:	f803 1b01 	strb.w	r1, [r3], #1
 800e580:	e7f9      	b.n	800e576 <memset+0x4>

0800e582 <strnstr>:
 800e582:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e584:	460c      	mov	r4, r1
 800e586:	4605      	mov	r5, r0
 800e588:	4611      	mov	r1, r2
 800e58a:	4620      	mov	r0, r4
 800e58c:	9201      	str	r2, [sp, #4]
 800e58e:	f003 f8a6 	bl	80116de <strnlen>
 800e592:	9901      	ldr	r1, [sp, #4]
 800e594:	4281      	cmp	r1, r0
 800e596:	4603      	mov	r3, r0
 800e598:	d805      	bhi.n	800e5a6 <strnstr+0x24>
 800e59a:	5c22      	ldrb	r2, [r4, r0]
 800e59c:	b11a      	cbz	r2, 800e5a6 <strnstr+0x24>
 800e59e:	2400      	movs	r4, #0
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	b003      	add	sp, #12
 800e5a4:	bd30      	pop	{r4, r5, pc}
 800e5a6:	4622      	mov	r2, r4
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	f000 f80b 	bl	800e5c4 <memmem>
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d0f4      	beq.n	800e59e <strnstr+0x1c>
 800e5b4:	1b42      	subs	r2, r0, r5
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	f7f1 fe09 	bl	80001d0 <memchr>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	d1ed      	bne.n	800e59e <strnstr+0x1c>
 800e5c2:	e7ed      	b.n	800e5a0 <strnstr+0x1e>

0800e5c4 <memmem>:
 800e5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c8:	b1a3      	cbz	r3, 800e5f4 <memmem+0x30>
 800e5ca:	1ac9      	subs	r1, r1, r3
 800e5cc:	7817      	ldrb	r7, [r2, #0]
 800e5ce:	4401      	add	r1, r0
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	f103 3cff 	add.w	ip, r3, #4294967295
 800e5d6:	428c      	cmp	r4, r1
 800e5d8:	4620      	mov	r0, r4
 800e5da:	d901      	bls.n	800e5e0 <memmem+0x1c>
 800e5dc:	2000      	movs	r0, #0
 800e5de:	e009      	b.n	800e5f4 <memmem+0x30>
 800e5e0:	7805      	ldrb	r5, [r0, #0]
 800e5e2:	42bd      	cmp	r5, r7
 800e5e4:	f104 0401 	add.w	r4, r4, #1
 800e5e8:	d1f5      	bne.n	800e5d6 <memmem+0x12>
 800e5ea:	eb0c 0504 	add.w	r5, ip, r4
 800e5ee:	18d6      	adds	r6, r2, r3
 800e5f0:	42a5      	cmp	r5, r4
 800e5f2:	d101      	bne.n	800e5f8 <memmem+0x34>
 800e5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5f8:	f815 8d01 	ldrb.w	r8, [r5, #-1]!
 800e5fc:	f816 ed01 	ldrb.w	lr, [r6, #-1]!
 800e600:	45f0      	cmp	r8, lr
 800e602:	d0f5      	beq.n	800e5f0 <memmem+0x2c>
 800e604:	e7e7      	b.n	800e5d6 <memmem+0x12>
	...

0800e608 <_localeconv_r>:
 800e608:	4800      	ldr	r0, [pc, #0]	; (800e60c <_localeconv_r+0x4>)
 800e60a:	4770      	bx	lr
 800e60c:	20000178 	.word	0x20000178

0800e610 <_close_r>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	4d06      	ldr	r5, [pc, #24]	; (800e62c <_close_r+0x1c>)
 800e614:	2300      	movs	r3, #0
 800e616:	4604      	mov	r4, r0
 800e618:	4608      	mov	r0, r1
 800e61a:	602b      	str	r3, [r5, #0]
 800e61c:	f7f3 fd07 	bl	800202e <_close>
 800e620:	1c43      	adds	r3, r0, #1
 800e622:	d102      	bne.n	800e62a <_close_r+0x1a>
 800e624:	682b      	ldr	r3, [r5, #0]
 800e626:	b103      	cbz	r3, 800e62a <_close_r+0x1a>
 800e628:	6023      	str	r3, [r4, #0]
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	200010e4 	.word	0x200010e4

0800e630 <_lseek_r>:
 800e630:	b538      	push	{r3, r4, r5, lr}
 800e632:	4d07      	ldr	r5, [pc, #28]	; (800e650 <_lseek_r+0x20>)
 800e634:	4604      	mov	r4, r0
 800e636:	4608      	mov	r0, r1
 800e638:	4611      	mov	r1, r2
 800e63a:	2200      	movs	r2, #0
 800e63c:	602a      	str	r2, [r5, #0]
 800e63e:	461a      	mov	r2, r3
 800e640:	f7f3 fd1c 	bl	800207c <_lseek>
 800e644:	1c43      	adds	r3, r0, #1
 800e646:	d102      	bne.n	800e64e <_lseek_r+0x1e>
 800e648:	682b      	ldr	r3, [r5, #0]
 800e64a:	b103      	cbz	r3, 800e64e <_lseek_r+0x1e>
 800e64c:	6023      	str	r3, [r4, #0]
 800e64e:	bd38      	pop	{r3, r4, r5, pc}
 800e650:	200010e4 	.word	0x200010e4

0800e654 <_read_r>:
 800e654:	b538      	push	{r3, r4, r5, lr}
 800e656:	4d07      	ldr	r5, [pc, #28]	; (800e674 <_read_r+0x20>)
 800e658:	4604      	mov	r4, r0
 800e65a:	4608      	mov	r0, r1
 800e65c:	4611      	mov	r1, r2
 800e65e:	2200      	movs	r2, #0
 800e660:	602a      	str	r2, [r5, #0]
 800e662:	461a      	mov	r2, r3
 800e664:	f7f3 fcaa 	bl	8001fbc <_read>
 800e668:	1c43      	adds	r3, r0, #1
 800e66a:	d102      	bne.n	800e672 <_read_r+0x1e>
 800e66c:	682b      	ldr	r3, [r5, #0]
 800e66e:	b103      	cbz	r3, 800e672 <_read_r+0x1e>
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	bd38      	pop	{r3, r4, r5, pc}
 800e674:	200010e4 	.word	0x200010e4

0800e678 <_sbrk_r>:
 800e678:	b538      	push	{r3, r4, r5, lr}
 800e67a:	4d06      	ldr	r5, [pc, #24]	; (800e694 <_sbrk_r+0x1c>)
 800e67c:	2300      	movs	r3, #0
 800e67e:	4604      	mov	r4, r0
 800e680:	4608      	mov	r0, r1
 800e682:	602b      	str	r3, [r5, #0]
 800e684:	f7f3 fd08 	bl	8002098 <_sbrk>
 800e688:	1c43      	adds	r3, r0, #1
 800e68a:	d102      	bne.n	800e692 <_sbrk_r+0x1a>
 800e68c:	682b      	ldr	r3, [r5, #0]
 800e68e:	b103      	cbz	r3, 800e692 <_sbrk_r+0x1a>
 800e690:	6023      	str	r3, [r4, #0]
 800e692:	bd38      	pop	{r3, r4, r5, pc}
 800e694:	200010e4 	.word	0x200010e4

0800e698 <_write_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	4d07      	ldr	r5, [pc, #28]	; (800e6b8 <_write_r+0x20>)
 800e69c:	4604      	mov	r4, r0
 800e69e:	4608      	mov	r0, r1
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	602a      	str	r2, [r5, #0]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	f7f3 fca5 	bl	8001ff6 <_write>
 800e6ac:	1c43      	adds	r3, r0, #1
 800e6ae:	d102      	bne.n	800e6b6 <_write_r+0x1e>
 800e6b0:	682b      	ldr	r3, [r5, #0]
 800e6b2:	b103      	cbz	r3, 800e6b6 <_write_r+0x1e>
 800e6b4:	6023      	str	r3, [r4, #0]
 800e6b6:	bd38      	pop	{r3, r4, r5, pc}
 800e6b8:	200010e4 	.word	0x200010e4

0800e6bc <__errno>:
 800e6bc:	4b01      	ldr	r3, [pc, #4]	; (800e6c4 <__errno+0x8>)
 800e6be:	6818      	ldr	r0, [r3, #0]
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop
 800e6c4:	20000084 	.word	0x20000084

0800e6c8 <__libc_init_array>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	4d0d      	ldr	r5, [pc, #52]	; (800e700 <__libc_init_array+0x38>)
 800e6cc:	4c0d      	ldr	r4, [pc, #52]	; (800e704 <__libc_init_array+0x3c>)
 800e6ce:	1b64      	subs	r4, r4, r5
 800e6d0:	10a4      	asrs	r4, r4, #2
 800e6d2:	2600      	movs	r6, #0
 800e6d4:	42a6      	cmp	r6, r4
 800e6d6:	d109      	bne.n	800e6ec <__libc_init_array+0x24>
 800e6d8:	4d0b      	ldr	r5, [pc, #44]	; (800e708 <__libc_init_array+0x40>)
 800e6da:	4c0c      	ldr	r4, [pc, #48]	; (800e70c <__libc_init_array+0x44>)
 800e6dc:	f003 ff24 	bl	8012528 <_init>
 800e6e0:	1b64      	subs	r4, r4, r5
 800e6e2:	10a4      	asrs	r4, r4, #2
 800e6e4:	2600      	movs	r6, #0
 800e6e6:	42a6      	cmp	r6, r4
 800e6e8:	d105      	bne.n	800e6f6 <__libc_init_array+0x2e>
 800e6ea:	bd70      	pop	{r4, r5, r6, pc}
 800e6ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6f0:	4798      	blx	r3
 800e6f2:	3601      	adds	r6, #1
 800e6f4:	e7ee      	b.n	800e6d4 <__libc_init_array+0xc>
 800e6f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6fa:	4798      	blx	r3
 800e6fc:	3601      	adds	r6, #1
 800e6fe:	e7f2      	b.n	800e6e6 <__libc_init_array+0x1e>
 800e700:	08012a1c 	.word	0x08012a1c
 800e704:	08012a1c 	.word	0x08012a1c
 800e708:	08012a1c 	.word	0x08012a1c
 800e70c:	08012a20 	.word	0x08012a20

0800e710 <__retarget_lock_init_recursive>:
 800e710:	4770      	bx	lr

0800e712 <__retarget_lock_acquire_recursive>:
 800e712:	4770      	bx	lr

0800e714 <__retarget_lock_release_recursive>:
 800e714:	4770      	bx	lr

0800e716 <memcpy>:
 800e716:	440a      	add	r2, r1
 800e718:	4291      	cmp	r1, r2
 800e71a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e71e:	d100      	bne.n	800e722 <memcpy+0xc>
 800e720:	4770      	bx	lr
 800e722:	b510      	push	{r4, lr}
 800e724:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e72c:	4291      	cmp	r1, r2
 800e72e:	d1f9      	bne.n	800e724 <memcpy+0xe>
 800e730:	bd10      	pop	{r4, pc}
	...

0800e734 <nanf>:
 800e734:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e73c <nanf+0x8>
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	7fc00000 	.word	0x7fc00000

0800e740 <quorem>:
 800e740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e744:	6903      	ldr	r3, [r0, #16]
 800e746:	690c      	ldr	r4, [r1, #16]
 800e748:	42a3      	cmp	r3, r4
 800e74a:	4607      	mov	r7, r0
 800e74c:	db7e      	blt.n	800e84c <quorem+0x10c>
 800e74e:	3c01      	subs	r4, #1
 800e750:	f101 0814 	add.w	r8, r1, #20
 800e754:	f100 0514 	add.w	r5, r0, #20
 800e758:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e75c:	9301      	str	r3, [sp, #4]
 800e75e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e766:	3301      	adds	r3, #1
 800e768:	429a      	cmp	r2, r3
 800e76a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e76e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e772:	fbb2 f6f3 	udiv	r6, r2, r3
 800e776:	d331      	bcc.n	800e7dc <quorem+0x9c>
 800e778:	f04f 0e00 	mov.w	lr, #0
 800e77c:	4640      	mov	r0, r8
 800e77e:	46ac      	mov	ip, r5
 800e780:	46f2      	mov	sl, lr
 800e782:	f850 2b04 	ldr.w	r2, [r0], #4
 800e786:	b293      	uxth	r3, r2
 800e788:	fb06 e303 	mla	r3, r6, r3, lr
 800e78c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e790:	0c1a      	lsrs	r2, r3, #16
 800e792:	b29b      	uxth	r3, r3
 800e794:	ebaa 0303 	sub.w	r3, sl, r3
 800e798:	f8dc a000 	ldr.w	sl, [ip]
 800e79c:	fa13 f38a 	uxtah	r3, r3, sl
 800e7a0:	fb06 220e 	mla	r2, r6, lr, r2
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	9b00      	ldr	r3, [sp, #0]
 800e7a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7ac:	b292      	uxth	r2, r2
 800e7ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e7b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7b6:	f8bd 3000 	ldrh.w	r3, [sp]
 800e7ba:	4581      	cmp	r9, r0
 800e7bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7c0:	f84c 3b04 	str.w	r3, [ip], #4
 800e7c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e7c8:	d2db      	bcs.n	800e782 <quorem+0x42>
 800e7ca:	f855 300b 	ldr.w	r3, [r5, fp]
 800e7ce:	b92b      	cbnz	r3, 800e7dc <quorem+0x9c>
 800e7d0:	9b01      	ldr	r3, [sp, #4]
 800e7d2:	3b04      	subs	r3, #4
 800e7d4:	429d      	cmp	r5, r3
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	d32c      	bcc.n	800e834 <quorem+0xf4>
 800e7da:	613c      	str	r4, [r7, #16]
 800e7dc:	4638      	mov	r0, r7
 800e7de:	f001 f93b 	bl	800fa58 <__mcmp>
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	db22      	blt.n	800e82c <quorem+0xec>
 800e7e6:	3601      	adds	r6, #1
 800e7e8:	4629      	mov	r1, r5
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800e7f0:	f8d1 c000 	ldr.w	ip, [r1]
 800e7f4:	b293      	uxth	r3, r2
 800e7f6:	1ac3      	subs	r3, r0, r3
 800e7f8:	0c12      	lsrs	r2, r2, #16
 800e7fa:	fa13 f38c 	uxtah	r3, r3, ip
 800e7fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e802:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e806:	b29b      	uxth	r3, r3
 800e808:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e80c:	45c1      	cmp	r9, r8
 800e80e:	f841 3b04 	str.w	r3, [r1], #4
 800e812:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e816:	d2e9      	bcs.n	800e7ec <quorem+0xac>
 800e818:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e81c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e820:	b922      	cbnz	r2, 800e82c <quorem+0xec>
 800e822:	3b04      	subs	r3, #4
 800e824:	429d      	cmp	r5, r3
 800e826:	461a      	mov	r2, r3
 800e828:	d30a      	bcc.n	800e840 <quorem+0x100>
 800e82a:	613c      	str	r4, [r7, #16]
 800e82c:	4630      	mov	r0, r6
 800e82e:	b003      	add	sp, #12
 800e830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e834:	6812      	ldr	r2, [r2, #0]
 800e836:	3b04      	subs	r3, #4
 800e838:	2a00      	cmp	r2, #0
 800e83a:	d1ce      	bne.n	800e7da <quorem+0x9a>
 800e83c:	3c01      	subs	r4, #1
 800e83e:	e7c9      	b.n	800e7d4 <quorem+0x94>
 800e840:	6812      	ldr	r2, [r2, #0]
 800e842:	3b04      	subs	r3, #4
 800e844:	2a00      	cmp	r2, #0
 800e846:	d1f0      	bne.n	800e82a <quorem+0xea>
 800e848:	3c01      	subs	r4, #1
 800e84a:	e7eb      	b.n	800e824 <quorem+0xe4>
 800e84c:	2000      	movs	r0, #0
 800e84e:	e7ee      	b.n	800e82e <quorem+0xee>

0800e850 <_dtoa_r>:
 800e850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e854:	ed2d 8b04 	vpush	{d8-d9}
 800e858:	69c5      	ldr	r5, [r0, #28]
 800e85a:	b093      	sub	sp, #76	; 0x4c
 800e85c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e860:	ec57 6b10 	vmov	r6, r7, d0
 800e864:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e868:	9107      	str	r1, [sp, #28]
 800e86a:	4604      	mov	r4, r0
 800e86c:	920a      	str	r2, [sp, #40]	; 0x28
 800e86e:	930d      	str	r3, [sp, #52]	; 0x34
 800e870:	b975      	cbnz	r5, 800e890 <_dtoa_r+0x40>
 800e872:	2010      	movs	r0, #16
 800e874:	f7fe fdf8 	bl	800d468 <malloc>
 800e878:	4602      	mov	r2, r0
 800e87a:	61e0      	str	r0, [r4, #28]
 800e87c:	b920      	cbnz	r0, 800e888 <_dtoa_r+0x38>
 800e87e:	4bae      	ldr	r3, [pc, #696]	; (800eb38 <_dtoa_r+0x2e8>)
 800e880:	21ef      	movs	r1, #239	; 0xef
 800e882:	48ae      	ldr	r0, [pc, #696]	; (800eb3c <_dtoa_r+0x2ec>)
 800e884:	f002 ff40 	bl	8011708 <__assert_func>
 800e888:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e88c:	6005      	str	r5, [r0, #0]
 800e88e:	60c5      	str	r5, [r0, #12]
 800e890:	69e3      	ldr	r3, [r4, #28]
 800e892:	6819      	ldr	r1, [r3, #0]
 800e894:	b151      	cbz	r1, 800e8ac <_dtoa_r+0x5c>
 800e896:	685a      	ldr	r2, [r3, #4]
 800e898:	604a      	str	r2, [r1, #4]
 800e89a:	2301      	movs	r3, #1
 800e89c:	4093      	lsls	r3, r2
 800e89e:	608b      	str	r3, [r1, #8]
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	f000 fe53 	bl	800f54c <_Bfree>
 800e8a6:	69e3      	ldr	r3, [r4, #28]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	601a      	str	r2, [r3, #0]
 800e8ac:	1e3b      	subs	r3, r7, #0
 800e8ae:	bfbb      	ittet	lt
 800e8b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e8b4:	9303      	strlt	r3, [sp, #12]
 800e8b6:	2300      	movge	r3, #0
 800e8b8:	2201      	movlt	r2, #1
 800e8ba:	bfac      	ite	ge
 800e8bc:	f8c8 3000 	strge.w	r3, [r8]
 800e8c0:	f8c8 2000 	strlt.w	r2, [r8]
 800e8c4:	4b9e      	ldr	r3, [pc, #632]	; (800eb40 <_dtoa_r+0x2f0>)
 800e8c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e8ca:	ea33 0308 	bics.w	r3, r3, r8
 800e8ce:	d11b      	bne.n	800e908 <_dtoa_r+0xb8>
 800e8d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e8d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800e8d6:	6013      	str	r3, [r2, #0]
 800e8d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e8dc:	4333      	orrs	r3, r6
 800e8de:	f000 8593 	beq.w	800f408 <_dtoa_r+0xbb8>
 800e8e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8e4:	b963      	cbnz	r3, 800e900 <_dtoa_r+0xb0>
 800e8e6:	4b97      	ldr	r3, [pc, #604]	; (800eb44 <_dtoa_r+0x2f4>)
 800e8e8:	e027      	b.n	800e93a <_dtoa_r+0xea>
 800e8ea:	4b97      	ldr	r3, [pc, #604]	; (800eb48 <_dtoa_r+0x2f8>)
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	3308      	adds	r3, #8
 800e8f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e8f2:	6013      	str	r3, [r2, #0]
 800e8f4:	9800      	ldr	r0, [sp, #0]
 800e8f6:	b013      	add	sp, #76	; 0x4c
 800e8f8:	ecbd 8b04 	vpop	{d8-d9}
 800e8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e900:	4b90      	ldr	r3, [pc, #576]	; (800eb44 <_dtoa_r+0x2f4>)
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	3303      	adds	r3, #3
 800e906:	e7f3      	b.n	800e8f0 <_dtoa_r+0xa0>
 800e908:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e90c:	2200      	movs	r2, #0
 800e90e:	ec51 0b17 	vmov	r0, r1, d7
 800e912:	eeb0 8a47 	vmov.f32	s16, s14
 800e916:	eef0 8a67 	vmov.f32	s17, s15
 800e91a:	2300      	movs	r3, #0
 800e91c:	f7f2 f8d4 	bl	8000ac8 <__aeabi_dcmpeq>
 800e920:	4681      	mov	r9, r0
 800e922:	b160      	cbz	r0, 800e93e <_dtoa_r+0xee>
 800e924:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e926:	2301      	movs	r3, #1
 800e928:	6013      	str	r3, [r2, #0]
 800e92a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	f000 8568 	beq.w	800f402 <_dtoa_r+0xbb2>
 800e932:	4b86      	ldr	r3, [pc, #536]	; (800eb4c <_dtoa_r+0x2fc>)
 800e934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	3b01      	subs	r3, #1
 800e93a:	9300      	str	r3, [sp, #0]
 800e93c:	e7da      	b.n	800e8f4 <_dtoa_r+0xa4>
 800e93e:	aa10      	add	r2, sp, #64	; 0x40
 800e940:	a911      	add	r1, sp, #68	; 0x44
 800e942:	4620      	mov	r0, r4
 800e944:	eeb0 0a48 	vmov.f32	s0, s16
 800e948:	eef0 0a68 	vmov.f32	s1, s17
 800e94c:	f001 f99a 	bl	800fc84 <__d2b>
 800e950:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e954:	4682      	mov	sl, r0
 800e956:	2d00      	cmp	r5, #0
 800e958:	d07f      	beq.n	800ea5a <_dtoa_r+0x20a>
 800e95a:	ee18 3a90 	vmov	r3, s17
 800e95e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e962:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e966:	ec51 0b18 	vmov	r0, r1, d8
 800e96a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e96e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e972:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e976:	4619      	mov	r1, r3
 800e978:	2200      	movs	r2, #0
 800e97a:	4b75      	ldr	r3, [pc, #468]	; (800eb50 <_dtoa_r+0x300>)
 800e97c:	f7f1 fc84 	bl	8000288 <__aeabi_dsub>
 800e980:	a367      	add	r3, pc, #412	; (adr r3, 800eb20 <_dtoa_r+0x2d0>)
 800e982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e986:	f7f1 fe37 	bl	80005f8 <__aeabi_dmul>
 800e98a:	a367      	add	r3, pc, #412	; (adr r3, 800eb28 <_dtoa_r+0x2d8>)
 800e98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e990:	f7f1 fc7c 	bl	800028c <__adddf3>
 800e994:	4606      	mov	r6, r0
 800e996:	4628      	mov	r0, r5
 800e998:	460f      	mov	r7, r1
 800e99a:	f7f1 fdc3 	bl	8000524 <__aeabi_i2d>
 800e99e:	a364      	add	r3, pc, #400	; (adr r3, 800eb30 <_dtoa_r+0x2e0>)
 800e9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a4:	f7f1 fe28 	bl	80005f8 <__aeabi_dmul>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	4639      	mov	r1, r7
 800e9b0:	f7f1 fc6c 	bl	800028c <__adddf3>
 800e9b4:	4606      	mov	r6, r0
 800e9b6:	460f      	mov	r7, r1
 800e9b8:	f7f2 f8ce 	bl	8000b58 <__aeabi_d2iz>
 800e9bc:	2200      	movs	r2, #0
 800e9be:	4683      	mov	fp, r0
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	4639      	mov	r1, r7
 800e9c6:	f7f2 f889 	bl	8000adc <__aeabi_dcmplt>
 800e9ca:	b148      	cbz	r0, 800e9e0 <_dtoa_r+0x190>
 800e9cc:	4658      	mov	r0, fp
 800e9ce:	f7f1 fda9 	bl	8000524 <__aeabi_i2d>
 800e9d2:	4632      	mov	r2, r6
 800e9d4:	463b      	mov	r3, r7
 800e9d6:	f7f2 f877 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9da:	b908      	cbnz	r0, 800e9e0 <_dtoa_r+0x190>
 800e9dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e9e0:	f1bb 0f16 	cmp.w	fp, #22
 800e9e4:	d857      	bhi.n	800ea96 <_dtoa_r+0x246>
 800e9e6:	4b5b      	ldr	r3, [pc, #364]	; (800eb54 <_dtoa_r+0x304>)
 800e9e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f0:	ec51 0b18 	vmov	r0, r1, d8
 800e9f4:	f7f2 f872 	bl	8000adc <__aeabi_dcmplt>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d04e      	beq.n	800ea9a <_dtoa_r+0x24a>
 800e9fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ea00:	2300      	movs	r3, #0
 800ea02:	930c      	str	r3, [sp, #48]	; 0x30
 800ea04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea06:	1b5b      	subs	r3, r3, r5
 800ea08:	1e5a      	subs	r2, r3, #1
 800ea0a:	bf45      	ittet	mi
 800ea0c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ea10:	9305      	strmi	r3, [sp, #20]
 800ea12:	2300      	movpl	r3, #0
 800ea14:	2300      	movmi	r3, #0
 800ea16:	9206      	str	r2, [sp, #24]
 800ea18:	bf54      	ite	pl
 800ea1a:	9305      	strpl	r3, [sp, #20]
 800ea1c:	9306      	strmi	r3, [sp, #24]
 800ea1e:	f1bb 0f00 	cmp.w	fp, #0
 800ea22:	db3c      	blt.n	800ea9e <_dtoa_r+0x24e>
 800ea24:	9b06      	ldr	r3, [sp, #24]
 800ea26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ea2a:	445b      	add	r3, fp
 800ea2c:	9306      	str	r3, [sp, #24]
 800ea2e:	2300      	movs	r3, #0
 800ea30:	9308      	str	r3, [sp, #32]
 800ea32:	9b07      	ldr	r3, [sp, #28]
 800ea34:	2b09      	cmp	r3, #9
 800ea36:	d868      	bhi.n	800eb0a <_dtoa_r+0x2ba>
 800ea38:	2b05      	cmp	r3, #5
 800ea3a:	bfc4      	itt	gt
 800ea3c:	3b04      	subgt	r3, #4
 800ea3e:	9307      	strgt	r3, [sp, #28]
 800ea40:	9b07      	ldr	r3, [sp, #28]
 800ea42:	f1a3 0302 	sub.w	r3, r3, #2
 800ea46:	bfcc      	ite	gt
 800ea48:	2500      	movgt	r5, #0
 800ea4a:	2501      	movle	r5, #1
 800ea4c:	2b03      	cmp	r3, #3
 800ea4e:	f200 8085 	bhi.w	800eb5c <_dtoa_r+0x30c>
 800ea52:	e8df f003 	tbb	[pc, r3]
 800ea56:	3b2e      	.short	0x3b2e
 800ea58:	5839      	.short	0x5839
 800ea5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ea5e:	441d      	add	r5, r3
 800ea60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea64:	2b20      	cmp	r3, #32
 800ea66:	bfc1      	itttt	gt
 800ea68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea6c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ea70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ea74:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ea78:	bfd6      	itet	le
 800ea7a:	f1c3 0320 	rsble	r3, r3, #32
 800ea7e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ea82:	fa06 f003 	lslle.w	r0, r6, r3
 800ea86:	f7f1 fd3d 	bl	8000504 <__aeabi_ui2d>
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ea90:	3d01      	subs	r5, #1
 800ea92:	920e      	str	r2, [sp, #56]	; 0x38
 800ea94:	e76f      	b.n	800e976 <_dtoa_r+0x126>
 800ea96:	2301      	movs	r3, #1
 800ea98:	e7b3      	b.n	800ea02 <_dtoa_r+0x1b2>
 800ea9a:	900c      	str	r0, [sp, #48]	; 0x30
 800ea9c:	e7b2      	b.n	800ea04 <_dtoa_r+0x1b4>
 800ea9e:	9b05      	ldr	r3, [sp, #20]
 800eaa0:	eba3 030b 	sub.w	r3, r3, fp
 800eaa4:	9305      	str	r3, [sp, #20]
 800eaa6:	f1cb 0300 	rsb	r3, fp, #0
 800eaaa:	9308      	str	r3, [sp, #32]
 800eaac:	2300      	movs	r3, #0
 800eaae:	930b      	str	r3, [sp, #44]	; 0x2c
 800eab0:	e7bf      	b.n	800ea32 <_dtoa_r+0x1e2>
 800eab2:	2300      	movs	r3, #0
 800eab4:	9309      	str	r3, [sp, #36]	; 0x24
 800eab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	dc52      	bgt.n	800eb62 <_dtoa_r+0x312>
 800eabc:	2301      	movs	r3, #1
 800eabe:	9301      	str	r3, [sp, #4]
 800eac0:	9304      	str	r3, [sp, #16]
 800eac2:	461a      	mov	r2, r3
 800eac4:	920a      	str	r2, [sp, #40]	; 0x28
 800eac6:	e00b      	b.n	800eae0 <_dtoa_r+0x290>
 800eac8:	2301      	movs	r3, #1
 800eaca:	e7f3      	b.n	800eab4 <_dtoa_r+0x264>
 800eacc:	2300      	movs	r3, #0
 800eace:	9309      	str	r3, [sp, #36]	; 0x24
 800ead0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ead2:	445b      	add	r3, fp
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	3301      	adds	r3, #1
 800ead8:	2b01      	cmp	r3, #1
 800eada:	9304      	str	r3, [sp, #16]
 800eadc:	bfb8      	it	lt
 800eade:	2301      	movlt	r3, #1
 800eae0:	69e0      	ldr	r0, [r4, #28]
 800eae2:	2100      	movs	r1, #0
 800eae4:	2204      	movs	r2, #4
 800eae6:	f102 0614 	add.w	r6, r2, #20
 800eaea:	429e      	cmp	r6, r3
 800eaec:	d93d      	bls.n	800eb6a <_dtoa_r+0x31a>
 800eaee:	6041      	str	r1, [r0, #4]
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	f000 fceb 	bl	800f4cc <_Balloc>
 800eaf6:	9000      	str	r0, [sp, #0]
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	d139      	bne.n	800eb70 <_dtoa_r+0x320>
 800eafc:	4b16      	ldr	r3, [pc, #88]	; (800eb58 <_dtoa_r+0x308>)
 800eafe:	4602      	mov	r2, r0
 800eb00:	f240 11af 	movw	r1, #431	; 0x1af
 800eb04:	e6bd      	b.n	800e882 <_dtoa_r+0x32>
 800eb06:	2301      	movs	r3, #1
 800eb08:	e7e1      	b.n	800eace <_dtoa_r+0x27e>
 800eb0a:	2501      	movs	r5, #1
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	9307      	str	r3, [sp, #28]
 800eb10:	9509      	str	r5, [sp, #36]	; 0x24
 800eb12:	f04f 33ff 	mov.w	r3, #4294967295
 800eb16:	9301      	str	r3, [sp, #4]
 800eb18:	9304      	str	r3, [sp, #16]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	2312      	movs	r3, #18
 800eb1e:	e7d1      	b.n	800eac4 <_dtoa_r+0x274>
 800eb20:	636f4361 	.word	0x636f4361
 800eb24:	3fd287a7 	.word	0x3fd287a7
 800eb28:	8b60c8b3 	.word	0x8b60c8b3
 800eb2c:	3fc68a28 	.word	0x3fc68a28
 800eb30:	509f79fb 	.word	0x509f79fb
 800eb34:	3fd34413 	.word	0x3fd34413
 800eb38:	08012610 	.word	0x08012610
 800eb3c:	08012627 	.word	0x08012627
 800eb40:	7ff00000 	.word	0x7ff00000
 800eb44:	0801260c 	.word	0x0801260c
 800eb48:	08012603 	.word	0x08012603
 800eb4c:	08012969 	.word	0x08012969
 800eb50:	3ff80000 	.word	0x3ff80000
 800eb54:	08012718 	.word	0x08012718
 800eb58:	0801267f 	.word	0x0801267f
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	9309      	str	r3, [sp, #36]	; 0x24
 800eb60:	e7d7      	b.n	800eb12 <_dtoa_r+0x2c2>
 800eb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb64:	9301      	str	r3, [sp, #4]
 800eb66:	9304      	str	r3, [sp, #16]
 800eb68:	e7ba      	b.n	800eae0 <_dtoa_r+0x290>
 800eb6a:	3101      	adds	r1, #1
 800eb6c:	0052      	lsls	r2, r2, #1
 800eb6e:	e7ba      	b.n	800eae6 <_dtoa_r+0x296>
 800eb70:	69e3      	ldr	r3, [r4, #28]
 800eb72:	9a00      	ldr	r2, [sp, #0]
 800eb74:	601a      	str	r2, [r3, #0]
 800eb76:	9b04      	ldr	r3, [sp, #16]
 800eb78:	2b0e      	cmp	r3, #14
 800eb7a:	f200 80a8 	bhi.w	800ecce <_dtoa_r+0x47e>
 800eb7e:	2d00      	cmp	r5, #0
 800eb80:	f000 80a5 	beq.w	800ecce <_dtoa_r+0x47e>
 800eb84:	f1bb 0f00 	cmp.w	fp, #0
 800eb88:	dd38      	ble.n	800ebfc <_dtoa_r+0x3ac>
 800eb8a:	4bc0      	ldr	r3, [pc, #768]	; (800ee8c <_dtoa_r+0x63c>)
 800eb8c:	f00b 020f 	and.w	r2, fp, #15
 800eb90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800eb98:	e9d3 6700 	ldrd	r6, r7, [r3]
 800eb9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800eba0:	d019      	beq.n	800ebd6 <_dtoa_r+0x386>
 800eba2:	4bbb      	ldr	r3, [pc, #748]	; (800ee90 <_dtoa_r+0x640>)
 800eba4:	ec51 0b18 	vmov	r0, r1, d8
 800eba8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebac:	f7f1 fe4e 	bl	800084c <__aeabi_ddiv>
 800ebb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebb4:	f008 080f 	and.w	r8, r8, #15
 800ebb8:	2503      	movs	r5, #3
 800ebba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ee90 <_dtoa_r+0x640>
 800ebbe:	f1b8 0f00 	cmp.w	r8, #0
 800ebc2:	d10a      	bne.n	800ebda <_dtoa_r+0x38a>
 800ebc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebc8:	4632      	mov	r2, r6
 800ebca:	463b      	mov	r3, r7
 800ebcc:	f7f1 fe3e 	bl	800084c <__aeabi_ddiv>
 800ebd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebd4:	e02b      	b.n	800ec2e <_dtoa_r+0x3de>
 800ebd6:	2502      	movs	r5, #2
 800ebd8:	e7ef      	b.n	800ebba <_dtoa_r+0x36a>
 800ebda:	f018 0f01 	tst.w	r8, #1
 800ebde:	d008      	beq.n	800ebf2 <_dtoa_r+0x3a2>
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	4639      	mov	r1, r7
 800ebe4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ebe8:	f7f1 fd06 	bl	80005f8 <__aeabi_dmul>
 800ebec:	3501      	adds	r5, #1
 800ebee:	4606      	mov	r6, r0
 800ebf0:	460f      	mov	r7, r1
 800ebf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ebf6:	f109 0908 	add.w	r9, r9, #8
 800ebfa:	e7e0      	b.n	800ebbe <_dtoa_r+0x36e>
 800ebfc:	f000 809f 	beq.w	800ed3e <_dtoa_r+0x4ee>
 800ec00:	f1cb 0600 	rsb	r6, fp, #0
 800ec04:	4ba1      	ldr	r3, [pc, #644]	; (800ee8c <_dtoa_r+0x63c>)
 800ec06:	4fa2      	ldr	r7, [pc, #648]	; (800ee90 <_dtoa_r+0x640>)
 800ec08:	f006 020f 	and.w	r2, r6, #15
 800ec0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec14:	ec51 0b18 	vmov	r0, r1, d8
 800ec18:	f7f1 fcee 	bl	80005f8 <__aeabi_dmul>
 800ec1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec20:	1136      	asrs	r6, r6, #4
 800ec22:	2300      	movs	r3, #0
 800ec24:	2502      	movs	r5, #2
 800ec26:	2e00      	cmp	r6, #0
 800ec28:	d17e      	bne.n	800ed28 <_dtoa_r+0x4d8>
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1d0      	bne.n	800ebd0 <_dtoa_r+0x380>
 800ec2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	f000 8084 	beq.w	800ed42 <_dtoa_r+0x4f2>
 800ec3a:	4b96      	ldr	r3, [pc, #600]	; (800ee94 <_dtoa_r+0x644>)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4640      	mov	r0, r8
 800ec40:	4649      	mov	r1, r9
 800ec42:	f7f1 ff4b 	bl	8000adc <__aeabi_dcmplt>
 800ec46:	2800      	cmp	r0, #0
 800ec48:	d07b      	beq.n	800ed42 <_dtoa_r+0x4f2>
 800ec4a:	9b04      	ldr	r3, [sp, #16]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d078      	beq.n	800ed42 <_dtoa_r+0x4f2>
 800ec50:	9b01      	ldr	r3, [sp, #4]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	dd39      	ble.n	800ecca <_dtoa_r+0x47a>
 800ec56:	4b90      	ldr	r3, [pc, #576]	; (800ee98 <_dtoa_r+0x648>)
 800ec58:	2200      	movs	r2, #0
 800ec5a:	4640      	mov	r0, r8
 800ec5c:	4649      	mov	r1, r9
 800ec5e:	f7f1 fccb 	bl	80005f8 <__aeabi_dmul>
 800ec62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec66:	9e01      	ldr	r6, [sp, #4]
 800ec68:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ec6c:	3501      	adds	r5, #1
 800ec6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ec72:	4628      	mov	r0, r5
 800ec74:	f7f1 fc56 	bl	8000524 <__aeabi_i2d>
 800ec78:	4642      	mov	r2, r8
 800ec7a:	464b      	mov	r3, r9
 800ec7c:	f7f1 fcbc 	bl	80005f8 <__aeabi_dmul>
 800ec80:	4b86      	ldr	r3, [pc, #536]	; (800ee9c <_dtoa_r+0x64c>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	f7f1 fb02 	bl	800028c <__adddf3>
 800ec88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ec8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec90:	9303      	str	r3, [sp, #12]
 800ec92:	2e00      	cmp	r6, #0
 800ec94:	d158      	bne.n	800ed48 <_dtoa_r+0x4f8>
 800ec96:	4b82      	ldr	r3, [pc, #520]	; (800eea0 <_dtoa_r+0x650>)
 800ec98:	2200      	movs	r2, #0
 800ec9a:	4640      	mov	r0, r8
 800ec9c:	4649      	mov	r1, r9
 800ec9e:	f7f1 faf3 	bl	8000288 <__aeabi_dsub>
 800eca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eca6:	4680      	mov	r8, r0
 800eca8:	4689      	mov	r9, r1
 800ecaa:	f7f1 ff35 	bl	8000b18 <__aeabi_dcmpgt>
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	f040 8296 	bne.w	800f1e0 <_dtoa_r+0x990>
 800ecb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ecb8:	4640      	mov	r0, r8
 800ecba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecbe:	4649      	mov	r1, r9
 800ecc0:	f7f1 ff0c 	bl	8000adc <__aeabi_dcmplt>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	f040 8289 	bne.w	800f1dc <_dtoa_r+0x98c>
 800ecca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ecce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f2c0 814e 	blt.w	800ef72 <_dtoa_r+0x722>
 800ecd6:	f1bb 0f0e 	cmp.w	fp, #14
 800ecda:	f300 814a 	bgt.w	800ef72 <_dtoa_r+0x722>
 800ecde:	4b6b      	ldr	r3, [pc, #428]	; (800ee8c <_dtoa_r+0x63c>)
 800ece0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ece4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ece8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f280 80dc 	bge.w	800eea8 <_dtoa_r+0x658>
 800ecf0:	9b04      	ldr	r3, [sp, #16]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	f300 80d8 	bgt.w	800eea8 <_dtoa_r+0x658>
 800ecf8:	f040 826f 	bne.w	800f1da <_dtoa_r+0x98a>
 800ecfc:	4b68      	ldr	r3, [pc, #416]	; (800eea0 <_dtoa_r+0x650>)
 800ecfe:	2200      	movs	r2, #0
 800ed00:	4640      	mov	r0, r8
 800ed02:	4649      	mov	r1, r9
 800ed04:	f7f1 fc78 	bl	80005f8 <__aeabi_dmul>
 800ed08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed0c:	f7f1 fefa 	bl	8000b04 <__aeabi_dcmpge>
 800ed10:	9e04      	ldr	r6, [sp, #16]
 800ed12:	4637      	mov	r7, r6
 800ed14:	2800      	cmp	r0, #0
 800ed16:	f040 8245 	bne.w	800f1a4 <_dtoa_r+0x954>
 800ed1a:	9d00      	ldr	r5, [sp, #0]
 800ed1c:	2331      	movs	r3, #49	; 0x31
 800ed1e:	f805 3b01 	strb.w	r3, [r5], #1
 800ed22:	f10b 0b01 	add.w	fp, fp, #1
 800ed26:	e241      	b.n	800f1ac <_dtoa_r+0x95c>
 800ed28:	07f2      	lsls	r2, r6, #31
 800ed2a:	d505      	bpl.n	800ed38 <_dtoa_r+0x4e8>
 800ed2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed30:	f7f1 fc62 	bl	80005f8 <__aeabi_dmul>
 800ed34:	3501      	adds	r5, #1
 800ed36:	2301      	movs	r3, #1
 800ed38:	1076      	asrs	r6, r6, #1
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	e773      	b.n	800ec26 <_dtoa_r+0x3d6>
 800ed3e:	2502      	movs	r5, #2
 800ed40:	e775      	b.n	800ec2e <_dtoa_r+0x3de>
 800ed42:	9e04      	ldr	r6, [sp, #16]
 800ed44:	465f      	mov	r7, fp
 800ed46:	e792      	b.n	800ec6e <_dtoa_r+0x41e>
 800ed48:	9900      	ldr	r1, [sp, #0]
 800ed4a:	4b50      	ldr	r3, [pc, #320]	; (800ee8c <_dtoa_r+0x63c>)
 800ed4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed50:	4431      	add	r1, r6
 800ed52:	9102      	str	r1, [sp, #8]
 800ed54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed56:	eeb0 9a47 	vmov.f32	s18, s14
 800ed5a:	eef0 9a67 	vmov.f32	s19, s15
 800ed5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed66:	2900      	cmp	r1, #0
 800ed68:	d044      	beq.n	800edf4 <_dtoa_r+0x5a4>
 800ed6a:	494e      	ldr	r1, [pc, #312]	; (800eea4 <_dtoa_r+0x654>)
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	f7f1 fd6d 	bl	800084c <__aeabi_ddiv>
 800ed72:	ec53 2b19 	vmov	r2, r3, d9
 800ed76:	f7f1 fa87 	bl	8000288 <__aeabi_dsub>
 800ed7a:	9d00      	ldr	r5, [sp, #0]
 800ed7c:	ec41 0b19 	vmov	d9, r0, r1
 800ed80:	4649      	mov	r1, r9
 800ed82:	4640      	mov	r0, r8
 800ed84:	f7f1 fee8 	bl	8000b58 <__aeabi_d2iz>
 800ed88:	4606      	mov	r6, r0
 800ed8a:	f7f1 fbcb 	bl	8000524 <__aeabi_i2d>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	460b      	mov	r3, r1
 800ed92:	4640      	mov	r0, r8
 800ed94:	4649      	mov	r1, r9
 800ed96:	f7f1 fa77 	bl	8000288 <__aeabi_dsub>
 800ed9a:	3630      	adds	r6, #48	; 0x30
 800ed9c:	f805 6b01 	strb.w	r6, [r5], #1
 800eda0:	ec53 2b19 	vmov	r2, r3, d9
 800eda4:	4680      	mov	r8, r0
 800eda6:	4689      	mov	r9, r1
 800eda8:	f7f1 fe98 	bl	8000adc <__aeabi_dcmplt>
 800edac:	2800      	cmp	r0, #0
 800edae:	d164      	bne.n	800ee7a <_dtoa_r+0x62a>
 800edb0:	4642      	mov	r2, r8
 800edb2:	464b      	mov	r3, r9
 800edb4:	4937      	ldr	r1, [pc, #220]	; (800ee94 <_dtoa_r+0x644>)
 800edb6:	2000      	movs	r0, #0
 800edb8:	f7f1 fa66 	bl	8000288 <__aeabi_dsub>
 800edbc:	ec53 2b19 	vmov	r2, r3, d9
 800edc0:	f7f1 fe8c 	bl	8000adc <__aeabi_dcmplt>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	f040 80b6 	bne.w	800ef36 <_dtoa_r+0x6e6>
 800edca:	9b02      	ldr	r3, [sp, #8]
 800edcc:	429d      	cmp	r5, r3
 800edce:	f43f af7c 	beq.w	800ecca <_dtoa_r+0x47a>
 800edd2:	4b31      	ldr	r3, [pc, #196]	; (800ee98 <_dtoa_r+0x648>)
 800edd4:	ec51 0b19 	vmov	r0, r1, d9
 800edd8:	2200      	movs	r2, #0
 800edda:	f7f1 fc0d 	bl	80005f8 <__aeabi_dmul>
 800edde:	4b2e      	ldr	r3, [pc, #184]	; (800ee98 <_dtoa_r+0x648>)
 800ede0:	ec41 0b19 	vmov	d9, r0, r1
 800ede4:	2200      	movs	r2, #0
 800ede6:	4640      	mov	r0, r8
 800ede8:	4649      	mov	r1, r9
 800edea:	f7f1 fc05 	bl	80005f8 <__aeabi_dmul>
 800edee:	4680      	mov	r8, r0
 800edf0:	4689      	mov	r9, r1
 800edf2:	e7c5      	b.n	800ed80 <_dtoa_r+0x530>
 800edf4:	ec51 0b17 	vmov	r0, r1, d7
 800edf8:	f7f1 fbfe 	bl	80005f8 <__aeabi_dmul>
 800edfc:	9b02      	ldr	r3, [sp, #8]
 800edfe:	9d00      	ldr	r5, [sp, #0]
 800ee00:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee02:	ec41 0b19 	vmov	d9, r0, r1
 800ee06:	4649      	mov	r1, r9
 800ee08:	4640      	mov	r0, r8
 800ee0a:	f7f1 fea5 	bl	8000b58 <__aeabi_d2iz>
 800ee0e:	4606      	mov	r6, r0
 800ee10:	f7f1 fb88 	bl	8000524 <__aeabi_i2d>
 800ee14:	3630      	adds	r6, #48	; 0x30
 800ee16:	4602      	mov	r2, r0
 800ee18:	460b      	mov	r3, r1
 800ee1a:	4640      	mov	r0, r8
 800ee1c:	4649      	mov	r1, r9
 800ee1e:	f7f1 fa33 	bl	8000288 <__aeabi_dsub>
 800ee22:	f805 6b01 	strb.w	r6, [r5], #1
 800ee26:	9b02      	ldr	r3, [sp, #8]
 800ee28:	429d      	cmp	r5, r3
 800ee2a:	4680      	mov	r8, r0
 800ee2c:	4689      	mov	r9, r1
 800ee2e:	f04f 0200 	mov.w	r2, #0
 800ee32:	d124      	bne.n	800ee7e <_dtoa_r+0x62e>
 800ee34:	4b1b      	ldr	r3, [pc, #108]	; (800eea4 <_dtoa_r+0x654>)
 800ee36:	ec51 0b19 	vmov	r0, r1, d9
 800ee3a:	f7f1 fa27 	bl	800028c <__adddf3>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	460b      	mov	r3, r1
 800ee42:	4640      	mov	r0, r8
 800ee44:	4649      	mov	r1, r9
 800ee46:	f7f1 fe67 	bl	8000b18 <__aeabi_dcmpgt>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d173      	bne.n	800ef36 <_dtoa_r+0x6e6>
 800ee4e:	ec53 2b19 	vmov	r2, r3, d9
 800ee52:	4914      	ldr	r1, [pc, #80]	; (800eea4 <_dtoa_r+0x654>)
 800ee54:	2000      	movs	r0, #0
 800ee56:	f7f1 fa17 	bl	8000288 <__aeabi_dsub>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	4640      	mov	r0, r8
 800ee60:	4649      	mov	r1, r9
 800ee62:	f7f1 fe3b 	bl	8000adc <__aeabi_dcmplt>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	f43f af2f 	beq.w	800ecca <_dtoa_r+0x47a>
 800ee6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ee6e:	1e6b      	subs	r3, r5, #1
 800ee70:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee76:	2b30      	cmp	r3, #48	; 0x30
 800ee78:	d0f8      	beq.n	800ee6c <_dtoa_r+0x61c>
 800ee7a:	46bb      	mov	fp, r7
 800ee7c:	e04a      	b.n	800ef14 <_dtoa_r+0x6c4>
 800ee7e:	4b06      	ldr	r3, [pc, #24]	; (800ee98 <_dtoa_r+0x648>)
 800ee80:	f7f1 fbba 	bl	80005f8 <__aeabi_dmul>
 800ee84:	4680      	mov	r8, r0
 800ee86:	4689      	mov	r9, r1
 800ee88:	e7bd      	b.n	800ee06 <_dtoa_r+0x5b6>
 800ee8a:	bf00      	nop
 800ee8c:	08012718 	.word	0x08012718
 800ee90:	080126f0 	.word	0x080126f0
 800ee94:	3ff00000 	.word	0x3ff00000
 800ee98:	40240000 	.word	0x40240000
 800ee9c:	401c0000 	.word	0x401c0000
 800eea0:	40140000 	.word	0x40140000
 800eea4:	3fe00000 	.word	0x3fe00000
 800eea8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eeac:	9d00      	ldr	r5, [sp, #0]
 800eeae:	4642      	mov	r2, r8
 800eeb0:	464b      	mov	r3, r9
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	4639      	mov	r1, r7
 800eeb6:	f7f1 fcc9 	bl	800084c <__aeabi_ddiv>
 800eeba:	f7f1 fe4d 	bl	8000b58 <__aeabi_d2iz>
 800eebe:	9001      	str	r0, [sp, #4]
 800eec0:	f7f1 fb30 	bl	8000524 <__aeabi_i2d>
 800eec4:	4642      	mov	r2, r8
 800eec6:	464b      	mov	r3, r9
 800eec8:	f7f1 fb96 	bl	80005f8 <__aeabi_dmul>
 800eecc:	4602      	mov	r2, r0
 800eece:	460b      	mov	r3, r1
 800eed0:	4630      	mov	r0, r6
 800eed2:	4639      	mov	r1, r7
 800eed4:	f7f1 f9d8 	bl	8000288 <__aeabi_dsub>
 800eed8:	9e01      	ldr	r6, [sp, #4]
 800eeda:	9f04      	ldr	r7, [sp, #16]
 800eedc:	3630      	adds	r6, #48	; 0x30
 800eede:	f805 6b01 	strb.w	r6, [r5], #1
 800eee2:	9e00      	ldr	r6, [sp, #0]
 800eee4:	1bae      	subs	r6, r5, r6
 800eee6:	42b7      	cmp	r7, r6
 800eee8:	4602      	mov	r2, r0
 800eeea:	460b      	mov	r3, r1
 800eeec:	d134      	bne.n	800ef58 <_dtoa_r+0x708>
 800eeee:	f7f1 f9cd 	bl	800028c <__adddf3>
 800eef2:	4642      	mov	r2, r8
 800eef4:	464b      	mov	r3, r9
 800eef6:	4606      	mov	r6, r0
 800eef8:	460f      	mov	r7, r1
 800eefa:	f7f1 fe0d 	bl	8000b18 <__aeabi_dcmpgt>
 800eefe:	b9c8      	cbnz	r0, 800ef34 <_dtoa_r+0x6e4>
 800ef00:	4642      	mov	r2, r8
 800ef02:	464b      	mov	r3, r9
 800ef04:	4630      	mov	r0, r6
 800ef06:	4639      	mov	r1, r7
 800ef08:	f7f1 fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef0c:	b110      	cbz	r0, 800ef14 <_dtoa_r+0x6c4>
 800ef0e:	9b01      	ldr	r3, [sp, #4]
 800ef10:	07db      	lsls	r3, r3, #31
 800ef12:	d40f      	bmi.n	800ef34 <_dtoa_r+0x6e4>
 800ef14:	4651      	mov	r1, sl
 800ef16:	4620      	mov	r0, r4
 800ef18:	f000 fb18 	bl	800f54c <_Bfree>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef20:	702b      	strb	r3, [r5, #0]
 800ef22:	f10b 0301 	add.w	r3, fp, #1
 800ef26:	6013      	str	r3, [r2, #0]
 800ef28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f43f ace2 	beq.w	800e8f4 <_dtoa_r+0xa4>
 800ef30:	601d      	str	r5, [r3, #0]
 800ef32:	e4df      	b.n	800e8f4 <_dtoa_r+0xa4>
 800ef34:	465f      	mov	r7, fp
 800ef36:	462b      	mov	r3, r5
 800ef38:	461d      	mov	r5, r3
 800ef3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef3e:	2a39      	cmp	r2, #57	; 0x39
 800ef40:	d106      	bne.n	800ef50 <_dtoa_r+0x700>
 800ef42:	9a00      	ldr	r2, [sp, #0]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d1f7      	bne.n	800ef38 <_dtoa_r+0x6e8>
 800ef48:	9900      	ldr	r1, [sp, #0]
 800ef4a:	2230      	movs	r2, #48	; 0x30
 800ef4c:	3701      	adds	r7, #1
 800ef4e:	700a      	strb	r2, [r1, #0]
 800ef50:	781a      	ldrb	r2, [r3, #0]
 800ef52:	3201      	adds	r2, #1
 800ef54:	701a      	strb	r2, [r3, #0]
 800ef56:	e790      	b.n	800ee7a <_dtoa_r+0x62a>
 800ef58:	4ba3      	ldr	r3, [pc, #652]	; (800f1e8 <_dtoa_r+0x998>)
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f7f1 fb4c 	bl	80005f8 <__aeabi_dmul>
 800ef60:	2200      	movs	r2, #0
 800ef62:	2300      	movs	r3, #0
 800ef64:	4606      	mov	r6, r0
 800ef66:	460f      	mov	r7, r1
 800ef68:	f7f1 fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	d09e      	beq.n	800eeae <_dtoa_r+0x65e>
 800ef70:	e7d0      	b.n	800ef14 <_dtoa_r+0x6c4>
 800ef72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef74:	2a00      	cmp	r2, #0
 800ef76:	f000 80ca 	beq.w	800f10e <_dtoa_r+0x8be>
 800ef7a:	9a07      	ldr	r2, [sp, #28]
 800ef7c:	2a01      	cmp	r2, #1
 800ef7e:	f300 80ad 	bgt.w	800f0dc <_dtoa_r+0x88c>
 800ef82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef84:	2a00      	cmp	r2, #0
 800ef86:	f000 80a5 	beq.w	800f0d4 <_dtoa_r+0x884>
 800ef8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef8e:	9e08      	ldr	r6, [sp, #32]
 800ef90:	9d05      	ldr	r5, [sp, #20]
 800ef92:	9a05      	ldr	r2, [sp, #20]
 800ef94:	441a      	add	r2, r3
 800ef96:	9205      	str	r2, [sp, #20]
 800ef98:	9a06      	ldr	r2, [sp, #24]
 800ef9a:	2101      	movs	r1, #1
 800ef9c:	441a      	add	r2, r3
 800ef9e:	4620      	mov	r0, r4
 800efa0:	9206      	str	r2, [sp, #24]
 800efa2:	f000 fbd3 	bl	800f74c <__i2b>
 800efa6:	4607      	mov	r7, r0
 800efa8:	b165      	cbz	r5, 800efc4 <_dtoa_r+0x774>
 800efaa:	9b06      	ldr	r3, [sp, #24]
 800efac:	2b00      	cmp	r3, #0
 800efae:	dd09      	ble.n	800efc4 <_dtoa_r+0x774>
 800efb0:	42ab      	cmp	r3, r5
 800efb2:	9a05      	ldr	r2, [sp, #20]
 800efb4:	bfa8      	it	ge
 800efb6:	462b      	movge	r3, r5
 800efb8:	1ad2      	subs	r2, r2, r3
 800efba:	9205      	str	r2, [sp, #20]
 800efbc:	9a06      	ldr	r2, [sp, #24]
 800efbe:	1aed      	subs	r5, r5, r3
 800efc0:	1ad3      	subs	r3, r2, r3
 800efc2:	9306      	str	r3, [sp, #24]
 800efc4:	9b08      	ldr	r3, [sp, #32]
 800efc6:	b1f3      	cbz	r3, 800f006 <_dtoa_r+0x7b6>
 800efc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f000 80a3 	beq.w	800f116 <_dtoa_r+0x8c6>
 800efd0:	2e00      	cmp	r6, #0
 800efd2:	dd10      	ble.n	800eff6 <_dtoa_r+0x7a6>
 800efd4:	4639      	mov	r1, r7
 800efd6:	4632      	mov	r2, r6
 800efd8:	4620      	mov	r0, r4
 800efda:	f000 fc77 	bl	800f8cc <__pow5mult>
 800efde:	4652      	mov	r2, sl
 800efe0:	4601      	mov	r1, r0
 800efe2:	4607      	mov	r7, r0
 800efe4:	4620      	mov	r0, r4
 800efe6:	f000 fbc7 	bl	800f778 <__multiply>
 800efea:	4651      	mov	r1, sl
 800efec:	4680      	mov	r8, r0
 800efee:	4620      	mov	r0, r4
 800eff0:	f000 faac 	bl	800f54c <_Bfree>
 800eff4:	46c2      	mov	sl, r8
 800eff6:	9b08      	ldr	r3, [sp, #32]
 800eff8:	1b9a      	subs	r2, r3, r6
 800effa:	d004      	beq.n	800f006 <_dtoa_r+0x7b6>
 800effc:	4651      	mov	r1, sl
 800effe:	4620      	mov	r0, r4
 800f000:	f000 fc64 	bl	800f8cc <__pow5mult>
 800f004:	4682      	mov	sl, r0
 800f006:	2101      	movs	r1, #1
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 fb9f 	bl	800f74c <__i2b>
 800f00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f010:	2b00      	cmp	r3, #0
 800f012:	4606      	mov	r6, r0
 800f014:	f340 8081 	ble.w	800f11a <_dtoa_r+0x8ca>
 800f018:	461a      	mov	r2, r3
 800f01a:	4601      	mov	r1, r0
 800f01c:	4620      	mov	r0, r4
 800f01e:	f000 fc55 	bl	800f8cc <__pow5mult>
 800f022:	9b07      	ldr	r3, [sp, #28]
 800f024:	2b01      	cmp	r3, #1
 800f026:	4606      	mov	r6, r0
 800f028:	dd7a      	ble.n	800f120 <_dtoa_r+0x8d0>
 800f02a:	f04f 0800 	mov.w	r8, #0
 800f02e:	6933      	ldr	r3, [r6, #16]
 800f030:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f034:	6918      	ldr	r0, [r3, #16]
 800f036:	f000 fb3b 	bl	800f6b0 <__hi0bits>
 800f03a:	f1c0 0020 	rsb	r0, r0, #32
 800f03e:	9b06      	ldr	r3, [sp, #24]
 800f040:	4418      	add	r0, r3
 800f042:	f010 001f 	ands.w	r0, r0, #31
 800f046:	f000 8094 	beq.w	800f172 <_dtoa_r+0x922>
 800f04a:	f1c0 0320 	rsb	r3, r0, #32
 800f04e:	2b04      	cmp	r3, #4
 800f050:	f340 8085 	ble.w	800f15e <_dtoa_r+0x90e>
 800f054:	9b05      	ldr	r3, [sp, #20]
 800f056:	f1c0 001c 	rsb	r0, r0, #28
 800f05a:	4403      	add	r3, r0
 800f05c:	9305      	str	r3, [sp, #20]
 800f05e:	9b06      	ldr	r3, [sp, #24]
 800f060:	4403      	add	r3, r0
 800f062:	4405      	add	r5, r0
 800f064:	9306      	str	r3, [sp, #24]
 800f066:	9b05      	ldr	r3, [sp, #20]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	dd05      	ble.n	800f078 <_dtoa_r+0x828>
 800f06c:	4651      	mov	r1, sl
 800f06e:	461a      	mov	r2, r3
 800f070:	4620      	mov	r0, r4
 800f072:	f000 fc85 	bl	800f980 <__lshift>
 800f076:	4682      	mov	sl, r0
 800f078:	9b06      	ldr	r3, [sp, #24]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	dd05      	ble.n	800f08a <_dtoa_r+0x83a>
 800f07e:	4631      	mov	r1, r6
 800f080:	461a      	mov	r2, r3
 800f082:	4620      	mov	r0, r4
 800f084:	f000 fc7c 	bl	800f980 <__lshift>
 800f088:	4606      	mov	r6, r0
 800f08a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d072      	beq.n	800f176 <_dtoa_r+0x926>
 800f090:	4631      	mov	r1, r6
 800f092:	4650      	mov	r0, sl
 800f094:	f000 fce0 	bl	800fa58 <__mcmp>
 800f098:	2800      	cmp	r0, #0
 800f09a:	da6c      	bge.n	800f176 <_dtoa_r+0x926>
 800f09c:	2300      	movs	r3, #0
 800f09e:	4651      	mov	r1, sl
 800f0a0:	220a      	movs	r2, #10
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	f000 fa74 	bl	800f590 <__multadd>
 800f0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0ae:	4682      	mov	sl, r0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f000 81b0 	beq.w	800f416 <_dtoa_r+0xbc6>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	4639      	mov	r1, r7
 800f0ba:	220a      	movs	r2, #10
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f000 fa67 	bl	800f590 <__multadd>
 800f0c2:	9b01      	ldr	r3, [sp, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	4607      	mov	r7, r0
 800f0c8:	f300 8096 	bgt.w	800f1f8 <_dtoa_r+0x9a8>
 800f0cc:	9b07      	ldr	r3, [sp, #28]
 800f0ce:	2b02      	cmp	r3, #2
 800f0d0:	dc59      	bgt.n	800f186 <_dtoa_r+0x936>
 800f0d2:	e091      	b.n	800f1f8 <_dtoa_r+0x9a8>
 800f0d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f0da:	e758      	b.n	800ef8e <_dtoa_r+0x73e>
 800f0dc:	9b04      	ldr	r3, [sp, #16]
 800f0de:	1e5e      	subs	r6, r3, #1
 800f0e0:	9b08      	ldr	r3, [sp, #32]
 800f0e2:	42b3      	cmp	r3, r6
 800f0e4:	bfbf      	itttt	lt
 800f0e6:	9b08      	ldrlt	r3, [sp, #32]
 800f0e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f0ea:	9608      	strlt	r6, [sp, #32]
 800f0ec:	1af3      	sublt	r3, r6, r3
 800f0ee:	bfb4      	ite	lt
 800f0f0:	18d2      	addlt	r2, r2, r3
 800f0f2:	1b9e      	subge	r6, r3, r6
 800f0f4:	9b04      	ldr	r3, [sp, #16]
 800f0f6:	bfbc      	itt	lt
 800f0f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f0fa:	2600      	movlt	r6, #0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	bfb7      	itett	lt
 800f100:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f104:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f108:	1a9d      	sublt	r5, r3, r2
 800f10a:	2300      	movlt	r3, #0
 800f10c:	e741      	b.n	800ef92 <_dtoa_r+0x742>
 800f10e:	9e08      	ldr	r6, [sp, #32]
 800f110:	9d05      	ldr	r5, [sp, #20]
 800f112:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f114:	e748      	b.n	800efa8 <_dtoa_r+0x758>
 800f116:	9a08      	ldr	r2, [sp, #32]
 800f118:	e770      	b.n	800effc <_dtoa_r+0x7ac>
 800f11a:	9b07      	ldr	r3, [sp, #28]
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	dc19      	bgt.n	800f154 <_dtoa_r+0x904>
 800f120:	9b02      	ldr	r3, [sp, #8]
 800f122:	b9bb      	cbnz	r3, 800f154 <_dtoa_r+0x904>
 800f124:	9b03      	ldr	r3, [sp, #12]
 800f126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f12a:	b99b      	cbnz	r3, 800f154 <_dtoa_r+0x904>
 800f12c:	9b03      	ldr	r3, [sp, #12]
 800f12e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f132:	0d1b      	lsrs	r3, r3, #20
 800f134:	051b      	lsls	r3, r3, #20
 800f136:	b183      	cbz	r3, 800f15a <_dtoa_r+0x90a>
 800f138:	9b05      	ldr	r3, [sp, #20]
 800f13a:	3301      	adds	r3, #1
 800f13c:	9305      	str	r3, [sp, #20]
 800f13e:	9b06      	ldr	r3, [sp, #24]
 800f140:	3301      	adds	r3, #1
 800f142:	9306      	str	r3, [sp, #24]
 800f144:	f04f 0801 	mov.w	r8, #1
 800f148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f47f af6f 	bne.w	800f02e <_dtoa_r+0x7de>
 800f150:	2001      	movs	r0, #1
 800f152:	e774      	b.n	800f03e <_dtoa_r+0x7ee>
 800f154:	f04f 0800 	mov.w	r8, #0
 800f158:	e7f6      	b.n	800f148 <_dtoa_r+0x8f8>
 800f15a:	4698      	mov	r8, r3
 800f15c:	e7f4      	b.n	800f148 <_dtoa_r+0x8f8>
 800f15e:	d082      	beq.n	800f066 <_dtoa_r+0x816>
 800f160:	9a05      	ldr	r2, [sp, #20]
 800f162:	331c      	adds	r3, #28
 800f164:	441a      	add	r2, r3
 800f166:	9205      	str	r2, [sp, #20]
 800f168:	9a06      	ldr	r2, [sp, #24]
 800f16a:	441a      	add	r2, r3
 800f16c:	441d      	add	r5, r3
 800f16e:	9206      	str	r2, [sp, #24]
 800f170:	e779      	b.n	800f066 <_dtoa_r+0x816>
 800f172:	4603      	mov	r3, r0
 800f174:	e7f4      	b.n	800f160 <_dtoa_r+0x910>
 800f176:	9b04      	ldr	r3, [sp, #16]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	dc37      	bgt.n	800f1ec <_dtoa_r+0x99c>
 800f17c:	9b07      	ldr	r3, [sp, #28]
 800f17e:	2b02      	cmp	r3, #2
 800f180:	dd34      	ble.n	800f1ec <_dtoa_r+0x99c>
 800f182:	9b04      	ldr	r3, [sp, #16]
 800f184:	9301      	str	r3, [sp, #4]
 800f186:	9b01      	ldr	r3, [sp, #4]
 800f188:	b963      	cbnz	r3, 800f1a4 <_dtoa_r+0x954>
 800f18a:	4631      	mov	r1, r6
 800f18c:	2205      	movs	r2, #5
 800f18e:	4620      	mov	r0, r4
 800f190:	f000 f9fe 	bl	800f590 <__multadd>
 800f194:	4601      	mov	r1, r0
 800f196:	4606      	mov	r6, r0
 800f198:	4650      	mov	r0, sl
 800f19a:	f000 fc5d 	bl	800fa58 <__mcmp>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	f73f adbb 	bgt.w	800ed1a <_dtoa_r+0x4ca>
 800f1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1a6:	9d00      	ldr	r5, [sp, #0]
 800f1a8:	ea6f 0b03 	mvn.w	fp, r3
 800f1ac:	f04f 0800 	mov.w	r8, #0
 800f1b0:	4631      	mov	r1, r6
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f000 f9ca 	bl	800f54c <_Bfree>
 800f1b8:	2f00      	cmp	r7, #0
 800f1ba:	f43f aeab 	beq.w	800ef14 <_dtoa_r+0x6c4>
 800f1be:	f1b8 0f00 	cmp.w	r8, #0
 800f1c2:	d005      	beq.n	800f1d0 <_dtoa_r+0x980>
 800f1c4:	45b8      	cmp	r8, r7
 800f1c6:	d003      	beq.n	800f1d0 <_dtoa_r+0x980>
 800f1c8:	4641      	mov	r1, r8
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	f000 f9be 	bl	800f54c <_Bfree>
 800f1d0:	4639      	mov	r1, r7
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f000 f9ba 	bl	800f54c <_Bfree>
 800f1d8:	e69c      	b.n	800ef14 <_dtoa_r+0x6c4>
 800f1da:	2600      	movs	r6, #0
 800f1dc:	4637      	mov	r7, r6
 800f1de:	e7e1      	b.n	800f1a4 <_dtoa_r+0x954>
 800f1e0:	46bb      	mov	fp, r7
 800f1e2:	4637      	mov	r7, r6
 800f1e4:	e599      	b.n	800ed1a <_dtoa_r+0x4ca>
 800f1e6:	bf00      	nop
 800f1e8:	40240000 	.word	0x40240000
 800f1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f000 80c8 	beq.w	800f384 <_dtoa_r+0xb34>
 800f1f4:	9b04      	ldr	r3, [sp, #16]
 800f1f6:	9301      	str	r3, [sp, #4]
 800f1f8:	2d00      	cmp	r5, #0
 800f1fa:	dd05      	ble.n	800f208 <_dtoa_r+0x9b8>
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	462a      	mov	r2, r5
 800f200:	4620      	mov	r0, r4
 800f202:	f000 fbbd 	bl	800f980 <__lshift>
 800f206:	4607      	mov	r7, r0
 800f208:	f1b8 0f00 	cmp.w	r8, #0
 800f20c:	d05b      	beq.n	800f2c6 <_dtoa_r+0xa76>
 800f20e:	6879      	ldr	r1, [r7, #4]
 800f210:	4620      	mov	r0, r4
 800f212:	f000 f95b 	bl	800f4cc <_Balloc>
 800f216:	4605      	mov	r5, r0
 800f218:	b928      	cbnz	r0, 800f226 <_dtoa_r+0x9d6>
 800f21a:	4b83      	ldr	r3, [pc, #524]	; (800f428 <_dtoa_r+0xbd8>)
 800f21c:	4602      	mov	r2, r0
 800f21e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f222:	f7ff bb2e 	b.w	800e882 <_dtoa_r+0x32>
 800f226:	693a      	ldr	r2, [r7, #16]
 800f228:	3202      	adds	r2, #2
 800f22a:	0092      	lsls	r2, r2, #2
 800f22c:	f107 010c 	add.w	r1, r7, #12
 800f230:	300c      	adds	r0, #12
 800f232:	f7ff fa70 	bl	800e716 <memcpy>
 800f236:	2201      	movs	r2, #1
 800f238:	4629      	mov	r1, r5
 800f23a:	4620      	mov	r0, r4
 800f23c:	f000 fba0 	bl	800f980 <__lshift>
 800f240:	9b00      	ldr	r3, [sp, #0]
 800f242:	3301      	adds	r3, #1
 800f244:	9304      	str	r3, [sp, #16]
 800f246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f24a:	4413      	add	r3, r2
 800f24c:	9308      	str	r3, [sp, #32]
 800f24e:	9b02      	ldr	r3, [sp, #8]
 800f250:	f003 0301 	and.w	r3, r3, #1
 800f254:	46b8      	mov	r8, r7
 800f256:	9306      	str	r3, [sp, #24]
 800f258:	4607      	mov	r7, r0
 800f25a:	9b04      	ldr	r3, [sp, #16]
 800f25c:	4631      	mov	r1, r6
 800f25e:	3b01      	subs	r3, #1
 800f260:	4650      	mov	r0, sl
 800f262:	9301      	str	r3, [sp, #4]
 800f264:	f7ff fa6c 	bl	800e740 <quorem>
 800f268:	4641      	mov	r1, r8
 800f26a:	9002      	str	r0, [sp, #8]
 800f26c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f270:	4650      	mov	r0, sl
 800f272:	f000 fbf1 	bl	800fa58 <__mcmp>
 800f276:	463a      	mov	r2, r7
 800f278:	9005      	str	r0, [sp, #20]
 800f27a:	4631      	mov	r1, r6
 800f27c:	4620      	mov	r0, r4
 800f27e:	f000 fc07 	bl	800fa90 <__mdiff>
 800f282:	68c2      	ldr	r2, [r0, #12]
 800f284:	4605      	mov	r5, r0
 800f286:	bb02      	cbnz	r2, 800f2ca <_dtoa_r+0xa7a>
 800f288:	4601      	mov	r1, r0
 800f28a:	4650      	mov	r0, sl
 800f28c:	f000 fbe4 	bl	800fa58 <__mcmp>
 800f290:	4602      	mov	r2, r0
 800f292:	4629      	mov	r1, r5
 800f294:	4620      	mov	r0, r4
 800f296:	9209      	str	r2, [sp, #36]	; 0x24
 800f298:	f000 f958 	bl	800f54c <_Bfree>
 800f29c:	9b07      	ldr	r3, [sp, #28]
 800f29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2a0:	9d04      	ldr	r5, [sp, #16]
 800f2a2:	ea43 0102 	orr.w	r1, r3, r2
 800f2a6:	9b06      	ldr	r3, [sp, #24]
 800f2a8:	4319      	orrs	r1, r3
 800f2aa:	d110      	bne.n	800f2ce <_dtoa_r+0xa7e>
 800f2ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f2b0:	d029      	beq.n	800f306 <_dtoa_r+0xab6>
 800f2b2:	9b05      	ldr	r3, [sp, #20]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	dd02      	ble.n	800f2be <_dtoa_r+0xa6e>
 800f2b8:	9b02      	ldr	r3, [sp, #8]
 800f2ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f2be:	9b01      	ldr	r3, [sp, #4]
 800f2c0:	f883 9000 	strb.w	r9, [r3]
 800f2c4:	e774      	b.n	800f1b0 <_dtoa_r+0x960>
 800f2c6:	4638      	mov	r0, r7
 800f2c8:	e7ba      	b.n	800f240 <_dtoa_r+0x9f0>
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	e7e1      	b.n	800f292 <_dtoa_r+0xa42>
 800f2ce:	9b05      	ldr	r3, [sp, #20]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	db04      	blt.n	800f2de <_dtoa_r+0xa8e>
 800f2d4:	9907      	ldr	r1, [sp, #28]
 800f2d6:	430b      	orrs	r3, r1
 800f2d8:	9906      	ldr	r1, [sp, #24]
 800f2da:	430b      	orrs	r3, r1
 800f2dc:	d120      	bne.n	800f320 <_dtoa_r+0xad0>
 800f2de:	2a00      	cmp	r2, #0
 800f2e0:	dded      	ble.n	800f2be <_dtoa_r+0xa6e>
 800f2e2:	4651      	mov	r1, sl
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f000 fb4a 	bl	800f980 <__lshift>
 800f2ec:	4631      	mov	r1, r6
 800f2ee:	4682      	mov	sl, r0
 800f2f0:	f000 fbb2 	bl	800fa58 <__mcmp>
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	dc03      	bgt.n	800f300 <_dtoa_r+0xab0>
 800f2f8:	d1e1      	bne.n	800f2be <_dtoa_r+0xa6e>
 800f2fa:	f019 0f01 	tst.w	r9, #1
 800f2fe:	d0de      	beq.n	800f2be <_dtoa_r+0xa6e>
 800f300:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f304:	d1d8      	bne.n	800f2b8 <_dtoa_r+0xa68>
 800f306:	9a01      	ldr	r2, [sp, #4]
 800f308:	2339      	movs	r3, #57	; 0x39
 800f30a:	7013      	strb	r3, [r2, #0]
 800f30c:	462b      	mov	r3, r5
 800f30e:	461d      	mov	r5, r3
 800f310:	3b01      	subs	r3, #1
 800f312:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f316:	2a39      	cmp	r2, #57	; 0x39
 800f318:	d06c      	beq.n	800f3f4 <_dtoa_r+0xba4>
 800f31a:	3201      	adds	r2, #1
 800f31c:	701a      	strb	r2, [r3, #0]
 800f31e:	e747      	b.n	800f1b0 <_dtoa_r+0x960>
 800f320:	2a00      	cmp	r2, #0
 800f322:	dd07      	ble.n	800f334 <_dtoa_r+0xae4>
 800f324:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f328:	d0ed      	beq.n	800f306 <_dtoa_r+0xab6>
 800f32a:	9a01      	ldr	r2, [sp, #4]
 800f32c:	f109 0301 	add.w	r3, r9, #1
 800f330:	7013      	strb	r3, [r2, #0]
 800f332:	e73d      	b.n	800f1b0 <_dtoa_r+0x960>
 800f334:	9b04      	ldr	r3, [sp, #16]
 800f336:	9a08      	ldr	r2, [sp, #32]
 800f338:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d043      	beq.n	800f3c8 <_dtoa_r+0xb78>
 800f340:	4651      	mov	r1, sl
 800f342:	2300      	movs	r3, #0
 800f344:	220a      	movs	r2, #10
 800f346:	4620      	mov	r0, r4
 800f348:	f000 f922 	bl	800f590 <__multadd>
 800f34c:	45b8      	cmp	r8, r7
 800f34e:	4682      	mov	sl, r0
 800f350:	f04f 0300 	mov.w	r3, #0
 800f354:	f04f 020a 	mov.w	r2, #10
 800f358:	4641      	mov	r1, r8
 800f35a:	4620      	mov	r0, r4
 800f35c:	d107      	bne.n	800f36e <_dtoa_r+0xb1e>
 800f35e:	f000 f917 	bl	800f590 <__multadd>
 800f362:	4680      	mov	r8, r0
 800f364:	4607      	mov	r7, r0
 800f366:	9b04      	ldr	r3, [sp, #16]
 800f368:	3301      	adds	r3, #1
 800f36a:	9304      	str	r3, [sp, #16]
 800f36c:	e775      	b.n	800f25a <_dtoa_r+0xa0a>
 800f36e:	f000 f90f 	bl	800f590 <__multadd>
 800f372:	4639      	mov	r1, r7
 800f374:	4680      	mov	r8, r0
 800f376:	2300      	movs	r3, #0
 800f378:	220a      	movs	r2, #10
 800f37a:	4620      	mov	r0, r4
 800f37c:	f000 f908 	bl	800f590 <__multadd>
 800f380:	4607      	mov	r7, r0
 800f382:	e7f0      	b.n	800f366 <_dtoa_r+0xb16>
 800f384:	9b04      	ldr	r3, [sp, #16]
 800f386:	9301      	str	r3, [sp, #4]
 800f388:	9d00      	ldr	r5, [sp, #0]
 800f38a:	4631      	mov	r1, r6
 800f38c:	4650      	mov	r0, sl
 800f38e:	f7ff f9d7 	bl	800e740 <quorem>
 800f392:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f396:	9b00      	ldr	r3, [sp, #0]
 800f398:	f805 9b01 	strb.w	r9, [r5], #1
 800f39c:	1aea      	subs	r2, r5, r3
 800f39e:	9b01      	ldr	r3, [sp, #4]
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	dd07      	ble.n	800f3b4 <_dtoa_r+0xb64>
 800f3a4:	4651      	mov	r1, sl
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	220a      	movs	r2, #10
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	f000 f8f0 	bl	800f590 <__multadd>
 800f3b0:	4682      	mov	sl, r0
 800f3b2:	e7ea      	b.n	800f38a <_dtoa_r+0xb3a>
 800f3b4:	9b01      	ldr	r3, [sp, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	bfc8      	it	gt
 800f3ba:	461d      	movgt	r5, r3
 800f3bc:	9b00      	ldr	r3, [sp, #0]
 800f3be:	bfd8      	it	le
 800f3c0:	2501      	movle	r5, #1
 800f3c2:	441d      	add	r5, r3
 800f3c4:	f04f 0800 	mov.w	r8, #0
 800f3c8:	4651      	mov	r1, sl
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f000 fad7 	bl	800f980 <__lshift>
 800f3d2:	4631      	mov	r1, r6
 800f3d4:	4682      	mov	sl, r0
 800f3d6:	f000 fb3f 	bl	800fa58 <__mcmp>
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	dc96      	bgt.n	800f30c <_dtoa_r+0xabc>
 800f3de:	d102      	bne.n	800f3e6 <_dtoa_r+0xb96>
 800f3e0:	f019 0f01 	tst.w	r9, #1
 800f3e4:	d192      	bne.n	800f30c <_dtoa_r+0xabc>
 800f3e6:	462b      	mov	r3, r5
 800f3e8:	461d      	mov	r5, r3
 800f3ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3ee:	2a30      	cmp	r2, #48	; 0x30
 800f3f0:	d0fa      	beq.n	800f3e8 <_dtoa_r+0xb98>
 800f3f2:	e6dd      	b.n	800f1b0 <_dtoa_r+0x960>
 800f3f4:	9a00      	ldr	r2, [sp, #0]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d189      	bne.n	800f30e <_dtoa_r+0xabe>
 800f3fa:	f10b 0b01 	add.w	fp, fp, #1
 800f3fe:	2331      	movs	r3, #49	; 0x31
 800f400:	e796      	b.n	800f330 <_dtoa_r+0xae0>
 800f402:	4b0a      	ldr	r3, [pc, #40]	; (800f42c <_dtoa_r+0xbdc>)
 800f404:	f7ff ba99 	b.w	800e93a <_dtoa_r+0xea>
 800f408:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f47f aa6d 	bne.w	800e8ea <_dtoa_r+0x9a>
 800f410:	4b07      	ldr	r3, [pc, #28]	; (800f430 <_dtoa_r+0xbe0>)
 800f412:	f7ff ba92 	b.w	800e93a <_dtoa_r+0xea>
 800f416:	9b01      	ldr	r3, [sp, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dcb5      	bgt.n	800f388 <_dtoa_r+0xb38>
 800f41c:	9b07      	ldr	r3, [sp, #28]
 800f41e:	2b02      	cmp	r3, #2
 800f420:	f73f aeb1 	bgt.w	800f186 <_dtoa_r+0x936>
 800f424:	e7b0      	b.n	800f388 <_dtoa_r+0xb38>
 800f426:	bf00      	nop
 800f428:	0801267f 	.word	0x0801267f
 800f42c:	08012968 	.word	0x08012968
 800f430:	08012603 	.word	0x08012603

0800f434 <_free_r>:
 800f434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f436:	2900      	cmp	r1, #0
 800f438:	d044      	beq.n	800f4c4 <_free_r+0x90>
 800f43a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f43e:	9001      	str	r0, [sp, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	f1a1 0404 	sub.w	r4, r1, #4
 800f446:	bfb8      	it	lt
 800f448:	18e4      	addlt	r4, r4, r3
 800f44a:	f7fe f8bd 	bl	800d5c8 <__malloc_lock>
 800f44e:	4a1e      	ldr	r2, [pc, #120]	; (800f4c8 <_free_r+0x94>)
 800f450:	9801      	ldr	r0, [sp, #4]
 800f452:	6813      	ldr	r3, [r2, #0]
 800f454:	b933      	cbnz	r3, 800f464 <_free_r+0x30>
 800f456:	6063      	str	r3, [r4, #4]
 800f458:	6014      	str	r4, [r2, #0]
 800f45a:	b003      	add	sp, #12
 800f45c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f460:	f7fe b8b8 	b.w	800d5d4 <__malloc_unlock>
 800f464:	42a3      	cmp	r3, r4
 800f466:	d908      	bls.n	800f47a <_free_r+0x46>
 800f468:	6825      	ldr	r5, [r4, #0]
 800f46a:	1961      	adds	r1, r4, r5
 800f46c:	428b      	cmp	r3, r1
 800f46e:	bf01      	itttt	eq
 800f470:	6819      	ldreq	r1, [r3, #0]
 800f472:	685b      	ldreq	r3, [r3, #4]
 800f474:	1949      	addeq	r1, r1, r5
 800f476:	6021      	streq	r1, [r4, #0]
 800f478:	e7ed      	b.n	800f456 <_free_r+0x22>
 800f47a:	461a      	mov	r2, r3
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	b10b      	cbz	r3, 800f484 <_free_r+0x50>
 800f480:	42a3      	cmp	r3, r4
 800f482:	d9fa      	bls.n	800f47a <_free_r+0x46>
 800f484:	6811      	ldr	r1, [r2, #0]
 800f486:	1855      	adds	r5, r2, r1
 800f488:	42a5      	cmp	r5, r4
 800f48a:	d10b      	bne.n	800f4a4 <_free_r+0x70>
 800f48c:	6824      	ldr	r4, [r4, #0]
 800f48e:	4421      	add	r1, r4
 800f490:	1854      	adds	r4, r2, r1
 800f492:	42a3      	cmp	r3, r4
 800f494:	6011      	str	r1, [r2, #0]
 800f496:	d1e0      	bne.n	800f45a <_free_r+0x26>
 800f498:	681c      	ldr	r4, [r3, #0]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	6053      	str	r3, [r2, #4]
 800f49e:	440c      	add	r4, r1
 800f4a0:	6014      	str	r4, [r2, #0]
 800f4a2:	e7da      	b.n	800f45a <_free_r+0x26>
 800f4a4:	d902      	bls.n	800f4ac <_free_r+0x78>
 800f4a6:	230c      	movs	r3, #12
 800f4a8:	6003      	str	r3, [r0, #0]
 800f4aa:	e7d6      	b.n	800f45a <_free_r+0x26>
 800f4ac:	6825      	ldr	r5, [r4, #0]
 800f4ae:	1961      	adds	r1, r4, r5
 800f4b0:	428b      	cmp	r3, r1
 800f4b2:	bf04      	itt	eq
 800f4b4:	6819      	ldreq	r1, [r3, #0]
 800f4b6:	685b      	ldreq	r3, [r3, #4]
 800f4b8:	6063      	str	r3, [r4, #4]
 800f4ba:	bf04      	itt	eq
 800f4bc:	1949      	addeq	r1, r1, r5
 800f4be:	6021      	streq	r1, [r4, #0]
 800f4c0:	6054      	str	r4, [r2, #4]
 800f4c2:	e7ca      	b.n	800f45a <_free_r+0x26>
 800f4c4:	b003      	add	sp, #12
 800f4c6:	bd30      	pop	{r4, r5, pc}
 800f4c8:	20000fa0 	.word	0x20000fa0

0800f4cc <_Balloc>:
 800f4cc:	b570      	push	{r4, r5, r6, lr}
 800f4ce:	69c6      	ldr	r6, [r0, #28]
 800f4d0:	4604      	mov	r4, r0
 800f4d2:	460d      	mov	r5, r1
 800f4d4:	b976      	cbnz	r6, 800f4f4 <_Balloc+0x28>
 800f4d6:	2010      	movs	r0, #16
 800f4d8:	f7fd ffc6 	bl	800d468 <malloc>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	61e0      	str	r0, [r4, #28]
 800f4e0:	b920      	cbnz	r0, 800f4ec <_Balloc+0x20>
 800f4e2:	4b18      	ldr	r3, [pc, #96]	; (800f544 <_Balloc+0x78>)
 800f4e4:	4818      	ldr	r0, [pc, #96]	; (800f548 <_Balloc+0x7c>)
 800f4e6:	216b      	movs	r1, #107	; 0x6b
 800f4e8:	f002 f90e 	bl	8011708 <__assert_func>
 800f4ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4f0:	6006      	str	r6, [r0, #0]
 800f4f2:	60c6      	str	r6, [r0, #12]
 800f4f4:	69e6      	ldr	r6, [r4, #28]
 800f4f6:	68f3      	ldr	r3, [r6, #12]
 800f4f8:	b183      	cbz	r3, 800f51c <_Balloc+0x50>
 800f4fa:	69e3      	ldr	r3, [r4, #28]
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f502:	b9b8      	cbnz	r0, 800f534 <_Balloc+0x68>
 800f504:	2101      	movs	r1, #1
 800f506:	fa01 f605 	lsl.w	r6, r1, r5
 800f50a:	1d72      	adds	r2, r6, #5
 800f50c:	0092      	lsls	r2, r2, #2
 800f50e:	4620      	mov	r0, r4
 800f510:	f002 f918 	bl	8011744 <_calloc_r>
 800f514:	b160      	cbz	r0, 800f530 <_Balloc+0x64>
 800f516:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f51a:	e00e      	b.n	800f53a <_Balloc+0x6e>
 800f51c:	2221      	movs	r2, #33	; 0x21
 800f51e:	2104      	movs	r1, #4
 800f520:	4620      	mov	r0, r4
 800f522:	f002 f90f 	bl	8011744 <_calloc_r>
 800f526:	69e3      	ldr	r3, [r4, #28]
 800f528:	60f0      	str	r0, [r6, #12]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d1e4      	bne.n	800f4fa <_Balloc+0x2e>
 800f530:	2000      	movs	r0, #0
 800f532:	bd70      	pop	{r4, r5, r6, pc}
 800f534:	6802      	ldr	r2, [r0, #0]
 800f536:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f53a:	2300      	movs	r3, #0
 800f53c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f540:	e7f7      	b.n	800f532 <_Balloc+0x66>
 800f542:	bf00      	nop
 800f544:	08012610 	.word	0x08012610
 800f548:	08012690 	.word	0x08012690

0800f54c <_Bfree>:
 800f54c:	b570      	push	{r4, r5, r6, lr}
 800f54e:	69c6      	ldr	r6, [r0, #28]
 800f550:	4605      	mov	r5, r0
 800f552:	460c      	mov	r4, r1
 800f554:	b976      	cbnz	r6, 800f574 <_Bfree+0x28>
 800f556:	2010      	movs	r0, #16
 800f558:	f7fd ff86 	bl	800d468 <malloc>
 800f55c:	4602      	mov	r2, r0
 800f55e:	61e8      	str	r0, [r5, #28]
 800f560:	b920      	cbnz	r0, 800f56c <_Bfree+0x20>
 800f562:	4b09      	ldr	r3, [pc, #36]	; (800f588 <_Bfree+0x3c>)
 800f564:	4809      	ldr	r0, [pc, #36]	; (800f58c <_Bfree+0x40>)
 800f566:	218f      	movs	r1, #143	; 0x8f
 800f568:	f002 f8ce 	bl	8011708 <__assert_func>
 800f56c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f570:	6006      	str	r6, [r0, #0]
 800f572:	60c6      	str	r6, [r0, #12]
 800f574:	b13c      	cbz	r4, 800f586 <_Bfree+0x3a>
 800f576:	69eb      	ldr	r3, [r5, #28]
 800f578:	6862      	ldr	r2, [r4, #4]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f580:	6021      	str	r1, [r4, #0]
 800f582:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f586:	bd70      	pop	{r4, r5, r6, pc}
 800f588:	08012610 	.word	0x08012610
 800f58c:	08012690 	.word	0x08012690

0800f590 <__multadd>:
 800f590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f594:	690d      	ldr	r5, [r1, #16]
 800f596:	4607      	mov	r7, r0
 800f598:	460c      	mov	r4, r1
 800f59a:	461e      	mov	r6, r3
 800f59c:	f101 0c14 	add.w	ip, r1, #20
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	f8dc 3000 	ldr.w	r3, [ip]
 800f5a6:	b299      	uxth	r1, r3
 800f5a8:	fb02 6101 	mla	r1, r2, r1, r6
 800f5ac:	0c1e      	lsrs	r6, r3, #16
 800f5ae:	0c0b      	lsrs	r3, r1, #16
 800f5b0:	fb02 3306 	mla	r3, r2, r6, r3
 800f5b4:	b289      	uxth	r1, r1
 800f5b6:	3001      	adds	r0, #1
 800f5b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f5bc:	4285      	cmp	r5, r0
 800f5be:	f84c 1b04 	str.w	r1, [ip], #4
 800f5c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f5c6:	dcec      	bgt.n	800f5a2 <__multadd+0x12>
 800f5c8:	b30e      	cbz	r6, 800f60e <__multadd+0x7e>
 800f5ca:	68a3      	ldr	r3, [r4, #8]
 800f5cc:	42ab      	cmp	r3, r5
 800f5ce:	dc19      	bgt.n	800f604 <__multadd+0x74>
 800f5d0:	6861      	ldr	r1, [r4, #4]
 800f5d2:	4638      	mov	r0, r7
 800f5d4:	3101      	adds	r1, #1
 800f5d6:	f7ff ff79 	bl	800f4cc <_Balloc>
 800f5da:	4680      	mov	r8, r0
 800f5dc:	b928      	cbnz	r0, 800f5ea <__multadd+0x5a>
 800f5de:	4602      	mov	r2, r0
 800f5e0:	4b0c      	ldr	r3, [pc, #48]	; (800f614 <__multadd+0x84>)
 800f5e2:	480d      	ldr	r0, [pc, #52]	; (800f618 <__multadd+0x88>)
 800f5e4:	21ba      	movs	r1, #186	; 0xba
 800f5e6:	f002 f88f 	bl	8011708 <__assert_func>
 800f5ea:	6922      	ldr	r2, [r4, #16]
 800f5ec:	3202      	adds	r2, #2
 800f5ee:	f104 010c 	add.w	r1, r4, #12
 800f5f2:	0092      	lsls	r2, r2, #2
 800f5f4:	300c      	adds	r0, #12
 800f5f6:	f7ff f88e 	bl	800e716 <memcpy>
 800f5fa:	4621      	mov	r1, r4
 800f5fc:	4638      	mov	r0, r7
 800f5fe:	f7ff ffa5 	bl	800f54c <_Bfree>
 800f602:	4644      	mov	r4, r8
 800f604:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f608:	3501      	adds	r5, #1
 800f60a:	615e      	str	r6, [r3, #20]
 800f60c:	6125      	str	r5, [r4, #16]
 800f60e:	4620      	mov	r0, r4
 800f610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f614:	0801267f 	.word	0x0801267f
 800f618:	08012690 	.word	0x08012690

0800f61c <__s2b>:
 800f61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f620:	460c      	mov	r4, r1
 800f622:	4615      	mov	r5, r2
 800f624:	461f      	mov	r7, r3
 800f626:	2209      	movs	r2, #9
 800f628:	3308      	adds	r3, #8
 800f62a:	4606      	mov	r6, r0
 800f62c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f630:	2100      	movs	r1, #0
 800f632:	2201      	movs	r2, #1
 800f634:	429a      	cmp	r2, r3
 800f636:	db09      	blt.n	800f64c <__s2b+0x30>
 800f638:	4630      	mov	r0, r6
 800f63a:	f7ff ff47 	bl	800f4cc <_Balloc>
 800f63e:	b940      	cbnz	r0, 800f652 <__s2b+0x36>
 800f640:	4602      	mov	r2, r0
 800f642:	4b19      	ldr	r3, [pc, #100]	; (800f6a8 <__s2b+0x8c>)
 800f644:	4819      	ldr	r0, [pc, #100]	; (800f6ac <__s2b+0x90>)
 800f646:	21d3      	movs	r1, #211	; 0xd3
 800f648:	f002 f85e 	bl	8011708 <__assert_func>
 800f64c:	0052      	lsls	r2, r2, #1
 800f64e:	3101      	adds	r1, #1
 800f650:	e7f0      	b.n	800f634 <__s2b+0x18>
 800f652:	9b08      	ldr	r3, [sp, #32]
 800f654:	6143      	str	r3, [r0, #20]
 800f656:	2d09      	cmp	r5, #9
 800f658:	f04f 0301 	mov.w	r3, #1
 800f65c:	6103      	str	r3, [r0, #16]
 800f65e:	dd16      	ble.n	800f68e <__s2b+0x72>
 800f660:	f104 0909 	add.w	r9, r4, #9
 800f664:	46c8      	mov	r8, r9
 800f666:	442c      	add	r4, r5
 800f668:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f66c:	4601      	mov	r1, r0
 800f66e:	3b30      	subs	r3, #48	; 0x30
 800f670:	220a      	movs	r2, #10
 800f672:	4630      	mov	r0, r6
 800f674:	f7ff ff8c 	bl	800f590 <__multadd>
 800f678:	45a0      	cmp	r8, r4
 800f67a:	d1f5      	bne.n	800f668 <__s2b+0x4c>
 800f67c:	f1a5 0408 	sub.w	r4, r5, #8
 800f680:	444c      	add	r4, r9
 800f682:	1b2d      	subs	r5, r5, r4
 800f684:	1963      	adds	r3, r4, r5
 800f686:	42bb      	cmp	r3, r7
 800f688:	db04      	blt.n	800f694 <__s2b+0x78>
 800f68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f68e:	340a      	adds	r4, #10
 800f690:	2509      	movs	r5, #9
 800f692:	e7f6      	b.n	800f682 <__s2b+0x66>
 800f694:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f698:	4601      	mov	r1, r0
 800f69a:	3b30      	subs	r3, #48	; 0x30
 800f69c:	220a      	movs	r2, #10
 800f69e:	4630      	mov	r0, r6
 800f6a0:	f7ff ff76 	bl	800f590 <__multadd>
 800f6a4:	e7ee      	b.n	800f684 <__s2b+0x68>
 800f6a6:	bf00      	nop
 800f6a8:	0801267f 	.word	0x0801267f
 800f6ac:	08012690 	.word	0x08012690

0800f6b0 <__hi0bits>:
 800f6b0:	0c03      	lsrs	r3, r0, #16
 800f6b2:	041b      	lsls	r3, r3, #16
 800f6b4:	b9d3      	cbnz	r3, 800f6ec <__hi0bits+0x3c>
 800f6b6:	0400      	lsls	r0, r0, #16
 800f6b8:	2310      	movs	r3, #16
 800f6ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f6be:	bf04      	itt	eq
 800f6c0:	0200      	lsleq	r0, r0, #8
 800f6c2:	3308      	addeq	r3, #8
 800f6c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f6c8:	bf04      	itt	eq
 800f6ca:	0100      	lsleq	r0, r0, #4
 800f6cc:	3304      	addeq	r3, #4
 800f6ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f6d2:	bf04      	itt	eq
 800f6d4:	0080      	lsleq	r0, r0, #2
 800f6d6:	3302      	addeq	r3, #2
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	db05      	blt.n	800f6e8 <__hi0bits+0x38>
 800f6dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f6e0:	f103 0301 	add.w	r3, r3, #1
 800f6e4:	bf08      	it	eq
 800f6e6:	2320      	moveq	r3, #32
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	4770      	bx	lr
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	e7e4      	b.n	800f6ba <__hi0bits+0xa>

0800f6f0 <__lo0bits>:
 800f6f0:	6803      	ldr	r3, [r0, #0]
 800f6f2:	f013 0207 	ands.w	r2, r3, #7
 800f6f6:	d00c      	beq.n	800f712 <__lo0bits+0x22>
 800f6f8:	07d9      	lsls	r1, r3, #31
 800f6fa:	d422      	bmi.n	800f742 <__lo0bits+0x52>
 800f6fc:	079a      	lsls	r2, r3, #30
 800f6fe:	bf49      	itett	mi
 800f700:	085b      	lsrmi	r3, r3, #1
 800f702:	089b      	lsrpl	r3, r3, #2
 800f704:	6003      	strmi	r3, [r0, #0]
 800f706:	2201      	movmi	r2, #1
 800f708:	bf5c      	itt	pl
 800f70a:	6003      	strpl	r3, [r0, #0]
 800f70c:	2202      	movpl	r2, #2
 800f70e:	4610      	mov	r0, r2
 800f710:	4770      	bx	lr
 800f712:	b299      	uxth	r1, r3
 800f714:	b909      	cbnz	r1, 800f71a <__lo0bits+0x2a>
 800f716:	0c1b      	lsrs	r3, r3, #16
 800f718:	2210      	movs	r2, #16
 800f71a:	b2d9      	uxtb	r1, r3
 800f71c:	b909      	cbnz	r1, 800f722 <__lo0bits+0x32>
 800f71e:	3208      	adds	r2, #8
 800f720:	0a1b      	lsrs	r3, r3, #8
 800f722:	0719      	lsls	r1, r3, #28
 800f724:	bf04      	itt	eq
 800f726:	091b      	lsreq	r3, r3, #4
 800f728:	3204      	addeq	r2, #4
 800f72a:	0799      	lsls	r1, r3, #30
 800f72c:	bf04      	itt	eq
 800f72e:	089b      	lsreq	r3, r3, #2
 800f730:	3202      	addeq	r2, #2
 800f732:	07d9      	lsls	r1, r3, #31
 800f734:	d403      	bmi.n	800f73e <__lo0bits+0x4e>
 800f736:	085b      	lsrs	r3, r3, #1
 800f738:	f102 0201 	add.w	r2, r2, #1
 800f73c:	d003      	beq.n	800f746 <__lo0bits+0x56>
 800f73e:	6003      	str	r3, [r0, #0]
 800f740:	e7e5      	b.n	800f70e <__lo0bits+0x1e>
 800f742:	2200      	movs	r2, #0
 800f744:	e7e3      	b.n	800f70e <__lo0bits+0x1e>
 800f746:	2220      	movs	r2, #32
 800f748:	e7e1      	b.n	800f70e <__lo0bits+0x1e>
	...

0800f74c <__i2b>:
 800f74c:	b510      	push	{r4, lr}
 800f74e:	460c      	mov	r4, r1
 800f750:	2101      	movs	r1, #1
 800f752:	f7ff febb 	bl	800f4cc <_Balloc>
 800f756:	4602      	mov	r2, r0
 800f758:	b928      	cbnz	r0, 800f766 <__i2b+0x1a>
 800f75a:	4b05      	ldr	r3, [pc, #20]	; (800f770 <__i2b+0x24>)
 800f75c:	4805      	ldr	r0, [pc, #20]	; (800f774 <__i2b+0x28>)
 800f75e:	f240 1145 	movw	r1, #325	; 0x145
 800f762:	f001 ffd1 	bl	8011708 <__assert_func>
 800f766:	2301      	movs	r3, #1
 800f768:	6144      	str	r4, [r0, #20]
 800f76a:	6103      	str	r3, [r0, #16]
 800f76c:	bd10      	pop	{r4, pc}
 800f76e:	bf00      	nop
 800f770:	0801267f 	.word	0x0801267f
 800f774:	08012690 	.word	0x08012690

0800f778 <__multiply>:
 800f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77c:	4691      	mov	r9, r2
 800f77e:	690a      	ldr	r2, [r1, #16]
 800f780:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f784:	429a      	cmp	r2, r3
 800f786:	bfb8      	it	lt
 800f788:	460b      	movlt	r3, r1
 800f78a:	460c      	mov	r4, r1
 800f78c:	bfbc      	itt	lt
 800f78e:	464c      	movlt	r4, r9
 800f790:	4699      	movlt	r9, r3
 800f792:	6927      	ldr	r7, [r4, #16]
 800f794:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f798:	68a3      	ldr	r3, [r4, #8]
 800f79a:	6861      	ldr	r1, [r4, #4]
 800f79c:	eb07 060a 	add.w	r6, r7, sl
 800f7a0:	42b3      	cmp	r3, r6
 800f7a2:	b085      	sub	sp, #20
 800f7a4:	bfb8      	it	lt
 800f7a6:	3101      	addlt	r1, #1
 800f7a8:	f7ff fe90 	bl	800f4cc <_Balloc>
 800f7ac:	b930      	cbnz	r0, 800f7bc <__multiply+0x44>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	4b44      	ldr	r3, [pc, #272]	; (800f8c4 <__multiply+0x14c>)
 800f7b2:	4845      	ldr	r0, [pc, #276]	; (800f8c8 <__multiply+0x150>)
 800f7b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f7b8:	f001 ffa6 	bl	8011708 <__assert_func>
 800f7bc:	f100 0514 	add.w	r5, r0, #20
 800f7c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f7c4:	462b      	mov	r3, r5
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	4543      	cmp	r3, r8
 800f7ca:	d321      	bcc.n	800f810 <__multiply+0x98>
 800f7cc:	f104 0314 	add.w	r3, r4, #20
 800f7d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f7d4:	f109 0314 	add.w	r3, r9, #20
 800f7d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f7dc:	9202      	str	r2, [sp, #8]
 800f7de:	1b3a      	subs	r2, r7, r4
 800f7e0:	3a15      	subs	r2, #21
 800f7e2:	f022 0203 	bic.w	r2, r2, #3
 800f7e6:	3204      	adds	r2, #4
 800f7e8:	f104 0115 	add.w	r1, r4, #21
 800f7ec:	428f      	cmp	r7, r1
 800f7ee:	bf38      	it	cc
 800f7f0:	2204      	movcc	r2, #4
 800f7f2:	9201      	str	r2, [sp, #4]
 800f7f4:	9a02      	ldr	r2, [sp, #8]
 800f7f6:	9303      	str	r3, [sp, #12]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d80c      	bhi.n	800f816 <__multiply+0x9e>
 800f7fc:	2e00      	cmp	r6, #0
 800f7fe:	dd03      	ble.n	800f808 <__multiply+0x90>
 800f800:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f804:	2b00      	cmp	r3, #0
 800f806:	d05b      	beq.n	800f8c0 <__multiply+0x148>
 800f808:	6106      	str	r6, [r0, #16]
 800f80a:	b005      	add	sp, #20
 800f80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f810:	f843 2b04 	str.w	r2, [r3], #4
 800f814:	e7d8      	b.n	800f7c8 <__multiply+0x50>
 800f816:	f8b3 a000 	ldrh.w	sl, [r3]
 800f81a:	f1ba 0f00 	cmp.w	sl, #0
 800f81e:	d024      	beq.n	800f86a <__multiply+0xf2>
 800f820:	f104 0e14 	add.w	lr, r4, #20
 800f824:	46a9      	mov	r9, r5
 800f826:	f04f 0c00 	mov.w	ip, #0
 800f82a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f82e:	f8d9 1000 	ldr.w	r1, [r9]
 800f832:	fa1f fb82 	uxth.w	fp, r2
 800f836:	b289      	uxth	r1, r1
 800f838:	fb0a 110b 	mla	r1, sl, fp, r1
 800f83c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f840:	f8d9 2000 	ldr.w	r2, [r9]
 800f844:	4461      	add	r1, ip
 800f846:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f84a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f84e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f852:	b289      	uxth	r1, r1
 800f854:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f858:	4577      	cmp	r7, lr
 800f85a:	f849 1b04 	str.w	r1, [r9], #4
 800f85e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f862:	d8e2      	bhi.n	800f82a <__multiply+0xb2>
 800f864:	9a01      	ldr	r2, [sp, #4]
 800f866:	f845 c002 	str.w	ip, [r5, r2]
 800f86a:	9a03      	ldr	r2, [sp, #12]
 800f86c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f870:	3304      	adds	r3, #4
 800f872:	f1b9 0f00 	cmp.w	r9, #0
 800f876:	d021      	beq.n	800f8bc <__multiply+0x144>
 800f878:	6829      	ldr	r1, [r5, #0]
 800f87a:	f104 0c14 	add.w	ip, r4, #20
 800f87e:	46ae      	mov	lr, r5
 800f880:	f04f 0a00 	mov.w	sl, #0
 800f884:	f8bc b000 	ldrh.w	fp, [ip]
 800f888:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f88c:	fb09 220b 	mla	r2, r9, fp, r2
 800f890:	4452      	add	r2, sl
 800f892:	b289      	uxth	r1, r1
 800f894:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f898:	f84e 1b04 	str.w	r1, [lr], #4
 800f89c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f8a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8a4:	f8be 1000 	ldrh.w	r1, [lr]
 800f8a8:	fb09 110a 	mla	r1, r9, sl, r1
 800f8ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f8b0:	4567      	cmp	r7, ip
 800f8b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8b6:	d8e5      	bhi.n	800f884 <__multiply+0x10c>
 800f8b8:	9a01      	ldr	r2, [sp, #4]
 800f8ba:	50a9      	str	r1, [r5, r2]
 800f8bc:	3504      	adds	r5, #4
 800f8be:	e799      	b.n	800f7f4 <__multiply+0x7c>
 800f8c0:	3e01      	subs	r6, #1
 800f8c2:	e79b      	b.n	800f7fc <__multiply+0x84>
 800f8c4:	0801267f 	.word	0x0801267f
 800f8c8:	08012690 	.word	0x08012690

0800f8cc <__pow5mult>:
 800f8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8d0:	4615      	mov	r5, r2
 800f8d2:	f012 0203 	ands.w	r2, r2, #3
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	460f      	mov	r7, r1
 800f8da:	d007      	beq.n	800f8ec <__pow5mult+0x20>
 800f8dc:	4c25      	ldr	r4, [pc, #148]	; (800f974 <__pow5mult+0xa8>)
 800f8de:	3a01      	subs	r2, #1
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8e6:	f7ff fe53 	bl	800f590 <__multadd>
 800f8ea:	4607      	mov	r7, r0
 800f8ec:	10ad      	asrs	r5, r5, #2
 800f8ee:	d03d      	beq.n	800f96c <__pow5mult+0xa0>
 800f8f0:	69f4      	ldr	r4, [r6, #28]
 800f8f2:	b97c      	cbnz	r4, 800f914 <__pow5mult+0x48>
 800f8f4:	2010      	movs	r0, #16
 800f8f6:	f7fd fdb7 	bl	800d468 <malloc>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	61f0      	str	r0, [r6, #28]
 800f8fe:	b928      	cbnz	r0, 800f90c <__pow5mult+0x40>
 800f900:	4b1d      	ldr	r3, [pc, #116]	; (800f978 <__pow5mult+0xac>)
 800f902:	481e      	ldr	r0, [pc, #120]	; (800f97c <__pow5mult+0xb0>)
 800f904:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f908:	f001 fefe 	bl	8011708 <__assert_func>
 800f90c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f910:	6004      	str	r4, [r0, #0]
 800f912:	60c4      	str	r4, [r0, #12]
 800f914:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f91c:	b94c      	cbnz	r4, 800f932 <__pow5mult+0x66>
 800f91e:	f240 2171 	movw	r1, #625	; 0x271
 800f922:	4630      	mov	r0, r6
 800f924:	f7ff ff12 	bl	800f74c <__i2b>
 800f928:	2300      	movs	r3, #0
 800f92a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f92e:	4604      	mov	r4, r0
 800f930:	6003      	str	r3, [r0, #0]
 800f932:	f04f 0900 	mov.w	r9, #0
 800f936:	07eb      	lsls	r3, r5, #31
 800f938:	d50a      	bpl.n	800f950 <__pow5mult+0x84>
 800f93a:	4639      	mov	r1, r7
 800f93c:	4622      	mov	r2, r4
 800f93e:	4630      	mov	r0, r6
 800f940:	f7ff ff1a 	bl	800f778 <__multiply>
 800f944:	4639      	mov	r1, r7
 800f946:	4680      	mov	r8, r0
 800f948:	4630      	mov	r0, r6
 800f94a:	f7ff fdff 	bl	800f54c <_Bfree>
 800f94e:	4647      	mov	r7, r8
 800f950:	106d      	asrs	r5, r5, #1
 800f952:	d00b      	beq.n	800f96c <__pow5mult+0xa0>
 800f954:	6820      	ldr	r0, [r4, #0]
 800f956:	b938      	cbnz	r0, 800f968 <__pow5mult+0x9c>
 800f958:	4622      	mov	r2, r4
 800f95a:	4621      	mov	r1, r4
 800f95c:	4630      	mov	r0, r6
 800f95e:	f7ff ff0b 	bl	800f778 <__multiply>
 800f962:	6020      	str	r0, [r4, #0]
 800f964:	f8c0 9000 	str.w	r9, [r0]
 800f968:	4604      	mov	r4, r0
 800f96a:	e7e4      	b.n	800f936 <__pow5mult+0x6a>
 800f96c:	4638      	mov	r0, r7
 800f96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f972:	bf00      	nop
 800f974:	080127e0 	.word	0x080127e0
 800f978:	08012610 	.word	0x08012610
 800f97c:	08012690 	.word	0x08012690

0800f980 <__lshift>:
 800f980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f984:	460c      	mov	r4, r1
 800f986:	6849      	ldr	r1, [r1, #4]
 800f988:	6923      	ldr	r3, [r4, #16]
 800f98a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f98e:	68a3      	ldr	r3, [r4, #8]
 800f990:	4607      	mov	r7, r0
 800f992:	4691      	mov	r9, r2
 800f994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f998:	f108 0601 	add.w	r6, r8, #1
 800f99c:	42b3      	cmp	r3, r6
 800f99e:	db0b      	blt.n	800f9b8 <__lshift+0x38>
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	f7ff fd93 	bl	800f4cc <_Balloc>
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	b948      	cbnz	r0, 800f9be <__lshift+0x3e>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	4b28      	ldr	r3, [pc, #160]	; (800fa50 <__lshift+0xd0>)
 800f9ae:	4829      	ldr	r0, [pc, #164]	; (800fa54 <__lshift+0xd4>)
 800f9b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f9b4:	f001 fea8 	bl	8011708 <__assert_func>
 800f9b8:	3101      	adds	r1, #1
 800f9ba:	005b      	lsls	r3, r3, #1
 800f9bc:	e7ee      	b.n	800f99c <__lshift+0x1c>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	f100 0114 	add.w	r1, r0, #20
 800f9c4:	f100 0210 	add.w	r2, r0, #16
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	4553      	cmp	r3, sl
 800f9cc:	db33      	blt.n	800fa36 <__lshift+0xb6>
 800f9ce:	6920      	ldr	r0, [r4, #16]
 800f9d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9d4:	f104 0314 	add.w	r3, r4, #20
 800f9d8:	f019 091f 	ands.w	r9, r9, #31
 800f9dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f9e4:	d02b      	beq.n	800fa3e <__lshift+0xbe>
 800f9e6:	f1c9 0e20 	rsb	lr, r9, #32
 800f9ea:	468a      	mov	sl, r1
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	6818      	ldr	r0, [r3, #0]
 800f9f0:	fa00 f009 	lsl.w	r0, r0, r9
 800f9f4:	4310      	orrs	r0, r2
 800f9f6:	f84a 0b04 	str.w	r0, [sl], #4
 800f9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9fe:	459c      	cmp	ip, r3
 800fa00:	fa22 f20e 	lsr.w	r2, r2, lr
 800fa04:	d8f3      	bhi.n	800f9ee <__lshift+0x6e>
 800fa06:	ebac 0304 	sub.w	r3, ip, r4
 800fa0a:	3b15      	subs	r3, #21
 800fa0c:	f023 0303 	bic.w	r3, r3, #3
 800fa10:	3304      	adds	r3, #4
 800fa12:	f104 0015 	add.w	r0, r4, #21
 800fa16:	4584      	cmp	ip, r0
 800fa18:	bf38      	it	cc
 800fa1a:	2304      	movcc	r3, #4
 800fa1c:	50ca      	str	r2, [r1, r3]
 800fa1e:	b10a      	cbz	r2, 800fa24 <__lshift+0xa4>
 800fa20:	f108 0602 	add.w	r6, r8, #2
 800fa24:	3e01      	subs	r6, #1
 800fa26:	4638      	mov	r0, r7
 800fa28:	612e      	str	r6, [r5, #16]
 800fa2a:	4621      	mov	r1, r4
 800fa2c:	f7ff fd8e 	bl	800f54c <_Bfree>
 800fa30:	4628      	mov	r0, r5
 800fa32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa36:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	e7c5      	b.n	800f9ca <__lshift+0x4a>
 800fa3e:	3904      	subs	r1, #4
 800fa40:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa44:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa48:	459c      	cmp	ip, r3
 800fa4a:	d8f9      	bhi.n	800fa40 <__lshift+0xc0>
 800fa4c:	e7ea      	b.n	800fa24 <__lshift+0xa4>
 800fa4e:	bf00      	nop
 800fa50:	0801267f 	.word	0x0801267f
 800fa54:	08012690 	.word	0x08012690

0800fa58 <__mcmp>:
 800fa58:	b530      	push	{r4, r5, lr}
 800fa5a:	6902      	ldr	r2, [r0, #16]
 800fa5c:	690c      	ldr	r4, [r1, #16]
 800fa5e:	1b12      	subs	r2, r2, r4
 800fa60:	d10e      	bne.n	800fa80 <__mcmp+0x28>
 800fa62:	f100 0314 	add.w	r3, r0, #20
 800fa66:	3114      	adds	r1, #20
 800fa68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa78:	42a5      	cmp	r5, r4
 800fa7a:	d003      	beq.n	800fa84 <__mcmp+0x2c>
 800fa7c:	d305      	bcc.n	800fa8a <__mcmp+0x32>
 800fa7e:	2201      	movs	r2, #1
 800fa80:	4610      	mov	r0, r2
 800fa82:	bd30      	pop	{r4, r5, pc}
 800fa84:	4283      	cmp	r3, r0
 800fa86:	d3f3      	bcc.n	800fa70 <__mcmp+0x18>
 800fa88:	e7fa      	b.n	800fa80 <__mcmp+0x28>
 800fa8a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa8e:	e7f7      	b.n	800fa80 <__mcmp+0x28>

0800fa90 <__mdiff>:
 800fa90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa94:	460c      	mov	r4, r1
 800fa96:	4606      	mov	r6, r0
 800fa98:	4611      	mov	r1, r2
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	4690      	mov	r8, r2
 800fa9e:	f7ff ffdb 	bl	800fa58 <__mcmp>
 800faa2:	1e05      	subs	r5, r0, #0
 800faa4:	d110      	bne.n	800fac8 <__mdiff+0x38>
 800faa6:	4629      	mov	r1, r5
 800faa8:	4630      	mov	r0, r6
 800faaa:	f7ff fd0f 	bl	800f4cc <_Balloc>
 800faae:	b930      	cbnz	r0, 800fabe <__mdiff+0x2e>
 800fab0:	4b3a      	ldr	r3, [pc, #232]	; (800fb9c <__mdiff+0x10c>)
 800fab2:	4602      	mov	r2, r0
 800fab4:	f240 2137 	movw	r1, #567	; 0x237
 800fab8:	4839      	ldr	r0, [pc, #228]	; (800fba0 <__mdiff+0x110>)
 800faba:	f001 fe25 	bl	8011708 <__assert_func>
 800fabe:	2301      	movs	r3, #1
 800fac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac8:	bfa4      	itt	ge
 800faca:	4643      	movge	r3, r8
 800facc:	46a0      	movge	r8, r4
 800face:	4630      	mov	r0, r6
 800fad0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fad4:	bfa6      	itte	ge
 800fad6:	461c      	movge	r4, r3
 800fad8:	2500      	movge	r5, #0
 800fada:	2501      	movlt	r5, #1
 800fadc:	f7ff fcf6 	bl	800f4cc <_Balloc>
 800fae0:	b920      	cbnz	r0, 800faec <__mdiff+0x5c>
 800fae2:	4b2e      	ldr	r3, [pc, #184]	; (800fb9c <__mdiff+0x10c>)
 800fae4:	4602      	mov	r2, r0
 800fae6:	f240 2145 	movw	r1, #581	; 0x245
 800faea:	e7e5      	b.n	800fab8 <__mdiff+0x28>
 800faec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800faf0:	6926      	ldr	r6, [r4, #16]
 800faf2:	60c5      	str	r5, [r0, #12]
 800faf4:	f104 0914 	add.w	r9, r4, #20
 800faf8:	f108 0514 	add.w	r5, r8, #20
 800fafc:	f100 0e14 	add.w	lr, r0, #20
 800fb00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb08:	f108 0210 	add.w	r2, r8, #16
 800fb0c:	46f2      	mov	sl, lr
 800fb0e:	2100      	movs	r1, #0
 800fb10:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb18:	fa11 f88b 	uxtah	r8, r1, fp
 800fb1c:	b299      	uxth	r1, r3
 800fb1e:	0c1b      	lsrs	r3, r3, #16
 800fb20:	eba8 0801 	sub.w	r8, r8, r1
 800fb24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb28:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb2c:	fa1f f888 	uxth.w	r8, r8
 800fb30:	1419      	asrs	r1, r3, #16
 800fb32:	454e      	cmp	r6, r9
 800fb34:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb38:	f84a 3b04 	str.w	r3, [sl], #4
 800fb3c:	d8e8      	bhi.n	800fb10 <__mdiff+0x80>
 800fb3e:	1b33      	subs	r3, r6, r4
 800fb40:	3b15      	subs	r3, #21
 800fb42:	f023 0303 	bic.w	r3, r3, #3
 800fb46:	3304      	adds	r3, #4
 800fb48:	3415      	adds	r4, #21
 800fb4a:	42a6      	cmp	r6, r4
 800fb4c:	bf38      	it	cc
 800fb4e:	2304      	movcc	r3, #4
 800fb50:	441d      	add	r5, r3
 800fb52:	4473      	add	r3, lr
 800fb54:	469e      	mov	lr, r3
 800fb56:	462e      	mov	r6, r5
 800fb58:	4566      	cmp	r6, ip
 800fb5a:	d30e      	bcc.n	800fb7a <__mdiff+0xea>
 800fb5c:	f10c 0203 	add.w	r2, ip, #3
 800fb60:	1b52      	subs	r2, r2, r5
 800fb62:	f022 0203 	bic.w	r2, r2, #3
 800fb66:	3d03      	subs	r5, #3
 800fb68:	45ac      	cmp	ip, r5
 800fb6a:	bf38      	it	cc
 800fb6c:	2200      	movcc	r2, #0
 800fb6e:	4413      	add	r3, r2
 800fb70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fb74:	b17a      	cbz	r2, 800fb96 <__mdiff+0x106>
 800fb76:	6107      	str	r7, [r0, #16]
 800fb78:	e7a4      	b.n	800fac4 <__mdiff+0x34>
 800fb7a:	f856 8b04 	ldr.w	r8, [r6], #4
 800fb7e:	fa11 f288 	uxtah	r2, r1, r8
 800fb82:	1414      	asrs	r4, r2, #16
 800fb84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fb88:	b292      	uxth	r2, r2
 800fb8a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fb8e:	f84e 2b04 	str.w	r2, [lr], #4
 800fb92:	1421      	asrs	r1, r4, #16
 800fb94:	e7e0      	b.n	800fb58 <__mdiff+0xc8>
 800fb96:	3f01      	subs	r7, #1
 800fb98:	e7ea      	b.n	800fb70 <__mdiff+0xe0>
 800fb9a:	bf00      	nop
 800fb9c:	0801267f 	.word	0x0801267f
 800fba0:	08012690 	.word	0x08012690

0800fba4 <__ulp>:
 800fba4:	b082      	sub	sp, #8
 800fba6:	ed8d 0b00 	vstr	d0, [sp]
 800fbaa:	9a01      	ldr	r2, [sp, #4]
 800fbac:	4b0f      	ldr	r3, [pc, #60]	; (800fbec <__ulp+0x48>)
 800fbae:	4013      	ands	r3, r2
 800fbb0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	dc08      	bgt.n	800fbca <__ulp+0x26>
 800fbb8:	425b      	negs	r3, r3
 800fbba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800fbbe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fbc2:	da04      	bge.n	800fbce <__ulp+0x2a>
 800fbc4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fbc8:	4113      	asrs	r3, r2
 800fbca:	2200      	movs	r2, #0
 800fbcc:	e008      	b.n	800fbe0 <__ulp+0x3c>
 800fbce:	f1a2 0314 	sub.w	r3, r2, #20
 800fbd2:	2b1e      	cmp	r3, #30
 800fbd4:	bfda      	itte	le
 800fbd6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800fbda:	40da      	lsrle	r2, r3
 800fbdc:	2201      	movgt	r2, #1
 800fbde:	2300      	movs	r3, #0
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	4610      	mov	r0, r2
 800fbe4:	ec41 0b10 	vmov	d0, r0, r1
 800fbe8:	b002      	add	sp, #8
 800fbea:	4770      	bx	lr
 800fbec:	7ff00000 	.word	0x7ff00000

0800fbf0 <__b2d>:
 800fbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf4:	6906      	ldr	r6, [r0, #16]
 800fbf6:	f100 0814 	add.w	r8, r0, #20
 800fbfa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fbfe:	1f37      	subs	r7, r6, #4
 800fc00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fc04:	4610      	mov	r0, r2
 800fc06:	f7ff fd53 	bl	800f6b0 <__hi0bits>
 800fc0a:	f1c0 0320 	rsb	r3, r0, #32
 800fc0e:	280a      	cmp	r0, #10
 800fc10:	600b      	str	r3, [r1, #0]
 800fc12:	491b      	ldr	r1, [pc, #108]	; (800fc80 <__b2d+0x90>)
 800fc14:	dc15      	bgt.n	800fc42 <__b2d+0x52>
 800fc16:	f1c0 0c0b 	rsb	ip, r0, #11
 800fc1a:	fa22 f30c 	lsr.w	r3, r2, ip
 800fc1e:	45b8      	cmp	r8, r7
 800fc20:	ea43 0501 	orr.w	r5, r3, r1
 800fc24:	bf34      	ite	cc
 800fc26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fc2a:	2300      	movcs	r3, #0
 800fc2c:	3015      	adds	r0, #21
 800fc2e:	fa02 f000 	lsl.w	r0, r2, r0
 800fc32:	fa23 f30c 	lsr.w	r3, r3, ip
 800fc36:	4303      	orrs	r3, r0
 800fc38:	461c      	mov	r4, r3
 800fc3a:	ec45 4b10 	vmov	d0, r4, r5
 800fc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc42:	45b8      	cmp	r8, r7
 800fc44:	bf3a      	itte	cc
 800fc46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fc4a:	f1a6 0708 	subcc.w	r7, r6, #8
 800fc4e:	2300      	movcs	r3, #0
 800fc50:	380b      	subs	r0, #11
 800fc52:	d012      	beq.n	800fc7a <__b2d+0x8a>
 800fc54:	f1c0 0120 	rsb	r1, r0, #32
 800fc58:	fa23 f401 	lsr.w	r4, r3, r1
 800fc5c:	4082      	lsls	r2, r0
 800fc5e:	4322      	orrs	r2, r4
 800fc60:	4547      	cmp	r7, r8
 800fc62:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fc66:	bf8c      	ite	hi
 800fc68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fc6c:	2200      	movls	r2, #0
 800fc6e:	4083      	lsls	r3, r0
 800fc70:	40ca      	lsrs	r2, r1
 800fc72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fc76:	4313      	orrs	r3, r2
 800fc78:	e7de      	b.n	800fc38 <__b2d+0x48>
 800fc7a:	ea42 0501 	orr.w	r5, r2, r1
 800fc7e:	e7db      	b.n	800fc38 <__b2d+0x48>
 800fc80:	3ff00000 	.word	0x3ff00000

0800fc84 <__d2b>:
 800fc84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc88:	460f      	mov	r7, r1
 800fc8a:	2101      	movs	r1, #1
 800fc8c:	ec59 8b10 	vmov	r8, r9, d0
 800fc90:	4616      	mov	r6, r2
 800fc92:	f7ff fc1b 	bl	800f4cc <_Balloc>
 800fc96:	4604      	mov	r4, r0
 800fc98:	b930      	cbnz	r0, 800fca8 <__d2b+0x24>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	4b24      	ldr	r3, [pc, #144]	; (800fd30 <__d2b+0xac>)
 800fc9e:	4825      	ldr	r0, [pc, #148]	; (800fd34 <__d2b+0xb0>)
 800fca0:	f240 310f 	movw	r1, #783	; 0x30f
 800fca4:	f001 fd30 	bl	8011708 <__assert_func>
 800fca8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fcac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fcb0:	bb2d      	cbnz	r5, 800fcfe <__d2b+0x7a>
 800fcb2:	9301      	str	r3, [sp, #4]
 800fcb4:	f1b8 0300 	subs.w	r3, r8, #0
 800fcb8:	d026      	beq.n	800fd08 <__d2b+0x84>
 800fcba:	4668      	mov	r0, sp
 800fcbc:	9300      	str	r3, [sp, #0]
 800fcbe:	f7ff fd17 	bl	800f6f0 <__lo0bits>
 800fcc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fcc6:	b1e8      	cbz	r0, 800fd04 <__d2b+0x80>
 800fcc8:	f1c0 0320 	rsb	r3, r0, #32
 800fccc:	fa02 f303 	lsl.w	r3, r2, r3
 800fcd0:	430b      	orrs	r3, r1
 800fcd2:	40c2      	lsrs	r2, r0
 800fcd4:	6163      	str	r3, [r4, #20]
 800fcd6:	9201      	str	r2, [sp, #4]
 800fcd8:	9b01      	ldr	r3, [sp, #4]
 800fcda:	61a3      	str	r3, [r4, #24]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	bf14      	ite	ne
 800fce0:	2202      	movne	r2, #2
 800fce2:	2201      	moveq	r2, #1
 800fce4:	6122      	str	r2, [r4, #16]
 800fce6:	b1bd      	cbz	r5, 800fd18 <__d2b+0x94>
 800fce8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fcec:	4405      	add	r5, r0
 800fcee:	603d      	str	r5, [r7, #0]
 800fcf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fcf4:	6030      	str	r0, [r6, #0]
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	b003      	add	sp, #12
 800fcfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd02:	e7d6      	b.n	800fcb2 <__d2b+0x2e>
 800fd04:	6161      	str	r1, [r4, #20]
 800fd06:	e7e7      	b.n	800fcd8 <__d2b+0x54>
 800fd08:	a801      	add	r0, sp, #4
 800fd0a:	f7ff fcf1 	bl	800f6f0 <__lo0bits>
 800fd0e:	9b01      	ldr	r3, [sp, #4]
 800fd10:	6163      	str	r3, [r4, #20]
 800fd12:	3020      	adds	r0, #32
 800fd14:	2201      	movs	r2, #1
 800fd16:	e7e5      	b.n	800fce4 <__d2b+0x60>
 800fd18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd20:	6038      	str	r0, [r7, #0]
 800fd22:	6918      	ldr	r0, [r3, #16]
 800fd24:	f7ff fcc4 	bl	800f6b0 <__hi0bits>
 800fd28:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd2c:	e7e2      	b.n	800fcf4 <__d2b+0x70>
 800fd2e:	bf00      	nop
 800fd30:	0801267f 	.word	0x0801267f
 800fd34:	08012690 	.word	0x08012690

0800fd38 <__ratio>:
 800fd38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd3c:	4688      	mov	r8, r1
 800fd3e:	4669      	mov	r1, sp
 800fd40:	4681      	mov	r9, r0
 800fd42:	f7ff ff55 	bl	800fbf0 <__b2d>
 800fd46:	a901      	add	r1, sp, #4
 800fd48:	4640      	mov	r0, r8
 800fd4a:	ec55 4b10 	vmov	r4, r5, d0
 800fd4e:	f7ff ff4f 	bl	800fbf0 <__b2d>
 800fd52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fd5a:	eba3 0c02 	sub.w	ip, r3, r2
 800fd5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd62:	1a9b      	subs	r3, r3, r2
 800fd64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fd68:	ec51 0b10 	vmov	r0, r1, d0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	bfd6      	itet	le
 800fd70:	460a      	movle	r2, r1
 800fd72:	462a      	movgt	r2, r5
 800fd74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fd78:	468b      	mov	fp, r1
 800fd7a:	462f      	mov	r7, r5
 800fd7c:	bfd4      	ite	le
 800fd7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fd82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fd86:	4620      	mov	r0, r4
 800fd88:	ee10 2a10 	vmov	r2, s0
 800fd8c:	465b      	mov	r3, fp
 800fd8e:	4639      	mov	r1, r7
 800fd90:	f7f0 fd5c 	bl	800084c <__aeabi_ddiv>
 800fd94:	ec41 0b10 	vmov	d0, r0, r1
 800fd98:	b003      	add	sp, #12
 800fd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd9e <__copybits>:
 800fd9e:	3901      	subs	r1, #1
 800fda0:	b570      	push	{r4, r5, r6, lr}
 800fda2:	1149      	asrs	r1, r1, #5
 800fda4:	6914      	ldr	r4, [r2, #16]
 800fda6:	3101      	adds	r1, #1
 800fda8:	f102 0314 	add.w	r3, r2, #20
 800fdac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fdb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fdb4:	1f05      	subs	r5, r0, #4
 800fdb6:	42a3      	cmp	r3, r4
 800fdb8:	d30c      	bcc.n	800fdd4 <__copybits+0x36>
 800fdba:	1aa3      	subs	r3, r4, r2
 800fdbc:	3b11      	subs	r3, #17
 800fdbe:	f023 0303 	bic.w	r3, r3, #3
 800fdc2:	3211      	adds	r2, #17
 800fdc4:	42a2      	cmp	r2, r4
 800fdc6:	bf88      	it	hi
 800fdc8:	2300      	movhi	r3, #0
 800fdca:	4418      	add	r0, r3
 800fdcc:	2300      	movs	r3, #0
 800fdce:	4288      	cmp	r0, r1
 800fdd0:	d305      	bcc.n	800fdde <__copybits+0x40>
 800fdd2:	bd70      	pop	{r4, r5, r6, pc}
 800fdd4:	f853 6b04 	ldr.w	r6, [r3], #4
 800fdd8:	f845 6f04 	str.w	r6, [r5, #4]!
 800fddc:	e7eb      	b.n	800fdb6 <__copybits+0x18>
 800fdde:	f840 3b04 	str.w	r3, [r0], #4
 800fde2:	e7f4      	b.n	800fdce <__copybits+0x30>

0800fde4 <__any_on>:
 800fde4:	f100 0214 	add.w	r2, r0, #20
 800fde8:	6900      	ldr	r0, [r0, #16]
 800fdea:	114b      	asrs	r3, r1, #5
 800fdec:	4298      	cmp	r0, r3
 800fdee:	b510      	push	{r4, lr}
 800fdf0:	db11      	blt.n	800fe16 <__any_on+0x32>
 800fdf2:	dd0a      	ble.n	800fe0a <__any_on+0x26>
 800fdf4:	f011 011f 	ands.w	r1, r1, #31
 800fdf8:	d007      	beq.n	800fe0a <__any_on+0x26>
 800fdfa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fdfe:	fa24 f001 	lsr.w	r0, r4, r1
 800fe02:	fa00 f101 	lsl.w	r1, r0, r1
 800fe06:	428c      	cmp	r4, r1
 800fe08:	d10b      	bne.n	800fe22 <__any_on+0x3e>
 800fe0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d803      	bhi.n	800fe1a <__any_on+0x36>
 800fe12:	2000      	movs	r0, #0
 800fe14:	bd10      	pop	{r4, pc}
 800fe16:	4603      	mov	r3, r0
 800fe18:	e7f7      	b.n	800fe0a <__any_on+0x26>
 800fe1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe1e:	2900      	cmp	r1, #0
 800fe20:	d0f5      	beq.n	800fe0e <__any_on+0x2a>
 800fe22:	2001      	movs	r0, #1
 800fe24:	e7f6      	b.n	800fe14 <__any_on+0x30>

0800fe26 <sulp>:
 800fe26:	b570      	push	{r4, r5, r6, lr}
 800fe28:	4604      	mov	r4, r0
 800fe2a:	460d      	mov	r5, r1
 800fe2c:	ec45 4b10 	vmov	d0, r4, r5
 800fe30:	4616      	mov	r6, r2
 800fe32:	f7ff feb7 	bl	800fba4 <__ulp>
 800fe36:	ec51 0b10 	vmov	r0, r1, d0
 800fe3a:	b17e      	cbz	r6, 800fe5c <sulp+0x36>
 800fe3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fe40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	dd09      	ble.n	800fe5c <sulp+0x36>
 800fe48:	051b      	lsls	r3, r3, #20
 800fe4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fe4e:	2400      	movs	r4, #0
 800fe50:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fe54:	4622      	mov	r2, r4
 800fe56:	462b      	mov	r3, r5
 800fe58:	f7f0 fbce 	bl	80005f8 <__aeabi_dmul>
 800fe5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fe60 <_strtod_l>:
 800fe60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe64:	ed2d 8b02 	vpush	{d8}
 800fe68:	b09b      	sub	sp, #108	; 0x6c
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	9213      	str	r2, [sp, #76]	; 0x4c
 800fe6e:	2200      	movs	r2, #0
 800fe70:	9216      	str	r2, [sp, #88]	; 0x58
 800fe72:	460d      	mov	r5, r1
 800fe74:	f04f 0800 	mov.w	r8, #0
 800fe78:	f04f 0900 	mov.w	r9, #0
 800fe7c:	460a      	mov	r2, r1
 800fe7e:	9215      	str	r2, [sp, #84]	; 0x54
 800fe80:	7811      	ldrb	r1, [r2, #0]
 800fe82:	292b      	cmp	r1, #43	; 0x2b
 800fe84:	d04c      	beq.n	800ff20 <_strtod_l+0xc0>
 800fe86:	d83a      	bhi.n	800fefe <_strtod_l+0x9e>
 800fe88:	290d      	cmp	r1, #13
 800fe8a:	d834      	bhi.n	800fef6 <_strtod_l+0x96>
 800fe8c:	2908      	cmp	r1, #8
 800fe8e:	d834      	bhi.n	800fefa <_strtod_l+0x9a>
 800fe90:	2900      	cmp	r1, #0
 800fe92:	d03d      	beq.n	800ff10 <_strtod_l+0xb0>
 800fe94:	2200      	movs	r2, #0
 800fe96:	920a      	str	r2, [sp, #40]	; 0x28
 800fe98:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800fe9a:	7832      	ldrb	r2, [r6, #0]
 800fe9c:	2a30      	cmp	r2, #48	; 0x30
 800fe9e:	f040 80b4 	bne.w	801000a <_strtod_l+0x1aa>
 800fea2:	7872      	ldrb	r2, [r6, #1]
 800fea4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fea8:	2a58      	cmp	r2, #88	; 0x58
 800feaa:	d170      	bne.n	800ff8e <_strtod_l+0x12e>
 800feac:	9302      	str	r3, [sp, #8]
 800feae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feb0:	9301      	str	r3, [sp, #4]
 800feb2:	ab16      	add	r3, sp, #88	; 0x58
 800feb4:	9300      	str	r3, [sp, #0]
 800feb6:	4a8e      	ldr	r2, [pc, #568]	; (80100f0 <_strtod_l+0x290>)
 800feb8:	ab17      	add	r3, sp, #92	; 0x5c
 800feba:	a915      	add	r1, sp, #84	; 0x54
 800febc:	4620      	mov	r0, r4
 800febe:	f001 fcbf 	bl	8011840 <__gethex>
 800fec2:	f010 070f 	ands.w	r7, r0, #15
 800fec6:	4605      	mov	r5, r0
 800fec8:	d005      	beq.n	800fed6 <_strtod_l+0x76>
 800feca:	2f06      	cmp	r7, #6
 800fecc:	d12a      	bne.n	800ff24 <_strtod_l+0xc4>
 800fece:	3601      	adds	r6, #1
 800fed0:	2300      	movs	r3, #0
 800fed2:	9615      	str	r6, [sp, #84]	; 0x54
 800fed4:	930a      	str	r3, [sp, #40]	; 0x28
 800fed6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f040 857f 	bne.w	80109dc <_strtod_l+0xb7c>
 800fede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fee0:	b1db      	cbz	r3, 800ff1a <_strtod_l+0xba>
 800fee2:	4642      	mov	r2, r8
 800fee4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fee8:	ec43 2b10 	vmov	d0, r2, r3
 800feec:	b01b      	add	sp, #108	; 0x6c
 800feee:	ecbd 8b02 	vpop	{d8}
 800fef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef6:	2920      	cmp	r1, #32
 800fef8:	d1cc      	bne.n	800fe94 <_strtod_l+0x34>
 800fefa:	3201      	adds	r2, #1
 800fefc:	e7bf      	b.n	800fe7e <_strtod_l+0x1e>
 800fefe:	292d      	cmp	r1, #45	; 0x2d
 800ff00:	d1c8      	bne.n	800fe94 <_strtod_l+0x34>
 800ff02:	2101      	movs	r1, #1
 800ff04:	910a      	str	r1, [sp, #40]	; 0x28
 800ff06:	1c51      	adds	r1, r2, #1
 800ff08:	9115      	str	r1, [sp, #84]	; 0x54
 800ff0a:	7852      	ldrb	r2, [r2, #1]
 800ff0c:	2a00      	cmp	r2, #0
 800ff0e:	d1c3      	bne.n	800fe98 <_strtod_l+0x38>
 800ff10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff12:	9515      	str	r5, [sp, #84]	; 0x54
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f040 855f 	bne.w	80109d8 <_strtod_l+0xb78>
 800ff1a:	4642      	mov	r2, r8
 800ff1c:	464b      	mov	r3, r9
 800ff1e:	e7e3      	b.n	800fee8 <_strtod_l+0x88>
 800ff20:	2100      	movs	r1, #0
 800ff22:	e7ef      	b.n	800ff04 <_strtod_l+0xa4>
 800ff24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ff26:	b13a      	cbz	r2, 800ff38 <_strtod_l+0xd8>
 800ff28:	2135      	movs	r1, #53	; 0x35
 800ff2a:	a818      	add	r0, sp, #96	; 0x60
 800ff2c:	f7ff ff37 	bl	800fd9e <__copybits>
 800ff30:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ff32:	4620      	mov	r0, r4
 800ff34:	f7ff fb0a 	bl	800f54c <_Bfree>
 800ff38:	3f01      	subs	r7, #1
 800ff3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ff3c:	2f04      	cmp	r7, #4
 800ff3e:	d806      	bhi.n	800ff4e <_strtod_l+0xee>
 800ff40:	e8df f007 	tbb	[pc, r7]
 800ff44:	201d0314 	.word	0x201d0314
 800ff48:	14          	.byte	0x14
 800ff49:	00          	.byte	0x00
 800ff4a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ff4e:	05e9      	lsls	r1, r5, #23
 800ff50:	bf48      	it	mi
 800ff52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ff56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ff5a:	0d1b      	lsrs	r3, r3, #20
 800ff5c:	051b      	lsls	r3, r3, #20
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d1b9      	bne.n	800fed6 <_strtod_l+0x76>
 800ff62:	f7fe fbab 	bl	800e6bc <__errno>
 800ff66:	2322      	movs	r3, #34	; 0x22
 800ff68:	6003      	str	r3, [r0, #0]
 800ff6a:	e7b4      	b.n	800fed6 <_strtod_l+0x76>
 800ff6c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ff70:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ff74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ff78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ff7c:	e7e7      	b.n	800ff4e <_strtod_l+0xee>
 800ff7e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80100f8 <_strtod_l+0x298>
 800ff82:	e7e4      	b.n	800ff4e <_strtod_l+0xee>
 800ff84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ff88:	f04f 38ff 	mov.w	r8, #4294967295
 800ff8c:	e7df      	b.n	800ff4e <_strtod_l+0xee>
 800ff8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff90:	1c5a      	adds	r2, r3, #1
 800ff92:	9215      	str	r2, [sp, #84]	; 0x54
 800ff94:	785b      	ldrb	r3, [r3, #1]
 800ff96:	2b30      	cmp	r3, #48	; 0x30
 800ff98:	d0f9      	beq.n	800ff8e <_strtod_l+0x12e>
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d09b      	beq.n	800fed6 <_strtod_l+0x76>
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	f04f 0a00 	mov.w	sl, #0
 800ffa4:	9304      	str	r3, [sp, #16]
 800ffa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffa8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffaa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ffae:	46d3      	mov	fp, sl
 800ffb0:	220a      	movs	r2, #10
 800ffb2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ffb4:	7806      	ldrb	r6, [r0, #0]
 800ffb6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ffba:	b2d9      	uxtb	r1, r3
 800ffbc:	2909      	cmp	r1, #9
 800ffbe:	d926      	bls.n	801000e <_strtod_l+0x1ae>
 800ffc0:	494c      	ldr	r1, [pc, #304]	; (80100f4 <_strtod_l+0x294>)
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f001 fb79 	bl	80116ba <strncmp>
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	d030      	beq.n	801002e <_strtod_l+0x1ce>
 800ffcc:	2000      	movs	r0, #0
 800ffce:	4632      	mov	r2, r6
 800ffd0:	9005      	str	r0, [sp, #20]
 800ffd2:	465e      	mov	r6, fp
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2a65      	cmp	r2, #101	; 0x65
 800ffd8:	d001      	beq.n	800ffde <_strtod_l+0x17e>
 800ffda:	2a45      	cmp	r2, #69	; 0x45
 800ffdc:	d113      	bne.n	8010006 <_strtod_l+0x1a6>
 800ffde:	b91e      	cbnz	r6, 800ffe8 <_strtod_l+0x188>
 800ffe0:	9a04      	ldr	r2, [sp, #16]
 800ffe2:	4302      	orrs	r2, r0
 800ffe4:	d094      	beq.n	800ff10 <_strtod_l+0xb0>
 800ffe6:	2600      	movs	r6, #0
 800ffe8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ffea:	1c6a      	adds	r2, r5, #1
 800ffec:	9215      	str	r2, [sp, #84]	; 0x54
 800ffee:	786a      	ldrb	r2, [r5, #1]
 800fff0:	2a2b      	cmp	r2, #43	; 0x2b
 800fff2:	d074      	beq.n	80100de <_strtod_l+0x27e>
 800fff4:	2a2d      	cmp	r2, #45	; 0x2d
 800fff6:	d078      	beq.n	80100ea <_strtod_l+0x28a>
 800fff8:	f04f 0c00 	mov.w	ip, #0
 800fffc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010000:	2909      	cmp	r1, #9
 8010002:	d97f      	bls.n	8010104 <_strtod_l+0x2a4>
 8010004:	9515      	str	r5, [sp, #84]	; 0x54
 8010006:	2700      	movs	r7, #0
 8010008:	e09e      	b.n	8010148 <_strtod_l+0x2e8>
 801000a:	2300      	movs	r3, #0
 801000c:	e7c8      	b.n	800ffa0 <_strtod_l+0x140>
 801000e:	f1bb 0f08 	cmp.w	fp, #8
 8010012:	bfd8      	it	le
 8010014:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010016:	f100 0001 	add.w	r0, r0, #1
 801001a:	bfda      	itte	le
 801001c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010020:	9309      	strle	r3, [sp, #36]	; 0x24
 8010022:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010026:	f10b 0b01 	add.w	fp, fp, #1
 801002a:	9015      	str	r0, [sp, #84]	; 0x54
 801002c:	e7c1      	b.n	800ffb2 <_strtod_l+0x152>
 801002e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010030:	1c5a      	adds	r2, r3, #1
 8010032:	9215      	str	r2, [sp, #84]	; 0x54
 8010034:	785a      	ldrb	r2, [r3, #1]
 8010036:	f1bb 0f00 	cmp.w	fp, #0
 801003a:	d037      	beq.n	80100ac <_strtod_l+0x24c>
 801003c:	9005      	str	r0, [sp, #20]
 801003e:	465e      	mov	r6, fp
 8010040:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010044:	2b09      	cmp	r3, #9
 8010046:	d912      	bls.n	801006e <_strtod_l+0x20e>
 8010048:	2301      	movs	r3, #1
 801004a:	e7c4      	b.n	800ffd6 <_strtod_l+0x176>
 801004c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801004e:	1c5a      	adds	r2, r3, #1
 8010050:	9215      	str	r2, [sp, #84]	; 0x54
 8010052:	785a      	ldrb	r2, [r3, #1]
 8010054:	3001      	adds	r0, #1
 8010056:	2a30      	cmp	r2, #48	; 0x30
 8010058:	d0f8      	beq.n	801004c <_strtod_l+0x1ec>
 801005a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801005e:	2b08      	cmp	r3, #8
 8010060:	f200 84c1 	bhi.w	80109e6 <_strtod_l+0xb86>
 8010064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010066:	9005      	str	r0, [sp, #20]
 8010068:	2000      	movs	r0, #0
 801006a:	930b      	str	r3, [sp, #44]	; 0x2c
 801006c:	4606      	mov	r6, r0
 801006e:	3a30      	subs	r2, #48	; 0x30
 8010070:	f100 0301 	add.w	r3, r0, #1
 8010074:	d014      	beq.n	80100a0 <_strtod_l+0x240>
 8010076:	9905      	ldr	r1, [sp, #20]
 8010078:	4419      	add	r1, r3
 801007a:	9105      	str	r1, [sp, #20]
 801007c:	4633      	mov	r3, r6
 801007e:	eb00 0c06 	add.w	ip, r0, r6
 8010082:	210a      	movs	r1, #10
 8010084:	4563      	cmp	r3, ip
 8010086:	d113      	bne.n	80100b0 <_strtod_l+0x250>
 8010088:	1833      	adds	r3, r6, r0
 801008a:	2b08      	cmp	r3, #8
 801008c:	f106 0601 	add.w	r6, r6, #1
 8010090:	4406      	add	r6, r0
 8010092:	dc1a      	bgt.n	80100ca <_strtod_l+0x26a>
 8010094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010096:	230a      	movs	r3, #10
 8010098:	fb03 2301 	mla	r3, r3, r1, r2
 801009c:	9309      	str	r3, [sp, #36]	; 0x24
 801009e:	2300      	movs	r3, #0
 80100a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80100a2:	1c51      	adds	r1, r2, #1
 80100a4:	9115      	str	r1, [sp, #84]	; 0x54
 80100a6:	7852      	ldrb	r2, [r2, #1]
 80100a8:	4618      	mov	r0, r3
 80100aa:	e7c9      	b.n	8010040 <_strtod_l+0x1e0>
 80100ac:	4658      	mov	r0, fp
 80100ae:	e7d2      	b.n	8010056 <_strtod_l+0x1f6>
 80100b0:	2b08      	cmp	r3, #8
 80100b2:	f103 0301 	add.w	r3, r3, #1
 80100b6:	dc03      	bgt.n	80100c0 <_strtod_l+0x260>
 80100b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80100ba:	434f      	muls	r7, r1
 80100bc:	9709      	str	r7, [sp, #36]	; 0x24
 80100be:	e7e1      	b.n	8010084 <_strtod_l+0x224>
 80100c0:	2b10      	cmp	r3, #16
 80100c2:	bfd8      	it	le
 80100c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80100c8:	e7dc      	b.n	8010084 <_strtod_l+0x224>
 80100ca:	2e10      	cmp	r6, #16
 80100cc:	bfdc      	itt	le
 80100ce:	230a      	movle	r3, #10
 80100d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80100d4:	e7e3      	b.n	801009e <_strtod_l+0x23e>
 80100d6:	2300      	movs	r3, #0
 80100d8:	9305      	str	r3, [sp, #20]
 80100da:	2301      	movs	r3, #1
 80100dc:	e780      	b.n	800ffe0 <_strtod_l+0x180>
 80100de:	f04f 0c00 	mov.w	ip, #0
 80100e2:	1caa      	adds	r2, r5, #2
 80100e4:	9215      	str	r2, [sp, #84]	; 0x54
 80100e6:	78aa      	ldrb	r2, [r5, #2]
 80100e8:	e788      	b.n	800fffc <_strtod_l+0x19c>
 80100ea:	f04f 0c01 	mov.w	ip, #1
 80100ee:	e7f8      	b.n	80100e2 <_strtod_l+0x282>
 80100f0:	080127f0 	.word	0x080127f0
 80100f4:	080127ec 	.word	0x080127ec
 80100f8:	7ff00000 	.word	0x7ff00000
 80100fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80100fe:	1c51      	adds	r1, r2, #1
 8010100:	9115      	str	r1, [sp, #84]	; 0x54
 8010102:	7852      	ldrb	r2, [r2, #1]
 8010104:	2a30      	cmp	r2, #48	; 0x30
 8010106:	d0f9      	beq.n	80100fc <_strtod_l+0x29c>
 8010108:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801010c:	2908      	cmp	r1, #8
 801010e:	f63f af7a 	bhi.w	8010006 <_strtod_l+0x1a6>
 8010112:	3a30      	subs	r2, #48	; 0x30
 8010114:	9208      	str	r2, [sp, #32]
 8010116:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010118:	920c      	str	r2, [sp, #48]	; 0x30
 801011a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801011c:	1c57      	adds	r7, r2, #1
 801011e:	9715      	str	r7, [sp, #84]	; 0x54
 8010120:	7852      	ldrb	r2, [r2, #1]
 8010122:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010126:	f1be 0f09 	cmp.w	lr, #9
 801012a:	d938      	bls.n	801019e <_strtod_l+0x33e>
 801012c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801012e:	1a7f      	subs	r7, r7, r1
 8010130:	2f08      	cmp	r7, #8
 8010132:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010136:	dc03      	bgt.n	8010140 <_strtod_l+0x2e0>
 8010138:	9908      	ldr	r1, [sp, #32]
 801013a:	428f      	cmp	r7, r1
 801013c:	bfa8      	it	ge
 801013e:	460f      	movge	r7, r1
 8010140:	f1bc 0f00 	cmp.w	ip, #0
 8010144:	d000      	beq.n	8010148 <_strtod_l+0x2e8>
 8010146:	427f      	negs	r7, r7
 8010148:	2e00      	cmp	r6, #0
 801014a:	d14f      	bne.n	80101ec <_strtod_l+0x38c>
 801014c:	9904      	ldr	r1, [sp, #16]
 801014e:	4301      	orrs	r1, r0
 8010150:	f47f aec1 	bne.w	800fed6 <_strtod_l+0x76>
 8010154:	2b00      	cmp	r3, #0
 8010156:	f47f aedb 	bne.w	800ff10 <_strtod_l+0xb0>
 801015a:	2a69      	cmp	r2, #105	; 0x69
 801015c:	d029      	beq.n	80101b2 <_strtod_l+0x352>
 801015e:	dc26      	bgt.n	80101ae <_strtod_l+0x34e>
 8010160:	2a49      	cmp	r2, #73	; 0x49
 8010162:	d026      	beq.n	80101b2 <_strtod_l+0x352>
 8010164:	2a4e      	cmp	r2, #78	; 0x4e
 8010166:	f47f aed3 	bne.w	800ff10 <_strtod_l+0xb0>
 801016a:	499b      	ldr	r1, [pc, #620]	; (80103d8 <_strtod_l+0x578>)
 801016c:	a815      	add	r0, sp, #84	; 0x54
 801016e:	f001 fda7 	bl	8011cc0 <__match>
 8010172:	2800      	cmp	r0, #0
 8010174:	f43f aecc 	beq.w	800ff10 <_strtod_l+0xb0>
 8010178:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	2b28      	cmp	r3, #40	; 0x28
 801017e:	d12f      	bne.n	80101e0 <_strtod_l+0x380>
 8010180:	4996      	ldr	r1, [pc, #600]	; (80103dc <_strtod_l+0x57c>)
 8010182:	aa18      	add	r2, sp, #96	; 0x60
 8010184:	a815      	add	r0, sp, #84	; 0x54
 8010186:	f001 fdaf 	bl	8011ce8 <__hexnan>
 801018a:	2805      	cmp	r0, #5
 801018c:	d128      	bne.n	80101e0 <_strtod_l+0x380>
 801018e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010190:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010194:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010198:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801019c:	e69b      	b.n	800fed6 <_strtod_l+0x76>
 801019e:	9f08      	ldr	r7, [sp, #32]
 80101a0:	210a      	movs	r1, #10
 80101a2:	fb01 2107 	mla	r1, r1, r7, r2
 80101a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80101aa:	9208      	str	r2, [sp, #32]
 80101ac:	e7b5      	b.n	801011a <_strtod_l+0x2ba>
 80101ae:	2a6e      	cmp	r2, #110	; 0x6e
 80101b0:	e7d9      	b.n	8010166 <_strtod_l+0x306>
 80101b2:	498b      	ldr	r1, [pc, #556]	; (80103e0 <_strtod_l+0x580>)
 80101b4:	a815      	add	r0, sp, #84	; 0x54
 80101b6:	f001 fd83 	bl	8011cc0 <__match>
 80101ba:	2800      	cmp	r0, #0
 80101bc:	f43f aea8 	beq.w	800ff10 <_strtod_l+0xb0>
 80101c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101c2:	4988      	ldr	r1, [pc, #544]	; (80103e4 <_strtod_l+0x584>)
 80101c4:	3b01      	subs	r3, #1
 80101c6:	a815      	add	r0, sp, #84	; 0x54
 80101c8:	9315      	str	r3, [sp, #84]	; 0x54
 80101ca:	f001 fd79 	bl	8011cc0 <__match>
 80101ce:	b910      	cbnz	r0, 80101d6 <_strtod_l+0x376>
 80101d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101d2:	3301      	adds	r3, #1
 80101d4:	9315      	str	r3, [sp, #84]	; 0x54
 80101d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80103f4 <_strtod_l+0x594>
 80101da:	f04f 0800 	mov.w	r8, #0
 80101de:	e67a      	b.n	800fed6 <_strtod_l+0x76>
 80101e0:	4881      	ldr	r0, [pc, #516]	; (80103e8 <_strtod_l+0x588>)
 80101e2:	f001 fa89 	bl	80116f8 <nan>
 80101e6:	ec59 8b10 	vmov	r8, r9, d0
 80101ea:	e674      	b.n	800fed6 <_strtod_l+0x76>
 80101ec:	9b05      	ldr	r3, [sp, #20]
 80101ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101f0:	1afb      	subs	r3, r7, r3
 80101f2:	f1bb 0f00 	cmp.w	fp, #0
 80101f6:	bf08      	it	eq
 80101f8:	46b3      	moveq	fp, r6
 80101fa:	2e10      	cmp	r6, #16
 80101fc:	9308      	str	r3, [sp, #32]
 80101fe:	4635      	mov	r5, r6
 8010200:	bfa8      	it	ge
 8010202:	2510      	movge	r5, #16
 8010204:	f7f0 f97e 	bl	8000504 <__aeabi_ui2d>
 8010208:	2e09      	cmp	r6, #9
 801020a:	4680      	mov	r8, r0
 801020c:	4689      	mov	r9, r1
 801020e:	dd13      	ble.n	8010238 <_strtod_l+0x3d8>
 8010210:	4b76      	ldr	r3, [pc, #472]	; (80103ec <_strtod_l+0x58c>)
 8010212:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010216:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801021a:	f7f0 f9ed 	bl	80005f8 <__aeabi_dmul>
 801021e:	4680      	mov	r8, r0
 8010220:	4650      	mov	r0, sl
 8010222:	4689      	mov	r9, r1
 8010224:	f7f0 f96e 	bl	8000504 <__aeabi_ui2d>
 8010228:	4602      	mov	r2, r0
 801022a:	460b      	mov	r3, r1
 801022c:	4640      	mov	r0, r8
 801022e:	4649      	mov	r1, r9
 8010230:	f7f0 f82c 	bl	800028c <__adddf3>
 8010234:	4680      	mov	r8, r0
 8010236:	4689      	mov	r9, r1
 8010238:	2e0f      	cmp	r6, #15
 801023a:	dc38      	bgt.n	80102ae <_strtod_l+0x44e>
 801023c:	9b08      	ldr	r3, [sp, #32]
 801023e:	2b00      	cmp	r3, #0
 8010240:	f43f ae49 	beq.w	800fed6 <_strtod_l+0x76>
 8010244:	dd24      	ble.n	8010290 <_strtod_l+0x430>
 8010246:	2b16      	cmp	r3, #22
 8010248:	dc0b      	bgt.n	8010262 <_strtod_l+0x402>
 801024a:	4968      	ldr	r1, [pc, #416]	; (80103ec <_strtod_l+0x58c>)
 801024c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010254:	4642      	mov	r2, r8
 8010256:	464b      	mov	r3, r9
 8010258:	f7f0 f9ce 	bl	80005f8 <__aeabi_dmul>
 801025c:	4680      	mov	r8, r0
 801025e:	4689      	mov	r9, r1
 8010260:	e639      	b.n	800fed6 <_strtod_l+0x76>
 8010262:	9a08      	ldr	r2, [sp, #32]
 8010264:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010268:	4293      	cmp	r3, r2
 801026a:	db20      	blt.n	80102ae <_strtod_l+0x44e>
 801026c:	4c5f      	ldr	r4, [pc, #380]	; (80103ec <_strtod_l+0x58c>)
 801026e:	f1c6 060f 	rsb	r6, r6, #15
 8010272:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8010276:	4642      	mov	r2, r8
 8010278:	464b      	mov	r3, r9
 801027a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801027e:	f7f0 f9bb 	bl	80005f8 <__aeabi_dmul>
 8010282:	9b08      	ldr	r3, [sp, #32]
 8010284:	1b9e      	subs	r6, r3, r6
 8010286:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801028a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801028e:	e7e3      	b.n	8010258 <_strtod_l+0x3f8>
 8010290:	9b08      	ldr	r3, [sp, #32]
 8010292:	3316      	adds	r3, #22
 8010294:	db0b      	blt.n	80102ae <_strtod_l+0x44e>
 8010296:	9b05      	ldr	r3, [sp, #20]
 8010298:	1bdf      	subs	r7, r3, r7
 801029a:	4b54      	ldr	r3, [pc, #336]	; (80103ec <_strtod_l+0x58c>)
 801029c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80102a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102a4:	4640      	mov	r0, r8
 80102a6:	4649      	mov	r1, r9
 80102a8:	f7f0 fad0 	bl	800084c <__aeabi_ddiv>
 80102ac:	e7d6      	b.n	801025c <_strtod_l+0x3fc>
 80102ae:	9b08      	ldr	r3, [sp, #32]
 80102b0:	1b75      	subs	r5, r6, r5
 80102b2:	441d      	add	r5, r3
 80102b4:	2d00      	cmp	r5, #0
 80102b6:	dd70      	ble.n	801039a <_strtod_l+0x53a>
 80102b8:	f015 030f 	ands.w	r3, r5, #15
 80102bc:	d00a      	beq.n	80102d4 <_strtod_l+0x474>
 80102be:	494b      	ldr	r1, [pc, #300]	; (80103ec <_strtod_l+0x58c>)
 80102c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80102c4:	4642      	mov	r2, r8
 80102c6:	464b      	mov	r3, r9
 80102c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102cc:	f7f0 f994 	bl	80005f8 <__aeabi_dmul>
 80102d0:	4680      	mov	r8, r0
 80102d2:	4689      	mov	r9, r1
 80102d4:	f035 050f 	bics.w	r5, r5, #15
 80102d8:	d04d      	beq.n	8010376 <_strtod_l+0x516>
 80102da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80102de:	dd22      	ble.n	8010326 <_strtod_l+0x4c6>
 80102e0:	2500      	movs	r5, #0
 80102e2:	46ab      	mov	fp, r5
 80102e4:	9509      	str	r5, [sp, #36]	; 0x24
 80102e6:	9505      	str	r5, [sp, #20]
 80102e8:	2322      	movs	r3, #34	; 0x22
 80102ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80103f4 <_strtod_l+0x594>
 80102ee:	6023      	str	r3, [r4, #0]
 80102f0:	f04f 0800 	mov.w	r8, #0
 80102f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	f43f aded 	beq.w	800fed6 <_strtod_l+0x76>
 80102fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80102fe:	4620      	mov	r0, r4
 8010300:	f7ff f924 	bl	800f54c <_Bfree>
 8010304:	9905      	ldr	r1, [sp, #20]
 8010306:	4620      	mov	r0, r4
 8010308:	f7ff f920 	bl	800f54c <_Bfree>
 801030c:	4659      	mov	r1, fp
 801030e:	4620      	mov	r0, r4
 8010310:	f7ff f91c 	bl	800f54c <_Bfree>
 8010314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010316:	4620      	mov	r0, r4
 8010318:	f7ff f918 	bl	800f54c <_Bfree>
 801031c:	4629      	mov	r1, r5
 801031e:	4620      	mov	r0, r4
 8010320:	f7ff f914 	bl	800f54c <_Bfree>
 8010324:	e5d7      	b.n	800fed6 <_strtod_l+0x76>
 8010326:	4b32      	ldr	r3, [pc, #200]	; (80103f0 <_strtod_l+0x590>)
 8010328:	9304      	str	r3, [sp, #16]
 801032a:	2300      	movs	r3, #0
 801032c:	112d      	asrs	r5, r5, #4
 801032e:	4640      	mov	r0, r8
 8010330:	4649      	mov	r1, r9
 8010332:	469a      	mov	sl, r3
 8010334:	2d01      	cmp	r5, #1
 8010336:	dc21      	bgt.n	801037c <_strtod_l+0x51c>
 8010338:	b10b      	cbz	r3, 801033e <_strtod_l+0x4de>
 801033a:	4680      	mov	r8, r0
 801033c:	4689      	mov	r9, r1
 801033e:	492c      	ldr	r1, [pc, #176]	; (80103f0 <_strtod_l+0x590>)
 8010340:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010344:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010348:	4642      	mov	r2, r8
 801034a:	464b      	mov	r3, r9
 801034c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010350:	f7f0 f952 	bl	80005f8 <__aeabi_dmul>
 8010354:	4b27      	ldr	r3, [pc, #156]	; (80103f4 <_strtod_l+0x594>)
 8010356:	460a      	mov	r2, r1
 8010358:	400b      	ands	r3, r1
 801035a:	4927      	ldr	r1, [pc, #156]	; (80103f8 <_strtod_l+0x598>)
 801035c:	428b      	cmp	r3, r1
 801035e:	4680      	mov	r8, r0
 8010360:	d8be      	bhi.n	80102e0 <_strtod_l+0x480>
 8010362:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010366:	428b      	cmp	r3, r1
 8010368:	bf86      	itte	hi
 801036a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80103fc <_strtod_l+0x59c>
 801036e:	f04f 38ff 	movhi.w	r8, #4294967295
 8010372:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8010376:	2300      	movs	r3, #0
 8010378:	9304      	str	r3, [sp, #16]
 801037a:	e07b      	b.n	8010474 <_strtod_l+0x614>
 801037c:	07ea      	lsls	r2, r5, #31
 801037e:	d505      	bpl.n	801038c <_strtod_l+0x52c>
 8010380:	9b04      	ldr	r3, [sp, #16]
 8010382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010386:	f7f0 f937 	bl	80005f8 <__aeabi_dmul>
 801038a:	2301      	movs	r3, #1
 801038c:	9a04      	ldr	r2, [sp, #16]
 801038e:	3208      	adds	r2, #8
 8010390:	f10a 0a01 	add.w	sl, sl, #1
 8010394:	106d      	asrs	r5, r5, #1
 8010396:	9204      	str	r2, [sp, #16]
 8010398:	e7cc      	b.n	8010334 <_strtod_l+0x4d4>
 801039a:	d0ec      	beq.n	8010376 <_strtod_l+0x516>
 801039c:	426d      	negs	r5, r5
 801039e:	f015 020f 	ands.w	r2, r5, #15
 80103a2:	d00a      	beq.n	80103ba <_strtod_l+0x55a>
 80103a4:	4b11      	ldr	r3, [pc, #68]	; (80103ec <_strtod_l+0x58c>)
 80103a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103aa:	4640      	mov	r0, r8
 80103ac:	4649      	mov	r1, r9
 80103ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b2:	f7f0 fa4b 	bl	800084c <__aeabi_ddiv>
 80103b6:	4680      	mov	r8, r0
 80103b8:	4689      	mov	r9, r1
 80103ba:	112d      	asrs	r5, r5, #4
 80103bc:	d0db      	beq.n	8010376 <_strtod_l+0x516>
 80103be:	2d1f      	cmp	r5, #31
 80103c0:	dd1e      	ble.n	8010400 <_strtod_l+0x5a0>
 80103c2:	2500      	movs	r5, #0
 80103c4:	46ab      	mov	fp, r5
 80103c6:	9509      	str	r5, [sp, #36]	; 0x24
 80103c8:	9505      	str	r5, [sp, #20]
 80103ca:	2322      	movs	r3, #34	; 0x22
 80103cc:	f04f 0800 	mov.w	r8, #0
 80103d0:	f04f 0900 	mov.w	r9, #0
 80103d4:	6023      	str	r3, [r4, #0]
 80103d6:	e78d      	b.n	80102f4 <_strtod_l+0x494>
 80103d8:	080125d9 	.word	0x080125d9
 80103dc:	08012804 	.word	0x08012804
 80103e0:	080125d1 	.word	0x080125d1
 80103e4:	08012606 	.word	0x08012606
 80103e8:	080129b0 	.word	0x080129b0
 80103ec:	08012718 	.word	0x08012718
 80103f0:	080126f0 	.word	0x080126f0
 80103f4:	7ff00000 	.word	0x7ff00000
 80103f8:	7ca00000 	.word	0x7ca00000
 80103fc:	7fefffff 	.word	0x7fefffff
 8010400:	f015 0310 	ands.w	r3, r5, #16
 8010404:	bf18      	it	ne
 8010406:	236a      	movne	r3, #106	; 0x6a
 8010408:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80107ac <_strtod_l+0x94c>
 801040c:	9304      	str	r3, [sp, #16]
 801040e:	4640      	mov	r0, r8
 8010410:	4649      	mov	r1, r9
 8010412:	2300      	movs	r3, #0
 8010414:	07ea      	lsls	r2, r5, #31
 8010416:	d504      	bpl.n	8010422 <_strtod_l+0x5c2>
 8010418:	e9da 2300 	ldrd	r2, r3, [sl]
 801041c:	f7f0 f8ec 	bl	80005f8 <__aeabi_dmul>
 8010420:	2301      	movs	r3, #1
 8010422:	106d      	asrs	r5, r5, #1
 8010424:	f10a 0a08 	add.w	sl, sl, #8
 8010428:	d1f4      	bne.n	8010414 <_strtod_l+0x5b4>
 801042a:	b10b      	cbz	r3, 8010430 <_strtod_l+0x5d0>
 801042c:	4680      	mov	r8, r0
 801042e:	4689      	mov	r9, r1
 8010430:	9b04      	ldr	r3, [sp, #16]
 8010432:	b1bb      	cbz	r3, 8010464 <_strtod_l+0x604>
 8010434:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010438:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801043c:	2b00      	cmp	r3, #0
 801043e:	4649      	mov	r1, r9
 8010440:	dd10      	ble.n	8010464 <_strtod_l+0x604>
 8010442:	2b1f      	cmp	r3, #31
 8010444:	f340 811e 	ble.w	8010684 <_strtod_l+0x824>
 8010448:	2b34      	cmp	r3, #52	; 0x34
 801044a:	bfde      	ittt	le
 801044c:	f04f 33ff 	movle.w	r3, #4294967295
 8010450:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010454:	4093      	lslle	r3, r2
 8010456:	f04f 0800 	mov.w	r8, #0
 801045a:	bfcc      	ite	gt
 801045c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010460:	ea03 0901 	andle.w	r9, r3, r1
 8010464:	2200      	movs	r2, #0
 8010466:	2300      	movs	r3, #0
 8010468:	4640      	mov	r0, r8
 801046a:	4649      	mov	r1, r9
 801046c:	f7f0 fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010470:	2800      	cmp	r0, #0
 8010472:	d1a6      	bne.n	80103c2 <_strtod_l+0x562>
 8010474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010476:	9300      	str	r3, [sp, #0]
 8010478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801047a:	4633      	mov	r3, r6
 801047c:	465a      	mov	r2, fp
 801047e:	4620      	mov	r0, r4
 8010480:	f7ff f8cc 	bl	800f61c <__s2b>
 8010484:	9009      	str	r0, [sp, #36]	; 0x24
 8010486:	2800      	cmp	r0, #0
 8010488:	f43f af2a 	beq.w	80102e0 <_strtod_l+0x480>
 801048c:	9a08      	ldr	r2, [sp, #32]
 801048e:	9b05      	ldr	r3, [sp, #20]
 8010490:	2a00      	cmp	r2, #0
 8010492:	eba3 0307 	sub.w	r3, r3, r7
 8010496:	bfa8      	it	ge
 8010498:	2300      	movge	r3, #0
 801049a:	930c      	str	r3, [sp, #48]	; 0x30
 801049c:	2500      	movs	r5, #0
 801049e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80104a2:	9312      	str	r3, [sp, #72]	; 0x48
 80104a4:	46ab      	mov	fp, r5
 80104a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104a8:	4620      	mov	r0, r4
 80104aa:	6859      	ldr	r1, [r3, #4]
 80104ac:	f7ff f80e 	bl	800f4cc <_Balloc>
 80104b0:	9005      	str	r0, [sp, #20]
 80104b2:	2800      	cmp	r0, #0
 80104b4:	f43f af18 	beq.w	80102e8 <_strtod_l+0x488>
 80104b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104ba:	691a      	ldr	r2, [r3, #16]
 80104bc:	3202      	adds	r2, #2
 80104be:	f103 010c 	add.w	r1, r3, #12
 80104c2:	0092      	lsls	r2, r2, #2
 80104c4:	300c      	adds	r0, #12
 80104c6:	f7fe f926 	bl	800e716 <memcpy>
 80104ca:	ec49 8b10 	vmov	d0, r8, r9
 80104ce:	aa18      	add	r2, sp, #96	; 0x60
 80104d0:	a917      	add	r1, sp, #92	; 0x5c
 80104d2:	4620      	mov	r0, r4
 80104d4:	f7ff fbd6 	bl	800fc84 <__d2b>
 80104d8:	ec49 8b18 	vmov	d8, r8, r9
 80104dc:	9016      	str	r0, [sp, #88]	; 0x58
 80104de:	2800      	cmp	r0, #0
 80104e0:	f43f af02 	beq.w	80102e8 <_strtod_l+0x488>
 80104e4:	2101      	movs	r1, #1
 80104e6:	4620      	mov	r0, r4
 80104e8:	f7ff f930 	bl	800f74c <__i2b>
 80104ec:	4683      	mov	fp, r0
 80104ee:	2800      	cmp	r0, #0
 80104f0:	f43f aefa 	beq.w	80102e8 <_strtod_l+0x488>
 80104f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80104f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80104f8:	2e00      	cmp	r6, #0
 80104fa:	bfab      	itete	ge
 80104fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80104fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010500:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010502:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010506:	bfac      	ite	ge
 8010508:	eb06 0a03 	addge.w	sl, r6, r3
 801050c:	1b9f      	sublt	r7, r3, r6
 801050e:	9b04      	ldr	r3, [sp, #16]
 8010510:	1af6      	subs	r6, r6, r3
 8010512:	4416      	add	r6, r2
 8010514:	4ba0      	ldr	r3, [pc, #640]	; (8010798 <_strtod_l+0x938>)
 8010516:	3e01      	subs	r6, #1
 8010518:	429e      	cmp	r6, r3
 801051a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801051e:	f280 80c4 	bge.w	80106aa <_strtod_l+0x84a>
 8010522:	1b9b      	subs	r3, r3, r6
 8010524:	2b1f      	cmp	r3, #31
 8010526:	eba2 0203 	sub.w	r2, r2, r3
 801052a:	f04f 0101 	mov.w	r1, #1
 801052e:	f300 80b0 	bgt.w	8010692 <_strtod_l+0x832>
 8010532:	fa01 f303 	lsl.w	r3, r1, r3
 8010536:	930e      	str	r3, [sp, #56]	; 0x38
 8010538:	2300      	movs	r3, #0
 801053a:	930d      	str	r3, [sp, #52]	; 0x34
 801053c:	eb0a 0602 	add.w	r6, sl, r2
 8010540:	9b04      	ldr	r3, [sp, #16]
 8010542:	45b2      	cmp	sl, r6
 8010544:	4417      	add	r7, r2
 8010546:	441f      	add	r7, r3
 8010548:	4653      	mov	r3, sl
 801054a:	bfa8      	it	ge
 801054c:	4633      	movge	r3, r6
 801054e:	42bb      	cmp	r3, r7
 8010550:	bfa8      	it	ge
 8010552:	463b      	movge	r3, r7
 8010554:	2b00      	cmp	r3, #0
 8010556:	bfc2      	ittt	gt
 8010558:	1af6      	subgt	r6, r6, r3
 801055a:	1aff      	subgt	r7, r7, r3
 801055c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010562:	2b00      	cmp	r3, #0
 8010564:	dd17      	ble.n	8010596 <_strtod_l+0x736>
 8010566:	4659      	mov	r1, fp
 8010568:	461a      	mov	r2, r3
 801056a:	4620      	mov	r0, r4
 801056c:	f7ff f9ae 	bl	800f8cc <__pow5mult>
 8010570:	4683      	mov	fp, r0
 8010572:	2800      	cmp	r0, #0
 8010574:	f43f aeb8 	beq.w	80102e8 <_strtod_l+0x488>
 8010578:	4601      	mov	r1, r0
 801057a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801057c:	4620      	mov	r0, r4
 801057e:	f7ff f8fb 	bl	800f778 <__multiply>
 8010582:	900b      	str	r0, [sp, #44]	; 0x2c
 8010584:	2800      	cmp	r0, #0
 8010586:	f43f aeaf 	beq.w	80102e8 <_strtod_l+0x488>
 801058a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801058c:	4620      	mov	r0, r4
 801058e:	f7fe ffdd 	bl	800f54c <_Bfree>
 8010592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010594:	9316      	str	r3, [sp, #88]	; 0x58
 8010596:	2e00      	cmp	r6, #0
 8010598:	f300 808c 	bgt.w	80106b4 <_strtod_l+0x854>
 801059c:	9b08      	ldr	r3, [sp, #32]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	dd08      	ble.n	80105b4 <_strtod_l+0x754>
 80105a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80105a4:	9905      	ldr	r1, [sp, #20]
 80105a6:	4620      	mov	r0, r4
 80105a8:	f7ff f990 	bl	800f8cc <__pow5mult>
 80105ac:	9005      	str	r0, [sp, #20]
 80105ae:	2800      	cmp	r0, #0
 80105b0:	f43f ae9a 	beq.w	80102e8 <_strtod_l+0x488>
 80105b4:	2f00      	cmp	r7, #0
 80105b6:	dd08      	ble.n	80105ca <_strtod_l+0x76a>
 80105b8:	9905      	ldr	r1, [sp, #20]
 80105ba:	463a      	mov	r2, r7
 80105bc:	4620      	mov	r0, r4
 80105be:	f7ff f9df 	bl	800f980 <__lshift>
 80105c2:	9005      	str	r0, [sp, #20]
 80105c4:	2800      	cmp	r0, #0
 80105c6:	f43f ae8f 	beq.w	80102e8 <_strtod_l+0x488>
 80105ca:	f1ba 0f00 	cmp.w	sl, #0
 80105ce:	dd08      	ble.n	80105e2 <_strtod_l+0x782>
 80105d0:	4659      	mov	r1, fp
 80105d2:	4652      	mov	r2, sl
 80105d4:	4620      	mov	r0, r4
 80105d6:	f7ff f9d3 	bl	800f980 <__lshift>
 80105da:	4683      	mov	fp, r0
 80105dc:	2800      	cmp	r0, #0
 80105de:	f43f ae83 	beq.w	80102e8 <_strtod_l+0x488>
 80105e2:	9a05      	ldr	r2, [sp, #20]
 80105e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80105e6:	4620      	mov	r0, r4
 80105e8:	f7ff fa52 	bl	800fa90 <__mdiff>
 80105ec:	4605      	mov	r5, r0
 80105ee:	2800      	cmp	r0, #0
 80105f0:	f43f ae7a 	beq.w	80102e8 <_strtod_l+0x488>
 80105f4:	68c3      	ldr	r3, [r0, #12]
 80105f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80105f8:	2300      	movs	r3, #0
 80105fa:	60c3      	str	r3, [r0, #12]
 80105fc:	4659      	mov	r1, fp
 80105fe:	f7ff fa2b 	bl	800fa58 <__mcmp>
 8010602:	2800      	cmp	r0, #0
 8010604:	da60      	bge.n	80106c8 <_strtod_l+0x868>
 8010606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010608:	ea53 0308 	orrs.w	r3, r3, r8
 801060c:	f040 8084 	bne.w	8010718 <_strtod_l+0x8b8>
 8010610:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010614:	2b00      	cmp	r3, #0
 8010616:	d17f      	bne.n	8010718 <_strtod_l+0x8b8>
 8010618:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801061c:	0d1b      	lsrs	r3, r3, #20
 801061e:	051b      	lsls	r3, r3, #20
 8010620:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010624:	d978      	bls.n	8010718 <_strtod_l+0x8b8>
 8010626:	696b      	ldr	r3, [r5, #20]
 8010628:	b913      	cbnz	r3, 8010630 <_strtod_l+0x7d0>
 801062a:	692b      	ldr	r3, [r5, #16]
 801062c:	2b01      	cmp	r3, #1
 801062e:	dd73      	ble.n	8010718 <_strtod_l+0x8b8>
 8010630:	4629      	mov	r1, r5
 8010632:	2201      	movs	r2, #1
 8010634:	4620      	mov	r0, r4
 8010636:	f7ff f9a3 	bl	800f980 <__lshift>
 801063a:	4659      	mov	r1, fp
 801063c:	4605      	mov	r5, r0
 801063e:	f7ff fa0b 	bl	800fa58 <__mcmp>
 8010642:	2800      	cmp	r0, #0
 8010644:	dd68      	ble.n	8010718 <_strtod_l+0x8b8>
 8010646:	9904      	ldr	r1, [sp, #16]
 8010648:	4a54      	ldr	r2, [pc, #336]	; (801079c <_strtod_l+0x93c>)
 801064a:	464b      	mov	r3, r9
 801064c:	2900      	cmp	r1, #0
 801064e:	f000 8084 	beq.w	801075a <_strtod_l+0x8fa>
 8010652:	ea02 0109 	and.w	r1, r2, r9
 8010656:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801065a:	dc7e      	bgt.n	801075a <_strtod_l+0x8fa>
 801065c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010660:	f77f aeb3 	ble.w	80103ca <_strtod_l+0x56a>
 8010664:	4b4e      	ldr	r3, [pc, #312]	; (80107a0 <_strtod_l+0x940>)
 8010666:	4640      	mov	r0, r8
 8010668:	4649      	mov	r1, r9
 801066a:	2200      	movs	r2, #0
 801066c:	f7ef ffc4 	bl	80005f8 <__aeabi_dmul>
 8010670:	4b4a      	ldr	r3, [pc, #296]	; (801079c <_strtod_l+0x93c>)
 8010672:	400b      	ands	r3, r1
 8010674:	4680      	mov	r8, r0
 8010676:	4689      	mov	r9, r1
 8010678:	2b00      	cmp	r3, #0
 801067a:	f47f ae3f 	bne.w	80102fc <_strtod_l+0x49c>
 801067e:	2322      	movs	r3, #34	; 0x22
 8010680:	6023      	str	r3, [r4, #0]
 8010682:	e63b      	b.n	80102fc <_strtod_l+0x49c>
 8010684:	f04f 32ff 	mov.w	r2, #4294967295
 8010688:	fa02 f303 	lsl.w	r3, r2, r3
 801068c:	ea03 0808 	and.w	r8, r3, r8
 8010690:	e6e8      	b.n	8010464 <_strtod_l+0x604>
 8010692:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010696:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801069a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801069e:	36e2      	adds	r6, #226	; 0xe2
 80106a0:	fa01 f306 	lsl.w	r3, r1, r6
 80106a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80106a8:	e748      	b.n	801053c <_strtod_l+0x6dc>
 80106aa:	2100      	movs	r1, #0
 80106ac:	2301      	movs	r3, #1
 80106ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80106b2:	e743      	b.n	801053c <_strtod_l+0x6dc>
 80106b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80106b6:	4632      	mov	r2, r6
 80106b8:	4620      	mov	r0, r4
 80106ba:	f7ff f961 	bl	800f980 <__lshift>
 80106be:	9016      	str	r0, [sp, #88]	; 0x58
 80106c0:	2800      	cmp	r0, #0
 80106c2:	f47f af6b 	bne.w	801059c <_strtod_l+0x73c>
 80106c6:	e60f      	b.n	80102e8 <_strtod_l+0x488>
 80106c8:	46ca      	mov	sl, r9
 80106ca:	d171      	bne.n	80107b0 <_strtod_l+0x950>
 80106cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80106ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80106d2:	b352      	cbz	r2, 801072a <_strtod_l+0x8ca>
 80106d4:	4a33      	ldr	r2, [pc, #204]	; (80107a4 <_strtod_l+0x944>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d12a      	bne.n	8010730 <_strtod_l+0x8d0>
 80106da:	9b04      	ldr	r3, [sp, #16]
 80106dc:	4641      	mov	r1, r8
 80106de:	b1fb      	cbz	r3, 8010720 <_strtod_l+0x8c0>
 80106e0:	4b2e      	ldr	r3, [pc, #184]	; (801079c <_strtod_l+0x93c>)
 80106e2:	ea09 0303 	and.w	r3, r9, r3
 80106e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80106ea:	f04f 32ff 	mov.w	r2, #4294967295
 80106ee:	d81a      	bhi.n	8010726 <_strtod_l+0x8c6>
 80106f0:	0d1b      	lsrs	r3, r3, #20
 80106f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80106f6:	fa02 f303 	lsl.w	r3, r2, r3
 80106fa:	4299      	cmp	r1, r3
 80106fc:	d118      	bne.n	8010730 <_strtod_l+0x8d0>
 80106fe:	4b2a      	ldr	r3, [pc, #168]	; (80107a8 <_strtod_l+0x948>)
 8010700:	459a      	cmp	sl, r3
 8010702:	d102      	bne.n	801070a <_strtod_l+0x8aa>
 8010704:	3101      	adds	r1, #1
 8010706:	f43f adef 	beq.w	80102e8 <_strtod_l+0x488>
 801070a:	4b24      	ldr	r3, [pc, #144]	; (801079c <_strtod_l+0x93c>)
 801070c:	ea0a 0303 	and.w	r3, sl, r3
 8010710:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010714:	f04f 0800 	mov.w	r8, #0
 8010718:	9b04      	ldr	r3, [sp, #16]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d1a2      	bne.n	8010664 <_strtod_l+0x804>
 801071e:	e5ed      	b.n	80102fc <_strtod_l+0x49c>
 8010720:	f04f 33ff 	mov.w	r3, #4294967295
 8010724:	e7e9      	b.n	80106fa <_strtod_l+0x89a>
 8010726:	4613      	mov	r3, r2
 8010728:	e7e7      	b.n	80106fa <_strtod_l+0x89a>
 801072a:	ea53 0308 	orrs.w	r3, r3, r8
 801072e:	d08a      	beq.n	8010646 <_strtod_l+0x7e6>
 8010730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010732:	b1e3      	cbz	r3, 801076e <_strtod_l+0x90e>
 8010734:	ea13 0f0a 	tst.w	r3, sl
 8010738:	d0ee      	beq.n	8010718 <_strtod_l+0x8b8>
 801073a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801073c:	9a04      	ldr	r2, [sp, #16]
 801073e:	4640      	mov	r0, r8
 8010740:	4649      	mov	r1, r9
 8010742:	b1c3      	cbz	r3, 8010776 <_strtod_l+0x916>
 8010744:	f7ff fb6f 	bl	800fe26 <sulp>
 8010748:	4602      	mov	r2, r0
 801074a:	460b      	mov	r3, r1
 801074c:	ec51 0b18 	vmov	r0, r1, d8
 8010750:	f7ef fd9c 	bl	800028c <__adddf3>
 8010754:	4680      	mov	r8, r0
 8010756:	4689      	mov	r9, r1
 8010758:	e7de      	b.n	8010718 <_strtod_l+0x8b8>
 801075a:	4013      	ands	r3, r2
 801075c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010760:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010764:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010768:	f04f 38ff 	mov.w	r8, #4294967295
 801076c:	e7d4      	b.n	8010718 <_strtod_l+0x8b8>
 801076e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010770:	ea13 0f08 	tst.w	r3, r8
 8010774:	e7e0      	b.n	8010738 <_strtod_l+0x8d8>
 8010776:	f7ff fb56 	bl	800fe26 <sulp>
 801077a:	4602      	mov	r2, r0
 801077c:	460b      	mov	r3, r1
 801077e:	ec51 0b18 	vmov	r0, r1, d8
 8010782:	f7ef fd81 	bl	8000288 <__aeabi_dsub>
 8010786:	2200      	movs	r2, #0
 8010788:	2300      	movs	r3, #0
 801078a:	4680      	mov	r8, r0
 801078c:	4689      	mov	r9, r1
 801078e:	f7f0 f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8010792:	2800      	cmp	r0, #0
 8010794:	d0c0      	beq.n	8010718 <_strtod_l+0x8b8>
 8010796:	e618      	b.n	80103ca <_strtod_l+0x56a>
 8010798:	fffffc02 	.word	0xfffffc02
 801079c:	7ff00000 	.word	0x7ff00000
 80107a0:	39500000 	.word	0x39500000
 80107a4:	000fffff 	.word	0x000fffff
 80107a8:	7fefffff 	.word	0x7fefffff
 80107ac:	08012818 	.word	0x08012818
 80107b0:	4659      	mov	r1, fp
 80107b2:	4628      	mov	r0, r5
 80107b4:	f7ff fac0 	bl	800fd38 <__ratio>
 80107b8:	ec57 6b10 	vmov	r6, r7, d0
 80107bc:	ee10 0a10 	vmov	r0, s0
 80107c0:	2200      	movs	r2, #0
 80107c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80107c6:	4639      	mov	r1, r7
 80107c8:	f7f0 f992 	bl	8000af0 <__aeabi_dcmple>
 80107cc:	2800      	cmp	r0, #0
 80107ce:	d071      	beq.n	80108b4 <_strtod_l+0xa54>
 80107d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d17c      	bne.n	80108d0 <_strtod_l+0xa70>
 80107d6:	f1b8 0f00 	cmp.w	r8, #0
 80107da:	d15a      	bne.n	8010892 <_strtod_l+0xa32>
 80107dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d15d      	bne.n	80108a0 <_strtod_l+0xa40>
 80107e4:	4b90      	ldr	r3, [pc, #576]	; (8010a28 <_strtod_l+0xbc8>)
 80107e6:	2200      	movs	r2, #0
 80107e8:	4630      	mov	r0, r6
 80107ea:	4639      	mov	r1, r7
 80107ec:	f7f0 f976 	bl	8000adc <__aeabi_dcmplt>
 80107f0:	2800      	cmp	r0, #0
 80107f2:	d15c      	bne.n	80108ae <_strtod_l+0xa4e>
 80107f4:	4630      	mov	r0, r6
 80107f6:	4639      	mov	r1, r7
 80107f8:	4b8c      	ldr	r3, [pc, #560]	; (8010a2c <_strtod_l+0xbcc>)
 80107fa:	2200      	movs	r2, #0
 80107fc:	f7ef fefc 	bl	80005f8 <__aeabi_dmul>
 8010800:	4606      	mov	r6, r0
 8010802:	460f      	mov	r7, r1
 8010804:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010808:	9606      	str	r6, [sp, #24]
 801080a:	9307      	str	r3, [sp, #28]
 801080c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010810:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010814:	4b86      	ldr	r3, [pc, #536]	; (8010a30 <_strtod_l+0xbd0>)
 8010816:	ea0a 0303 	and.w	r3, sl, r3
 801081a:	930d      	str	r3, [sp, #52]	; 0x34
 801081c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801081e:	4b85      	ldr	r3, [pc, #532]	; (8010a34 <_strtod_l+0xbd4>)
 8010820:	429a      	cmp	r2, r3
 8010822:	f040 8090 	bne.w	8010946 <_strtod_l+0xae6>
 8010826:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801082a:	ec49 8b10 	vmov	d0, r8, r9
 801082e:	f7ff f9b9 	bl	800fba4 <__ulp>
 8010832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010836:	ec51 0b10 	vmov	r0, r1, d0
 801083a:	f7ef fedd 	bl	80005f8 <__aeabi_dmul>
 801083e:	4642      	mov	r2, r8
 8010840:	464b      	mov	r3, r9
 8010842:	f7ef fd23 	bl	800028c <__adddf3>
 8010846:	460b      	mov	r3, r1
 8010848:	4979      	ldr	r1, [pc, #484]	; (8010a30 <_strtod_l+0xbd0>)
 801084a:	4a7b      	ldr	r2, [pc, #492]	; (8010a38 <_strtod_l+0xbd8>)
 801084c:	4019      	ands	r1, r3
 801084e:	4291      	cmp	r1, r2
 8010850:	4680      	mov	r8, r0
 8010852:	d944      	bls.n	80108de <_strtod_l+0xa7e>
 8010854:	ee18 2a90 	vmov	r2, s17
 8010858:	4b78      	ldr	r3, [pc, #480]	; (8010a3c <_strtod_l+0xbdc>)
 801085a:	429a      	cmp	r2, r3
 801085c:	d104      	bne.n	8010868 <_strtod_l+0xa08>
 801085e:	ee18 3a10 	vmov	r3, s16
 8010862:	3301      	adds	r3, #1
 8010864:	f43f ad40 	beq.w	80102e8 <_strtod_l+0x488>
 8010868:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8010a3c <_strtod_l+0xbdc>
 801086c:	f04f 38ff 	mov.w	r8, #4294967295
 8010870:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010872:	4620      	mov	r0, r4
 8010874:	f7fe fe6a 	bl	800f54c <_Bfree>
 8010878:	9905      	ldr	r1, [sp, #20]
 801087a:	4620      	mov	r0, r4
 801087c:	f7fe fe66 	bl	800f54c <_Bfree>
 8010880:	4659      	mov	r1, fp
 8010882:	4620      	mov	r0, r4
 8010884:	f7fe fe62 	bl	800f54c <_Bfree>
 8010888:	4629      	mov	r1, r5
 801088a:	4620      	mov	r0, r4
 801088c:	f7fe fe5e 	bl	800f54c <_Bfree>
 8010890:	e609      	b.n	80104a6 <_strtod_l+0x646>
 8010892:	f1b8 0f01 	cmp.w	r8, #1
 8010896:	d103      	bne.n	80108a0 <_strtod_l+0xa40>
 8010898:	f1b9 0f00 	cmp.w	r9, #0
 801089c:	f43f ad95 	beq.w	80103ca <_strtod_l+0x56a>
 80108a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80109f8 <_strtod_l+0xb98>
 80108a4:	4f60      	ldr	r7, [pc, #384]	; (8010a28 <_strtod_l+0xbc8>)
 80108a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80108aa:	2600      	movs	r6, #0
 80108ac:	e7ae      	b.n	801080c <_strtod_l+0x9ac>
 80108ae:	4f5f      	ldr	r7, [pc, #380]	; (8010a2c <_strtod_l+0xbcc>)
 80108b0:	2600      	movs	r6, #0
 80108b2:	e7a7      	b.n	8010804 <_strtod_l+0x9a4>
 80108b4:	4b5d      	ldr	r3, [pc, #372]	; (8010a2c <_strtod_l+0xbcc>)
 80108b6:	4630      	mov	r0, r6
 80108b8:	4639      	mov	r1, r7
 80108ba:	2200      	movs	r2, #0
 80108bc:	f7ef fe9c 	bl	80005f8 <__aeabi_dmul>
 80108c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108c2:	4606      	mov	r6, r0
 80108c4:	460f      	mov	r7, r1
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d09c      	beq.n	8010804 <_strtod_l+0x9a4>
 80108ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80108ce:	e79d      	b.n	801080c <_strtod_l+0x9ac>
 80108d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010a00 <_strtod_l+0xba0>
 80108d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80108d8:	ec57 6b17 	vmov	r6, r7, d7
 80108dc:	e796      	b.n	801080c <_strtod_l+0x9ac>
 80108de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80108e2:	9b04      	ldr	r3, [sp, #16]
 80108e4:	46ca      	mov	sl, r9
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d1c2      	bne.n	8010870 <_strtod_l+0xa10>
 80108ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80108ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108f0:	0d1b      	lsrs	r3, r3, #20
 80108f2:	051b      	lsls	r3, r3, #20
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d1bb      	bne.n	8010870 <_strtod_l+0xa10>
 80108f8:	4630      	mov	r0, r6
 80108fa:	4639      	mov	r1, r7
 80108fc:	f7f0 f9dc 	bl	8000cb8 <__aeabi_d2lz>
 8010900:	f7ef fe4c 	bl	800059c <__aeabi_l2d>
 8010904:	4602      	mov	r2, r0
 8010906:	460b      	mov	r3, r1
 8010908:	4630      	mov	r0, r6
 801090a:	4639      	mov	r1, r7
 801090c:	f7ef fcbc 	bl	8000288 <__aeabi_dsub>
 8010910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010912:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010916:	ea43 0308 	orr.w	r3, r3, r8
 801091a:	4313      	orrs	r3, r2
 801091c:	4606      	mov	r6, r0
 801091e:	460f      	mov	r7, r1
 8010920:	d054      	beq.n	80109cc <_strtod_l+0xb6c>
 8010922:	a339      	add	r3, pc, #228	; (adr r3, 8010a08 <_strtod_l+0xba8>)
 8010924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010928:	f7f0 f8d8 	bl	8000adc <__aeabi_dcmplt>
 801092c:	2800      	cmp	r0, #0
 801092e:	f47f ace5 	bne.w	80102fc <_strtod_l+0x49c>
 8010932:	a337      	add	r3, pc, #220	; (adr r3, 8010a10 <_strtod_l+0xbb0>)
 8010934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010938:	4630      	mov	r0, r6
 801093a:	4639      	mov	r1, r7
 801093c:	f7f0 f8ec 	bl	8000b18 <__aeabi_dcmpgt>
 8010940:	2800      	cmp	r0, #0
 8010942:	d095      	beq.n	8010870 <_strtod_l+0xa10>
 8010944:	e4da      	b.n	80102fc <_strtod_l+0x49c>
 8010946:	9b04      	ldr	r3, [sp, #16]
 8010948:	b333      	cbz	r3, 8010998 <_strtod_l+0xb38>
 801094a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801094c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010950:	d822      	bhi.n	8010998 <_strtod_l+0xb38>
 8010952:	a331      	add	r3, pc, #196	; (adr r3, 8010a18 <_strtod_l+0xbb8>)
 8010954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010958:	4630      	mov	r0, r6
 801095a:	4639      	mov	r1, r7
 801095c:	f7f0 f8c8 	bl	8000af0 <__aeabi_dcmple>
 8010960:	b1a0      	cbz	r0, 801098c <_strtod_l+0xb2c>
 8010962:	4639      	mov	r1, r7
 8010964:	4630      	mov	r0, r6
 8010966:	f7f0 f91f 	bl	8000ba8 <__aeabi_d2uiz>
 801096a:	2801      	cmp	r0, #1
 801096c:	bf38      	it	cc
 801096e:	2001      	movcc	r0, #1
 8010970:	f7ef fdc8 	bl	8000504 <__aeabi_ui2d>
 8010974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010976:	4606      	mov	r6, r0
 8010978:	460f      	mov	r7, r1
 801097a:	bb23      	cbnz	r3, 80109c6 <_strtod_l+0xb66>
 801097c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010980:	9010      	str	r0, [sp, #64]	; 0x40
 8010982:	9311      	str	r3, [sp, #68]	; 0x44
 8010984:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010988:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801098c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801098e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010990:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010994:	1a9b      	subs	r3, r3, r2
 8010996:	930f      	str	r3, [sp, #60]	; 0x3c
 8010998:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801099c:	eeb0 0a48 	vmov.f32	s0, s16
 80109a0:	eef0 0a68 	vmov.f32	s1, s17
 80109a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80109a8:	f7ff f8fc 	bl	800fba4 <__ulp>
 80109ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80109b0:	ec53 2b10 	vmov	r2, r3, d0
 80109b4:	f7ef fe20 	bl	80005f8 <__aeabi_dmul>
 80109b8:	ec53 2b18 	vmov	r2, r3, d8
 80109bc:	f7ef fc66 	bl	800028c <__adddf3>
 80109c0:	4680      	mov	r8, r0
 80109c2:	4689      	mov	r9, r1
 80109c4:	e78d      	b.n	80108e2 <_strtod_l+0xa82>
 80109c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80109ca:	e7db      	b.n	8010984 <_strtod_l+0xb24>
 80109cc:	a314      	add	r3, pc, #80	; (adr r3, 8010a20 <_strtod_l+0xbc0>)
 80109ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d2:	f7f0 f883 	bl	8000adc <__aeabi_dcmplt>
 80109d6:	e7b3      	b.n	8010940 <_strtod_l+0xae0>
 80109d8:	2300      	movs	r3, #0
 80109da:	930a      	str	r3, [sp, #40]	; 0x28
 80109dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80109de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109e0:	6013      	str	r3, [r2, #0]
 80109e2:	f7ff ba7c 	b.w	800fede <_strtod_l+0x7e>
 80109e6:	2a65      	cmp	r2, #101	; 0x65
 80109e8:	f43f ab75 	beq.w	80100d6 <_strtod_l+0x276>
 80109ec:	2a45      	cmp	r2, #69	; 0x45
 80109ee:	f43f ab72 	beq.w	80100d6 <_strtod_l+0x276>
 80109f2:	2301      	movs	r3, #1
 80109f4:	f7ff bbaa 	b.w	801014c <_strtod_l+0x2ec>
 80109f8:	00000000 	.word	0x00000000
 80109fc:	bff00000 	.word	0xbff00000
 8010a00:	00000000 	.word	0x00000000
 8010a04:	3ff00000 	.word	0x3ff00000
 8010a08:	94a03595 	.word	0x94a03595
 8010a0c:	3fdfffff 	.word	0x3fdfffff
 8010a10:	35afe535 	.word	0x35afe535
 8010a14:	3fe00000 	.word	0x3fe00000
 8010a18:	ffc00000 	.word	0xffc00000
 8010a1c:	41dfffff 	.word	0x41dfffff
 8010a20:	94a03595 	.word	0x94a03595
 8010a24:	3fcfffff 	.word	0x3fcfffff
 8010a28:	3ff00000 	.word	0x3ff00000
 8010a2c:	3fe00000 	.word	0x3fe00000
 8010a30:	7ff00000 	.word	0x7ff00000
 8010a34:	7fe00000 	.word	0x7fe00000
 8010a38:	7c9fffff 	.word	0x7c9fffff
 8010a3c:	7fefffff 	.word	0x7fefffff

08010a40 <_strtod_r>:
 8010a40:	4b01      	ldr	r3, [pc, #4]	; (8010a48 <_strtod_r+0x8>)
 8010a42:	f7ff ba0d 	b.w	800fe60 <_strtod_l>
 8010a46:	bf00      	nop
 8010a48:	20000088 	.word	0x20000088

08010a4c <_strtol_l.constprop.0>:
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a52:	d001      	beq.n	8010a58 <_strtol_l.constprop.0+0xc>
 8010a54:	2b24      	cmp	r3, #36	; 0x24
 8010a56:	d906      	bls.n	8010a66 <_strtol_l.constprop.0+0x1a>
 8010a58:	f7fd fe30 	bl	800e6bc <__errno>
 8010a5c:	2316      	movs	r3, #22
 8010a5e:	6003      	str	r3, [r0, #0]
 8010a60:	2000      	movs	r0, #0
 8010a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010b4c <_strtol_l.constprop.0+0x100>
 8010a6a:	460d      	mov	r5, r1
 8010a6c:	462e      	mov	r6, r5
 8010a6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a72:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010a76:	f017 0708 	ands.w	r7, r7, #8
 8010a7a:	d1f7      	bne.n	8010a6c <_strtol_l.constprop.0+0x20>
 8010a7c:	2c2d      	cmp	r4, #45	; 0x2d
 8010a7e:	d132      	bne.n	8010ae6 <_strtol_l.constprop.0+0x9a>
 8010a80:	782c      	ldrb	r4, [r5, #0]
 8010a82:	2701      	movs	r7, #1
 8010a84:	1cb5      	adds	r5, r6, #2
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d05b      	beq.n	8010b42 <_strtol_l.constprop.0+0xf6>
 8010a8a:	2b10      	cmp	r3, #16
 8010a8c:	d109      	bne.n	8010aa2 <_strtol_l.constprop.0+0x56>
 8010a8e:	2c30      	cmp	r4, #48	; 0x30
 8010a90:	d107      	bne.n	8010aa2 <_strtol_l.constprop.0+0x56>
 8010a92:	782c      	ldrb	r4, [r5, #0]
 8010a94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010a98:	2c58      	cmp	r4, #88	; 0x58
 8010a9a:	d14d      	bne.n	8010b38 <_strtol_l.constprop.0+0xec>
 8010a9c:	786c      	ldrb	r4, [r5, #1]
 8010a9e:	2310      	movs	r3, #16
 8010aa0:	3502      	adds	r5, #2
 8010aa2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010aa6:	f108 38ff 	add.w	r8, r8, #4294967295
 8010aaa:	f04f 0e00 	mov.w	lr, #0
 8010aae:	fbb8 f9f3 	udiv	r9, r8, r3
 8010ab2:	4676      	mov	r6, lr
 8010ab4:	fb03 8a19 	mls	sl, r3, r9, r8
 8010ab8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010abc:	f1bc 0f09 	cmp.w	ip, #9
 8010ac0:	d816      	bhi.n	8010af0 <_strtol_l.constprop.0+0xa4>
 8010ac2:	4664      	mov	r4, ip
 8010ac4:	42a3      	cmp	r3, r4
 8010ac6:	dd24      	ble.n	8010b12 <_strtol_l.constprop.0+0xc6>
 8010ac8:	f1be 3fff 	cmp.w	lr, #4294967295
 8010acc:	d008      	beq.n	8010ae0 <_strtol_l.constprop.0+0x94>
 8010ace:	45b1      	cmp	r9, r6
 8010ad0:	d31c      	bcc.n	8010b0c <_strtol_l.constprop.0+0xc0>
 8010ad2:	d101      	bne.n	8010ad8 <_strtol_l.constprop.0+0x8c>
 8010ad4:	45a2      	cmp	sl, r4
 8010ad6:	db19      	blt.n	8010b0c <_strtol_l.constprop.0+0xc0>
 8010ad8:	fb06 4603 	mla	r6, r6, r3, r4
 8010adc:	f04f 0e01 	mov.w	lr, #1
 8010ae0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ae4:	e7e8      	b.n	8010ab8 <_strtol_l.constprop.0+0x6c>
 8010ae6:	2c2b      	cmp	r4, #43	; 0x2b
 8010ae8:	bf04      	itt	eq
 8010aea:	782c      	ldrbeq	r4, [r5, #0]
 8010aec:	1cb5      	addeq	r5, r6, #2
 8010aee:	e7ca      	b.n	8010a86 <_strtol_l.constprop.0+0x3a>
 8010af0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010af4:	f1bc 0f19 	cmp.w	ip, #25
 8010af8:	d801      	bhi.n	8010afe <_strtol_l.constprop.0+0xb2>
 8010afa:	3c37      	subs	r4, #55	; 0x37
 8010afc:	e7e2      	b.n	8010ac4 <_strtol_l.constprop.0+0x78>
 8010afe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010b02:	f1bc 0f19 	cmp.w	ip, #25
 8010b06:	d804      	bhi.n	8010b12 <_strtol_l.constprop.0+0xc6>
 8010b08:	3c57      	subs	r4, #87	; 0x57
 8010b0a:	e7db      	b.n	8010ac4 <_strtol_l.constprop.0+0x78>
 8010b0c:	f04f 3eff 	mov.w	lr, #4294967295
 8010b10:	e7e6      	b.n	8010ae0 <_strtol_l.constprop.0+0x94>
 8010b12:	f1be 3fff 	cmp.w	lr, #4294967295
 8010b16:	d105      	bne.n	8010b24 <_strtol_l.constprop.0+0xd8>
 8010b18:	2322      	movs	r3, #34	; 0x22
 8010b1a:	6003      	str	r3, [r0, #0]
 8010b1c:	4646      	mov	r6, r8
 8010b1e:	b942      	cbnz	r2, 8010b32 <_strtol_l.constprop.0+0xe6>
 8010b20:	4630      	mov	r0, r6
 8010b22:	e79e      	b.n	8010a62 <_strtol_l.constprop.0+0x16>
 8010b24:	b107      	cbz	r7, 8010b28 <_strtol_l.constprop.0+0xdc>
 8010b26:	4276      	negs	r6, r6
 8010b28:	2a00      	cmp	r2, #0
 8010b2a:	d0f9      	beq.n	8010b20 <_strtol_l.constprop.0+0xd4>
 8010b2c:	f1be 0f00 	cmp.w	lr, #0
 8010b30:	d000      	beq.n	8010b34 <_strtol_l.constprop.0+0xe8>
 8010b32:	1e69      	subs	r1, r5, #1
 8010b34:	6011      	str	r1, [r2, #0]
 8010b36:	e7f3      	b.n	8010b20 <_strtol_l.constprop.0+0xd4>
 8010b38:	2430      	movs	r4, #48	; 0x30
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d1b1      	bne.n	8010aa2 <_strtol_l.constprop.0+0x56>
 8010b3e:	2308      	movs	r3, #8
 8010b40:	e7af      	b.n	8010aa2 <_strtol_l.constprop.0+0x56>
 8010b42:	2c30      	cmp	r4, #48	; 0x30
 8010b44:	d0a5      	beq.n	8010a92 <_strtol_l.constprop.0+0x46>
 8010b46:	230a      	movs	r3, #10
 8010b48:	e7ab      	b.n	8010aa2 <_strtol_l.constprop.0+0x56>
 8010b4a:	bf00      	nop
 8010b4c:	08012841 	.word	0x08012841

08010b50 <_strtol_r>:
 8010b50:	f7ff bf7c 	b.w	8010a4c <_strtol_l.constprop.0>

08010b54 <__ssputs_r>:
 8010b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b58:	688e      	ldr	r6, [r1, #8]
 8010b5a:	461f      	mov	r7, r3
 8010b5c:	42be      	cmp	r6, r7
 8010b5e:	680b      	ldr	r3, [r1, #0]
 8010b60:	4682      	mov	sl, r0
 8010b62:	460c      	mov	r4, r1
 8010b64:	4690      	mov	r8, r2
 8010b66:	d82c      	bhi.n	8010bc2 <__ssputs_r+0x6e>
 8010b68:	898a      	ldrh	r2, [r1, #12]
 8010b6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b6e:	d026      	beq.n	8010bbe <__ssputs_r+0x6a>
 8010b70:	6965      	ldr	r5, [r4, #20]
 8010b72:	6909      	ldr	r1, [r1, #16]
 8010b74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b78:	eba3 0901 	sub.w	r9, r3, r1
 8010b7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010b80:	1c7b      	adds	r3, r7, #1
 8010b82:	444b      	add	r3, r9
 8010b84:	106d      	asrs	r5, r5, #1
 8010b86:	429d      	cmp	r5, r3
 8010b88:	bf38      	it	cc
 8010b8a:	461d      	movcc	r5, r3
 8010b8c:	0553      	lsls	r3, r2, #21
 8010b8e:	d527      	bpl.n	8010be0 <__ssputs_r+0x8c>
 8010b90:	4629      	mov	r1, r5
 8010b92:	f7fc fc99 	bl	800d4c8 <_malloc_r>
 8010b96:	4606      	mov	r6, r0
 8010b98:	b360      	cbz	r0, 8010bf4 <__ssputs_r+0xa0>
 8010b9a:	6921      	ldr	r1, [r4, #16]
 8010b9c:	464a      	mov	r2, r9
 8010b9e:	f7fd fdba 	bl	800e716 <memcpy>
 8010ba2:	89a3      	ldrh	r3, [r4, #12]
 8010ba4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bac:	81a3      	strh	r3, [r4, #12]
 8010bae:	6126      	str	r6, [r4, #16]
 8010bb0:	6165      	str	r5, [r4, #20]
 8010bb2:	444e      	add	r6, r9
 8010bb4:	eba5 0509 	sub.w	r5, r5, r9
 8010bb8:	6026      	str	r6, [r4, #0]
 8010bba:	60a5      	str	r5, [r4, #8]
 8010bbc:	463e      	mov	r6, r7
 8010bbe:	42be      	cmp	r6, r7
 8010bc0:	d900      	bls.n	8010bc4 <__ssputs_r+0x70>
 8010bc2:	463e      	mov	r6, r7
 8010bc4:	6820      	ldr	r0, [r4, #0]
 8010bc6:	4632      	mov	r2, r6
 8010bc8:	4641      	mov	r1, r8
 8010bca:	f000 fd5c 	bl	8011686 <memmove>
 8010bce:	68a3      	ldr	r3, [r4, #8]
 8010bd0:	1b9b      	subs	r3, r3, r6
 8010bd2:	60a3      	str	r3, [r4, #8]
 8010bd4:	6823      	ldr	r3, [r4, #0]
 8010bd6:	4433      	add	r3, r6
 8010bd8:	6023      	str	r3, [r4, #0]
 8010bda:	2000      	movs	r0, #0
 8010bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be0:	462a      	mov	r2, r5
 8010be2:	f001 f92e 	bl	8011e42 <_realloc_r>
 8010be6:	4606      	mov	r6, r0
 8010be8:	2800      	cmp	r0, #0
 8010bea:	d1e0      	bne.n	8010bae <__ssputs_r+0x5a>
 8010bec:	6921      	ldr	r1, [r4, #16]
 8010bee:	4650      	mov	r0, sl
 8010bf0:	f7fe fc20 	bl	800f434 <_free_r>
 8010bf4:	230c      	movs	r3, #12
 8010bf6:	f8ca 3000 	str.w	r3, [sl]
 8010bfa:	89a3      	ldrh	r3, [r4, #12]
 8010bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c00:	81a3      	strh	r3, [r4, #12]
 8010c02:	f04f 30ff 	mov.w	r0, #4294967295
 8010c06:	e7e9      	b.n	8010bdc <__ssputs_r+0x88>

08010c08 <_svfiprintf_r>:
 8010c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c0c:	4698      	mov	r8, r3
 8010c0e:	898b      	ldrh	r3, [r1, #12]
 8010c10:	061b      	lsls	r3, r3, #24
 8010c12:	b09d      	sub	sp, #116	; 0x74
 8010c14:	4607      	mov	r7, r0
 8010c16:	460d      	mov	r5, r1
 8010c18:	4614      	mov	r4, r2
 8010c1a:	d50e      	bpl.n	8010c3a <_svfiprintf_r+0x32>
 8010c1c:	690b      	ldr	r3, [r1, #16]
 8010c1e:	b963      	cbnz	r3, 8010c3a <_svfiprintf_r+0x32>
 8010c20:	2140      	movs	r1, #64	; 0x40
 8010c22:	f7fc fc51 	bl	800d4c8 <_malloc_r>
 8010c26:	6028      	str	r0, [r5, #0]
 8010c28:	6128      	str	r0, [r5, #16]
 8010c2a:	b920      	cbnz	r0, 8010c36 <_svfiprintf_r+0x2e>
 8010c2c:	230c      	movs	r3, #12
 8010c2e:	603b      	str	r3, [r7, #0]
 8010c30:	f04f 30ff 	mov.w	r0, #4294967295
 8010c34:	e0d0      	b.n	8010dd8 <_svfiprintf_r+0x1d0>
 8010c36:	2340      	movs	r3, #64	; 0x40
 8010c38:	616b      	str	r3, [r5, #20]
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c3e:	2320      	movs	r3, #32
 8010c40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c48:	2330      	movs	r3, #48	; 0x30
 8010c4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010df0 <_svfiprintf_r+0x1e8>
 8010c4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c52:	f04f 0901 	mov.w	r9, #1
 8010c56:	4623      	mov	r3, r4
 8010c58:	469a      	mov	sl, r3
 8010c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c5e:	b10a      	cbz	r2, 8010c64 <_svfiprintf_r+0x5c>
 8010c60:	2a25      	cmp	r2, #37	; 0x25
 8010c62:	d1f9      	bne.n	8010c58 <_svfiprintf_r+0x50>
 8010c64:	ebba 0b04 	subs.w	fp, sl, r4
 8010c68:	d00b      	beq.n	8010c82 <_svfiprintf_r+0x7a>
 8010c6a:	465b      	mov	r3, fp
 8010c6c:	4622      	mov	r2, r4
 8010c6e:	4629      	mov	r1, r5
 8010c70:	4638      	mov	r0, r7
 8010c72:	f7ff ff6f 	bl	8010b54 <__ssputs_r>
 8010c76:	3001      	adds	r0, #1
 8010c78:	f000 80a9 	beq.w	8010dce <_svfiprintf_r+0x1c6>
 8010c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c7e:	445a      	add	r2, fp
 8010c80:	9209      	str	r2, [sp, #36]	; 0x24
 8010c82:	f89a 3000 	ldrb.w	r3, [sl]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	f000 80a1 	beq.w	8010dce <_svfiprintf_r+0x1c6>
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c96:	f10a 0a01 	add.w	sl, sl, #1
 8010c9a:	9304      	str	r3, [sp, #16]
 8010c9c:	9307      	str	r3, [sp, #28]
 8010c9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8010ca4:	4654      	mov	r4, sl
 8010ca6:	2205      	movs	r2, #5
 8010ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cac:	4850      	ldr	r0, [pc, #320]	; (8010df0 <_svfiprintf_r+0x1e8>)
 8010cae:	f7ef fa8f 	bl	80001d0 <memchr>
 8010cb2:	9a04      	ldr	r2, [sp, #16]
 8010cb4:	b9d8      	cbnz	r0, 8010cee <_svfiprintf_r+0xe6>
 8010cb6:	06d0      	lsls	r0, r2, #27
 8010cb8:	bf44      	itt	mi
 8010cba:	2320      	movmi	r3, #32
 8010cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cc0:	0711      	lsls	r1, r2, #28
 8010cc2:	bf44      	itt	mi
 8010cc4:	232b      	movmi	r3, #43	; 0x2b
 8010cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cca:	f89a 3000 	ldrb.w	r3, [sl]
 8010cce:	2b2a      	cmp	r3, #42	; 0x2a
 8010cd0:	d015      	beq.n	8010cfe <_svfiprintf_r+0xf6>
 8010cd2:	9a07      	ldr	r2, [sp, #28]
 8010cd4:	4654      	mov	r4, sl
 8010cd6:	2000      	movs	r0, #0
 8010cd8:	f04f 0c0a 	mov.w	ip, #10
 8010cdc:	4621      	mov	r1, r4
 8010cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ce2:	3b30      	subs	r3, #48	; 0x30
 8010ce4:	2b09      	cmp	r3, #9
 8010ce6:	d94d      	bls.n	8010d84 <_svfiprintf_r+0x17c>
 8010ce8:	b1b0      	cbz	r0, 8010d18 <_svfiprintf_r+0x110>
 8010cea:	9207      	str	r2, [sp, #28]
 8010cec:	e014      	b.n	8010d18 <_svfiprintf_r+0x110>
 8010cee:	eba0 0308 	sub.w	r3, r0, r8
 8010cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8010cf6:	4313      	orrs	r3, r2
 8010cf8:	9304      	str	r3, [sp, #16]
 8010cfa:	46a2      	mov	sl, r4
 8010cfc:	e7d2      	b.n	8010ca4 <_svfiprintf_r+0x9c>
 8010cfe:	9b03      	ldr	r3, [sp, #12]
 8010d00:	1d19      	adds	r1, r3, #4
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	9103      	str	r1, [sp, #12]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	bfbb      	ittet	lt
 8010d0a:	425b      	neglt	r3, r3
 8010d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8010d10:	9307      	strge	r3, [sp, #28]
 8010d12:	9307      	strlt	r3, [sp, #28]
 8010d14:	bfb8      	it	lt
 8010d16:	9204      	strlt	r2, [sp, #16]
 8010d18:	7823      	ldrb	r3, [r4, #0]
 8010d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8010d1c:	d10c      	bne.n	8010d38 <_svfiprintf_r+0x130>
 8010d1e:	7863      	ldrb	r3, [r4, #1]
 8010d20:	2b2a      	cmp	r3, #42	; 0x2a
 8010d22:	d134      	bne.n	8010d8e <_svfiprintf_r+0x186>
 8010d24:	9b03      	ldr	r3, [sp, #12]
 8010d26:	1d1a      	adds	r2, r3, #4
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	9203      	str	r2, [sp, #12]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	bfb8      	it	lt
 8010d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d34:	3402      	adds	r4, #2
 8010d36:	9305      	str	r3, [sp, #20]
 8010d38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010e00 <_svfiprintf_r+0x1f8>
 8010d3c:	7821      	ldrb	r1, [r4, #0]
 8010d3e:	2203      	movs	r2, #3
 8010d40:	4650      	mov	r0, sl
 8010d42:	f7ef fa45 	bl	80001d0 <memchr>
 8010d46:	b138      	cbz	r0, 8010d58 <_svfiprintf_r+0x150>
 8010d48:	9b04      	ldr	r3, [sp, #16]
 8010d4a:	eba0 000a 	sub.w	r0, r0, sl
 8010d4e:	2240      	movs	r2, #64	; 0x40
 8010d50:	4082      	lsls	r2, r0
 8010d52:	4313      	orrs	r3, r2
 8010d54:	3401      	adds	r4, #1
 8010d56:	9304      	str	r3, [sp, #16]
 8010d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d5c:	4825      	ldr	r0, [pc, #148]	; (8010df4 <_svfiprintf_r+0x1ec>)
 8010d5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d62:	2206      	movs	r2, #6
 8010d64:	f7ef fa34 	bl	80001d0 <memchr>
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	d038      	beq.n	8010dde <_svfiprintf_r+0x1d6>
 8010d6c:	4b22      	ldr	r3, [pc, #136]	; (8010df8 <_svfiprintf_r+0x1f0>)
 8010d6e:	bb1b      	cbnz	r3, 8010db8 <_svfiprintf_r+0x1b0>
 8010d70:	9b03      	ldr	r3, [sp, #12]
 8010d72:	3307      	adds	r3, #7
 8010d74:	f023 0307 	bic.w	r3, r3, #7
 8010d78:	3308      	adds	r3, #8
 8010d7a:	9303      	str	r3, [sp, #12]
 8010d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d7e:	4433      	add	r3, r6
 8010d80:	9309      	str	r3, [sp, #36]	; 0x24
 8010d82:	e768      	b.n	8010c56 <_svfiprintf_r+0x4e>
 8010d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d88:	460c      	mov	r4, r1
 8010d8a:	2001      	movs	r0, #1
 8010d8c:	e7a6      	b.n	8010cdc <_svfiprintf_r+0xd4>
 8010d8e:	2300      	movs	r3, #0
 8010d90:	3401      	adds	r4, #1
 8010d92:	9305      	str	r3, [sp, #20]
 8010d94:	4619      	mov	r1, r3
 8010d96:	f04f 0c0a 	mov.w	ip, #10
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010da0:	3a30      	subs	r2, #48	; 0x30
 8010da2:	2a09      	cmp	r2, #9
 8010da4:	d903      	bls.n	8010dae <_svfiprintf_r+0x1a6>
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d0c6      	beq.n	8010d38 <_svfiprintf_r+0x130>
 8010daa:	9105      	str	r1, [sp, #20]
 8010dac:	e7c4      	b.n	8010d38 <_svfiprintf_r+0x130>
 8010dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8010db2:	4604      	mov	r4, r0
 8010db4:	2301      	movs	r3, #1
 8010db6:	e7f0      	b.n	8010d9a <_svfiprintf_r+0x192>
 8010db8:	ab03      	add	r3, sp, #12
 8010dba:	9300      	str	r3, [sp, #0]
 8010dbc:	462a      	mov	r2, r5
 8010dbe:	4b0f      	ldr	r3, [pc, #60]	; (8010dfc <_svfiprintf_r+0x1f4>)
 8010dc0:	a904      	add	r1, sp, #16
 8010dc2:	4638      	mov	r0, r7
 8010dc4:	f7fc fcac 	bl	800d720 <_printf_float>
 8010dc8:	1c42      	adds	r2, r0, #1
 8010dca:	4606      	mov	r6, r0
 8010dcc:	d1d6      	bne.n	8010d7c <_svfiprintf_r+0x174>
 8010dce:	89ab      	ldrh	r3, [r5, #12]
 8010dd0:	065b      	lsls	r3, r3, #25
 8010dd2:	f53f af2d 	bmi.w	8010c30 <_svfiprintf_r+0x28>
 8010dd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dd8:	b01d      	add	sp, #116	; 0x74
 8010dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dde:	ab03      	add	r3, sp, #12
 8010de0:	9300      	str	r3, [sp, #0]
 8010de2:	462a      	mov	r2, r5
 8010de4:	4b05      	ldr	r3, [pc, #20]	; (8010dfc <_svfiprintf_r+0x1f4>)
 8010de6:	a904      	add	r1, sp, #16
 8010de8:	4638      	mov	r0, r7
 8010dea:	f7fc ff3d 	bl	800dc68 <_printf_i>
 8010dee:	e7eb      	b.n	8010dc8 <_svfiprintf_r+0x1c0>
 8010df0:	08012941 	.word	0x08012941
 8010df4:	0801294b 	.word	0x0801294b
 8010df8:	0800d721 	.word	0x0800d721
 8010dfc:	08010b55 	.word	0x08010b55
 8010e00:	08012947 	.word	0x08012947

08010e04 <_sungetc_r>:
 8010e04:	b538      	push	{r3, r4, r5, lr}
 8010e06:	1c4b      	adds	r3, r1, #1
 8010e08:	4614      	mov	r4, r2
 8010e0a:	d103      	bne.n	8010e14 <_sungetc_r+0x10>
 8010e0c:	f04f 35ff 	mov.w	r5, #4294967295
 8010e10:	4628      	mov	r0, r5
 8010e12:	bd38      	pop	{r3, r4, r5, pc}
 8010e14:	8993      	ldrh	r3, [r2, #12]
 8010e16:	f023 0320 	bic.w	r3, r3, #32
 8010e1a:	8193      	strh	r3, [r2, #12]
 8010e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e1e:	6852      	ldr	r2, [r2, #4]
 8010e20:	b2cd      	uxtb	r5, r1
 8010e22:	b18b      	cbz	r3, 8010e48 <_sungetc_r+0x44>
 8010e24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e26:	4293      	cmp	r3, r2
 8010e28:	dd08      	ble.n	8010e3c <_sungetc_r+0x38>
 8010e2a:	6823      	ldr	r3, [r4, #0]
 8010e2c:	1e5a      	subs	r2, r3, #1
 8010e2e:	6022      	str	r2, [r4, #0]
 8010e30:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010e34:	6863      	ldr	r3, [r4, #4]
 8010e36:	3301      	adds	r3, #1
 8010e38:	6063      	str	r3, [r4, #4]
 8010e3a:	e7e9      	b.n	8010e10 <_sungetc_r+0xc>
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	f000 fbe8 	bl	8011612 <__submore>
 8010e42:	2800      	cmp	r0, #0
 8010e44:	d0f1      	beq.n	8010e2a <_sungetc_r+0x26>
 8010e46:	e7e1      	b.n	8010e0c <_sungetc_r+0x8>
 8010e48:	6921      	ldr	r1, [r4, #16]
 8010e4a:	6823      	ldr	r3, [r4, #0]
 8010e4c:	b151      	cbz	r1, 8010e64 <_sungetc_r+0x60>
 8010e4e:	4299      	cmp	r1, r3
 8010e50:	d208      	bcs.n	8010e64 <_sungetc_r+0x60>
 8010e52:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010e56:	42a9      	cmp	r1, r5
 8010e58:	d104      	bne.n	8010e64 <_sungetc_r+0x60>
 8010e5a:	3b01      	subs	r3, #1
 8010e5c:	3201      	adds	r2, #1
 8010e5e:	6023      	str	r3, [r4, #0]
 8010e60:	6062      	str	r2, [r4, #4]
 8010e62:	e7d5      	b.n	8010e10 <_sungetc_r+0xc>
 8010e64:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8010e6e:	2303      	movs	r3, #3
 8010e70:	63a3      	str	r3, [r4, #56]	; 0x38
 8010e72:	4623      	mov	r3, r4
 8010e74:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010e78:	6023      	str	r3, [r4, #0]
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	e7dc      	b.n	8010e38 <_sungetc_r+0x34>

08010e7e <__ssrefill_r>:
 8010e7e:	b510      	push	{r4, lr}
 8010e80:	460c      	mov	r4, r1
 8010e82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010e84:	b169      	cbz	r1, 8010ea2 <__ssrefill_r+0x24>
 8010e86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e8a:	4299      	cmp	r1, r3
 8010e8c:	d001      	beq.n	8010e92 <__ssrefill_r+0x14>
 8010e8e:	f7fe fad1 	bl	800f434 <_free_r>
 8010e92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e94:	6063      	str	r3, [r4, #4]
 8010e96:	2000      	movs	r0, #0
 8010e98:	6360      	str	r0, [r4, #52]	; 0x34
 8010e9a:	b113      	cbz	r3, 8010ea2 <__ssrefill_r+0x24>
 8010e9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010e9e:	6023      	str	r3, [r4, #0]
 8010ea0:	bd10      	pop	{r4, pc}
 8010ea2:	6923      	ldr	r3, [r4, #16]
 8010ea4:	6023      	str	r3, [r4, #0]
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	6063      	str	r3, [r4, #4]
 8010eaa:	89a3      	ldrh	r3, [r4, #12]
 8010eac:	f043 0320 	orr.w	r3, r3, #32
 8010eb0:	81a3      	strh	r3, [r4, #12]
 8010eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb6:	e7f3      	b.n	8010ea0 <__ssrefill_r+0x22>

08010eb8 <__ssvfiscanf_r>:
 8010eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ebc:	460c      	mov	r4, r1
 8010ebe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010ec2:	2100      	movs	r1, #0
 8010ec4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010ec8:	49a6      	ldr	r1, [pc, #664]	; (8011164 <__ssvfiscanf_r+0x2ac>)
 8010eca:	91a0      	str	r1, [sp, #640]	; 0x280
 8010ecc:	f10d 0804 	add.w	r8, sp, #4
 8010ed0:	49a5      	ldr	r1, [pc, #660]	; (8011168 <__ssvfiscanf_r+0x2b0>)
 8010ed2:	4fa6      	ldr	r7, [pc, #664]	; (801116c <__ssvfiscanf_r+0x2b4>)
 8010ed4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011170 <__ssvfiscanf_r+0x2b8>
 8010ed8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010edc:	4606      	mov	r6, r0
 8010ede:	91a1      	str	r1, [sp, #644]	; 0x284
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	7813      	ldrb	r3, [r2, #0]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	f000 815a 	beq.w	801119e <__ssvfiscanf_r+0x2e6>
 8010eea:	5cf9      	ldrb	r1, [r7, r3]
 8010eec:	f011 0108 	ands.w	r1, r1, #8
 8010ef0:	f102 0501 	add.w	r5, r2, #1
 8010ef4:	d019      	beq.n	8010f2a <__ssvfiscanf_r+0x72>
 8010ef6:	6863      	ldr	r3, [r4, #4]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	dd0f      	ble.n	8010f1c <__ssvfiscanf_r+0x64>
 8010efc:	6823      	ldr	r3, [r4, #0]
 8010efe:	781a      	ldrb	r2, [r3, #0]
 8010f00:	5cba      	ldrb	r2, [r7, r2]
 8010f02:	0712      	lsls	r2, r2, #28
 8010f04:	d401      	bmi.n	8010f0a <__ssvfiscanf_r+0x52>
 8010f06:	462a      	mov	r2, r5
 8010f08:	e7eb      	b.n	8010ee2 <__ssvfiscanf_r+0x2a>
 8010f0a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010f0c:	3201      	adds	r2, #1
 8010f0e:	9245      	str	r2, [sp, #276]	; 0x114
 8010f10:	6862      	ldr	r2, [r4, #4]
 8010f12:	3301      	adds	r3, #1
 8010f14:	3a01      	subs	r2, #1
 8010f16:	6062      	str	r2, [r4, #4]
 8010f18:	6023      	str	r3, [r4, #0]
 8010f1a:	e7ec      	b.n	8010ef6 <__ssvfiscanf_r+0x3e>
 8010f1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010f1e:	4621      	mov	r1, r4
 8010f20:	4630      	mov	r0, r6
 8010f22:	4798      	blx	r3
 8010f24:	2800      	cmp	r0, #0
 8010f26:	d0e9      	beq.n	8010efc <__ssvfiscanf_r+0x44>
 8010f28:	e7ed      	b.n	8010f06 <__ssvfiscanf_r+0x4e>
 8010f2a:	2b25      	cmp	r3, #37	; 0x25
 8010f2c:	d012      	beq.n	8010f54 <__ssvfiscanf_r+0x9c>
 8010f2e:	469a      	mov	sl, r3
 8010f30:	6863      	ldr	r3, [r4, #4]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	f340 8091 	ble.w	801105a <__ssvfiscanf_r+0x1a2>
 8010f38:	6822      	ldr	r2, [r4, #0]
 8010f3a:	7813      	ldrb	r3, [r2, #0]
 8010f3c:	4553      	cmp	r3, sl
 8010f3e:	f040 812e 	bne.w	801119e <__ssvfiscanf_r+0x2e6>
 8010f42:	6863      	ldr	r3, [r4, #4]
 8010f44:	3b01      	subs	r3, #1
 8010f46:	6063      	str	r3, [r4, #4]
 8010f48:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010f4a:	3201      	adds	r2, #1
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	6022      	str	r2, [r4, #0]
 8010f50:	9345      	str	r3, [sp, #276]	; 0x114
 8010f52:	e7d8      	b.n	8010f06 <__ssvfiscanf_r+0x4e>
 8010f54:	9141      	str	r1, [sp, #260]	; 0x104
 8010f56:	9143      	str	r1, [sp, #268]	; 0x10c
 8010f58:	7853      	ldrb	r3, [r2, #1]
 8010f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8010f5c:	bf02      	ittt	eq
 8010f5e:	2310      	moveq	r3, #16
 8010f60:	1c95      	addeq	r5, r2, #2
 8010f62:	9341      	streq	r3, [sp, #260]	; 0x104
 8010f64:	220a      	movs	r2, #10
 8010f66:	46aa      	mov	sl, r5
 8010f68:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010f6c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010f70:	2b09      	cmp	r3, #9
 8010f72:	d91c      	bls.n	8010fae <__ssvfiscanf_r+0xf6>
 8010f74:	487e      	ldr	r0, [pc, #504]	; (8011170 <__ssvfiscanf_r+0x2b8>)
 8010f76:	2203      	movs	r2, #3
 8010f78:	f7ef f92a 	bl	80001d0 <memchr>
 8010f7c:	b138      	cbz	r0, 8010f8e <__ssvfiscanf_r+0xd6>
 8010f7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010f80:	eba0 0009 	sub.w	r0, r0, r9
 8010f84:	2301      	movs	r3, #1
 8010f86:	4083      	lsls	r3, r0
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	9341      	str	r3, [sp, #260]	; 0x104
 8010f8c:	4655      	mov	r5, sl
 8010f8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010f92:	2b78      	cmp	r3, #120	; 0x78
 8010f94:	d806      	bhi.n	8010fa4 <__ssvfiscanf_r+0xec>
 8010f96:	2b57      	cmp	r3, #87	; 0x57
 8010f98:	d810      	bhi.n	8010fbc <__ssvfiscanf_r+0x104>
 8010f9a:	2b25      	cmp	r3, #37	; 0x25
 8010f9c:	d0c7      	beq.n	8010f2e <__ssvfiscanf_r+0x76>
 8010f9e:	d857      	bhi.n	8011050 <__ssvfiscanf_r+0x198>
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d065      	beq.n	8011070 <__ssvfiscanf_r+0x1b8>
 8010fa4:	2303      	movs	r3, #3
 8010fa6:	9347      	str	r3, [sp, #284]	; 0x11c
 8010fa8:	230a      	movs	r3, #10
 8010faa:	9342      	str	r3, [sp, #264]	; 0x108
 8010fac:	e076      	b.n	801109c <__ssvfiscanf_r+0x1e4>
 8010fae:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010fb0:	fb02 1103 	mla	r1, r2, r3, r1
 8010fb4:	3930      	subs	r1, #48	; 0x30
 8010fb6:	9143      	str	r1, [sp, #268]	; 0x10c
 8010fb8:	4655      	mov	r5, sl
 8010fba:	e7d4      	b.n	8010f66 <__ssvfiscanf_r+0xae>
 8010fbc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010fc0:	2a20      	cmp	r2, #32
 8010fc2:	d8ef      	bhi.n	8010fa4 <__ssvfiscanf_r+0xec>
 8010fc4:	a101      	add	r1, pc, #4	; (adr r1, 8010fcc <__ssvfiscanf_r+0x114>)
 8010fc6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010fca:	bf00      	nop
 8010fcc:	0801107f 	.word	0x0801107f
 8010fd0:	08010fa5 	.word	0x08010fa5
 8010fd4:	08010fa5 	.word	0x08010fa5
 8010fd8:	080110dd 	.word	0x080110dd
 8010fdc:	08010fa5 	.word	0x08010fa5
 8010fe0:	08010fa5 	.word	0x08010fa5
 8010fe4:	08010fa5 	.word	0x08010fa5
 8010fe8:	08010fa5 	.word	0x08010fa5
 8010fec:	08010fa5 	.word	0x08010fa5
 8010ff0:	08010fa5 	.word	0x08010fa5
 8010ff4:	08010fa5 	.word	0x08010fa5
 8010ff8:	080110f3 	.word	0x080110f3
 8010ffc:	080110d9 	.word	0x080110d9
 8011000:	08011057 	.word	0x08011057
 8011004:	08011057 	.word	0x08011057
 8011008:	08011057 	.word	0x08011057
 801100c:	08010fa5 	.word	0x08010fa5
 8011010:	08011095 	.word	0x08011095
 8011014:	08010fa5 	.word	0x08010fa5
 8011018:	08010fa5 	.word	0x08010fa5
 801101c:	08010fa5 	.word	0x08010fa5
 8011020:	08010fa5 	.word	0x08010fa5
 8011024:	08011103 	.word	0x08011103
 8011028:	080110d1 	.word	0x080110d1
 801102c:	08011077 	.word	0x08011077
 8011030:	08010fa5 	.word	0x08010fa5
 8011034:	08010fa5 	.word	0x08010fa5
 8011038:	080110ff 	.word	0x080110ff
 801103c:	08010fa5 	.word	0x08010fa5
 8011040:	080110d9 	.word	0x080110d9
 8011044:	08010fa5 	.word	0x08010fa5
 8011048:	08010fa5 	.word	0x08010fa5
 801104c:	0801107f 	.word	0x0801107f
 8011050:	3b45      	subs	r3, #69	; 0x45
 8011052:	2b02      	cmp	r3, #2
 8011054:	d8a6      	bhi.n	8010fa4 <__ssvfiscanf_r+0xec>
 8011056:	2305      	movs	r3, #5
 8011058:	e01f      	b.n	801109a <__ssvfiscanf_r+0x1e2>
 801105a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801105c:	4621      	mov	r1, r4
 801105e:	4630      	mov	r0, r6
 8011060:	4798      	blx	r3
 8011062:	2800      	cmp	r0, #0
 8011064:	f43f af68 	beq.w	8010f38 <__ssvfiscanf_r+0x80>
 8011068:	9844      	ldr	r0, [sp, #272]	; 0x110
 801106a:	2800      	cmp	r0, #0
 801106c:	f040 808d 	bne.w	801118a <__ssvfiscanf_r+0x2d2>
 8011070:	f04f 30ff 	mov.w	r0, #4294967295
 8011074:	e08f      	b.n	8011196 <__ssvfiscanf_r+0x2de>
 8011076:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011078:	f042 0220 	orr.w	r2, r2, #32
 801107c:	9241      	str	r2, [sp, #260]	; 0x104
 801107e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011084:	9241      	str	r2, [sp, #260]	; 0x104
 8011086:	2210      	movs	r2, #16
 8011088:	2b6f      	cmp	r3, #111	; 0x6f
 801108a:	9242      	str	r2, [sp, #264]	; 0x108
 801108c:	bf34      	ite	cc
 801108e:	2303      	movcc	r3, #3
 8011090:	2304      	movcs	r3, #4
 8011092:	e002      	b.n	801109a <__ssvfiscanf_r+0x1e2>
 8011094:	2300      	movs	r3, #0
 8011096:	9342      	str	r3, [sp, #264]	; 0x108
 8011098:	2303      	movs	r3, #3
 801109a:	9347      	str	r3, [sp, #284]	; 0x11c
 801109c:	6863      	ldr	r3, [r4, #4]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	dd3d      	ble.n	801111e <__ssvfiscanf_r+0x266>
 80110a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80110a4:	0659      	lsls	r1, r3, #25
 80110a6:	d404      	bmi.n	80110b2 <__ssvfiscanf_r+0x1fa>
 80110a8:	6823      	ldr	r3, [r4, #0]
 80110aa:	781a      	ldrb	r2, [r3, #0]
 80110ac:	5cba      	ldrb	r2, [r7, r2]
 80110ae:	0712      	lsls	r2, r2, #28
 80110b0:	d43c      	bmi.n	801112c <__ssvfiscanf_r+0x274>
 80110b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80110b4:	2b02      	cmp	r3, #2
 80110b6:	dc4b      	bgt.n	8011150 <__ssvfiscanf_r+0x298>
 80110b8:	466b      	mov	r3, sp
 80110ba:	4622      	mov	r2, r4
 80110bc:	a941      	add	r1, sp, #260	; 0x104
 80110be:	4630      	mov	r0, r6
 80110c0:	f000 f872 	bl	80111a8 <_scanf_chars>
 80110c4:	2801      	cmp	r0, #1
 80110c6:	d06a      	beq.n	801119e <__ssvfiscanf_r+0x2e6>
 80110c8:	2802      	cmp	r0, #2
 80110ca:	f47f af1c 	bne.w	8010f06 <__ssvfiscanf_r+0x4e>
 80110ce:	e7cb      	b.n	8011068 <__ssvfiscanf_r+0x1b0>
 80110d0:	2308      	movs	r3, #8
 80110d2:	9342      	str	r3, [sp, #264]	; 0x108
 80110d4:	2304      	movs	r3, #4
 80110d6:	e7e0      	b.n	801109a <__ssvfiscanf_r+0x1e2>
 80110d8:	220a      	movs	r2, #10
 80110da:	e7d5      	b.n	8011088 <__ssvfiscanf_r+0x1d0>
 80110dc:	4629      	mov	r1, r5
 80110de:	4640      	mov	r0, r8
 80110e0:	f000 fa5e 	bl	80115a0 <__sccl>
 80110e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80110e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110ea:	9341      	str	r3, [sp, #260]	; 0x104
 80110ec:	4605      	mov	r5, r0
 80110ee:	2301      	movs	r3, #1
 80110f0:	e7d3      	b.n	801109a <__ssvfiscanf_r+0x1e2>
 80110f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80110f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110f8:	9341      	str	r3, [sp, #260]	; 0x104
 80110fa:	2300      	movs	r3, #0
 80110fc:	e7cd      	b.n	801109a <__ssvfiscanf_r+0x1e2>
 80110fe:	2302      	movs	r3, #2
 8011100:	e7cb      	b.n	801109a <__ssvfiscanf_r+0x1e2>
 8011102:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011104:	06c3      	lsls	r3, r0, #27
 8011106:	f53f aefe 	bmi.w	8010f06 <__ssvfiscanf_r+0x4e>
 801110a:	9b00      	ldr	r3, [sp, #0]
 801110c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801110e:	1d19      	adds	r1, r3, #4
 8011110:	9100      	str	r1, [sp, #0]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	07c0      	lsls	r0, r0, #31
 8011116:	bf4c      	ite	mi
 8011118:	801a      	strhmi	r2, [r3, #0]
 801111a:	601a      	strpl	r2, [r3, #0]
 801111c:	e6f3      	b.n	8010f06 <__ssvfiscanf_r+0x4e>
 801111e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011120:	4621      	mov	r1, r4
 8011122:	4630      	mov	r0, r6
 8011124:	4798      	blx	r3
 8011126:	2800      	cmp	r0, #0
 8011128:	d0bb      	beq.n	80110a2 <__ssvfiscanf_r+0x1ea>
 801112a:	e79d      	b.n	8011068 <__ssvfiscanf_r+0x1b0>
 801112c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801112e:	3201      	adds	r2, #1
 8011130:	9245      	str	r2, [sp, #276]	; 0x114
 8011132:	6862      	ldr	r2, [r4, #4]
 8011134:	3a01      	subs	r2, #1
 8011136:	2a00      	cmp	r2, #0
 8011138:	6062      	str	r2, [r4, #4]
 801113a:	dd02      	ble.n	8011142 <__ssvfiscanf_r+0x28a>
 801113c:	3301      	adds	r3, #1
 801113e:	6023      	str	r3, [r4, #0]
 8011140:	e7b2      	b.n	80110a8 <__ssvfiscanf_r+0x1f0>
 8011142:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011144:	4621      	mov	r1, r4
 8011146:	4630      	mov	r0, r6
 8011148:	4798      	blx	r3
 801114a:	2800      	cmp	r0, #0
 801114c:	d0ac      	beq.n	80110a8 <__ssvfiscanf_r+0x1f0>
 801114e:	e78b      	b.n	8011068 <__ssvfiscanf_r+0x1b0>
 8011150:	2b04      	cmp	r3, #4
 8011152:	dc0f      	bgt.n	8011174 <__ssvfiscanf_r+0x2bc>
 8011154:	466b      	mov	r3, sp
 8011156:	4622      	mov	r2, r4
 8011158:	a941      	add	r1, sp, #260	; 0x104
 801115a:	4630      	mov	r0, r6
 801115c:	f000 f87e 	bl	801125c <_scanf_i>
 8011160:	e7b0      	b.n	80110c4 <__ssvfiscanf_r+0x20c>
 8011162:	bf00      	nop
 8011164:	08010e05 	.word	0x08010e05
 8011168:	08010e7f 	.word	0x08010e7f
 801116c:	08012841 	.word	0x08012841
 8011170:	08012947 	.word	0x08012947
 8011174:	4b0b      	ldr	r3, [pc, #44]	; (80111a4 <__ssvfiscanf_r+0x2ec>)
 8011176:	2b00      	cmp	r3, #0
 8011178:	f43f aec5 	beq.w	8010f06 <__ssvfiscanf_r+0x4e>
 801117c:	466b      	mov	r3, sp
 801117e:	4622      	mov	r2, r4
 8011180:	a941      	add	r1, sp, #260	; 0x104
 8011182:	4630      	mov	r0, r6
 8011184:	f7fc fe92 	bl	800deac <_scanf_float>
 8011188:	e79c      	b.n	80110c4 <__ssvfiscanf_r+0x20c>
 801118a:	89a3      	ldrh	r3, [r4, #12]
 801118c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011190:	bf18      	it	ne
 8011192:	f04f 30ff 	movne.w	r0, #4294967295
 8011196:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801119a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801119e:	9844      	ldr	r0, [sp, #272]	; 0x110
 80111a0:	e7f9      	b.n	8011196 <__ssvfiscanf_r+0x2de>
 80111a2:	bf00      	nop
 80111a4:	0800dead 	.word	0x0800dead

080111a8 <_scanf_chars>:
 80111a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111ac:	4615      	mov	r5, r2
 80111ae:	688a      	ldr	r2, [r1, #8]
 80111b0:	4680      	mov	r8, r0
 80111b2:	460c      	mov	r4, r1
 80111b4:	b932      	cbnz	r2, 80111c4 <_scanf_chars+0x1c>
 80111b6:	698a      	ldr	r2, [r1, #24]
 80111b8:	2a00      	cmp	r2, #0
 80111ba:	bf0c      	ite	eq
 80111bc:	2201      	moveq	r2, #1
 80111be:	f04f 32ff 	movne.w	r2, #4294967295
 80111c2:	608a      	str	r2, [r1, #8]
 80111c4:	6822      	ldr	r2, [r4, #0]
 80111c6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011258 <_scanf_chars+0xb0>
 80111ca:	06d1      	lsls	r1, r2, #27
 80111cc:	bf5f      	itttt	pl
 80111ce:	681a      	ldrpl	r2, [r3, #0]
 80111d0:	1d11      	addpl	r1, r2, #4
 80111d2:	6019      	strpl	r1, [r3, #0]
 80111d4:	6816      	ldrpl	r6, [r2, #0]
 80111d6:	2700      	movs	r7, #0
 80111d8:	69a0      	ldr	r0, [r4, #24]
 80111da:	b188      	cbz	r0, 8011200 <_scanf_chars+0x58>
 80111dc:	2801      	cmp	r0, #1
 80111de:	d107      	bne.n	80111f0 <_scanf_chars+0x48>
 80111e0:	682a      	ldr	r2, [r5, #0]
 80111e2:	7811      	ldrb	r1, [r2, #0]
 80111e4:	6962      	ldr	r2, [r4, #20]
 80111e6:	5c52      	ldrb	r2, [r2, r1]
 80111e8:	b952      	cbnz	r2, 8011200 <_scanf_chars+0x58>
 80111ea:	2f00      	cmp	r7, #0
 80111ec:	d031      	beq.n	8011252 <_scanf_chars+0xaa>
 80111ee:	e022      	b.n	8011236 <_scanf_chars+0x8e>
 80111f0:	2802      	cmp	r0, #2
 80111f2:	d120      	bne.n	8011236 <_scanf_chars+0x8e>
 80111f4:	682b      	ldr	r3, [r5, #0]
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80111fc:	071b      	lsls	r3, r3, #28
 80111fe:	d41a      	bmi.n	8011236 <_scanf_chars+0x8e>
 8011200:	6823      	ldr	r3, [r4, #0]
 8011202:	06da      	lsls	r2, r3, #27
 8011204:	bf5e      	ittt	pl
 8011206:	682b      	ldrpl	r3, [r5, #0]
 8011208:	781b      	ldrbpl	r3, [r3, #0]
 801120a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801120e:	682a      	ldr	r2, [r5, #0]
 8011210:	686b      	ldr	r3, [r5, #4]
 8011212:	3201      	adds	r2, #1
 8011214:	602a      	str	r2, [r5, #0]
 8011216:	68a2      	ldr	r2, [r4, #8]
 8011218:	3b01      	subs	r3, #1
 801121a:	3a01      	subs	r2, #1
 801121c:	606b      	str	r3, [r5, #4]
 801121e:	3701      	adds	r7, #1
 8011220:	60a2      	str	r2, [r4, #8]
 8011222:	b142      	cbz	r2, 8011236 <_scanf_chars+0x8e>
 8011224:	2b00      	cmp	r3, #0
 8011226:	dcd7      	bgt.n	80111d8 <_scanf_chars+0x30>
 8011228:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801122c:	4629      	mov	r1, r5
 801122e:	4640      	mov	r0, r8
 8011230:	4798      	blx	r3
 8011232:	2800      	cmp	r0, #0
 8011234:	d0d0      	beq.n	80111d8 <_scanf_chars+0x30>
 8011236:	6823      	ldr	r3, [r4, #0]
 8011238:	f013 0310 	ands.w	r3, r3, #16
 801123c:	d105      	bne.n	801124a <_scanf_chars+0xa2>
 801123e:	68e2      	ldr	r2, [r4, #12]
 8011240:	3201      	adds	r2, #1
 8011242:	60e2      	str	r2, [r4, #12]
 8011244:	69a2      	ldr	r2, [r4, #24]
 8011246:	b102      	cbz	r2, 801124a <_scanf_chars+0xa2>
 8011248:	7033      	strb	r3, [r6, #0]
 801124a:	6923      	ldr	r3, [r4, #16]
 801124c:	443b      	add	r3, r7
 801124e:	6123      	str	r3, [r4, #16]
 8011250:	2000      	movs	r0, #0
 8011252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011256:	bf00      	nop
 8011258:	08012841 	.word	0x08012841

0801125c <_scanf_i>:
 801125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011260:	4698      	mov	r8, r3
 8011262:	4b74      	ldr	r3, [pc, #464]	; (8011434 <_scanf_i+0x1d8>)
 8011264:	460c      	mov	r4, r1
 8011266:	4682      	mov	sl, r0
 8011268:	4616      	mov	r6, r2
 801126a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801126e:	b087      	sub	sp, #28
 8011270:	ab03      	add	r3, sp, #12
 8011272:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011276:	4b70      	ldr	r3, [pc, #448]	; (8011438 <_scanf_i+0x1dc>)
 8011278:	69a1      	ldr	r1, [r4, #24]
 801127a:	4a70      	ldr	r2, [pc, #448]	; (801143c <_scanf_i+0x1e0>)
 801127c:	2903      	cmp	r1, #3
 801127e:	bf18      	it	ne
 8011280:	461a      	movne	r2, r3
 8011282:	68a3      	ldr	r3, [r4, #8]
 8011284:	9201      	str	r2, [sp, #4]
 8011286:	1e5a      	subs	r2, r3, #1
 8011288:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801128c:	bf88      	it	hi
 801128e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011292:	4627      	mov	r7, r4
 8011294:	bf82      	ittt	hi
 8011296:	eb03 0905 	addhi.w	r9, r3, r5
 801129a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801129e:	60a3      	strhi	r3, [r4, #8]
 80112a0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80112a4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80112a8:	bf98      	it	ls
 80112aa:	f04f 0900 	movls.w	r9, #0
 80112ae:	6023      	str	r3, [r4, #0]
 80112b0:	463d      	mov	r5, r7
 80112b2:	f04f 0b00 	mov.w	fp, #0
 80112b6:	6831      	ldr	r1, [r6, #0]
 80112b8:	ab03      	add	r3, sp, #12
 80112ba:	7809      	ldrb	r1, [r1, #0]
 80112bc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80112c0:	2202      	movs	r2, #2
 80112c2:	f7ee ff85 	bl	80001d0 <memchr>
 80112c6:	b328      	cbz	r0, 8011314 <_scanf_i+0xb8>
 80112c8:	f1bb 0f01 	cmp.w	fp, #1
 80112cc:	d159      	bne.n	8011382 <_scanf_i+0x126>
 80112ce:	6862      	ldr	r2, [r4, #4]
 80112d0:	b92a      	cbnz	r2, 80112de <_scanf_i+0x82>
 80112d2:	6822      	ldr	r2, [r4, #0]
 80112d4:	2308      	movs	r3, #8
 80112d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80112da:	6063      	str	r3, [r4, #4]
 80112dc:	6022      	str	r2, [r4, #0]
 80112de:	6822      	ldr	r2, [r4, #0]
 80112e0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80112e4:	6022      	str	r2, [r4, #0]
 80112e6:	68a2      	ldr	r2, [r4, #8]
 80112e8:	1e51      	subs	r1, r2, #1
 80112ea:	60a1      	str	r1, [r4, #8]
 80112ec:	b192      	cbz	r2, 8011314 <_scanf_i+0xb8>
 80112ee:	6832      	ldr	r2, [r6, #0]
 80112f0:	1c51      	adds	r1, r2, #1
 80112f2:	6031      	str	r1, [r6, #0]
 80112f4:	7812      	ldrb	r2, [r2, #0]
 80112f6:	f805 2b01 	strb.w	r2, [r5], #1
 80112fa:	6872      	ldr	r2, [r6, #4]
 80112fc:	3a01      	subs	r2, #1
 80112fe:	2a00      	cmp	r2, #0
 8011300:	6072      	str	r2, [r6, #4]
 8011302:	dc07      	bgt.n	8011314 <_scanf_i+0xb8>
 8011304:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011308:	4631      	mov	r1, r6
 801130a:	4650      	mov	r0, sl
 801130c:	4790      	blx	r2
 801130e:	2800      	cmp	r0, #0
 8011310:	f040 8085 	bne.w	801141e <_scanf_i+0x1c2>
 8011314:	f10b 0b01 	add.w	fp, fp, #1
 8011318:	f1bb 0f03 	cmp.w	fp, #3
 801131c:	d1cb      	bne.n	80112b6 <_scanf_i+0x5a>
 801131e:	6863      	ldr	r3, [r4, #4]
 8011320:	b90b      	cbnz	r3, 8011326 <_scanf_i+0xca>
 8011322:	230a      	movs	r3, #10
 8011324:	6063      	str	r3, [r4, #4]
 8011326:	6863      	ldr	r3, [r4, #4]
 8011328:	4945      	ldr	r1, [pc, #276]	; (8011440 <_scanf_i+0x1e4>)
 801132a:	6960      	ldr	r0, [r4, #20]
 801132c:	1ac9      	subs	r1, r1, r3
 801132e:	f000 f937 	bl	80115a0 <__sccl>
 8011332:	f04f 0b00 	mov.w	fp, #0
 8011336:	68a3      	ldr	r3, [r4, #8]
 8011338:	6822      	ldr	r2, [r4, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d03d      	beq.n	80113ba <_scanf_i+0x15e>
 801133e:	6831      	ldr	r1, [r6, #0]
 8011340:	6960      	ldr	r0, [r4, #20]
 8011342:	f891 c000 	ldrb.w	ip, [r1]
 8011346:	f810 000c 	ldrb.w	r0, [r0, ip]
 801134a:	2800      	cmp	r0, #0
 801134c:	d035      	beq.n	80113ba <_scanf_i+0x15e>
 801134e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011352:	d124      	bne.n	801139e <_scanf_i+0x142>
 8011354:	0510      	lsls	r0, r2, #20
 8011356:	d522      	bpl.n	801139e <_scanf_i+0x142>
 8011358:	f10b 0b01 	add.w	fp, fp, #1
 801135c:	f1b9 0f00 	cmp.w	r9, #0
 8011360:	d003      	beq.n	801136a <_scanf_i+0x10e>
 8011362:	3301      	adds	r3, #1
 8011364:	f109 39ff 	add.w	r9, r9, #4294967295
 8011368:	60a3      	str	r3, [r4, #8]
 801136a:	6873      	ldr	r3, [r6, #4]
 801136c:	3b01      	subs	r3, #1
 801136e:	2b00      	cmp	r3, #0
 8011370:	6073      	str	r3, [r6, #4]
 8011372:	dd1b      	ble.n	80113ac <_scanf_i+0x150>
 8011374:	6833      	ldr	r3, [r6, #0]
 8011376:	3301      	adds	r3, #1
 8011378:	6033      	str	r3, [r6, #0]
 801137a:	68a3      	ldr	r3, [r4, #8]
 801137c:	3b01      	subs	r3, #1
 801137e:	60a3      	str	r3, [r4, #8]
 8011380:	e7d9      	b.n	8011336 <_scanf_i+0xda>
 8011382:	f1bb 0f02 	cmp.w	fp, #2
 8011386:	d1ae      	bne.n	80112e6 <_scanf_i+0x8a>
 8011388:	6822      	ldr	r2, [r4, #0]
 801138a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801138e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011392:	d1bf      	bne.n	8011314 <_scanf_i+0xb8>
 8011394:	2310      	movs	r3, #16
 8011396:	6063      	str	r3, [r4, #4]
 8011398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801139c:	e7a2      	b.n	80112e4 <_scanf_i+0x88>
 801139e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80113a2:	6022      	str	r2, [r4, #0]
 80113a4:	780b      	ldrb	r3, [r1, #0]
 80113a6:	f805 3b01 	strb.w	r3, [r5], #1
 80113aa:	e7de      	b.n	801136a <_scanf_i+0x10e>
 80113ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80113b0:	4631      	mov	r1, r6
 80113b2:	4650      	mov	r0, sl
 80113b4:	4798      	blx	r3
 80113b6:	2800      	cmp	r0, #0
 80113b8:	d0df      	beq.n	801137a <_scanf_i+0x11e>
 80113ba:	6823      	ldr	r3, [r4, #0]
 80113bc:	05d9      	lsls	r1, r3, #23
 80113be:	d50d      	bpl.n	80113dc <_scanf_i+0x180>
 80113c0:	42bd      	cmp	r5, r7
 80113c2:	d909      	bls.n	80113d8 <_scanf_i+0x17c>
 80113c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80113c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113cc:	4632      	mov	r2, r6
 80113ce:	4650      	mov	r0, sl
 80113d0:	4798      	blx	r3
 80113d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80113d6:	464d      	mov	r5, r9
 80113d8:	42bd      	cmp	r5, r7
 80113da:	d028      	beq.n	801142e <_scanf_i+0x1d2>
 80113dc:	6822      	ldr	r2, [r4, #0]
 80113de:	f012 0210 	ands.w	r2, r2, #16
 80113e2:	d113      	bne.n	801140c <_scanf_i+0x1b0>
 80113e4:	702a      	strb	r2, [r5, #0]
 80113e6:	6863      	ldr	r3, [r4, #4]
 80113e8:	9e01      	ldr	r6, [sp, #4]
 80113ea:	4639      	mov	r1, r7
 80113ec:	4650      	mov	r0, sl
 80113ee:	47b0      	blx	r6
 80113f0:	f8d8 3000 	ldr.w	r3, [r8]
 80113f4:	6821      	ldr	r1, [r4, #0]
 80113f6:	1d1a      	adds	r2, r3, #4
 80113f8:	f8c8 2000 	str.w	r2, [r8]
 80113fc:	f011 0f20 	tst.w	r1, #32
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	d00f      	beq.n	8011424 <_scanf_i+0x1c8>
 8011404:	6018      	str	r0, [r3, #0]
 8011406:	68e3      	ldr	r3, [r4, #12]
 8011408:	3301      	adds	r3, #1
 801140a:	60e3      	str	r3, [r4, #12]
 801140c:	6923      	ldr	r3, [r4, #16]
 801140e:	1bed      	subs	r5, r5, r7
 8011410:	445d      	add	r5, fp
 8011412:	442b      	add	r3, r5
 8011414:	6123      	str	r3, [r4, #16]
 8011416:	2000      	movs	r0, #0
 8011418:	b007      	add	sp, #28
 801141a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801141e:	f04f 0b00 	mov.w	fp, #0
 8011422:	e7ca      	b.n	80113ba <_scanf_i+0x15e>
 8011424:	07ca      	lsls	r2, r1, #31
 8011426:	bf4c      	ite	mi
 8011428:	8018      	strhmi	r0, [r3, #0]
 801142a:	6018      	strpl	r0, [r3, #0]
 801142c:	e7eb      	b.n	8011406 <_scanf_i+0x1aa>
 801142e:	2001      	movs	r0, #1
 8011430:	e7f2      	b.n	8011418 <_scanf_i+0x1bc>
 8011432:	bf00      	nop
 8011434:	080125a0 	.word	0x080125a0
 8011438:	08011f85 	.word	0x08011f85
 801143c:	08010b51 	.word	0x08010b51
 8011440:	08012962 	.word	0x08012962

08011444 <__sflush_r>:
 8011444:	898a      	ldrh	r2, [r1, #12]
 8011446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801144a:	4605      	mov	r5, r0
 801144c:	0710      	lsls	r0, r2, #28
 801144e:	460c      	mov	r4, r1
 8011450:	d458      	bmi.n	8011504 <__sflush_r+0xc0>
 8011452:	684b      	ldr	r3, [r1, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	dc05      	bgt.n	8011464 <__sflush_r+0x20>
 8011458:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801145a:	2b00      	cmp	r3, #0
 801145c:	dc02      	bgt.n	8011464 <__sflush_r+0x20>
 801145e:	2000      	movs	r0, #0
 8011460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011466:	2e00      	cmp	r6, #0
 8011468:	d0f9      	beq.n	801145e <__sflush_r+0x1a>
 801146a:	2300      	movs	r3, #0
 801146c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011470:	682f      	ldr	r7, [r5, #0]
 8011472:	6a21      	ldr	r1, [r4, #32]
 8011474:	602b      	str	r3, [r5, #0]
 8011476:	d032      	beq.n	80114de <__sflush_r+0x9a>
 8011478:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801147a:	89a3      	ldrh	r3, [r4, #12]
 801147c:	075a      	lsls	r2, r3, #29
 801147e:	d505      	bpl.n	801148c <__sflush_r+0x48>
 8011480:	6863      	ldr	r3, [r4, #4]
 8011482:	1ac0      	subs	r0, r0, r3
 8011484:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011486:	b10b      	cbz	r3, 801148c <__sflush_r+0x48>
 8011488:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801148a:	1ac0      	subs	r0, r0, r3
 801148c:	2300      	movs	r3, #0
 801148e:	4602      	mov	r2, r0
 8011490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011492:	6a21      	ldr	r1, [r4, #32]
 8011494:	4628      	mov	r0, r5
 8011496:	47b0      	blx	r6
 8011498:	1c43      	adds	r3, r0, #1
 801149a:	89a3      	ldrh	r3, [r4, #12]
 801149c:	d106      	bne.n	80114ac <__sflush_r+0x68>
 801149e:	6829      	ldr	r1, [r5, #0]
 80114a0:	291d      	cmp	r1, #29
 80114a2:	d82b      	bhi.n	80114fc <__sflush_r+0xb8>
 80114a4:	4a29      	ldr	r2, [pc, #164]	; (801154c <__sflush_r+0x108>)
 80114a6:	410a      	asrs	r2, r1
 80114a8:	07d6      	lsls	r6, r2, #31
 80114aa:	d427      	bmi.n	80114fc <__sflush_r+0xb8>
 80114ac:	2200      	movs	r2, #0
 80114ae:	6062      	str	r2, [r4, #4]
 80114b0:	04d9      	lsls	r1, r3, #19
 80114b2:	6922      	ldr	r2, [r4, #16]
 80114b4:	6022      	str	r2, [r4, #0]
 80114b6:	d504      	bpl.n	80114c2 <__sflush_r+0x7e>
 80114b8:	1c42      	adds	r2, r0, #1
 80114ba:	d101      	bne.n	80114c0 <__sflush_r+0x7c>
 80114bc:	682b      	ldr	r3, [r5, #0]
 80114be:	b903      	cbnz	r3, 80114c2 <__sflush_r+0x7e>
 80114c0:	6560      	str	r0, [r4, #84]	; 0x54
 80114c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114c4:	602f      	str	r7, [r5, #0]
 80114c6:	2900      	cmp	r1, #0
 80114c8:	d0c9      	beq.n	801145e <__sflush_r+0x1a>
 80114ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114ce:	4299      	cmp	r1, r3
 80114d0:	d002      	beq.n	80114d8 <__sflush_r+0x94>
 80114d2:	4628      	mov	r0, r5
 80114d4:	f7fd ffae 	bl	800f434 <_free_r>
 80114d8:	2000      	movs	r0, #0
 80114da:	6360      	str	r0, [r4, #52]	; 0x34
 80114dc:	e7c0      	b.n	8011460 <__sflush_r+0x1c>
 80114de:	2301      	movs	r3, #1
 80114e0:	4628      	mov	r0, r5
 80114e2:	47b0      	blx	r6
 80114e4:	1c41      	adds	r1, r0, #1
 80114e6:	d1c8      	bne.n	801147a <__sflush_r+0x36>
 80114e8:	682b      	ldr	r3, [r5, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d0c5      	beq.n	801147a <__sflush_r+0x36>
 80114ee:	2b1d      	cmp	r3, #29
 80114f0:	d001      	beq.n	80114f6 <__sflush_r+0xb2>
 80114f2:	2b16      	cmp	r3, #22
 80114f4:	d101      	bne.n	80114fa <__sflush_r+0xb6>
 80114f6:	602f      	str	r7, [r5, #0]
 80114f8:	e7b1      	b.n	801145e <__sflush_r+0x1a>
 80114fa:	89a3      	ldrh	r3, [r4, #12]
 80114fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011500:	81a3      	strh	r3, [r4, #12]
 8011502:	e7ad      	b.n	8011460 <__sflush_r+0x1c>
 8011504:	690f      	ldr	r7, [r1, #16]
 8011506:	2f00      	cmp	r7, #0
 8011508:	d0a9      	beq.n	801145e <__sflush_r+0x1a>
 801150a:	0793      	lsls	r3, r2, #30
 801150c:	680e      	ldr	r6, [r1, #0]
 801150e:	bf08      	it	eq
 8011510:	694b      	ldreq	r3, [r1, #20]
 8011512:	600f      	str	r7, [r1, #0]
 8011514:	bf18      	it	ne
 8011516:	2300      	movne	r3, #0
 8011518:	eba6 0807 	sub.w	r8, r6, r7
 801151c:	608b      	str	r3, [r1, #8]
 801151e:	f1b8 0f00 	cmp.w	r8, #0
 8011522:	dd9c      	ble.n	801145e <__sflush_r+0x1a>
 8011524:	6a21      	ldr	r1, [r4, #32]
 8011526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011528:	4643      	mov	r3, r8
 801152a:	463a      	mov	r2, r7
 801152c:	4628      	mov	r0, r5
 801152e:	47b0      	blx	r6
 8011530:	2800      	cmp	r0, #0
 8011532:	dc06      	bgt.n	8011542 <__sflush_r+0xfe>
 8011534:	89a3      	ldrh	r3, [r4, #12]
 8011536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801153a:	81a3      	strh	r3, [r4, #12]
 801153c:	f04f 30ff 	mov.w	r0, #4294967295
 8011540:	e78e      	b.n	8011460 <__sflush_r+0x1c>
 8011542:	4407      	add	r7, r0
 8011544:	eba8 0800 	sub.w	r8, r8, r0
 8011548:	e7e9      	b.n	801151e <__sflush_r+0xda>
 801154a:	bf00      	nop
 801154c:	dfbffffe 	.word	0xdfbffffe

08011550 <_fflush_r>:
 8011550:	b538      	push	{r3, r4, r5, lr}
 8011552:	690b      	ldr	r3, [r1, #16]
 8011554:	4605      	mov	r5, r0
 8011556:	460c      	mov	r4, r1
 8011558:	b913      	cbnz	r3, 8011560 <_fflush_r+0x10>
 801155a:	2500      	movs	r5, #0
 801155c:	4628      	mov	r0, r5
 801155e:	bd38      	pop	{r3, r4, r5, pc}
 8011560:	b118      	cbz	r0, 801156a <_fflush_r+0x1a>
 8011562:	6a03      	ldr	r3, [r0, #32]
 8011564:	b90b      	cbnz	r3, 801156a <_fflush_r+0x1a>
 8011566:	f7fc ff3d 	bl	800e3e4 <__sinit>
 801156a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d0f3      	beq.n	801155a <_fflush_r+0xa>
 8011572:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011574:	07d0      	lsls	r0, r2, #31
 8011576:	d404      	bmi.n	8011582 <_fflush_r+0x32>
 8011578:	0599      	lsls	r1, r3, #22
 801157a:	d402      	bmi.n	8011582 <_fflush_r+0x32>
 801157c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801157e:	f7fd f8c8 	bl	800e712 <__retarget_lock_acquire_recursive>
 8011582:	4628      	mov	r0, r5
 8011584:	4621      	mov	r1, r4
 8011586:	f7ff ff5d 	bl	8011444 <__sflush_r>
 801158a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801158c:	07da      	lsls	r2, r3, #31
 801158e:	4605      	mov	r5, r0
 8011590:	d4e4      	bmi.n	801155c <_fflush_r+0xc>
 8011592:	89a3      	ldrh	r3, [r4, #12]
 8011594:	059b      	lsls	r3, r3, #22
 8011596:	d4e1      	bmi.n	801155c <_fflush_r+0xc>
 8011598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801159a:	f7fd f8bb 	bl	800e714 <__retarget_lock_release_recursive>
 801159e:	e7dd      	b.n	801155c <_fflush_r+0xc>

080115a0 <__sccl>:
 80115a0:	b570      	push	{r4, r5, r6, lr}
 80115a2:	780b      	ldrb	r3, [r1, #0]
 80115a4:	4604      	mov	r4, r0
 80115a6:	2b5e      	cmp	r3, #94	; 0x5e
 80115a8:	bf0b      	itete	eq
 80115aa:	784b      	ldrbeq	r3, [r1, #1]
 80115ac:	1c4a      	addne	r2, r1, #1
 80115ae:	1c8a      	addeq	r2, r1, #2
 80115b0:	2100      	movne	r1, #0
 80115b2:	bf08      	it	eq
 80115b4:	2101      	moveq	r1, #1
 80115b6:	3801      	subs	r0, #1
 80115b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80115bc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80115c0:	42a8      	cmp	r0, r5
 80115c2:	d1fb      	bne.n	80115bc <__sccl+0x1c>
 80115c4:	b90b      	cbnz	r3, 80115ca <__sccl+0x2a>
 80115c6:	1e50      	subs	r0, r2, #1
 80115c8:	bd70      	pop	{r4, r5, r6, pc}
 80115ca:	f081 0101 	eor.w	r1, r1, #1
 80115ce:	54e1      	strb	r1, [r4, r3]
 80115d0:	4610      	mov	r0, r2
 80115d2:	4602      	mov	r2, r0
 80115d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80115d8:	2d2d      	cmp	r5, #45	; 0x2d
 80115da:	d005      	beq.n	80115e8 <__sccl+0x48>
 80115dc:	2d5d      	cmp	r5, #93	; 0x5d
 80115de:	d016      	beq.n	801160e <__sccl+0x6e>
 80115e0:	2d00      	cmp	r5, #0
 80115e2:	d0f1      	beq.n	80115c8 <__sccl+0x28>
 80115e4:	462b      	mov	r3, r5
 80115e6:	e7f2      	b.n	80115ce <__sccl+0x2e>
 80115e8:	7846      	ldrb	r6, [r0, #1]
 80115ea:	2e5d      	cmp	r6, #93	; 0x5d
 80115ec:	d0fa      	beq.n	80115e4 <__sccl+0x44>
 80115ee:	42b3      	cmp	r3, r6
 80115f0:	dcf8      	bgt.n	80115e4 <__sccl+0x44>
 80115f2:	3002      	adds	r0, #2
 80115f4:	461a      	mov	r2, r3
 80115f6:	3201      	adds	r2, #1
 80115f8:	4296      	cmp	r6, r2
 80115fa:	54a1      	strb	r1, [r4, r2]
 80115fc:	dcfb      	bgt.n	80115f6 <__sccl+0x56>
 80115fe:	1af2      	subs	r2, r6, r3
 8011600:	3a01      	subs	r2, #1
 8011602:	1c5d      	adds	r5, r3, #1
 8011604:	42b3      	cmp	r3, r6
 8011606:	bfa8      	it	ge
 8011608:	2200      	movge	r2, #0
 801160a:	18ab      	adds	r3, r5, r2
 801160c:	e7e1      	b.n	80115d2 <__sccl+0x32>
 801160e:	4610      	mov	r0, r2
 8011610:	e7da      	b.n	80115c8 <__sccl+0x28>

08011612 <__submore>:
 8011612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011616:	460c      	mov	r4, r1
 8011618:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801161a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801161e:	4299      	cmp	r1, r3
 8011620:	d11d      	bne.n	801165e <__submore+0x4c>
 8011622:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011626:	f7fb ff4f 	bl	800d4c8 <_malloc_r>
 801162a:	b918      	cbnz	r0, 8011634 <__submore+0x22>
 801162c:	f04f 30ff 	mov.w	r0, #4294967295
 8011630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011638:	63a3      	str	r3, [r4, #56]	; 0x38
 801163a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801163e:	6360      	str	r0, [r4, #52]	; 0x34
 8011640:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011644:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011648:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801164c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011650:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011654:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011658:	6020      	str	r0, [r4, #0]
 801165a:	2000      	movs	r0, #0
 801165c:	e7e8      	b.n	8011630 <__submore+0x1e>
 801165e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011660:	0077      	lsls	r7, r6, #1
 8011662:	463a      	mov	r2, r7
 8011664:	f000 fbed 	bl	8011e42 <_realloc_r>
 8011668:	4605      	mov	r5, r0
 801166a:	2800      	cmp	r0, #0
 801166c:	d0de      	beq.n	801162c <__submore+0x1a>
 801166e:	eb00 0806 	add.w	r8, r0, r6
 8011672:	4601      	mov	r1, r0
 8011674:	4632      	mov	r2, r6
 8011676:	4640      	mov	r0, r8
 8011678:	f7fd f84d 	bl	800e716 <memcpy>
 801167c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011680:	f8c4 8000 	str.w	r8, [r4]
 8011684:	e7e9      	b.n	801165a <__submore+0x48>

08011686 <memmove>:
 8011686:	4288      	cmp	r0, r1
 8011688:	b510      	push	{r4, lr}
 801168a:	eb01 0402 	add.w	r4, r1, r2
 801168e:	d902      	bls.n	8011696 <memmove+0x10>
 8011690:	4284      	cmp	r4, r0
 8011692:	4623      	mov	r3, r4
 8011694:	d807      	bhi.n	80116a6 <memmove+0x20>
 8011696:	1e43      	subs	r3, r0, #1
 8011698:	42a1      	cmp	r1, r4
 801169a:	d008      	beq.n	80116ae <memmove+0x28>
 801169c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116a4:	e7f8      	b.n	8011698 <memmove+0x12>
 80116a6:	4402      	add	r2, r0
 80116a8:	4601      	mov	r1, r0
 80116aa:	428a      	cmp	r2, r1
 80116ac:	d100      	bne.n	80116b0 <memmove+0x2a>
 80116ae:	bd10      	pop	{r4, pc}
 80116b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80116b8:	e7f7      	b.n	80116aa <memmove+0x24>

080116ba <strncmp>:
 80116ba:	b510      	push	{r4, lr}
 80116bc:	b16a      	cbz	r2, 80116da <strncmp+0x20>
 80116be:	3901      	subs	r1, #1
 80116c0:	1884      	adds	r4, r0, r2
 80116c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d103      	bne.n	80116d6 <strncmp+0x1c>
 80116ce:	42a0      	cmp	r0, r4
 80116d0:	d001      	beq.n	80116d6 <strncmp+0x1c>
 80116d2:	2a00      	cmp	r2, #0
 80116d4:	d1f5      	bne.n	80116c2 <strncmp+0x8>
 80116d6:	1ad0      	subs	r0, r2, r3
 80116d8:	bd10      	pop	{r4, pc}
 80116da:	4610      	mov	r0, r2
 80116dc:	e7fc      	b.n	80116d8 <strncmp+0x1e>

080116de <strnlen>:
 80116de:	b510      	push	{r4, lr}
 80116e0:	4602      	mov	r2, r0
 80116e2:	4401      	add	r1, r0
 80116e4:	428a      	cmp	r2, r1
 80116e6:	4613      	mov	r3, r2
 80116e8:	d003      	beq.n	80116f2 <strnlen+0x14>
 80116ea:	781c      	ldrb	r4, [r3, #0]
 80116ec:	3201      	adds	r2, #1
 80116ee:	2c00      	cmp	r4, #0
 80116f0:	d1f8      	bne.n	80116e4 <strnlen+0x6>
 80116f2:	1a18      	subs	r0, r3, r0
 80116f4:	bd10      	pop	{r4, pc}
	...

080116f8 <nan>:
 80116f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011700 <nan+0x8>
 80116fc:	4770      	bx	lr
 80116fe:	bf00      	nop
 8011700:	00000000 	.word	0x00000000
 8011704:	7ff80000 	.word	0x7ff80000

08011708 <__assert_func>:
 8011708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801170a:	4614      	mov	r4, r2
 801170c:	461a      	mov	r2, r3
 801170e:	4b09      	ldr	r3, [pc, #36]	; (8011734 <__assert_func+0x2c>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	4605      	mov	r5, r0
 8011714:	68d8      	ldr	r0, [r3, #12]
 8011716:	b14c      	cbz	r4, 801172c <__assert_func+0x24>
 8011718:	4b07      	ldr	r3, [pc, #28]	; (8011738 <__assert_func+0x30>)
 801171a:	9100      	str	r1, [sp, #0]
 801171c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011720:	4906      	ldr	r1, [pc, #24]	; (801173c <__assert_func+0x34>)
 8011722:	462b      	mov	r3, r5
 8011724:	f000 fc3e 	bl	8011fa4 <fiprintf>
 8011728:	f000 fc4e 	bl	8011fc8 <abort>
 801172c:	4b04      	ldr	r3, [pc, #16]	; (8011740 <__assert_func+0x38>)
 801172e:	461c      	mov	r4, r3
 8011730:	e7f3      	b.n	801171a <__assert_func+0x12>
 8011732:	bf00      	nop
 8011734:	20000084 	.word	0x20000084
 8011738:	08012975 	.word	0x08012975
 801173c:	08012982 	.word	0x08012982
 8011740:	080129b0 	.word	0x080129b0

08011744 <_calloc_r>:
 8011744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011746:	fba1 2402 	umull	r2, r4, r1, r2
 801174a:	b94c      	cbnz	r4, 8011760 <_calloc_r+0x1c>
 801174c:	4611      	mov	r1, r2
 801174e:	9201      	str	r2, [sp, #4]
 8011750:	f7fb feba 	bl	800d4c8 <_malloc_r>
 8011754:	9a01      	ldr	r2, [sp, #4]
 8011756:	4605      	mov	r5, r0
 8011758:	b930      	cbnz	r0, 8011768 <_calloc_r+0x24>
 801175a:	4628      	mov	r0, r5
 801175c:	b003      	add	sp, #12
 801175e:	bd30      	pop	{r4, r5, pc}
 8011760:	220c      	movs	r2, #12
 8011762:	6002      	str	r2, [r0, #0]
 8011764:	2500      	movs	r5, #0
 8011766:	e7f8      	b.n	801175a <_calloc_r+0x16>
 8011768:	4621      	mov	r1, r4
 801176a:	f7fc ff02 	bl	800e572 <memset>
 801176e:	e7f4      	b.n	801175a <_calloc_r+0x16>

08011770 <rshift>:
 8011770:	6903      	ldr	r3, [r0, #16]
 8011772:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011776:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801177a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801177e:	f100 0414 	add.w	r4, r0, #20
 8011782:	dd45      	ble.n	8011810 <rshift+0xa0>
 8011784:	f011 011f 	ands.w	r1, r1, #31
 8011788:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801178c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011790:	d10c      	bne.n	80117ac <rshift+0x3c>
 8011792:	f100 0710 	add.w	r7, r0, #16
 8011796:	4629      	mov	r1, r5
 8011798:	42b1      	cmp	r1, r6
 801179a:	d334      	bcc.n	8011806 <rshift+0x96>
 801179c:	1a9b      	subs	r3, r3, r2
 801179e:	009b      	lsls	r3, r3, #2
 80117a0:	1eea      	subs	r2, r5, #3
 80117a2:	4296      	cmp	r6, r2
 80117a4:	bf38      	it	cc
 80117a6:	2300      	movcc	r3, #0
 80117a8:	4423      	add	r3, r4
 80117aa:	e015      	b.n	80117d8 <rshift+0x68>
 80117ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80117b0:	f1c1 0820 	rsb	r8, r1, #32
 80117b4:	40cf      	lsrs	r7, r1
 80117b6:	f105 0e04 	add.w	lr, r5, #4
 80117ba:	46a1      	mov	r9, r4
 80117bc:	4576      	cmp	r6, lr
 80117be:	46f4      	mov	ip, lr
 80117c0:	d815      	bhi.n	80117ee <rshift+0x7e>
 80117c2:	1a9a      	subs	r2, r3, r2
 80117c4:	0092      	lsls	r2, r2, #2
 80117c6:	3a04      	subs	r2, #4
 80117c8:	3501      	adds	r5, #1
 80117ca:	42ae      	cmp	r6, r5
 80117cc:	bf38      	it	cc
 80117ce:	2200      	movcc	r2, #0
 80117d0:	18a3      	adds	r3, r4, r2
 80117d2:	50a7      	str	r7, [r4, r2]
 80117d4:	b107      	cbz	r7, 80117d8 <rshift+0x68>
 80117d6:	3304      	adds	r3, #4
 80117d8:	1b1a      	subs	r2, r3, r4
 80117da:	42a3      	cmp	r3, r4
 80117dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80117e0:	bf08      	it	eq
 80117e2:	2300      	moveq	r3, #0
 80117e4:	6102      	str	r2, [r0, #16]
 80117e6:	bf08      	it	eq
 80117e8:	6143      	streq	r3, [r0, #20]
 80117ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117ee:	f8dc c000 	ldr.w	ip, [ip]
 80117f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80117f6:	ea4c 0707 	orr.w	r7, ip, r7
 80117fa:	f849 7b04 	str.w	r7, [r9], #4
 80117fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011802:	40cf      	lsrs	r7, r1
 8011804:	e7da      	b.n	80117bc <rshift+0x4c>
 8011806:	f851 cb04 	ldr.w	ip, [r1], #4
 801180a:	f847 cf04 	str.w	ip, [r7, #4]!
 801180e:	e7c3      	b.n	8011798 <rshift+0x28>
 8011810:	4623      	mov	r3, r4
 8011812:	e7e1      	b.n	80117d8 <rshift+0x68>

08011814 <__hexdig_fun>:
 8011814:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011818:	2b09      	cmp	r3, #9
 801181a:	d802      	bhi.n	8011822 <__hexdig_fun+0xe>
 801181c:	3820      	subs	r0, #32
 801181e:	b2c0      	uxtb	r0, r0
 8011820:	4770      	bx	lr
 8011822:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011826:	2b05      	cmp	r3, #5
 8011828:	d801      	bhi.n	801182e <__hexdig_fun+0x1a>
 801182a:	3847      	subs	r0, #71	; 0x47
 801182c:	e7f7      	b.n	801181e <__hexdig_fun+0xa>
 801182e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011832:	2b05      	cmp	r3, #5
 8011834:	d801      	bhi.n	801183a <__hexdig_fun+0x26>
 8011836:	3827      	subs	r0, #39	; 0x27
 8011838:	e7f1      	b.n	801181e <__hexdig_fun+0xa>
 801183a:	2000      	movs	r0, #0
 801183c:	4770      	bx	lr
	...

08011840 <__gethex>:
 8011840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011844:	4617      	mov	r7, r2
 8011846:	680a      	ldr	r2, [r1, #0]
 8011848:	b085      	sub	sp, #20
 801184a:	f102 0b02 	add.w	fp, r2, #2
 801184e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011852:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011856:	4681      	mov	r9, r0
 8011858:	468a      	mov	sl, r1
 801185a:	9302      	str	r3, [sp, #8]
 801185c:	32fe      	adds	r2, #254	; 0xfe
 801185e:	eb02 030b 	add.w	r3, r2, fp
 8011862:	46d8      	mov	r8, fp
 8011864:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011868:	9301      	str	r3, [sp, #4]
 801186a:	2830      	cmp	r0, #48	; 0x30
 801186c:	d0f7      	beq.n	801185e <__gethex+0x1e>
 801186e:	f7ff ffd1 	bl	8011814 <__hexdig_fun>
 8011872:	4604      	mov	r4, r0
 8011874:	2800      	cmp	r0, #0
 8011876:	d138      	bne.n	80118ea <__gethex+0xaa>
 8011878:	49a7      	ldr	r1, [pc, #668]	; (8011b18 <__gethex+0x2d8>)
 801187a:	2201      	movs	r2, #1
 801187c:	4640      	mov	r0, r8
 801187e:	f7ff ff1c 	bl	80116ba <strncmp>
 8011882:	4606      	mov	r6, r0
 8011884:	2800      	cmp	r0, #0
 8011886:	d169      	bne.n	801195c <__gethex+0x11c>
 8011888:	f898 0001 	ldrb.w	r0, [r8, #1]
 801188c:	465d      	mov	r5, fp
 801188e:	f7ff ffc1 	bl	8011814 <__hexdig_fun>
 8011892:	2800      	cmp	r0, #0
 8011894:	d064      	beq.n	8011960 <__gethex+0x120>
 8011896:	465a      	mov	r2, fp
 8011898:	7810      	ldrb	r0, [r2, #0]
 801189a:	2830      	cmp	r0, #48	; 0x30
 801189c:	4690      	mov	r8, r2
 801189e:	f102 0201 	add.w	r2, r2, #1
 80118a2:	d0f9      	beq.n	8011898 <__gethex+0x58>
 80118a4:	f7ff ffb6 	bl	8011814 <__hexdig_fun>
 80118a8:	2301      	movs	r3, #1
 80118aa:	fab0 f480 	clz	r4, r0
 80118ae:	0964      	lsrs	r4, r4, #5
 80118b0:	465e      	mov	r6, fp
 80118b2:	9301      	str	r3, [sp, #4]
 80118b4:	4642      	mov	r2, r8
 80118b6:	4615      	mov	r5, r2
 80118b8:	3201      	adds	r2, #1
 80118ba:	7828      	ldrb	r0, [r5, #0]
 80118bc:	f7ff ffaa 	bl	8011814 <__hexdig_fun>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d1f8      	bne.n	80118b6 <__gethex+0x76>
 80118c4:	4994      	ldr	r1, [pc, #592]	; (8011b18 <__gethex+0x2d8>)
 80118c6:	2201      	movs	r2, #1
 80118c8:	4628      	mov	r0, r5
 80118ca:	f7ff fef6 	bl	80116ba <strncmp>
 80118ce:	b978      	cbnz	r0, 80118f0 <__gethex+0xb0>
 80118d0:	b946      	cbnz	r6, 80118e4 <__gethex+0xa4>
 80118d2:	1c6e      	adds	r6, r5, #1
 80118d4:	4632      	mov	r2, r6
 80118d6:	4615      	mov	r5, r2
 80118d8:	3201      	adds	r2, #1
 80118da:	7828      	ldrb	r0, [r5, #0]
 80118dc:	f7ff ff9a 	bl	8011814 <__hexdig_fun>
 80118e0:	2800      	cmp	r0, #0
 80118e2:	d1f8      	bne.n	80118d6 <__gethex+0x96>
 80118e4:	1b73      	subs	r3, r6, r5
 80118e6:	009e      	lsls	r6, r3, #2
 80118e8:	e004      	b.n	80118f4 <__gethex+0xb4>
 80118ea:	2400      	movs	r4, #0
 80118ec:	4626      	mov	r6, r4
 80118ee:	e7e1      	b.n	80118b4 <__gethex+0x74>
 80118f0:	2e00      	cmp	r6, #0
 80118f2:	d1f7      	bne.n	80118e4 <__gethex+0xa4>
 80118f4:	782b      	ldrb	r3, [r5, #0]
 80118f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80118fa:	2b50      	cmp	r3, #80	; 0x50
 80118fc:	d13d      	bne.n	801197a <__gethex+0x13a>
 80118fe:	786b      	ldrb	r3, [r5, #1]
 8011900:	2b2b      	cmp	r3, #43	; 0x2b
 8011902:	d02f      	beq.n	8011964 <__gethex+0x124>
 8011904:	2b2d      	cmp	r3, #45	; 0x2d
 8011906:	d031      	beq.n	801196c <__gethex+0x12c>
 8011908:	1c69      	adds	r1, r5, #1
 801190a:	f04f 0b00 	mov.w	fp, #0
 801190e:	7808      	ldrb	r0, [r1, #0]
 8011910:	f7ff ff80 	bl	8011814 <__hexdig_fun>
 8011914:	1e42      	subs	r2, r0, #1
 8011916:	b2d2      	uxtb	r2, r2
 8011918:	2a18      	cmp	r2, #24
 801191a:	d82e      	bhi.n	801197a <__gethex+0x13a>
 801191c:	f1a0 0210 	sub.w	r2, r0, #16
 8011920:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011924:	f7ff ff76 	bl	8011814 <__hexdig_fun>
 8011928:	f100 3cff 	add.w	ip, r0, #4294967295
 801192c:	fa5f fc8c 	uxtb.w	ip, ip
 8011930:	f1bc 0f18 	cmp.w	ip, #24
 8011934:	d91d      	bls.n	8011972 <__gethex+0x132>
 8011936:	f1bb 0f00 	cmp.w	fp, #0
 801193a:	d000      	beq.n	801193e <__gethex+0xfe>
 801193c:	4252      	negs	r2, r2
 801193e:	4416      	add	r6, r2
 8011940:	f8ca 1000 	str.w	r1, [sl]
 8011944:	b1dc      	cbz	r4, 801197e <__gethex+0x13e>
 8011946:	9b01      	ldr	r3, [sp, #4]
 8011948:	2b00      	cmp	r3, #0
 801194a:	bf14      	ite	ne
 801194c:	f04f 0800 	movne.w	r8, #0
 8011950:	f04f 0806 	moveq.w	r8, #6
 8011954:	4640      	mov	r0, r8
 8011956:	b005      	add	sp, #20
 8011958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801195c:	4645      	mov	r5, r8
 801195e:	4626      	mov	r6, r4
 8011960:	2401      	movs	r4, #1
 8011962:	e7c7      	b.n	80118f4 <__gethex+0xb4>
 8011964:	f04f 0b00 	mov.w	fp, #0
 8011968:	1ca9      	adds	r1, r5, #2
 801196a:	e7d0      	b.n	801190e <__gethex+0xce>
 801196c:	f04f 0b01 	mov.w	fp, #1
 8011970:	e7fa      	b.n	8011968 <__gethex+0x128>
 8011972:	230a      	movs	r3, #10
 8011974:	fb03 0002 	mla	r0, r3, r2, r0
 8011978:	e7d0      	b.n	801191c <__gethex+0xdc>
 801197a:	4629      	mov	r1, r5
 801197c:	e7e0      	b.n	8011940 <__gethex+0x100>
 801197e:	eba5 0308 	sub.w	r3, r5, r8
 8011982:	3b01      	subs	r3, #1
 8011984:	4621      	mov	r1, r4
 8011986:	2b07      	cmp	r3, #7
 8011988:	dc0a      	bgt.n	80119a0 <__gethex+0x160>
 801198a:	4648      	mov	r0, r9
 801198c:	f7fd fd9e 	bl	800f4cc <_Balloc>
 8011990:	4604      	mov	r4, r0
 8011992:	b940      	cbnz	r0, 80119a6 <__gethex+0x166>
 8011994:	4b61      	ldr	r3, [pc, #388]	; (8011b1c <__gethex+0x2dc>)
 8011996:	4602      	mov	r2, r0
 8011998:	21e4      	movs	r1, #228	; 0xe4
 801199a:	4861      	ldr	r0, [pc, #388]	; (8011b20 <__gethex+0x2e0>)
 801199c:	f7ff feb4 	bl	8011708 <__assert_func>
 80119a0:	3101      	adds	r1, #1
 80119a2:	105b      	asrs	r3, r3, #1
 80119a4:	e7ef      	b.n	8011986 <__gethex+0x146>
 80119a6:	f100 0a14 	add.w	sl, r0, #20
 80119aa:	2300      	movs	r3, #0
 80119ac:	495a      	ldr	r1, [pc, #360]	; (8011b18 <__gethex+0x2d8>)
 80119ae:	f8cd a004 	str.w	sl, [sp, #4]
 80119b2:	469b      	mov	fp, r3
 80119b4:	45a8      	cmp	r8, r5
 80119b6:	d342      	bcc.n	8011a3e <__gethex+0x1fe>
 80119b8:	9801      	ldr	r0, [sp, #4]
 80119ba:	f840 bb04 	str.w	fp, [r0], #4
 80119be:	eba0 000a 	sub.w	r0, r0, sl
 80119c2:	1080      	asrs	r0, r0, #2
 80119c4:	6120      	str	r0, [r4, #16]
 80119c6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80119ca:	4658      	mov	r0, fp
 80119cc:	f7fd fe70 	bl	800f6b0 <__hi0bits>
 80119d0:	683d      	ldr	r5, [r7, #0]
 80119d2:	eba8 0000 	sub.w	r0, r8, r0
 80119d6:	42a8      	cmp	r0, r5
 80119d8:	dd59      	ble.n	8011a8e <__gethex+0x24e>
 80119da:	eba0 0805 	sub.w	r8, r0, r5
 80119de:	4641      	mov	r1, r8
 80119e0:	4620      	mov	r0, r4
 80119e2:	f7fe f9ff 	bl	800fde4 <__any_on>
 80119e6:	4683      	mov	fp, r0
 80119e8:	b1b8      	cbz	r0, 8011a1a <__gethex+0x1da>
 80119ea:	f108 33ff 	add.w	r3, r8, #4294967295
 80119ee:	1159      	asrs	r1, r3, #5
 80119f0:	f003 021f 	and.w	r2, r3, #31
 80119f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80119f8:	f04f 0b01 	mov.w	fp, #1
 80119fc:	fa0b f202 	lsl.w	r2, fp, r2
 8011a00:	420a      	tst	r2, r1
 8011a02:	d00a      	beq.n	8011a1a <__gethex+0x1da>
 8011a04:	455b      	cmp	r3, fp
 8011a06:	dd06      	ble.n	8011a16 <__gethex+0x1d6>
 8011a08:	f1a8 0102 	sub.w	r1, r8, #2
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f7fe f9e9 	bl	800fde4 <__any_on>
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d138      	bne.n	8011a88 <__gethex+0x248>
 8011a16:	f04f 0b02 	mov.w	fp, #2
 8011a1a:	4641      	mov	r1, r8
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	f7ff fea7 	bl	8011770 <rshift>
 8011a22:	4446      	add	r6, r8
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	42b3      	cmp	r3, r6
 8011a28:	da41      	bge.n	8011aae <__gethex+0x26e>
 8011a2a:	4621      	mov	r1, r4
 8011a2c:	4648      	mov	r0, r9
 8011a2e:	f7fd fd8d 	bl	800f54c <_Bfree>
 8011a32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a34:	2300      	movs	r3, #0
 8011a36:	6013      	str	r3, [r2, #0]
 8011a38:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011a3c:	e78a      	b.n	8011954 <__gethex+0x114>
 8011a3e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011a42:	2a2e      	cmp	r2, #46	; 0x2e
 8011a44:	d014      	beq.n	8011a70 <__gethex+0x230>
 8011a46:	2b20      	cmp	r3, #32
 8011a48:	d106      	bne.n	8011a58 <__gethex+0x218>
 8011a4a:	9b01      	ldr	r3, [sp, #4]
 8011a4c:	f843 bb04 	str.w	fp, [r3], #4
 8011a50:	f04f 0b00 	mov.w	fp, #0
 8011a54:	9301      	str	r3, [sp, #4]
 8011a56:	465b      	mov	r3, fp
 8011a58:	7828      	ldrb	r0, [r5, #0]
 8011a5a:	9303      	str	r3, [sp, #12]
 8011a5c:	f7ff feda 	bl	8011814 <__hexdig_fun>
 8011a60:	9b03      	ldr	r3, [sp, #12]
 8011a62:	f000 000f 	and.w	r0, r0, #15
 8011a66:	4098      	lsls	r0, r3
 8011a68:	ea4b 0b00 	orr.w	fp, fp, r0
 8011a6c:	3304      	adds	r3, #4
 8011a6e:	e7a1      	b.n	80119b4 <__gethex+0x174>
 8011a70:	45a8      	cmp	r8, r5
 8011a72:	d8e8      	bhi.n	8011a46 <__gethex+0x206>
 8011a74:	2201      	movs	r2, #1
 8011a76:	4628      	mov	r0, r5
 8011a78:	9303      	str	r3, [sp, #12]
 8011a7a:	f7ff fe1e 	bl	80116ba <strncmp>
 8011a7e:	4926      	ldr	r1, [pc, #152]	; (8011b18 <__gethex+0x2d8>)
 8011a80:	9b03      	ldr	r3, [sp, #12]
 8011a82:	2800      	cmp	r0, #0
 8011a84:	d1df      	bne.n	8011a46 <__gethex+0x206>
 8011a86:	e795      	b.n	80119b4 <__gethex+0x174>
 8011a88:	f04f 0b03 	mov.w	fp, #3
 8011a8c:	e7c5      	b.n	8011a1a <__gethex+0x1da>
 8011a8e:	da0b      	bge.n	8011aa8 <__gethex+0x268>
 8011a90:	eba5 0800 	sub.w	r8, r5, r0
 8011a94:	4621      	mov	r1, r4
 8011a96:	4642      	mov	r2, r8
 8011a98:	4648      	mov	r0, r9
 8011a9a:	f7fd ff71 	bl	800f980 <__lshift>
 8011a9e:	eba6 0608 	sub.w	r6, r6, r8
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	f100 0a14 	add.w	sl, r0, #20
 8011aa8:	f04f 0b00 	mov.w	fp, #0
 8011aac:	e7ba      	b.n	8011a24 <__gethex+0x1e4>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	42b3      	cmp	r3, r6
 8011ab2:	dd73      	ble.n	8011b9c <__gethex+0x35c>
 8011ab4:	1b9e      	subs	r6, r3, r6
 8011ab6:	42b5      	cmp	r5, r6
 8011ab8:	dc34      	bgt.n	8011b24 <__gethex+0x2e4>
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2b02      	cmp	r3, #2
 8011abe:	d023      	beq.n	8011b08 <__gethex+0x2c8>
 8011ac0:	2b03      	cmp	r3, #3
 8011ac2:	d025      	beq.n	8011b10 <__gethex+0x2d0>
 8011ac4:	2b01      	cmp	r3, #1
 8011ac6:	d115      	bne.n	8011af4 <__gethex+0x2b4>
 8011ac8:	42b5      	cmp	r5, r6
 8011aca:	d113      	bne.n	8011af4 <__gethex+0x2b4>
 8011acc:	2d01      	cmp	r5, #1
 8011ace:	d10b      	bne.n	8011ae8 <__gethex+0x2a8>
 8011ad0:	9a02      	ldr	r2, [sp, #8]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6013      	str	r3, [r2, #0]
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	6123      	str	r3, [r4, #16]
 8011ada:	f8ca 3000 	str.w	r3, [sl]
 8011ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ae0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011ae4:	601c      	str	r4, [r3, #0]
 8011ae6:	e735      	b.n	8011954 <__gethex+0x114>
 8011ae8:	1e69      	subs	r1, r5, #1
 8011aea:	4620      	mov	r0, r4
 8011aec:	f7fe f97a 	bl	800fde4 <__any_on>
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d1ed      	bne.n	8011ad0 <__gethex+0x290>
 8011af4:	4621      	mov	r1, r4
 8011af6:	4648      	mov	r0, r9
 8011af8:	f7fd fd28 	bl	800f54c <_Bfree>
 8011afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011afe:	2300      	movs	r3, #0
 8011b00:	6013      	str	r3, [r2, #0]
 8011b02:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011b06:	e725      	b.n	8011954 <__gethex+0x114>
 8011b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d1f2      	bne.n	8011af4 <__gethex+0x2b4>
 8011b0e:	e7df      	b.n	8011ad0 <__gethex+0x290>
 8011b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d1dc      	bne.n	8011ad0 <__gethex+0x290>
 8011b16:	e7ed      	b.n	8011af4 <__gethex+0x2b4>
 8011b18:	080127ec 	.word	0x080127ec
 8011b1c:	0801267f 	.word	0x0801267f
 8011b20:	080129b1 	.word	0x080129b1
 8011b24:	f106 38ff 	add.w	r8, r6, #4294967295
 8011b28:	f1bb 0f00 	cmp.w	fp, #0
 8011b2c:	d133      	bne.n	8011b96 <__gethex+0x356>
 8011b2e:	f1b8 0f00 	cmp.w	r8, #0
 8011b32:	d004      	beq.n	8011b3e <__gethex+0x2fe>
 8011b34:	4641      	mov	r1, r8
 8011b36:	4620      	mov	r0, r4
 8011b38:	f7fe f954 	bl	800fde4 <__any_on>
 8011b3c:	4683      	mov	fp, r0
 8011b3e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011b42:	2301      	movs	r3, #1
 8011b44:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011b48:	f008 081f 	and.w	r8, r8, #31
 8011b4c:	fa03 f308 	lsl.w	r3, r3, r8
 8011b50:	4213      	tst	r3, r2
 8011b52:	4631      	mov	r1, r6
 8011b54:	4620      	mov	r0, r4
 8011b56:	bf18      	it	ne
 8011b58:	f04b 0b02 	orrne.w	fp, fp, #2
 8011b5c:	1bad      	subs	r5, r5, r6
 8011b5e:	f7ff fe07 	bl	8011770 <rshift>
 8011b62:	687e      	ldr	r6, [r7, #4]
 8011b64:	f04f 0802 	mov.w	r8, #2
 8011b68:	f1bb 0f00 	cmp.w	fp, #0
 8011b6c:	d04a      	beq.n	8011c04 <__gethex+0x3c4>
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2b02      	cmp	r3, #2
 8011b72:	d016      	beq.n	8011ba2 <__gethex+0x362>
 8011b74:	2b03      	cmp	r3, #3
 8011b76:	d018      	beq.n	8011baa <__gethex+0x36a>
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d109      	bne.n	8011b90 <__gethex+0x350>
 8011b7c:	f01b 0f02 	tst.w	fp, #2
 8011b80:	d006      	beq.n	8011b90 <__gethex+0x350>
 8011b82:	f8da 3000 	ldr.w	r3, [sl]
 8011b86:	ea4b 0b03 	orr.w	fp, fp, r3
 8011b8a:	f01b 0f01 	tst.w	fp, #1
 8011b8e:	d10f      	bne.n	8011bb0 <__gethex+0x370>
 8011b90:	f048 0810 	orr.w	r8, r8, #16
 8011b94:	e036      	b.n	8011c04 <__gethex+0x3c4>
 8011b96:	f04f 0b01 	mov.w	fp, #1
 8011b9a:	e7d0      	b.n	8011b3e <__gethex+0x2fe>
 8011b9c:	f04f 0801 	mov.w	r8, #1
 8011ba0:	e7e2      	b.n	8011b68 <__gethex+0x328>
 8011ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ba4:	f1c3 0301 	rsb	r3, r3, #1
 8011ba8:	930f      	str	r3, [sp, #60]	; 0x3c
 8011baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d0ef      	beq.n	8011b90 <__gethex+0x350>
 8011bb0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011bb4:	f104 0214 	add.w	r2, r4, #20
 8011bb8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011bbc:	9301      	str	r3, [sp, #4]
 8011bbe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	4694      	mov	ip, r2
 8011bc6:	f852 1b04 	ldr.w	r1, [r2], #4
 8011bca:	f1b1 3fff 	cmp.w	r1, #4294967295
 8011bce:	d01e      	beq.n	8011c0e <__gethex+0x3ce>
 8011bd0:	3101      	adds	r1, #1
 8011bd2:	f8cc 1000 	str.w	r1, [ip]
 8011bd6:	f1b8 0f02 	cmp.w	r8, #2
 8011bda:	f104 0214 	add.w	r2, r4, #20
 8011bde:	d13d      	bne.n	8011c5c <__gethex+0x41c>
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	3b01      	subs	r3, #1
 8011be4:	42ab      	cmp	r3, r5
 8011be6:	d10b      	bne.n	8011c00 <__gethex+0x3c0>
 8011be8:	1169      	asrs	r1, r5, #5
 8011bea:	2301      	movs	r3, #1
 8011bec:	f005 051f 	and.w	r5, r5, #31
 8011bf0:	fa03 f505 	lsl.w	r5, r3, r5
 8011bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bf8:	421d      	tst	r5, r3
 8011bfa:	bf18      	it	ne
 8011bfc:	f04f 0801 	movne.w	r8, #1
 8011c00:	f048 0820 	orr.w	r8, r8, #32
 8011c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c06:	601c      	str	r4, [r3, #0]
 8011c08:	9b02      	ldr	r3, [sp, #8]
 8011c0a:	601e      	str	r6, [r3, #0]
 8011c0c:	e6a2      	b.n	8011954 <__gethex+0x114>
 8011c0e:	4290      	cmp	r0, r2
 8011c10:	f842 3c04 	str.w	r3, [r2, #-4]
 8011c14:	d8d6      	bhi.n	8011bc4 <__gethex+0x384>
 8011c16:	68a2      	ldr	r2, [r4, #8]
 8011c18:	4593      	cmp	fp, r2
 8011c1a:	db17      	blt.n	8011c4c <__gethex+0x40c>
 8011c1c:	6861      	ldr	r1, [r4, #4]
 8011c1e:	4648      	mov	r0, r9
 8011c20:	3101      	adds	r1, #1
 8011c22:	f7fd fc53 	bl	800f4cc <_Balloc>
 8011c26:	4682      	mov	sl, r0
 8011c28:	b918      	cbnz	r0, 8011c32 <__gethex+0x3f2>
 8011c2a:	4b1b      	ldr	r3, [pc, #108]	; (8011c98 <__gethex+0x458>)
 8011c2c:	4602      	mov	r2, r0
 8011c2e:	2184      	movs	r1, #132	; 0x84
 8011c30:	e6b3      	b.n	801199a <__gethex+0x15a>
 8011c32:	6922      	ldr	r2, [r4, #16]
 8011c34:	3202      	adds	r2, #2
 8011c36:	f104 010c 	add.w	r1, r4, #12
 8011c3a:	0092      	lsls	r2, r2, #2
 8011c3c:	300c      	adds	r0, #12
 8011c3e:	f7fc fd6a 	bl	800e716 <memcpy>
 8011c42:	4621      	mov	r1, r4
 8011c44:	4648      	mov	r0, r9
 8011c46:	f7fd fc81 	bl	800f54c <_Bfree>
 8011c4a:	4654      	mov	r4, sl
 8011c4c:	6922      	ldr	r2, [r4, #16]
 8011c4e:	1c51      	adds	r1, r2, #1
 8011c50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011c54:	6121      	str	r1, [r4, #16]
 8011c56:	2101      	movs	r1, #1
 8011c58:	6151      	str	r1, [r2, #20]
 8011c5a:	e7bc      	b.n	8011bd6 <__gethex+0x396>
 8011c5c:	6921      	ldr	r1, [r4, #16]
 8011c5e:	4559      	cmp	r1, fp
 8011c60:	dd0b      	ble.n	8011c7a <__gethex+0x43a>
 8011c62:	2101      	movs	r1, #1
 8011c64:	4620      	mov	r0, r4
 8011c66:	f7ff fd83 	bl	8011770 <rshift>
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	3601      	adds	r6, #1
 8011c6e:	42b3      	cmp	r3, r6
 8011c70:	f6ff aedb 	blt.w	8011a2a <__gethex+0x1ea>
 8011c74:	f04f 0801 	mov.w	r8, #1
 8011c78:	e7c2      	b.n	8011c00 <__gethex+0x3c0>
 8011c7a:	f015 051f 	ands.w	r5, r5, #31
 8011c7e:	d0f9      	beq.n	8011c74 <__gethex+0x434>
 8011c80:	9b01      	ldr	r3, [sp, #4]
 8011c82:	441a      	add	r2, r3
 8011c84:	f1c5 0520 	rsb	r5, r5, #32
 8011c88:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8011c8c:	f7fd fd10 	bl	800f6b0 <__hi0bits>
 8011c90:	42a8      	cmp	r0, r5
 8011c92:	dbe6      	blt.n	8011c62 <__gethex+0x422>
 8011c94:	e7ee      	b.n	8011c74 <__gethex+0x434>
 8011c96:	bf00      	nop
 8011c98:	0801267f 	.word	0x0801267f

08011c9c <L_shift>:
 8011c9c:	f1c2 0208 	rsb	r2, r2, #8
 8011ca0:	0092      	lsls	r2, r2, #2
 8011ca2:	b570      	push	{r4, r5, r6, lr}
 8011ca4:	f1c2 0620 	rsb	r6, r2, #32
 8011ca8:	6843      	ldr	r3, [r0, #4]
 8011caa:	6804      	ldr	r4, [r0, #0]
 8011cac:	fa03 f506 	lsl.w	r5, r3, r6
 8011cb0:	432c      	orrs	r4, r5
 8011cb2:	40d3      	lsrs	r3, r2
 8011cb4:	6004      	str	r4, [r0, #0]
 8011cb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8011cba:	4288      	cmp	r0, r1
 8011cbc:	d3f4      	bcc.n	8011ca8 <L_shift+0xc>
 8011cbe:	bd70      	pop	{r4, r5, r6, pc}

08011cc0 <__match>:
 8011cc0:	b530      	push	{r4, r5, lr}
 8011cc2:	6803      	ldr	r3, [r0, #0]
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cca:	b914      	cbnz	r4, 8011cd2 <__match+0x12>
 8011ccc:	6003      	str	r3, [r0, #0]
 8011cce:	2001      	movs	r0, #1
 8011cd0:	bd30      	pop	{r4, r5, pc}
 8011cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011cda:	2d19      	cmp	r5, #25
 8011cdc:	bf98      	it	ls
 8011cde:	3220      	addls	r2, #32
 8011ce0:	42a2      	cmp	r2, r4
 8011ce2:	d0f0      	beq.n	8011cc6 <__match+0x6>
 8011ce4:	2000      	movs	r0, #0
 8011ce6:	e7f3      	b.n	8011cd0 <__match+0x10>

08011ce8 <__hexnan>:
 8011ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cec:	680b      	ldr	r3, [r1, #0]
 8011cee:	6801      	ldr	r1, [r0, #0]
 8011cf0:	115e      	asrs	r6, r3, #5
 8011cf2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011cf6:	f013 031f 	ands.w	r3, r3, #31
 8011cfa:	b087      	sub	sp, #28
 8011cfc:	bf18      	it	ne
 8011cfe:	3604      	addne	r6, #4
 8011d00:	2500      	movs	r5, #0
 8011d02:	1f37      	subs	r7, r6, #4
 8011d04:	4682      	mov	sl, r0
 8011d06:	4690      	mov	r8, r2
 8011d08:	9301      	str	r3, [sp, #4]
 8011d0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011d0e:	46b9      	mov	r9, r7
 8011d10:	463c      	mov	r4, r7
 8011d12:	9502      	str	r5, [sp, #8]
 8011d14:	46ab      	mov	fp, r5
 8011d16:	784a      	ldrb	r2, [r1, #1]
 8011d18:	1c4b      	adds	r3, r1, #1
 8011d1a:	9303      	str	r3, [sp, #12]
 8011d1c:	b342      	cbz	r2, 8011d70 <__hexnan+0x88>
 8011d1e:	4610      	mov	r0, r2
 8011d20:	9105      	str	r1, [sp, #20]
 8011d22:	9204      	str	r2, [sp, #16]
 8011d24:	f7ff fd76 	bl	8011814 <__hexdig_fun>
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	d14f      	bne.n	8011dcc <__hexnan+0xe4>
 8011d2c:	9a04      	ldr	r2, [sp, #16]
 8011d2e:	9905      	ldr	r1, [sp, #20]
 8011d30:	2a20      	cmp	r2, #32
 8011d32:	d818      	bhi.n	8011d66 <__hexnan+0x7e>
 8011d34:	9b02      	ldr	r3, [sp, #8]
 8011d36:	459b      	cmp	fp, r3
 8011d38:	dd13      	ble.n	8011d62 <__hexnan+0x7a>
 8011d3a:	454c      	cmp	r4, r9
 8011d3c:	d206      	bcs.n	8011d4c <__hexnan+0x64>
 8011d3e:	2d07      	cmp	r5, #7
 8011d40:	dc04      	bgt.n	8011d4c <__hexnan+0x64>
 8011d42:	462a      	mov	r2, r5
 8011d44:	4649      	mov	r1, r9
 8011d46:	4620      	mov	r0, r4
 8011d48:	f7ff ffa8 	bl	8011c9c <L_shift>
 8011d4c:	4544      	cmp	r4, r8
 8011d4e:	d950      	bls.n	8011df2 <__hexnan+0x10a>
 8011d50:	2300      	movs	r3, #0
 8011d52:	f1a4 0904 	sub.w	r9, r4, #4
 8011d56:	f844 3c04 	str.w	r3, [r4, #-4]
 8011d5a:	f8cd b008 	str.w	fp, [sp, #8]
 8011d5e:	464c      	mov	r4, r9
 8011d60:	461d      	mov	r5, r3
 8011d62:	9903      	ldr	r1, [sp, #12]
 8011d64:	e7d7      	b.n	8011d16 <__hexnan+0x2e>
 8011d66:	2a29      	cmp	r2, #41	; 0x29
 8011d68:	d155      	bne.n	8011e16 <__hexnan+0x12e>
 8011d6a:	3102      	adds	r1, #2
 8011d6c:	f8ca 1000 	str.w	r1, [sl]
 8011d70:	f1bb 0f00 	cmp.w	fp, #0
 8011d74:	d04f      	beq.n	8011e16 <__hexnan+0x12e>
 8011d76:	454c      	cmp	r4, r9
 8011d78:	d206      	bcs.n	8011d88 <__hexnan+0xa0>
 8011d7a:	2d07      	cmp	r5, #7
 8011d7c:	dc04      	bgt.n	8011d88 <__hexnan+0xa0>
 8011d7e:	462a      	mov	r2, r5
 8011d80:	4649      	mov	r1, r9
 8011d82:	4620      	mov	r0, r4
 8011d84:	f7ff ff8a 	bl	8011c9c <L_shift>
 8011d88:	4544      	cmp	r4, r8
 8011d8a:	d934      	bls.n	8011df6 <__hexnan+0x10e>
 8011d8c:	f1a8 0204 	sub.w	r2, r8, #4
 8011d90:	4623      	mov	r3, r4
 8011d92:	f853 1b04 	ldr.w	r1, [r3], #4
 8011d96:	f842 1f04 	str.w	r1, [r2, #4]!
 8011d9a:	429f      	cmp	r7, r3
 8011d9c:	d2f9      	bcs.n	8011d92 <__hexnan+0xaa>
 8011d9e:	1b3b      	subs	r3, r7, r4
 8011da0:	f023 0303 	bic.w	r3, r3, #3
 8011da4:	3304      	adds	r3, #4
 8011da6:	3e03      	subs	r6, #3
 8011da8:	3401      	adds	r4, #1
 8011daa:	42a6      	cmp	r6, r4
 8011dac:	bf38      	it	cc
 8011dae:	2304      	movcc	r3, #4
 8011db0:	4443      	add	r3, r8
 8011db2:	2200      	movs	r2, #0
 8011db4:	f843 2b04 	str.w	r2, [r3], #4
 8011db8:	429f      	cmp	r7, r3
 8011dba:	d2fb      	bcs.n	8011db4 <__hexnan+0xcc>
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	b91b      	cbnz	r3, 8011dc8 <__hexnan+0xe0>
 8011dc0:	4547      	cmp	r7, r8
 8011dc2:	d126      	bne.n	8011e12 <__hexnan+0x12a>
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	603b      	str	r3, [r7, #0]
 8011dc8:	2005      	movs	r0, #5
 8011dca:	e025      	b.n	8011e18 <__hexnan+0x130>
 8011dcc:	3501      	adds	r5, #1
 8011dce:	2d08      	cmp	r5, #8
 8011dd0:	f10b 0b01 	add.w	fp, fp, #1
 8011dd4:	dd06      	ble.n	8011de4 <__hexnan+0xfc>
 8011dd6:	4544      	cmp	r4, r8
 8011dd8:	d9c3      	bls.n	8011d62 <__hexnan+0x7a>
 8011dda:	2300      	movs	r3, #0
 8011ddc:	f844 3c04 	str.w	r3, [r4, #-4]
 8011de0:	2501      	movs	r5, #1
 8011de2:	3c04      	subs	r4, #4
 8011de4:	6822      	ldr	r2, [r4, #0]
 8011de6:	f000 000f 	and.w	r0, r0, #15
 8011dea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011dee:	6020      	str	r0, [r4, #0]
 8011df0:	e7b7      	b.n	8011d62 <__hexnan+0x7a>
 8011df2:	2508      	movs	r5, #8
 8011df4:	e7b5      	b.n	8011d62 <__hexnan+0x7a>
 8011df6:	9b01      	ldr	r3, [sp, #4]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d0df      	beq.n	8011dbc <__hexnan+0xd4>
 8011dfc:	f1c3 0320 	rsb	r3, r3, #32
 8011e00:	f04f 32ff 	mov.w	r2, #4294967295
 8011e04:	40da      	lsrs	r2, r3
 8011e06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011e0a:	4013      	ands	r3, r2
 8011e0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8011e10:	e7d4      	b.n	8011dbc <__hexnan+0xd4>
 8011e12:	3f04      	subs	r7, #4
 8011e14:	e7d2      	b.n	8011dbc <__hexnan+0xd4>
 8011e16:	2004      	movs	r0, #4
 8011e18:	b007      	add	sp, #28
 8011e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e1e <__ascii_mbtowc>:
 8011e1e:	b082      	sub	sp, #8
 8011e20:	b901      	cbnz	r1, 8011e24 <__ascii_mbtowc+0x6>
 8011e22:	a901      	add	r1, sp, #4
 8011e24:	b142      	cbz	r2, 8011e38 <__ascii_mbtowc+0x1a>
 8011e26:	b14b      	cbz	r3, 8011e3c <__ascii_mbtowc+0x1e>
 8011e28:	7813      	ldrb	r3, [r2, #0]
 8011e2a:	600b      	str	r3, [r1, #0]
 8011e2c:	7812      	ldrb	r2, [r2, #0]
 8011e2e:	1e10      	subs	r0, r2, #0
 8011e30:	bf18      	it	ne
 8011e32:	2001      	movne	r0, #1
 8011e34:	b002      	add	sp, #8
 8011e36:	4770      	bx	lr
 8011e38:	4610      	mov	r0, r2
 8011e3a:	e7fb      	b.n	8011e34 <__ascii_mbtowc+0x16>
 8011e3c:	f06f 0001 	mvn.w	r0, #1
 8011e40:	e7f8      	b.n	8011e34 <__ascii_mbtowc+0x16>

08011e42 <_realloc_r>:
 8011e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e46:	4680      	mov	r8, r0
 8011e48:	4614      	mov	r4, r2
 8011e4a:	460e      	mov	r6, r1
 8011e4c:	b921      	cbnz	r1, 8011e58 <_realloc_r+0x16>
 8011e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e52:	4611      	mov	r1, r2
 8011e54:	f7fb bb38 	b.w	800d4c8 <_malloc_r>
 8011e58:	b92a      	cbnz	r2, 8011e66 <_realloc_r+0x24>
 8011e5a:	f7fd faeb 	bl	800f434 <_free_r>
 8011e5e:	4625      	mov	r5, r4
 8011e60:	4628      	mov	r0, r5
 8011e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e66:	f000 f8b6 	bl	8011fd6 <_malloc_usable_size_r>
 8011e6a:	4284      	cmp	r4, r0
 8011e6c:	4607      	mov	r7, r0
 8011e6e:	d802      	bhi.n	8011e76 <_realloc_r+0x34>
 8011e70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e74:	d812      	bhi.n	8011e9c <_realloc_r+0x5a>
 8011e76:	4621      	mov	r1, r4
 8011e78:	4640      	mov	r0, r8
 8011e7a:	f7fb fb25 	bl	800d4c8 <_malloc_r>
 8011e7e:	4605      	mov	r5, r0
 8011e80:	2800      	cmp	r0, #0
 8011e82:	d0ed      	beq.n	8011e60 <_realloc_r+0x1e>
 8011e84:	42bc      	cmp	r4, r7
 8011e86:	4622      	mov	r2, r4
 8011e88:	4631      	mov	r1, r6
 8011e8a:	bf28      	it	cs
 8011e8c:	463a      	movcs	r2, r7
 8011e8e:	f7fc fc42 	bl	800e716 <memcpy>
 8011e92:	4631      	mov	r1, r6
 8011e94:	4640      	mov	r0, r8
 8011e96:	f7fd facd 	bl	800f434 <_free_r>
 8011e9a:	e7e1      	b.n	8011e60 <_realloc_r+0x1e>
 8011e9c:	4635      	mov	r5, r6
 8011e9e:	e7df      	b.n	8011e60 <_realloc_r+0x1e>

08011ea0 <_strtoul_l.constprop.0>:
 8011ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ea4:	4f36      	ldr	r7, [pc, #216]	; (8011f80 <_strtoul_l.constprop.0+0xe0>)
 8011ea6:	4686      	mov	lr, r0
 8011ea8:	460d      	mov	r5, r1
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011eb0:	5d3e      	ldrb	r6, [r7, r4]
 8011eb2:	f016 0608 	ands.w	r6, r6, #8
 8011eb6:	d1f8      	bne.n	8011eaa <_strtoul_l.constprop.0+0xa>
 8011eb8:	2c2d      	cmp	r4, #45	; 0x2d
 8011eba:	d130      	bne.n	8011f1e <_strtoul_l.constprop.0+0x7e>
 8011ebc:	782c      	ldrb	r4, [r5, #0]
 8011ebe:	2601      	movs	r6, #1
 8011ec0:	1c85      	adds	r5, r0, #2
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d057      	beq.n	8011f76 <_strtoul_l.constprop.0+0xd6>
 8011ec6:	2b10      	cmp	r3, #16
 8011ec8:	d109      	bne.n	8011ede <_strtoul_l.constprop.0+0x3e>
 8011eca:	2c30      	cmp	r4, #48	; 0x30
 8011ecc:	d107      	bne.n	8011ede <_strtoul_l.constprop.0+0x3e>
 8011ece:	7828      	ldrb	r0, [r5, #0]
 8011ed0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011ed4:	2858      	cmp	r0, #88	; 0x58
 8011ed6:	d149      	bne.n	8011f6c <_strtoul_l.constprop.0+0xcc>
 8011ed8:	786c      	ldrb	r4, [r5, #1]
 8011eda:	2310      	movs	r3, #16
 8011edc:	3502      	adds	r5, #2
 8011ede:	f04f 38ff 	mov.w	r8, #4294967295
 8011ee2:	2700      	movs	r7, #0
 8011ee4:	fbb8 f8f3 	udiv	r8, r8, r3
 8011ee8:	fb03 f908 	mul.w	r9, r3, r8
 8011eec:	ea6f 0909 	mvn.w	r9, r9
 8011ef0:	4638      	mov	r0, r7
 8011ef2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011ef6:	f1bc 0f09 	cmp.w	ip, #9
 8011efa:	d815      	bhi.n	8011f28 <_strtoul_l.constprop.0+0x88>
 8011efc:	4664      	mov	r4, ip
 8011efe:	42a3      	cmp	r3, r4
 8011f00:	dd23      	ble.n	8011f4a <_strtoul_l.constprop.0+0xaa>
 8011f02:	f1b7 3fff 	cmp.w	r7, #4294967295
 8011f06:	d007      	beq.n	8011f18 <_strtoul_l.constprop.0+0x78>
 8011f08:	4580      	cmp	r8, r0
 8011f0a:	d31b      	bcc.n	8011f44 <_strtoul_l.constprop.0+0xa4>
 8011f0c:	d101      	bne.n	8011f12 <_strtoul_l.constprop.0+0x72>
 8011f0e:	45a1      	cmp	r9, r4
 8011f10:	db18      	blt.n	8011f44 <_strtoul_l.constprop.0+0xa4>
 8011f12:	fb00 4003 	mla	r0, r0, r3, r4
 8011f16:	2701      	movs	r7, #1
 8011f18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f1c:	e7e9      	b.n	8011ef2 <_strtoul_l.constprop.0+0x52>
 8011f1e:	2c2b      	cmp	r4, #43	; 0x2b
 8011f20:	bf04      	itt	eq
 8011f22:	782c      	ldrbeq	r4, [r5, #0]
 8011f24:	1c85      	addeq	r5, r0, #2
 8011f26:	e7cc      	b.n	8011ec2 <_strtoul_l.constprop.0+0x22>
 8011f28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011f2c:	f1bc 0f19 	cmp.w	ip, #25
 8011f30:	d801      	bhi.n	8011f36 <_strtoul_l.constprop.0+0x96>
 8011f32:	3c37      	subs	r4, #55	; 0x37
 8011f34:	e7e3      	b.n	8011efe <_strtoul_l.constprop.0+0x5e>
 8011f36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011f3a:	f1bc 0f19 	cmp.w	ip, #25
 8011f3e:	d804      	bhi.n	8011f4a <_strtoul_l.constprop.0+0xaa>
 8011f40:	3c57      	subs	r4, #87	; 0x57
 8011f42:	e7dc      	b.n	8011efe <_strtoul_l.constprop.0+0x5e>
 8011f44:	f04f 37ff 	mov.w	r7, #4294967295
 8011f48:	e7e6      	b.n	8011f18 <_strtoul_l.constprop.0+0x78>
 8011f4a:	1c7b      	adds	r3, r7, #1
 8011f4c:	d106      	bne.n	8011f5c <_strtoul_l.constprop.0+0xbc>
 8011f4e:	2322      	movs	r3, #34	; 0x22
 8011f50:	f8ce 3000 	str.w	r3, [lr]
 8011f54:	4638      	mov	r0, r7
 8011f56:	b932      	cbnz	r2, 8011f66 <_strtoul_l.constprop.0+0xc6>
 8011f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f5c:	b106      	cbz	r6, 8011f60 <_strtoul_l.constprop.0+0xc0>
 8011f5e:	4240      	negs	r0, r0
 8011f60:	2a00      	cmp	r2, #0
 8011f62:	d0f9      	beq.n	8011f58 <_strtoul_l.constprop.0+0xb8>
 8011f64:	b107      	cbz	r7, 8011f68 <_strtoul_l.constprop.0+0xc8>
 8011f66:	1e69      	subs	r1, r5, #1
 8011f68:	6011      	str	r1, [r2, #0]
 8011f6a:	e7f5      	b.n	8011f58 <_strtoul_l.constprop.0+0xb8>
 8011f6c:	2430      	movs	r4, #48	; 0x30
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d1b5      	bne.n	8011ede <_strtoul_l.constprop.0+0x3e>
 8011f72:	2308      	movs	r3, #8
 8011f74:	e7b3      	b.n	8011ede <_strtoul_l.constprop.0+0x3e>
 8011f76:	2c30      	cmp	r4, #48	; 0x30
 8011f78:	d0a9      	beq.n	8011ece <_strtoul_l.constprop.0+0x2e>
 8011f7a:	230a      	movs	r3, #10
 8011f7c:	e7af      	b.n	8011ede <_strtoul_l.constprop.0+0x3e>
 8011f7e:	bf00      	nop
 8011f80:	08012841 	.word	0x08012841

08011f84 <_strtoul_r>:
 8011f84:	f7ff bf8c 	b.w	8011ea0 <_strtoul_l.constprop.0>

08011f88 <__ascii_wctomb>:
 8011f88:	b149      	cbz	r1, 8011f9e <__ascii_wctomb+0x16>
 8011f8a:	2aff      	cmp	r2, #255	; 0xff
 8011f8c:	bf85      	ittet	hi
 8011f8e:	238a      	movhi	r3, #138	; 0x8a
 8011f90:	6003      	strhi	r3, [r0, #0]
 8011f92:	700a      	strbls	r2, [r1, #0]
 8011f94:	f04f 30ff 	movhi.w	r0, #4294967295
 8011f98:	bf98      	it	ls
 8011f9a:	2001      	movls	r0, #1
 8011f9c:	4770      	bx	lr
 8011f9e:	4608      	mov	r0, r1
 8011fa0:	4770      	bx	lr
	...

08011fa4 <fiprintf>:
 8011fa4:	b40e      	push	{r1, r2, r3}
 8011fa6:	b503      	push	{r0, r1, lr}
 8011fa8:	4601      	mov	r1, r0
 8011faa:	ab03      	add	r3, sp, #12
 8011fac:	4805      	ldr	r0, [pc, #20]	; (8011fc4 <fiprintf+0x20>)
 8011fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fb2:	6800      	ldr	r0, [r0, #0]
 8011fb4:	9301      	str	r3, [sp, #4]
 8011fb6:	f000 f83f 	bl	8012038 <_vfiprintf_r>
 8011fba:	b002      	add	sp, #8
 8011fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fc0:	b003      	add	sp, #12
 8011fc2:	4770      	bx	lr
 8011fc4:	20000084 	.word	0x20000084

08011fc8 <abort>:
 8011fc8:	b508      	push	{r3, lr}
 8011fca:	2006      	movs	r0, #6
 8011fcc:	f000 fa0c 	bl	80123e8 <raise>
 8011fd0:	2001      	movs	r0, #1
 8011fd2:	f7ef ffe9 	bl	8001fa8 <_exit>

08011fd6 <_malloc_usable_size_r>:
 8011fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fda:	1f18      	subs	r0, r3, #4
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	bfbc      	itt	lt
 8011fe0:	580b      	ldrlt	r3, [r1, r0]
 8011fe2:	18c0      	addlt	r0, r0, r3
 8011fe4:	4770      	bx	lr

08011fe6 <__sfputc_r>:
 8011fe6:	6893      	ldr	r3, [r2, #8]
 8011fe8:	3b01      	subs	r3, #1
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	b410      	push	{r4}
 8011fee:	6093      	str	r3, [r2, #8]
 8011ff0:	da08      	bge.n	8012004 <__sfputc_r+0x1e>
 8011ff2:	6994      	ldr	r4, [r2, #24]
 8011ff4:	42a3      	cmp	r3, r4
 8011ff6:	db01      	blt.n	8011ffc <__sfputc_r+0x16>
 8011ff8:	290a      	cmp	r1, #10
 8011ffa:	d103      	bne.n	8012004 <__sfputc_r+0x1e>
 8011ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012000:	f000 b934 	b.w	801226c <__swbuf_r>
 8012004:	6813      	ldr	r3, [r2, #0]
 8012006:	1c58      	adds	r0, r3, #1
 8012008:	6010      	str	r0, [r2, #0]
 801200a:	7019      	strb	r1, [r3, #0]
 801200c:	4608      	mov	r0, r1
 801200e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012012:	4770      	bx	lr

08012014 <__sfputs_r>:
 8012014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012016:	4606      	mov	r6, r0
 8012018:	460f      	mov	r7, r1
 801201a:	4614      	mov	r4, r2
 801201c:	18d5      	adds	r5, r2, r3
 801201e:	42ac      	cmp	r4, r5
 8012020:	d101      	bne.n	8012026 <__sfputs_r+0x12>
 8012022:	2000      	movs	r0, #0
 8012024:	e007      	b.n	8012036 <__sfputs_r+0x22>
 8012026:	f814 1b01 	ldrb.w	r1, [r4], #1
 801202a:	463a      	mov	r2, r7
 801202c:	4630      	mov	r0, r6
 801202e:	f7ff ffda 	bl	8011fe6 <__sfputc_r>
 8012032:	1c43      	adds	r3, r0, #1
 8012034:	d1f3      	bne.n	801201e <__sfputs_r+0xa>
 8012036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012038 <_vfiprintf_r>:
 8012038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801203c:	460d      	mov	r5, r1
 801203e:	b09d      	sub	sp, #116	; 0x74
 8012040:	4614      	mov	r4, r2
 8012042:	4698      	mov	r8, r3
 8012044:	4606      	mov	r6, r0
 8012046:	b118      	cbz	r0, 8012050 <_vfiprintf_r+0x18>
 8012048:	6a03      	ldr	r3, [r0, #32]
 801204a:	b90b      	cbnz	r3, 8012050 <_vfiprintf_r+0x18>
 801204c:	f7fc f9ca 	bl	800e3e4 <__sinit>
 8012050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012052:	07d9      	lsls	r1, r3, #31
 8012054:	d405      	bmi.n	8012062 <_vfiprintf_r+0x2a>
 8012056:	89ab      	ldrh	r3, [r5, #12]
 8012058:	059a      	lsls	r2, r3, #22
 801205a:	d402      	bmi.n	8012062 <_vfiprintf_r+0x2a>
 801205c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801205e:	f7fc fb58 	bl	800e712 <__retarget_lock_acquire_recursive>
 8012062:	89ab      	ldrh	r3, [r5, #12]
 8012064:	071b      	lsls	r3, r3, #28
 8012066:	d501      	bpl.n	801206c <_vfiprintf_r+0x34>
 8012068:	692b      	ldr	r3, [r5, #16]
 801206a:	b99b      	cbnz	r3, 8012094 <_vfiprintf_r+0x5c>
 801206c:	4629      	mov	r1, r5
 801206e:	4630      	mov	r0, r6
 8012070:	f000 f93a 	bl	80122e8 <__swsetup_r>
 8012074:	b170      	cbz	r0, 8012094 <_vfiprintf_r+0x5c>
 8012076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012078:	07dc      	lsls	r4, r3, #31
 801207a:	d504      	bpl.n	8012086 <_vfiprintf_r+0x4e>
 801207c:	f04f 30ff 	mov.w	r0, #4294967295
 8012080:	b01d      	add	sp, #116	; 0x74
 8012082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012086:	89ab      	ldrh	r3, [r5, #12]
 8012088:	0598      	lsls	r0, r3, #22
 801208a:	d4f7      	bmi.n	801207c <_vfiprintf_r+0x44>
 801208c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801208e:	f7fc fb41 	bl	800e714 <__retarget_lock_release_recursive>
 8012092:	e7f3      	b.n	801207c <_vfiprintf_r+0x44>
 8012094:	2300      	movs	r3, #0
 8012096:	9309      	str	r3, [sp, #36]	; 0x24
 8012098:	2320      	movs	r3, #32
 801209a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801209e:	f8cd 800c 	str.w	r8, [sp, #12]
 80120a2:	2330      	movs	r3, #48	; 0x30
 80120a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012258 <_vfiprintf_r+0x220>
 80120a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120ac:	f04f 0901 	mov.w	r9, #1
 80120b0:	4623      	mov	r3, r4
 80120b2:	469a      	mov	sl, r3
 80120b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120b8:	b10a      	cbz	r2, 80120be <_vfiprintf_r+0x86>
 80120ba:	2a25      	cmp	r2, #37	; 0x25
 80120bc:	d1f9      	bne.n	80120b2 <_vfiprintf_r+0x7a>
 80120be:	ebba 0b04 	subs.w	fp, sl, r4
 80120c2:	d00b      	beq.n	80120dc <_vfiprintf_r+0xa4>
 80120c4:	465b      	mov	r3, fp
 80120c6:	4622      	mov	r2, r4
 80120c8:	4629      	mov	r1, r5
 80120ca:	4630      	mov	r0, r6
 80120cc:	f7ff ffa2 	bl	8012014 <__sfputs_r>
 80120d0:	3001      	adds	r0, #1
 80120d2:	f000 80a9 	beq.w	8012228 <_vfiprintf_r+0x1f0>
 80120d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120d8:	445a      	add	r2, fp
 80120da:	9209      	str	r2, [sp, #36]	; 0x24
 80120dc:	f89a 3000 	ldrb.w	r3, [sl]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	f000 80a1 	beq.w	8012228 <_vfiprintf_r+0x1f0>
 80120e6:	2300      	movs	r3, #0
 80120e8:	f04f 32ff 	mov.w	r2, #4294967295
 80120ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120f0:	f10a 0a01 	add.w	sl, sl, #1
 80120f4:	9304      	str	r3, [sp, #16]
 80120f6:	9307      	str	r3, [sp, #28]
 80120f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120fc:	931a      	str	r3, [sp, #104]	; 0x68
 80120fe:	4654      	mov	r4, sl
 8012100:	2205      	movs	r2, #5
 8012102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012106:	4854      	ldr	r0, [pc, #336]	; (8012258 <_vfiprintf_r+0x220>)
 8012108:	f7ee f862 	bl	80001d0 <memchr>
 801210c:	9a04      	ldr	r2, [sp, #16]
 801210e:	b9d8      	cbnz	r0, 8012148 <_vfiprintf_r+0x110>
 8012110:	06d1      	lsls	r1, r2, #27
 8012112:	bf44      	itt	mi
 8012114:	2320      	movmi	r3, #32
 8012116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801211a:	0713      	lsls	r3, r2, #28
 801211c:	bf44      	itt	mi
 801211e:	232b      	movmi	r3, #43	; 0x2b
 8012120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012124:	f89a 3000 	ldrb.w	r3, [sl]
 8012128:	2b2a      	cmp	r3, #42	; 0x2a
 801212a:	d015      	beq.n	8012158 <_vfiprintf_r+0x120>
 801212c:	9a07      	ldr	r2, [sp, #28]
 801212e:	4654      	mov	r4, sl
 8012130:	2000      	movs	r0, #0
 8012132:	f04f 0c0a 	mov.w	ip, #10
 8012136:	4621      	mov	r1, r4
 8012138:	f811 3b01 	ldrb.w	r3, [r1], #1
 801213c:	3b30      	subs	r3, #48	; 0x30
 801213e:	2b09      	cmp	r3, #9
 8012140:	d94d      	bls.n	80121de <_vfiprintf_r+0x1a6>
 8012142:	b1b0      	cbz	r0, 8012172 <_vfiprintf_r+0x13a>
 8012144:	9207      	str	r2, [sp, #28]
 8012146:	e014      	b.n	8012172 <_vfiprintf_r+0x13a>
 8012148:	eba0 0308 	sub.w	r3, r0, r8
 801214c:	fa09 f303 	lsl.w	r3, r9, r3
 8012150:	4313      	orrs	r3, r2
 8012152:	9304      	str	r3, [sp, #16]
 8012154:	46a2      	mov	sl, r4
 8012156:	e7d2      	b.n	80120fe <_vfiprintf_r+0xc6>
 8012158:	9b03      	ldr	r3, [sp, #12]
 801215a:	1d19      	adds	r1, r3, #4
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	9103      	str	r1, [sp, #12]
 8012160:	2b00      	cmp	r3, #0
 8012162:	bfbb      	ittet	lt
 8012164:	425b      	neglt	r3, r3
 8012166:	f042 0202 	orrlt.w	r2, r2, #2
 801216a:	9307      	strge	r3, [sp, #28]
 801216c:	9307      	strlt	r3, [sp, #28]
 801216e:	bfb8      	it	lt
 8012170:	9204      	strlt	r2, [sp, #16]
 8012172:	7823      	ldrb	r3, [r4, #0]
 8012174:	2b2e      	cmp	r3, #46	; 0x2e
 8012176:	d10c      	bne.n	8012192 <_vfiprintf_r+0x15a>
 8012178:	7863      	ldrb	r3, [r4, #1]
 801217a:	2b2a      	cmp	r3, #42	; 0x2a
 801217c:	d134      	bne.n	80121e8 <_vfiprintf_r+0x1b0>
 801217e:	9b03      	ldr	r3, [sp, #12]
 8012180:	1d1a      	adds	r2, r3, #4
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	9203      	str	r2, [sp, #12]
 8012186:	2b00      	cmp	r3, #0
 8012188:	bfb8      	it	lt
 801218a:	f04f 33ff 	movlt.w	r3, #4294967295
 801218e:	3402      	adds	r4, #2
 8012190:	9305      	str	r3, [sp, #20]
 8012192:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012268 <_vfiprintf_r+0x230>
 8012196:	7821      	ldrb	r1, [r4, #0]
 8012198:	2203      	movs	r2, #3
 801219a:	4650      	mov	r0, sl
 801219c:	f7ee f818 	bl	80001d0 <memchr>
 80121a0:	b138      	cbz	r0, 80121b2 <_vfiprintf_r+0x17a>
 80121a2:	9b04      	ldr	r3, [sp, #16]
 80121a4:	eba0 000a 	sub.w	r0, r0, sl
 80121a8:	2240      	movs	r2, #64	; 0x40
 80121aa:	4082      	lsls	r2, r0
 80121ac:	4313      	orrs	r3, r2
 80121ae:	3401      	adds	r4, #1
 80121b0:	9304      	str	r3, [sp, #16]
 80121b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121b6:	4829      	ldr	r0, [pc, #164]	; (801225c <_vfiprintf_r+0x224>)
 80121b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121bc:	2206      	movs	r2, #6
 80121be:	f7ee f807 	bl	80001d0 <memchr>
 80121c2:	2800      	cmp	r0, #0
 80121c4:	d03f      	beq.n	8012246 <_vfiprintf_r+0x20e>
 80121c6:	4b26      	ldr	r3, [pc, #152]	; (8012260 <_vfiprintf_r+0x228>)
 80121c8:	bb1b      	cbnz	r3, 8012212 <_vfiprintf_r+0x1da>
 80121ca:	9b03      	ldr	r3, [sp, #12]
 80121cc:	3307      	adds	r3, #7
 80121ce:	f023 0307 	bic.w	r3, r3, #7
 80121d2:	3308      	adds	r3, #8
 80121d4:	9303      	str	r3, [sp, #12]
 80121d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121d8:	443b      	add	r3, r7
 80121da:	9309      	str	r3, [sp, #36]	; 0x24
 80121dc:	e768      	b.n	80120b0 <_vfiprintf_r+0x78>
 80121de:	fb0c 3202 	mla	r2, ip, r2, r3
 80121e2:	460c      	mov	r4, r1
 80121e4:	2001      	movs	r0, #1
 80121e6:	e7a6      	b.n	8012136 <_vfiprintf_r+0xfe>
 80121e8:	2300      	movs	r3, #0
 80121ea:	3401      	adds	r4, #1
 80121ec:	9305      	str	r3, [sp, #20]
 80121ee:	4619      	mov	r1, r3
 80121f0:	f04f 0c0a 	mov.w	ip, #10
 80121f4:	4620      	mov	r0, r4
 80121f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121fa:	3a30      	subs	r2, #48	; 0x30
 80121fc:	2a09      	cmp	r2, #9
 80121fe:	d903      	bls.n	8012208 <_vfiprintf_r+0x1d0>
 8012200:	2b00      	cmp	r3, #0
 8012202:	d0c6      	beq.n	8012192 <_vfiprintf_r+0x15a>
 8012204:	9105      	str	r1, [sp, #20]
 8012206:	e7c4      	b.n	8012192 <_vfiprintf_r+0x15a>
 8012208:	fb0c 2101 	mla	r1, ip, r1, r2
 801220c:	4604      	mov	r4, r0
 801220e:	2301      	movs	r3, #1
 8012210:	e7f0      	b.n	80121f4 <_vfiprintf_r+0x1bc>
 8012212:	ab03      	add	r3, sp, #12
 8012214:	9300      	str	r3, [sp, #0]
 8012216:	462a      	mov	r2, r5
 8012218:	4b12      	ldr	r3, [pc, #72]	; (8012264 <_vfiprintf_r+0x22c>)
 801221a:	a904      	add	r1, sp, #16
 801221c:	4630      	mov	r0, r6
 801221e:	f7fb fa7f 	bl	800d720 <_printf_float>
 8012222:	4607      	mov	r7, r0
 8012224:	1c78      	adds	r0, r7, #1
 8012226:	d1d6      	bne.n	80121d6 <_vfiprintf_r+0x19e>
 8012228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801222a:	07d9      	lsls	r1, r3, #31
 801222c:	d405      	bmi.n	801223a <_vfiprintf_r+0x202>
 801222e:	89ab      	ldrh	r3, [r5, #12]
 8012230:	059a      	lsls	r2, r3, #22
 8012232:	d402      	bmi.n	801223a <_vfiprintf_r+0x202>
 8012234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012236:	f7fc fa6d 	bl	800e714 <__retarget_lock_release_recursive>
 801223a:	89ab      	ldrh	r3, [r5, #12]
 801223c:	065b      	lsls	r3, r3, #25
 801223e:	f53f af1d 	bmi.w	801207c <_vfiprintf_r+0x44>
 8012242:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012244:	e71c      	b.n	8012080 <_vfiprintf_r+0x48>
 8012246:	ab03      	add	r3, sp, #12
 8012248:	9300      	str	r3, [sp, #0]
 801224a:	462a      	mov	r2, r5
 801224c:	4b05      	ldr	r3, [pc, #20]	; (8012264 <_vfiprintf_r+0x22c>)
 801224e:	a904      	add	r1, sp, #16
 8012250:	4630      	mov	r0, r6
 8012252:	f7fb fd09 	bl	800dc68 <_printf_i>
 8012256:	e7e4      	b.n	8012222 <_vfiprintf_r+0x1ea>
 8012258:	08012941 	.word	0x08012941
 801225c:	0801294b 	.word	0x0801294b
 8012260:	0800d721 	.word	0x0800d721
 8012264:	08012015 	.word	0x08012015
 8012268:	08012947 	.word	0x08012947

0801226c <__swbuf_r>:
 801226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801226e:	460e      	mov	r6, r1
 8012270:	4614      	mov	r4, r2
 8012272:	4605      	mov	r5, r0
 8012274:	b118      	cbz	r0, 801227e <__swbuf_r+0x12>
 8012276:	6a03      	ldr	r3, [r0, #32]
 8012278:	b90b      	cbnz	r3, 801227e <__swbuf_r+0x12>
 801227a:	f7fc f8b3 	bl	800e3e4 <__sinit>
 801227e:	69a3      	ldr	r3, [r4, #24]
 8012280:	60a3      	str	r3, [r4, #8]
 8012282:	89a3      	ldrh	r3, [r4, #12]
 8012284:	071a      	lsls	r2, r3, #28
 8012286:	d525      	bpl.n	80122d4 <__swbuf_r+0x68>
 8012288:	6923      	ldr	r3, [r4, #16]
 801228a:	b31b      	cbz	r3, 80122d4 <__swbuf_r+0x68>
 801228c:	6823      	ldr	r3, [r4, #0]
 801228e:	6922      	ldr	r2, [r4, #16]
 8012290:	1a98      	subs	r0, r3, r2
 8012292:	6963      	ldr	r3, [r4, #20]
 8012294:	b2f6      	uxtb	r6, r6
 8012296:	4283      	cmp	r3, r0
 8012298:	4637      	mov	r7, r6
 801229a:	dc04      	bgt.n	80122a6 <__swbuf_r+0x3a>
 801229c:	4621      	mov	r1, r4
 801229e:	4628      	mov	r0, r5
 80122a0:	f7ff f956 	bl	8011550 <_fflush_r>
 80122a4:	b9e0      	cbnz	r0, 80122e0 <__swbuf_r+0x74>
 80122a6:	68a3      	ldr	r3, [r4, #8]
 80122a8:	3b01      	subs	r3, #1
 80122aa:	60a3      	str	r3, [r4, #8]
 80122ac:	6823      	ldr	r3, [r4, #0]
 80122ae:	1c5a      	adds	r2, r3, #1
 80122b0:	6022      	str	r2, [r4, #0]
 80122b2:	701e      	strb	r6, [r3, #0]
 80122b4:	6962      	ldr	r2, [r4, #20]
 80122b6:	1c43      	adds	r3, r0, #1
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d004      	beq.n	80122c6 <__swbuf_r+0x5a>
 80122bc:	89a3      	ldrh	r3, [r4, #12]
 80122be:	07db      	lsls	r3, r3, #31
 80122c0:	d506      	bpl.n	80122d0 <__swbuf_r+0x64>
 80122c2:	2e0a      	cmp	r6, #10
 80122c4:	d104      	bne.n	80122d0 <__swbuf_r+0x64>
 80122c6:	4621      	mov	r1, r4
 80122c8:	4628      	mov	r0, r5
 80122ca:	f7ff f941 	bl	8011550 <_fflush_r>
 80122ce:	b938      	cbnz	r0, 80122e0 <__swbuf_r+0x74>
 80122d0:	4638      	mov	r0, r7
 80122d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122d4:	4621      	mov	r1, r4
 80122d6:	4628      	mov	r0, r5
 80122d8:	f000 f806 	bl	80122e8 <__swsetup_r>
 80122dc:	2800      	cmp	r0, #0
 80122de:	d0d5      	beq.n	801228c <__swbuf_r+0x20>
 80122e0:	f04f 37ff 	mov.w	r7, #4294967295
 80122e4:	e7f4      	b.n	80122d0 <__swbuf_r+0x64>
	...

080122e8 <__swsetup_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4b2a      	ldr	r3, [pc, #168]	; (8012394 <__swsetup_r+0xac>)
 80122ec:	4605      	mov	r5, r0
 80122ee:	6818      	ldr	r0, [r3, #0]
 80122f0:	460c      	mov	r4, r1
 80122f2:	b118      	cbz	r0, 80122fc <__swsetup_r+0x14>
 80122f4:	6a03      	ldr	r3, [r0, #32]
 80122f6:	b90b      	cbnz	r3, 80122fc <__swsetup_r+0x14>
 80122f8:	f7fc f874 	bl	800e3e4 <__sinit>
 80122fc:	89a3      	ldrh	r3, [r4, #12]
 80122fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012302:	0718      	lsls	r0, r3, #28
 8012304:	d422      	bmi.n	801234c <__swsetup_r+0x64>
 8012306:	06d9      	lsls	r1, r3, #27
 8012308:	d407      	bmi.n	801231a <__swsetup_r+0x32>
 801230a:	2309      	movs	r3, #9
 801230c:	602b      	str	r3, [r5, #0]
 801230e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012312:	81a3      	strh	r3, [r4, #12]
 8012314:	f04f 30ff 	mov.w	r0, #4294967295
 8012318:	e034      	b.n	8012384 <__swsetup_r+0x9c>
 801231a:	0758      	lsls	r0, r3, #29
 801231c:	d512      	bpl.n	8012344 <__swsetup_r+0x5c>
 801231e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012320:	b141      	cbz	r1, 8012334 <__swsetup_r+0x4c>
 8012322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012326:	4299      	cmp	r1, r3
 8012328:	d002      	beq.n	8012330 <__swsetup_r+0x48>
 801232a:	4628      	mov	r0, r5
 801232c:	f7fd f882 	bl	800f434 <_free_r>
 8012330:	2300      	movs	r3, #0
 8012332:	6363      	str	r3, [r4, #52]	; 0x34
 8012334:	89a3      	ldrh	r3, [r4, #12]
 8012336:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801233a:	81a3      	strh	r3, [r4, #12]
 801233c:	2300      	movs	r3, #0
 801233e:	6063      	str	r3, [r4, #4]
 8012340:	6923      	ldr	r3, [r4, #16]
 8012342:	6023      	str	r3, [r4, #0]
 8012344:	89a3      	ldrh	r3, [r4, #12]
 8012346:	f043 0308 	orr.w	r3, r3, #8
 801234a:	81a3      	strh	r3, [r4, #12]
 801234c:	6923      	ldr	r3, [r4, #16]
 801234e:	b94b      	cbnz	r3, 8012364 <__swsetup_r+0x7c>
 8012350:	89a3      	ldrh	r3, [r4, #12]
 8012352:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801235a:	d003      	beq.n	8012364 <__swsetup_r+0x7c>
 801235c:	4621      	mov	r1, r4
 801235e:	4628      	mov	r0, r5
 8012360:	f000 f884 	bl	801246c <__smakebuf_r>
 8012364:	89a0      	ldrh	r0, [r4, #12]
 8012366:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801236a:	f010 0301 	ands.w	r3, r0, #1
 801236e:	d00a      	beq.n	8012386 <__swsetup_r+0x9e>
 8012370:	2300      	movs	r3, #0
 8012372:	60a3      	str	r3, [r4, #8]
 8012374:	6963      	ldr	r3, [r4, #20]
 8012376:	425b      	negs	r3, r3
 8012378:	61a3      	str	r3, [r4, #24]
 801237a:	6923      	ldr	r3, [r4, #16]
 801237c:	b943      	cbnz	r3, 8012390 <__swsetup_r+0xa8>
 801237e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012382:	d1c4      	bne.n	801230e <__swsetup_r+0x26>
 8012384:	bd38      	pop	{r3, r4, r5, pc}
 8012386:	0781      	lsls	r1, r0, #30
 8012388:	bf58      	it	pl
 801238a:	6963      	ldrpl	r3, [r4, #20]
 801238c:	60a3      	str	r3, [r4, #8]
 801238e:	e7f4      	b.n	801237a <__swsetup_r+0x92>
 8012390:	2000      	movs	r0, #0
 8012392:	e7f7      	b.n	8012384 <__swsetup_r+0x9c>
 8012394:	20000084 	.word	0x20000084

08012398 <_raise_r>:
 8012398:	291f      	cmp	r1, #31
 801239a:	b538      	push	{r3, r4, r5, lr}
 801239c:	4604      	mov	r4, r0
 801239e:	460d      	mov	r5, r1
 80123a0:	d904      	bls.n	80123ac <_raise_r+0x14>
 80123a2:	2316      	movs	r3, #22
 80123a4:	6003      	str	r3, [r0, #0]
 80123a6:	f04f 30ff 	mov.w	r0, #4294967295
 80123aa:	bd38      	pop	{r3, r4, r5, pc}
 80123ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80123ae:	b112      	cbz	r2, 80123b6 <_raise_r+0x1e>
 80123b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80123b4:	b94b      	cbnz	r3, 80123ca <_raise_r+0x32>
 80123b6:	4620      	mov	r0, r4
 80123b8:	f000 f830 	bl	801241c <_getpid_r>
 80123bc:	462a      	mov	r2, r5
 80123be:	4601      	mov	r1, r0
 80123c0:	4620      	mov	r0, r4
 80123c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123c6:	f000 b817 	b.w	80123f8 <_kill_r>
 80123ca:	2b01      	cmp	r3, #1
 80123cc:	d00a      	beq.n	80123e4 <_raise_r+0x4c>
 80123ce:	1c59      	adds	r1, r3, #1
 80123d0:	d103      	bne.n	80123da <_raise_r+0x42>
 80123d2:	2316      	movs	r3, #22
 80123d4:	6003      	str	r3, [r0, #0]
 80123d6:	2001      	movs	r0, #1
 80123d8:	e7e7      	b.n	80123aa <_raise_r+0x12>
 80123da:	2400      	movs	r4, #0
 80123dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80123e0:	4628      	mov	r0, r5
 80123e2:	4798      	blx	r3
 80123e4:	2000      	movs	r0, #0
 80123e6:	e7e0      	b.n	80123aa <_raise_r+0x12>

080123e8 <raise>:
 80123e8:	4b02      	ldr	r3, [pc, #8]	; (80123f4 <raise+0xc>)
 80123ea:	4601      	mov	r1, r0
 80123ec:	6818      	ldr	r0, [r3, #0]
 80123ee:	f7ff bfd3 	b.w	8012398 <_raise_r>
 80123f2:	bf00      	nop
 80123f4:	20000084 	.word	0x20000084

080123f8 <_kill_r>:
 80123f8:	b538      	push	{r3, r4, r5, lr}
 80123fa:	4d07      	ldr	r5, [pc, #28]	; (8012418 <_kill_r+0x20>)
 80123fc:	2300      	movs	r3, #0
 80123fe:	4604      	mov	r4, r0
 8012400:	4608      	mov	r0, r1
 8012402:	4611      	mov	r1, r2
 8012404:	602b      	str	r3, [r5, #0]
 8012406:	f7ef fdbf 	bl	8001f88 <_kill>
 801240a:	1c43      	adds	r3, r0, #1
 801240c:	d102      	bne.n	8012414 <_kill_r+0x1c>
 801240e:	682b      	ldr	r3, [r5, #0]
 8012410:	b103      	cbz	r3, 8012414 <_kill_r+0x1c>
 8012412:	6023      	str	r3, [r4, #0]
 8012414:	bd38      	pop	{r3, r4, r5, pc}
 8012416:	bf00      	nop
 8012418:	200010e4 	.word	0x200010e4

0801241c <_getpid_r>:
 801241c:	f7ef bdac 	b.w	8001f78 <_getpid>

08012420 <__swhatbuf_r>:
 8012420:	b570      	push	{r4, r5, r6, lr}
 8012422:	460c      	mov	r4, r1
 8012424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012428:	2900      	cmp	r1, #0
 801242a:	b096      	sub	sp, #88	; 0x58
 801242c:	4615      	mov	r5, r2
 801242e:	461e      	mov	r6, r3
 8012430:	da0d      	bge.n	801244e <__swhatbuf_r+0x2e>
 8012432:	89a3      	ldrh	r3, [r4, #12]
 8012434:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012438:	f04f 0100 	mov.w	r1, #0
 801243c:	bf0c      	ite	eq
 801243e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012442:	2340      	movne	r3, #64	; 0x40
 8012444:	2000      	movs	r0, #0
 8012446:	6031      	str	r1, [r6, #0]
 8012448:	602b      	str	r3, [r5, #0]
 801244a:	b016      	add	sp, #88	; 0x58
 801244c:	bd70      	pop	{r4, r5, r6, pc}
 801244e:	466a      	mov	r2, sp
 8012450:	f000 f848 	bl	80124e4 <_fstat_r>
 8012454:	2800      	cmp	r0, #0
 8012456:	dbec      	blt.n	8012432 <__swhatbuf_r+0x12>
 8012458:	9901      	ldr	r1, [sp, #4]
 801245a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801245e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012462:	4259      	negs	r1, r3
 8012464:	4159      	adcs	r1, r3
 8012466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801246a:	e7eb      	b.n	8012444 <__swhatbuf_r+0x24>

0801246c <__smakebuf_r>:
 801246c:	898b      	ldrh	r3, [r1, #12]
 801246e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012470:	079d      	lsls	r5, r3, #30
 8012472:	4606      	mov	r6, r0
 8012474:	460c      	mov	r4, r1
 8012476:	d507      	bpl.n	8012488 <__smakebuf_r+0x1c>
 8012478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801247c:	6023      	str	r3, [r4, #0]
 801247e:	6123      	str	r3, [r4, #16]
 8012480:	2301      	movs	r3, #1
 8012482:	6163      	str	r3, [r4, #20]
 8012484:	b002      	add	sp, #8
 8012486:	bd70      	pop	{r4, r5, r6, pc}
 8012488:	ab01      	add	r3, sp, #4
 801248a:	466a      	mov	r2, sp
 801248c:	f7ff ffc8 	bl	8012420 <__swhatbuf_r>
 8012490:	9900      	ldr	r1, [sp, #0]
 8012492:	4605      	mov	r5, r0
 8012494:	4630      	mov	r0, r6
 8012496:	f7fb f817 	bl	800d4c8 <_malloc_r>
 801249a:	b948      	cbnz	r0, 80124b0 <__smakebuf_r+0x44>
 801249c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124a0:	059a      	lsls	r2, r3, #22
 80124a2:	d4ef      	bmi.n	8012484 <__smakebuf_r+0x18>
 80124a4:	f023 0303 	bic.w	r3, r3, #3
 80124a8:	f043 0302 	orr.w	r3, r3, #2
 80124ac:	81a3      	strh	r3, [r4, #12]
 80124ae:	e7e3      	b.n	8012478 <__smakebuf_r+0xc>
 80124b0:	89a3      	ldrh	r3, [r4, #12]
 80124b2:	6020      	str	r0, [r4, #0]
 80124b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124b8:	81a3      	strh	r3, [r4, #12]
 80124ba:	9b00      	ldr	r3, [sp, #0]
 80124bc:	6163      	str	r3, [r4, #20]
 80124be:	9b01      	ldr	r3, [sp, #4]
 80124c0:	6120      	str	r0, [r4, #16]
 80124c2:	b15b      	cbz	r3, 80124dc <__smakebuf_r+0x70>
 80124c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124c8:	4630      	mov	r0, r6
 80124ca:	f000 f81d 	bl	8012508 <_isatty_r>
 80124ce:	b128      	cbz	r0, 80124dc <__smakebuf_r+0x70>
 80124d0:	89a3      	ldrh	r3, [r4, #12]
 80124d2:	f023 0303 	bic.w	r3, r3, #3
 80124d6:	f043 0301 	orr.w	r3, r3, #1
 80124da:	81a3      	strh	r3, [r4, #12]
 80124dc:	89a3      	ldrh	r3, [r4, #12]
 80124de:	431d      	orrs	r5, r3
 80124e0:	81a5      	strh	r5, [r4, #12]
 80124e2:	e7cf      	b.n	8012484 <__smakebuf_r+0x18>

080124e4 <_fstat_r>:
 80124e4:	b538      	push	{r3, r4, r5, lr}
 80124e6:	4d07      	ldr	r5, [pc, #28]	; (8012504 <_fstat_r+0x20>)
 80124e8:	2300      	movs	r3, #0
 80124ea:	4604      	mov	r4, r0
 80124ec:	4608      	mov	r0, r1
 80124ee:	4611      	mov	r1, r2
 80124f0:	602b      	str	r3, [r5, #0]
 80124f2:	f7ef fda8 	bl	8002046 <_fstat>
 80124f6:	1c43      	adds	r3, r0, #1
 80124f8:	d102      	bne.n	8012500 <_fstat_r+0x1c>
 80124fa:	682b      	ldr	r3, [r5, #0]
 80124fc:	b103      	cbz	r3, 8012500 <_fstat_r+0x1c>
 80124fe:	6023      	str	r3, [r4, #0]
 8012500:	bd38      	pop	{r3, r4, r5, pc}
 8012502:	bf00      	nop
 8012504:	200010e4 	.word	0x200010e4

08012508 <_isatty_r>:
 8012508:	b538      	push	{r3, r4, r5, lr}
 801250a:	4d06      	ldr	r5, [pc, #24]	; (8012524 <_isatty_r+0x1c>)
 801250c:	2300      	movs	r3, #0
 801250e:	4604      	mov	r4, r0
 8012510:	4608      	mov	r0, r1
 8012512:	602b      	str	r3, [r5, #0]
 8012514:	f7ef fda7 	bl	8002066 <_isatty>
 8012518:	1c43      	adds	r3, r0, #1
 801251a:	d102      	bne.n	8012522 <_isatty_r+0x1a>
 801251c:	682b      	ldr	r3, [r5, #0]
 801251e:	b103      	cbz	r3, 8012522 <_isatty_r+0x1a>
 8012520:	6023      	str	r3, [r4, #0]
 8012522:	bd38      	pop	{r3, r4, r5, pc}
 8012524:	200010e4 	.word	0x200010e4

08012528 <_init>:
 8012528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801252a:	bf00      	nop
 801252c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801252e:	bc08      	pop	{r3}
 8012530:	469e      	mov	lr, r3
 8012532:	4770      	bx	lr

08012534 <_fini>:
 8012534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012536:	bf00      	nop
 8012538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801253a:	bc08      	pop	{r3}
 801253c:	469e      	mov	lr, r3
 801253e:	4770      	bx	lr
